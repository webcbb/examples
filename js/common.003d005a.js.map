{"version":3,"file":"common.003d005a.js","sources":["../../../../proc7ts/primitives/src/array/element-or-array.ts","../../../../proc7ts/primitives/src/array/set-of-elements.ts","../../../../proc7ts/primitives/src/array/array-of-elements.ts","../../../../proc7ts/primitives/src/class/super-class-of.ts","../../../../proc7ts/primitives/src/fn/asis.ts","../../../../proc7ts/primitives/src/fn/merge-functions.ts","../../../../proc7ts/primitives/src/fn/noop.ts","../../../../proc7ts/primitives/src/value/value-providers.ts","../../../../proc7ts/primitives/src/value/lazy-value.ts","../../../../proc7ts/primitives/src/type/presence.ts","../../../../proc7ts/call-thru/src/next-call.ts","../../../../proc7ts/call-thru/src/passes/arg.ts","../../../../proc7ts/call-thru/src/passes/args.ts","../../../../proc7ts/call-thru/src/passes/skip.ts","../../../../proc7ts/a-iterable/src/util.ts","../../../../proc7ts/a-iterable/src/array.ts","../../../../proc7ts/a-iterable/src/termination.ts","../../../../proc7ts/a-iterable/src/transform.ts","../../../../proc7ts/a-iterable/src/none.ts","../../../../proc7ts/a-iterable/src/objects.ts","../../../../proc7ts/context-values/src/context-key.ts","../../../../proc7ts/context-values/src/context-key-error.ts","../../../../proc7ts/context-values/src/context-value-spec.ts","../../../../proc7ts/context-values/src/context-values.ts","../../../../proc7ts/context-values/src/context-registry.ts","../../../../proc7ts/context-values/src/iterative-context-key.ts","../../../../proc7ts/context-values/src/multi-context-key.ts","../../../../proc7ts/context-values/src/simple-context-key.ts","../../../../proc7ts/context-values/src/single-context-key.ts","../../../../proc7ts/fun-events/src/base/event-keeper.ts","../../../../proc7ts/fun-events/src/base/event-supply.ts","../../../../proc7ts/fun-events/src/base/event-receiver.ts","../../../../proc7ts/fun-events/src/base/event-notifier.impl.ts","../../../../proc7ts/fun-events/src/base/event-notifier.ts","../../../../proc7ts/fun-events/src/base/event-sender.ts","../../../../proc7ts/fun-events/src/base/no-event-supply.ts","../../../../proc7ts/fun-events/src/base/send-events-to.ts","../../../../proc7ts/fun-events/src/impl/once.ts","../../../../proc7ts/fun-events/src/impl/share.ts","../../../../proc7ts/fun-events/src/impl/thru.ts","../../../../proc7ts/fun-events/src/impl/till-off.ts","../../../../proc7ts/fun-events/src/base/impl/never-receive.ts","../../../../proc7ts/fun-events/src/on-event.ts","../../../../proc7ts/fun-events/src/impl/then.ts","../../../../proc7ts/fun-events/src/after-event.ts","../../../../proc7ts/fun-events/src/keepers/after-sent.ts","../../../../proc7ts/fun-events/src/keepers/after-supplied.ts","../../../../proc7ts/fun-events/src/keepers/after-all.ts","../../../../proc7ts/fun-events/src/keepers/after-each.ts","../../../../proc7ts/fun-events/src/keepers/after-the.ts","../../../../proc7ts/fun-events/src/passes/next-after-event.ts","../../../../proc7ts/fun-events/src/senders/event-emitter.ts","../../../../proc7ts/fun-events/src/senders/on-never.ts","../../../../proc7ts/fun-events/src/senders/on-supplied.ts","../../../../proc7ts/fun-events/src/senders/on-any.ts","../../../../proc7ts/fun-events/src/senders/on-async.ts","../../../../proc7ts/fun-events/src/senders/on-any-async.ts","../../../../proc7ts/fun-events/src/senders/on-promise.ts","../../../../proc7ts/fun-events/src/base/impl/always-receive-value.ts","../../../../proc7ts/fun-events/src/state/state-path.ts","../../../../proc7ts/fun-events/src/state/state-tracker.ts","../../../../proc7ts/fun-events/src/value/value-tracker.ts","../../../../proc7ts/fun-events/src/value/track-value.ts","../../../../proc7ts/fun-events/src/value/value-sync.ts","../../../../proc7ts/namespace-aliaser/src/naming.ts","../../../../proc7ts/namespace-aliaser/src/namings.ts","../../../../proc7ts/namespace-aliaser/src/namespace.ts","../../../../proc7ts/namespace-aliaser/src/name.ts","../../../../proc7ts/namespace-aliaser/src/namespace-aliaser.ts","../../../../proc7ts/fun-events/src/dom/on-dom-event.ts","../../../../proc7ts/fun-events/src/dom/dom-event-dispatcher.ts","../../../../proc7ts/context-values/src/updatable/context-destroyed.ts","../../../../proc7ts/context-values/src/updatable/context-supply.ts","../../../../proc7ts/context-values/src/updatable/context-up-key.ts","../../../../proc7ts/context-values/src/updatable/fn-context-key.ts","../../../../proc7ts/context-values/src/updatable/single-context-up-key.ts","../../../../proc7ts/render-scheduler/src/render-schedule.ts","../../../../proc7ts/render-scheduler/src/custom-render-scheduler.ts","../../../../proc7ts/render-scheduler/src/render-queue.ts","../../../../proc7ts/render-scheduler/src/animation-render-scheduler.ts","../../../../proc7ts/render-scheduler/src/immediate-render-scheduler.ts","../../../../proc7ts/render-scheduler/src/render-scheduler.ts","../../../wesib/src/boot/bootstrap-context.key.impl.ts","../../../wesib/src/boot/bootstrap-context.ts","../../../wesib/src/boot/bootstrap-default.ts","../../../wesib/src/common/decorators.ts","../../../../proc7ts/primitives/src/reflection/property-accessor.ts","../../../wesib/src/common/is-element.ts","../../../wesib/src/common/meta-accessor.ts","../../../wesib/src/common/promises.ts","../../../wesib/src/feature/feature-def.ts","../../../wesib/src/feature/feature.decorator.ts","../../../wesib/src/feature/feature-context.ts","../../../wesib/src/feature/feature-needs-error.ts","../../../wesib/src/feature/feature-ref.ts","../../../wesib/src/component/component-def.ts","../../../wesib/src/component/component.decorator.ts","../../../wesib/src/component/component-context.key.impl.ts","../../../wesib/src/component/component-event.key.impl.ts","../../../wesib/src/component/content-root.ts","../../../wesib/src/component/state-updater.ts","../../../wesib/src/component/component-context.ts","../../../wesib/src/component/component-event.ts","../../../wesib/src/component/component-property.decorator.ts","../../../wesib/src/boot/impl/bootstrap-context-registry.impl.ts","../../../wesib/src/boot/impl/component-context-registry.impl.ts","../../../wesib/src/boot/impl/definition-context-registry.impl.ts","../../../wesib/src/boot/impl/post-def-setup.impl.ts","../../../wesib/src/boot/globals/bootstrap-window.ts","../../../wesib/src/boot/globals/bootstrap-root.ts","../../../wesib/src/boot/globals/default-namespace-aliaser.ts","../../../wesib/src/boot/globals/default-render-scheduler.ts","../../../wesib/src/boot/globals/element-adapter.ts","../../../wesib/src/boot/globals/element-observer.ts","../../../wesib/src/boot/impl/definition-context.symbol.impl.ts","../../../wesib/src/component/definition/custom-elements.ts","../../../wesib/src/component/definition/definition.context.key.impl.ts","../../../wesib/src/component/definition/element-def.ts","../../../wesib/src/component/definition/definition-context.ts","../../../wesib/src/boot/impl/component-context.impl.ts","../../../wesib/src/boot/impl/component-mount.impl.ts","../../../wesib/src/component/component-mount.ts","../../../wesib/src/boot/impl/custom-element.impl.ts","../../../wesib/src/boot/impl/when-component.impl.ts","../../../wesib/src/boot/impl/definition-context.impl.ts","../../../wesib/src/boot/impl/element-builder.impl.ts","../../../wesib/src/boot/impl/unloader.impl.ts","../../../wesib/src/feature/loader/component-registry.impl.ts","../../../wesib/src/feature/loader/feature-context.impl.ts","../../../wesib/src/feature/loader/feature-loader.impl.ts","../../../wesib/src/feature/loader/feature-request.impl.ts","../../../wesib/src/feature/loader/feature-requester.impl.ts","../../../wesib/src/boot/impl/when-defined.impl.ts","../../../wesib/src/feature/attributes/attribute-path.ts","../../../wesib/src/feature/attributes/attribute-state-update.impl.ts","../../../wesib/src/feature/attributes/property2attribute-name.ts","../../../wesib/src/feature/attributes/attribute-registry.ts","../../../wesib/src/feature/attributes/attribute.decorator.ts","../../../wesib/src/feature/attributes/attribute-descriptor.impl.ts","../../../wesib/src/feature/attributes/attributes.decorator.ts","../../../wesib/src/feature/state/component-state.ts","../../../wesib/src/feature/attributes/track-attribute.ts","../../../wesib/src/feature/dom-properties/dom-property-path.ts","../../../wesib/src/feature/render/render-def.ts","../../../../proc7ts/primitives/src/value/value-recipe.ts","../../../wesib/src/feature/render/element-render-ctl.impl.ts","../../../wesib/src/feature/render/element-render-ctl.ts","../../../wesib/src/feature/render/element-render-scheduler.ts","../../../wesib/src/feature/render/render.decorator.ts","../../../wesib/src/feature/shadow-dom/shadow-content-root.ts","../../../wesib/src/feature/shadow-dom/shadow-dom-event.ts","../../../wesib/src/feature/shadow-dom/shadow-root-builder.ts","../../../wesib/src/feature/shadow-dom/attach-shadow.decorator.ts","../../../wesib/src/wesib.ns.ts","../../../../proc7ts/delta-set/src/delta-set.ts","../../../../proc7ts/input-aspects/src/aspect.ts","../../../../proc7ts/input-aspects/src/aspect.impl.ts","../../../../proc7ts/input-aspects/src/aspects/namespace-aliaser.aspect.ts","../../../../proc7ts/input-aspects/src/aspects/render-scheduler.aspect.ts","../../../../proc7ts/input-aspects/src/converter.ts","../../../../proc7ts/input-aspects/src/control.ts","../../../../proc7ts/input-aspects/src/controls/value-of.control.ts","../../../../proc7ts/input-aspects/src/controls/abstract.control.ts","../../../../proc7ts/input-aspects/src/containers/container.control.ts","../../../../proc7ts/input-aspects/src/containers/parents.aspect.ts","../../../../proc7ts/input-aspects/src/element.control.ts","../../../../proc7ts/input-aspects/src/data/mode.aspect.ts","../../../../proc7ts/input-aspects/src/data/data.aspect.ts","../../../../proc7ts/input-aspects/src/containers/group.control.ts","../../../../proc7ts/input-aspects/src/validation/require-nothing.validator.ts","../../../../proc7ts/input-aspects/src/validation/validator.ts","../../../../proc7ts/input-aspects/src/validation/validator.impl.ts","../../../../proc7ts/input-aspects/src/validation/validation.aspect.ts","../../../../proc7ts/input-aspects/src/validation/require-all.validator.ts","../../../../proc7ts/input-aspects/src/validation/require-present.validator.ts","../../../../proc7ts/input-aspects/src/elements/abstract-element.control.ts","../../../../proc7ts/input-aspects/src/elements/text.control.ts","../../../../proc7ts/input-aspects/src/elements/focus/focus.aspect.ts","../../../../proc7ts/input-aspects/src/elements/focus/status.aspect.ts","../../../../proc7ts/input-aspects/src/elements/style/styled-element.aspect.ts","../../../../proc7ts/input-aspects/src/elements/style/css-classes.aspect.ts","../../../../proc7ts/input-aspects/src/elements/style/css-error.ts","../../../../proc7ts/input-aspects/src/elements/style/css-info.ts","../../../../proc7ts/style-producer/src/internal/css.ts","../../../../proc7ts/style-producer/src/internal/types.ts","../../../../proc7ts/style-producer/src/value/value.ts","../../../../proc7ts/style-producer/src/value/color/color.ts","../../../../proc7ts/style-producer/src/value/color/mix.ts","../../../../proc7ts/style-producer/src/value/numeric/numeric.ts","../../../../proc7ts/style-producer/src/value/mapper.ts","../../../../proc7ts/style-producer/src/value/priority.ts","../../../../proc7ts/style-producer/src/value/numeric/numeric.impl.ts","../../../../proc7ts/style-producer/src/value/numeric/zero.impl.ts","../../../../proc7ts/style-producer/src/value/numeric/dimension-kind.impl.ts","../../../../proc7ts/style-producer/src/value/unit/length.ts","../../../../proc7ts/style-producer/src/value/url.ts","../../../../proc7ts/style-producer/src/rule/properties.impl.ts","../../../../proc7ts/style-producer/src/selector/selector.impl.ts","../../../../proc7ts/style-producer/src/selector/query.ts","../../../../proc7ts/style-producer/src/selector/selector-constructor.ts","../../../../proc7ts/style-producer/src/selector/selector-text.impl.ts","../../../../proc7ts/style-producer/src/producer/renderers/at-rules.renderer.ts","../../../../proc7ts/style-producer/src/producer/renderers/renderer.impl.ts","../../../../proc7ts/style-producer/src/producer/renderers/globals.renderer.ts","../../../../proc7ts/style-producer/src/producer/renderers/properties.renderer.ts","../../../../proc7ts/style-producer/src/producer/renderers/text.renderer.ts","../../../../proc7ts/style-producer/src/producer/renderers/xml-ns.renderer.ts","../../../../proc7ts/style-producer/src/producer/formats/format.impl.ts","../../../../proc7ts/style-producer/src/producer/formats/text.format.ts","../../../../proc7ts/style-producer/src/producer/formats/dom.format.ts","../../../../proc7ts/style-producer/src/producer/formats/object.format.ts","../../../../proc7ts/style-producer/src/producer/produce-basic-style.ts","../../../../proc7ts/style-producer/src/selector/selector-text.ts","../../../../proc7ts/style-producer/src/producer/renderers/default-renderers.impl.ts","../../../../proc7ts/style-producer/src/producer/produce-style.ts","../../../../proc7ts/style-producer/src/rule/rule.ts","../../../../proc7ts/style-producer/src/rule/rules.impl.ts","../../../../proc7ts/style-producer/src/rule/rule.impl.ts","../../../../proc7ts/style-producer/src/rule/root.ts","../../../../proc7ts/style-producer/src/rule/rule-ref.ts","../../../../proc7ts/style-producer/src/rule/rule-refs.ts","../../../../proc7ts/style-producer/src/rule/rules.ts","../../../../hatsy/http-header-value/src/hthv-partial.impl.ts","../../../../hatsy/http-header-value/src/parser/add-param.ts","../../../../hatsy/http-header-value/src/parser/parse-none.ts","../../../../hatsy/http-header-value/src/parser/date-time-parser.ts","../../../../hatsy/http-header-value/src/parser/next-in-item.ts","../../../../hatsy/http-header-value/src/parser/item-parser.ts","../../../../hatsy/http-header-value/src/parser/angle-brackets-parser.ts","../../../../hatsy/http-header-value/src/parser/quoted-string-parser.ts","../../../../hatsy/http-header-value/src/parser/next-in-comment.ts","../../../../hatsy/http-header-value/src/parser/spaces-parser.ts","../../../../hatsy/http-header-value/src/parser/param-parser.ts","../../../../hatsy/http-header-value/src/parser/parser-config.ts","../../../../hatsy/http-header-value/src/hthv-parser.ts","../../../../hatsy/http-header-value/src/parser/item-delimit-parser.ts","../../../../hatsy/http-header-value/src/parser/comment-parser.ts","../../../../hatsy/http-header-value/src/hthv-parse.ts","../../../../hatsy/http-header-value/src/hthv-quote.ts","../../../generic/src/fetch/fetch-agent-key.impl.ts","../../../generic/src/fetch/http-fetch-agent.ts","../../../generic/src/fetch/http-fetch.impl.ts","../../../generic/src/fetch/http-fetch.ts","../../../generic/src/hierarchy/hierarchy-updates.impl.ts","../../../generic/src/hierarchy/hierarchy-context.ts","../../../generic/src/hierarchy/hierarchy-registry.impl.ts","../../../generic/src/tree/element-node-list.ts","../../../generic/src/tree/element-node-list.impl.ts","../../../generic/src/tree/node-attributes.impl.ts","../../../generic/src/tree/node-properties.impl.ts","../../../generic/src/tree/element-node.impl.ts","../../../generic/src/tree/element-node.ts","../../../generic/src/navigation/hash-url/hash-url.ts","../../../generic/src/navigation/page-param.ts","../../../generic/src/navigation/navigation-agent.ts","../../../generic/src/navigation/page-param-context.ts","../../../generic/src/navigation/nav-history.impl.ts","../../../generic/src/navigation/navigation.event.ts","../../../generic/src/navigation/navigation.ts","../../../generic/src/navigation/activate-nav-link.decorator.ts","../../../generic/src/navigation/handle-nav-links.decorator.ts","../../../generic/src/util/import-node.ts","../../../generic/src/navigation/page-load/caching-page-loader.impl.ts","../../../generic/src/navigation/page-load/page-load-requests.impl.ts","../../../generic/src/navigation/page-load/page-load-agent.ts","../../../generic/src/navigation/page-load/page-load-url-modifier.ts","../../../generic/src/navigation/page-load/page-loader.impl.ts","../../../../proc7ts/call-thru/src/passes/each.ts","../../../generic/src/navigation/page-load/page-load-param.ts","../../../generic/src/navigation/page-load/page-cache-buster.impl.ts","../../../generic/src/navigation/page-load/page-scripts-agent.impl.ts","../../../generic/src/navigation/page-load/page-style-agent.impl.ts","../../../generic/src/navigation/page-load/page-title-agent.impl.ts","../../../generic/src/navigation/page-load/page-load-support.feature.ts","../../../generic/src/navigation/page-load/include-page.decorator.ts","../../../generic/src/input/default-in-aspects.ts","../../../generic/src/input/input-from-control.ts","../../../generic/src/styp/component-style-producer.ts","../../../generic/src/styp/component-styp-dom.format-config.ts","../../../generic/src/styp/component-styp-renderer.ts","../../../generic/src/styp/element-id-class.impl.ts","../../../generic/src/styp/component-styp-format.ts","../../../generic/src/styp/component-styp-dom.format.ts","../../../generic/src/styp/produce-style.decorator.ts","../../../generic/src/styp/style-producer-support.feature.ts","../../../generic/src/theme/theme-style.ts","../../../generic/src/theme/theme.ts","../../src/common/examples.ns.ts","../../src/common/theme/theme-settings.ts","../../src/common/theme/link.style.ts","../../src/common/theme/default.style.ts","../../src/common/theme/body.style.ts","../../src/common/input/form.theme-settings.ts","../../src/common/input/in-error.component.ts","../../../generic/src/input/convert-input.decorator.ts","../../src/common/input/input-support.feature.ts","../../src/common/layout/main.component.ts","../../src/common/layout/nav.component.ts","../../src/common/layout/container.component.ts","../../src/common/layout/layout-support.feature.ts","../../src/common/theme/body-style-support.feature.ts","../../src/common/app.feature.ts","../../src/common/input/input.style.ts","../../src/common/index.ts","../../../wesib/src/boot/bootstrap/bootstrap-components.ts"],"sourcesContent":["/**\n * @packageDocumentation\n * @module @proc7ts/primitives\n */\n\n/**\n * Builds element or array of the given elements.\n *\n * @param source  A source of elements as their iterable or array-like container.\n *\n * @returns The only element of the `source`, an array of all elements of non-empty source, or `undefined` if the\n * `source` is empty.\n */\nexport function elementOrArray<T>(source: Iterable<T> | ArrayLike<T>): T | T[] | undefined {\n\n  const array = Array.from(source);\n  const { length } = array;\n\n  if (length) {\n    return length === 1 ? array[0] : array;\n  }\n\n  return;\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/primitives\n */\nimport { isArrayOfElements } from './array-of-elements';\n\n/**\n * Builds a set of the given element or array of elements.\n *\n * @param elements Either element, readonly array of elements, `null`, or `undefined`.\n *\n * @returns A new set containing all of the given elements, or empty set if `elements` is `null` or `undefined`.\n */\nexport function setOfElements<T>(elements: T | readonly T[] | null | undefined): Set<T> {\n  return (/*#__INLINE__*/ isArrayOfElements(elements))\n      ? new Set(elements)\n      : (elements != null ? new Set([elements]) : new Set());\n}\n\n/**\n * Adds element of array of elements to the given set.\n *\n * Adds to the set a single element, all `elements` of the given array, or nothing when `elements` is `null`\n * or `undefined`.\n *\n * @param set  Target set to add elements to.\n * @param elements  Element(s) to add to the `set`. Either element, readonly array of elements, `null`, or `undefined`.\n *\n * @returns The target `set`.\n */\nexport function extendSetOfElements<T>(set: Set<T>, elements: T | readonly T[] | null | undefined): Set<T> {\n  if (/*#__INLINE__*/ isArrayOfElements(elements)) {\n    elements.forEach(element => set.add(element));\n  } else if (elements != null) {\n    set.add(elements);\n  }\n  return set;\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/primitives\n */\n\n/**\n * Checks whether the given value is an array.\n *\n * @param value  Either element, array of elements, `null`, or `undefined`.\n *\n * @returns `true` if the given `value` is an array, or `false` otherwise.\n */\nexport function isArrayOfElements<T>(value: T | T[] | null | undefined): value is T[];\n\n/**\n * Checks whether the given value is a readonly array.\n *\n * @param value  Either element, readonly array of elements, `null`, or `undefined`.\n *\n * @returns `true` if the given `value` is an array, or `false` otherwise.\n */\nexport function isArrayOfElements<T>(value: T | readonly T[] | null | undefined): value is readonly T[];\n\nexport function isArrayOfElements<T>(value: T | readonly T[] | null | undefined): value is T[] {\n  return Array.isArray(value);\n}\n\n/**\n * Converts element or array of elements to array of elements.\n *\n * @param value  Either element, array of elements, `null`, or `undefined`.\n *\n * @returns The `value` itself if it is an array, empty array if `value` is `null` or `undefined`, or an array\n * containing only `value` otherwise.\n */\nexport function arrayOfElements<T>(value: T | T[] | null | undefined): T[];\n\n/**\n * Converts element or readonly array of elements to readonly array of elements.\n *\n * @param value  Either element, readonly array of elements, `null`, or `undefined`.\n *\n * @returns The `value` itself if it is an array, empty array if the `value` is `null` or `undefined`, or an array\n * containing only `value` otherwise.\n */\nexport function arrayOfElements<T>(value: T | readonly T[] | null | undefined): readonly T[];\n\nexport function arrayOfElements<T>(value: T | T[] | null | undefined): T[] {\n  return (/*#__INLINE__*/ isArrayOfElements(value)) ? value : value != null ? [value] : [];\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/primitives\n */\nimport type { Class } from './class';\n\n/**\n * Detects a super class of the given class optionally satisfying the given criteria.\n *\n * Traverses all class ancestors until reaches the one satisfying the given criteria, or stops when there is no more\n * ancestors.\n *\n * @param type  The class constructor to find super class of.\n * @param satisfying  The criteria of super class matching. It is a function accepting a super class constructor\n * as the only parameter and returning `true` if the given super class matches, or `false` otherwise. Always returns\n * `true` by default.\n *\n * @return A super class `satisfying` the given criteria, or `undefined` if there is no such super class, or there is no\n * super class at all (e.g. when `Object` is passed in).\n */\nexport function superClassOf(type: Class, satisfying: (type: Class) => boolean = () => true): Class | undefined {\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const prototype = Object.getPrototypeOf(type.prototype);\n\n  if (prototype == null) {\n    return;\n  }\n\n  const superType = prototype.constructor as Class;\n\n  if (satisfying(superType)) {\n    return superType;\n  }\n\n  return superClassOf(superType, satisfying);\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/primitives\n */\n/**\n * A function that returns its argument as is.\n *\n * @param value  A value to return.\n *\n * @returns `value`.\n */\nexport function asis<T>(value: T): T {\n  return value;\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/primitives\n */\n/**\n * Merges two functions by calling one after another.\n *\n * Optionally merges function call results.\n *\n * @typeparam TArgs  Function parameter types as tuple.\n * @typeparam TReturn  A type of function result.\n * @typeparam TThis  A type if `this` object expected by function.\n * @param first  The first function to call.\n * @param second  The second function to call.\n * @param merge  Optional function call results merger. Accepts two function results as arguments and returns the final\n * result. When omitted the first function call result is ignored and the second function's call result is returned.\n *\n * @return A function that calls both of the given ones and merges their results. If one of the functions is absent,\n * then just returns another one. If both are absent, then returns `undefined`.\n */\nexport function mergeFunctions<TArgs extends any[], TReturn, TThis>(\n    first: (this: TThis, ...args: TArgs) => TReturn,\n    second: ((this: TThis, ...args: TArgs) => TReturn) | undefined,\n    merge: (first: TReturn, second: TReturn) => TReturn,\n): (this: TThis, ...args: TArgs) => TReturn;\n\nexport function mergeFunctions<TArgs extends any[], TReturn, TThis>(\n    first: ((this: TThis, ...args: TArgs) => TReturn) | undefined,\n    second: (this: TThis, ...args: TArgs) => TReturn,\n    merge?: (first: TReturn, second: TReturn) => TReturn,\n): (this: TThis, ...args: TArgs) => TReturn;\n\nexport function mergeFunctions<TArgs extends any[], TReturn, TThis>(\n    first: ((this: TThis, ...args: TArgs) => TReturn) | undefined,\n    second: ((this: TThis, ...args: TArgs) => TReturn) | undefined,\n    merge?: (first: TReturn, second: TReturn) => TReturn,\n): ((this: TThis, ...args: TArgs) => TReturn) | undefined;\n\nexport function mergeFunctions<TArgs extends any[], TReturn, TThis>(\n    first: ((this: TThis, ...args: TArgs) => TReturn) | undefined,\n    second: ((this: TThis, ...args: TArgs) => TReturn) | undefined,\n    merge: (first: TReturn, second: TReturn) => TReturn = (_f, s) => s,\n): ((this: TThis, ...args: TArgs) => TReturn) | undefined {\n  if (!first) {\n    return second;\n  }\n  if (!second) {\n    return first;\n  }\n  return function (this: TThis, ...args: TArgs): TReturn {\n    return merge(\n        first.apply(this, args),\n        second.apply(this, args),\n    );\n  };\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/primitives\n */\n/**\n * A function that does nothing.\n *\n * @returns `undefined`.\n */\nexport function noop(): undefined {\n  return;\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/primitives\n */\n/**\n * Creates a provider of the only argument.\n *\n * @param value  A value to return.\n *\n * @returns A function that returns `value`.\n */\nexport function valueProvider<T>(value: T): (this: void) => T {\n  return (): T => value;\n}\n\n/**\n * Creates a provider of arguments tuple.\n *\n * The returned tuple should never be modified as it is not cloned.\n *\n * @param values  Values to return.\n *\n * @returns A function that returns `values` tuple.\n */\nexport function valuesProvider<T extends readonly any[]>(...values: T): (this: void) => T {\n  return (): T => values;\n}\n\n/**\n * Creates a provider of cloned arguments tuple.\n *\n * The returned tuple can be modified as it is cloned before the return.\n *\n * @param values  Values to return.\n *\n * @returns A function that returns a clone of `values` tuple.\n */\nexport function valuesCloner<T extends any[]>(...values: T): (this: void) => T {\n  return (): T => Array.from(values) as T;\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/primitives\n */\nimport { valueProvider } from './value-providers';\n\n/**\n * Creates a provider of lazily evaluated value.\n *\n * The returned function evaluates the value first time it is called. Then it just returns previously evaluated value.\n *\n * @param provider  A no-arg function evaluating the value.\n *\n * @returns A function that returns the value evaluated by `provider`.\n */\nexport function lazyValue<T>(provider: (this: void) => T): (this: void) => T {\n\n  let get = (): T => (get = valueProvider(provider()))();\n\n  return (): T => get();\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/primitives\n */\n/**\n * A function that checks whether the given value is present.\n *\n * @param value  A value to check.\n *\n * @returns `true` when the given `value` is not `null` or `undefined`, or `false` otherwise.\n */\nexport function isPresent<T>(value: T | undefined | null): value is T {\n  return value != null;\n}\n\n/**\n * A function that checks whether the given value is not present.\n *\n * This is a direct opposite to `isPresent()`.\n *\n * @param value  A value to check.\n *\n * @returns `true` when the given `value` is `null` or `undefined`, or `false` otherwise.\n */\nexport function isNotPresent<T>(value: T | undefined | null): value is T {\n  return value == null;\n}\n\n/**\n * A function that checks whether the given value is defined.\n *\n * @param value  A value to check.\n *\n * @returns `true` when the given `value` is not `undefined`, or `false` otherwise.\n */\nexport function isDefined<T>(value: T | undefined): value is T {\n  return value !== undefined;\n}\n\n/**\n * A function that checks whether the given value is undefined.\n *\n * This is a direct opposite to `isDefined()`.\n *\n * @param value  A value to check.\n *\n * @returns `true` when the given `value` is `undefined`, or `false` otherwise.\n */\nexport function isUndefined<T>(value: T | undefined): value is T {\n  return value === undefined;\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/call-thru\n */\nimport { CallChain } from './call-chain';\n\n/**\n * A key of a [[NextCall]] method responsible for calling the next pass in chain.\n */\nexport const NextCall__symbol = (/*#__PURE__*/ Symbol('next-call'));\n\n/**\n * A call of the next pass in chain.\n *\n * This is basically a function with additional method, which is treated specially by call chaining functions.\n * When previous pass in chain returns a [[NextCall]] instance, it will be used to call the next pass in chain.\n * Otherwise the next pass will be called with value returned as its {@link CallChain.pass single argument}.\n *\n * A [[NextCall]] is a function returning itself. So it can be chained like any other pass.\n *\n * A [[nextCall]] function can be used to construct a next call.\n *\n * @typeparam Chain  A type of supported call chain.\n * @typeparam NextArgs  A type of arguments tuple of the next pass.\n * @typeparam NextArg  A type of single argument or arguments tuple of the next pass. The same as `NextArgs` by default.\n */\nexport interface NextCall<Chain extends CallChain, NextArgs extends any[], NextArg = NextArgs> {\n\n  readonly $?: NextArg; // Silence the TypeScript compiler, as `NextArg` is never read.\n\n  /**\n   * Calls the given pass of the call chain.\n   *\n   * @param chain  Target call chain.\n   * @param pass  A pass in call chain to call.\n   */\n  [NextCall__symbol](\n      chain: Chain,\n      pass: (this: void, ...args: NextArgs) => void,\n  ): void;\n\n  /**\n   * Returns itself.\n   *\n   * Makes this call a valid no-arg pass of a call chain.\n   */\n  (): this; // eslint-disable-line @typescript-eslint/prefer-function-type\n\n}\n\n/**\n * Constructs a call of the next pass in chain.\n *\n * @typeparam Chain  A type of supported call chain.\n * @typeparam NextArgs  A type of argument tuple of the next pass.\n * @typeparam NextArg  A type of single argument or arguments tuple of the next pass. The same as `NextArgs` by default.\n * @param callNext  A next pass caller function.\n *\n * @returns Next pass call performed by the given function.\n */\nexport function nextCall<Chain extends CallChain, NextArgs extends any[], NextArg>(\n    callNext: (\n        this: void,\n        chain: Chain,\n        fn: (this: void, ...args: NextArgs) => void,\n    ) => void,\n): NextCall<Chain, NextArgs, NextArg> {\n\n  const result = (() => result) as NextCall<Chain, NextArgs, NextArg>;\n\n  result[NextCall__symbol] = (chain, fn) => callNext(chain, fn);\n\n  return result;\n}\n\n/**\n * Checks whether the `target` value is a {@link NextCall next call}.\n *\n * @typeparam Chain  A type of supported call chain.\n * @typeparam NextArgs  A type of arguments tuple of the next pass.\n * @typeparam NextArg  A type of single argument or arguments tuple of the next pass.\n * @param target  A value to check.\n *\n * @returns `true` if the `target` value is a function with [[NextCall__symbol]] property, or `false` otherwise.\n */\nexport function isNextCall<Chain extends CallChain, NextArgs extends any[], NextArg>(\n    target: unknown,\n): target is NextCall<Chain, NextArgs, NextArg> {\n  return typeof target === 'function' && NextCall__symbol in target;\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/call-thru\n */\nimport { CallChain } from '../call-chain';\nimport { nextCall, NextCall } from '../next-call';\n\n/**\n * Provides a single argument for the next call chain pass.\n *\n * The returned [[NextCall]] implementation does the same as if the `arg` returned from the call chain pass.\n *\n * @typeparam NextArg  A type of argument for the next pass.\n * @param arg  Argument for the next pass.\n *\n * @return A call of the next pass with the given argument.\n */\nexport function nextArg<NextArg>(arg: NextArg): NextCall<CallChain, [NextArg], NextArg> {\n  return nextCall((chain, pass) => chain.pass(pass, arg));\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/call-thru\n */\nimport { CallChain } from '../call-chain';\nimport { nextCall, NextCall } from '../next-call';\n\n/**\n * Provides arguments for the next call chain pass.\n *\n * @typeparam NextArgs  A type of arguments tuple for the next pass.\n * @param args  Arguments for the next pass.\n *\n * @return A call of the next pass with the given arguments.\n */\nexport function nextArgs<NextArgs extends any[]>(\n    ...args: NextArgs\n): NextCall<CallChain, NextArgs, NextArgs> {\n  return nextCall((chain, fn) => chain.call(fn, args));\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/call-thru\n */\nimport { CallChain } from '../call-chain';\nimport { nextCall, NextCall } from '../next-call';\n\n/**\n * A special [[NextCall]] indicating the rest of the steps are skipped.\n *\n * @typeparam Result  Call chain result type.\n */\nexport type NextSkip<Result = undefined> = NextCall<CallChain, never, Result>;\n\n/**\n * Builds a next call that skips the rest of the chain.\n *\n * This has the same effect as {@link nextReturn `nextReturn(undefined)`}.\n */\nexport const nextSkip: NextSkip = (/*#__PURE__*/ nextCall(chain => chain.skip()));\n","/**\n * @packageDocumentation\n * @module @proc7ts/a-iterable\n */\nimport { RevertibleIterable } from './revertible-iterable';\n\n/**\n * Starts iteration over the given `iterable`.\n *\n * This is a shortcut for `iterable[Symbol.iterator]` to make it friendlier to minification.\n *\n * @param iterable  An iterable to iterate over.\n *\n * @return An iterator.\n */\nexport function itsIterator<T>(iterable: Iterable<T>): Iterator<T> {\n  return iterable[Symbol.iterator]();\n}\n\n/**\n * Builds an iterable iterator over the given `iterable`.\n *\n * @param iterable  An iterable to iterate over.\n *\n * @return An iterator.\n */\nexport function *itsIterable<T>(iterable: Iterable<T>): IterableIterator<T> {\n  yield* iterable;\n}\n\n/**\n * Creates custom iterable.\n *\n * @param iterate  A no-arg function constructing an iterator.\n * @param reverse  When `undefined` or unspecified the created iterable won't be reversible.\n *\n * @returns New iterable.\n */\nexport function makeIt<T>(iterate: (this: Iterable<T>) => Iterator<T>, reverse?: undefined): Iterable<T>;\n\n/**\n * Creates custom revertible iterable.\n *\n * @param iterate  A no-arg function constructing an iterator.\n * @param reverse  A no-arg function constructing a reverse iterable.\n *\n * @returns New reversible iterable.\n */\nexport function makeIt<T>(\n    iterate: (this: RevertibleIterable<T>) => Iterator<T>,\n    reverse: (this: RevertibleIterable<T>) => Iterable<T>,\n): RevertibleIterable<T>;\n\nexport function makeIt<T>(\n    iterate: (this: RevertibleIterable<T>) => Iterator<T>,\n    reverse?: (this: RevertibleIterable<T>) => Iterable<T>,\n): Iterable<T> {\n\n  const iterable: Iterable<T> = {\n    [Symbol.iterator]: iterate,\n  };\n\n  if (reverse) {\n    (iterable as RevertibleIterable<T>).reverse = reverse;\n  }\n\n  return iterable;\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/a-iterable\n */\nimport { RevertibleIterable } from './revertible-iterable';\nimport { makeIt } from './util';\n\n/**\n * @internal\n */\nfunction arrayIterator<T>(array: ArrayLike<T>): Iterator<T> {\n\n  let i = 0;\n\n  return {\n    next(): IteratorResult<T> {\n      if (i < array.length) {\n        return { value: array[i++] };\n      }\n\n      return { done: true } as IteratorReturnResult<any>;\n    },\n  };\n}\n\n/**\n * @internal\n */\nfunction reverseArrayIterator<T>(array: ArrayLike<T>): Iterator<T> {\n\n  let i = array.length - 1;\n\n  return {\n    next(): IteratorResult<T> {\n      if (i < 0) {\n        return { done: true } as IteratorReturnResult<any>;\n      }\n      return { value: array[i--] };\n    },\n  };\n}\n\n/**\n * Builds a {@link RevertibleIterable revertible iterable} over elements of array-like structure.\n *\n * @param array  An array-like structure. E.g. `Array`, DOM `NodeList`, etc.\n *\n * @returns A revertible iterable over array elements.\n */\nexport function overArray<T>(array: ArrayLike<T>): RevertibleIterable<T> {\n  return makeIt<T>(\n      () => arrayIterator(array),\n      () => reverseArray(array),\n  );\n}\n\n/**\n * Constructs an iterable of array-like structure elements in reverse order.\n *\n * @param array  Source array.\n *\n * @returns An iterable of the `source` elements in reverse order.\n */\nexport function reverseArray<T>(array: ArrayLike<T>): RevertibleIterable<T> {\n  return makeIt(\n      () => reverseArrayIterator(array),\n      () => overArray(array),\n  );\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/a-iterable\n */\nimport { isArrayLike } from '@proc7ts/primitives';\nimport { itsRevertible, RevertibleIterable } from './revertible-iterable';\nimport { itsIterator } from './util';\n\n/**\n * Performs the given `action` for each element of the given `iterable`.\n *\n * @typeparam T  A type of `iterable` elements.\n * @param iterable  An iterable of elements to perform actions on.\n * @param action  An action to perform on each iterable element. This is a function accepting an element as its only\n * parameter.\n */\nexport function itsEach<T>(iterable: Iterable<T>, action: (this: void, element: T) => void): void {\n  for (const element of iterable) {\n    action(element);\n  }\n}\n\n/**\n * Checks whether the given `iterable` is empty.\n *\n * @param iterable  Iterable to check for elements.\n *\n * @return `true` if the given iterable contains at least one element, or `false` otherwise.\n */\nexport function itsEmpty(iterable: Iterable<any>): boolean {\n  // noinspection PointlessBooleanExpressionJS\n  return !!itsIterator(iterable).next().done;\n}\n\n/**\n * Tests whether all elements of the given `iterable` pass the test implemented by the provided function.\n *\n * @typeparam T  A type of `iterable` elements.\n * @param iterable  An iterable to test elements of.\n * @param test  A predicate function to test each element. Returns `true` to continue tests, or `false` to stop it\n * and return `false` from the method call. It accepts the tested element as the only parameter.\n *\n * @returns `true` if the `test` function returned a truthy value for every element, or `false` otherwise.\n * Returns `true` for empty iterable.\n */\nexport function itsEvery<T>(iterable: Iterable<T>, test: (this: void, element: T) => boolean): boolean {\n  for (const element of iterable) {\n    if (!test(element)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Tests whether at least one element of the given `iterable` passes the test implemented by the provided function.\n *\n * @typeparam T  A type of `iterable` elements.\n * @param iterable  An iterable to test elements of.\n * @param test  A predicate function to test each element. Returns `false` to continue tests, or `true` to stop it\n * and return `true` from the method call. It accepts the tested element as the only parameter.\n *\n * @returns `true` if the callback function returned a truthy value for at least one element in the array, or `false`\n * otherwise. Returns `false` for empty iterable.\n */\nexport function itsSome<T>(iterable: Iterable<T>, test: (this: void, element: T) => boolean): boolean {\n  for (const element of iterable) {\n    if (test(element)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Returns the first element of the given `iterable`.\n *\n * @typeparam T  A type of `iterable` elements.\n * @param iterable  Iterable to extract element from.\n *\n * @return Either the first element, or `undefined` if the given `iterable` is empty.\n */\nexport function itsFirst<T>(iterable: Iterable<T>): T | undefined {\n\n  const result = itsIterator(iterable).next();\n\n  return result.done ? undefined : result.value;\n}\n\n/**\n * Returns the last element of the given `iterable`.\n *\n * If the given `iterable` is an array-like structure, then just returns its last element. If it is revertible,\n * then extracts the first element of reverted one. Otherwise iterates over elements to find the last one.\n *\n * @typeparam T  A type of `iterable` elements.\n * @param iterable  Iterable to extract element from.\n *\n * @return Either the last element, or `undefined` if the given `iterable` is empty.\n */\nexport function itsLast<T>(iterable: Iterable<T> | RevertibleIterable<T> | ArrayLike<T>): T | undefined {\n  if (isArrayLike(iterable)) {\n    return iterable[iterable.length - 1];\n  }\n  if (itsRevertible(iterable)) {\n    return itsFirst(iterable.reverse());\n  }\n\n  let last: T | undefined;\n\n  for (const element of iterable) {\n    last = element;\n  }\n\n  return last;\n}\n\n/**\n * Applies a function against an accumulator and each element of the given `iterable` to reduce elements to a single\n * value.\n *\n * @typeparam T  A type of `iterable` elements.\n * @typeparam R  A type of reduced value.\n * @param iterable  An iterable to reduce values of.\n * @param reducer  A function to apply the value returned from the previous `reducer` call and to each element.\n * @param initialValue  Initial value passed to the first `reducer` call.\n *\n * @return Reduced value returned from the last `reducer` call, or `initialValue` if there is no elements in the given\n * `iterable`.\n */\nexport function itsReduction<T, R>(\n    iterable: Iterable<T>,\n    reducer: (this: void, prev: R, element: T) => R,\n    initialValue: R,\n): R {\n\n  let reduced = initialValue;\n\n  for (const element of iterable) {\n    reduced = reducer(reduced, element);\n  }\n\n  return reduced;\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/a-iterable\n */\nimport { asis } from '@proc7ts/primitives';\n\n/**\n * Creates an iterable with all `source` iterable elements that pass the test implemented by the provided function.\n *\n * @typeparam T  A type of source elements.\n * @param source  A source iterable.\n * @param test  A predicate function to test each element. Returns `true` to keep the element, or `false` otherwise.\n * It accepts the tested element as the only parameter.\n *\n * @return A new iterable with the elements that pass the test. If no elements passed the test, an empty iterable will\n * be returned.\n */\nexport function filterIt<T>(\n    source: Iterable<T>,\n    test: (this: void, element: T) => boolean,\n): Iterable<T>;\n\n/**\n * Creates an iterable with all `source` iterable elements extending the given type.\n *\n * @typeparam T  A type of source elements\n * @typeparam R  Target type.\n * @param source  A source iterable.\n * @param test  A predicate function to test that element extends the type `R`. Returns `true` to keep the element, or\n * `false` otherwise. It accepts the tested element as the only parameter.\n *\n * @return A new iterable with the elements that pass the test. If no elements passed the test, an empty iterable will\n * be returned.\n */\nexport function filterIt<T, R extends T>(\n    source: Iterable<T>,\n    test: (this: void, element: T) => element is R,\n): Iterable<R>;\n\nexport function filterIt<T>(source: Iterable<T>, test: (this: void, element: T) => boolean): Iterable<T> {\n  return {\n    [Symbol.iterator](): Iterator<T> {\n\n      const it = source[Symbol.iterator]();\n\n      return {\n        next(): IteratorResult<T> {\n          for (;;) {\n\n            const next = it.next();\n\n            if (next.done || test(next.value)) {\n              return next;\n            }\n          }\n        },\n      };\n    },\n  };\n}\n\n/**\n * Flattens the source iterable of iterables into a new iterable.\n *\n * Calling this function is the same as calling `flatMapIt(source, asis)`.\n *\n * @typeparam T  A type of source elements.\n * @param source  A source iterable of iterables.\n *\n * @returns A new iterable with each element of `source` being the flattened.\n */\nexport function flatMapIt<T>(source: Iterable<Iterable<T>>): Iterable<T>;\n\n/**\n * First maps each element of the `source` iterable using a mapping function, then flattens the result into a new\n * iterable.\n *\n * @typeparam T  A type of source elements.\n * @typeparam R  A type of converted elements.\n * @param source  A source iterable.\n * @param convert  A function that produces a new iterable, taking the source element as the only parameter.\n *\n * @returns A new iterable with each element being the flattened result of the `convert` function call.\n */\nexport function flatMapIt<T, R>(source: Iterable<T>, convert: (this: void, element: T) => Iterable<R>): Iterable<R>;\n\nexport function flatMapIt<T, R>(\n    source: Iterable<T>,\n    convert: (this: void, element: T) => Iterable<R> = asis as (element: T) => Iterable<R>,\n): Iterable<R> {\n  return {\n    [Symbol.iterator](): Iterator<R> {\n\n      const it = source[Symbol.iterator]();\n      let cIt: Iterator<R> | undefined;\n\n      return {\n        next(): IteratorResult<R> {\n          for (;;) {\n            if (!cIt) {\n\n              const next = it.next();\n\n              if (next.done) {\n                return next;\n              }\n\n              cIt = convert(next.value)[Symbol.iterator]();\n            }\n\n            const cNext = cIt.next();\n\n            if (cNext.done) {\n              cIt = undefined;\n              continue;\n            }\n\n            return cNext;\n          }\n        },\n      };\n    },\n  };\n}\n\n/**\n * Creates a new iterable with the results of calling a provided function on every element of the `source` one.\n *\n * @typeparam T  A type of source elements.\n * @typeparam R  A type of converted elements.\n * @param source  A source iterable.\n * @param convert  A function that produces an element of the new iterable, taking the source element as the only\n * parameter.\n */\nexport function mapIt<T, R>(source: Iterable<T>, convert: (this: void, element: T) => R): Iterable<R> {\n  return {\n    [Symbol.iterator](): Iterator<R> {\n\n      const it = source[Symbol.iterator]();\n\n      return {\n        next(): IteratorResult<R> {\n\n          const next = it.next();\n\n          return next.done ? next : { value: convert(next.value) };\n        },\n      };\n    },\n  };\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/a-iterable\n */\nimport { valueProvider } from '@proc7ts/primitives';\nimport { RevertibleIterable } from './revertible-iterable';\n\n/**\n * @internal\n */\nconst noneIterator: Iterator<unknown> = {\n  next: (/*#__PURE__*/ valueProvider({ done: true } as IteratorReturnResult<unknown>)),\n};\n\n/**\n * @internal\n */\nconst noneIterable: RevertibleIterable<unknown> = {\n\n  [Symbol.iterator]: (/*#__PURE__*/ valueProvider(noneIterator)),\n\n  reverse() { return this; },\n\n};\n\n/**\n * Returns an iterable without elements.\n *\n * @typeparam T  A type of constructed iterable elements.\n *\n * @returns An empty iterable instance revertible to itself.\n */\nexport function overNone<T>(): RevertibleIterable<T> {\n  return noneIterable as RevertibleIterable<T>;\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/a-iterable\n */\nimport { overArray } from './array';\nimport { RevertibleIterable } from './revertible-iterable';\nimport { mapIt } from './transform';\nimport { itsIterator, makeIt } from './util';\n\n/**\n * Builds an iterable over the keys of the given object.\n *\n * A list of keys is constructed using `Reflect.ownKeys()`.\n *\n * @param target  An object to select keys from.\n */\nexport function overKeys<T extends object>(target: T): RevertibleIterable<keyof T> {\n  return overArray(Reflect.ownKeys(target) as (keyof T)[]);\n}\n\n/**\n * Object property entry. This is a tuple consisting of property key and value.\n */\nexport type ObjectEntry<T, K extends keyof T = keyof T> = [K, T[K]];\n\n/**\n * Builds an iterable over the key/value entries of the given object.\n *\n * A list of keys is constructed using `Reflect.ownKeys()`.\n *\n * @param target  An object to select keys and values from.\n */\nexport function overEntries<T extends object>(target: T): RevertibleIterable<ObjectEntry<T>> {\n\n  const targetKeys = overKeys(target);\n  const mapToEntries = (keys: Iterable<keyof T>): Iterable<ObjectEntry<T>> => mapIt(\n      keys,\n      key => [key, target[key]] as ObjectEntry<T>,\n  );\n\n  return makeIt(() => itsIterator(mapToEntries(targetKeys)), () => mapToEntries(targetKeys.reverse()));\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/context-values\n */\nimport { ContextRef } from './context-ref';\nimport { ContextRegistry } from './context-registry';\nimport { ContextSeeder } from './context-seeder';\nimport { ContextValues } from './context-values';\n\n/**\n * A symbol of the property containing a [[ContextKey]] instance.\n */\nexport const ContextKey__symbol = /*#__PURE__*/ Symbol('context-key');\n\n/**\n * Context value key.\n *\n * Every key should be an unique instance of this class.\n *\n * Multiple source values pay be provided per per value key. They all grouped into single seed.\n * The value is grown from this seed by [[ContextKey.grow]] method.\n *\n * @typeparam Value  Context value type.\n * @typeparam Src  Source value type.\n * @typeparam Seed  Value seed type.\n */\nexport abstract class ContextKey<Value, Src = Value, Seed = unknown> implements ContextRef<Value, Src> {\n\n  /**\n   * Human-readable key name.\n   *\n   * This is not necessarily unique.\n   */\n  readonly name: string;\n\n  /**\n   * A key of context value holding a seed of the value associated with this key.\n   *\n   * Different context value keys may have the same [[seedKey]] to grow them from the same seed.\n   */\n  abstract readonly seedKey: ContextSeedKey<Src, Seed>;\n\n  /**\n   * Constructs context value key.\n   *\n   * @param name  Human-readable key name.\n   */\n  protected constructor(name: string) {\n    this.name = name;\n  }\n\n  /**\n   * Always the key itself.\n   *\n   * This is to use this context value key both as a context value request and its definition target.\n   */\n  get [ContextKey__symbol](): this {\n    return this;\n  }\n\n  /**\n   * Grows context value out of its seed.\n   *\n   * @param slot  Context value slot to insert the value to.\n   */\n  abstract grow(slot: ContextValueSlot<Value, Src, Seed>): void;\n\n  toString(): string {\n    return `ContextKey(${this.name})`;\n  }\n\n}\n\n/**\n * Context value slot to put the grown value into.\n *\n * An instance of the value slot is passed to [[ContextKey.grow]] method to provide the necessary context and optionally\n * accept a new value.\n *\n * @typeparam Value  Context value type.\n * @typeparam Src  Source value type.\n * @typeparam Seed  Value seed type.\n */\nexport type ContextValueSlot<Value, Src, Seed> =\n    | ContextValueSlot.WithFallback<Value, Src, Seed>\n    | ContextValueSlot.WithoutFallback<Value, Src, Seed>;\n\nexport namespace ContextValueSlot {\n\n  /**\n   * Base context value slot interface.\n   *\n   * @typeparam Value  Context value type.\n   * @typeparam Src  Source value type.\n   * @typeparam Seed  Value seed type.\n   */\n  export interface Base<Value, Src, Seed> {\n\n    /**\n     * Target context.\n     */\n    readonly context: ContextValues;\n\n    /**\n     * A key to associated value with.\n     */\n    readonly key: ContextKey<Value, Src, Seed>;\n\n    /**\n     * Context value seeder.\n     */\n    readonly seeder: ContextSeeder<ContextValues, Src, Seed>;\n\n    /**\n     * Context value seed.\n     */\n    readonly seed: Seed;\n\n    /**\n     * Whether a {@link ContextRequest.Opts.or fallback} value has been specified.\n     */\n    readonly hasFallback: boolean;\n\n    /**\n     * A {@link ContextRequest.Opts.or fallback} value that will be used unless another one {@link insert inserted} into\n     * this slot.\n     *\n     * Can be `null` or `undefined`.\n     *\n     * Always `undefined` when {@link hasFallback there is no fallback}.\n     */\n    readonly or: Value | null | undefined;\n\n    /**\n     * Insert the value into the slot.\n     *\n     * The value will be associated with key after [[ContextKey.grow]] method exit.\n     *\n     * Supersedes a previously inserted value.\n     *\n     * @param value  A value to associate with the key, or `null`/`undefined` to not associate any value.\n     */\n    insert(value: Value | null | undefined): void;\n\n    /**\n     * Fills this slot by the given function.\n     *\n     * @param grow  A function accepting a value slot as its only parameter.\n     *\n     * @returns A value associated with target key by the given function, or `null`/`undefined` when no value\n     * associated.\n     */\n    fillBy(grow: (this: void, slot: ContextValueSlot<Value, Src, Seed>) => void): Value | null | undefined;\n\n    /**\n     * Registers a setup procedure issued when context value associated with target key.\n     *\n     * Setup will be issued at most once per context. Setup won't be issued if no value {@link insert inserted}.\n     *\n     * @param setup  Context value setup procedure.\n     */\n    setup(setup: ContextValueSetup<Value, Src, Seed>): void;\n\n  }\n\n  /**\n   * Base context value slot with fallback value.\n   *\n   * @typeparam Value  Context value type.\n   * @typeparam Src  Source value type.\n   * @typeparam Seed  Value seed type.\n   */\n  export interface WithFallback<Value, Src, Seed> extends Base<Value, Src, Seed> {\n\n    /**\n     * Whether a {@link ContextRequest.Opts.or fallback} value has been specified.\n     *\n     * Always `true`\n     */\n    readonly hasFallback: true;\n\n    /**\n     * A {@link ContextRequest.Opts.or fallback} value that will be used unless another one {@link insert inserted} into\n     * this slot.\n     *\n     * Can be `null` or `undefined`.\n     */\n    readonly or: Value | null | undefined;\n\n  }\n\n  export interface WithoutFallback<Value, Src, Seed> extends Base<Value, Src, Seed> {\n\n    /**\n     * Whether a {@link ContextRequest.Opts.or fallback} value has been specified.\n     *\n     * Always `false`\n     */\n    readonly hasFallback: false;\n\n    /**\n     * A {@link ContextRequest.Opts.or fallback} value that will be used unless another one {@link insert inserted} into\n     * this slot.\n     *\n     * Always `undefined`.\n     */\n    readonly or: undefined;\n\n  }\n\n}\n\n/**\n * Context value setup procedure signature.\n *\n * A function with this signature can be passed to {@link ContextValueSlot.Base.setup} method to be issued when\n * the value associated with target key.\n */\nexport type ContextValueSetup<Value, Src, Seed> =\n/**\n * @param key  A key the value associated with.\n * @param context  Target context the value associated with.\n * @param registry  A registry of context value providers. This context is shared among all contexts\n * {@link ContextRegistry.newValues created} by it.\n */\n    (\n        this: void,\n        {\n          key,\n          context,\n          registry,\n        }: {\n          key: ContextKey<Value, Src, Seed>;\n          context: ContextValues;\n          registry: ContextRegistry;\n        }\n    ) => void;\n\n/**\n * A provider of default value of context key.\n *\n * This is typically passed as `byDefault` option to context value key constructor.\n *\n * @typeparam Ctx  Context type.\n * @typeparam Value  Context value type.\n * @typeparam Key  Context key type.\n */\nexport type ContextKeyDefault<Value, Key extends ContextKey<any, any, any>> =\n/**\n * @param context  Target context.\n * @param key  Context value key the default value is provided for.\n *\n * @return Either constructed value, or `null`/`undefined` if unknown.\n */\n    (this: void, context: ContextValues, key: Key) => Value | null | undefined;\n\n/**\n * A key of context value holding a seed of context value.\n *\n * @typeparam Src  Source value type.\n * @typeparam Seed  Value seed type.\n */\nexport abstract class ContextSeedKey<Src, Seed> extends ContextKey<Seed, Src, Seed> {\n\n  /**\n   * Constructs context value sources key.\n   *\n   * @param key  A key of context value having its sources associated with this key.\n   */\n  constructor(key: ContextKey<any, Src>) {\n    super(`${key.name}:seed`);\n  }\n\n  /**\n   * Always refers to itself.\n   */\n  get seedKey(): this {\n    return this;\n  }\n\n  /**\n   * Creates a seeder for values associated with this key.\n   *\n   * @typeparam Ctx  Context type.\n   *\n   * @returns New value seeder instance.\n   */\n  abstract seeder<Ctx extends ContextValues>(): ContextSeeder<Ctx, Src, Seed>;\n\n  grow(opts: ContextValueSlot<Seed, Src, Seed>): void {\n\n    const { seeder, seed } = opts;\n\n    if (!seeder.isEmpty(seed)) {\n      opts.insert(seed);\n    } else if (!opts.hasFallback) {\n      opts.insert(seed);\n    }\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/context-values\n */\nimport { ContextKey } from './context-key';\n\n/**\n * An error indicating the absence of context value with the given key.\n */\nexport class ContextKeyError extends Error {\n\n  /**\n   * A missing value key.\n   */\n  readonly key: ContextKey<any, any, any>;\n\n  /**\n   * Constructs an invalid context key error.\n   *\n   * @param key  Missing value key.\n   * @param message  Arbitrary error message.\n   */\n  constructor(key: ContextKey<any, any, any>, message = `There is no value with key ${key}`) {\n    super(message);\n    this.key = key;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/context-values\n */\nimport { valueProvider } from '@proc7ts/primitives';\nimport { ContextRequest, ContextTarget } from './context-ref';\nimport { ContextValues } from './context-values';\n\n/**\n * Context value provider.\n *\n * It is responsible for constructing the values associated with particular key for the given context. Note that\n * provider generates source value, not the context values themselves.\n *\n * @typeparam Ctx  Context type.\n * @typeparam Src  Source value type.\n */\nexport type ContextValueProvider<Ctx extends ContextValues, Src> =\n/**\n * @param context  Target context.\n *\n * @return Either constructed value source, or `null`/`undefined` if unknown.\n */\n    (this: void, context: Ctx) => Src | null | undefined;\n\n/**\n * Context value specifier.\n *\n * @typeparam Ctx  Context type.\n * @typeparam Value  Context value type.\n * @typeparam Deps  Dependencies tuple type.\n * @typeparam Src  Source value type.\n * @typeparam Seed  Value seed type.\n */\nexport type ContextValueSpec<\n    Ctx extends ContextValues,\n    Value,\n    Deps extends any[] = unknown[],\n    Src = Value,\n    Seed = unknown> =\n    | ContextValueSpec.IsConstant<Src, Seed>\n    | ContextValueSpec.ViaAlias<Src, Seed>\n    | ContextValueSpec.ByProvider<Ctx, Src, Seed>\n    | ContextValueSpec.ByProviderWithDeps<Deps, Src, Seed>\n    | ContextValueSpec.AsInstance<Ctx, Src, Seed>\n    | ContextValueSpec.SelfInstance<Ctx, Src, Seed>\n    | ContextValueSpec.AsInstanceWithDeps<Deps, Src, Seed>\n    | ContextValueSpec.SelfInstanceWithDeps<Deps, Src, Seed>;\n\nexport namespace ContextValueSpec {\n\n  /**\n   * A specifier defining a context value is constant.\n   *\n   * @typeparam Src  Source value type.\n   * @typeparam Seed  Value seed type.\n   */\n  export interface IsConstant<Src, Seed = unknown> {\n\n    /**\n     * Target value to define.\n     */\n    a: ContextTarget<Src, Seed>;\n\n    /**\n     * Constant context value.\n     */\n    is: Src;\n\n  }\n\n  /**\n   * A specifier defining a context value via another one (alias).\n   *\n   * @typeparam Sec  Source value type.\n   * @typeparam Seed  Value seed type.\n   */\n  export interface ViaAlias<Src, Seed = unknown> {\n\n    /**\n     * Target value to define.\n     */\n    a: ContextTarget<Src, Seed>;\n\n    /**\n     * Context value request for the another value that will be used instead as provided one.\n     */\n    via: ContextRequest<Src, Seed>;\n\n  }\n\n  /**\n   * A specifier of context value defined by provider function.\n   *\n   * @typeparam Ctx  Context type.\n   * @typeparam Src  Source value type.\n   * @typeparam Seed  Value seed type.\n   */\n  export interface ByProvider<Ctx extends ContextValues, Src, Seed = unknown> {\n\n    /**\n     * Target value to define.\n     */\n    a: ContextTarget<Src, Seed>;\n\n    /**\n     * Context value provider.\n     */\n    by: ContextValueProvider<Ctx, Src>;\n\n  }\n\n  /**\n   * A specifier of context value defined by provider function depending on other context values.\n   *\n   * @typeparam Deps  Dependencies tuple type.\n   * @typeparam Src  Source value type.\n   * @typeparam Seed  Value seed type.\n   */\n  export interface ByProviderWithDeps<Deps extends any[], Src, Seed = unknown> {\n\n    /**\n     * Target value to define.\n     */\n    a: ContextTarget<Src, Seed>;\n\n    /**\n     * Context value provider function.\n     */\n    by: (this: void, ...args: Deps) => Src | null | undefined;\n\n    /**\n     * Context value requests for corresponding value provider function arguments.\n     */\n    with: DepsRequests<Deps>;\n\n  }\n\n  /**\n   * A specifier of context value defined as instance of some class.\n   *\n   * @typeparam Ctx  Context type.\n   * @typeparam Src  Source value type.\n   * @typeparam Seed  Value seed type.\n   */\n  export interface AsInstance<Ctx extends ContextValues, Src, Seed = unknown> {\n\n    /**\n     * Target value to define.\n     */\n    a: ContextTarget<Src, Seed>;\n\n    /**\n     * Context value class constructor.\n     */\n    as: new (context: Ctx) => Src;\n\n  }\n\n  /**\n   * A specifier of context value defined as instance of the same class as value.\n   *\n   * @typeparam Ctx  Context type.\n   * @typeparam Src  Source value type.\n   * @typeparam Seed  Value seed type.\n   */\n  export interface SelfInstance<Ctx extends ContextValues, Src, Seed = unknown> {\n\n    /**\n     * Target value to define as its class constructor.\n     */\n    as: ContextTarget<Src, Seed> & (new (context: Ctx) => Src);\n\n  }\n\n  /**\n   * A specifier of context value defined as instance of some class with constructor depending on other context values.\n   *\n   * @typeparam Deps  Dependencies tuple type.\n   * @typeparam Src  Source value type.\n   * @typeparam Seed  Value seed type.\n   */\n  export interface AsInstanceWithDeps<Deps extends any[], Src, Seed = unknown> {\n\n    /**\n     * Target value to define.\n     */\n    a: ContextTarget<Src, Seed>;\n\n    /**\n     * Context value class constructor.\n     */\n    as: new (...args: Deps) => Src;\n\n    /**\n     * Context value requests for corresponding constructor arguments.\n     */\n    with: DepsRequests<Deps>;\n\n  }\n\n  /**\n   * A specifier of context value defined as instance of the same class as value with constructor depending on other\n   * context values.\n   *\n   * @typeparam Deps  Dependencies tuple type.\n   * @typeparam Src  Source value type.\n   * @typeparam Seed  Value seed type.\n   */\n  export interface SelfInstanceWithDeps<Deps extends any[], Src, Seed = unknown> {\n\n    /**\n     * Target value to define as its class constructor.\n     */\n    as: ContextTarget<Src, Seed> & (new (...args: Deps) => Src);\n\n    /**\n     * Context value requests for corresponding constructor arguments.\n     */\n    with: DepsRequests<Deps>;\n\n  }\n\n  /**\n   * Dependencies requests.\n   *\n   * This is a tuple of context value requests, each of which corresponds to dependency.\n   *\n   * @typeparam Deps  Dependencies tuple type.\n   */\n  export type DepsRequests<Deps extends any[]> = {\n    [K in keyof Deps]: ContextRequest<Deps[K]>;\n  };\n\n}\n\n/**\n * Constructs a specifier of context value defined by provider out of arbitrary one.\n *\n * @typeparam Ctx  Context type.\n * @typeparam Value  Context value type.\n * @typeparam Deps  Dependencies tuple type.\n * @typeparam Src  Source value type.\n * @param spec  Context value specifier to convert.\n *\n * @returns A specifier of context value defined by provider function.\n *\n * @throws TypeError  On malformed context value specifier.\n */\nexport function contextValueSpec<Ctx extends ContextValues, Value, Deps extends any[], Src, Seed>(\n    spec: ContextValueSpec<Ctx, Value, Deps, Src, Seed>,\n): ContextValueSpec.ByProvider<Ctx, Src, Seed> {\n  if (byProvider(spec)) {\n    if (!withDeps<Ctx, Deps, Src, Seed>(spec)) {\n      return spec;\n    }\n\n    const { a, by, with: deps } = spec;\n\n    return {\n      a,\n      by(this: void, context: Ctx) {\n        return by(...deps.map(<T>(dep: ContextRequest<T>) => context.get(dep)) as Deps);\n      },\n    };\n  }\n  if (isConstant<Src, Seed>(spec)) {\n\n    const { a, is: value } = spec;\n\n    return {\n      a,\n      by: valueProvider(value),\n    };\n  }\n  if (viaAlias(spec)) {\n\n    const { a, via } = spec;\n\n    return {\n      a,\n      by(ctx: Ctx) {\n        return ctx.get(via);\n      },\n    };\n  }\n  if (asInstance<Ctx, Deps, Src, Seed>(spec)) {\n    if (selfInstance<Ctx, Deps, Src, Seed>(spec)) {\n      spec = toAsInstance(spec);\n    }\n    if (!withDeps<Ctx, Deps, Src, Seed>(spec)) {\n\n      const { as: Type } = spec;\n\n      return {\n        a: spec.a,\n        by(ctx: Ctx) {\n          return new Type(ctx);\n        },\n      };\n    }\n\n    const { as: DepType, with: deps } = spec;\n\n    return {\n      a: spec.a,\n      by(this: void, context: Ctx) {\n        return new DepType(...deps.map(<T>(dep: ContextRequest<T>) => context.get(dep)) as Deps);\n      },\n    };\n  }\n\n  throw new TypeError(`Malformed context value specifier: ${JSON.stringify(spec)}`);\n}\n\n/**\n * @internal\n */\nfunction byProvider<Ctx extends ContextValues, Deps extends any[], Src, Seed>(\n    spec: ContextValueSpec<Ctx, any, Deps, Src, Seed>,\n): spec is ContextValueSpec.ByProvider<Ctx, Src, Seed> | ContextValueSpec.ByProviderWithDeps<Deps, Src, Seed> {\n  return 'by' in spec;\n}\n\n/**\n * @internal\n */\nfunction asInstance<Ctx extends ContextValues, Deps extends any[], Src, Seed>(\n    spec: ContextValueSpec<Ctx, any, Deps, Src, Seed>,\n): spec is ContextValueSpec.AsInstance<Ctx, Src, Seed> | ContextValueSpec.AsInstanceWithDeps<Deps, Src, Seed> {\n  return 'as' in spec;\n}\n\n/**\n * @internal\n */\nfunction selfInstance<Ctx extends ContextValues, Deps extends any[], Src, Seed>(\n    spec: ContextValueSpec<Ctx, any, Deps, Src, Seed>,\n): spec is ContextValueSpec.SelfInstance<Ctx, Src, Seed> | ContextValueSpec.SelfInstanceWithDeps<Deps, Src, Seed> {\n  return !('a' in spec);\n}\n\n/**\n * @internal\n */\nfunction toAsInstance<Ctx extends ContextValues, Deps extends any[], Src, Seed>(\n    spec: ContextValueSpec.SelfInstance<Ctx, Src, Seed> | ContextValueSpec.SelfInstanceWithDeps<Deps, Src, Seed>,\n): ContextValueSpec.AsInstance<Ctx, Src, Seed> | ContextValueSpec.AsInstanceWithDeps<Deps, Src, Seed> {\n  return {\n    ...spec,\n    a: spec.as,\n  } as ContextValueSpec.AsInstance<Ctx, Src, Seed> | ContextValueSpec.AsInstanceWithDeps<Deps, Src, Seed>;\n}\n\n/**\n * @internal\n */\nfunction isConstant<Src, Seed>(\n    spec: ContextValueSpec<any, any, any, Src, Seed>,\n): spec is ContextValueSpec.IsConstant<Src, Seed> {\n  return 'is' in spec;\n}\n\n/**\n * @internal\n */\nfunction viaAlias<Src, Seed>(\n    spec: ContextValueSpec<any, any, any, Src, Seed>,\n): spec is ContextValueSpec.ViaAlias<Src, Seed> {\n  return 'via' in spec;\n}\n\n/**\n * @internal\n */\nfunction withDeps<Ctx extends ContextValues, Deps extends any[], Src, Seed>(\n    spec: ContextValueSpec.ByProvider<Ctx, Src, Seed> | ContextValueSpec.ByProviderWithDeps<Deps, Src, Seed>,\n): spec is ContextValueSpec.ByProviderWithDeps<Deps, Src, Seed>;\n\n/**\n * @internal\n */\nfunction withDeps<Ctx extends ContextValues, Deps extends any[], Src, Seed>(\n    spec: ContextValueSpec.AsInstance<Ctx, Src, Seed> | ContextValueSpec.AsInstanceWithDeps<Deps, Src, Seed>,\n): spec is ContextValueSpec.AsInstanceWithDeps<Deps, Src, Seed>;\n\n/**\n * @internal\n */\nfunction withDeps<Ctx extends ContextValues, Deps extends any[], Src, Seed>(\n    spec: ContextValueSpec<Ctx, any, Deps, Src, Seed>,\n): boolean {\n  return 'with' in spec;\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/context-values\n */\nimport { ContextRequest } from './context-ref';\n\n/**\n * The values available from context.\n *\n * The values are available by their keys.\n */\nexport abstract class ContextValues {\n\n  /**\n   * Returns a value associated with the given key.\n   *\n   * @typeparam Value  A type of associated value.\n   * @param request  Context value request with target key.\n   * @param opts  Context value request options.\n   *\n   * @returns Associated value or `null` when there is no associated value.\n   */\n  abstract get<Value>(request: ContextRequest<Value>, opts: ContextRequest.OrNull<Value>): Value | null;\n\n  /**\n   * Returns a value associated with the given key.\n   *\n   * @typeparam Value  A type of associated value.\n   * @param request  Context value request with target key.\n   * @param opts  Context value request options.\n   *\n   * @returns Associated value or `undefined` when there is no associated value.\n   */\n  abstract get<Value>(request: ContextRequest<Value>, opts: ContextRequest.OrUndefined<Value>): Value | undefined;\n\n  /**\n   * Returns a value associated with the given key.\n   *\n   * @typeparam Value  A type of associated value.\n   * @param request  Context value request with target key.\n   * @param opts  Context value request options.\n   *\n   * @returns Associated value. Or the default one when there is no associated value. Or key default when there is\n   * neither.\n   *\n   * @throws Error  If there is no value associated with the given key, the default value is not provided,\n   * and the key has no default value.\n   */\n  abstract get<Value>(request: ContextRequest<Value>, opts?: ContextRequest.OrFallback<Value>): Value;\n\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/context-values\n */\nimport { noop } from '@proc7ts/primitives';\nimport { ContextKey, ContextKey__symbol, ContextSeedKey, ContextValueSetup, ContextValueSlot } from './context-key';\nimport { ContextKeyError } from './context-key-error';\nimport { ContextRef, ContextRequest } from './context-ref';\nimport { ContextSeeder, ContextSeeds } from './context-seeder';\nimport { contextValueSpec, ContextValueSpec } from './context-value-spec';\nimport { ContextValues } from './context-values';\n\n/**\n * @internal\n */\ntype SeedFactory<Ctx extends ContextValues, Seed> = (this: void, context: Ctx) => Seed;\n\n/**\n * @internal\n */\ntype Seeding<Ctx extends ContextValues, Src, Seed> = [ContextSeeder<Ctx, Src, Seed>, SeedFactory<Ctx, Seed>];\n\n/**\n * A registry of context value providers.\n *\n * @typeparam Ctx  Context type.\n */\nexport class ContextRegistry<Ctx extends ContextValues = ContextValues> {\n\n  /** @internal */\n  private readonly _initial: ContextSeeds<Ctx>;\n\n  /** @internal */\n  private readonly _seeds = new Map<ContextSeedKey<any, any>, Seeding<Ctx, any, any>>();\n\n  /** @internal */\n  private _nonCachedValues?: ContextValues;\n\n  /**\n   * Constructs a registry for context value providers.\n   *\n   * It can be chained with another registry by providing an initially known source of known context values.\n   *\n   * @param initial  An optional source of initially known context values. This can be either a function, or\n   * `ContextValues` instance.\n   */\n  constructor(initial?: ContextSeeds<Ctx> | ContextValues) {\n    if (initial == null) {\n      this._initial = noop;\n    } else if (typeof initial === 'function') {\n      this._initial = initial;\n    } else {\n      this._initial = seedKey => initial.get(seedKey);\n    }\n  }\n\n  /**\n   * Provides context value.\n   *\n   * @typeparam Deps  Dependencies tuple type.\n   * @typeparam Src  Source value type.\n   * @typeparam Seed  Value seed type.\n   * @param spec  Context value specifier.\n   *\n   * @returns A function that removes the given context value specifier when called.\n   */\n  provide<Deps extends any[], Src, Seed>(spec: ContextValueSpec<Ctx, any, Deps, Src, Seed>): () => void {\n\n    const { a: { [ContextKey__symbol]: { seedKey } }, by } = contextValueSpec(spec);\n    const [seeder] = this._seeding<Src, Seed>(seedKey);\n\n    return seeder.provide(by);\n  }\n\n  /**\n   * @internal\n   */\n  private _seeding<Src, Seed>(seedKey: ContextSeedKey<Src, Seed>): Seeding<Ctx, Src, Seed> {\n\n    const found: Seeding<Ctx, Src, Seed> | undefined = this._seeds.get(seedKey);\n\n    if (found) {\n      return found;\n    }\n\n    const seeder: ContextSeeder<Ctx, Src, Seed> = seedKey.seeder();\n    const factory: SeedFactory<Ctx, Seed> = context => seeder.seed(context, this._initial(seedKey, context));\n    const seeding: Seeding<Ctx, Src, Seed> = [seeder, factory];\n\n    this._seeds.set(seedKey, seeding);\n\n    return seeding;\n  }\n\n  /**\n   * Creates a seed for the given key in target context.\n   *\n   * @param context  Target context.\n   * @param key  Context value seed key.\n   *\n   * @returns New context value seed.\n   */\n  seed<Src, Seed>(context: Ctx, key: ContextSeedKey<Src, Seed>): Seed {\n\n    const [, factory] = this._seeding(key);\n\n    return factory(context);\n  }\n\n  /**\n   * Builds context seeds provider that binds seeds to target `context`.\n   *\n   * @param context  Target value context.\n   * @param cache  Whether to cache context values. When `false` the value providers may be called multiple times.\n   *\n   * @returns A provider of context value seeds bound to the given `context`.\n   */\n  seedIn(context: Ctx, cache?: boolean): <Src, Seed>(this: void, key: ContextSeedKey<Src, Seed>) => Seed | undefined {\n    return this.newValues(cache).get.bind(context);\n  }\n\n  /**\n   * Creates new context values instance consulting this registry for value providers.\n   *\n   * @param cache  Whether to cache context values. When `false` the value providers may be called multiple times.\n   *\n   * @returns New context values instance which methods expect `this` instance to be a context the values provided for.\n   */\n  newValues(cache = true): ContextValues & ThisType<Ctx> {\n    if (!cache && this._nonCachedValues) {\n      return this._nonCachedValues;\n    }\n\n    const values = new Map<ContextKey<any>, any>();\n    const registry = this;\n\n    class Values extends ContextValues {\n\n      get<Value, Src>(\n          this: Ctx,\n          { [ContextKey__symbol]: key }: ContextRef<Value, Src>,\n          opts?: ContextRequest.Opts<Value>,\n      ): Value | null | undefined {\n\n        const context = this;\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        const cached: Value | undefined = values.get(key);\n\n        if (cached != null) {\n          return cached;\n        }\n\n        const [constructed, setup] = growValue(context, key, opts);\n\n        if (cache && setup) {\n          values.set(key, constructed);\n          setup({\n            key,\n            context: this,\n            registry: registry as ContextRegistry<any> as ContextRegistry,\n          });\n        }\n\n        return constructed;\n      }\n\n    }\n\n    if (!cache) {\n      return this._nonCachedValues = new Values();\n    }\n\n    return new Values();\n\n    function growValue<Value, Src, Seed>(\n        context: Ctx,\n        key: ContextKey<Value, Src, Seed>,\n        opts: ContextRequest.Opts<Value> = {},\n    ): [Value | null | undefined, ContextValueSetup<Value, Src, Seed>?] {\n\n      const [seeder, seed] = findSeed<Src, Seed>(context, key);\n      let constructed: Value | null | undefined;\n      const hasFallback = 'or' in opts;\n      let setupValue: ContextValueSetup<Value, Src, Seed> = noop;\n      const slot: ContextValueSlot.Base<Value, Src, Seed> = {\n        context,\n        key,\n        seeder,\n        seed,\n        hasFallback,\n        get or() {\n          return opts.or;\n        },\n        insert(value) {\n          constructed = value;\n        },\n        fillBy(grow) {\n          grow(slot as ContextValueSlot<Value, Src, Seed>);\n          return constructed;\n        },\n        setup(setup) {\n\n          const prevSetup = setupValue;\n\n          setupValue = opts => {\n            prevSetup(opts);\n            setup(opts);\n          };\n        },\n      };\n      key.grow(slot as ContextValueSlot<Value, Src, Seed>);\n\n      if (constructed != null) {\n        return [constructed, setupValue];\n      }\n      if (!hasFallback) {\n        throw new ContextKeyError(key);\n      }\n\n      return [opts.or];\n    }\n\n    function findSeed<Src, Seed>(\n        context: Ctx,\n        key: ContextKey<any, Src, Seed>,\n    ): [ContextSeeder<Ctx, Src, Seed>, Seed] {\n\n      const { seedKey } = key;\n      const [seeder, factory] = registry._seeding(seedKey);\n\n      if (seedKey !== key as any) {\n        // This is not a seed key\n        // Retrieve the seed by seed key\n        return [seeder, context.get(seedKey)];\n      }\n\n      return [seeder, factory(context)];\n    }\n  }\n\n  /**\n   * Appends values provided by another value registry to the ones provided by this one.\n   *\n   * @param other  Another context value registry.\n   *\n   * @return New context value registry which values provided by both registries.\n   */\n  append(other: ContextRegistry<Ctx>): ContextRegistry<Ctx> {\n    return new ContextRegistry(<Src, Seed>(key: ContextSeedKey<Src, Seed>, context: Ctx) => {\n\n      const [seeder, factory] = this._seeding(key);\n\n      return seeder.combine(factory(context), other.seed(context, key), context);\n    });\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/context-values\n */\nimport { filterIt, flatMapIt, itsEmpty, mapIt, overNone } from '@proc7ts/a-iterable';\nimport { isPresent, lazyValue } from '@proc7ts/primitives';\nimport { ContextKey, ContextSeedKey } from './context-key';\nimport { ContextSeeder } from './context-seeder';\nimport { ContextValueProvider } from './context-value-spec';\nimport { ContextValues } from './context-values';\n\n/**\n * @internal\n */\nclass IterativeContextSeeder<Ctx extends ContextValues, Src> implements ContextSeeder<Ctx, Src, Iterable<Src>> {\n\n  private readonly _providers: ContextValueProvider<Ctx, Src>[] = [];\n\n  provide(provider: ContextValueProvider<Ctx, Src>): () => void {\n    this._providers.push(provider);\n    return () => {\n\n      const found = this._providers.indexOf(provider);\n\n      if (found >= 0) {\n        this._providers.splice(found, 1);\n      }\n    };\n  }\n\n  seed(context: Ctx, initial: Iterable<Src> = overNone()): Iterable<Src> {\n    return flatMapIt([\n      initial,\n      iterativeSeed(context, this._providers),\n    ]);\n  }\n\n  isEmpty(seed: Iterable<Src>): boolean {\n    return itsEmpty(seed);\n  }\n\n  combine(first: Iterable<Src>, second: Iterable<Src>): Iterable<Src> {\n    return flatMapIt([first, second]);\n  }\n\n}\n\n/**\n * @internal\n */\nclass IterativeSeedKey<Src> extends ContextSeedKey<Src, Iterable<Src>> {\n\n  seeder<Ctx extends ContextValues>(): IterativeContextSeeder<Ctx, Src> {\n    return new IterativeContextSeeder();\n  }\n\n}\n\n/**\n * Iterative context value key implementation.\n *\n * Collects value sources as iterable instance.\n *\n * A context value associated with this key is never changes once constructed.\n *\n * @typeparam Value  Context value type.\n * @typeparam Src  Source value type.\n */\nexport abstract class IterativeContextKey<Value, Src = Value> extends ContextKey<Value, Src, Iterable<Src>> {\n\n  readonly seedKey: ContextSeedKey<Src, Iterable<Src>>;\n\n  /**\n   * Constructs iterative context value key.\n   *\n   * @param name  Human-readable key name.\n   * @param seedKey  Value seed key. A new one will be constructed when omitted.\n   */\n  constructor(\n      name: string,\n      {\n        seedKey,\n      }: {\n        seedKey?: ContextSeedKey<Src, Iterable<Src>>;\n      } = {},\n  ) {\n    super(name);\n    this.seedKey = seedKey || new IterativeSeedKey(this);\n  }\n\n}\n\n/**\n * @internal\n */\nfunction iterativeSeed<Ctx extends ContextValues, Src>(\n    context: Ctx,\n    providers: readonly ContextValueProvider<Ctx, Src>[],\n): Iterable<Src> {\n  return filterIt<Src | null | undefined, Src>(\n      mapIt(\n          providers.map(provider => lazyValue(provider.bind(undefined, context))), // lazily evaluated providers\n          provider => provider(),\n      ),\n      isPresent,\n  );\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/context-values\n */\nimport { valuesProvider } from '@proc7ts/primitives';\nimport { ContextKey, ContextKeyDefault, ContextSeedKey, ContextValueSlot } from './context-key';\nimport { ContextRef } from './context-ref';\nimport { IterativeContextKey } from './iterative-context-key';\n\n/**\n * Multiple context value reference.\n *\n * Represents context value as read-only array of source values.\n *\n * @typeparam Src  Value source type and context value item type.\n */\nexport type MultiContextRef<Src> = ContextRef<readonly Src[], Src>;\n\n/**\n * Multiple context values key.\n *\n * Represents context value as read-only array of source values.\n *\n * Associated with empty array by default.\n *\n * @typeparam Src  Value source type and context value item type.\n */\nexport class MultiContextKey<Src>\n    extends IterativeContextKey<readonly Src[], Src>\n    implements MultiContextRef<Src> {\n\n  /**\n   * A provider of context value used when there is no value associated with this key.\n   */\n  readonly byDefault: ContextKeyDefault<readonly Src[], ContextKey<readonly Src[], Src>>;\n\n  /**\n   * Constructs multiple context values key.\n   *\n   * @param name  Human-readable key name.\n   * @param seedKey  Value seed key. A new one will be constructed when omitted.\n   * @param byDefault  Optional default value provider. If unspecified then the default value is empty array.\n   */\n  constructor(\n      name: string,\n      {\n        seedKey,\n        byDefault = valuesProvider(),\n      }: {\n        seedKey?: ContextSeedKey<Src, Iterable<Src>>;\n        byDefault?: ContextKeyDefault<readonly Src[], ContextKey<readonly Src[], Src>>;\n      } = {},\n  ) {\n    super(name, seedKey);\n    this.byDefault = byDefault;\n  }\n\n  grow(\n      slot: ContextValueSlot<readonly Src[], Src, Iterable<Src>>,\n  ): void {\n\n    const result = Array.from(slot.seed);\n\n    if (result.length) {\n      slot.insert(result);\n    } else if (!slot.hasFallback) {\n\n      const defaultSources = this.byDefault(slot.context, this);\n\n      if (defaultSources) {\n        slot.insert(Array.from(defaultSources));\n      }\n    }\n  }\n\n}\n\n","/**\n * @packageDocumentation\n * @module @proc7ts/context-values\n */\nimport { lazyValue, noop } from '@proc7ts/primitives';\nimport { ContextKey, ContextSeedKey } from './context-key';\nimport { ContextSeeder } from './context-seeder';\nimport { ContextValueProvider } from './context-value-spec';\nimport { ContextValues } from './context-values';\n\n/**\n * @internal\n */\nclass SimpleContextSeeder<Ctx extends ContextValues, Src>\n    implements ContextSeeder<Ctx, Src, SimpleContextKey.Seed<Src>> {\n\n  private readonly _providers: ContextValueProvider<Ctx, Src>[] = [];\n\n  provide(provider: ContextValueProvider<Ctx, Src>): () => void {\n    this._providers.unshift(provider);\n    return () => {\n\n      const found = this._providers.lastIndexOf(provider);\n\n      if (found >= 0) {\n        this._providers.splice(found, 1);\n      }\n    };\n  }\n\n  seed(context: Ctx, initial?: SimpleContextKey.Seed<Src>): SimpleContextKey.Seed<Src> {\n\n    const { length } = this._providers;\n\n    if (!length) {\n      return initial || noop;\n    }\n\n    const makeSeed = (provider: ContextValueProvider<Ctx, Src>): SimpleContextKey.Seed<Src> => lazyValue(\n        provider.bind(undefined, context),\n    );\n\n    if (!initial && length === 1) {\n      return makeSeed(this._providers[0]);\n    }\n\n    const seeds: SimpleContextKey.Seed<Src>[] = this._providers.map(makeSeed);\n\n    if (initial) {\n      seeds.push(initial);\n    }\n\n    return combineSimpleSeeds(seeds);\n  }\n\n  isEmpty(seed: SimpleContextKey.Seed<Src>): boolean {\n    return seed() == null;\n  }\n\n  combine(\n      first: SimpleContextKey.Seed<Src>,\n      second: SimpleContextKey.Seed<Src>,\n  ): SimpleContextKey.Seed<Src> {\n    if (first === noop) {\n      return second;\n    }\n    if (second === noop) {\n      return first;\n    }\n    return combineSimpleSeeds([second, first]);\n  }\n\n}\n\n/**\n * @internal\n */\nfunction combineSimpleSeeds<Src>(\n    seeds: readonly SimpleContextKey.Seed<Src>[],\n): SimpleContextKey.Seed<Src> {\n  return lazyValue(() => {\n    for (const seed of seeds) {\n\n      const value = seed();\n\n      if (value != null) {\n        return value;\n      }\n    }\n    return;\n  });\n}\n\n/**\n * @internal\n */\nclass SimpleSeedKey<Src> extends ContextSeedKey<Src, SimpleContextKey.Seed<Src>> {\n\n  seeder<Ctx extends ContextValues>(): SimpleContextSeeder<Ctx, Src> {\n    return new SimpleContextSeeder();\n  }\n\n}\n\n/**\n * Simple context value key implementation.\n *\n * Collects the most recent source value.\n *\n * A context value associated with this key is never changes once constructed.\n *\n * @typeparam Value  Context value type.\n * @typeparam Src  Source value type.\n */\nexport abstract class SimpleContextKey<Value, Src = Value> extends ContextKey<Value, Src, SimpleContextKey.Seed<Src>> {\n\n  readonly seedKey: ContextSeedKey<Src, SimpleContextKey.Seed<Src>>;\n\n  /**\n   * Constructs simple context value key.\n   *\n   * @param name  Human-readable key name.\n   * @param seedKey  Value seed key. A new one will be constructed when omitted.\n   */\n  constructor(\n      name: string,\n      {\n        seedKey,\n      }: {\n        seedKey?: ContextSeedKey<Src, SimpleContextKey.Seed<Src>>;\n      } = {},\n  ) {\n    super(name);\n    this.seedKey = seedKey || new SimpleSeedKey(this);\n  }\n\n}\n\nexport namespace SimpleContextKey {\n\n  /**\n   * A seed of {@link SimpleContextKey simple context key}.\n   *\n   * @typeparam Src  Source vale type.\n   */\n  export type Seed<Src> =\n  /**\n   * @returns Either source value, or `null`/`undefined` when when absent.\n   */\n      (this: void) => Src | null | undefined;\n\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/context-values\n */\nimport { noop } from '@proc7ts/primitives';\nimport { ContextKey, ContextKeyDefault, ContextSeedKey, ContextValueSlot } from './context-key';\nimport { ContextRef } from './context-ref';\nimport { SimpleContextKey } from './simple-context-key';\n\n/**\n * Single context value reference.\n *\n * @typeparam Value  Context value type.\n */\nexport type SingleContextRef<Value> = ContextRef<Value, Value>;\n\n/**\n * Single context value key.\n *\n * Treats the last source value as context one and ignores the rest of them.\n *\n * @typeparam Value  Context value type.\n */\nexport class SingleContextKey<Value>\n    extends SimpleContextKey<Value>\n    implements SingleContextRef<Value> {\n\n  /**\n   * A provider of context value used when there is no value associated with this key.\n   */\n  readonly byDefault: ContextKeyDefault<Value, ContextKey<Value>>;\n\n  /**\n   * Constructs single context value key.\n   *\n   * @param name  Human-readable key name.\n   * @param seedKey  Value seed key. A new one will be constructed when omitted.\n   * @param byDefault  Optional default value provider. If unspecified or `undefined` the key has no default\n   * value.\n   */\n  constructor(\n      name: string,\n      {\n        seedKey,\n        byDefault = noop,\n      }: {\n        seedKey?: ContextSeedKey<Value, SimpleContextKey.Seed<Value>>;\n        byDefault?: ContextKeyDefault<Value, ContextKey<Value>>;\n      } = {},\n  ) {\n    super(name, { seedKey });\n    this.byDefault = byDefault;\n  }\n\n  grow(\n      slot: ContextValueSlot<Value, Value, SimpleContextKey.Seed<Value>>,\n  ): void {\n\n    const value = slot.seed();\n\n    if (value != null) {\n      slot.insert(value);\n    } else if (!slot.hasFallback) {\n      slot.insert(this.byDefault(slot.context, this));\n    }\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/fun-events\n */\nimport { AfterEvent } from '../after-event';\n\n/**\n * A key of [[EventKeeper]] method returning its [[AfterEvent]] instance..\n *\n * @category Core\n */\nexport const AfterEvent__symbol = (/*#__PURE__*/ Symbol('after-event'));\n\n/**\n * An event supplier that keeps the last event sent.\n *\n * The registered event receiver would receive the kept event immediately upon registration, and all upcoming events\n * after that.\n *\n * @category Core\n * @typeparam E  An event type. This is a list of event receiver parameter types.\n */\nexport interface EventKeeper<E extends any[]> {\n\n  /**\n   * Returns an [[AfterEvent]] instance of this event keeper.\n   *\n   * @returns [[AfterEvent]] instance registering event receivers sent by this keeper.\n   */\n  [AfterEvent__symbol](): AfterEvent<E>;\n\n}\n\nexport namespace EventKeeper {\n\n  /**\n   * A type of events sent by the given event keeper.\n   *\n   * @typeparam T  Target event keeper.\n   */\n  export type Event<T extends EventKeeper<any>> = T extends EventKeeper<infer E> ? E : never;\n\n}\n\n/**\n * Checks whether the given object implements an [[EventKeeper]] interface.\n *\n * @category Core\n * @typeparam E  An event type. This is a list of event receiver parameter types.\n * @param value  An object to check.\n *\n * @returns `true` if `value` contains an [[AfterEvent__symbol]] property, or `false` otherwise.\n */\nexport function isEventKeeper<E extends any[]>(value: object): value is EventKeeper<E> {\n  return AfterEvent__symbol in value;\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/fun-events\n */\nimport { noop } from '@proc7ts/primitives';\n\n/**\n * A key of [[EventSupplyPeer]] property containing [[EventSupply]] instance.\n *\n * @category Core\n */\nexport const EventSupply__symbol = (/*#__PURE__*/ Symbol('events-supply'));\n\n/**\n * A supply of events from {@link EventSupplier event supplier} to {@link EventReceiver event receiver}.\n *\n * When no longer needed the supply may be {@link off cut off}.\n *\n * May be constructed using [[eventSupply]] function.\n *\n * @category Core\n */\nexport class EventSupply implements EventSupplyPeer {\n\n  /**\n   * @internal\n   */\n  private _off: (reason?: any) => void;\n\n  /**\n   * @internal\n   */\n  private _whenOff: (callback: (reason?: any) => void) => void;\n\n  constructor(off: (this: void, reason?: any) => void = noop) {\n    this._off = reason => {\n      this._whenOff = callback => callback(reason);\n      this._off = noop;\n      off(reason);\n    };\n    this._whenOff = callback => {\n\n      const prev = this._off;\n\n      this._off = reason => {\n        prev(reason);\n        callback(reason);\n      };\n    };\n  }\n\n  /**\n   * Whether this supply is {@link off cut off} already.\n   *\n   * `true` means the events will no longer be supplied.\n   */\n  get isOff(): boolean {\n    return this._off === noop;\n  }\n\n  /**\n   * `this` event supply.\n   */\n  get [EventSupply__symbol](): this {\n    return this;\n  }\n\n  /**\n   * Cuts off the supply of events.\n   *\n   * After this method call the receiver will no longer receive events.\n   *\n   * Calling this method for the second time has no effect.\n   *\n   * @param reason  An optional reason why supply is cut off. It will be reported to [[whenOff]] callbacks.\n   * By convenience, an absent reason means the supply is done successfully.\n   *\n   * @returns A cut off event supply instance.\n   */\n  off(reason?: any): EventSupply {\n    this._off(reason);\n    return this;\n  }\n\n  /**\n   * Registers a callback function that will be called as soon as this supply is {@link off cut off}. This callback\n   * will be called immediately if [[isOff]] is `true`.\n   *\n   * @param callback  A callback function accepting optional cut off reason as its only parameter.\n   * By convenience an `undefined` reason means the supply is done successfully.\n   *\n   * @returns `this` instance.\n   */\n  whenOff(callback: (this: void, reason?: any) => void): this {\n    this._whenOff(callback);\n    return this;\n  }\n\n  /**\n   * Builds a promise that will be resolved once this supply is {@link off done}.\n   *\n   * @returns A promise that will be successfully resolved once this supply is cut off without reason, or rejected\n   * once this supply is cut off with any reason except `undefined`.\n   */\n  whenDone(): Promise<void> {\n    return new Promise(\n        (resolve, reject) => this.whenOff(\n            reason => reason === undefined ? resolve() : reject(reason),\n        ),\n    );\n  }\n\n  /**\n   * Makes another event supply depend on this one.\n   *\n   * Once this supply is {@link off cut off}, `another` one is cut off with the same reason.\n   *\n   * Calling this method has the same effect as calling {@link needs eventSupplyOf(another).need(this)}.\n   *\n   * @param another  A peer of event supply to make depend on this one.\n   *\n   * @returns `this` instance.\n   */\n  cuts(another: EventSupplyPeer): this {\n    eventSupplyOf(another).needs(this);\n    return this;\n  }\n\n  /**\n   * Declares this event supply depends on another one.\n   *\n   * Once `another` supply is {@link off cut off}, this one is will be cut off with the same reason.\n   *\n   * @param another  A peer of event supply this one depends on.\n   *\n   * @returns `this` instance.\n   */\n  needs(another: EventSupplyPeer): this {\n    eventSupplyOf(another).whenOff(reason => this._off(reason));\n    return this;\n  }\n\n}\n\n/**\n * A peer of event supply.\n *\n * Contains an [[EventSupply]] that can be extracted by [[eventSupplyOf]] function.\n *\n * To be implemented by objects that controls event supply. An [[EventSupply]] is a peer of itself.\n *\n * @category Core\n */\nexport interface EventSupplyPeer {\n\n  /**\n   * An event supply of this peer.\n   */\n  readonly [EventSupply__symbol]: EventSupply;\n\n}\n\n/**\n * Extracts an event supply from its peer.\n *\n * @category Core\n * @param peer  A peer of event supply.\n *\n * @returns Extracted event supply contained in [[EventSupply__symbol]] property.\n */\nexport function eventSupplyOf(peer: EventSupplyPeer): EventSupply {\n  return peer[EventSupply__symbol];\n}\n\n/**\n * Constructs new {@link EventSupply event supply}.\n *\n * @category Core\n * @param off  A function to call when supply will supply is {@link EventSupply.off cut off}. Accepts optional\n * cut off reason as its only parameter. No-op by default.\n */\nexport function eventSupply(off?: (this: void, reason?: any) => void): EventSupply {\n  return new EventSupply(off);\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/fun-events\n */\nimport { noop } from '@proc7ts/primitives';\nimport { eventSupply, EventSupply } from './event-supply';\n\n/**\n * Event receiver is called on each event sent by [[EventSender]] when registered.\n *\n * A receiver may be represented either by {@link EventReceiver.Function function}, or by\n * {@link EventReceiver.Object object}. The former is a simplest form. The latter allows control all aspects of event\n * processing.\n *\n * To register an event receiver just call the event sender's `[OnEvent__symbol]` or event keeper's\n * `[AfterEvent__symbol]` method with this event receiver as argument.\n *\n * A _recurrent event_ is an event sent from inside event receiver and targeted the same receiver. Recurrent event\n * processing is scheduled until after the current event processing finishes. To handle recurrent events in a specific\n * way the event receiver may utilize an {@link EventReceiver.Context event processing context} available as\n * a first parameter of [[EventReceiver.Object.receive]] method.\n *\n * @category Core\n * @typeparam E  An event type. This is a tuple of event receiver parameter types.\n */\nexport type EventReceiver<E extends any[]> = EventReceiver.Function<E> | EventReceiver.Object<E>;\n\nexport namespace EventReceiver {\n\n  /**\n   * Event receiver function signature.\n   *\n   * It never receives event processing context.\n   *\n   * @typeparam E  An event type. This is a tuple of event receiver parameter types.\n   */\n  export type Function<E extends any[]> =\n  /**\n   * @param event  An event represented by function call arguments.\n   */\n      (this: void, ...event: E) => void;\n\n  /**\n   * Event receiver object.\n   *\n   * @typeparam E  An event type. This is a tuple of event receiver parameter types.\n   */\n  export interface Object<E extends any[]> {\n\n    /**\n     * Event supply to this receiver.\n     *\n     * Events will be supplied to this receiver until this supply is {@link EventSupply.off cut off}.\n     *\n     * When omitted a new supply will be created per receiver registration within event supplier.\n     */\n    readonly supply?: EventSupply;\n\n    /**\n     * Receives an event.\n     *\n     * @param context  An event processing context.\n     * @param event  An event represented as the rest of arguments.\n     */\n    receive(context: Context<E>, ...event: E): void;\n\n  }\n\n  /**\n   * The most generic event receiver form.\n   *\n   * Any event receiver may be converted to generic form by [[eventReceiver]] function.\n   *\n   * In contrast to [[Object]] this one always has a supply.\n   *\n   * @typeparam E  An event type. This is a tuple of event receiver parameter types.\n   */\n  export interface Generic<E extends any[]> extends Object<E> {\n\n    readonly supply: EventSupply;\n\n  }\n\n  /**\n   * Event processing context.\n   *\n   * It is passed to [[Object]] receivers.\n   *\n   * @typeparam E  An event type. This is a tuple of event receiver parameter types.\n   */\n  export interface Context<E extends any[]> {\n\n    /**\n     * Schedules the given event receiver to be called to process recurrent event(s).\n     *\n     * If called during event processing the recurrent events will be sent to the given `receiver` after current event\n     * processed instead of original one.\n     *\n     * If called multiple times the latest `receiver` will be used.\n     *\n     * If not called the recurrent events will be sent to original event receiver.\n     *\n     * > This method should be called __before__ the recurrent event issued. Otherwise it may happen that recurrent\n     * > event will be ignored in some situations. E.g. when it is issued during receiver registration.\n     *\n     * @param receiver  Recurrent events receiver function.\n     */\n    onRecurrent(receiver: EventReceiver.Function<E>): void;\n\n  }\n\n}\n\n/**\n * Converts arbitrary event receiver to generic form.\n *\n * The returned event receiver would never send events to original receiver after event supply is cut off.\n *\n * @category Core\n * @typeparam E  An event type. This is a tuple of event receiver parameter types.\n * @param receiver  An event receiver to convert.\n *\n * @returns Event `receiver` in most generic form.\n */\nexport function eventReceiver<E extends any[]>(receiver: EventReceiver<E>): EventReceiver.Generic<E> {\n\n  let generic: {\n    readonly supply: EventSupply;\n    receive: (context: EventReceiver.Context<E>, ...event: E) => void;\n  };\n\n  if (typeof receiver === 'function') {\n    generic = {\n      supply: eventSupply(),\n      receive(_context, ...event) {\n        receiver(...event);\n      },\n    };\n  } else {\n    generic = {\n      supply: receiver.supply || eventSupply(),\n      receive(context, ...event) {\n        if (!this.supply.isOff) {\n          // Supply cut off callback may be called before the receiver disabled.\n          // Such callback may send an event that should not be received.\n          receiver.receive(context, ...event);\n        }\n      },\n    };\n  }\n\n  // Disable receiver when event supply is cut off. But see the comment above.\n  // For function receiver this callback is always the first one.\n  generic.supply.whenOff(() => generic.receive = noop);\n\n  return generic;\n}\n","import { eventReceiver, EventReceiver } from './event-receiver';\n\n/**\n * Creates an event receiver function that dispatches events to each of the given event receivers.\n *\n * @internal\n * @param receivers  An iterable of event receivers to dispatch event to.\n *\n * @returns An event receiver function that does not utilize event processing context an thus can be called directly.\n */\nexport function receiveByEach<E extends any[]>(\n    receivers: Iterable<EventReceiver.Generic<E>>,\n): (this: void, ...event: E) => void {\n\n  let send: (this: void, event: E) => void = sendNonRecurrent;\n\n  return (...event) => send(event);\n\n  function sendNonRecurrent(event: E): void {\n\n    let actualReceivers = receivers;\n    const received: E[] = [];\n\n    send = (recurrent: E) => received.push(recurrent);\n\n    try {\n      for (; ;) {\n        actualReceivers = processEvent(actualReceivers, event);\n\n        const recurrent = received.shift();\n\n        if (!recurrent) {\n          break;\n        }\n\n        event = recurrent;\n      }\n    } finally {\n      send = sendNonRecurrent;\n    }\n  }\n}\n\nfunction processEvent<E extends any[]>(\n    receivers: Iterable<EventReceiver.Generic<E>>,\n    event: E,\n): EventReceiver.Generic<E>[] {\n\n  const recurrentReceivers: EventReceiver.Generic<E>[] = [];\n\n  for (const receiver of receivers) {\n\n    const idx = recurrentReceivers.length;\n\n    recurrentReceivers.push(receiver);\n\n    const context: EventReceiver.Context<E> = {\n      onRecurrent(recurrentReceiver) {\n        recurrentReceivers[idx] = eventReceiver({\n          supply: receiver.supply,\n          receive(_context, ...recurrentEvent) {\n            recurrentReceiver(...recurrentEvent);\n          },\n        });\n      },\n    };\n\n    receiver.receive(context, ...event);\n  }\n\n  return recurrentReceivers;\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/fun-events\n */\nimport { receiveByEach } from './event-notifier.impl';\nimport { eventReceiver, EventReceiver } from './event-receiver';\nimport { eventSupply, EventSupply, EventSupply__symbol, eventSupplyOf, EventSupplyPeer } from './event-supply';\n\n/**\n * Event notifier can be used to register event receivers and send events to them.\n *\n * It does not implement an [[EventSender]] interface though. Use an [[EventEmitter]] if you need one.\n *\n * Manages a list of registered event receivers, and removes them from the list once their supplies\n * are {@link EventSupply.off cut off}.\n *\n * @category Core\n * @typeparam E  An event type. This is a list of event receiver parameter types.\n */\nexport class EventNotifier<E extends any[]> implements EventSupplyPeer {\n\n  /**\n   * @internal\n   */\n  private _rcs?: Set<EventReceiver.Generic<E>>;\n\n  readonly [EventSupply__symbol]: EventSupply;\n\n  /**\n   * Sends the given `event` to all registered receivers.\n   *\n   * @param event  An event to send represented by function call arguments.\n   */\n  readonly send: (this: this, ...event: E) => void;\n\n  constructor() {\n\n    const rcs = this._rcs = new Set<EventReceiver.Generic<E>>();\n\n    this.send = receiveByEach(rcs);\n    this[EventSupply__symbol] = eventSupply(() => {\n      rcs.clear();\n      delete this._rcs;\n    });\n  }\n\n  /**\n   * The number of currently registered event receivers.\n   */\n  get size(): number {\n    return this._rcs ? this._rcs.size : 0;\n  }\n\n  /**\n   * Registers an event receiver.\n   *\n   * Receivers registered with this method will receive the {@link send emitted} events.\n   *\n   * The `[OnEvent__symbol]` method is an alias of this one.\n   *\n   * @param receiver  A receiver of events to register.\n   *\n   * @returns A supply of events to the given `receiver`.\n   */\n  on(receiver: EventReceiver<E>): EventSupply {\n\n    const generic = eventReceiver(receiver);\n    const supply = generic.supply.needs(this);\n    const receivers = this._rcs;\n\n    if (receivers && !supply.isOff) {\n      receivers.add(generic);\n      supply.whenOff(() => receivers.delete(generic));\n    }\n\n    return supply;\n  }\n\n  /**\n   * Removes all registered event receivers and cuts off corresponding event supplies.\n   *\n   * After this method call they won't receive any events. While new receivers would be cut off immediately upon\n   * registration.\n   *\n   * @param reason  A reason to stop sending events.\n   *\n   * @returns `this` instance.\n   */\n  done(reason?: any): this {\n    eventSupplyOf(this).off(reason);\n    return this;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/fun-events\n */\nimport { OnEvent } from '../on-event';\n\n/**\n * A key of [[EventSender]] method returning its [[OnEvent]] instance.\n *\n * @category Core\n */\nexport const OnEvent__symbol = (/*#__PURE__*/ Symbol('on-event'));\n\n/**\n * A sender of events.\n *\n * Contains an [[OnEvent]] instance registering event receivers.\n *\n * @category Core\n * @typeparam E  An event type. This is a tuple of event receiver parameter types.\n */\nexport interface EventSender<E extends any[]> {\n\n  /**\n   * Returns an [[OnEvent]] instance of this event sender.\n   *\n   * @returns [[OnEvent]] instance registering event receivers sent by this sender.\n   */\n  [OnEvent__symbol](): OnEvent<E>;\n\n}\n\nexport namespace EventSender {\n\n  /**\n   * A type of events sent by the given event sender.\n   *\n   * @typeparam T  Target event sender.\n   */\n  export type Event<T extends EventSender<any>> = T extends EventSender<infer E> ? E : never;\n\n}\n\n/**\n * Checks whether the given object implements an [[EventSender]] interface.\n *\n * @category Core\n * @typeparam E  An event type. This is a list of event receiver parameter types.\n * @param value  An object to check.\n *\n * @returns `true` if `value` contains [[OnEvent__symbol]] property, or `false` otherwise.\n */\nexport function isEventSender<E extends any[]>(value: object): value is EventSender<E> {\n  return OnEvent__symbol in value;\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/fun-events\n */\nimport { EventSupply, eventSupplyOf, EventSupplyPeer } from './event-supply';\n\n/**\n * @internal\n */\nclass NoSupply extends EventSupply {\n\n  get isOff(): true {\n    return true;\n  }\n\n  off(): this {\n    return this;\n  }\n\n  whenOff(callback: (reason?: any) => void): this {\n    callback();\n    return this;\n  }\n\n  cuts(another: EventSupplyPeer): this {\n    eventSupplyOf(another).off();\n    return this;\n  }\n\n  needs(): this {\n    return this;\n  }\n\n}\n\n/**\n * @internal\n */\nconst noSupply = (/*#__PURE__*/ new NoSupply());\n\n/**\n * Returns a no-event supply.\n *\n * @category Core\n *\n * @returns An event supply that is already cut off without any particular reason.\n */\nexport function noEventSupply(): EventSupply {\n  return noSupply;\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/fun-events\n */\nimport { noop } from '@proc7ts/primitives';\nimport { receiveByEach } from './event-notifier.impl';\nimport { eventReceiver, EventReceiver } from './event-receiver';\n\n/**\n * Creates an event sender targeted specific receiver.\n *\n * @category Core\n * @typeparam E  An event type. This is a list of event receiver parameter types.\n *\n * @param receiver  Target event receiver.\n *\n * @returns A function accepting events and sending them to target `receiver`.\n */\nexport function sendEventsTo<E extends any[]>(receiver: EventReceiver<E>): (this: void, ...event: E) => void {\n\n  const generic = eventReceiver(receiver);\n  let send: (...event: E) => void = receiveByEach([generic]);\n\n  generic.supply.whenOff(() => send = noop);\n\n  return (...event) => send(...event);\n}\n","import { EventReceiver } from '../base';\nimport { OnEvent } from '../on-event';\n\n/**\n * @internal\n */\nexport function once<E extends any[]>(\n    onSource: OnEvent<E>,\n): (receiver: EventReceiver.Generic<E>) => void {\n  return (receiver: EventReceiver.Generic<E>): void => {\n    onSource.to({\n      supply: receiver.supply,\n      receive: (context, ...event) => {\n        receiver.receive(context, ...event);\n        receiver.supply.off();\n      },\n    });\n  };\n}\n","import { EventNotifier, EventReceiver, eventSupply, EventSupply, sendEventsTo } from '../base';\nimport { OnEvent } from '../on-event';\n\n/**\n * @internal\n */\nexport function share<E extends any[]>(\n    onSource: OnEvent<E>,\n): (receiver: EventReceiver.Generic<E>) => void {\n\n  const shared = new EventNotifier<E>();\n  let sharedSupply: EventSupply;\n  let initialEvents: E[] | undefined;\n\n  return (receiver: EventReceiver.Generic<E>): void => {\n    if (!shared.size) {\n      initialEvents = [];\n      sharedSupply = eventSupply(() => initialEvents = undefined);\n\n      onSource.to({\n        supply: sharedSupply,\n        receive(_ctx, ...event) {\n          if (initialEvents) {\n            if (shared.size) {\n              // More events received\n              // Stop sending initial ones\n              initialEvents = undefined;\n            } else {\n              // Record events received during first receiver registration\n              // to send them to all receivers until more event received\n              initialEvents.push(event);\n            }\n          }\n          shared.send(...event);\n        },\n      });\n    }\n\n    receiver.supply.needs(sharedSupply);\n    shared.on(receiver).whenOff((reason?: any) => {\n      if (!shared.size) {\n        sharedSupply.off(reason);\n      }\n    });\n\n    if (initialEvents) {\n      // Send initial events to just registered receiver\n\n      const dispatch = sendEventsTo(receiver);\n\n      initialEvents.forEach(event => dispatch(...event));\n    }\n  };\n}\n","import { isNextCall, NextCall__symbol } from '@proc7ts/call-thru';\nimport { noop } from '@proc7ts/primitives';\nimport { EventReceiver, EventSender, eventSupply, EventSupply, noEventSupply, OnEvent__symbol } from '../base';\nimport { OnEvent } from '../on-event';\nimport { OnEventCallChain } from '../passes';\n\n/**\n * @internal\n */\nexport function thru<E extends any[]>(\n    onSource: OnEvent<E>,\n    passes: ((...args: any[]) => any)[],\n): (receiver: EventReceiver.Generic<E>) => void {\n\n  interface ChainEntry {\n    readonly chain: OnEventCallChain;\n    supply: EventSupply;\n  }\n\n  return (receiver: EventReceiver.Generic<any>): void => {\n\n    const chains: ChainEntry[] = [];\n\n    onSource.to({\n      supply: receiver.supply,\n      receive(context, ...event) {\n\n        const chain = (index: number, chainSupply: EventSupply): [OnEventCallChain, EventSupply] => {\n\n          const lastPass = index >= passes.length;\n\n          ++index;\n\n          const existing = chains[index];\n\n          if (existing) {\n\n            const prevSupply = existing.supply;\n\n            existing.supply = chainSupply;\n\n            return [existing.chain, prevSupply];\n          }\n\n          const pass = index < passes.length ? passes[index] : noop;\n\n          const entry: ChainEntry = {\n            chain: {\n              call<A extends any[]>(fn: (...args: A) => any, args: A): void {\n                handleResult(fn(...args), args);\n              },\n              pass<A>(fn: (arg: A) => any, arg: A): void {\n                handleResult(fn(arg), [arg]);\n              },\n              skip(): void {\n                entry.supply.off();\n              },\n              onEvent<E extends any[]>(\n                  pass: (this: void, ...event: E) => void,\n                  sender: EventSender<E>,\n              ): void {\n\n                const supply = eventSupply().needs(entry.supply);\n\n                sender[OnEvent__symbol]().to({\n                  supply,\n                  receive(_context, ...event): void {\n                    handleResult(pass(...event), event, supply);\n                  },\n                });\n              },\n            },\n            supply: chainSupply,\n          };\n\n          chains[index] = entry;\n\n          return [entry.chain, noEventSupply()];\n\n          function handleResult(\n              callResult: any,\n              args: any[],\n              parentSupply = entry.supply,\n          ): void {\n\n            const [nextChain, prevSupply] = chain(index, eventSupply().needs(parentSupply));\n\n            try {\n              if (isNextCall(callResult)) {\n                callResult[NextCall__symbol](nextChain, pass);\n              } else if (lastPass) {\n                receiver.receive(context, ...args);\n              } else {\n                nextChain.pass(pass, callResult);\n              }\n            } finally {\n              prevSupply.off();\n            }\n          }\n        };\n\n        const [firstChain, prevSupply] = chain(0, eventSupply().needs(receiver.supply));\n\n        try {\n          firstChain.call(passes[0], event);\n        } finally {\n          prevSupply.off();\n        }\n      },\n    });\n  };\n}\n","import { EventReceiver, eventSupply, EventSupply, EventSupplyPeer } from '../base';\nimport { OnEvent } from '../on-event';\n\n/**\n * @internal\n */\nexport function tillOff<E extends any[]>(\n    onSource: OnEvent<E>,\n    required: EventSupplyPeer,\n    dependentSupply?: EventSupply,\n): (receiver: EventReceiver.Generic<E>) => void {\n  return (receiver: EventReceiver.Generic<E>): void => {\n    if (dependentSupply) {\n      onSource.to({\n        supply: eventSupply().needs(required).cuts(dependentSupply),\n        receive: (receiver.receive as (...args: any[]) => void).bind(receiver),\n      });\n    } else {\n      receiver.supply.needs(required);\n      onSource.to(receiver);\n    }\n  };\n}\n","import { EventReceiver } from '../index';\n\n/**\n * @internal\n */\nexport function neverReceiveBecause(reason?: any): (receiver: EventReceiver.Generic<any>) => void {\n  return ({ supply }) => supply.off(reason);\n}\n\n/**\n * @internal\n */\nexport function neverReceive({ supply }: EventReceiver.Generic<any>): void {\n  supply.off();\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/fun-events\n */\nimport {\n  eventReceiver,\n  EventReceiver,\n  EventSender,\n  eventSupply,\n  EventSupply,\n  eventSupplyOf,\n  EventSupplyPeer,\n  noEventSupply,\n  OnEvent__symbol,\n} from './base';\nimport { once, share, then, thru, tillOff } from './impl';\nimport { OnEventCallChain } from './passes';\nimport Args = OnEventCallChain.Args;\nimport Out = OnEventCallChain.Out;\n\n/**\n * An [[EventSender]] implementation able to register event receivers.\n *\n * The registered event receiver starts receiving upcoming events until the returned event supply is\n * {@link EventSupply.off cut off}.\n *\n * Contains additional event processing methods.\n *\n * @category Core\n * @typeparam E  An event type. This is a list of event receiver parameter types.\n */\nexport class OnEvent<E extends any[]> implements EventSender<E> {\n\n  /**\n   * Generic event receiver registration function. It will be called on each receiver registration,\n   * unless the receiver's {@link EventReceiver.Generic.supply event supply} is cut off already.\n   */\n  protected readonly _on: (receiver: EventReceiver.Generic<E>) => void;\n\n  /**\n   * Constructs [[OnEvent]] instance.\n   *\n   * @param on  Generic event receiver registration function. It will be called on each receiver registration,\n   * unless the receiver's {@link EventReceiver.Generic.supply event supply} is cut off already.\n   */\n  constructor(on: (receiver: EventReceiver.Generic<E>) => void) {\n    this._on = on;\n  }\n\n  /**\n   * Event receiver registration function of this sender.\n   *\n   * Delegates to [[OnEvent.to]] method.\n   */\n  get F(): OnEvent.Fn<E> {\n    return this.to.bind(this);\n  }\n\n  [OnEvent__symbol](): this {\n    return this;\n  }\n\n  /**\n   * Returns a reference to itself.\n   *\n   * @returns `this` instance.\n   */\n  to(): this;\n\n  /**\n   * Starts sending events to the given `receiver`.\n   *\n   * @param receiver  Target receiver of events.\n   *\n   * @returns A supply of events from this sender to the given `receiver`.\n   */\n  to(receiver: EventReceiver<E>): EventSupply;\n\n  /**\n   * Either starts sending events to the given `receiver`, or returns a reference to itself.\n   *\n   * @param receiver  Target receiver of events.\n   *\n   * @returns Either a supply of events from this sender to the given `receiver`, or `this` instance when `receiver`\n   * is omitted.\n   */\n  to(receiver?: EventReceiver<E>): this | EventSupply;\n\n  to(receiver?: EventReceiver<E>): this | EventSupply {\n    if (!receiver) {\n      return this;\n    }\n\n    const generic = eventReceiver(receiver);\n    const { supply } = generic;\n\n    if (!supply.isOff) {\n      this._on(generic);\n    }\n\n    return supply;\n  }\n\n  /**\n   * Attaches callbacks to the next event and/or supply cut off reason.\n   *\n   * This method makes event sender act as promise-like for the first parameter of the next event. Thus it is possible\n   * e.g. to use it in `await` expression.\n   *\n   * @param onEvent  The callback to execute when next event received.\n   * @param onCutOff  The callback to execute when supply is cut off before the next event received.\n   *\n   * @returns A Promise for the next event.\n   */\n  then<TResult1 = E extends [infer F, ...any[]] ? F : undefined, TResult2 = never>(\n      onEvent?: ((...event: E) => TResult1 | PromiseLike<TResult1>) | undefined | null,\n      onCutOff?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null,\n  ): Promise<TResult1 | TResult2> {\n    return then(this, onEvent, onCutOff);\n  }\n\n  /**\n   * Builds an [[OnEvent]] sender of events originated from this one that stops sending them to registered receiver\n   * after the first one.\n   *\n   * @returns Event sender.\n   */\n  once(): OnEvent<E>;\n\n  /**\n   * Registers a receiver of events originated from this sender that stops receiving them after the first one.\n   *\n   * @param receiver  A receiver of events to register.\n   *\n   * @returns A supply of event.\n   */\n  once(receiver: EventReceiver<E>): EventSupply;\n\n  once(receiver?: EventReceiver<E>): OnEvent<E> | EventSupply {\n    return (this.once = onEventBy(once(this)).F)(receiver);\n  }\n\n  /**\n   * Builds an [[OnEvent]] sender that sends events from this one until the required `supply` is cut off.\n   *\n   * The outgoing events supply will be cut off once incoming event supply does. Unless a second supply passed in.\n   * In the latter case that supply will be cut off instead.\n   *\n   * @param required  A peer of required event supply.\n   * @param dependentSupply  The supply to cut off on cutting off the incoming events supply.\n   *\n   * @returns New event sender.\n   */\n  tillOff(required: EventSupplyPeer, dependentSupply?: EventSupply): OnEvent<E> {\n    return onEventBy(tillOff(this, required, dependentSupply));\n  }\n\n  /**\n   * Consumes events.\n   *\n   * @param consume  A function consuming events. This function may return a {@link EventSupplyPeer peer of event\n   * supply} when registers a nested event receiver. This supply will be cut off on new event, unless returned again.\n   *\n   * @returns An event supply that will stop consuming events once {@link EventSupply.off cut off}.\n   */\n  consume(consume: (...event: E) => EventSupplyPeer | void | undefined): EventSupply {\n\n    let consumerSupply = noEventSupply();\n\n    // Do not use `.cuts()` here as `consumerSupply` is mutable\n    const supply = eventSupply(reason => consumerSupply.off(reason));\n\n    this.to({\n      supply,\n      receive(_ctx, ...event: E) {\n\n        const prevSupply = consumerSupply;\n\n        try {\n          consumerSupply = eventSupplyOf(consume(...event) || noEventSupply());\n        } finally {\n          if (consumerSupply !== prevSupply) {\n            prevSupply.off();\n          }\n        }\n      },\n    });\n\n    return supply;\n  }\n\n  /**\n   * Constructs an [[OnEvent]] sender that shares events supply among all registered receivers.\n   *\n   * The created sender receives events from this one and sends to registered receivers. The shared sender registers\n   * a receiver in this one only once, when first receiver registered. And cuts off original events supply once all\n   * supplies do.\n   *\n   * @returns An [[OnEvent]] sender sharing a common supply of events originated from this sender.\n   */\n  share(): OnEvent<E> {\n    return onEventBy(share(this));\n  }\n\n  /**\n   * Constructs an [[OnEvent]] sender of original events passed trough the chain of transformations.\n   *\n   * The passes are preformed by `@proc7ts/call-thru` library. The event receivers registered by resulting event sender\n   * are called by the last pass in chain. Thus they can be e.g. filtered out or called multiple times.\n   *\n   * @returns An [[OnEvent]] sender of events transformed with provided passes. The returned sender shares the supply\n   * of transformed events among receivers.\n   */\n  thru<\n      Return1,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n  ): OnEvent<Out<Return1>>;\n\n  thru<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n  ): OnEvent<Out<Return2>>;\n\n  thru<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n  ): OnEvent<Out<Return3>>;\n\n  thru<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n  ): OnEvent<Out<Return3>>;\n\n  thru<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n  ): OnEvent<Out<Return3>>;\n\n  thru<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      Args6 extends Args<Return5>, Return6,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n      pass6: (this: void, ...args: Args6) => Return6,\n  ): OnEvent<Out<Return3>>;\n\n  thru<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      Args6 extends Args<Return5>, Return6,\n      Args7 extends Args<Return6>, Return7,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n      pass6: (this: void, ...args: Args6) => Return6,\n      pass7: (this: void, ...args: Args7) => Return7,\n  ): OnEvent<Out<Return3>>;\n\n  thru<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      Args6 extends Args<Return5>, Return6,\n      Args7 extends Args<Return6>, Return7,\n      Args8 extends Args<Return7>, Return8,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n      pass6: (this: void, ...args: Args6) => Return6,\n      pass7: (this: void, ...args: Args7) => Return7,\n      pass8: (this: void, ...args: Args8) => Return8,\n  ): OnEvent<Out<Return3>>;\n\n  thru<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      Args6 extends Args<Return5>, Return6,\n      Args7 extends Args<Return6>, Return7,\n      Args8 extends Args<Return7>, Return8,\n      Args9 extends Args<Return8>, Return9,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n      pass6: (this: void, ...args: Args6) => Return6,\n      pass7: (this: void, ...args: Args7) => Return7,\n      pass8: (this: void, ...args: Args8) => Return8,\n      pass9: (this: void, ...args: Args9) => Return9,\n  ): OnEvent<Out<Return3>>;\n\n  thru<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      Args6 extends Args<Return5>, Return6,\n      Args7 extends Args<Return6>, Return7,\n      Args8 extends Args<Return7>, Return8,\n      Args9 extends Args<Return8>, Return9,\n      Args10 extends Args<Return9>, Return10,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n      pass6: (this: void, ...args: Args6) => Return6,\n      pass7: (this: void, ...args: Args7) => Return7,\n      pass8: (this: void, ...args: Args8) => Return8,\n      pass9: (this: void, ...args: Args9) => Return9,\n      pass10: (this: void, ...args: Args10) => Return10,\n  ): OnEvent<Out<Return3>>;\n\n  thru<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      Args6 extends Args<Return5>, Return6,\n      Args7 extends Args<Return6>, Return7,\n      Args8 extends Args<Return7>, Return8,\n      Args9 extends Args<Return8>, Return9,\n      Args10 extends Args<Return9>, Return10,\n      Args11 extends Args<Return10>, Return11,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n      pass6: (this: void, ...args: Args6) => Return6,\n      pass7: (this: void, ...args: Args7) => Return7,\n      pass8: (this: void, ...args: Args8) => Return8,\n      pass9: (this: void, ...args: Args9) => Return9,\n      pass10: (this: void, ...args: Args10) => Return10,\n      pass11: (this: void, ...args: Args11) => Return11,\n  ): OnEvent<Out<Return3>>;\n\n  thru<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      Args6 extends Args<Return5>, Return6,\n      Args7 extends Args<Return6>, Return7,\n      Args8 extends Args<Return7>, Return8,\n      Args9 extends Args<Return8>, Return9,\n      Args10 extends Args<Return9>, Return10,\n      Args11 extends Args<Return10>, Return11,\n      Args12 extends Args<Return11>, Return12,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n      pass6: (this: void, ...args: Args6) => Return6,\n      pass7: (this: void, ...args: Args7) => Return7,\n      pass8: (this: void, ...args: Args8) => Return8,\n      pass9: (this: void, ...args: Args9) => Return9,\n      pass10: (this: void, ...args: Args10) => Return10,\n      pass11: (this: void, ...args: Args11) => Return11,\n      pass12: (this: void, ...args: Args12) => Return12,\n  ): OnEvent<Out<Return3>>;\n\n  thru<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      Args6 extends Args<Return5>, Return6,\n      Args7 extends Args<Return6>, Return7,\n      Args8 extends Args<Return7>, Return8,\n      Args9 extends Args<Return8>, Return9,\n      Args10 extends Args<Return9>, Return10,\n      Args11 extends Args<Return10>, Return11,\n      Args12 extends Args<Return11>, Return12,\n      Args13 extends Args<Return12>, Return13,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n      pass6: (this: void, ...args: Args6) => Return6,\n      pass7: (this: void, ...args: Args7) => Return7,\n      pass8: (this: void, ...args: Args8) => Return8,\n      pass9: (this: void, ...args: Args9) => Return9,\n      pass10: (this: void, ...args: Args10) => Return10,\n      pass11: (this: void, ...args: Args11) => Return11,\n      pass12: (this: void, ...args: Args12) => Return12,\n      pass13: (this: void, ...args: Args13) => Return13,\n  ): OnEvent<Out<Return3>>;\n\n  thru(...passes: any[]): OnEvent<any[]> {\n    // eslint-disable-next-line\n    return (this as any).thru_(...passes).share();\n  }\n\n  /**\n   * Constructs an [[OnEvent]] sender of original events passed trough the chain of transformations without sharing\n   * the transformed events supply.\n   *\n   * This method does the same as [[OnEvent.thru]] one, except it does not share the supply of transformed events\n   * among receivers. This may be useful e.g. when the result will be further transformed anyway. It is wise to\n   * {@link share share} the supply of events from final result in this case.\n   *\n   * @returns An [[OnEvent]] sender of events transformed with provided passes.\n   */\n  thru_<\n      Return1,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n  ): OnEvent<Out<Return1>>;\n\n  thru_<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n  ): OnEvent<Out<Return2>>;\n\n  thru_<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n  ): OnEvent<Out<Return3>>;\n\n  thru_<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n  ): OnEvent<Out<Return3>>;\n\n  thru_<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n  ): OnEvent<Out<Return3>>;\n\n  thru_<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      Args6 extends Args<Return5>, Return6,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n      pass6: (this: void, ...args: Args6) => Return6,\n  ): OnEvent<Out<Return3>>;\n\n  thru_<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      Args6 extends Args<Return5>, Return6,\n      Args7 extends Args<Return6>, Return7,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n      pass6: (this: void, ...args: Args6) => Return6,\n      pass7: (this: void, ...args: Args7) => Return7,\n  ): OnEvent<Out<Return3>>;\n\n  thru_<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      Args6 extends Args<Return5>, Return6,\n      Args7 extends Args<Return6>, Return7,\n      Args8 extends Args<Return7>, Return8,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n      pass6: (this: void, ...args: Args6) => Return6,\n      pass7: (this: void, ...args: Args7) => Return7,\n      pass8: (this: void, ...args: Args8) => Return8,\n  ): OnEvent<Out<Return3>>;\n\n  thru_<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      Args6 extends Args<Return5>, Return6,\n      Args7 extends Args<Return6>, Return7,\n      Args8 extends Args<Return7>, Return8,\n      Args9 extends Args<Return8>, Return9,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n      pass6: (this: void, ...args: Args6) => Return6,\n      pass7: (this: void, ...args: Args7) => Return7,\n      pass8: (this: void, ...args: Args8) => Return8,\n      pass9: (this: void, ...args: Args9) => Return9,\n  ): OnEvent<Out<Return3>>;\n\n  thru_<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      Args6 extends Args<Return5>, Return6,\n      Args7 extends Args<Return6>, Return7,\n      Args8 extends Args<Return7>, Return8,\n      Args9 extends Args<Return8>, Return9,\n      Args10 extends Args<Return9>, Return10,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n      pass6: (this: void, ...args: Args6) => Return6,\n      pass7: (this: void, ...args: Args7) => Return7,\n      pass8: (this: void, ...args: Args8) => Return8,\n      pass9: (this: void, ...args: Args9) => Return9,\n      pass10: (this: void, ...args: Args10) => Return10,\n  ): OnEvent<Out<Return3>>;\n\n  thru_<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      Args6 extends Args<Return5>, Return6,\n      Args7 extends Args<Return6>, Return7,\n      Args8 extends Args<Return7>, Return8,\n      Args9 extends Args<Return8>, Return9,\n      Args10 extends Args<Return9>, Return10,\n      Args11 extends Args<Return10>, Return11,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n      pass6: (this: void, ...args: Args6) => Return6,\n      pass7: (this: void, ...args: Args7) => Return7,\n      pass8: (this: void, ...args: Args8) => Return8,\n      pass9: (this: void, ...args: Args9) => Return9,\n      pass10: (this: void, ...args: Args10) => Return10,\n      pass11: (this: void, ...args: Args11) => Return11,\n  ): OnEvent<Out<Return3>>;\n\n  thru_<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      Args6 extends Args<Return5>, Return6,\n      Args7 extends Args<Return6>, Return7,\n      Args8 extends Args<Return7>, Return8,\n      Args9 extends Args<Return8>, Return9,\n      Args10 extends Args<Return9>, Return10,\n      Args11 extends Args<Return10>, Return11,\n      Args12 extends Args<Return11>, Return12,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n      pass6: (this: void, ...args: Args6) => Return6,\n      pass7: (this: void, ...args: Args7) => Return7,\n      pass8: (this: void, ...args: Args8) => Return8,\n      pass9: (this: void, ...args: Args9) => Return9,\n      pass10: (this: void, ...args: Args10) => Return10,\n      pass11: (this: void, ...args: Args11) => Return11,\n      pass12: (this: void, ...args: Args12) => Return12,\n  ): OnEvent<Out<Return3>>;\n\n  thru_<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      Args6 extends Args<Return5>, Return6,\n      Args7 extends Args<Return6>, Return7,\n      Args8 extends Args<Return7>, Return8,\n      Args9 extends Args<Return8>, Return9,\n      Args10 extends Args<Return9>, Return10,\n      Args11 extends Args<Return10>, Return11,\n      Args12 extends Args<Return11>, Return12,\n      Args13 extends Args<Return12>, Return13,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n      pass6: (this: void, ...args: Args6) => Return6,\n      pass7: (this: void, ...args: Args7) => Return7,\n      pass8: (this: void, ...args: Args8) => Return8,\n      pass9: (this: void, ...args: Args9) => Return9,\n      pass10: (this: void, ...args: Args10) => Return10,\n      pass11: (this: void, ...args: Args11) => Return11,\n      pass12: (this: void, ...args: Args12) => Return12,\n      pass13: (this: void, ...args: Args13) => Return13,\n  ): OnEvent<Out<Return3>>;\n\n  thru_(...passes: any[]): OnEvent<any[]> {\n    return onEventBy(thru(this, passes));\n  }\n\n}\n\nexport namespace OnEvent {\n\n  /**\n   * A signature of function registering receivers of events sent by event sender.\n   *\n   * When called without parameters it returns an [[OnEvent]] sender. When called with event receiver as parameter\n   * it returns a supply of events from that sender.\n   *\n   * Available as [[OnEvent.F]] property value.\n   *\n   * @typeparam E  An event type. This is a tuple of event receiver parameter types.\n   */\n  export interface Fn<E extends any[]> {\n\n    /**\n     * Returns the event sender.\n     *\n     * @returns [[OnEvent]] sender the events originated from.\n     */\n    (\n        this: void,\n    ): OnEvent<E>;\n\n    /**\n     * Registers a receiver of events sent by the sender.\n     *\n     * @param receiver  A receiver of events to register.\n     *\n     * @returns A supply of events from the sender to the given `receiver`.\n     */\n    (\n        this: void,\n        receiver: EventReceiver<E>,\n    ): EventSupply;\n\n    /**\n     * Either registers a receiver of events sent by the sender, or returns the sender itself.\n     *\n     * @param receiver  A receiver of events to register.\n     *\n     * @returns Either a supply of events from the sender to the given `receiver`, or [[OnEvent]] sender the events\n     * originated from when `receiver` is omitted.\n     */\n    (\n        this: void,\n        receiver?: EventReceiver<E>,\n    ): EventSupply | OnEvent<E>;\n\n  }\n\n}\n\n/**\n * Converts a plain event receiver registration function to [[OnEvent]] sender.\n *\n * @category Core\n * @typeparam E  An event type. This is a list of event receiver parameter types.\n * @param register  Generic event receiver registration function. It will be called on each receiver registration,\n * unless the receiver's {@link EventReceiver.Generic.supply event supply} is cut off already.\n *\n * @returns An [[OnEvent]] sender registering event receivers with the given `register` function.\n */\nexport function onEventBy<E extends any[]>(\n    register: (this: void, receiver: EventReceiver.Generic<E>) => void,\n): OnEvent<E> {\n  return new OnEvent(register);\n}\n","import { EventReceiver, eventSupply } from '../base';\nimport { OnEvent } from '../on-event';\nimport { once } from './once';\n\nexport function then<E extends any[], TResult1 = E[0], TResult2 = never>(\n    onSource: OnEvent<E>,\n    onEvent?: ((...value: E) => TResult1 | PromiseLike<TResult1>) | undefined | null,\n    onCutOff?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null,\n): Promise<TResult1 | TResult2> {\n  return new Promise((resolve, reject) => {\n    once(onSource)({\n      supply: onCutOff\n          ? eventSupply(reason => {\n            try {\n              resolve(onCutOff(reason));\n            } catch (e) {\n              reject(e);\n            }\n          })\n          : eventSupply(reject),\n      receive: onEvent\n          ? (_ctx, ...event): void => {\n            try {\n              resolve(onEvent(...event));\n            } catch (e) {\n              reject(e);\n            }\n          }\n          : ((_ctx, event: E[0]) => resolve(event)) as (\n              _ctx: EventReceiver.Context<E>,\n              ...event: E[]\n          ) => void,\n    });\n  });\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/fun-events\n */\nimport { noop } from '@proc7ts/primitives';\nimport {\n  AfterEvent__symbol,\n  EventKeeper,\n  eventReceiver,\n  EventReceiver,\n  EventSupply,\n  eventSupply,\n  EventSupplyPeer,\n} from './base';\nimport { once, share, thru, tillOff } from './impl';\nimport { OnEvent } from './on-event';\nimport { OnEventCallChain } from './passes';\nimport Args = OnEventCallChain.Args;\nimport Out = OnEventCallChain.Out;\n\nfunction noEvent(): never {\n  throw new Error('No events to send');\n}\n\n/**\n * An [[EventKeeper]] implementation able to register the receivers of kept and upcoming events.\n *\n * The registered event receiver receives the kept event immediately upon registration, and all upcoming events\n * after that until the returned event supply is cut off.\n *\n * To convert a plain event receiver registration function to [[AfterEvent]] an [[afterEventBy]] function can be used.\n *\n * @category Core\n * @typeparam E  An event type. This is a list of event receiver parameter types.\n */\nexport class AfterEvent<E extends any[]> extends OnEvent<E> implements EventKeeper<E> {\n\n  /**\n   * @internal\n   */\n  private _last?: E;\n\n  /**\n   * @internal\n   */\n  private _rcn = 0;\n\n  /**\n   * @internal\n   */\n  private readonly _or: (this: void) => E;\n\n  /**\n   * Constructs [[AfterEvent]] instance.\n   *\n   * The event constructed by `or` will be sent to the registered first receiver, unless `register` function sends one.\n   *\n   * @param on  Generic event receiver registration function. It will be called on each receiver registration,\n   * unless the receiver's {@link EventReceiver.Generic.supply event supply} is cut off already.\n   * @param or  A function creating fallback event. When omitted, the initial event is expected to be sent by\n   * `register` function. A receiver registration would lead to an error otherwise.\n   */\n  constructor(\n      on: (this: void, receiver: EventReceiver.Generic<E>) => void,\n      or: (this: void) => E = noEvent,\n  ) {\n    super(on);\n    this._or = or;\n  }\n\n  /**\n   * Event receiver registration function of this event keeper.\n   *\n   * Delegates to [[AfterEvent.to]] method.\n   */\n  get F(): AfterEvent.Fn<E> {\n    return this.to.bind(this);\n  }\n\n  [AfterEvent__symbol](): this {\n    return this;\n  }\n\n  /**\n   * Returns a reference to itself.\n   *\n   * @returns `this` instance.\n   */\n  to(): this;\n\n  /**\n   * Starts sending events to the given `receiver`.\n   *\n   * @param receiver  Target receiver of events.\n   *\n   * @returns A supply of events from this keeper to the given `receiver`.\n   */\n  to(receiver: EventReceiver<E>): EventSupply;\n\n  /**\n   * Either starts sending events to the given `receiver`, or returns a reference to itself.\n   *\n   * @param receiver  Target receiver of events.\n   *\n   * @returns Either a supply of events from this keeper to the given `receiver`, or `this` instance when `receiver`\n   * is omitted.\n   */\n  to(receiver?: EventReceiver<E>): this | EventSupply;\n\n  to(receiver?: EventReceiver<E>): this | EventSupply {\n    if (!receiver) {\n      return this;\n    }\n\n    let dest: (context: EventReceiver.Context<E>, ...event: E) => void = noop;\n    const generic = eventReceiver(receiver);\n\n    if (generic.supply.isOff) {\n      return generic.supply;\n    }\n\n    const supply = eventSupply().needs(generic.supply);\n    let reported = false;\n\n    this._on({\n      supply,\n      receive: (context, ...event: E) => {\n        reported = true;\n        this._last = event;\n        dest(context, ...event);\n      },\n    });\n    ++this._rcn;\n\n    if (!supply.isOff || reported) {\n      generic.receive(\n          {\n            onRecurrent(recurrent) {\n              dest = (_context, ...event) => recurrent(...event);\n            },\n          },\n          ...(this._last || (this._last = this._or())),\n      );\n      dest = (context, ...event) => generic.receive(context, ...event);\n    }\n\n    supply.whenOff(reason => {\n      if (!--this._rcn) {\n        this._last = undefined;\n      }\n      generic.supply.off(reason);\n    });\n\n    return supply;\n  }\n\n  /**\n   * Builds an [[AfterEvent]] keeper of events originated from this one that stops sending them to registered receiver\n   * after the first one.\n   *\n   * @returns Event keeper.\n   */\n  once(): AfterEvent<E>;\n\n  /**\n   * Registers a receiver of events originated from this keeper that stops receiving them after the first one.\n   *\n   * @param receiver  A receiver of events to register.\n   *\n   * @returns A supply of event.\n   */\n  once(receiver: EventReceiver<E>): EventSupply;\n\n  once(receiver?: EventReceiver<E>): AfterEvent<E> | EventSupply {\n    return (this.once = afterEventBy(once(this)).F)(receiver);\n  }\n\n  /**\n   * Builds an [[AfterEvent]] keeper that sends events from this one until the required `supply` is cut off.\n   *\n   * The outgoing events supply will be cut off once incoming event supply does. Unless a second supply passed in.\n   * In the latter case that supply will be cut off instead.\n   *\n   * @param required  A peer of required event supply.\n   * @param dependentSupply  The supply to cut off on cutting off the incoming events supply.\n   *\n   * @returns New event keeper.\n   */\n  tillOff(required: EventSupplyPeer, dependentSupply?: EventSupply): AfterEvent<E> {\n    return afterEventBy(tillOff(this, required, dependentSupply));\n  }\n\n  /**\n   * Constructs an [[AfterEvent]] keeper that shares events supply among all registered receivers.\n   *\n   * The created keeper receives events from this one and sends to registered receivers. The shared keeper registers\n   * a receiver in this one only once, when first receiver registered. And cuts off original events supply once all\n   * event supplies do.\n   *\n   * @returns An [[AfterEvent]] keeper sharing a common supply of events originating from this keeper.\n   */\n  share(): AfterEvent<E> {\n    return afterEventBy(share(this));\n  }\n\n  /**\n   * Constructs an [[AfterEvent]] keeper of original events passed trough the chain of transformations.\n   *\n   * This does the same as [[thru]] method, but return [[AfterEvent]] keeper instead of [[OnEvent]] sender. This can\n   * not be done automatically, as not every transformation results to [[EventKeeper]]. E.g. when some events\n   * are filtered out.\n   *\n   * The passes are preformed by `@proc7ts/call-thru` library. The event receivers registered by resulting event keeper\n   * are called by the last pass in chain. Thus they can be e.g. filtered out or called multiple times.\n   *\n   * @returns An [[AfterEvent]] keeper of events transformed with provided passes. The returned keeper shares the supply\n   * of transformed events among receivers.\n   */\n  keepThru<\n      Return1,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n  ): AfterEvent<Out<Return1>>;\n\n  keepThru<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n  ): AfterEvent<Out<Return2>>;\n\n  keepThru<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n  ): AfterEvent<Out<Return3>>;\n\n  keepThru<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n  ): AfterEvent<Out<Return3>>;\n\n  keepThru<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n  ): AfterEvent<Out<Return3>>;\n\n  keepThru<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      Args6 extends Args<Return5>, Return6,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n      pass6: (this: void, ...args: Args6) => Return6,\n  ): AfterEvent<Out<Return3>>;\n\n  keepThru<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      Args6 extends Args<Return5>, Return6,\n      Args7 extends Args<Return6>, Return7,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n      pass6: (this: void, ...args: Args6) => Return6,\n      pass7: (this: void, ...args: Args7) => Return7,\n  ): AfterEvent<Out<Return3>>;\n\n  keepThru<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      Args6 extends Args<Return5>, Return6,\n      Args7 extends Args<Return6>, Return7,\n      Args8 extends Args<Return7>, Return8,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n      pass6: (this: void, ...args: Args6) => Return6,\n      pass7: (this: void, ...args: Args7) => Return7,\n      pass8: (this: void, ...args: Args8) => Return8,\n  ): AfterEvent<Out<Return3>>;\n\n  keepThru<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      Args6 extends Args<Return5>, Return6,\n      Args7 extends Args<Return6>, Return7,\n      Args8 extends Args<Return7>, Return8,\n      Args9 extends Args<Return8>, Return9,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n      pass6: (this: void, ...args: Args6) => Return6,\n      pass7: (this: void, ...args: Args7) => Return7,\n      pass8: (this: void, ...args: Args8) => Return8,\n      pass9: (this: void, ...args: Args9) => Return9,\n  ): AfterEvent<Out<Return3>>;\n\n  keepThru<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      Args6 extends Args<Return5>, Return6,\n      Args7 extends Args<Return6>, Return7,\n      Args8 extends Args<Return7>, Return8,\n      Args9 extends Args<Return8>, Return9,\n      Args10 extends Args<Return9>, Return10,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n      pass6: (this: void, ...args: Args6) => Return6,\n      pass7: (this: void, ...args: Args7) => Return7,\n      pass8: (this: void, ...args: Args8) => Return8,\n      pass9: (this: void, ...args: Args9) => Return9,\n      pass10: (this: void, ...args: Args10) => Return10,\n  ): AfterEvent<Out<Return3>>;\n\n  keepThru<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      Args6 extends Args<Return5>, Return6,\n      Args7 extends Args<Return6>, Return7,\n      Args8 extends Args<Return7>, Return8,\n      Args9 extends Args<Return8>, Return9,\n      Args10 extends Args<Return9>, Return10,\n      Args11 extends Args<Return10>, Return11,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n      pass6: (this: void, ...args: Args6) => Return6,\n      pass7: (this: void, ...args: Args7) => Return7,\n      pass8: (this: void, ...args: Args8) => Return8,\n      pass9: (this: void, ...args: Args9) => Return9,\n      pass10: (this: void, ...args: Args10) => Return10,\n      pass11: (this: void, ...args: Args11) => Return11,\n  ): AfterEvent<Out<Return3>>;\n\n  keepThru<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      Args6 extends Args<Return5>, Return6,\n      Args7 extends Args<Return6>, Return7,\n      Args8 extends Args<Return7>, Return8,\n      Args9 extends Args<Return8>, Return9,\n      Args10 extends Args<Return9>, Return10,\n      Args11 extends Args<Return10>, Return11,\n      Args12 extends Args<Return11>, Return12,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n      pass6: (this: void, ...args: Args6) => Return6,\n      pass7: (this: void, ...args: Args7) => Return7,\n      pass8: (this: void, ...args: Args8) => Return8,\n      pass9: (this: void, ...args: Args9) => Return9,\n      pass10: (this: void, ...args: Args10) => Return10,\n      pass11: (this: void, ...args: Args11) => Return11,\n      pass12: (this: void, ...args: Args12) => Return12,\n  ): AfterEvent<Out<Return3>>;\n\n  keepThru<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      Args6 extends Args<Return5>, Return6,\n      Args7 extends Args<Return6>, Return7,\n      Args8 extends Args<Return7>, Return8,\n      Args9 extends Args<Return8>, Return9,\n      Args10 extends Args<Return9>, Return10,\n      Args11 extends Args<Return10>, Return11,\n      Args12 extends Args<Return11>, Return12,\n      Args13 extends Args<Return12>, Return13,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n      pass6: (this: void, ...args: Args6) => Return6,\n      pass7: (this: void, ...args: Args7) => Return7,\n      pass8: (this: void, ...args: Args8) => Return8,\n      pass9: (this: void, ...args: Args9) => Return9,\n      pass10: (this: void, ...args: Args10) => Return10,\n      pass11: (this: void, ...args: Args11) => Return11,\n      pass12: (this: void, ...args: Args12) => Return12,\n      pass13: (this: void, ...args: Args13) => Return13,\n  ): AfterEvent<Out<Return3>>;\n\n  keepThru(...passes: any[]): AfterEvent<any[]> {\n    // eslint-disable-next-line\n    return (this as any).keepThru_(...passes).share();\n  }\n\n  /**\n   * Constructs an [[AfterEvent]] keeper of original events passed trough the chain of transformations without sharing\n   * the transformed events supply.\n   *\n   * This method does the same as [[AfterEvent.keepThru]] one, except it does not share the supply of transformed\n   * events among receivers. This may be useful e.g. when the result will be further transformed anyway.\n   * It is wise to {@link AfterEvent.share share} the supply of events from final result in this case.\n   *\n   * @returns An [[AfterEvent]] keeper of events transformed with provided passes.\n   */\n  keepThru_<\n      Return1,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n  ): AfterEvent<Out<Return1>>;\n\n  keepThru_<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n  ): AfterEvent<Out<Return2>>;\n\n  keepThru_<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n  ): AfterEvent<Out<Return3>>;\n\n  keepThru_<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n  ): AfterEvent<Out<Return3>>;\n\n  keepThru_<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n  ): AfterEvent<Out<Return3>>;\n\n  keepThru_<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      Args6 extends Args<Return5>, Return6,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n      pass6: (this: void, ...args: Args6) => Return6,\n  ): AfterEvent<Out<Return3>>;\n\n  keepThru_<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      Args6 extends Args<Return5>, Return6,\n      Args7 extends Args<Return6>, Return7,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n      pass6: (this: void, ...args: Args6) => Return6,\n      pass7: (this: void, ...args: Args7) => Return7,\n  ): AfterEvent<Out<Return3>>;\n\n  keepThru_<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      Args6 extends Args<Return5>, Return6,\n      Args7 extends Args<Return6>, Return7,\n      Args8 extends Args<Return7>, Return8,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n      pass6: (this: void, ...args: Args6) => Return6,\n      pass7: (this: void, ...args: Args7) => Return7,\n      pass8: (this: void, ...args: Args8) => Return8,\n  ): AfterEvent<Out<Return3>>;\n\n  keepThru_<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      Args6 extends Args<Return5>, Return6,\n      Args7 extends Args<Return6>, Return7,\n      Args8 extends Args<Return7>, Return8,\n      Args9 extends Args<Return8>, Return9,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n      pass6: (this: void, ...args: Args6) => Return6,\n      pass7: (this: void, ...args: Args7) => Return7,\n      pass8: (this: void, ...args: Args8) => Return8,\n      pass9: (this: void, ...args: Args9) => Return9,\n  ): AfterEvent<Out<Return3>>;\n\n  keepThru_<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      Args6 extends Args<Return5>, Return6,\n      Args7 extends Args<Return6>, Return7,\n      Args8 extends Args<Return7>, Return8,\n      Args9 extends Args<Return8>, Return9,\n      Args10 extends Args<Return9>, Return10,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n      pass6: (this: void, ...args: Args6) => Return6,\n      pass7: (this: void, ...args: Args7) => Return7,\n      pass8: (this: void, ...args: Args8) => Return8,\n      pass9: (this: void, ...args: Args9) => Return9,\n      pass10: (this: void, ...args: Args10) => Return10,\n  ): AfterEvent<Out<Return3>>;\n\n  keepThru_<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      Args6 extends Args<Return5>, Return6,\n      Args7 extends Args<Return6>, Return7,\n      Args8 extends Args<Return7>, Return8,\n      Args9 extends Args<Return8>, Return9,\n      Args10 extends Args<Return9>, Return10,\n      Args11 extends Args<Return10>, Return11,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n      pass6: (this: void, ...args: Args6) => Return6,\n      pass7: (this: void, ...args: Args7) => Return7,\n      pass8: (this: void, ...args: Args8) => Return8,\n      pass9: (this: void, ...args: Args9) => Return9,\n      pass10: (this: void, ...args: Args10) => Return10,\n      pass11: (this: void, ...args: Args11) => Return11,\n  ): AfterEvent<Out<Return3>>;\n\n  keepThru_<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      Args6 extends Args<Return5>, Return6,\n      Args7 extends Args<Return6>, Return7,\n      Args8 extends Args<Return7>, Return8,\n      Args9 extends Args<Return8>, Return9,\n      Args10 extends Args<Return9>, Return10,\n      Args11 extends Args<Return10>, Return11,\n      Args12 extends Args<Return11>, Return12,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n      pass6: (this: void, ...args: Args6) => Return6,\n      pass7: (this: void, ...args: Args7) => Return7,\n      pass8: (this: void, ...args: Args8) => Return8,\n      pass9: (this: void, ...args: Args9) => Return9,\n      pass10: (this: void, ...args: Args10) => Return10,\n      pass11: (this: void, ...args: Args11) => Return11,\n      pass12: (this: void, ...args: Args12) => Return12,\n  ): AfterEvent<Out<Return3>>;\n\n  keepThru_<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      Args6 extends Args<Return5>, Return6,\n      Args7 extends Args<Return6>, Return7,\n      Args8 extends Args<Return7>, Return8,\n      Args9 extends Args<Return8>, Return9,\n      Args10 extends Args<Return9>, Return10,\n      Args11 extends Args<Return10>, Return11,\n      Args12 extends Args<Return11>, Return12,\n      Args13 extends Args<Return12>, Return13,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n      pass6: (this: void, ...args: Args6) => Return6,\n      pass7: (this: void, ...args: Args7) => Return7,\n      pass8: (this: void, ...args: Args8) => Return8,\n      pass9: (this: void, ...args: Args9) => Return9,\n      pass10: (this: void, ...args: Args10) => Return10,\n      pass11: (this: void, ...args: Args11) => Return11,\n      pass12: (this: void, ...args: Args12) => Return12,\n      pass13: (this: void, ...args: Args13) => Return13,\n  ): AfterEvent<Out<Return3>>;\n\n  keepThru_(...passes: any[]): AfterEvent<any[]> {\n    return afterEventBy(thru(this, passes as any));\n  }\n\n}\n\nexport namespace AfterEvent {\n\n  /**\n   * A signature of function registering receivers of events sent by event keeper.\n   *\n   * When called without parameters it returns an [[AfterEvent]] keeper. When called with event receiver as parameter\n   * it returns a supply of events from that keeper.\n   *\n   * Available as [[AfterEvent.F]] property value.\n   *\n   * @typeparam E  An event type. This is a tuple of event receiver parameter types.\n   */\n  export interface Fn<E extends any[]> {\n\n    /**\n     * Returns the event keeper.\n     *\n     * @returns [[AfterEvent]] keeper the events originated from.\n     */\n    (\n        this: void,\n    ): AfterEvent<E>;\n\n    /**\n     * Registers a receiver of events sent by the keeper.\n     *\n     * @param receiver  A receiver of events to register.\n     *\n     * @returns A supply of events from the keeper to the given `receiver`.\n     */\n    (\n        this: void,\n        receiver: EventReceiver<E>,\n    ): EventSupply;\n\n    /**\n     * Either registers a receiver of events sent by the keeper, or returns the keeper itself.\n     *\n     * @param receiver  A receiver of events to register.\n     *\n     * @returns Either a supply of events from the keeper to the given `receiver`, or [[AfterEvent]] keeper the events\n     * originated from when `receiver` is omitted.\n     */\n    (\n        this: void,\n        receiver?: EventReceiver<E>,\n    ): EventSupply | AfterEvent<E>;\n  }\n\n}\n\n/**\n * Converts a plain event receiver registration function to [[AfterEvent]] keeper with a fallback.\n *\n * The event constructed by `fallback` will be sent to the registered first receiver, unless `register` function sends\n * one.\n *\n * @category Core\n * @typeparam E  An event type. This is a list of event receiver parameter types.\n * @param register  Generic event receiver registration function. It will be called on each receiver registration,\n * unless the receiver's {@link EventReceiver.Generic.supply event supply} is cut off already.\n * @param fallback  A function creating fallback event. When omitted, the initial event is expected to be sent by\n * `register` function. A receiver registration would lead to an error otherwise.\n *\n * @returns An [[AfterEvent]] keeper registering event receivers with the given `register` function.\n */\nexport function afterEventBy<E extends any[]>(\n    register: (this: void, receiver: EventReceiver.Generic<E>) => void,\n    fallback?: (this: void) => E,\n): AfterEvent<E> {\n  return new AfterEvent(register, fallback);\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/fun-events\n */\nimport { AfterEvent, afterEventBy } from '../after-event';\nimport { EventSender, OnEvent__symbol } from '../base';\n\n/**\n * Builds an [[AfterEvent]] keeper of events sent by the given `sender`.\n *\n * The event generated by `fallback` will be sent to the registered first receiver, unless `register` function sends\n * one.\n *\n * @category Core\n * @typeparam E  An event type. This is a list of event receiver parameter types.\n * @param sender  An event sender.\n * @param fallback  A function creating fallback event. When omitted, the initial event is expected to be sent by\n * `register` function. A receiver registration would lead to an error otherwise.\n *\n * @returns An [[AfterEvent]] keeper of events either originated from the given `sender`, or `initial` one.\n */\nexport function afterSent<E extends any[]>(\n    sender: EventSender<E>,\n    fallback?: (this: void) => E,\n): AfterEvent<E> {\n  return afterEventBy(receiver => sender[OnEvent__symbol]().to(receiver), fallback);\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/fun-events\n */\nimport { AfterEvent } from '../after-event';\nimport { AfterEvent__symbol, EventKeeper, EventSupplier, isEventKeeper } from '../base';\nimport { afterSent } from './after-sent';\n\n/**\n * Builds an [[AfterEvent]] keeper of events sent by the given `keeper`.\n *\n * @category Core\n * @typeparam E  An event type. This is a list of event receiver parameter types.\n * @param keeper  A keeper of events.\n *\n * @returns An [[AfterEvent]] keeper of events originated from the given `keeper`.\n */\nexport function afterSupplied<E extends any[]>(keeper: EventKeeper<E>): AfterEvent<E>;\n\n/**\n * Builds an [[AfterEvent]] keeper of events sent by the given `supplier`.\n *\n * The event generated by `fallback` will be sent to the registered first receiver, unless `supplier` sends one.\n *\n * This is a synonym of [[afterSent]], unless `supplier` is an [[EventKeeper]].\n *\n * @typeparam E  An event type. This is a list of event receiver parameter types.\n * @param supplier  An event supplier.\n * @param fallback  A function creating fallback event. When omitted, the initial event is expected to be sent by\n * `supplier`. A receiver registration would lead to an error otherwise.\n *\n * @returns An [[AfterEvent]] keeper of events either originated from the given `supplier`, or `initial` one.\n */\nexport function afterSupplied<E extends any[]>(\n    supplier: EventSupplier<E>,\n    fallback?: (this: void) => E,\n): AfterEvent<E>;\n\nexport function afterSupplied<E extends any[]>(\n    supplier: EventSupplier<E>,\n    fallback?: (this: void) => E,\n): AfterEvent<E> {\n  return isEventKeeper(supplier) ? supplier[AfterEvent__symbol]() : afterSent(supplier, fallback);\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/fun-events\n */\nimport { noop } from '@proc7ts/primitives';\nimport { AfterEvent, afterEventBy } from '../after-event';\nimport { AfterEvent__symbol, EventKeeper, EventReceiver, sendEventsTo } from '../base';\nimport { afterSupplied } from './after-supplied';\n\n/**\n * Builds an [[AfterEvent]] keeper of events sent by all event keepers in `sources` map.\n *\n * @category Core\n * @typeparam S  A type of `sources` map.\n * @param sources  A map of named event keepers the events are originated from.\n *\n * @returns An event keeper sending a map of events received from each source keeper. Each event in this map has the\n * same key as its source keeper in `sources`.\n */\nexport function afterAll<S extends { readonly [key: string]: EventKeeper<any> }>(\n    sources: S,\n): AfterEvent<[{ readonly [K in keyof S]: EventKeeper.Event<S[K]> }]> {\n\n  const keys = Object.keys(sources);\n\n  return afterEventBy(registerReceiver, latestEvent).share();\n\n  function registerReceiver(\n      receiver: EventReceiver.Generic<[{ readonly [K in keyof S]: EventKeeper.Event<S[K]> }]>,\n  ): void {\n\n    const { supply } = receiver;\n    const dispatch = sendEventsTo(receiver);\n    let send: () => void = noop;\n    const result = {} as { [K in keyof S]: EventKeeper.Event<S[K]> };\n\n    keys.forEach(<K extends keyof S>(key: K) => {\n      supply.needs(sources[key][AfterEvent__symbol]().to((...event: EventKeeper.Event<S[K]>) => {\n        result[key] = event;\n        send();\n      }).needs(supply));\n    });\n\n    if (!supply.isOff) {\n      send = () => dispatch(result);\n    }\n  }\n\n  function latestEvent(): [{ readonly [K in keyof S]: EventKeeper.Event<S[K]> }] {\n\n    const result = {} as { [K in keyof S]: EventKeeper.Event<S[K]> };\n\n    keys.forEach(\n        <K extends keyof S>(key: K) => afterSupplied(sources[key]).once(\n            (...event: EventKeeper.Event<S[K]>) => result[key as keyof S] = event,\n        ),\n    );\n\n    return [result];\n  }\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/fun-events\n */\nimport { noop } from '@proc7ts/primitives';\nimport { AfterEvent, afterEventBy } from '../after-event';\nimport { AfterEvent__symbol, EventKeeper, EventReceiver, sendEventsTo } from '../base';\nimport { afterSupplied } from './after-supplied';\n\n/**\n * Builds an [[AfterEvent]] keeper of events sent by each of the `sources`.\n *\n * @category Core\n * @typeparam E  A type of events sent by each source.\n * @param sources  An array of source event keepers.\n *\n * @returns An event keeper sending events received from each source keeper. Each event item is an event tuple\n * originated from source keeper under its index in `sources` array.\n */\nexport function afterEach<E extends any[]>(...sources: EventKeeper<E>[]): AfterEvent<E[]> {\n\n  return afterEventBy(registerReceiver, latestEvent).share();\n\n  function registerReceiver(receiver: EventReceiver.Generic<E[]>): void {\n\n    const { supply } = receiver;\n    const dispatch = sendEventsTo(receiver);\n    let send: () => void = noop;\n    const result: E[] = [];\n\n    sources.forEach((source, index) => {\n      supply.needs(source[AfterEvent__symbol]().to((...event) => {\n        result[index] = event;\n        send();\n      }).needs(supply));\n    });\n\n    if (!supply.isOff) {\n      send = () => dispatch(...result);\n    }\n  }\n\n  function latestEvent(): E[] {\n\n    const result: E[] = [];\n\n    sources.forEach(\n        source => afterSupplied(source).once(\n            (...event) => result.push(event),\n        ),\n    );\n\n    return result;\n  }\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/fun-events\n */\nimport { noop, valueProvider } from '@proc7ts/primitives';\nimport { AfterEvent, afterEventBy } from '../after-event';\n\n/**\n * Builds an [[AfterEvent]] keeper of the given `event`.\n *\n * @category Core\n * @param event  An event that will be sent to all receivers upon registration.\n *\n * @returns An [[AfterEvent]] keeper that always sends the given `event`.\n */\nexport function afterThe<E extends any[]>(...event: E): AfterEvent<E> {\n  return afterEventBy(noop, valueProvider(event));\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/fun-events\n */\nimport { NextCall, nextCall } from '@proc7ts/call-thru';\nimport { EventKeeper } from '../base';\nimport { afterSupplied } from '../keepers';\nimport { OnEventCallChain } from './on-event-call-chain';\n\n/**\n * Builds a next chained call of {@link OnEventCallChain} that calls the next pass with every event supplied by\n * the given keeper.\n *\n * The event supply from the given keeper will be cut off each time the call is applied.\n *\n * This differs from [[nextOnEvent]] when passing supplier implementing both [[EventSender]] and [[EventKeeper]]\n * interfaces such as [[ValueTracker]]. [[nextOnEvent]] would prefer the former, while this one would prefer the latter.\n *\n * @category Core\n * @typeparam E  An event type. This is a tuple of argument types of the next pass.\n * @param keeper  A keeper of events to pass down the chain.\n *\n * @returns Next call passing events from the given `keeper`.\n */\nexport function nextAfterEvent<E extends any[]>(\n    keeper: EventKeeper<E>,\n): NextCall<OnEventCallChain, E> {\n  return nextCall((chain, pass) => chain.onEvent(pass, afterSupplied(keeper)));\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/fun-events\n */\nimport { EventNotifier, EventReceiver, EventSender, EventSupply, OnEvent__symbol } from '../base';\nimport { OnEvent, onEventBy } from '../on-event';\n\n/**\n * Event emitter is a handy implementation of [[OnEvent]] sender.\n *\n * Extends [[EventNotifier]] by making its [[EventNotifier.on]] method implement an [[OnEvent]] interface.\n *\n * @category Core\n * @typeparam E  An event type. This is a list of event receiver parameter types.\n */\nexport class EventEmitter<E extends any[]> extends EventNotifier<E> implements EventSender<E> {\n\n  /**\n   * Returns an [[OnEvent]] sender.\n   */\n  on(): OnEvent<E>;\n  on(receiver: EventReceiver<E>): EventSupply;\n  on(receiver?: EventReceiver<E>): OnEvent<E> | EventSupply {\n    return (this.on = onEventBy<E>(receiver => super.on(receiver)).F)(receiver);\n  }\n\n  [OnEvent__symbol](): OnEvent<E> {\n    return this.on();\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/fun-events\n */\nimport { neverReceive } from '../base/impl';\nimport { OnEvent, onEventBy } from '../on-event';\n\n/**\n * An [[OnEvent]] sender that never sends any events.\n *\n * @category Core\n */\nexport const onNever: OnEvent<any> = (/*#__PURE__*/ onEventBy(neverReceive));\n","/**\n * @packageDocumentation\n * @module @proc7ts/fun-events\n */\nimport { AfterEvent__symbol, EventSupplier, isEventSender, OnEvent__symbol } from '../base';\nimport { OnEvent } from '../on-event';\n\n/**\n * Builds an [[OnEvent]] sender of events supplied by the given `supplier`.\n *\n * @category Core\n * @typeparam E  An event type. This is a list of event receiver parameter types.\n * @param supplier  An event supplier.\n *\n * @returns An [[OnEvent]] sender of events originated from the given `supplier`.\n */\nexport function onSupplied<E extends any[]>(supplier: EventSupplier<E>): OnEvent<E> {\n  return isEventSender(supplier) ? supplier[OnEvent__symbol]() : supplier[AfterEvent__symbol]();\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/fun-events\n */\nimport { EventReceiver, EventSupplier, eventSupply } from '../base';\nimport { OnEvent, onEventBy } from '../on-event';\nimport { onNever } from './on-never';\nimport { onSupplied } from './on-supplied';\n\n/**\n * Builds an [[OnEvent]] sender of events sent by any of the given `suppliers`.\n *\n * The resulting event supply is cut off as soon as all source supplies do.\n *\n * @category Core\n * @typeparam E  An event type. This is a list of event receiver parameter types.\n * @param suppliers  Original event suppliers.\n *\n * @returns An [[OnEvent]] sender of all supplied events.\n */\nexport function onAny<E extends any[]>(...suppliers: EventSupplier<E>[]): OnEvent<E> {\n  if (!suppliers.length) {\n    return onNever as OnEvent<E>;\n  }\n\n  return onEventBy<E>(receiver => {\n\n    const { supply } = receiver;\n    let remained = suppliers.length;\n    const removeSupplier = (reason?: any): void => {\n      if (!--remained) {\n        supply.off(reason);\n      }\n    };\n    const receive = (context: EventReceiver.Context<E>, ...event: E): void => {\n      receiver.receive(context, ...event);\n    };\n\n    suppliers.forEach(\n        supplier => onSupplied(supplier).to({\n          supply: eventSupply(removeSupplier).needs(supply),\n          receive,\n        }),\n    );\n  }).share();\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/fun-events\n */\nimport { nextArg } from '@proc7ts/call-thru';\nimport { EventSender, eventSupply, sendEventsTo } from '../base';\nimport { OnEvent, onEventBy } from '../on-event';\nimport { onAnyAsync } from './on-any-async';\nimport { onSupplied } from './on-supplied';\n\n/**\n * Builds an [[OnEvent]] sender of asynchronously resolved events originated from the given sender of unresolved events.\n *\n * Receives events or their promises from the given event sender, and sends them once they are resolved in the same\n * order as they have been received. Possibly in batches, e.g. when events resolved out of order.\n *\n * The resulting events supply is cut if some of incoming event promises rejected. In this case the rejection reason\n * is used as a reason to cut off. If incoming events supply is cut off, then the resulting event supply will be cut off\n * too, but only after all incoming events resolved and sent.\n *\n * @category Core\n * @typeparam E  Resolved event type.\n * @param from  Unresolved events sender containing either events or their promises.\n *\n * @returns New `OnEvent` sender of resolved events.\n */\nexport function onAsync<E>(from: EventSender<[PromiseLike<E> | E]>): OnEvent<[E, ...E[]]> {\n  return onEventBy(receiver => {\n\n    const { supply } = receiver;\n    const dispatch = sendEventsTo(receiver);\n\n    const sourceSupply = eventSupply();\n    let numInProcess = 0;\n    const source = onSupplied(from)\n        .tillOff(supply, sourceSupply)\n        .thru_(event => {\n          ++numInProcess;\n          return nextArg(event);\n        });\n    let received: E[] = [];\n    let numSent = 1;\n    let numReceived = 0;\n\n    sourceSupply.whenOff(reason => {\n      if (!numInProcess) {\n        supply.off(reason);\n      }\n    });\n\n    onAnyAsync(source).to({\n      supply,\n      receive(_ctx, event, index) {\n\n        const i = index - numSent;\n\n        received[i] = event;\n        ++numReceived;\n        if (numReceived > i) {\n\n          let toSend: E[];\n\n          if (numReceived === received.length) {\n            // Can send all received events\n            toSend = received;\n            received = [];\n          } else {\n            // Can send events up to `i`\n            toSend = received.splice(0, i + 1);\n          }\n          numSent += toSend.length;\n          numReceived -= toSend.length;\n          numInProcess -= toSend.length;\n\n          dispatch(...(toSend as [E, ...E[]]));\n          if (!numInProcess && sourceSupply.isOff) {\n            receiver.supply.needs(sourceSupply);\n          }\n        }\n      },\n    });\n  });\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/fun-events\n */\nimport { EventSender, OnEvent__symbol, sendEventsTo } from '../base';\nimport { OnEvent, onEventBy } from '../on-event';\n\n/**\n * Builds an [[OnEvent]] sender of any of asynchronously resolved events originated from the given sender of\n * unresolved events.\n *\n * Receives events or their promises from the given event sender, and sends them once they are resolved. The original\n * order of events is not preserved. Instead each resolved event is sent along with its index in original order.\n *\n * The resulting events supply is cut off immediately once unresolved events supply is cut off, or some of incoming\n * event promises rejected. In the latter case the rejection reason is used as a reason to cut off.\n *\n * @category Core\n * @typeparam E  Resolved event type.\n * @param from  Unresolved events sender containing either events or their promises.\n *\n * @returns New `OnEvent` sender of resolved events and their indices in original order starting from `1`.\n */\nexport function onAnyAsync<E>(from: EventSender<[PromiseLike<E> | E]>): OnEvent<[E, number]> {\n  return onEventBy(receiver => {\n\n    const { supply } = receiver;\n    const dispatch = sendEventsTo(receiver);\n\n    let lastIndex = 0;\n\n    from[OnEvent__symbol]().to({\n      supply,\n      receive(_ctx, promise) {\n\n        const index = ++lastIndex;\n\n        Promise.resolve()\n            .then(() => promise)\n            .then(\n                event => dispatch(event, index),\n                reason => supply.off(reason),\n            );\n      },\n    });\n  });\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/fun-events\n */\nimport { EventReceiver } from '../base';\nimport { alwaysReceiveValue, neverReceiveBecause } from '../base/impl';\nimport { OnEvent, onEventBy } from '../on-event';\n\n/**\n * Represents a promise as event sender.\n *\n * When the `promise` resolves successfully the resolved value is sent to registered event receivers. The events\n * supply is {@link EventSupply.off cut off} immediately after that without any reason specified.\n *\n * When the `promise` is rejected the events supply is {@link EventSupply.off cut off} with promise rejection reason.\n *\n * @category Core\n * @param promise  The promise to represent as event sender.\n *\n * @returns An [[OnEvent]] sender of the given `promise` settlement event.\n */\nexport function onPromise<T>(promise: Promise<T>): OnEvent<[T]> {\n\n  let receive = (receiver: EventReceiver.Generic<[T]>): void => {\n    promise.then(() => receive(receiver), () => receive(receiver));\n  };\n\n  promise.then(value => {\n    receive = alwaysReceiveValue(value);\n  }).catch(e => {\n    receive = neverReceiveBecause(e);\n  });\n\n  return onEventBy(receiver => receive(receiver));\n}\n","import { EventReceiver } from '../event-receiver';\nimport { sendEventsTo } from '../send-events-to';\n\n/**\n * @internal\n */\nexport function alwaysReceiveValue<T>(value: T): (receiver: EventReceiver.Generic<[T]>) => void {\n  return receiver => {\n    try {\n      sendEventsTo(receiver)(value);\n      receiver.supply.off();\n    } catch (e) {\n      receiver.supply.off(e);\n    }\n  };\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/fun-events\n */\n/**\n * A path to state or its part. E.g. property value.\n *\n * May consist of one or more property keys.\n *\n * An array consisting of the only one property key is the same as this property key.\n *\n * An empty array is a path to the state itself.\n *\n * @category State Tracking\n */\nexport type StatePath = PropertyKey | StatePath.Normalized;\n\nexport namespace StatePath {\n\n  /**\n   * Normalized state path.\n   *\n   * This is always an array of property keys.\n   */\n  export type Normalized = readonly PropertyKey[];\n\n}\n\n/**\n * Normalizes a state path consisting of single key.\n *\n * @category State Tracking\n * @param key  A path key.\n *\n * @return Normalized state path.\n */\nexport function statePath<K extends PropertyKey>(key: K): [K];\n\n/**\n * Normalizes arbitrary state path. I.e. converts it to array.\n *\n * @param path  Arbitrary state path.\n *\n * @return Normalized state path.\n */\nexport function statePath(path: StatePath): StatePath.Normalized;\n\nexport function statePath(path: StatePath): StatePath.Normalized {\n  return Array.isArray(path) ? path as StatePath.Normalized : [path] as StatePath.Normalized;\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/fun-events\n */\nimport { noop } from '@proc7ts/primitives';\nimport { EventSender, eventSupply, EventSupply, OnEvent__symbol } from '../base';\nimport { onEventBy } from '../on-event';\nimport { EventEmitter } from '../senders';\nimport { OnStateUpdate } from './on-state-update';\nimport { statePath, StatePath } from './state-path';\nimport { StateUpdateReceiver } from './state-update-receiver';\n\nclass PathEntry {\n\n  readonly emitter = new EventEmitter<[StatePath.Normalized, any, any]>();\n  private readonly _nested = new Map<PropertyKey, PathEntry>();\n\n  constructor(private readonly _drop: () => void) {\n    this.emitter.on((path, newValue, oldValue) => {\n\n      const key = path[0];\n      const nested = this._nested.get(key);\n\n      if (nested) {\n        nested.emitter.send(path.slice(1), newValue, oldValue);\n      }\n    });\n  }\n\n  on(receiver: StateUpdateReceiver): EventSupply {\n\n    const supply = this.emitter.on(receiver);\n\n    return eventSupply(reason => {\n      supply.off(reason);\n      this._dropIfEmpty();\n    }).needs(supply);\n  }\n\n  nest(key: PropertyKey): PathEntry;\n\n  nest(key: PropertyKey, dontCreateMissing: true): PathEntry | undefined;\n\n  nest(key: PropertyKey, dontCreateMissing?: true): PathEntry | undefined;\n\n  nest(key: PropertyKey, dontCreateMissing?: true): PathEntry | undefined {\n\n    const found = this._nested.get(key);\n\n    if (found || dontCreateMissing) {\n      return found;\n    }\n\n    const created = new PathEntry(() => this._remove(key));\n\n    this._nested.set(key, created);\n\n    return created;\n  }\n\n  done(reason?: any): void {\n    for (const nested of this._nested.values()) {\n      nested.done(reason);\n    }\n    this.emitter.done(reason);\n  }\n\n  private _remove(key: PropertyKey): void {\n    this._nested.delete(key);\n    this._dropIfEmpty();\n  }\n\n  private _dropIfEmpty(): void {\n    if (!this._nested.size && this.emitter.size <= 1) {\n      this._drop();\n    }\n  }\n\n}\n\nclass Trackers {\n\n  private readonly _root = new PathEntry(noop);\n\n  on(path: StatePath.Normalized, receiver: StateUpdateReceiver): EventSupply {\n    return this._entry(path).on(receiver);\n  }\n\n  send<V>(path: StatePath.Normalized, newValue: V, oldValue: V): void {\n    this._root.emitter.send(path, newValue, oldValue);\n  }\n\n  done(path: StatePath.Normalized, reason?: any): void {\n\n    const entry = this._entry(path, true);\n\n    if (entry) {\n      entry.done(reason);\n    }\n  }\n\n  private _entry(path: StatePath.Normalized): PathEntry;\n\n  private _entry(path: StatePath.Normalized, dontCreateMissing: true): PathEntry | undefined;\n\n  private _entry(path: StatePath.Normalized, dontCreateMissing?: true): PathEntry | undefined {\n\n    let entry = this._root;\n\n    for (const key of path) {\n\n      const nested = entry.nest(key, dontCreateMissing);\n\n      if (!nested) {\n        return;\n      }\n\n      entry = nested;\n    }\n\n    return entry;\n  }\n\n}\n\nclass SubStateTracker implements StateTracker {\n\n  readonly update: <V>(\n      this: void,\n      path: StatePath,\n      newValue: V,\n      oldValue: V,\n  ) => void;\n\n  constructor(private readonly _trackers: Trackers, private readonly _path: StatePath.Normalized) {\n    this.update = <V>(path: StatePath, newValue: V, oldValue: V) => {\n      this._trackers.send([...this._path, ...statePath(path)], newValue, oldValue);\n    };\n  }\n\n  get _tracker(): this {\n    return this;\n  }\n\n  onUpdate(): OnStateUpdate;\n  onUpdate(receiver: StateUpdateReceiver): EventSupply;\n  onUpdate(receiver?: StateUpdateReceiver): OnStateUpdate | EventSupply {\n    return (this.onUpdate = onEventBy<[StatePath, any, any]>(\n        receiver => this._trackers.on(this._path, receiver),\n    ).F as OnStateUpdate.Fn)(receiver);\n  }\n\n  [OnEvent__symbol](): OnStateUpdate {\n    return this.onUpdate();\n  }\n\n  track(path: StatePath): SubStateTracker {\n    path = statePath(path);\n    if (!path.length) {\n      return this; // Path to itself.\n    }\n    return new SubStateTracker(this._trackers, [...this._path, ...path]);\n  }\n\n  done(reason?: any): void {\n    this._trackers.done(this._path, reason);\n  }\n\n}\n\n/**\n * State changes tracker.\n *\n * A state is a tree-like structure of sub-states (nodes) available under [[StatePath]].\n *\n * When node modified a [[StateTracker.update]] should be called. Then all state update receivers registered by\n * [[StateTracker.onUpdate]] will receive this update.\n *\n * @category State Tracking\n */\nexport class StateTracker implements EventSender<[StatePath.Normalized, any, any]> {\n\n  /**\n   * @internal\n   */\n  readonly _tracker: SubStateTracker = new SubStateTracker(new Trackers(), []);\n\n  /**\n   * Builds a {@link OnStateUpdate state updates sender}.\n   *\n   * A state update will be sent to it whenever an `update()` function is called.\n   *\n   * The `[OnEvent__symbol]` property is an alias of this one.\n   *\n   * @returns State updates sender.\n   */\n  onUpdate(): OnStateUpdate;\n\n  /**\n   * Registers a receiver of state updates.\n   *\n   * @param receiver State updates receiver to register.\n   *\n   * @returns A supply of state updates.\n   */\n  onUpdate(receiver: StateUpdateReceiver): EventSupply;\n\n  onUpdate(receiver?: StateUpdateReceiver): OnStateUpdate | EventSupply {\n    return (this.onUpdate = this._tracker.onUpdate().F)(receiver);\n  }\n\n  [OnEvent__symbol](): OnStateUpdate {\n    return this.onUpdate();\n  }\n\n  // noinspection JSCommentMatchesSignature\n  /**\n   * Updates the component state.\n   *\n   * All receivers registered with [[onUpdate]] will receive this update.\n   *\n   * @typeparam V  A type of changed value.\n   * @param key  Changed value key.\n   * @param newValue  New value.\n   * @param oldValue  Previous value.\n   */\n  get update(): <V>(\n      this: void,\n      path: StatePath,\n      newValue: V,\n      oldValue: V,\n  ) => void {\n    return this._tracker.update;\n  }\n\n  /**\n   * Starts tracking of partial state under the given path.\n   *\n   * @param path  A path to state part.\n   *\n   * @return New partial state tracker.\n   */\n  track(path: StatePath): StateTracker {\n\n    const subTracker = this._tracker.track(path);\n\n    return subTracker === this._tracker ? this : subTracker;\n  }\n\n  /**\n   * Unregisters updates receivers and cuts off their supplies.\n   *\n   * After this method call the updates receivers of this partial state and all nested states won't receive any updates.\n   *\n   * @param reason  An optional reason to stop tracking.\n   */\n  done(reason?: any): void {\n    this._tracker.done(reason);\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/fun-events\n */\nimport { AfterEvent, afterEventBy } from '../after-event';\nimport {\n  AfterEvent__symbol,\n  EventKeeper,\n  EventReceiver,\n  EventSender,\n  EventSupplier,\n  EventSupply,\n  EventSupply__symbol,\n  eventSupplyOf,\n  EventSupplyPeer,\n  isEventKeeper,\n  noEventSupply,\n  OnEvent__symbol,\n} from '../base';\nimport { OnEvent } from '../on-event';\nimport { onSupplied } from '../senders';\n\n/**\n * Value accessor and changes tracker.\n *\n * Implements an [[EventSender]] interface by sending value changes to registered receivers as a pair of new and old\n * values.\n *\n * Implements an [[EventKeeper]] interface by sending current value and its updates.\n *\n * @category Value Tracking\n * @typeparam T  Tracked value type.\n */\nexport abstract class ValueTracker<T = any> implements EventSender<[T, T]>, EventKeeper<[T]>, EventSupplyPeer {\n\n  /**\n   * @internal\n   */\n  private _by = noEventSupply();\n\n  /**\n   * Returns [[OnEvent]] sender of value changes.\n   *\n   * The `[OnEvent__symbol]` property is an alias of this one.\n   *\n   * @returns Value changes sender.\n   */\n  abstract on(): OnEvent<[T, T]>;\n\n  /**\n   * Registers a receiver of value changes.\n   *\n   * The new value is sent as first argument, and the old value as a second one.\n   *\n   * @param receiver  A receiver to register.\n   *\n   * @returns A supply of value changes.\n   */\n  abstract on(receiver: EventReceiver<[T, T]>): EventSupply;\n\n  /**\n   * Builds an [[AfterEvent]] keeper of current value.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   *\n   * @returns Current value keeper.\n   */\n  read(): AfterEvent<[T]>;\n\n  /**\n   * Registers a receiver of current values.\n   *\n   * @param receiver  A receiver to register.\n   *\n   * @returns A supply of current value.\n   */\n  read(receiver: EventReceiver<[T]>): EventSupply;\n\n  read(receiver?: EventReceiver<[T]>): AfterEvent<[T]> | EventSupply {\n    return (this.read = afterEventBy<[T]>(\n        receiver => this.on(receiveNewValue(receiver)),\n        () => [this.it],\n    ).F)(receiver);\n  }\n\n  [OnEvent__symbol](): OnEvent<[T, T]> {\n    return this.on();\n  }\n\n  [AfterEvent__symbol](): AfterEvent<[T]> {\n    return this.read();\n  }\n\n  /**\n   * An event supply of this value tracker.\n   */\n  abstract readonly [EventSupply__symbol]: EventSupply;\n\n  /**\n   * The tracked value.\n   */\n  abstract it: T;\n\n  /**\n   * Updates the tracked value by the given value `supplier`.\n   *\n   * If the value is already updated by another supplier, then unbinds from the old one first.\n   *\n   * Call the [[ValueTracker.byNone]] method to unbind the tracked value from the `source`.\n   *\n   * Note that explicitly updating the value would override the value received from the `source`.\n   *\n   * @param supplier  The source value sender or keeper.\n   *\n   * @returns `this` instance.\n   */\n  by(supplier: EventSupplier<[T]>): this;\n\n  /**\n   * Updates the tracked value by value suppliers extracted from events sent by the given `supplier`.\n   *\n   * If the value is already updated by another value supplier, then unbinds from the old one first.\n   *\n   * Call the [[ValueTracker.byNone]] method to unbind the tracked value from the `source`.\n   *\n   * Note that explicitly updating the value would override the value received from the `source`.\n   *\n   * @typeparam S  Source value type.\n   * @param supplier  The event supplier to extract value suppliers from.\n   * @param extract  A function extracting value supplier from event received from `supplier`.\n   * May return `undefined` to suspend receiving values.\n   *\n   * @returns `this` instance.\n   */\n  by<S extends any[]>(\n      supplier: EventSupplier<S>,\n      extract: (this: void, ...event: S) => EventSupplier<[T]> | undefined,\n  ): this;\n\n  by<S extends any[]>(\n      supplier: EventSupplier<S> | EventSupplier<[T]>,\n      extract?: (this: void, ...event: S) => EventSupplier<[T]> | undefined,\n  ): this {\n\n    const acceptValuesFrom = (sender: EventSupplier<[T]>): EventSupply => {\n\n      const onValue = isEventKeeper(sender) ? sender[AfterEvent__symbol]() : sender[OnEvent__symbol]();\n\n      return onValue.to(value => this.it = value);\n    };\n\n    this.byNone();\n    if (!extract) {\n\n      const sender = supplier as EventSupplier<[T]>;\n\n      this._by = acceptValuesFrom(sender);\n    } else {\n\n      const container = supplier as EventSupplier<S>;\n\n      this._by = onSupplied(container).consume((...event: S) => {\n\n        const sender = extract(...event);\n\n        if (sender) {\n          return acceptValuesFrom(sender);\n        }\n\n        return;\n      });\n    }\n\n    this._by.whenOff(() => this._by = noEventSupply());\n\n    return this;\n  }\n\n  /**\n   * Unbinds the tracked value from any value supplier this tracker is {@link ValueTracker.by updated by}.\n   *\n   * If the tracker is not bound then does nothing.\n   *\n   * @param reason  Arbitrary reason of unbinding the value.\n   *\n   * @returns `this` instance.\n   */\n  byNone(reason?: any): this {\n    this._by.off(reason);\n    return this;\n  }\n\n  /**\n   * Removes all registered event receivers and cuts off corresponding event supplies.\n   *\n   * After this method call they won't receive events.\n\n   * @param reason  A reason to stop sending events.\n   *\n   * @returns `this` instance.\n   */\n  done(reason?: any): this {\n    eventSupplyOf(this).off(reason);\n    return this;\n  }\n\n}\n\n/**\n * @internal\n */\nfunction receiveNewValue<T, N extends T>(\n    valueReceiver: EventReceiver.Generic<[T]>,\n): EventReceiver.Generic<[N, T]> {\n  return {\n    supply: valueReceiver.supply,\n    receive(context, newValue) {\n      valueReceiver.receive(\n          {\n            onRecurrent(recurrentReceiver) {\n              context.onRecurrent(recurrentValue => recurrentReceiver(recurrentValue));\n            },\n          },\n          newValue,\n      );\n    },\n  };\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/fun-events\n */\nimport { EventKeeper, EventReceiver, EventSupply, EventSupply__symbol, eventSupplyOf } from '../base';\nimport { OnEvent } from '../on-event';\nimport { EventEmitter } from '../senders';\nimport { ValueTracker } from './value-tracker';\n\n/**\n * @internal\n */\nclass TrackedValue<T> extends ValueTracker<T> {\n\n  private readonly _on = new EventEmitter<[T, T]>();\n\n  constructor(private _it: T) {\n    super();\n  }\n\n  get [EventSupply__symbol](): EventSupply {\n    return eventSupplyOf(this._on);\n  }\n\n  on(): OnEvent<[T, T]>;\n  on(receiver: EventReceiver<[T, T]>): EventSupply;\n  on(receiver?: EventReceiver<[T, T]>): OnEvent<[T, T]> | EventSupply {\n    return (this.on = this._on.on().F)(receiver);\n  }\n\n  get it(): T {\n    return this._it;\n  }\n\n  set it(value: T) {\n\n    const oldValue = this._it;\n\n    if (oldValue !== value) {\n      this._it = value;\n      this._on.send(value, oldValue);\n    }\n  }\n\n}\n\n/**\n * Constructs a value which changes can be tracked.\n *\n * @category Value Tracking\n * @param initial  Initial value.\n *\n * @returns Value tracker instance.\n */\nexport function trackValue<T>(initial: T): ValueTracker<T>;\n\n/**\n * Constructs an optional value which changes can be tracked.\n *\n * @param initial  Initial value.\n *\n * @returns Value tracker instance.\n */\nexport function trackValue<T>(initial?: T): ValueTracker<T | undefined>;\n\nexport function trackValue<T>(initial: T): ValueTracker<T> {\n  return new TrackedValue<T>(initial);\n}\n\n/**\n * Constructs a tracked value updated by the given value `supplier`.\n *\n * If the value is already updated by another supplier, then unbinds from the old one first.\n *\n * Call the [[ValueTracker.byNone]] method to unbind the tracked value from the `source`.\n *\n * Note that explicitly updating the value would override the value received from the `source`.\n *\n * @category Value Tracking\n * @param supplier  The source value keeper.\n *\n * @returns `this` instance.\n */\nexport function trackValueBy<T>(supplier: EventKeeper<[T]>): ValueTracker<T>;\n\n/**\n * Constructs a tracked value updated by value keepers extracted from events sent by the given `supplier`.\n *\n * If the value is already updated by another value supplier, then unbinds from the old one first.\n *\n * Call the [[ValueTracker.byNone]] method to unbind the tracked value from the `source`.\n *\n * Note that explicitly updating the value would override the value received from the `source`.\n *\n * @typeparam S  Source value type.\n * @param supplier  The event keeper to extract value keepers from.\n * @param extract  A function extracting value keeper from event received from `supplier`.\n *\n * @returns `this` instance.\n */\nexport function trackValueBy<T, S extends any[]>(\n    supplier: EventKeeper<S>,\n    extract: (this: void, ...event: S) => EventKeeper<[T]>,\n): ValueTracker<T>;\n\nexport function trackValueBy<T, S extends any[]>(\n    supplier: EventKeeper<S> | EventKeeper<[T]>,\n    extract?: (this: void, ...event: S) => EventKeeper<[T]>,\n): ValueTracker<T> {\n  return (trackValue() as ValueTracker<T>).by(\n      supplier as EventKeeper<S>,\n      extract as (this: void, ...event: S) => EventKeeper<[T]>,\n  );\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/fun-events\n */\nimport {\n  EventKeeper,\n  EventReceiver,\n  EventSender,\n  EventSupplier,\n  eventSupply,\n  EventSupply,\n  EventSupply__symbol,\n  eventSupplyOf,\n  isEventKeeper,\n} from '../base';\nimport { afterSupplied } from '../keepers';\nimport { OnEvent } from '../on-event';\nimport { EventEmitter, onSupplied } from '../senders';\nimport { ValueTracker } from './value-tracker';\n\n/**\n * Synchronizes tracked values with each other.\n *\n * Any change to any of the added tracked values would update all the others.\n *\n * @category Value Tracking\n */\nexport class ValueSync<T> extends ValueTracker<T> {\n\n  /**\n   * @internal\n   */\n  private readonly _on = new EventEmitter<[T, T]>();\n\n  /**\n   * @internal\n   */\n  private _it: T;\n\n  constructor(initial: T) {\n    super();\n    this._it = initial;\n  }\n\n  on(): OnEvent<[T, T]>;\n  on(receiver: EventReceiver<[T, T]>): EventSupply;\n  on(receiver?: EventReceiver<[T, T]>): OnEvent<[T, T]> | EventSupply {\n    return (this.on = this._on.on().F)(receiver);\n  }\n\n  get [EventSupply__symbol](): EventSupply {\n    return eventSupplyOf(this._on);\n  }\n\n  get it(): T {\n    return this._it;\n  }\n\n  set it(value: T) {\n\n    const old = this.it;\n\n    if (old !== value) {\n      this._it = value;\n      this._on.send(value, old);\n    }\n  }\n\n  /**\n   * Synchronizes the tracked value with the others.\n   *\n   * Applies the value from this sync to the given tracker first.\n   *\n   * @param tracker  A value tracker to keep in sync.\n   *\n   * @returns An event supply. {@link EventSupply.off Cut it off} to break synchronization.\n   */\n  sync(tracker: ValueTracker<T>): EventSupply;\n\n  /**\n   * Synchronizes the tracked value with the others in the given direction.\n   *\n   * @param direction  If set to `\"in\"` the value from the given tracker takes precedence over the one in [[ValueSync]].\n   * Otherwise the value from the sync is applied to the given tracker first.\n   * @param tracker  A value tracker to keep in sync.\n   *\n   * @returns An event supply. {@link EventSupply.off Cut it off} to break synchronization.\n   */\n  sync(direction: 'in' | 'out', tracker: ValueTracker<T>): EventSupply;\n\n  /**\n   * Synchronizes the tracked value with the ones extracted from the events sent by the given `supplier`.\n   *\n   * Once next value tracker extracted the previous one becomes out of sync.\n   *\n   * Applies the value from this sync to extracted trackers.\n   *\n   * @param supplier  The event supplier to extract value trackers from.\n   * @param extract  A function extracting the value tracker to keep in sync from the event received from `supplier`.\n   * May return `undefined` to just break the sync with previous tracker.\n   *\n   * @returns An event supply. {@link EventSupply.off Cut it off} to break synchronization.\n   */\n  sync<U extends any[]>(\n      supplier: EventSupplier<U>,\n      extract: (this: void, ...event: U) => ValueTracker<T> | undefined,\n  ): EventSupply;\n\n  /**\n   * Synchronizes the tracked value with the ones extracted from the events sent by the given `supplier`\n   * in the given direction.\n   *\n   * Once next value tracker extracted the previous one becomes out of sync.\n   *\n   * @param direction  If set to `\"in\"` the value from extracted tracker takes precedence over the one in\n   * [[ValueSync]]. Otherwise the value from the sync is applied to extracted trackers first.\n   * @param supplier  The event supplier to extract value trackers from.\n   * @param extract  A function extracting the value tracker to keep in sync from the event received from `supplier`.\n   * May return `undefined` to just break the sync with previous tracker.\n   *\n   * @returns An event supply. {@link EventSupply.off Cut it off} to break synchronization.\n   */\n  sync<U extends any[]>(\n      direction: 'in' | 'out',\n      supplier: EventSupplier<U>,\n      extract: (this: void, ...event: U) => ValueTracker<T> | undefined,\n  ): EventSupply;\n\n  sync<U extends any[]>(\n      first: 'in' | 'out' | ValueTracker<T> | EventSupplier<U>,\n      second?: ValueTracker<T>\n          | EventSender<U>\n          | EventKeeper<U>\n          | ((this: void, ...event: U) => ValueTracker<T> | undefined),\n      third?: (this: void, ...event: U) => ValueTracker<T> | undefined,\n  ): EventSupply {\n\n    let syncWithTracker = (tracker: ValueTracker<T>): EventSupply => syncTrackers(this, tracker);\n    let source: ValueTracker<T> | EventSupplier<U>;\n    let extract: ((this: void, ...event: U) => ValueTracker<T> | undefined) | undefined;\n\n    if (typeof first === 'string') {\n      if (first === 'in') {\n        syncWithTracker = tracker => syncTrackers(tracker, this);\n      }\n      source = second as ValueTracker<T> | EventSender<U> | EventKeeper<U>;\n      extract = third;\n    } else {\n      source = first;\n      extract = second as (this: void, ...event: U) => ValueTracker<T> | undefined;\n    }\n\n    const extractTracker = extract;\n\n    if (!extractTracker) {\n      return syncWithTracker(source as ValueTracker<T>);\n    }\n\n    const supplier = source as EventSupplier<U>;\n\n    return (isEventKeeper(supplier) ? afterSupplied(supplier) : onSupplied(supplier)).consume((...event) => {\n\n      const tracker = extractTracker(...event);\n\n      return tracker && syncWithTracker(tracker);\n    });\n\n    function syncTrackers(tracker1: ValueTracker<T>, tracker2: ValueTracker<T>): EventSupply {\n\n      const supply1 = tracker1.read(value => {\n        tracker2.it = value;\n      });\n      const supply2 = tracker2.on(value => {\n        tracker1.it = value;\n      });\n\n      return eventSupply(reason => {\n        supply2.off(reason);\n        supply1.off(reason);\n      }).needs(supply1).needs(supply2);\n    }\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/namespace-aliaser\n */\nimport { QualifiedName } from './name';\nimport { NamespaceDef } from './namespace';\nimport { NamespaceAliaser } from './namespace-aliaser';\n\n/**\n * Naming schema is responsible for applying namespace aliases to simple names. E.g. by appending alias as prefix or\n * suffix of the name.\n */\nexport abstract class Naming {\n\n  /**\n   * Applies the given namespace `alias` to the given local `name`.\n   *\n   * @param name Local name to apply namespace alias to.\n   * @param alias Namespace alias to apply.\n   * @param namespace Aliased namespace definition.\n   *\n   * @returns A string containing the `name` with `alias` applied to it.\n   */\n  abstract applyAlias(name: string, alias: string, namespace: NamespaceDef): string;\n\n  /**\n   * Converts the given qualified `name` into simple one accordingly to this naming schema.\n   *\n   * @param name Qualified name to convert.\n   * @param nsAlias Namespace aliaser to use.\n   */\n  name(name: QualifiedName, nsAlias: NamespaceAliaser): string {\n    if (typeof name === 'string') {\n      return name;\n    }\n\n    const [local, ns] = name;\n\n    return ns.name(nsAlias(ns), local, this);\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/namespace-aliaser\n */\nimport { Naming } from './naming';\n\n/**\n * @internal\n */\nclass DefaultNaming extends Naming {\n\n  applyAlias(name: string, alias: string): string {\n    return `${alias}-${name}`;\n  }\n\n}\n\n/**\n * Default naming schema.\n *\n * Prefixes a name with namespace alias separating them by dash.\n *\n * The result looks like `<alias>-<name>`.\n */\nexport const default__naming: Naming = (/*#__PURE__*/ new DefaultNaming());\n\n/**\n * HTML elements naming schema.\n *\n * Prefixes a name with namespace alias separating them by dash.\n *\n * The result looks like `<alias>-<name>`.\n */\nexport const html__naming: Naming = (/*#__PURE__*/ new DefaultNaming());\n\n/**\n * @internal\n */\nclass XmlNaming extends Naming {\n\n  applyAlias(name: string, alias: string): string {\n    return `${alias}:${name}`;\n  }\n\n}\n\n/**\n * XML elements naming schema.\n *\n * Prefixes a name with namespace alias separating them by colon.\n *\n * The result looks like `<alias>:<name>`.\n */\nexport const xml__naming: Naming = (/*#__PURE__*/ new XmlNaming());\n\n/**\n * Element identifiers naming schema.\n *\n * Prefixes a name with namespace alias separating them by colon.\n *\n * The result looks like `<alias>:<name>`.\n */\nexport const id__naming: Naming = (/*#__PURE__*/ new XmlNaming());\n\n/**\n * @internal\n */\nclass CssNaming extends Naming {\n\n  applyAlias(name: string, alias: string): string {\n    return `${name}@${alias}`;\n  }\n\n}\n\n/**\n * CSS classes naming scheme.\n *\n * Appends namespace alias as a name suffix separated by `@` sign.\n *\n * The result looks like `<name>@<alias>`.\n */\nexport const css__naming: Naming = (/*#__PURE__*/ new CssNaming());\n","/**\n * @packageDocumentation\n * @module @proc7ts/namespace-aliaser\n */\nimport { Naming } from './naming';\nimport { default__naming } from './namings';\n\n/**\n * Namespace definition.\n *\n * Namespaces are identified by their URLs.\n */\nexport class NamespaceDef {\n\n  /**\n   * Unique namespace URL.\n   */\n  readonly url: string;\n\n  /**\n   * Preferred namespace aliases.\n   */\n  readonly aliases: readonly string[];\n\n  /**\n   * The most preferred namespace alias.\n   *\n   * By default this is the first preferred alias, or `ns` if there is no preferred aliases.\n   */\n  get alias(): string {\n    return this.aliases[0] || 'ns';\n  }\n\n  /**\n   * Constructs new namespace definition.\n   *\n   * @param url  Unique namespace URL.\n   * @param aliases  Preferred namespace aliases. It is expected that each alias is an ASCII letter followed by\n   * any number of ASCII letters, digits, `-`, or `_` signs. Aliases starting with `xml` are reserved. Empty alias\n   * is reserved for [default namespace][[DEFAULT__NS]].\n   */\n  constructor(url: string, ...aliases: string[]) {\n    this.url = url;\n    this.aliases = aliases;\n  }\n\n  /**\n   * Converts a local `name` belonging to this namespace to simple one according to the given `naming` schema.\n   *\n   * Calls [[Naming.applyAlias]] by default.\n   *\n   * @param alias  Namespace alias to apply to the name.\n   * @param name  A name to convert.\n   * @param naming  Naming schema to use. {@link default__naming default naming schema} is used when omitted.\n   *\n   * @returns A simple name with this namespace alias applied.\n   */\n  name(alias: string, name: string, naming: Naming = default__naming): string {\n    return naming.applyAlias(name, alias, this);\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/namespace-aliaser\n */\nimport { DEFAULT__NS } from './default.ns';\nimport { NamespaceDef } from './namespace';\n\n/**\n * A name qualified with namespace.\n *\n * This can be either:\n * - a simple name string, which means a name in default namespace, or\n * - a name+namespace tuple.\n */\nexport type QualifiedName = string | NameAndNamespace;\n\n/**\n * A local name and namespace tuple.\n *\n * Consists of a local name string and namespace definition this name belongs to.\n */\nexport type NameAndNamespace = readonly [string, NamespaceDef];\n\n/**\n * Checks whether the given `value` is a name+namespace tuple.\n *\n * @param value  A value to check.\n *\n * @returns `true` if the given `value` is an array consisting of exactly two elements, where the first element is a\n * non-empty string, and the second element is an instance of [[NamespaceDef]]. Or `false` otherwise.\n */\nexport function isNameAndNamespace(value: unknown): value is NameAndNamespace {\n  return Array.isArray(value)\n      && value.length === 2\n      && typeof value[0] === 'string'\n      && value[1] instanceof NamespaceDef;\n}\n\n/**\n * Checks whether the given `value` is a qualified name.\n *\n * @param value  A value to check.\n *\n * @returns `true` if the given `value` is a non-empty string or an array consisting of exactly two elements,\n * where the first element is a non-empty string, and the second element is an instance of [[NamespaceDef]].\n * Or `false` otherwise.\n */\nexport function isQualifiedName(value: unknown): value is QualifiedName {\n  return typeof value === 'string' || isNameAndNamespace(value);\n}\n\n/**\n * Detects a namespace of the given qualified `name`\n *\n * @param name  Qualified name to detect a namespace of.\n *\n * @returns A namespace if the given `name` has it, or {@link DEFAULT__NS default namespace} otherwise.\n */\nexport function namespaceOf(name: QualifiedName): NamespaceDef {\n  return typeof name !== 'string' ? name[1] : DEFAULT__NS;\n}\n\n/**\n * Converts the given qualified `name` to local name and namespace tuple.\n *\n * @param name  Qualified name to convert.\n *\n * @returns The `name` itself if it has a namespace, or a tuple consisting of `name` and\n * {@link DEFAULT__NS default namespace} otherwise.\n */\nexport function nameAndNamespace(name: QualifiedName): NameAndNamespace {\n  return typeof name !== 'string' ? name : [name, DEFAULT__NS];\n}\n\n/**\n * Checks whether two qualified names are equal to each other.\n *\n * @param first  First qualified name to compare.\n * @param second  Second qualified name to compare.\n *\n * @returns `true` if both names are equal, or `false` otherwise.\n */\nexport function namesEqual(first: QualifiedName, second: QualifiedName): boolean {\n  if (typeof first === 'string') {\n    return typeof second === 'string' ? first === second : !second[1].url && second[0] === first;\n  }\n\n  const [firstName, { url: firstUrl }] = first;\n\n  if (typeof second === 'string') {\n    return !firstUrl && firstName === second;\n  }\n\n  return firstName === second[0] && firstUrl === second[1].url;\n}\n\n/**\n * Compares two qualified names.\n *\n * Names in default namespace considered less than other names. Namespaces are compared by their URLs.\n *\n * @param first  First qualified name to compare.\n * @param second  Second qualified name to compare.\n *\n * @returns `-1` if the `first` name is less than the `second` one, `0` if they are equal, or `1` if the `first` name\n * is greater than the `second` one.\n */\nexport function compareNames(first: QualifiedName, second: QualifiedName): -1 | 0 | 1 {\n  if (typeof first === 'string') {\n    if (typeof second === 'string') {\n      return compareStrings(first, second);\n    }\n    if (!second[1].url) {\n      return compareStrings(first, second[0]);\n    }\n    return -1;\n  }\n\n  const [firstName, { url: firstUrl }] = first;\n\n  if (typeof second === 'string') {\n    if (!firstUrl) {\n      return compareStrings(firstName, second);\n    }\n    return 1;\n  }\n\n  return compareStrings(firstUrl, second[1].url) || compareStrings(firstName, second[0]);\n}\n\n/**\n * @internal\n */\nfunction compareStrings(first: string, second: string): -1 | 0 | 1 {\n  return first < second ? -1 : first > second ? 1 : 0;\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/namespace-aliaser\n */\nimport { NamespaceDef } from './namespace';\n\n/**\n * Namespace aliaser function interface.\n *\n * Maps namespaces to their unique aliases.\n */\nexport type NamespaceAliaser =\n/**\n * @param ns  A definition of namespace to find alias for.\n *\n * @returns Namespace alias.\n */\n    (ns: NamespaceDef) => string;\n\n/**\n * Creates a namespace aliaser.\n *\n * The returned function tries to find a registered alias for the given namespace. If not found then tries to use one\n * of its preferred aliases. If all of them are reserved already for another namespaces, generates a new unique alias.\n *\n * @returns New instance of namespace aliaser.\n */\nexport function newNamespaceAliaser(): NamespaceAliaser {\n\n  const aliasesByNs = new Map<string, string>();\n  const nsNumPerAlias = new Map<string, number>();\n\n  return function nsAlias(ns: NamespaceDef): string {\n\n    const found = aliasesByNs.get(ns.url);\n\n    if (found) {\n      return found;\n    }\n\n    const mostPreferred = ns.alias;\n    let nsNumRegistered = 0;\n\n    for (const preferred of [mostPreferred, ...ns.aliases]) {\n\n      const ids = nsNumPerAlias.get(preferred);\n\n      if (!ids) {\n        aliasesByNs.set(ns.url, preferred);\n        nsNumPerAlias.set(preferred, 1);\n        return preferred;\n      }\n      if (!nsNumRegistered) {\n        // Use the first one\n        nsNumRegistered = ids;\n      }\n    }\n\n    const generated = `${mostPreferred}${++nsNumRegistered}`;\n\n    aliasesByNs.set(ns.url, generated);\n    nsNumPerAlias.set(mostPreferred, nsNumRegistered);\n\n    return generated;\n  };\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/fun-events/dom\n */\nimport { eventReceiver, EventReceiver, EventSupply, EventSupplyPeer } from '../base';\nimport { once, tillOff } from '../impl';\nimport { OnEvent } from '../on-event';\n\n/**\n * DOM event listener.\n *\n * DOM events are never recurrent.\n *\n * @category DOM\n * @typeparam E  Supported DOM event type.\n */\nexport type DomEventListener<E extends Event> = EventReceiver<[E]>;\n\n/**\n * An [[EventSender]] implementation able to register DOM event listeners.\n *\n * @category DOM\n * @typeparam E  Supported DOM event type.\n */\nexport class OnDomEvent<E extends Event> extends OnEvent<[E]> {\n\n  /**\n   * DOM event listener registration function of this event sender.\n   *\n   * Delegates to [[OnDomEvent.to]] method.\n   */\n  get F(): OnDomEvent.Fn<E> {\n    return this.to.bind(this);\n  }\n\n  /**\n   * Returns a reference to itself.\n   *\n   * @returns `this` instance.\n   */\n  to(): this;\n\n  /**\n   * Starts sending DOM events to the given `listener`.\n   *\n   * @param listener  Target listener of DOM events.\n   * @param opts  DOM event listener options to pass to `EventTarget.addEventListener()`.\n   *\n   * @returns A supply of DOM events from this sender to the given `listener`.\n   */\n  to(listener: DomEventListener<E>, opts?: AddEventListenerOptions | boolean): EventSupply;\n\n  /**\n   * Either starts sending DOM events to the given `listener`, or returns a reference to itself.\n   *\n   * @param listener  Target listener of DOM events.\n   * @param opts  DOM event listener options to pass to `EventTarget.addEventListener()`.\n   *\n   * @returns Either a supply of DOM events from this sender to the given `listener`, or `this` instance when `listener`\n   * is omitted.\n   */\n  to(listener?: DomEventListener<E>, opts?: AddEventListenerOptions | boolean): this | EventSupply;\n\n  to(listener?: DomEventListener<E>, opts?: AddEventListenerOptions | boolean): this | EventSupply {\n    if (!listener) {\n      return this;\n    }\n\n    const receiver = eventReceiver(listener);\n    const { supply } = receiver;\n\n    if (!supply.isOff) {\n      (this._on as (\n          this: void,\n          listener: EventReceiver.Generic<[E]>,\n          opts?: AddEventListenerOptions | boolean,\n      ) => void)(receiver, opts);\n    }\n\n    return supply;\n  }\n\n  /**\n   * Builds an [[OnDomEvent]] sender of events originated from this one that stops sending them to registered receiver\n   * after the first one.\n   *\n   * @returns DOM event sender.\n   */\n  once(): OnDomEvent<E>;\n\n  /**\n   * Registers a listener of DOM events originated from this sender that stops receiving them after the first one.\n   *\n   * @param listener  A DOM event listener to register.\n   * @param opts  DOM event listener options to pass to `EventTarget.addEventListener()`.\n   *\n   * @returns A supply of DOM event.\n   */\n  once(listener: DomEventListener<E>, opts?: AddEventListenerOptions | boolean): EventSupply;\n\n  once(listener?: DomEventListener<E>, opts?: AddEventListenerOptions | boolean): OnDomEvent<E> | EventSupply {\n    return (this.once = onDomEventBy(once(this)).F)(listener, opts);\n  }\n\n  /**\n   * Builds an [[OnDomEvent]] sender that sends events from this one until the required `supply` is cut off.\n   *\n   * The outgoing events supply will be cut off once incoming event supply does. Unless a second supply passed in.\n   * In the latter case that supply will be cut off instead.\n   *\n   * @param required  A peer of required event supply.\n   * @param dependentSupply  The supply to cut off on cutting off the incoming events supply.\n   *\n   * @returns New DOM event sender.\n   */\n  tillOff(required: EventSupplyPeer, dependentSupply?: EventSupply): OnDomEvent<E> {\n    return onDomEventBy(tillOff(this, required, dependentSupply));\n  }\n\n  /**\n   * Builds an [[OnDomEvent]] sender of events originated from this sender that enables event capturing by default.\n   *\n   * This corresponds to specifying `true` or `{ capture: true }` as a second argument to\n   * `EventTarget.addEventListener()`.\n   *\n   * @returns DOM events sender.\n   */\n  capture(): OnDomEvent<E>;\n\n  /**\n   * Registers a capturing listener of DOM events.\n   *\n   * This corresponds to specifying `true` or `{ capture: true }` as a second argument to\n   * `EventTarget.addEventListener()`.\n   *\n   * @param listener  A DOM events listener to register.\n   * @param opts  DOM event listener options to pass to `EventTarget.addEventListener()`.\n   *\n   * @returns A supply of DOM events.\n   */\n  capture(listener: DomEventListener<E>, opts?: AddEventListenerOptions | boolean): EventSupply;\n\n  capture(listener?: DomEventListener<E>, opts?: AddEventListenerOptions | boolean): OnDomEvent<E> | EventSupply {\n    return (this.capture = onDomEventBy((\n        listener: DomEventListener<E>,\n        opts?: AddEventListenerOptions | boolean,\n    ) => {\n      if (opts == null) {\n        return this.to(listener, true);\n      }\n      if (typeof opts === 'object' && opts.capture == null) {\n        return this.to(listener, { ...opts, capture: true });\n      }\n      return this.to(listener, opts);\n    }).F)(listener, opts);\n  }\n\n  /**\n   * Builds an [[OnDomEvent]] sender of events originated from this sender that registers listeners to invoke instead\n   * of the default action.\n   *\n   * It invokes an `Event.preventDefault()` method prior to calling the registered listener.\n   *\n   * @returns DOM events sender.\n   */\n  instead(): OnDomEvent<E>;\n\n  /**\n   * Registers a listener of DOM events to invoke instead of default action.\n   *\n   * This listener invokes an `Event.preventDefault()` method prior to event handling.\n   *\n   * @param listener  A DOM events listener to register.\n   * @param opts  DOM event listener options to pass to `EventTarget.addEventListener()`.\n   *\n   * @returns A supply of DOM events.\n   */\n  instead(listener: DomEventListener<E>, opts?: AddEventListenerOptions | boolean): EventSupply;\n\n  instead(listener?: DomEventListener<E>, opts?: AddEventListenerOptions | boolean): OnDomEvent<E> | EventSupply {\n    return (this.instead = onDomEventBy((\n        listener: DomEventListener<E>,\n        opts?: AddEventListenerOptions | boolean,\n    ) => {\n\n      const receiver = eventReceiver(listener);\n\n      return this.to(\n          {\n            supply: receiver.supply,\n            receive(context, event) {\n              event.preventDefault();\n              receiver.receive(context, event);\n            },\n          },\n          opts,\n      );\n    }).F)(listener, opts);\n  }\n\n  /**\n   * Builds an [[OnDomEvent]] sender of events originate from this sender that registers listeners preventing further\n   * propagation of current event in the capturing and bubbling phases.\n   *\n   * It invokes an `Event.stopPropagation()` method prior to calling the registered listener.\n   *\n   * @returns DOM events sender.\n   */\n  just(): OnDomEvent<E>;\n\n  /**\n   * Registers a listener of DOM events preventing further propagation of current event in the capturing and bubbling\n   * phases.\n   *\n   * This listener invokes an `Event.stopPropagation()` method prior to event handling.\n   *\n   * @param listener  A DOM events listener to register.\n   * @param opts  DOM event listener options to pass to `EventTarget.addEventListener()`.\n   *\n   * @returns A supply of DOM events.\n   */\n  just(listener: DomEventListener<E>, opts?: AddEventListenerOptions | boolean): EventSupply;\n\n  just(listener?: DomEventListener<E>, opts?: AddEventListenerOptions | boolean): OnDomEvent<E> | EventSupply {\n    return (this.just = onDomEventBy((\n        listener: DomEventListener<E>,\n        opts?: AddEventListenerOptions | boolean,\n    ) => {\n\n      const receiver = eventReceiver(listener);\n\n      return this.to(\n          {\n            supply: receiver.supply,\n            receive(context, event) {\n              event.stopPropagation();\n              receiver.receive(context, event);\n            },\n          },\n          opts,\n      );\n    }).F)(listener, opts);\n  }\n\n  /**\n   * Builds an [[OnDomEvent]] sender of events originated from this sender that registers the last event listener.\n   *\n   * It invokes an `Event.stopImmediatePropagation()` method prior to calling the registered listener.\n   *\n   * @returns DOM event sender.\n   */\n  last(): OnDomEvent<E>;\n\n  /**\n   * Registers the last DOM event listener.\n   *\n   * This listener invokes an `Event.stopImmediatePropagation()` method prior to event handling.\n   *\n   * @param listener  A DOM events listener to register.\n   * @param opts  DOM event listener options to pass to `EventTarget.addEventListener()`.\n   *\n   * @returns A supply of DOM events.\n   */\n  last(listener: DomEventListener<E>, opts?: AddEventListenerOptions | boolean): EventSupply;\n\n  last(listener?: DomEventListener<E>, opts?: AddEventListenerOptions | boolean): OnDomEvent<E> | EventSupply {\n    return (this.last = onDomEventBy((\n        listener: DomEventListener<E>,\n        opts?: AddEventListenerOptions | boolean,\n    ) => {\n\n      const receiver = eventReceiver(listener);\n\n      return this.to(\n          {\n            supply: receiver.supply,\n            receive(context, event) {\n              event.stopImmediatePropagation();\n              receiver.receive(context, event);\n            },\n          },\n          opts,\n      );\n    }).F)(listener, opts);\n  }\n\n  /**\n   * Builds an [[OnDomEvent]] sender of events originated from this sender that accepts listeners never calling\n   * `Event.preventDefault()`.\n   *\n   * This corresponds to specifying `{ passive: true }` as a second argument to `EventTarget.addEventListener()`.\n   *\n   * @returns DOM event listener.\n   */\n  passive(): OnDomEvent<E>;\n\n  /**\n   * Registers a DOM event listener that never calls `Event.preventDefault()`.\n   *\n   * This corresponds to specifying `{ passive: true }` as a second argument to `EventTarget.addEventListener()`.\n   *\n   * @param listener  A DOM events listener to register.\n   * @param opts  DOM event listener options to pass to `EventTarget.addEventListener()`.\n   *\n   * @returns A supply of DOM events.\n   */\n  passive(listener: DomEventListener<E>, opts?: AddEventListenerOptions | boolean): EventSupply;\n\n  passive(listener?: DomEventListener<E>, opts?: AddEventListenerOptions | boolean): OnDomEvent<E> | EventSupply {\n    return (this.passive = onDomEventBy((\n        listener: DomEventListener<E>,\n        opts?: AddEventListenerOptions | boolean,\n    ) => {\n      if (opts == null) {\n        return this.to(listener, { passive: true });\n      }\n      if (typeof opts === 'boolean') {\n        return this.to(listener, { capture: opts, passive: true });\n      }\n      if (opts.passive == null) {\n        return this.to(listener, { ...opts, passive: true });\n      }\n      return this.to(listener, opts);\n    }).F)(listener, opts);\n  }\n\n}\n\nexport namespace OnDomEvent {\n\n  /**\n   * A signature of function registering listeners of DOM events sent by event sender.\n   *\n   * When called without parameters it returns an [[OnDomEvent]] sender. When called with DOM event listener\n   * as parameter it returns a supply of DOM events from that sender.\n   *\n   * Available as [[OnDomEvent.F]] property value.\n   *\n   * @typeparam E  Supported DOM event type.\n   */\n  export interface Fn<E extends Event> {\n\n    /**\n     * Returns the DOM events sender.\n     *\n     * @returns [[OnDomEvent]] sender the events originated from.\n     */\n    (\n        this: void,\n    ): OnDomEvent<E>;\n\n    /**\n     * Registers a listener of DOM events sent by the sender.\n     *\n     * @param listener  A listener of DOM events to register.\n     * @param opts  DOM event listener options to pass to `EventTarget.addEventListener()`.\n     *\n     * @returns A supply of DOM events from the sender to the given `listener`.\n     */\n    (\n        this: void,\n        listener: DomEventListener<E>,\n        opts?: AddEventListenerOptions | boolean,\n    ): EventSupply;\n\n    /**\n     * Either registers a listener of DOM events sent by the sender, or returns the sender itself.\n     *\n     * @param listener  A listener of DOM events to register.\n     * @param opts  DOM event listener options to pass to `EventTarget.addEventListener()`.\n     *\n     * @returns Either a supply of DOM events from the sender to the given `listener`, or [[OnDomEvent]] sender\n     * the events originated from when `listener` is omitted.\n     */\n    (\n        this: void,\n        listener?: DomEventListener<E>,\n        opts?: AddEventListenerOptions | boolean,\n    ): EventSupply | OnDomEvent<E>;\n\n  }\n\n}\n\n/**\n * Converts a plain DOM event listener registration function to [[OnDomEvent]] sender.\n *\n * @category DOM\n * @typeparam E  Supported DOM event type.\n * @param register  A generic DOM event listener registration function.\n *\n * @returns An [[OnDomEvent]] sender registering event listeners with the given `register` function.\n */\nexport function onDomEventBy<E extends Event>(\n    register: (\n        this: void,\n        listener: EventReceiver.Generic<[E]>,\n        opts?: AddEventListenerOptions | boolean,\n    ) => void,\n): OnDomEvent<E> {\n  return new OnDomEvent(register);\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/fun-events/dom\n */\nimport { noop } from '@proc7ts/primitives';\nimport { EventReceiver, eventSupply, EventSupply, EventSupply__symbol, eventSupplyOf, EventSupplyPeer } from '../base';\nimport { OnDomEvent, onDomEventBy } from './on-dom-event';\n\nconst domEventContext: EventReceiver.Context<any> = {\n  onRecurrent: noop,\n};\n\n/**\n * DOM event dispatcher can be used to register event listeners of particular event types and dispatch events.\n *\n * @category DOM\n */\nexport class DomEventDispatcher implements EventSupplyPeer {\n\n  readonly [EventSupply__symbol]: EventSupply = eventSupply();\n\n  /**\n   * @internal\n   */\n  private readonly _target: EventTarget;\n\n  /**\n   * Constructs DOM event dispatcher for the given event target.\n   *\n   * @param target  Event target to construct event dispatcher for.\n   */\n  constructor(target: EventTarget) {\n    this._target = target;\n  }\n\n  /**\n   * Returns a sender of DOM events of the given `type`.\n   *\n   * The returned DOM event sender calls an `EventTarget.addEventListener()` to register listeners.\n   * But, in contrast, it allows to register the same listener many times.\n   *\n   * The {@link EventSupply event supply} returned upon event listener registration unregisters it with\n   * `EventTarget.removeEventListener()` once {@link EventSupply.off cut off}.\n   *\n   * @typeparam E  Supported DOM event type.\n   * @param type  DOM event type name.\n   *\n   * @returns [[OnDomEvent]] sender of DOM events of the given `type`.\n   */\n  on<E extends Event>(type: string): OnDomEvent<E> {\n    return onDomEventBy<E>((listener, opts) => {\n\n      const { supply } = listener;\n\n      supply.needs(eventSupplyOf(this));\n\n      if (!supply.isOff) {\n\n        // Create unique DOM listener instance\n        const domListener: EventListener = event => listener.receive(domEventContext, event as E);\n\n        this._target.addEventListener(type, domListener, opts);\n        listener.supply.whenOff(() => this._target.removeEventListener(type, domListener));\n      }\n    });\n  }\n\n  /**\n   * Dispatches the given DOM event to event target.\n   *\n   * Calls `EventTarget.dispatchEvent()` method.\n   *\n   * @param event  An event to dispatch.\n   *\n   * @returns `true` if either event's `cancelable` attribute value is `false` or its `preventDefault()` method was not\n   * invoked, or `false` otherwise. Also returns `false` after [[done]] method called.\n   */\n  dispatch(event: Event): boolean {\n    return !eventSupplyOf(this).isOff && this._target.dispatchEvent(event);\n  }\n\n  /**\n   * Removes all registered event listeners and rejects new listeners registration and event dispatching.\n   *\n   * @param reason  A reason to unregister event listeners.\n   *\n   * @returns `this` instance.\n   */\n  done(reason?: any): this {\n    eventSupplyOf(this).off(reason);\n    return this;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/context-values/updatable\n */\n/**\n * Creates a function that throws a context destruction reason.\n *\n * This may be handy when {@link ContextSupply context supply} is cut off.\n *\n * @param reason  Context destruction reason.\n */\nexport function contextDestroyed(reason?: any): () => never {\n  return () => {\n    throw reason ?? new TypeError('Context destroyed');\n  };\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/context-values/updatable\n */\nimport { EventSupply, EventSupply__symbol, EventSupplyPeer } from '@proc7ts/fun-events';\nimport { ContextValueSlot } from '../context-key';\nimport { ContextRef } from '../context-ref';\nimport { SimpleContextKey } from '../simple-context-key';\n\n/**\n * Context values supply.\n *\n * When available as context value, it is used to indicate the context is no longer used (e.g. destroyed).\n *\n * A context value provider can destroy the value it provides when this supply is cut off.\n */\nexport type ContextSupply = EventSupply;\n\n/**\n * @internal\n */\nclass ContextSupplyKey extends SimpleContextKey<ContextSupply> {\n\n  constructor() {\n    super('context-supply');\n  }\n\n  grow(\n      slot: ContextValueSlot<ContextSupply, ContextSupply, SimpleContextKey.Seed<ContextSupply>>,\n  ): void {\n    slot.insert(\n        slot.seed()\n        || (slot.hasFallback ? slot.or : null)\n        || (slot.context as Partial<EventSupplyPeer>)[EventSupply__symbol],\n    );\n  }\n\n}\n\n/**\n * A key of context value containing a {@link ContextSupply context values supply}.\n *\n * It is not guaranteed to present.\n *\n * Predefined to the supply of the context if the latter implements `EventSupplyPeer` interface.\n */\nexport const ContextSupply: ContextRef<ContextSupply> = (/*#__PURE__*/ new ContextSupplyKey());\n","/**\n * @packageDocumentation\n * @module @proc7ts/context-values/updatable\n */\nimport { flatMapIt, mapIt, overArray } from '@proc7ts/a-iterable';\nimport { CallChain, nextArgs, NextCall } from '@proc7ts/call-thru';\nimport {\n  afterEach,\n  AfterEvent,\n  afterSupplied,\n  afterThe,\n  EventKeeper,\n  isEventKeeper,\n  nextAfterEvent,\n  trackValue,\n  ValueTracker,\n} from '@proc7ts/fun-events';\nimport { ContextKey, ContextKey__symbol, ContextSeedKey, ContextValueSlot } from '../context-key';\nimport { ContextRef } from '../context-ref';\nimport { ContextSeeder } from '../context-seeder';\nimport { ContextValueProvider } from '../context-value-spec';\nimport { ContextValues } from '../context-values';\nimport { ContextSupply } from './context-supply';\n\n/**\n * @internal\n */\nclass ContextUpSeeder<Ctx extends ContextValues, Src>\n    implements ContextSeeder<Ctx, Src | EventKeeper<Src[]>, AfterEvent<Src[]>> {\n\n  private readonly _providers: ValueTracker<ContextValueProvider<Ctx, Src | EventKeeper<Src[]>>[]> = trackValue([]);\n\n  provide(provider: ContextValueProvider<Ctx, Src | EventKeeper<Src[]>>): () => void {\n    this._providers.it = [...this._providers.it, provider];\n    return () => {\n\n      const providers = this._providers.it;\n      const found = providers.indexOf(provider);\n\n      if (found >= 0) {\n        this._providers.it = providers.slice(0, found).concat(providers.slice(found + 1));\n      }\n    };\n  }\n\n  seed(context: Ctx, initial: AfterEvent<Src[]> = afterThe<Src[]>()): AfterEvent<Src[]> {\n    return this.combine(initial, upSrcKeepers(context, this._providers));\n  }\n\n  isEmpty(): boolean {\n    return false;\n  }\n\n  combine(first: AfterEvent<Src[]>, second: AfterEvent<Src[]>): AfterEvent<Src[]> {\n    return afterEach(\n        first,\n        second,\n    ).keepThru(\n        flatUpSources,\n    );\n  }\n\n}\n\n/**\n * @internal\n */\nfunction upSrcKeepers<Ctx extends ContextValues, Src>(\n    context: Ctx,\n    providersTracker: ValueTracker<ContextValueProvider<Ctx, Src | EventKeeper<Src[]>>[]>,\n): AfterEvent<Src[]> {\n  return providersTracker.read().keepThru(\n      providers => !providers.length\n          ? nextArgs()\n          : nextAfterEvent(\n              afterEach(\n                  ...mapIt(\n                      mapIt(\n                          overArray(providers),\n                          prov => prov(context),\n                      ),\n                      toUpSrcKeeper,\n                  ),\n              ),\n          ),\n      flatUpSources,\n  );\n}\n\n/**\n * @internal\n */\nfunction toUpSrcKeeper<Src>(src: null | undefined | Src | EventKeeper<Src[]>): AfterEvent<Src[]> {\n  return src == null ? afterThe() : isUpSrcKeeper(src) ? afterSupplied(src) : afterThe(src);\n}\n\n/**\n * @internal\n */\nfunction isUpSrcKeeper<Src>(src: Src | EventKeeper<Src[]>): src is EventKeeper<Src[]> {\n  return (typeof src === 'object' || typeof src === 'function') && isEventKeeper(src as object);\n}\n\n/**\n * @internal\n */\nfunction flatUpSources<Src>(...sources: Src[][]): NextCall<CallChain, Src[]> {\n  return nextArgs<Src[]>(...flatMapIt<Src>(sources));\n}\n\n/**\n * @internal\n */\nclass ContextSeedUpKey<Src>\n    extends ContextSeedKey<Src | EventKeeper<Src[]>, AfterEvent<Src[]>>\n    implements ContextUpKey.SeedKey<Src> {\n\n  get upKey(): this {\n    return this;\n  }\n\n  seeder<Ctx extends ContextValues>(): ContextSeeder<Ctx, Src | EventKeeper<Src[]>, AfterEvent<Src[]>> {\n    return new ContextUpSeeder();\n  }\n\n}\n\n/**\n * Updatable context value reference.\n *\n * @typeparam Value  Context value type.\n * @typeparam Src  Source value type.\n */\nexport interface ContextUpRef<Value, Src> extends ContextRef<Value, Src | EventKeeper<Src[]>> {\n\n  readonly [ContextKey__symbol]: ContextUpKey<Value, Src>;\n\n}\n\n/**\n * @internal\n */\nclass ContextUpKeyUpKey<Value, Src>\n    extends ContextKey<ContextUpKey.Up<Value>, Src | EventKeeper<Src[]>, AfterEvent<Src[]>> {\n\n  readonly grow: (\n      slot: ContextValueSlot<ContextUpKey.Up<Value>, EventKeeper<Src[]> | Src, AfterEvent<Src[]>>,\n  ) => void;\n\n  get seedKey(): ContextSeedKey<Src | EventKeeper<Src[]>, AfterEvent<Src[]>> {\n    return this._key.seedKey;\n  }\n\n  constructor(\n      private readonly _key: ContextUpKey<Value, Src>,\n      grow: (\n          slot: ContextValueSlot<ContextUpKey.Up<Value>, EventKeeper<Src[]> | Src, AfterEvent<Src[]>>,\n      ) => void,\n  ) {\n    super(_key.name + ':up');\n    this.grow = slot => {\n\n      const value = slot.fillBy(grow);\n\n      if (value) {\n\n        const supply = slot.context.get(ContextSupply, { or: null });\n\n        if (supply) {\n          slot.insert(value.tillOff(supply) as ContextUpKey.Up<Value>);\n        }\n      }\n    };\n  }\n\n}\n\n/**\n * Abstract implementation of updatable context value key.\n *\n * Accepts single value sources and `EventKeeper`s of value source arrays.\n *\n * Collects value sources into `AfterEvent` keeper of source values.\n *\n * @typeparam Value  Context value type.\n * @typeparam Src  Source value type.\n */\nexport abstract class ContextUpKey<Value, Src>\n    extends ContextKey<Value, Src | EventKeeper<Src[]>, AfterEvent<Src[]>>\n    implements ContextUpRef<Value, Src> {\n\n  readonly seedKey: ContextUpKey.SeedKey<Src>;\n\n  /**\n   * A key of context value containing an {@link ContextUpKey.Up updates keeper} of this key value.\n   *\n   * It is expected to report any updates to this key's value.\n   *\n   * The value of updates key is constructed by [[grow]] function out of the same seed.\n   */\n  abstract readonly upKey: ContextUpKey.UpKey<Value, Src>;\n\n  /**\n   * Constructs simple context value key.\n   *\n   * @param name  Human-readable key name.\n   * @param seedKey  Value seed key. A new one will be constructed when omitted.\n   */\n  constructor(\n      name: string,\n      {\n        seedKey,\n      }: {\n        seedKey?: ContextUpKey.SeedKey<Src>;\n      } = {},\n  ) {\n    super(name);\n    this.seedKey = seedKey || new ContextSeedUpKey<Src>(this);\n  }\n\n  /**\n   * A key of context value containing an {@link ContextUpKey.Up updates keeper} of the value of this key.\n   *\n   * @param grow  A function that grows an updates keeper of context value out of its seed.\n   *\n   * @returns New updates keeper key.\n   */\n  protected createUpKey(\n      grow: (\n          slot: ContextValueSlot<ContextUpKey.Up<Value>, EventKeeper<Src[]> | Src, AfterEvent<Src[]>>,\n      ) => void,\n  ): ContextUpKey.UpKey<Value, Src> {\n    return new ContextUpKeyUpKey(this, grow);\n  }\n\n}\n\nexport namespace ContextUpKey {\n\n  /**\n   * A type of updates keeper of context value.\n   *\n   * It is the same as a type of original value if the value itself is an event keeper, or an `AfterEvent` keeper\n   * of original value otherwise.\n   *\n   * @typeparam Value  Original context value type.\n   */\n  export type Up<Value> = Value extends AfterEvent<any>\n      ? Value\n      : (Value extends EventKeeper<infer E>\n          ? AfterEvent<E>\n          : AfterEvent<[Value]>);\n\n  /**\n   * A key of context value containing an {@link ContextUpKey.Up updates keeper} of this key value.\n   *\n   * @typeparam Value  Context value type.\n   * @typeparam Src  Source value type.\n   */\n  export type UpKey<Value, Src> = ContextKey<ContextUpKey.Up<Value>, Src>;\n\n  /**\n   * Updatable context value seed key.\n   *\n   * @typeparam Src  Source value type.\n   */\n  export interface SeedKey<Src> extends ContextSeedKey<Src | EventKeeper<Src[]>, AfterEvent<Src[]>> {\n\n    /**\n     * A key of context value containing an {@link Up updates keeper} of the seed. Always equal to this key.\n     */\n    readonly upKey: this;\n\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/context-values/updatable\n */\nimport { AfterEvent, afterThe, EventKeeper, nextAfterEvent } from '@proc7ts/fun-events';\nimport { noop } from '@proc7ts/primitives';\nimport { ContextKeyDefault, ContextValueSlot } from '../context-key';\nimport { ContextKeyError } from '../context-key-error';\nimport { ContextValues } from '../context-values';\nimport { contextDestroyed } from './context-destroyed';\nimport { ContextUpKey, ContextUpRef } from './context-up-key';\n\n/**\n * A reference to updatable context function value.\n *\n * @typeparam Args  Function arguments tuple type.\n * @typeparam Ret  Function return value type.\n */\nexport type FnContextRef<Args extends any[], Ret = void> =\n    ContextUpRef<(this: void, ...args: Args) => Ret, (this: void, ...args: Args) => Ret>;\n\n/**\n * A key of updatable context function value.\n *\n * The value associated with this key is a function that delegates to the last provided function. The target function\n * may be updated.\n *\n * The value is always present. But if the function to delegate is not provided, and no default/fallback function\n * provided, an attempt to call the delegate would throw an [[ContextKeyError]].\n *\n * It is an error to provide a `null` or `undefined` {@link ContextRequest.Opts.or fallback value} when requesting\n * an associated value. Use an `afterThe()` result as a fallback instead.\n *\n * @typeparam Args  Function arguments tuple type.\n * @typeparam Ret  Function return value type.\n */\nexport class FnContextKey<Args extends any[], Ret = void>\n    extends ContextUpKey<(this: void, ...args: Args) => Ret, (this: void, ...args: Args) => Ret>\n    implements FnContextRef<Args, Ret> {\n\n  /**\n   * Constructs a function that will be called unless fallback provided.\n   */\n  readonly byDefault: (this: void, context: ContextValues, key: FnContextKey<Args, Ret>) =>\n      (this: void, ...args: Args) => Ret;\n\n  readonly upKey: ContextUpKey.UpKey<(this: void, ...args: Args) => Ret, (this: void, ...args: Args) => Ret>;\n\n  /**\n   * Constructs updatable context function key.\n   *\n   * @param name  Human-readable key name.\n   * @param seedKey  Value seed key. A new one will be constructed when omitted.\n   * @param byDefault  Constructs a default function to call. If unspecified then the default function would raise\n   * an error.\n   */\n  constructor(\n      name: string,\n      {\n        seedKey,\n        byDefault = noop,\n      }: {\n        seedKey?: ContextUpKey.SeedKey<((this: void, ...args: Args) => Ret)>;\n        byDefault?: ContextKeyDefault<(this: void, ...args: Args) => Ret, FnContextKey<Args, Ret>>;\n      } = {},\n  ) {\n    super(name, seedKey);\n    this.byDefault = (context, key) => byDefault(context, key) || (() => { throw new ContextKeyError(this); });\n    this.upKey = this.createUpKey(\n        slot => {\n          slot.insert(slot.seed.keepThru(\n              (...fns) => {\n                if (fns.length) {\n                  return fns[fns.length - 1];\n                }\n\n                if (slot.hasFallback && slot.or) {\n                  return nextAfterEvent(slot.or);\n                }\n\n                return nextAfterEvent(afterThe(this.byDefault(slot.context, this)));\n              },\n          ));\n        },\n    );\n  }\n\n  grow(\n      slot: ContextValueSlot<\n          (this: void, ...args: Args) => Ret,\n          EventKeeper<((this: void, ...args: Args) => Ret)[]> | ((this: void, ...args: Args) => Ret),\n          AfterEvent<((this: void, ...args: Args) => Ret)[]>>,\n  ): void {\n\n    let delegated: (this: void, ...args: Args) => Ret;\n\n    slot.context.get(\n        this.upKey,\n        slot.hasFallback ? { or: slot.or != null ? afterThe(slot.or) : slot.or } : undefined,\n    )!.to(\n        fn => delegated = fn,\n    ).whenOff(\n        reason => delegated = contextDestroyed(reason),\n    );\n\n    slot.insert((...args) => delegated(...args));\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/context-values/updatable\n */\nimport { nextArg } from '@proc7ts/call-thru';\nimport { AfterEvent, afterEventBy, afterThe, EventKeeper, nextAfterEvent } from '@proc7ts/fun-events';\nimport { noop } from '@proc7ts/primitives';\nimport { ContextKeyDefault, ContextValueSlot } from '../context-key';\nimport { ContextKeyError } from '../context-key-error';\nimport { ContextSupply } from './context-supply';\nimport { ContextUpKey, ContextUpRef } from './context-up-key';\n\n/**\n * Single updatable context value reference.\n *\n * @typeparam Value  Context value type.\n */\nexport type SingleContextUpRef<Value> = ContextUpRef<AfterEvent<[Value]>, Value>;\n\n/**\n * Single updatable context value key.\n *\n * The associated value is an `AfterEvent` keeper of the last source value. It is always present,\n * but signals an [[ContextKeyError]] error on attempt to receive an absent value.\n *\n * It is an error to provide a `null` or `undefined` {@link ContextRequest.Opts.or fallback value} when requesting\n * an associated value. Use an `afterThe()` result as a fallback instead.\n *\n * @typeparam Value  Context value type.\n */\nexport class SingleContextUpKey<Value>\n    extends ContextUpKey<AfterEvent<[Value]>, Value>\n    implements SingleContextUpRef<Value> {\n\n  /**\n   * A provider of context value used when there is no value associated with this key.\n   */\n  readonly byDefault: ContextKeyDefault<Value, ContextUpKey<AfterEvent<[Value]>, Value>>;\n\n  get upKey(): this {\n    return this;\n  }\n\n  /**\n   * Constructs single updatable context value key.\n   *\n   * @param name  Human-readable key name.\n   * @param seedKey  Value seed key. A new one will be constructed when omitted.\n   * @param byDefault  Optional default value provider. If unspecified or `undefined` the key has no default\n   * value.\n   */\n  constructor(\n      name: string,\n      {\n        seedKey,\n        byDefault = noop,\n      }: {\n        seedKey?: ContextUpKey.SeedKey<Value>;\n        byDefault?: ContextKeyDefault<Value, ContextUpKey<AfterEvent<[Value]>, Value>>;\n      } = {},\n  ) {\n    super(name, seedKey);\n    this.byDefault = byDefault;\n  }\n\n  grow(\n      slot: ContextValueSlot<AfterEvent<[Value]>, EventKeeper<Value[]> | Value, AfterEvent<Value[]>>,\n  ): void {\n\n    const value = slot.seed.keepThru((...sources: Value[]) => {\n      if (sources.length) {\n        // Sources present. Take the last one.\n        return nextArg(sources[sources.length - 1]);\n      }\n\n      // Sources absent. Attempt to detect a backup value.\n      let backup: AfterEvent<[Value]> | null | undefined;\n\n      if (slot.hasFallback) {\n        backup = slot.or;\n      } else {\n\n        const defaultValue = this.byDefault(slot.context, this);\n\n        backup = defaultValue && afterThe(defaultValue);\n      }\n      if (backup != null) {\n        return nextAfterEvent(backup); // Backup value found.\n      }\n\n      // Backup value is absent. Construct an error response.\n      return nextAfterEvent(afterEventBy<[Value]>(() => {\n        throw new ContextKeyError(this);\n      }));\n    });\n\n    const supply = slot.context.get(ContextSupply, { or: null });\n\n    slot.insert(supply ? value.tillOff(supply) : value);\n  }\n\n}\n\n","/**\n * @packageDocumentation\n * @module @proc7ts/render-scheduler\n */\nimport { RenderShot } from './render-shot';\n\n/**\n * Render schedule signature.\n *\n * This function accepts a {@link RenderShot render shot} to schedule. All scheduled render shots are meant to update\n * the same rendering target. If multiple render shots scheduled before execution starts, only the last one will be\n * executed to limit rendering rate.\n *\n * The render shot execution may fail. This should not prevent other scheduled or postponed render shots from being\n * executed. The render shot execution failure reason is expected to be reported with [[RenderScheduleConfig.error]]\n * method.\n *\n * Render schedules are constructed by {@link RenderScheduler render schedulers}, or by [[newRenderSchedule]] function\n * that uses the {@link setRenderScheduler default scheduler} for that.\n */\nexport type RenderSchedule =\n/**\n * @param shot  A render shot to schedule.\n */\n    (this: void, shot: RenderShot) => void;\n\n/**\n * Options for render schedule.\n *\n * This is passed to {@link RenderScheduler render scheduler} when constructing new {@link RenderSchedule schedule}.\n *\n * A {@link RenderScheduleConfig render configuration} can be constructed based on the options with\n * [[RenderScheduleConfig.by]] function.\n */\nexport interface RenderScheduleOptions {\n\n  /**\n   * A window for constructed schedule.\n   *\n   * Detected by [[nodeWindow]] by default, if [[node]] is specified. Falls back to current `window`.\n   *\n   * The schedulers that don't need a window never access this option value.\n   */\n  window?: Window;\n\n  /**\n   * A DOM node for constructed schedule.\n   *\n   * Used to detect missing [[window]] option.\n   */\n  node?: Node;\n\n  /**\n   * Reports an error. E.g. a render shot execution failure.\n   *\n   * Reports errors with `console.error()` by default.\n   *\n   * @param messages  Error messages to report.\n   */\n  error?(...messages: any[]): void;\n\n}\n\n/**\n * Render schedule configuration.\n *\n * This is based on {@link RenderScheduleOptions render options}, but has all properties present.\n *\n * The configuration ought to be constructed out of render options by [[RenderScheduleConfig.by]] function.\n */\nexport interface RenderScheduleConfig {\n\n  /**\n   * A window the schedule is constructed for.\n   *\n   * The schedulers that don't need a window should never access this option value.\n   */\n  window: Window;\n\n  /**\n   * A DOM node the schedule is constructed for.\n   */\n  node?: Node;\n\n  /**\n   * Reports an error. E.g. a render shot execution failure.\n   *\n   * @param messages  Error messages to report.\n   */\n  error(...messages: any[]): void;\n\n}\n\nexport const RenderScheduleConfig = {\n\n  /**\n   * Constructs a configuration of render scheduler by its options.\n   *\n   * @param options  Render scheduler options the configuration should be base on.\n   */\n  by(this: void, options: RenderScheduleOptions = {}): RenderScheduleConfig {\n\n    let win: Window | undefined;\n\n    return {\n      get node(): Node | undefined {\n        return options.node;\n      },\n      get window(): Window {\n        return win || (win = options.window || (options.node && nodeWindow(options.node)) || window);\n      },\n      error(...messages: any[]): void {\n        if (options && options.error) {\n          options.error(...messages);\n        } else {\n          console.error(...messages);\n        }\n      },\n    };\n  },\n\n};\n\n/**\n * Detects a window the given DOM node is attached to.\n *\n * @param node  Target DOM node.\n *\n * @returns A window of the owner document, or `null` if absent.\n */\nexport function nodeWindow(node: Node): Window | null {\n\n  const document = node.ownerDocument || node as Document;\n\n  return document.defaultView;\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/render-scheduler\n */\nimport { RenderQueue } from './render-queue';\nimport { RenderSchedule, RenderScheduleConfig, RenderScheduleOptions } from './render-schedule';\nimport { RenderScheduler } from './render-scheduler';\nimport { RenderExecution, RenderShot } from './render-shot';\n\n/**\n * Custom render scheduler options.\n *\n * This is passed to [[customRenderScheduler]] function to construct new custom scheduler.\n */\nexport interface CustomRenderSchedulerOptions {\n\n  /**\n   * Obtains a queue for render schedule.\n   *\n   * This is called once per render schedule.\n   *\n   * Render schedules may share the queue.\n   *\n   * @param config  Render schedule configuration.\n   *\n   * @returns  A queue of scheduled render shots.\n   */\n  newQueue(config: RenderScheduleConfig): RenderQueue;\n\n}\n\n/**\n * @internal\n */\nconst RenderQ__symbol = Symbol('render-q');\n\n/**\n * @internal\n */\ninterface InternalRenderQueue extends RenderQueue {\n  [RenderQ__symbol]?: RenderQ;\n}\n\n/**\n * @internal\n */\nclass RenderQ {\n\n  readonly ref: [RenderQ, RenderQ];\n  schedule: (this: RenderQ, config: RenderScheduleConfig) => void;\n  private scheduled?: RenderScheduleConfig;\n\n  static by(queue: InternalRenderQueue, ref?: [RenderQ, RenderQ]): RenderQ {\n    return queue[RenderQ__symbol]\n        || (queue[RenderQ__symbol] = new RenderQ(queue, ref));\n  }\n\n  private constructor(private readonly q: RenderQueue, ref?: [RenderQ, RenderQ]) {\n    this.schedule = this.doSchedule;\n    this.ref = ref || [this, this];\n  }\n\n  add(shot: RenderShot): void {\n    this.q.add(shot);\n  }\n\n  private doSchedule(config: RenderScheduleConfig): void {\n    this.schedule = () => {/* do not schedule */};\n\n    const postponed: RenderShot[] = [];\n    const execution: RenderExecution = {\n      get config() {\n        return config;\n      },\n      postpone(shot) {\n        postponed.unshift(shot);\n      },\n    };\n\n    this.q.schedule(() => {\n\n      const next = this.reset();\n\n      next.suspend();\n      this.exec(execution);\n      // Activate next queue\n      this.ref[1] = this.ref[0];\n      // Schedule postponed shots (in reverse order)\n      postponed.forEach(shot => this.q.add(shot));\n      // Recurrently postponed shots are executed immediately after their initiators\n      execution.postpone = shot => this.q.post(shot);\n      this.exec(execution);\n      next.resume();\n    });\n  }\n\n  private exec(execution: RenderExecution): void {\n    for (; ;) {\n\n      const shot = this.q.pull();\n\n      if (!shot) {\n        break;\n      }\n      shot(execution);\n    }\n  }\n\n  private reset(): RenderQ {\n    // Update next queue. Current queue remains active\n    return this.ref[0] = RenderQ.by(this.q.reset(), this.ref);\n  }\n\n  private suspend(): void {\n    this.schedule = config => {\n      this.scheduled = config;\n      this.schedule = () => {/* do not schedule */};\n    };\n  }\n\n  private resume(): void {\n    if (this.scheduled) {\n      this.doSchedule(this.scheduled);\n    } else {\n      this.schedule = this.doSchedule;\n    }\n  }\n\n}\n\n/**\n * Builds custom render scheduler.\n *\n * @param options  Render scheduler options.\n *\n * @returns New render scheduler.\n */\nexport function customRenderScheduler(\n    options: CustomRenderSchedulerOptions,\n): RenderScheduler {\n  return (scheduleOptions?: RenderScheduleOptions): RenderSchedule => {\n\n    const config = RenderScheduleConfig.by(scheduleOptions);\n    const queueRef: readonly [RenderQ, RenderQ] = RenderQ.by(options.newQueue(config)).ref;\n    let enqueued: [RenderQ, RenderShot, true?] | [] = [];\n\n    return (shot: RenderShot): void => {\n\n      const [lastQueue,, executed] = enqueued;\n      const [nextQueue, activeQueue] = queueRef;\n      let queue = lastQueue || activeQueue;\n\n      if (lastQueue === activeQueue && !executed || lastQueue === nextQueue) {\n        enqueued[1] = shot;\n      } else {\n\n        // Add to active queue initially, unless a shot executed in it already.\n        // Add to the next queue otherwise.\n        const nextEnqueued: [RenderQ, RenderShot, true?] = enqueued = [\n          queue = executed ? nextQueue : activeQueue,\n          shot,\n        ];\n\n        queue.add((execution: RenderExecution) => {\n          nextEnqueued[2] = true; // Switch to next queue\n          try {\n            nextEnqueued[1]({\n              get config() {\n                return config;\n              },\n              postpone(postponed) {\n                execution.postpone(postponed);\n              },\n            });\n          } catch (e) {\n            config.error(e);\n          }\n        });\n      }\n\n      queue.schedule(config);\n    };\n  };\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/render-scheduler\n */\nimport { RenderShot } from './render-shot';\n\n/**\n * A queue of scheduled render shots.\n *\n * Utilized by render scheduler in order to collect render shots and schedule their execution.\n *\n * The default implementation may be constructed using [[RenderQueue.by]] function.\n */\nexport interface RenderQueue {\n\n  /**\n   * Adds a render shot to this queue.\n   *\n   * @param shot  Scheduled render shot to add.\n   */\n  add(shot: RenderShot): void;\n\n  /**\n   * Adds a render shot to the head of this queue.\n   *\n   * @param shot  Scheduled render shot to add.\n   */\n  post(shot: RenderShot): void;\n\n  /**\n   * Retrieves the first added render shot and removes it from the queue.\n   *\n   * @returns  Either pulled out render shot, or `undefined` when there is no more render shots.\n   */\n  pull(): RenderShot | undefined;\n\n  /**\n   * Schedules queued render shots execution.\n   *\n   * @param task  A function that performs render shots execution task.\n   */\n  schedule(task: (this: void) => void): void;\n\n  /**\n   * Resets the queue for the next execution.\n   *\n   * @returns  Another (empty) queue that will collect scheduled render shots from now on.\n   */\n  reset(): RenderQueue;\n\n}\n\nexport const RenderQueue = {\n\n  /**\n   * Builds the default implementation of render queue.\n   *\n   * @param schedule  Schedules queued render shots execution. This is an implementation of [[RenderQueue.schedule]]\n   * method.\n   * @param replace  Called right after [[RenderQueue.reset]] method in order to inform on the queue that will collect\n   * scheduled render shots from now.\n   *\n   * @returns New render queue.\n   */\n  by(\n      this: void,\n      {\n        schedule,\n        replace = (): void => {/* do not replace */},\n      }: {\n        schedule(this: RenderQueue, task: (this: void) => void): void;\n        replace?(this: void, replacement: RenderQueue): void;\n      },\n  ): RenderQueue {\n\n    const shots: RenderShot[] = [];\n\n    return {\n      schedule,\n      add(shot: RenderShot): void {\n        shots.push(shot);\n      },\n      post(shot: RenderShot): void {\n        shots.unshift(shot);\n      },\n      pull(): RenderShot | undefined {\n        return shots.shift();\n      },\n      reset(): RenderQueue {\n\n        const next = RenderQueue.by({ schedule, replace });\n\n        replace(next);\n\n        return next;\n      },\n    };\n  },\n\n};\n","/**\n * @packageDocumentation\n * @module @proc7ts/render-scheduler\n */\nimport { customRenderScheduler } from './custom-render-scheduler';\nimport { RenderQueue } from './render-queue';\nimport { RenderScheduler } from './render-scheduler';\n\n/**\n * @internal\n */\nconst animationRenderQueues = (/*#__PURE__*/ new WeakMap<Window, RenderQueue>());\n\n/**\n * A render scheduler that executes scheduled render shots within animation frame.\n *\n * Utilizes [requestAnimationFrame()] function for that.\n *\n * The render shots scheduled by different schedules created for the same window are all executed in the same animation\n * frame. The {@link RenderExecution.postpone postponed} render shots are executed only after all scheduled ones\n * complete.\n *\n * [requestAnimationFrame()]: https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame\n */\nexport const animationRenderScheduler: RenderScheduler = (/*#__PURE__*/ customRenderScheduler({\n  newQueue({ window }) {\n\n    const existing = animationRenderQueues.get(window);\n\n    if (existing) {\n      return existing;\n    }\n\n    const newQueue = RenderQueue.by({\n      schedule: task => window.requestAnimationFrame(task),\n      replace: replacement => animationRenderQueues.set(window, replacement),\n    });\n\n    animationRenderQueues.set(window, newQueue);\n\n    return newQueue;\n  },\n}));\n","import { RenderSchedule, RenderScheduleConfig, RenderScheduleOptions } from './render-schedule';\nimport { RenderScheduler } from './render-scheduler';\nimport { RenderExecution, RenderShot } from './render-shot';\n\n/**\n * Render scheduler that executes render shots immediately.\n *\n * @param options\n */\nexport const immediateRenderScheduler: RenderScheduler = (options?: RenderScheduleOptions): RenderSchedule => {\n\n  const config = RenderScheduleConfig.by(options);\n\n  return (shot: RenderShot): void => {\n\n    const postponed: RenderShot[] = [];\n    const execution: RenderExecution = {\n      get config() {\n        return config;\n      },\n      postpone(shot) {\n        postponed.push(shot);\n      },\n    };\n\n    execute(shot);\n    for (; ;) {\n\n      const last = postponed.pop();\n\n      if (!last) {\n        break;\n      }\n\n      execute(last);\n    }\n\n    function execute(shot: RenderShot): void {\n      try {\n        shot(execution);\n      } catch (e) {\n        config.error(e);\n      }\n    }\n  };\n};\n","/**\n * @packageDocumentation\n * @module @proc7ts/render-scheduler\n */\nimport { animationRenderScheduler } from './animation-render-scheduler';\nimport { RenderSchedule, RenderScheduleOptions } from './render-schedule';\n\n/**\n * Render scheduler signature.\n *\n * This function constructs a {@link RenderSchedule render schedule} according to the given options.\n *\n * The default render scheduler is always available as [[newRenderSchedule]] function.\n *\n * There are several scheduler implementations exist:\n * - [[animationRenderScheduler]] (used by default),\n * - [[asyncRenderScheduler]],\n * - [[immediateRenderScheduler]],\n * - [[ManualRenderScheduler]],\n * - [[noopRenderScheduler]].\n *\n * Custom scheduler implementations could be created using [[customRenderScheduler]] function.\n */\nexport type RenderScheduler =\n/**\n * @param options  Options of constructed render schedule.\n *\n * @returns New render schedule.\n */\n    (this: void, options?: RenderScheduleOptions) => RenderSchedule;\n\n/**\n * @internal\n */\nlet defaultRenderScheduler = animationRenderScheduler;\n\n/**\n * Assigns or resets the default render scheduler.\n *\n * An {@link animationRenderScheduler animation frame render scheduler} is used bu default.\n *\n * @param scheduler  New default render scheduler. {@link animationRenderScheduler animation frame render scheduler}\n * will be used if `null`, `undefined`, or omitted.\n *\n * @returns New default render scheduler.\n */\nexport function setRenderScheduler(\n    scheduler?: RenderScheduler | null,\n): RenderScheduler {\n  return defaultRenderScheduler = scheduler || animationRenderScheduler;\n}\n\n/**\n * Constructs {@link RenderSchedule render schedule} using {@link setRenderScheduler default render scheduler}.\n *\n * @param options  Options of constructed render schedule.\n *\n * @returns New render schedule.\n */\nexport function newRenderSchedule(options?: RenderScheduleOptions): RenderSchedule {\n  return defaultRenderScheduler(options);\n}\n","import { SingleContextKey } from '@proc7ts/context-values';\nimport { BootstrapContext } from './bootstrap-context';\n\n/**\n * @internal\n */\nexport const BootstrapContext__key = (/*#__PURE__*/ new SingleContextKey<BootstrapContext>('bootstrap-context'));\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKey__symbol, ContextValues } from '@proc7ts/context-values';\nimport { EventReceiver, EventSupply, OnEvent } from '@proc7ts/fun-events';\nimport { Class } from '@proc7ts/primitives';\nimport { ComponentClass, DefinitionContext } from '../component/definition';\nimport { FeatureRef } from '../feature';\nimport { BootstrapContext__key } from './bootstrap-context.key.impl';\n\n/**\n * Components bootstrap context.\n *\n * An instance of this class is passed to [[FeatureDef.Options.init]] method so that the feature can configure itself.\n *\n * Extends `BootstrapValues` interface. The values could be {@link BootstrapSetup.provide pre-configured} in feature\n * definitions.\n *\n * @category Core\n */\nexport abstract class BootstrapContext extends ContextValues {\n\n  /**\n   * A key of bootstrap context value containing the bootstrap context itself.\n   */\n  static get [ContextKey__symbol](): ContextKey<BootstrapContext> {\n    return BootstrapContext__key;\n  }\n\n  /**\n   * Builds an `OnEvent` sender of bootstrap readiness event.\n   *\n   * The registered receiver will be notified once bootstrap is complete.\n   *\n   * If bootstrap is complete already, the receiver will be notified immediately.\n   *\n   * @returns `OnEvent` sender of ready bootstrap context.\n   */\n  abstract whenReady(): OnEvent<[BootstrapContext]>;\n\n  /**\n   * Registers a `receiver` of bootstrap readiness event.\n   *\n   * The registered receiver will be notified once bootstrap is complete.\n   *\n   * If bootstrap is complete already, the receiver will be notified immediately.\n   *\n   * @param receiver  Target receiver of reay bootstrap context.\n   *\n   * @returns Bootstrap readiness event supply.\n   */\n  abstract whenReady(receiver: EventReceiver<[BootstrapContext]>): EventSupply;\n\n  /**\n   * Allows to wait for component definition.\n   *\n   * This corresponds to `window.customElements.whenDefined()` method.\n   *\n   * @param componentType  Component class constructor.\n   *\n   * @return An `OnEvent` sender of definition context sent when the given `componentType` is registered.\n   */\n  abstract whenDefined<C extends object>(componentType: ComponentClass<C>): OnEvent<[DefinitionContext<C>]>;\n\n  /**\n   * Allows to loads the given `feature`.\n   *\n   * @param feature  The feature to load.\n   *\n   * @returns  Loaded feature reference.\n   */\n  abstract load(feature: Class): FeatureRef;\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKeyDefault } from '@proc7ts/context-values';\nimport { BootstrapContext } from './bootstrap-context';\n\n/**\n * Provides a default value for bootstrap context key.\n *\n * @category Core\n * @param provide  A function accepting bootstrap context and target key as parameters, and returning either a default\n * value, or `null`/`undefined` if unknown.\n *\n * @returns A provider of default value for bootstrap context value key.\n */\nexport function bootstrapDefault<Value, Key extends ContextKey<any, any, any>>(\n    provide: (this: void, context: BootstrapContext, key: Key) => Value | null | undefined,\n): ContextKeyDefault<Value, Key> {\n  return (context, key): Value | null | undefined => {\n\n    const bootstrapContext = context.get(BootstrapContext);\n\n    return context === bootstrapContext\n        ? provide(bootstrapContext, key)\n        : bootstrapContext.get(key) as Value;\n  };\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport {\n  Class,\n  fieldAccessorDescriptor,\n  PropertyAccessorDescriptor,\n  toPropertyAccessorDescriptor,\n} from '@proc7ts/primitives';\n\n/**\n * Typed class decorator.\n *\n * @category Utility\n * @typeparam T  A type of class to decorate.\n */\nexport type TypedClassDecorator<T extends Class> = (type: T) => T | void;\n\n/**\n * Typed property decorator.\n *\n * @category Utility\n * @typeparam T  A type of class the decorated property belongs to.\n */\nexport type TypedPropertyDecorator<T extends Class> =\n    <V>(target: InstanceType<T>, propertyKey: string | symbol, descriptor?: TypedPropertyDescriptor<V>) => any | void;\n\n/**\n * Property decorator helper converting a field or property to the one with accessor (`get` and optionally `set`).\n *\n * @category Utility\n * @typeparam T  A type of target object.\n * @typeparam V  A property value type.\n * @param target  Target object containing the property.\n * @param propertyKey  Target property key.\n * @param desc  Target property descriptor, or `undefined` for object fields.\n * @param updateDescriptor  Descriptor updater. Accepts the accessor descriptor as the only argument. If returns\n * a descriptor, then it is applied to the property. Otherwise the target property descriptor is never updated.\n *\n * @returns Updated property descriptor to return from decorator to apply to the property, or `undefined` if there is\n * nothing to update.\n */\nexport function decoratePropertyAccessor<T, V>(\n    target: T,\n    propertyKey: string | symbol,\n    desc: TypedPropertyDescriptor<V> | undefined,\n    updateDescriptor: (desc: PropertyAccessorDescriptor<V>) => PropertyAccessorDescriptor<V>,\n): PropertyAccessorDescriptor<V> | undefined {\n\n  const isField = !desc;\n  const accessorDesc = desc\n      ? toPropertyAccessorDescriptor(desc)\n      : fieldAccessorDescriptor(target, propertyKey as keyof T) as unknown as PropertyAccessorDescriptor<V>;\n  const updatedDesc = updateDescriptor(accessorDesc);\n\n  if (isField && updatedDesc) {\n    Object.defineProperty(target, propertyKey, updatedDesc);\n    return;\n  }\n\n  return updatedDesc;\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/primitives\n */\n/**\n * Property accessor descriptor. I.e. the one with `get` and `set` functions.\n *\n * @typeparam TValue  Property value type.\n */\nexport interface PropertyAccessorDescriptor<V> extends TypedPropertyDescriptor<V> {\n  enumerable?: boolean;\n  configurable?: boolean;\n  writable?: undefined;\n  value?: undefined;\n  get?: () => V;\n  set?: (value: V) => void;\n}\n\n/**\n * Detects whether the given property descriptor is the one of property accessor.\n *\n * @typeparam V  Property value type.\n * @param desc  Target property descriptor.\n *\n * @return `true` if the descriptor has no `value` or `writable` attributes set.\n */\nexport function isPropertyAccessorDescriptor<V>(\n    desc: TypedPropertyDescriptor<V>,\n): desc is PropertyAccessorDescriptor<V> {\n  return desc.value === undefined && desc.writable === undefined;\n}\n\n/**\n * Converts a property descriptor to property accessor descriptor.\n *\n * @typeparam V  Property value type.\n * @param desc  Target property descriptor.\n *\n * @return Either an accessor descriptor constructed from data descriptor, or `desc` if it is an accessor descriptor\n * already.\n */\nexport function toPropertyAccessorDescriptor<V>(\n    desc: TypedPropertyDescriptor<V>,\n): PropertyAccessorDescriptor<V> {\n  if (isPropertyAccessorDescriptor(desc)) {\n    return desc;\n  }\n\n  const value__symbol = Symbol('value');\n\n  interface ValueHost {\n    [value__symbol]: V;\n  }\n\n  const initial = desc.value as V;\n\n  const accessorDesc: PropertyAccessorDescriptor<V> = {\n    ...desc,\n    writable: undefined,\n    value: undefined,\n    get(this: ValueHost) {\n      return value__symbol in this ? this[value__symbol] : initial;\n    },\n  };\n\n  if (desc.writable) {\n    accessorDesc.set = function (this: ValueHost, newValue: V) {\n      this[value__symbol] = newValue;\n    };\n  }\n\n  delete accessorDesc.writable;\n  delete accessorDesc.value;\n\n  return accessorDesc;\n}\n\n/**\n * Creates an property accessor descriptor for the given field.\n *\n * @typeparam T  The type of target object.\n * @typeparam K  Target object property keys type.\n * @param target  The object containing target field.\n * @param fieldKey  Target field key.\n */\nexport function fieldAccessorDescriptor<T, K extends keyof T>(\n    target: T,\n    fieldKey: K,\n): PropertyAccessorDescriptor<T[K]> {\n\n  const value__symbol = Symbol(`${String(fieldKey)}:value`);\n\n  interface ValueHost {\n    [value__symbol]: T[K];\n  }\n\n  const initial: T[K] = target[fieldKey];\n\n  return {\n    configurable: true,\n    enumerable: true,\n    get(this: ValueHost): T[K] {\n      return value__symbol in this ? this[value__symbol] : initial;\n    },\n    set(this: ValueHost, newValue) {\n      this[value__symbol] = newValue;\n    },\n  };\n}\n\n/**\n * Converts an object field to property accessor.\n *\n * Defines a new property with the given name in the target object and returns its descriptor.\n *\n * The converted descriptor is always configurable, enumerable, and writable.\n *\n * @typeparam T  The type of target object.\n * @typeparam K  Target object property keys type.\n * @param target  The object containing target field.\n * @param fieldKey  Target field key.\n *\n * @return New property accessor descriptor.\n */\nexport function field2accessor<T, K extends keyof T>(\n    target: T,\n    fieldKey: K,\n): PropertyAccessorDescriptor<T[K]> {\n\n  const desc = fieldAccessorDescriptor(target, fieldKey);\n\n  Object.defineProperty(target, fieldKey, desc);\n\n  return desc;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\n/**\n * Checks whether the given DOM node is element.\n *\n * @category Utility\n * @param node  A DOM node to check.\n *\n * @returns `true` is `node` is element, or `false` otherwise.\n */\nexport function isElement(node: Node): node is Element {\n  return node.nodeType === Node.ELEMENT_NODE;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { flatMapIt, mapIt } from '@proc7ts/a-iterable';\nimport { Class, superClassOf } from '@proc7ts/primitives';\n\n/**\n * @category Utility\n */\nexport abstract class MetaAccessor<M, S = M> {\n\n  readonly symbol: symbol;\n\n  protected constructor(symbol: symbol) {\n    this.symbol = symbol;\n  }\n\n  own(type: Class): M | undefined {\n    // eslint-disable-next-line no-prototype-builtins\n    return type.hasOwnProperty(this.symbol) ? (type as any)[this.symbol] as M : undefined;\n  }\n\n  of(type: Class): M | undefined {\n\n    const ownDef: M | undefined = this.own(type);\n    const superType = superClassOf(type);\n    const superDef = superType && this.of(superType);\n\n    return ownDef ? (superDef ? this.merge([superDef, ownDef]) : ownDef) : superDef;\n  }\n\n  define<C extends Class>(type: C, sources: Iterable<S>): C {\n\n    const prevMeta = this.own(type);\n    const updates = mapIt(sources, source => this.meta(source, type));\n    const newMeta: M = this.merge(prevMeta ? flatMapIt([[prevMeta], updates]) : updates);\n\n    Object.defineProperty(\n        type,\n        this.symbol,\n        {\n          configurable: true,\n          value: newMeta,\n        },\n    );\n\n    return type;\n  }\n\n  abstract merge(metas: Iterable<M>): M;\n\n  protected abstract meta(source: S, type: Class): M;\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\n/**\n * @category Utility\n */\nexport class PromiseResolver<T = void> {\n\n  readonly promise: Promise<T>;\n  private _resolve!: (value: T) => void;\n  private _reject!: (error: any) => void;\n\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n    });\n  }\n\n  resolve(value: T): void {\n    this._resolve(value);\n  }\n\n  reject(error: any): void {\n    this._reject(error);\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { itsReduction } from '@proc7ts/a-iterable';\nimport { Class, elementOrArray, extendSetOfElements, mergeFunctions, setOfElements } from '@proc7ts/primitives';\nimport { BootstrapSetup } from '../boot';\nimport { MetaAccessor } from '../common';\nimport { FeatureContext } from './feature-context';\n\n/**\n * A key of a property holding a feature definition within its class constructor.\n *\n * @category Core\n */\nexport const FeatureDef__symbol = (/*#__PURE__*/ Symbol('feature-def'));\n\n/**\n * Feature definition.\n *\n * This can be one of:\n * - feature definition options object,\n * - feature definition holder, or\n * - feature definition factory.\n *\n * @category Core\n */\nexport type FeatureDef =\n    | FeatureDef.Options\n    | FeatureDef.Holder\n    | FeatureDef.Factory;\n\nexport namespace FeatureDef {\n\n  /**\n   * Feature definition options.\n   */\n  export interface Options {\n\n    readonly [FeatureDef__symbol]?: undefined;\n\n    /**\n     * Features this one requires.\n     */\n    readonly needs?: Class | readonly Class[];\n\n    /**\n     * Features this one provides.\n     *\n     * The feature always provides itself.\n     */\n    readonly has?: Class | readonly Class[];\n\n    /**\n     * Sets up bootstrap.\n     *\n     * This method is called before bootstrap context created.\n     *\n     * @param setup  Bootstrap setup.\n     */\n    setup?(setup: BootstrapSetup): void;\n\n    /**\n     * Bootstraps this feature by calling the given bootstrap context constructed.\n     *\n     * @param context  Feature initialization context.\n     */\n    init?(context: FeatureContext): void;\n\n  }\n\n  /**\n   * Feature definition holder.\n   */\n  export interface Holder {\n\n    /**\n     * The feature definition this holder contains.\n     */\n    readonly [FeatureDef__symbol]: FeatureDef;\n\n  }\n\n  /**\n   * Feature definition factory.\n   */\n  export interface Factory {\n\n    /**\n     * Builds feature definition.\n     *\n     * @param featureType  A feature class constructor to build definition for.\n     *\n     * @returns Built feature definition.\n     */\n    [FeatureDef__symbol](featureType: Class): FeatureDef;\n\n  }\n\n}\n\n/**\n * @internal\n */\nclass FeatureMeta extends MetaAccessor<FeatureDef.Options, FeatureDef> {\n\n  constructor() {\n    super(FeatureDef__symbol);\n  }\n\n  merge(defs: Iterable<FeatureDef.Options>): FeatureDef.Options {\n    return itsReduction<FeatureDef.Options, FeatureDef.Options>(\n        defs,\n        (prev, def) => ({\n          needs: elementOrArray(extendSetOfElements(setOfElements(prev.needs), def.needs)),\n          has: elementOrArray(extendSetOfElements(setOfElements(prev.has), def.has)),\n          setup: mergeFunctions<[BootstrapSetup], void, Class>(prev.setup, def.setup),\n          init: mergeFunctions<[FeatureContext], void, Class>(prev.init, def.init),\n        }),\n        {},\n    );\n  }\n\n  meta(source: FeatureDef, type: Class): FeatureDef.Options {\n\n    const def = source[FeatureDef__symbol];\n\n    return def == null\n        ? source as FeatureDef.Options\n        : this.meta(\n            typeof def === 'function' ? (source as FeatureDef.Factory)[FeatureDef__symbol](type) : def,\n            type,\n        );\n  }\n\n}\n\n/**\n * @internal\n */\nconst featureMeta = (/*#__PURE__*/ new FeatureMeta());\n\n/**\n * @internal\n */\nconst noFeatureDef: FeatureDef.Factory = {\n  [FeatureDef__symbol]() {\n    return {};\n  },\n};\n\n/**\n * @category Core\n */\nexport const FeatureDef = {\n\n  /**\n   * Extracts feature definition options from its type.\n   *\n   * @param featureType  Target feature class constructor.\n   *\n   * @returns Feature definition options. May be empty when there is no feature definition found in the given\n   * `featureType`.\n   */\n  of(this: void, featureType: Class): FeatureDef.Options {\n    return featureMeta.of(featureType) || {};\n  },\n\n  /**\n   * Builds feature definition options for the given feature class.\n   *\n   * @param featureType  Target feature class constructor.\n   * @param def  A feature definition.\n   *\n   * @returns Feature definition options.\n   */\n  for(this: void, featureType: Class, def: FeatureDef): FeatureDef.Options {\n    return featureMeta.meta(def, featureType);\n  },\n\n  /**\n   * Merges multiple feature definition options.\n   *\n   * @param defs  Feature definition options to merge.\n   *\n   * @returns Merged feature definition options.\n   */\n  merge(this: void, ...defs: readonly FeatureDef.Options[]): FeatureDef.Options {\n    return featureMeta.merge(defs);\n  },\n\n  /**\n   * Merges multiple feature definitions.\n   *\n   * @param defs  Feature definitions to merge.\n   *\n   * @returns Merged feature definition.\n   */\n  all(this: void, ...defs: readonly FeatureDef[]): FeatureDef {\n    return itsReduction<FeatureDef, FeatureDef.Factory>(\n        defs,\n        (prev, def) => ({\n          [FeatureDef__symbol](featureType: Class) {\n            return FeatureDef.merge(\n                FeatureDef.for(featureType, prev),\n                FeatureDef.for(featureType, def),\n            );\n          },\n        }),\n        noFeatureDef,\n    );\n  },\n\n  /**\n   * Defines a feature.\n   *\n   * Either creates new or extends an existing feature definition and stores it under `[FeatureDef__symbol]` key.\n   *\n   * @typeparam T  Feature type.\n   * @param featureType  Feature class constructor.\n   * @param defs  Feature definitions.\n   *\n   * @returns The `type` instance.\n   */\n  define<T extends Class>(this: void, featureType: T, ...defs: readonly FeatureDef[]): T {\n    return featureMeta.define(featureType, defs);\n  },\n\n};\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { Class } from '@proc7ts/primitives';\nimport { TypedClassDecorator } from '../common';\nimport { FeatureDef } from './feature-def';\n\n/**\n * Feature class decorator.\n *\n * Decorate a class with this decorator to define it as a feature like this:\n * ```TypeScript\n * @Feature({ needs: [OtherFeature, MyComponent] })\n * class MyFeature {\n *   // ...\n * }\n * ```\n *\n * Such feature can be passed to [[bootstrapComponents]] function or referenced by other features.\n *\n * This is an alternative to direct call to [[FeatureDef.define]] method.\n *\n * @category Core\n * @typeparam T  A type of decorated feature class.\n * @param defs  Feature definitions.\n *\n * @returns A feature class decorator.\n */\nexport function Feature<T extends Class = any>(...defs: FeatureDef[]): TypedClassDecorator<T> {\n  return (type: T) => FeatureDef.define(type, ...defs);\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKey__symbol, ContextValueSpec, SingleContextKey } from '@proc7ts/context-values';\nimport { EventReceiver, EventSupply, OnEvent } from '@proc7ts/fun-events';\nimport { Class } from '@proc7ts/primitives';\nimport { BootstrapContext, BootstrapSetup } from '../boot';\nimport { ComponentContext } from '../component';\nimport { ComponentClass, DefinitionContext, DefinitionSetup } from '../component/definition';\nimport { FeatureRef } from './feature-ref';\n\n/**\n * @internal\n */\nconst FeatureContext__key = (/*#__PURE__*/ new SingleContextKey<FeatureContext>('feature-context'));\n\n/**\n * Feature initialization context.\n *\n * @category Core\n */\nexport abstract class FeatureContext extends BootstrapContext implements BootstrapSetup {\n\n  /**\n   * A key of feature context value containing the feature context itself.\n   */\n  static get [ContextKey__symbol](): ContextKey<FeatureContext> {\n    return FeatureContext__key;\n  }\n\n  /**\n   * Feature class this context is created for.\n   */\n  abstract readonly feature: Class;\n\n  /**\n   * Builds an `OnEvent` sender of feature readiness event.\n   *\n   * The registered receiver will be notified once bootstrap is complete and the feature is loaded.\n   *\n   * If the above conditions satisfied already, the receiver will be notified immediately.\n   *\n   * @returns `OnEvent` sender of ready feature context.\n   */\n  abstract whenReady(): OnEvent<[FeatureContext]>;\n\n  /**\n   * Registers a receiver of feature readiness event.\n   *\n   * The registered receiver will be notified once bootstrap is complete and the feature is loaded.\n   *\n   * If the above conditions satisfied already, the receiver will be notified immediately.\n   *\n   * @param receiver  Target receiver of ready feature context.\n   *\n   * @returns Feature readiness event supply.\n   */\n  abstract whenReady(receiver: EventReceiver<[FeatureContext]>): EventSupply;\n\n  /**\n   * Builds an `OnEvent` sender of component definition events.\n   *\n   * The registered receiver will be notified when new component class is defined, but before its custom element class\n   * constructed.\n   *\n   * @returns `OnEvent` sender of component definition contexts.\n   */\n  abstract onDefinition(): OnEvent<[DefinitionContext]>;\n\n  /**\n   * Starts sending component definition events to the given `receiver`.\n   *\n   * The receiver will be notified when new component class is defined, but before its custom element class\n   * constructed.\n   *\n   * @param receiver  Target receiver of component definition contexts.\n   *\n   * @returns Component definition events supply.\n   */\n  abstract onDefinition(receiver: EventReceiver<[DefinitionContext]>): EventSupply;\n\n  /**\n   * Builds an `OnEvent` sender of component construction events.\n   *\n   * The registered receiver will be notified right before component is constructed.\n   *\n   * @returns `OnEvent` sender of constructed component contexts.\n   */\n  abstract onComponent(): OnEvent<[ComponentContext]>;\n\n  /**\n   * Starts sending component construction events to the given `receiver`.\n   *\n   * @param receiver  Target receiver of constructed component contexts.\n   *\n   * @returns Component construction events supply.\n   */\n  abstract onComponent(receiver: EventReceiver<[ComponentContext]>): EventSupply;\n\n  /**\n   * Provides bootstrap context value.\n   *\n   * Note that this happens when bootstrap context already exists. To provide a value before bootstrap context created\n   * a [[BootstrapSetup.provide]] method can be used.\n   *\n   * @typeparam Deps  Dependencies tuple type.\n   * @typeparam Src  Source value type.\n   * @typeparam Seed  Value seed type.\n   * @param spec  Context value specifier.\n   *\n   * @returns A function that removes the given context value specifier when called.\n   */\n  abstract provide<Deps extends any[], Src, Seed>(\n      spec: ContextValueSpec<BootstrapContext, any, Deps, Src, Seed>,\n  ): () => void;\n\n  abstract perDefinition<Deps extends any[], Src, Seed>(\n      spec: ContextValueSpec<DefinitionContext, any, Deps, Src, Seed>,\n  ): () => void;\n\n  abstract perComponent<Deps extends any[], Src, Seed>(\n      spec: ContextValueSpec<ComponentContext, any, Deps, Src, Seed>,\n  ): () => void;\n\n  abstract setupDefinition<T extends object>(componentType: ComponentClass<T>): OnEvent<[DefinitionSetup]>;\n\n  /**\n   * Defines a component.\n   *\n   * Creates a custom element according to component definition, and registers it with custom elements registry.\n   *\n   * Note that custom element definition will happen only when all features configuration complete.\n   *\n   * @typeparam T  A type of component.\n   * @param componentType  Component class constructor.\n   *\n   * @return Custom element class constructor registered as custom element.\n   *\n   * @throws TypeError  If `componentType` does not contain a component definition.\n   */\n  abstract define<T extends object>(componentType: ComponentClass<T>): void;\n\n  whenDefined<C extends object>(componentType: ComponentClass<C>): OnEvent<[DefinitionContext<C>]> {\n    return this.get(BootstrapContext).whenDefined(componentType);\n  }\n\n  load(feature: Class): FeatureRef {\n    return this.get(BootstrapContext).load(feature);\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { Class } from '@proc7ts/primitives';\n\n/**\n * Feature need.\n *\n * Indicates why one feature needs another one. The reason can be one of:\n *\n * - `needs` when feature {@link FeatureDef.Options.needs depends} on another one, or\n * - `has` when feature {@link FeatureDef.Options.has provides} another one.\n *\n * @category Core\n */\nexport type FeatureNeed = [Class, 'needs' | 'has', Class];\n\n/**\n * An error in feature needs. I.e. circular dependency.\n *\n * @category Core\n */\nexport class FeatureNeedsError extends Error {\n\n  /**\n   * Feature needs causing this error.\n   */\n  readonly needs: readonly FeatureNeed[];\n\n  /**\n   * Constructs feature needs error.\n   *\n   * @param needs  Feature needs causing the error.\n   */\n  constructor(needs: readonly FeatureNeed[]) {\n    super(\n        'Circular feature needs: ' + needs.reduce(\n        (\n            prev,\n            [feature, reason, need],\n        ) => (prev ? prev : feature.name) + ` ${reason} ${need.name}`,\n        '',\n        ),\n    );\n    this.needs = needs;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { AfterEvent, AfterEvent__symbol, EventKeeper, EventReceiver, EventSupply } from '@proc7ts/fun-events';\nimport { FeatureStatus } from './feature-status';\n\n/**\n * Dynamically loaded feature reference.\n *\n * It is returned from [[BootstrapContext.load]] and can be used to read feature load status and unload it.\n *\n * Implements an `EventKeeper` interface by sending a feature load status updates.\n *\n * @category Core\n */\nexport abstract class FeatureRef implements EventKeeper<[FeatureStatus]> {\n\n  /**\n   * A promise resolved when feature is unloaded.\n   *\n   * This happens after all feature references dismissed.\n   */\n  abstract readonly down: Promise<void>;\n\n  /**\n   * Builds an `AfterEvent` keeper of feature load status.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   *\n   * @returns `AfterEvent` sender of feature load status.\n   */\n  abstract read(): AfterEvent<[FeatureStatus]>;\n\n  /**\n   * Starts sending feature load status and updates to the given `receiver`.\n   *\n   * @param receiver  Target receiver of feature load status.\n   *\n   * @returns Feature load status supply.\n   */\n  abstract read(receiver: EventReceiver<[FeatureStatus]>): EventSupply;\n\n  [AfterEvent__symbol](): AfterEvent<[FeatureStatus]> {\n    return this.read();\n  }\n\n  /**\n   * Dismisses feature reference.\n   *\n   * When all feature references dismissed, then unloads the feature. This removes everything set up by the\n   * feature via [[BootstrapSetup]] and [[DefinitionSetup]].\n   *\n   * @param reason  Arbitrary reason of feature reference dismiss. This will be reported by load status supplies\n   * as their cut off reason.\n   *\n   * @returns A promise resolved when feature is unloaded. This happens only after all feature references dismissed.\n   */\n  abstract dismiss(reason?: any): Promise<void>;\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { itsReduction } from '@proc7ts/a-iterable';\nimport { isQualifiedName, QualifiedName } from '@proc7ts/namespace-aliaser';\nimport { mergeFunctions } from '@proc7ts/primitives';\nimport { MetaAccessor } from '../common';\nimport { FeatureDef, FeatureDef__symbol } from '../feature';\nimport { ComponentClass, DefinitionContext, DefinitionSetup, ElementDef } from './definition';\n\n/**\n * A key of a property holding a component definition within its class constructor.\n *\n * @category Core\n */\nexport const ComponentDef__symbol = (/*#__PURE__*/ Symbol('component-def'));\n\n/**\n * Component definition.\n *\n * A custom element class will be created for each registered component in accordance to this definition.\n *\n * This can be one of:\n * - custom element name (possibly qualified),\n * - component definition options,\n * - component definition holder,\n * - component definition factory,\n * - feature definition holder, or\n * - feature definition factory.\n *\n * @category Core\n * @typeparam T  A type of component.\n */\nexport type ComponentDef<T extends object = any> =\n    | QualifiedName\n    | ComponentDef.Options<T>\n    | ComponentDef.Holder<T>\n    | ComponentDef.Factory<T>\n    | FeatureDef.Holder\n    | FeatureDef.Factory;\n\nexport namespace ComponentDef {\n\n  /**\n   * Component definition options.\n   */\n  export interface Options<T extends object = any> {\n\n    readonly [ComponentDef__symbol]?: undefined;\n\n    /**\n     * Custom element name.\n     *\n     * The name may belong to some namespace to avoid naming conflicts. I.e. it can be either a string, or\n     * name/namespace tuple.\n     *\n     * When omitted an anonymous component will be registered. Such component is not bound to custom element, but it\n     * still can be mounted.\n     */\n    readonly name?: QualifiedName;\n\n    /**\n     * Existing element to extend by custom one.\n     */\n    readonly extend?: ElementDef.Extend;\n\n    /**\n     * Additional feature definition options.\n     */\n    readonly feature?: FeatureDef.Options;\n\n    /**\n     * Sets up component definition.\n     *\n     * This method is called before component definition context constructed.\n     *\n     * @param setup  Component definition setup.\n     */\n    setup?(setup: DefinitionSetup<T>): void;\n\n    /**\n     * Defines this component by calling the given component definition context methods.\n     *\n     * This function is called before the custom element is defined.\n     *\n     * @param defContext  Component definition context.\n     */\n    define?(defContext: DefinitionContext<T>): void;\n\n  }\n\n  /**\n   * Component definition holder.\n   *\n   * @typeparam T  A type of component.\n   */\n  export interface Holder<T extends object = any> {\n\n    /**\n     * The component definition this holder contains.\n     */\n    readonly [ComponentDef__symbol]: ComponentDef<T>;\n\n  }\n\n  /**\n   * Component definition factory.\n   *\n   * @typeparam T  A type of component.\n   */\n  export interface Factory<T extends object = any> {\n\n    /**\n     * Builds component definition.\n     *\n     * @param componentType  A component class constructor to build definition for.\n     *\n     * @returns Built component definition.\n     */\n    [ComponentDef__symbol](componentType: ComponentClass<T>): ComponentDef<T>;\n\n  }\n\n}\n\n/**\n * @internal\n */\ntype ComponentDefHolder<T extends object> =\n    | ComponentDef.Options<T>\n    | ComponentDef.Holder<T>\n    | ComponentDef.Factory<T>\n    | { [ComponentDef__symbol]?: undefined };\n\n/**\n * @internal\n */\ntype FeatureDefHolder =\n    | FeatureDef.Holder\n    | FeatureDef.Factory\n    | { [FeatureDef__symbol]?: undefined };\n\n/**\n * @internal\n */\nclass ComponentMeta extends MetaAccessor<ComponentDef.Options, ComponentDef> {\n\n  constructor() {\n    super(ComponentDef__symbol);\n  }\n\n  merge<T extends object>(defs: Iterable<ComponentDef.Options<T>>): ComponentDef.Options<T> {\n    return itsReduction<ComponentDef.Options<T>, ComponentDef.Options<T>>(\n        defs,\n        (prev, def) => ({\n          ...prev,\n          ...def,\n          setup: mergeFunctions(prev.setup, def.setup),\n          define: mergeFunctions(prev.define, def.define),\n          feature: prev.feature\n              ? def.feature ? FeatureDef.merge(prev.feature, def.feature) : prev.feature\n              : def.feature,\n        }),\n        {},\n    );\n  }\n\n  meta<T extends object>(source: ComponentDef<T>, componentType: ComponentClass<T>): ComponentDef.Options<T> {\n\n    const def = (source as ComponentDefHolder<T>)[ComponentDef__symbol];\n\n    if (def != null) {\n      return this.meta(\n          typeof def === 'function' ? (source as ComponentDef.Factory<T>)[ComponentDef__symbol](componentType) : def,\n          componentType,\n      );\n    }\n    if ((source as FeatureDefHolder)[FeatureDef__symbol] != null) {\n      return {\n        feature: FeatureDef.for(componentType, source as FeatureDef),\n      };\n    }\n    if (isQualifiedName(source)) {\n      return { name: source };\n    }\n\n    return source as ComponentDef.Options<T>;\n  }\n\n}\n\n/**\n * @internal\n */\nconst componentMeta = (/*#__PURE__*/ new ComponentMeta());\n\n/**\n * @internal\n */\nconst noComponentDef: ComponentDef.Factory = {\n  [ComponentDef__symbol]() {\n    return {};\n  },\n};\n\n/**\n * @category Core\n */\nexport const ComponentDef = {\n\n  /**\n   * Extracts component definition options from its type.\n   *\n   * @typeparam T  A type of component.\n   * @param componentType  Target component class constructor.\n   *\n   * @returns Component definition options. May be empty if there is not definition attached to component type.\n   */\n  of<T extends object>(this: void, componentType: ComponentClass<T>): ComponentDef.Options<T> {\n    return componentMeta.of(componentType) as ComponentDef.Options<T> || {};\n  },\n\n  /**\n   * Builds component definition options for the given component class.\n   *\n   * @param componentType  Target component class constructor.\n   * @param source  A source of component definition.\n   *\n   * @returns Component definition.\n   */\n  for<T extends object>(\n      this: void,\n      componentType: ComponentClass<T>,\n      source: ComponentDef<T>,\n  ): ComponentDef.Options<T> {\n    return componentMeta.meta(source, componentType);\n  },\n\n  /**\n   * Merges multiple component definition options.\n   *\n   * @typeparam T  A type of component.\n   * @param defs  Component definition options to merge.\n   *\n   * @returns Merged component definition options.\n   */\n  merge<T extends object>(this: void, ...defs: ComponentDef.Options<T>[]): ComponentDef.Options<T> {\n    return componentMeta.merge(defs);\n  },\n\n  /**\n   * Merges multiple component definitions.\n   *\n   * @typeparam T  A type of component.\n   * @param defs  Component definitions to merge.\n   *\n   * @returns Merged component definition.\n   */\n  all<T extends object>(this: void, ...defs: ComponentDef<T>[]): ComponentDef<T> {\n    return itsReduction<ComponentDef<T>, ComponentDef.Factory<T>>(\n        defs,\n        (prev, def) => ({\n          [ComponentDef__symbol](componentType: ComponentClass<T>) {\n            return ComponentDef.merge(\n                ComponentDef.for(componentType, prev),\n                ComponentDef.for(componentType, def),\n            );\n          },\n        }),\n        noComponentDef,\n    );\n  },\n\n  /**\n   * Defines a component.\n   *\n   * Either assigns new or extends existing component definition and stores it under [[ComponentDef__symbol]] key.\n   *\n   * Each component can be passed directly to [[bootstrapComponents]] function or added as a requirement\n   * of another feature.\n   *\n   * @typeparam T  A type of component.\n   * @param componentType  Component class constructor.\n   * @param defs  Component definitions.\n   *\n   * @returns The `type` instance.\n   */\n  define<T extends ComponentClass>(\n      this: void,\n      componentType: T,\n      ...defs: ComponentDef<InstanceType<T>>[]\n  ): T {\n    return componentMeta.define(componentType, defs);\n  },\n\n};\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { Class } from '@proc7ts/primitives';\nimport { ComponentDef, ComponentDef__symbol } from './component-def';\nimport { ComponentClass } from './definition';\n\n/**\n * Component decorator interface.\n *\n * In addition to being a decorator for component class, it may also serve as {@link ComponentDef component definition}.\n * Thus it can be added as parameter to {@link Component @Component} decorator, or used as class decorator by itself.\n *\n * Constructed by [[Component]] function.\n *\n * @category Core\n * @typeparam T  A type of decorated component class.\n */\nexport type ComponentDecorator<T extends ComponentClass = Class> =\n    & ((this: void, type: T) => T | void)\n    & ComponentDef<InstanceType<T>>;\n\n/**\n * Decorator of component class.\n *\n * Decorated class becomes component:\n * ```TypeScript\n * @Component({ name: 'my-element' })\n * class MyComponent {\n *   // ...\n * }\n * ```\n *\n * Such component can be registered with [[FeatureContext.define]] method or used as a feature, e.g. passed to\n * [[bootstrapComponents]] function, or added to [[FeatureDef.Options.needs]] property of another feature.\n *\n * This is an alternative to direct call to [[ComponentDef.Options.define]] method.\n *\n * @category Core\n * @typeparam T  A type of decorated component class.\n * @param defs  Component definitions.\n *\n * @returns A component class decorator.\n */\nexport function Component<T extends ComponentClass = Class>(\n    ...defs: ComponentDef<InstanceType<T>>[]\n): ComponentDecorator<T> {\n\n  const decorator = ((type: T) => ComponentDef.define(type, ...defs)) as ComponentDecorator<T>;\n  const def = decorator as ComponentDef.Factory<InstanceType<T>>;\n\n  def[ComponentDef__symbol] = () => ComponentDef.all(...defs);\n\n  return decorator;\n}\n","import { SingleContextKey } from '@proc7ts/context-values';\nimport { ComponentContext } from './component-context';\n\n/**\n * @internal\n */\nexport const ComponentContext__key = (/*#__PURE__*/ new SingleContextKey<ComponentContext>('component-context'));\n","import { SingleContextKey } from '@proc7ts/context-values';\nimport { eventSupplyOf } from '@proc7ts/fun-events';\nimport { DomEventDispatcher, OnDomEvent } from '@proc7ts/fun-events/dom';\nimport { ComponentContext__key } from './component-context.key.impl';\nimport { ComponentEventDispatcher } from './component-event';\n\n/**\n * @internal\n */\nexport const ComponentEventDispatcher__key = (/*#__PURE__*/ new SingleContextKey<ComponentEventDispatcher>(\n    'component-event-dispatcher',\n    {\n      byDefault(values) {\n\n        const context = values.get(ComponentContext__key);\n        const dispatcher = new DomEventDispatcher(context.element);\n\n        eventSupplyOf(dispatcher).needs(context);\n\n        return {\n          dispatch(event: Event): boolean {\n            return dispatcher.dispatch(event);\n          },\n          on<E extends Event>(type: string): OnDomEvent<E> {\n            return dispatcher.on(type);\n          },\n        };\n      },\n    },\n));\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { SingleContextKey, SingleContextRef } from '@proc7ts/context-values';\nimport { ComponentContext__key } from './component-context.key.impl';\n\n/**\n * Component content root node.\n *\n * Either element itself, or its shadow root.\n *\n * @category Core\n */\nexport type ContentRoot = Element | ShadowRoot;\n\n/**\n * A key of component context value containing a component root element.\n *\n * This is an element itself by default. But can be overridden e.g. by {@link AttachShadow @AttachShadow} decorator.\n *\n * @category Core\n */\nexport const ContentRoot: SingleContextRef<ContentRoot> = (/*#__PURE__*/ new SingleContextKey<ContentRoot>(\n    'content-root',\n    {\n      byDefault(ctx): ContentRoot {\n        return ctx.get(ComponentContext__key).element as ContentRoot;\n      },\n    },\n));\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextValueSlot } from '@proc7ts/context-values';\nimport { ContextUpKey, ContextUpRef } from '@proc7ts/context-values/updatable';\nimport { AfterEvent, afterThe, EventKeeper, nextAfterEvent, statePath, StatePath } from '@proc7ts/fun-events';\nimport { mergeFunctions, noop } from '@proc7ts/primitives';\n\n/**\n * Component state updater signature.\n *\n * @category Core\n */\nexport type StateUpdater =\n/**\n * @typeparam V  Updated value type\n * @param path  Updated state node path.\n * @param newValue  New value.\n * @param oldValue  Replaced value.\n */\n    <V>(this: void, path: StatePath, newValue: V, oldValue: V) => void;\n\nexport namespace StateUpdater {\n\n  /**\n   * Normalized component state updater signature.\n   *\n   * Accepts normalized state path.\n   */\n  export type Normalized =\n  /**\n   * @typeparam V  Updated value type\n   * @param path  Normalized path of updated state node.\n   * @param newValue  New value.\n   * @param oldValue  Replaced value.\n   */\n      <V>(this: void, path: StatePath.Normalized, newValue: V, oldValue: V) => void;\n\n}\n\n/**\n * @internal\n */\nclass StateUpdaterKey extends ContextUpKey<StateUpdater, StateUpdater.Normalized> {\n\n  readonly upKey: ContextUpKey.UpKey<StateUpdater, StateUpdater.Normalized>;\n\n  constructor() {\n    super('state-updater');\n    this.upKey = this.createUpKey(\n        slot => slot.insert(slot.seed.keepThru(\n            (...fns) => {\n              if (fns.length) {\n\n                const combined: StateUpdater.Normalized = fns.reduce(\n                    (prev, fn) => mergeFunctions(fn, prev),\n                    noop,\n                );\n\n                return (path, newValue, oldValue) => combined(statePath(path), newValue, oldValue);\n              }\n              if (slot.hasFallback && slot.or) {\n                return nextAfterEvent(slot.or);\n              }\n              return noop;\n            },\n        )),\n    );\n  }\n\n  grow(\n      slot: ContextValueSlot<\n          StateUpdater,\n          EventKeeper<StateUpdater.Normalized[]> | StateUpdater.Normalized,\n          AfterEvent<StateUpdater.Normalized[]>>,\n  ): void {\n\n    let delegated: StateUpdater;\n\n    slot.context.get(\n        this.upKey,\n        slot.hasFallback ? { or: slot.or != null ? afterThe(slot.or) : slot.or } : undefined,\n    )!.to(\n        fn => delegated = fn,\n    ).whenOff(\n        () => delegated = noop,\n    );\n\n    slot.insert((path, newValue, oldValue) => delegated(path, newValue, oldValue));\n  }\n\n}\n\n/**\n * A key of component context value containing a component {@link StateUpdater state updater} function.\n *\n * Features are calling this function by default when component state changes, e.g. attribute value or DOM property\n * modified.\n *\n * Does nothing by default and after component destruction.\n *\n * When multiple state updaters provided, they all will be called on each state update, in reverse order.\n *\n * @category Core\n */\nexport const StateUpdater: ContextUpRef<StateUpdater, StateUpdater.Normalized> = (/*#__PURE__*/ new StateUpdaterKey());\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKey__symbol, ContextValues } from '@proc7ts/context-values';\nimport {\n  EventReceiver,\n  EventSupply,\n  EventSupply__symbol,\n  EventSupplyPeer,\n  OnEvent,\n  StatePath,\n} from '@proc7ts/fun-events';\nimport { OnDomEvent } from '@proc7ts/fun-events/dom';\nimport { ComponentContext__key } from './component-context.key.impl';\nimport { ComponentEventDispatcher__key } from './component-event.key.impl';\nimport { ComponentMount } from './component-mount';\nimport { ContentRoot } from './content-root';\nimport { ComponentClass } from './definition';\nimport { StateUpdater } from './state-updater';\n\n/**\n * A key of a custom element and component properties containing a reference to component context.\n *\n * @category Core\n */\nexport const ComponentContext__symbol = (/*#__PURE__*/ Symbol('component-context'));\n\n/**\n * Component context.\n *\n * Passed to component constructor as its only parameter.\n *\n * Extends `ContextValues` interface. The values are provided by corresponding providers registered with\n * [[BootstrapSetup.perComponent]] and [[DefinitionSetup.perComponent]] methods.\n *\n * @category Core\n * @typeparam T  A type of component.\n */\nexport abstract class ComponentContext<T extends object = any> extends ContextValues implements EventSupplyPeer {\n\n  /**\n   * A key of component context value containing the component context instance itself.\n   */\n  static get [ContextKey__symbol](): ContextKey<ComponentContext> {\n    return ComponentContext__key;\n  }\n\n  /**\n   * Component class constructor.\n   */\n  abstract readonly componentType: ComponentClass<T>;\n\n  /**\n   * Custom element constructed for the component according to its type.\n   *\n   * E.g. `HTMLElement` instance.\n   */\n  abstract readonly element: any;\n\n  /**\n   * A component instance.\n   *\n   * It is an error accessing this property before the component is created, e.g. from inside of component constructor\n   * or {@link DefinitionContext.whenComponent component instantiation event} receiver. A [[whenReady]] callback could\n   * be utilized to work this around.\n   */\n  abstract readonly component: T;\n\n  /**\n   * Component mount.\n   *\n   * This is defined when component is mounted to arbitrary element by [[DefinitionContext.mountTo]]. Ot is `undefined`\n   * for components created in standard way.\n   */\n  abstract readonly mount: ComponentMount<T> | undefined;\n\n  /**\n   * Whether the component is settled.\n   *\n   * Component settlement happens:\n   * - when [[settle]] method is called,\n   * - when component is {@link DefinitionContext.mountTo mounted} to element, or\n   * - when component's element is [[connected]].\n   *\n   * It is guaranteed that component settlement won't happen inside custom element's constructor. So the settlement\n   * event may be used e.g. to start DOM manipulations, as the latter is prohibited inside custom element constructor.\n   *\n   * This becomes `true` right before [[whenSettled]] event is sent.\n   */\n  abstract readonly settled: boolean;\n\n  /**\n   * Whether the component's element is connected.\n   *\n   * This becomes `true` right before [[whenConnected]] event is sent.\n   */\n  abstract readonly connected: boolean;\n\n  /**\n   * An event supply that {@link destroy destroys} component when cut off.\n   */\n  abstract readonly [EventSupply__symbol]: EventSupply;\n\n  /**\n   * Updates component's state.\n   *\n   * This is a shorthand for invoking a component {@link StateUpdater state updater} .\n   *\n   * @typeparam V  A type of changed value.\n   * @param key  Changed value key.\n   * @param newValue  New value.\n   * @param oldValue  Previous value.\n   */\n  readonly updateState: StateUpdater;\n\n  /**\n   * Extracts component context from its custom element or from component itself.\n   *\n   * @param element  Custom element instance created for the component or the component itself.\n   *\n   * @return Component context reference stored under [[ComponentContext__symbol]] key.\n   *\n   * @throws TypeError  When the given `element` does not contain component context reference.\n   */\n  static of<T extends object>(element: any): ComponentContext<T> {\n\n    const context = element[ComponentContext__symbol] as ComponentContext<T> | undefined;\n\n    if (!context) {\n      throw TypeError(`No component context found in ${element}`);\n    }\n\n    return context;\n  }\n\n  constructor() {\n    super();\n    this.updateState = <V>(key: StatePath, newValue: V, oldValue: V): void => {\n      this.get(StateUpdater)(key, newValue, oldValue);\n    };\n  }\n\n  /**\n   * Component content root.\n   *\n   * This is a shorthand for requesting a {@link ContentRoot content root} from component context.\n   */\n  get contentRoot(): ContentRoot {\n    return this.get(ContentRoot);\n  }\n\n  /**\n   * Builds an `OnEvent` sender of component readiness event.\n   *\n   * The component is constructed shortly after custom element. So the component may not exist when requested\n   * e.g. inside component constructor or {@link DefinitionContext.whenComponent component instantiation event}\n   * receiver. The registered receiver will be notified when the component is constructed.\n   *\n   * If the component is constructed already, the receiver will be notified immediately.\n   *\n   * @returns An `OnEvent` sender of this context upon component readiness.\n   */\n  abstract whenReady(): OnEvent<[this]>;\n\n  /**\n   * Registers a receiver of component readiness event.\n   *\n   * The component is constructed shortly after custom element. So the component may not exist when requested\n   * e.g. inside component constructor or {@link DefinitionContext.whenComponent component instantiation event}\n   * receiver. The registered receiver will be notified when the component is constructed.\n   *\n   * @param receiver  Target receiver of this component upon component readiness.\n   *\n   * @returns Component readiness event supply.\n   */\n  abstract whenReady(receiver: EventReceiver<[this]>): EventSupply;\n\n  /**\n   * Settles component.\n   *\n   * Calling this method has no effect if component is [[settled]] already, when component is not\n   * {@link whenReady ready} yet, or custom element's constructor is not exited.\n   *\n   * Calling this method may trigger DOM manipulations (the latter is prohibited inside custom element's constructor).\n   * This may be desired for rendering optimizations. E.g. to render element's content _before_ adding it to document.\n   *\n   * This method is called automatically when {@link DefinitionContext.mountTo mounting} component to element.\n   */\n  abstract settle(): void;\n\n  /**\n   * Builds an `OnEvent` sender of component settlement event.\n   *\n   * The registered receiver is called when component is [[settled]]. If settled already the receiver is called\n   * immediately.\n   *\n   * @returns An `OnEvent` sender of this component context when settled.\n   */\n  abstract whenSettled(): OnEvent<[this]>;\n\n  /**\n   * Registers a receiver of component settlement event.\n   *\n   * The registered receiver is called when component is [[settled]]. If settled already the receiver is called\n   * immediately.\n   *\n   * @param receiver  Target receiver of this component context when connected.\n   *\n   * @returns Component settlement event supply.\n   */\n  abstract whenSettled(receiver: EventReceiver<[this]>): EventSupply;\n\n  /**\n   * Builds an `OnEvent` sender of component's element connection event.\n   *\n   * The registered receiver is called when component's element is connected. I.e. when custom element's\n   * `connectedCallback()` method is called, or when the element this component is {@link mount mounted to} is\n   * {@link ComponentMount.connect connected}.\n   *\n   * If connected already the receiver is called immediately.\n   *\n   * @returns An `OnEvent` sender of this component context when connected.\n   */\n  abstract whenConnected(): OnEvent<[this]>;\n\n  /**\n   * Registers a receiver of component's element connection event.\n   *\n   * The registered receiver is called when component's element is connected. I.e. when custom element's\n   * `connectedCallback()` method is called, or when the element this component is {@link mount mounted to} is\n   * {@link ComponentMount.connect connected}.\n   *\n   * If connected already the receiver is called immediately.\n   *\n   * @param receiver  Target receiver of this component context when connected.\n   *\n   * @returns Component's element connection event supply.\n   */\n  abstract whenConnected(receiver: EventReceiver<[this]>): EventSupply;\n\n  /**\n   * Returns a DOM event producer for the given event type.\n   *\n   * This is a shorthand for invoking a component event producer function available under\n   * `[ComponentEventProducer.key]` key.\n   *\n   * @param type  An event type to listen for.\n   *\n   * @returns A producer of DOM event events of the given type.\n   */\n  on<E extends Event>(type: string): OnDomEvent<E> {\n    return this.get(ComponentEventDispatcher__key).on(type);\n  }\n\n  /**\n   * Dispatches an event to component element.\n   *\n   * This is a shorthand for invoking a component {@link ComponentEventDispatcher event dispatcher}.\n   *\n   * @param event  An event to dispatch.\n   */\n  dispatchEvent(event: Event): void {\n    this.get(ComponentEventDispatcher__key).dispatch(event);\n  }\n\n  /**\n   * Destroys the component.\n   *\n   * Removes element from the DOM tree. I.e. disconnects custom element first.\n   *\n   * After this method call the component should no longer be used.\n   *\n   * Note that component destruction is virtual. It is up to developer to decide when component is no longer needed.\n   * However the component is destroyed automatically once disconnected, i.e. when custom element's\n   * `disconnectedCallback()` method is called.\n   *\n   * @param reason  Optional reason of destruction.\n   */\n  abstract destroy(reason?: any): void;\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { SingleContextRef } from '@proc7ts/context-values';\nimport { OnDomEvent } from '@proc7ts/fun-events/dom';\nimport { ComponentContext } from './component-context';\nimport { ComponentEventDispatcher__key } from './component-event.key.impl';\n\n/**\n * Component event.\n *\n * Events of this type are thrown by various services to inform on component status changes.\n *\n * It is illegal to dispatch such events for elements not bound to components. It is reasonable to dispatch events\n * using [[ComponentEventDispatcher]] available in component context.\n *\n * The following event types supported:\n * - `wesib:component` is dispatched when component is bound to element. I.e. when HTML element is upgraded to custom\n *   one defined by component, or component is mounted to element. The event is dispatched when component is connected\n *   for the first time. I.e. when element is added to the document.\n *   This event bubbles and is not cancelable.\n *\n * @category Core\n * @event ComponentEvent#wesib:component\n */\nexport class ComponentEvent extends Event {\n\n  /**\n   * Target component context.\n   */\n  get context(): ComponentContext {\n    return ComponentContext.of(this.target);\n  }\n\n}\n\n/**\n * Component event dispatcher is used to listen for and dispatch component events.\n *\n * It is available in bootstrap context context.\n *\n * By default treats a component element as event target.\n *\n * @category Core\n */\nexport interface ComponentEventDispatcher {\n\n  /**\n   * Dispatches the DOM event for the given component.\n   *\n   * @param event  An event to dispatch.\n   *\n   * @returns `true` if either event's `cancelable` attribute value is `false` or its `preventDefault()` method was not\n   * invoked, or `false` otherwise.\n   */\n  dispatch(event: Event): boolean;\n\n  /**\n   * Returns an `OnDomEvent` sender of DOM events of the given type.\n   *\n   * @param type  An event type to listen for.\n   *\n   * @returns A producer of DOM event events of the given type.\n   */\n  on<E extends Event>(type: string): OnDomEvent<E>;\n\n}\n\n/**\n * A key of component context value containing component event dispatcher.\n *\n * @category Core\n */\nexport const ComponentEventDispatcher: SingleContextRef<ComponentEventDispatcher> = ComponentEventDispatcher__key;\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { Class, PropertyAccessorDescriptor, valueProvider } from '@proc7ts/primitives';\nimport { decoratePropertyAccessor } from '../common';\nimport { ComponentDef, ComponentDef__symbol } from './component-def';\nimport { Component, ComponentDecorator } from './component.decorator';\nimport { ComponentClass } from './definition';\n\n/**\n * Component property decorator interface.\n *\n * Allows to construct a {@link ComponentDecorator component decorator} by declaring a virtual property to use instead\n * of decorated one.\n *\n * Constructed by [[ComponentProperty]] function.\n *\n * @category Core\n * @typeparam V  Property value type.\n * @typeparam T  A type of decorated component class.\n */\nexport interface ComponentPropertyDecorator<V, T extends ComponentClass = Class> {\n\n  /**\n   * Decorates component method.\n   *\n   * @typeparam P  Property value type.\n   * @param proto  Decorated class prototype.\n   * @param propertyKey  Decorated property key.\n   * @param descriptor  Decorated property descriptor.\n   *\n   * @returns  Either updated property descriptor, or nothing.\n   */\n  // eslint-disable-next-line\n  <P extends V>(\n      this: void,\n      proto: InstanceType<T>,\n      propertyKey: string | symbol,\n      descriptor?: TypedPropertyDescriptor<P>,\n  ): any | void;\n\n  /**\n   * Builds component decorator assuming the virtual property has the given value.\n   *\n   * @param value  Virtual property value.\n   * @param key  Virtual property key. Defaults to [[AnonymousComponentProperty__symbol]].\n   *\n   * @returns New component decorator.\n   */\n  As(\n      this: void,\n      value: V,\n      key?: string | symbol,\n  ): ComponentDecorator<T>;\n\n  /**\n   * Builds component decorator assuming the virtual property value is provided by the given `provider`.\n   *\n   * @param provider  Virtual property read-only value provider.\n   * @param key  Virtual property key. Defaults to [[AnonymousComponentProperty__symbol]].\n   *\n   * @returns New component decorator.\n   */\n  By(\n      this: void,\n      provider: ComponentProperty.Provider<V, InstanceType<T>>,\n      key?: string | symbol,\n  ): ComponentDecorator<T>;\n\n  /**\n   * Builds component decorator assuming the decorated property is available via the given `accessor`.\n   *\n   * @param accessor  Virtual property accessor.\n   * @param key  Virtual property key. Defaults to [[AnonymousComponentProperty__symbol]].\n   *\n   * @returns New component decorator.\n   */\n  With(\n      this: void,\n      accessor: ComponentProperty.Accessor<V, InstanceType<T>>,\n      key?: string | symbol,\n  ): ComponentDecorator<T>;\n\n  /**\n   * Builds component decorator assuming the decorated property is bound to component with by the given `binder`.\n   *\n   * @param binder  A binder of virtual property accessor\n   * @param key  Virtual property key. Defaults to [[AnonymousComponentProperty__symbol]]..\n   *\n   * @returns New component decorator.\n   */\n  Bind(\n      this: void,\n      binder: ComponentProperty.Binder<V, InstanceType<T>>,\n      key?: string | symbol,\n  ): ComponentDecorator<T>;\n\n}\n\nexport namespace ComponentProperty {\n\n  /**\n   * Component property value provider signature.\n   *\n   * This function will be called each time the property value is requested.\n   *\n   * @typeparam V  Property value type.\n   * @typeparam T  A type of component.\n   */\n  export type Provider<V, T extends object = any> =\n  /**\n   * @param component  Component instance.\n   * @param key  Target property key.\n   *\n   * @returns Property value.\n   */\n      (\n          this: void,\n          component: T,\n          key: string | symbol,\n      ) => V;\n\n  /**\n   * Component property accessor.\n   *\n   * Allows to read and write property value.\n   *\n   * @typeparam V  Property value type.\n   * @typeparam T  A type of component.\n   */\n  export interface Accessor<V, T extends object = any> {\n\n    /**\n     * Reads property value.\n     *\n     * May throw if the property is not readable.\n     *\n     * @param component  Target component instance.\n     * @param key  Property key.\n     *\n     * @returns Property value.\n     */\n    get(this: void, component: T, key: string | symbol): V;\n\n    /**\n     * Assigns new property value.\n     *\n     * May throw is the property is not writable.\n     *\n     * @param component  Target component instance.\n     * @param value  New property value.\n     * @param key  Property key.\n     */\n    set(this: void, component: T, value: V, key: string | symbol): void;\n\n  }\n\n  /**\n   * Property accessor binder signature.\n   *\n   * This is a function that binds a {@link BoundAccessor property accessor} to target component.\n   *\n   * @typeparam V  Property value type.\n   * @typeparam T  A type of component.\n   */\n  export type Binder<V, T extends object = any> =\n  /**\n   * @param component  Target component to bind property accessor to.\n   * @param key  Property key.\n   *\n   * @returns Property accessor bound to `component`.\n   */\n      (\n          this: void,\n          component: T,\n          key: string | symbol,\n      ) => BoundAccessor<V>;\n\n  export interface BoundAccessor<V> {\n\n    /**\n     * Reads bound component's property value.\n     *\n     * An attempt to read the value would throw when omitted.\n     *\n     * @returns Property value.\n     */\n    get?(): V;\n\n    /**\n     * Assigns bound component's new property value.\n     *\n     * An attempt to assign the value would throw when omitted.\n     *\n     * @param value  New property value.\n     */\n    set?(value: V): void;\n\n  }\n\n  /**\n   * Component property descriptor.\n   *\n   * Passed to {@link Definer property definer} by [[ComponentProperty]] function to construct a {@link Definition\n   * property definition}.\n   *\n   * @typeparam V  Property value type.\n   * @typeparam T  A type of component class.\n   */\n  export interface Descriptor<V, T extends ComponentClass = Class> {\n\n    /**\n     * Component class constructor.\n     */\n    readonly type: T;\n\n    /**\n     * Component property key.\n     */\n    readonly key: string | symbol;\n\n    /**\n     * Whether the property is initially writable.\n     *\n     * This can be changed by {@link Definition.get property read definition}.\n     */\n    readonly readable: boolean;\n\n    /**\n     * Whether the property is initially writable.\n     *\n     * This can be changed by {@link Definition.set property assignment definition}.\n     */\n    readonly writable: boolean;\n\n    /**\n     * Whether the property is initially enumerable.\n     *\n     * This can be changed by {@link Definition.enumerable property definition}.\n     */\n    readonly enumerable: boolean;\n\n    /**\n     * Whether the property is initially configurable.\n     *\n     * This can be changed by {@link Definition.configurable property definition}.\n     */\n    readonly configurable: boolean;\n\n    /**\n     * Reads property value.\n     *\n     * May throw if the property is not readable.\n     *\n     * @param component  Target component instance.\n     *\n     * @returns Property value.\n     */\n    get(this: void, component: InstanceType<T>): V;\n\n    /**\n     * Assigns new property value.\n     *\n     * May throw is the property is not writable.\n     *\n     * @param component  Target component instance.\n     * @param value  New property value.\n     */\n    set(this: void, component: InstanceType<T>, value: V): void;\n\n  }\n\n  /**\n   * Component property definition builder signature.\n   *\n   * This is a function called by [[ComponentProperty]] to define the property.\n   *\n   * @typeparam V  Property value type.\n   * @typeparam T  A type of component class.\n   */\n  export type Definer<V, T extends ComponentClass = Class> =\n  /**\n   * @param descriptor  Component property descriptor.\n   *\n   * @returns Component property definition. Or nothing if the property definition is not to be changed.\n   */\n      (\n          this: void,\n          descriptor: Descriptor<V, T>,\n      ) => Definition<V, T> | void;\n\n  /**\n   * Property definition to apply to existing property.\n   *\n   * When applying to decorated property, this definition updates its definition.\n   *\n   * When applying to virtual property assumed by one of [[ComponentPropertyDecorator]] methods, most of returned\n   * values ignored. Except for {@link Definition.componentDef component definition}, {@link Definition.get value\n   * reader}, and {@link Definition.set value setter}.\n   *\n   * @typeparam V  Property value type.\n   * @typeparam T  A type of component class.\n   */\n  export interface Definition<V, T extends ComponentClass = Class> {\n\n    /**\n     * Component definition to apply to component.\n     *\n     * When specified, it is used to enable certain functionality for decorated (or virtual) property.\n     */\n    readonly componentDef?: ComponentDef<InstanceType<T>>;\n\n    /**\n     * Whether to make the property enumerable.\n     *\n     * When specified, it is used as `enumerable` attribute value of decorated property descriptor.\n     */\n    readonly enumerable?: boolean;\n\n    /**\n     * Whether to make the property configurable.\n     *\n     * When specified, it is used as `configurable` attribute value of decorated property descriptor.\n     */\n    readonly configurable?: boolean;\n\n    /**\n     * Reads property value.\n     *\n     * When specified it changes how the property value is read.\n     *\n     * When neither [[get]], nor [[set]] specified, the property access does not change.\n     *\n     * @param component  Target component instance.\n     * @param key  Property key.\n     *\n     * @returns Property value.\n     */\n    get?(this: void, component: InstanceType<T>, key: string | symbol): V;\n\n    /**\n     * Assigns new property value.\n     *\n     * When specified it changes how the property value is assigned.\n     *\n     * When neither [[get]], nor [[set]] specified, the property access does not change.\n     *\n     * @param component  Target component instance.\n     * @param value  New property value.\n     * @param key  Property key.\n     */\n    set?(this: void, component: InstanceType<T>, value: V, key: string | symbol): void;\n\n  }\n\n}\n\n/**\n * Anonymous component property key.\n *\n * Used as a default virtual property key.\n *\n * @category Core\n */\nexport const AnonymousComponentProperty__symbol = (/*#__PURE__*/ Symbol('anonymous-component-property'));\n\n/**\n * Decorator of component property.\n *\n * Updates decorated property and component definition. Can be converted to {@link ComponentDecorator component\n * decorator} by calling appropriate method of returned decorator instance.\n *\n * @category Core\n * @typeparam V  Decorated property value type.\n * @typeparam T  A type of decorated component class.\n * @param define  Component property definition builder.\n *\n * @returns Component property decorator.\n */\nexport function ComponentProperty<V, T extends ComponentClass = Class>(\n    define: ComponentProperty.Definer<V, T>,\n): ComponentPropertyDecorator<V, T> {\n\n  const decorator = (\n      proto: InstanceType<T>,\n      propertyKey: string | symbol,\n      descriptor?: TypedPropertyDescriptor<V>,\n  ): any | void => decoratePropertyAccessor(\n      proto,\n      propertyKey,\n      descriptor,\n      desc => {\n\n        const { get: getValue, set: setValue } = desc;\n        const type = proto.constructor as T;\n        const { get, set, configurable, enumerable, componentDef = {} } = define({\n          type,\n          key: propertyKey,\n          readable: !!desc.get,\n          writable: !!desc.set,\n          enumerable: !!desc.enumerable,\n          configurable: !!desc.configurable,\n          get: getValue\n              ? ((component: InstanceType<T>) => getValue.call(component))\n              : notReadableAccessor(propertyKey),\n          set: setValue\n              ? ((component, value) => setValue.call(component, value))\n              : notWritableAccessor(propertyKey),\n        }) || {};\n\n        ComponentDef.define(type, componentDef);\n\n        const updated: PropertyAccessorDescriptor<V> = {\n          ...desc,\n          configurable: configurable ?? desc.configurable,\n          enumerable: enumerable ?? desc.enumerable,\n        };\n\n        if (get || set) {\n          updated.get = get && function (this: InstanceType<T>) {\n            return get(this, propertyKey);\n          };\n          updated.set = set && function (this: InstanceType<T>, value: V) {\n            set(this, value, propertyKey);\n          };\n        }\n\n        return updated;\n      },\n  );\n  const decorateWith = (\n      { get, set }: ComponentProperty.Accessor<V, InstanceType<T>>,\n      key: string | symbol = AnonymousComponentProperty__symbol,\n      writable: boolean,\n  ): ComponentDecorator<T> => Component({\n    [ComponentDef__symbol](type: InstanceType<T>) {\n\n      const def = define({\n        type,\n        key,\n        readable: true,\n        writable,\n        enumerable: false,\n        configurable: false,\n        get: component => get(component, key),\n        set: (component, value) => set(component, value, key),\n      });\n\n      return (def && def.componentDef) || {};\n    },\n  });\n  const By = (\n      provider: ComponentProperty.Provider<V, InstanceType<T>>,\n      key?: string | symbol,\n  ): ComponentDecorator<T> => decorateWith(\n      {\n        get(component, key) {\n          return provider(component, key);\n        },\n      } as ComponentProperty.Accessor<V>,\n      key,\n      false,\n  );\n\n  const result = decorator as ComponentPropertyDecorator<V, T>;\n\n  result.With = (access, key) => decorateWith(access, key, true);\n  result.By = By;\n  result.As = (value, key?) => By(valueProvider(value), key);\n  result.Bind = (binder, key = AnonymousComponentProperty__symbol) => {\n\n    const accessor__symbol = Symbol(`${String(key)}:accessor`);\n\n    interface HostComponent {\n      [accessor__symbol]?: {\n        get(): V;\n        set(value: V): void;\n      };\n    }\n\n    const accessor = (component: HostComponent): {\n      get(): V;\n      set(value: V): void;\n    } => {\n\n      const existing = component[accessor__symbol];\n\n      if (existing) {\n        return existing;\n      }\n\n      const accessor = binder(component as InstanceType<T>, key);\n\n      return component[accessor__symbol] = {\n        get: accessor.get ? accessor.get.bind(accessor) : notReadableAccessor(key),\n        set: accessor.set ? accessor.set.bind(accessor) : notWritableAccessor(key),\n      };\n    };\n\n    return decorateWith(\n        {\n          get(component) {\n            return accessor(component).get();\n          },\n          set(component, value) {\n            return accessor(component).set(value);\n          },\n        },\n        key,\n        true,\n    );\n  };\n\n  return result;\n}\n\n/**\n * @internal\n */\nfunction notReadableAccessor(propertyKey: string | symbol): () => never {\n  return () => { throw new TypeError(`\"${String(propertyKey)}\" is not readable`); };\n}\n\n/**\n * @internal\n */\nfunction notWritableAccessor(propertyKey: string | symbol): () => never {\n  return () => { throw new TypeError(`\"${String(propertyKey)}\" is not writable`); };\n}\n","import {\n  ContextKey,\n  ContextKey__symbol,\n  ContextRegistry,\n  ContextValues,\n  SingleContextKey,\n} from '@proc7ts/context-values';\nimport { BootstrapContext } from '../bootstrap-context';\n\nconst BootstrapContextRegistry__key = (\n    /*#__PURE__*/ new SingleContextKey<BootstrapContextRegistry>('bootstrap-context-registry')\n);\n\n/**\n * @internal\n */\nexport class BootstrapContextRegistry extends ContextRegistry<BootstrapContext> {\n\n  static get [ContextKey__symbol](): ContextKey<BootstrapContextRegistry> {\n    return BootstrapContextRegistry__key;\n  }\n\n  readonly values: ContextValues;\n\n  static create(): BootstrapContextRegistry {\n    return new BootstrapContextRegistry();\n  }\n\n  private constructor() {\n    super();\n    this.provide({ a: BootstrapContextRegistry, is: this });\n    this.values = this.newValues();\n  }\n\n}\n","import { ContextKey, ContextKey__symbol, ContextRegistry, SingleContextKey } from '@proc7ts/context-values';\nimport { ComponentContext } from '../../component';\nimport { bootstrapDefault } from '../bootstrap-default';\n\nconst ComponentContextRegistry__key = (/*#__PURE__*/ new SingleContextKey<ComponentContextRegistry>(\n    'component-context-registry',\n    {\n      byDefault: bootstrapDefault(() => new ComponentContextRegistry()),\n    },\n));\n\n/**\n * @internal\n */\nexport class ComponentContextRegistry extends ContextRegistry<ComponentContext> {\n\n  static get [ContextKey__symbol](): ContextKey<ComponentContextRegistry> {\n    return ComponentContextRegistry__key;\n  }\n\n}\n","import { ContextKey, ContextKey__symbol, ContextRegistry, SingleContextKey } from '@proc7ts/context-values';\nimport { DefinitionContext } from '../../component/definition';\nimport { bootstrapDefault } from '../bootstrap-default';\n\nconst DefinitionContextRegistry__key = (/*#__PURE__*/ new SingleContextKey<DefinitionContextRegistry>(\n    'definition-context-registry',\n    {\n      byDefault: bootstrapDefault(context => new DefinitionContextRegistry(context)),\n    },\n));\n\n/**\n * @internal\n */\nexport class DefinitionContextRegistry extends ContextRegistry<DefinitionContext> {\n\n  static get [ContextKey__symbol](): ContextKey<DefinitionContextRegistry> {\n    return DefinitionContextRegistry__key;\n  }\n\n}\n","import { nextArgs, nextSkip } from '@proc7ts/call-thru';\nimport { EventEmitter, onAny, OnEvent, onEventBy, trackValue } from '@proc7ts/fun-events';\nimport { superClassOf } from '@proc7ts/primitives';\nimport { ComponentDef__symbol } from '../../component';\nimport { ComponentClass, DefinitionSetup } from '../../component/definition';\nimport { Unloader } from './unloader.impl';\n\n/**\n * @internal\n */\nexport function onPostDefSetup(\n    componentType: ComponentClass,\n    unloader: Unloader,\n): OnEvent<[DefinitionSetup]> {\n\n  const { on } = postDefSetup(componentType);\n\n  return onEventBy(receiver => {\n    on.to({\n      supply: receiver.supply.needs(unloader.supply),\n      receive(ctx, setup) {\n\n        const whenReady = setup.whenReady().tillOff(unloader.supply).F;\n        const whenComponent = setup.whenComponent().tillOff(unloader.supply).F;\n\n        receiver.receive(ctx, {\n          get componentType() {\n            return setup.componentType;\n          },\n          get whenReady() {\n            return whenReady;\n          },\n          get whenComponent() {\n            return whenComponent;\n          },\n          perDefinition(spec) {\n            return unloader.add(() => setup.perDefinition(spec));\n          },\n          perComponent(spec) {\n            return unloader.add(() => setup.perComponent(spec));\n          },\n        });\n      },\n    });\n  });\n}\n\n/**\n * @internal\n */\nexport interface PostDefSetup<T extends object = any> {\n  readonly on: OnEvent<[DefinitionSetup<T>]>;\n  send(setup: DefinitionSetup): void;\n  setup(setup: DefinitionSetup<T>): void;\n}\n\nconst PostDefSetup__symbol = (/*#__PURE__*/ Symbol('post-def-setup'));\n\ninterface PostDefComponentClass<T extends object> extends ComponentClass<T> {\n  [PostDefSetup__symbol]?: PostDefSetup<T>;\n}\n\n/**\n * @internal\n */\nexport function postDefSetup<T extends object>(componentType: PostDefComponentClass<T>): PostDefSetup<T> {\n  // eslint-disable-next-line no-prototype-builtins\n  if (componentType.hasOwnProperty(PostDefSetup__symbol)) {\n    return componentType[PostDefSetup__symbol] as PostDefSetup<T>;\n  }\n\n  const tracker = trackValue<DefinitionSetup<T>>();\n  const emitter = new EventEmitter<[DefinitionSetup]>();\n  const onSetup: OnEvent<[DefinitionSetup<T>]> = tracker.read().thru(setup => setup ? nextArgs(setup) : nextSkip());\n  const on = onAny(onSetup, emitter);\n  const superType = superClassOf(componentType, type => ComponentDef__symbol in type);\n\n  if (superType) {\n\n    const superPostDefSetup = postDefSetup(superType);\n\n    on.to(setup => superPostDefSetup.send(setup));\n  }\n\n  const result: PostDefSetup<T> = {\n    on,\n    send(setup) {\n      emitter.send(setup);\n    },\n    setup(setup) {\n      tracker.it = setup;\n    },\n  };\n\n  Object.defineProperty(componentType, PostDefSetup__symbol, { value: result });\n\n  return result;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { SingleContextKey, SingleContextRef } from '@proc7ts/context-values';\n\n/**\n * A window the components bootstrap is performed against.\n *\n * @category Core\n */\nexport type BootstrapWindow = Window & typeof globalThis;\n\n/**\n * A key of bootstrap context value containing a window instance the bootstrap is performed against.\n *\n * Target value defaults to current window.\n *\n * @category Core\n */\nexport const BootstrapWindow: SingleContextRef<BootstrapWindow> = (/*#__PURE__*/ new SingleContextKey(\n    'window',\n    {\n      byDefault() {\n        return window;\n      },\n    },\n));\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { SingleContextKey, SingleContextRef } from '@proc7ts/context-values';\nimport { BootstrapWindow } from './bootstrap-window';\n\n/**\n * A window (e.g. DOM) element all bootstrapped components belong to.\n *\n * @category Core\n */\nexport type BootstrapRoot = Element;\n\n/**\n * A key of bootstrap context value containing a bootstrap root.\n *\n * Target value defaults to document body of [[BootstrapWindow]].\n *\n * @category Core\n */\nexport const BootstrapRoot: SingleContextRef<BootstrapRoot> = (/*#__PURE__*/ new SingleContextKey(\n    'bootstrap-root',\n    {\n      byDefault(ctx) {\n        return ctx.get(BootstrapWindow).document.body;\n      },\n    },\n));\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { SingleContextKey, SingleContextRef } from '@proc7ts/context-values';\nimport { NamespaceAliaser } from '@proc7ts/namespace-aliaser';\n\n/**\n * Namespace aliaser used by default.\n *\n * Maps namespaces to their unique aliases.\n *\n * @category Core\n */\nexport type DefaultNamespaceAliaser = NamespaceAliaser;\n\n/**\n * A key of bootstrap context value containing the default namespace aliaser.\n *\n * @category Core\n */\nexport const DefaultNamespaceAliaser: SingleContextRef<DefaultNamespaceAliaser> = (\n    /*#__PURE__*/ new SingleContextKey<DefaultNamespaceAliaser>('default-namespace-aliaser')\n);\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextValues, ContextValueSlot } from '@proc7ts/context-values';\nimport { contextDestroyed, ContextUpKey, ContextUpRef } from '@proc7ts/context-values/updatable';\nimport { AfterEvent, afterThe, EventKeeper, nextAfterEvent } from '@proc7ts/fun-events';\nimport { newRenderSchedule, RenderScheduler } from '@proc7ts/render-scheduler';\nimport { BootstrapWindow } from './bootstrap-window';\n\n/**\n * Default rendering tasks scheduler.\n *\n * @category Core\n */\nexport type DefaultRenderScheduler = RenderScheduler;\n\n/**\n * @internal\n */\nclass DefaultRenderSchedulerKey extends ContextUpKey<DefaultRenderScheduler, RenderScheduler> {\n\n  readonly upKey: ContextUpKey.UpKey<DefaultRenderScheduler, RenderScheduler>;\n\n  constructor() {\n    super('default-render-scheduler');\n    this.upKey = this.createUpKey(\n        slot => slot.insert(slot.seed.keepThru(\n            (...fns) => {\n              if (fns.length) {\n                return toDefaultRenderScheduler(slot.context, fns[fns.length - 1]);\n              }\n              if (slot.hasFallback && slot.or) {\n                return nextAfterEvent(slot.or);\n              }\n              return toDefaultRenderScheduler(slot.context, newRenderSchedule);\n            },\n        )),\n    );\n  }\n\n  grow(\n      slot: ContextValueSlot<\n          DefaultRenderScheduler,\n          EventKeeper<RenderScheduler[]> | RenderScheduler,\n          AfterEvent<RenderScheduler[]>>,\n  ): void {\n\n    let delegated: DefaultRenderScheduler;\n\n    slot.context.get(\n        this.upKey,\n        slot.hasFallback ? { or: slot.or != null ? afterThe(slot.or) : slot.or } : undefined,\n    )!.to(\n        scheduler => delegated = toDefaultRenderScheduler(slot.context, scheduler),\n    ).whenOff(\n        reason => delegated = contextDestroyed(reason),\n    );\n\n    slot.insert((...args) => delegated(...args));\n  }\n\n}\n\n/**\n * @internal\n */\nfunction toDefaultRenderScheduler(\n    context: ContextValues,\n    scheduler: RenderScheduler,\n): DefaultRenderScheduler {\n  return (options = {}) => scheduler({\n    ...options,\n    window: options.window || context.get(BootstrapWindow),\n  });\n}\n\n/**\n * A key of bootstrap, definition, or component context value containing [[DefaultRenderScheduler]] instance.\n *\n * Uses the default `RenderScheduler` (`newRenderSchedule()`) for {@link BootstrapWindow bootstrap window}.\n *\n * @category Core\n */\nexport const DefaultRenderScheduler: ContextUpRef<DefaultRenderScheduler, RenderScheduler> = (\n    /*#__PURE__*/ new DefaultRenderSchedulerKey()\n);\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextValueSlot } from '@proc7ts/context-values';\nimport { contextDestroyed, ContextUpKey, ContextUpRef } from '@proc7ts/context-values/updatable';\nimport { AfterEvent, afterThe, EventKeeper, nextAfterEvent } from '@proc7ts/fun-events';\nimport { ComponentContext, ComponentContext__symbol } from '../../component';\n\n/**\n * Element adapter is a function able to convert a raw element to component. E.g. mount a component to it.\n *\n * Features may use it internally. E.g. an `AutoConnectSupport` applies it to each added DOM element.\n *\n * Multiple element adapters can be registered in bootstrap context.\n *\n * @category Core\n */\nexport type ElementAdapter =\n/**\n * @param element  Target raw element to adapt.\n *\n * @returns An adapted component's context, or `undefined` if element can not be adapted.\n */\n    (this: void, element: any) => ComponentContext | undefined;\n\n/**\n * @internal\n */\nclass ElementAdapterKey extends ContextUpKey<ElementAdapter, ElementAdapter> {\n\n  readonly upKey: ContextUpKey.UpKey<ElementAdapter, ElementAdapter>;\n\n  constructor() {\n    super('element-adapter');\n    this.upKey = this.createUpKey(\n        slot => slot.insert(slot.seed.keepThru((...adapters) => {\n\n          const combined: ElementAdapter = adapters.reduce(\n              (prev, adapter) => element => prev(element) || adapter(element),\n              defaultElementAdapter,\n          );\n\n          if (combined !== defaultElementAdapter) {\n            return combined;\n          }\n          if (slot.hasFallback && slot.or) {\n            return nextAfterEvent(slot.or);\n          }\n\n          return defaultElementAdapter;\n        })),\n    );\n  }\n\n  grow(\n      slot: ContextValueSlot<\n          ElementAdapter,\n          EventKeeper<ElementAdapter[]> | ElementAdapter,\n          AfterEvent<ElementAdapter[]>>,\n  ): void {\n\n    let delegated: ElementAdapter;\n\n    slot.context.get(\n        this.upKey,\n        slot.hasFallback ? { or: slot.or != null ? afterThe(slot.or) : slot.or } : undefined,\n    )!.to(\n        adapter => delegated = adapter,\n    ).whenOff(\n        reason => delegated = contextDestroyed(reason),\n    );\n\n    slot.insert(element => delegated(element));\n  }\n\n}\n\n/**\n * @internal\n */\nfunction defaultElementAdapter(element: any): ComponentContext | undefined {\n  return element[ComponentContext__symbol] as ComponentContext | undefined;\n}\n\n/**\n * A key of bootstrap context value containing combined [[ElementAdapter]] instance.\n *\n * @category Core\n */\nexport const ElementAdapter: ContextUpRef<ElementAdapter, ElementAdapter> = (/*#__PURE__*/ new ElementAdapterKey());\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { filterIt, itsEach, overArray } from '@proc7ts/a-iterable';\nimport { FnContextKey } from '@proc7ts/context-values/updatable';\nimport { isElement } from '../../common';\nimport { ComponentContext__symbol, ComponentMount } from '../../component';\nimport { bootstrapDefault } from '../bootstrap-default';\nimport { ElementAdapter } from './element-adapter';\n\n/**\n * Element mutations observer.\n *\n * It is a `MutationObserver` implementation that:\n * - always observes target's children,\n * - applies {@link ElementAdapter element adapter} to added elements,\n * - tracks mounted components {@link ComponentMount.connected connection state}.\n *\n * A function constructing element observer instance could be obtained from bootstrap context.\n *\n * @category Core\n */\nexport interface ElementObserver extends MutationObserver {\n\n  /**\n   * Configures the observer callback to begin receiving notifications of changes to the DOM that match the given\n   * options.\n   * To stop the MutationObserver (so that none of its callbacks will be triggered any longer), call\n   * [[disconnect]].\n   *\n   * @param target  A DOM node within the DOM tree to watch for changes, and to be the root of a subtree of nodes\n   * to be watched.\n   * @param options  An options that describe what DOM mutations should be reported to the observer's callback.\n   */\n  observe(target: Node, options?: ElementObserverInit): void;\n\n}\n\n/**\n * A key of bootstrap context value containing a function constructing a new [[ElementObserver]] instance.\n *\n * @category Core\n */\nexport const ElementObserver: FnContextKey<[MutationCallback], ElementObserver> = (/*#__PURE__*/ new FnContextKey(\n    'element-observer',\n    {\n      byDefault: bootstrapDefault(bsContext => {\n\n        const adapter = bsContext.get(ElementAdapter);\n        class DefaultElementObserver extends MutationObserver implements ElementObserver {\n\n          constructor(callback: MutationCallback) {\n            super(mutations => {\n              mutations.forEach(mutation => {\n                itsEach(\n                    overArray(mutation.removedNodes),\n                    node => mountOf(node)?.checkConnected(),\n                );\n                itsEach(\n                    filterIt(\n                        overArray(mutation.addedNodes),\n                        isElement,\n                    ),\n                    element => adapter(element)?.mount?.checkConnected(),\n                );\n              });\n              callback(mutations, this);\n            });\n          }\n\n          observe(target: Node, options?: ElementObserverInit): void {\n            super.observe(target, { ...options, childList: true });\n          }\n\n        }\n\n        return callback => new DefaultElementObserver(callback);\n      }),\n    },\n));\n\n/**\n * Element observer initialization options.\n *\n * @category Core\n */\nexport interface ElementObserverInit extends MutationObserverInit {\n\n  /**\n   * Whether mutations to target's children are to be observed.\n   *\n   * Always `true`.\n   */\n  childList?: true;\n\n}\n\n/**\n * @internal\n */\nfunction mountOf(node: any): ComponentMount | undefined {\n  return node[ComponentContext__symbol]?.mount as ComponentMount | undefined;\n}\n","import { ComponentClass, DefinitionContext } from '../../component/definition';\n\n/**\n * @internal\n */\nexport const DefinitionContext__symbol = (/*#__PURE__*/ Symbol('definition-context'));\n\n/**\n * @internal\n */\nexport interface ComponentDefinitionClass<T extends object> extends ComponentClass<T> {\n  [DefinitionContext__symbol]?: DefinitionContext<T>;\n}\n\n/**\n * @internal\n */\nexport function definitionContextOf<T extends object>(\n    componentType: ComponentDefinitionClass<T>,\n): DefinitionContext<T> {\n  // eslint-disable-next-line no-prototype-builtins\n  if (!componentType.hasOwnProperty(DefinitionContext__symbol)) {\n    throw new TypeError(`Component is not defined: ${componentType}`);\n  }\n  return componentType[DefinitionContext__symbol] as DefinitionContext<T>;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKey__symbol, SingleContextKey } from '@proc7ts/context-values';\nimport { html__naming, isQualifiedName, QualifiedName } from '@proc7ts/namespace-aliaser';\nimport { Class } from '@proc7ts/primitives';\nimport { BootstrapContext, bootstrapDefault } from '../../boot';\nimport { BootstrapWindow, DefaultNamespaceAliaser } from '../../boot/globals';\nimport { definitionContextOf } from '../../boot/impl/definition-context.symbol.impl';\nimport { PromiseResolver } from '../../common';\nimport { ComponentClass } from './component-class';\n\n/**\n * @internal\n */\nconst CustomElements__key = (/*#__PURE__*/ new SingleContextKey<CustomElements>(\n    'custom-elements',\n    {\n      byDefault: bootstrapDefault(createCustomElements),\n    },\n));\n\n/**\n * Custom elements registry.\n *\n * This is used to register custom elements.\n *\n * Typically implemented by `window.customElements`.\n *\n * @category Core\n */\nexport abstract class CustomElements {\n\n  /**\n   * A key of bootstrap context value containing a `CustomElements` instance used to register custom\n   * elements.\n   *\n   * Target value defaults to `window.customElements` from the window provided under `[BootstrapWindow.key]`.\n   */\n  static get [ContextKey__symbol](): ContextKey<CustomElements> {\n    return CustomElements__key;\n  }\n\n  /**\n   * Defines custom element.\n   *\n   * @param componentTypeOrName  A component class constructor or custom element name. The latter may belong to\n   * namespace to avoid naming conflicts.\n   * @param elementType  A constructor of custom element to define.\n   */\n  abstract define(componentTypeOrName: ComponentClass | QualifiedName, elementType: Class): void;\n\n  /**\n   * Allows to wait for component definition.\n   *\n   * This corresponds to `window.customElements.whenDefined()` method.\n   *\n   * @param componentTypeOrName  Component class constructor or custom element name possibly belonging to some\n   * namespace.\n   *\n   * @return A promise that is resolved when custom element is registered.\n   *\n   * @throws TypeError If `componentType` does not contain a component definition.\n   */\n  abstract whenDefined(componentTypeOrName: ComponentClass | QualifiedName): Promise<void>;\n\n}\n\n/**\n * @internal\n */\nfunction createCustomElements(bsContext: BootstrapContext): CustomElements {\n\n  const customElements: CustomElementRegistry = bsContext.get(BootstrapWindow).customElements;\n  const nsAlias = bsContext.get(DefaultNamespaceAliaser);\n\n  class CustomElements$ extends CustomElements {\n\n    define(componentTypeOrName: ComponentClass | string, elementType: Class): void {\n      if (isQualifiedName(componentTypeOrName)) {\n        customElements.define(html__naming.name(componentTypeOrName, nsAlias), elementType);\n        return;\n      }\n\n      const defContext = definitionContextOf(componentTypeOrName);\n      const { name, extend } = defContext.elementDef;\n\n      if (!name) {\n        componentResolver(componentTypeOrName).resolve(undefined);\n        return; // Anonymous component.\n      }\n      if (extend && extend.name) {\n        customElements.define(\n            html__naming.name(name, nsAlias),\n            elementType,\n            {\n              extends: extend.name,\n            },\n        );\n      } else {\n        customElements.define(html__naming.name(name, nsAlias), elementType);\n      }\n    }\n\n    whenDefined(componentTypeOrName: ComponentClass | string): Promise<void> {\n      if (isQualifiedName(componentTypeOrName)) {\n        return customElements.whenDefined(html__naming.name(componentTypeOrName, nsAlias));\n      }\n\n      const defContext = definitionContextOf(componentTypeOrName);\n      const { name } = defContext.elementDef;\n\n      if (!name) {\n        return componentResolver(componentTypeOrName).promise;\n      }\n\n      return customElements.whenDefined(html__naming.name(name, nsAlias));\n    }\n\n  }\n\n  return new CustomElements$();\n}\n\n/**\n * @internal\n */\nconst ComponentResolver__symbol = (/*#__PURE__*/ Symbol('component-resolver'));\n\n/**\n * @internal\n */\ninterface CustomComponentClass<T extends object = any> extends ComponentClass<T> {\n  [ComponentResolver__symbol]?: PromiseResolver;\n}\n\n/**\n * @internal\n */\nfunction componentResolver(componentType: CustomComponentClass): PromiseResolver {\n  // eslint-disable-next-line no-prototype-builtins\n  if (componentType.hasOwnProperty(ComponentResolver__symbol)) {\n    return componentType[ComponentResolver__symbol] as PromiseResolver;\n  }\n  return componentType[ComponentResolver__symbol] = new PromiseResolver();\n}\n","import { SingleContextKey } from '@proc7ts/context-values';\nimport { DefinitionContext } from './definition-context';\n\n/**\n * @internal\n */\nexport const DefinitionContext__key = (/*#__PURE__*/ new SingleContextKey<DefinitionContext>('definition-context'));\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { SingleContextKey, SingleContextRef } from '@proc7ts/context-values';\nimport { QualifiedName } from '@proc7ts/namespace-aliaser';\nimport { Class } from '@proc7ts/primitives';\nimport { BootstrapWindow } from '../../boot/globals';\nimport { ComponentDef } from '../component-def';\nimport { DefinitionContext__key } from './definition.context.key.impl';\n\n/**\n * Custom element definition meta.\n *\n * @category Core\n */\nexport interface ElementDef {\n\n  /**\n   * Custom element name.\n   *\n   * The name may belong to some namespace to avoid naming conflicts. I.e. it can be either a string, or\n   * name/namespace tuple.\n   *\n   * When omitted an anonymous component will be registered. Such component is not bound to custom element, but it\n   * still can be mounted.\n   */\n  readonly name?: QualifiedName;\n\n  /**\n   * Existing element to extend by custom one.\n   */\n  readonly extend: ElementDef.Extend;\n\n}\n\n/**\n * A key of definition context value containing a custom element definition.\n *\n * Target value defaults to `HTMLElement` from the window provided under `[BootstrapWindow.key]`,\n * unless `ComponentDef.extend.type` is specified.\n */\nexport const ElementDef: SingleContextRef<ElementDef> = (/*#__PURE__*/ new SingleContextKey<ElementDef>(\n    'element-def',\n    {\n      byDefault(values) {\n\n        const componentType = values.get(DefinitionContext__key).componentType;\n        const { name, extend } = ComponentDef.of(componentType);\n\n        const elementExtend: ElementDef.Extend = {\n          get type() {\n            return extend && extend.type || values.get(BootstrapWindow).HTMLElement;\n          },\n          get name() {\n            return extend && extend.name;\n          },\n        };\n\n        return {\n          get name() {\n            return name;\n          },\n          get extend() {\n            return elementExtend;\n          },\n        };\n      },\n    },\n));\n\n/**\n * @category Core\n */\nexport namespace ElementDef {\n\n  /**\n   * The definition of element to extend by custom one.\n   */\n  export interface Extend {\n\n    /**\n     * The class constructor of element to extend.\n     */\n    readonly type: Class;\n\n    /**\n     * The name of element to extend.\n     *\n     * This is to support `as` attribute of standard HTML element. Note that this is not supported by polyfills.\n     */\n    readonly name?: string;\n\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKey__symbol, ContextValues, ContextValueSpec } from '@proc7ts/context-values';\nimport { EventReceiver, EventSupply, OnEvent } from '@proc7ts/fun-events';\nimport { Class } from '@proc7ts/primitives';\nimport { ComponentContext } from '../component-context';\nimport { ComponentMount } from '../component-mount';\nimport { ComponentClass } from './component-class';\nimport { DefinitionContext__key } from './definition.context.key.impl';\nimport { ElementDef } from './element-def';\n\n/**\n * Component definition context.\n *\n * Extends `ContextValues` interface. The values are provided by corresponding providers registered with\n * [[BootstrapSetup.perDefinition]] and [[DefinitionSetup.perDefinition]] methods. All [[BootstrapContext]] values\n * are available too.\n *\n * @category Core\n * @typeparam T  A type of component.\n */\nexport abstract class DefinitionContext<T extends object = any> extends ContextValues {\n\n  /**\n   * A key of definition context value containing the definition context itself.\n   */\n  static get [ContextKey__symbol](): ContextKey<DefinitionContext> {\n    return DefinitionContext__key;\n  }\n\n  /**\n   * Component class constructor.\n   */\n  abstract readonly componentType: ComponentClass<T>;\n\n  /**\n   * Custom element class constructor.\n   *\n   * It is an error accessing this property before the element class is created, e.g. from inside of\n   * `DefinitionListener` or `ComponentDef.define()` function. In these cases you may wish to add a `whenReady()`\n   * callback.\n   */\n  abstract readonly elementType: Class;\n\n  /**\n   * Custom element definition.\n   */\n  get elementDef(): ElementDef {\n    return this.get(ElementDef);\n  }\n\n  /**\n   * Builds an `OnEvent` sender of component definition context upon its readiness.\n   *\n   * The custom element class is not constructed until component definition is complete.\n   * The registered receiver will be notified when the custom element class is constructed.\n   *\n   * If the custom element class is constructed already, the receiver will be notified immediately.\n   *\n   * @returns `OnEvent` sender of this component definition context upon its readiness.\n   */\n  abstract whenReady(): OnEvent<[this]>;\n\n  /**\n   * Registers a receiver of component definition readiness event.\n   *\n   * The custom element class is not constructed until component definition is complete.\n   * The registered receiver will be notified when the custom element class is constructed.\n   *\n   * If the custom element class is constructed already, the receiver will be notified immediately.\n   *\n   * @param receiver  Target receiver of this component definition context upon its readiness.\n   *\n   * @returns Component definition readiness event supply.\n   */\n  abstract whenReady(receiver: EventReceiver<[this]>): EventSupply;\n\n  /**\n   * Mounts a component to arbitrary element.\n   *\n   * This method creates a component, but instead of creating a custom element for, it mounts it to the target\n   * `element`.\n   *\n   * It is up to the features to update the target element. They can use a `ComponentContext.mount` property to check\n   * whether the component is mounted or is constructed in standard way.\n   *\n   * The constructed component will be in disconnected state. To update its connection state either update a\n   * `ComponentMount.connected` property, or use a `connectTo()` method.\n   *\n   * @param element  Target element to mount new component to.\n   *\n   * @returns New component mount.\n   *\n   * @throws Error If target element is already bound to some component.\n   */\n  abstract mountTo(element: any): ComponentMount<T>;\n\n  /**\n   * Connects a component to arbitrary element.\n   *\n   * This method does the same as `mountTo()`, but also marks the mounted component as connected.\n   *\n   * @param element  Target element to mount new component to.\n   *\n   * @returns New component mount.\n   *\n   * @throws Error If target element is already bound to some component.\n   */\n  connectTo(element: any): ComponentMount<T> {\n\n    const mount = this.mountTo(element);\n\n    mount.connect();\n\n    return mount;\n  }\n\n  /**\n   * Builds an `OnEvent` sender of component context upon its instantiation.\n   *\n   * If component instantiated after the receiver is registered, that receiver would receive an instantiated component's\n   * context immediately.\n   *\n   * If component already exists when the receiver is registered, that receiver would receive instantiated component's\n   * context only when/if component is {@link ComponentContext.whenConnected connected}. This is to prevent resource\n   * leaks on destroyed components.\n   *\n   * @returns `OnEvent` sender of instantiated component context.\n   */\n  abstract whenComponent(): OnEvent<[ComponentContext<T>]>;\n\n  /**\n   * Starts sending component instantiation events to the given `receiver`.\n   *\n   * If component instantiated after the receiver is registered, that receiver would receive an instantiated component's\n   * context immediately.\n   *\n   * If component already exists when the receiver is registered, that receiver would receive instantiated component's\n   * context only when/if component is {@link ComponentContext.whenConnected connected}. This is to prevent resource\n   * leaks on destroyed components.\n   *\n   * @param receiver  Target receiver of instantiate component contexts.\n   *\n   * @returns Component instantiation events supply.\n   */\n  abstract whenComponent(receiver: EventReceiver<[ComponentContext<T>]>): EventSupply;\n\n  /**\n   * Provides a value available in the context of each component of the defined component type.\n   *\n   * @typeparam Deps  A type of dependencies.\n   * @typeparam Src  The type of context value sources.\n   * @typeparam Seed  Value seed type.\n   * @param spec  Component context value specifier.\n   *\n   * @returns A function that removes the given context value specifier when called.\n   */\n  abstract perComponent<Deps extends any[], Src, Seed>(\n      spec: ContextValueSpec<ComponentContext<T>, any, Deps, Src, Seed>,\n  ): () => void;\n\n}\n","import { nextArg, nextArgs, nextSkip } from '@proc7ts/call-thru';\nimport {\n  EventReceiver,\n  eventSupply,\n  EventSupply,\n  EventSupply__symbol,\n  eventSupplyOf,\n  OnEvent,\n  trackValue,\n} from '@proc7ts/fun-events';\nimport { valueProvider } from '@proc7ts/primitives';\nimport { ComponentContext, ComponentContext__symbol, ComponentEvent } from '../../component';\nimport { ComponentClass } from '../../component/definition';\nimport { DefinitionContext$ } from './definition-context.impl';\n\nconst enum ComponentStatus {\n  Building,\n  Ready,\n  Built,\n  Settled,\n  Connected,\n}\n\n/**\n * @internal\n */\nexport abstract class ComponentContext$<T extends object> extends ComponentContext<T> {\n\n  readonly get: ComponentContext<T>['get'];\n  private _status = trackValue<ComponentStatus>(ComponentStatus.Building);\n\n  constructor(\n      readonly _definitionContext: DefinitionContext$<T>,\n      readonly element: any,\n  ) {\n    super();\n\n    const registry = _definitionContext._newComponentRegistry();\n\n    registry.provide({ a: ComponentContext, is: this });\n    this.get = registry.newValues().get;\n  }\n\n  get componentType(): ComponentClass<T> {\n    return this._definitionContext.componentType;\n  }\n\n  get component(): T {\n    return this._component();\n  }\n\n  get settled(): boolean {\n    return this._status.it >= ComponentStatus.Settled && !eventSupplyOf(this).isOff;\n  }\n\n  get connected(): boolean {\n    return this._status.it >= ComponentStatus.Connected && !eventSupplyOf(this).isOff;\n  }\n\n  get [EventSupply__symbol](): EventSupply {\n    return eventSupplyOf(this._status);\n  }\n\n  _component(): T {\n    throw new TypeError('Component is not constructed yet. Consider to use a `whenReady()` callback');\n  }\n\n  whenReady(): OnEvent<[this]>;\n  whenReady(receiver: EventReceiver<[this]>): EventSupply;\n  whenReady(receiver?: EventReceiver<[this]>): OnEvent<[this]> | EventSupply {\n    return (this.whenReady = this._status.read().thru_(\n        status => status ? nextArgs(this) : nextSkip(),\n    ).once().F)(receiver);\n  }\n\n  settle(): void {\n    if (this._status.it === ComponentStatus.Built) {\n      // Prevent settling until exiting custom element constructor\n      this._status.it = ComponentStatus.Settled;\n    }\n  }\n\n  whenSettled(): OnEvent<[this]>;\n  whenSettled(receiver: EventReceiver<[this]>): EventSupply;\n  whenSettled(receiver?: EventReceiver<[this]>): OnEvent<[this]> | EventSupply {\n    return (this.whenSettled = this._status.read().thru_(\n        status => status >= ComponentStatus.Settled ? nextArg(this) : nextSkip(),\n    ).once().F)(receiver);\n  }\n\n  whenConnected(): OnEvent<[this]>;\n  whenConnected(receiver: EventReceiver<[this]>): EventSupply;\n  whenConnected(receiver?: EventReceiver<[this]>): OnEvent<[this]> | EventSupply {\n    return (this.whenConnected = this._status.read().thru_(\n        status => status >= ComponentStatus.Connected ? nextArg(this) : nextSkip(),\n    ).once().F)(receiver);\n  }\n\n  destroy(reason?: any): void {\n    try {\n      this._status.done(reason);\n    } finally {\n      delete (this.component as any)[ComponentContext__symbol];\n      delete this.element[ComponentContext__symbol];\n      this._component = componentDestroyed;\n      removeElement(this.element);\n    }\n  }\n\n  _createComponent(): this {\n\n    const whenComponent = this._definitionContext._whenComponent;\n\n    let lastRev = 0;\n\n    this.element[ComponentContext__symbol] = this;\n    whenComponent.readNotifier.once(notifier => lastRev = notifier(this, lastRev));\n    this.whenConnected(() => {\n      whenComponent.readNotifier.to({\n        supply: eventSupply().needs(this),\n        receive: (_, notifier) => {\n          lastRev = notifier(this, lastRev);\n        },\n      });\n    });\n    this._definitionContext._elementBuilder.components.send(this);\n\n    const component = newComponent(this);\n\n    this._component = valueProvider(component);\n    this._status.it = ComponentStatus.Ready; // Issue `whenReady` event\n\n    return this;\n  }\n\n  _connect(): void {\n    this._status.it = ComponentStatus.Connected;\n  }\n\n  _created(): void {\n    if (this._status.it < ComponentStatus.Built) { // Mounted component can be connected already\n      this._status.it = ComponentStatus.Built; // Can settle now\n    }\n    this.whenConnected(\n        () => this.dispatchEvent(new ComponentEvent('wesib:component', { bubbles: true })),\n    );\n  }\n\n}\n\nfunction newComponent<T extends object>(context: ComponentContext<T>): T {\n\n  type ComponentProto = T & {\n    [ComponentContext__symbol]?: ComponentContext<T>;\n  };\n\n  const type = context.componentType;\n  const proto = type.prototype as ComponentProto;\n  const prevContext = proto[ComponentContext__symbol];\n\n  proto[ComponentContext__symbol] = context;\n  try {\n\n    const component = new type(context);\n\n    (component as any)[ComponentContext__symbol] = context;\n\n    return component;\n  } finally {\n    proto[ComponentContext__symbol] = prevContext;\n  }\n}\n\nfunction removeElement(element: Element): void {\n\n  const { parentNode } = element;\n\n  if (parentNode) {\n    parentNode.removeChild(element);\n  }\n}\n\nfunction componentDestroyed(): never {\n  throw new TypeError('Component destroyed already');\n}\n","import { ComponentMount } from '../../component';\nimport { ComponentContext$ } from './component-context.impl';\nimport { DefinitionContext$ } from './definition-context.impl';\n\nclass ComponentMount$<T extends object> extends ComponentMount<T> {\n\n  constructor(readonly context: ComponentContext$<T>) {\n    super();\n  }\n\n  get connected(): boolean {\n    return this.context.connected;\n  }\n\n  connect(): void {\n    this.context._connect();\n  }\n\n  checkConnected(): boolean {\n\n    const el = this.context.element as Element;\n    const doc = el.ownerDocument;\n    const connected = doc != null && doc.contains(el);\n\n    if (connected !== this.connected) {\n      if (connected) {\n        this.connect();\n      } else {\n        this.context.destroy();\n      }\n    }\n\n    return connected;\n  }\n\n}\n\n/**\n * @internal\n */\nexport class MountComponentContext$<T extends object> extends ComponentContext$<T> {\n\n  readonly mount: ComponentMount<T>;\n\n  constructor(definitionContext: DefinitionContext$<T>, element: any) {\n    super(definitionContext, element);\n    this.mount = this.mount = new ComponentMount$<T>(this);\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ComponentContext } from './component-context';\n\n/**\n * A mount of the component to an element.\n *\n * This is constructed when a component is mounted to arbitrary element by [[DefinitionContext.mountTo]] method.\n *\n * Mounted components do not maintain their connection state automatically. It is a calling code responsibility to set\n * their connection state by updating [[ComponentMount.connected]] property. E.g. by calling a\n * [[ComponentMount.checkConnected]] method. An [[ElementObserver]] and [[AutoConnectSupport]] feature could be used to\n * do it automatically.\n *\n * @category Core\n * @typeparam T  A type of component.\n */\nexport abstract class ComponentMount<T extends object = any> {\n\n  /**\n   * Mounted component context.\n   */\n  abstract readonly context: ComponentContext<T>;\n\n  /**\n   * Component connection state.\n   *\n   * The initial state is set by [[checkConnected]] method.\n   */\n  abstract readonly connected: boolean;\n\n  /**\n   * Mounted component.\n   */\n  get component(): T {\n    return this.context.component;\n  }\n\n  /**\n   * An element the component is mounted to.\n   */\n  get element(): any {\n    return this.context.element as unknown;\n  }\n\n  /**\n   * Forcibly connects mounted component element to the document.\n   */\n  abstract connect(): void;\n\n  /**\n   * Checks whether the mounted component element is actually connected to its owning document.\n   *\n   * Updates the `connected` property and returns its value.\n   *\n   * When component is disconnected after it has been connected, the component is {@link ComponentContext.destroy\n   * destroyed}.\n   *\n   * @returns `true` if the component element is connected, or `false` otherwise.\n   */\n  abstract checkConnected(): boolean;\n\n}\n","import { Class } from '@proc7ts/primitives';\nimport { CustomElementClass } from '../../common';\nimport { ComponentContext__symbol } from '../../component';\nimport { ElementDef } from '../../component/definition';\nimport { ComponentContext$ } from './component-context.impl';\nimport { DefinitionContext$ } from './definition-context.impl';\n\nclass CustomComponentContext$<T extends object> extends ComponentContext$<T> {\n\n  get mount(): undefined {\n    return;\n  }\n\n}\n\n/**\n * @internal\n */\nexport function customElementType<T extends object>(\n    definitionContext: DefinitionContext$<T>,\n): Class {\n\n  const elementDef = definitionContext.get(ElementDef);\n\n  class CustomElement$ extends (elementDef.extend.type as CustomElementClass) {\n\n    // Component context reference\n    [ComponentContext__symbol]: CustomComponentContext$<T>;\n\n    constructor() {\n      super();\n\n      const context = new CustomComponentContext$(definitionContext, this);\n\n      context._createComponent();\n      context._created();\n    }\n\n    connectedCallback(): void {\n      super.connectedCallback?.();\n      this[ComponentContext__symbol]._connect();\n    }\n\n    disconnectedCallback(): void {\n      this[ComponentContext__symbol].destroy();\n      super.disconnectedCallback?.();\n    }\n\n  }\n\n  return CustomElement$;\n}\n","import { AfterEvent, EventEmitter, OnEvent, onEventBy, trackValue } from '@proc7ts/fun-events';\nimport { ComponentContext } from '../../component';\n\nexport class WhenComponent<T extends object> {\n\n  readonly onCreated: OnEvent<[ComponentContext<T>]>;\n  readonly readNotifier: AfterEvent<[ComponentNotifier<T>]>;\n\n  constructor() {\n\n    const currentRev = trackValue(0);\n    const created = new EventEmitter<[ComponentContext<T>, number]>();\n\n    this.onCreated = onEventBy(receiver => {\n\n      const receiverRev = currentRev.it + 1;\n\n      created.on({\n        supply: receiver.supply,\n        receive: (eventContext, componentContext, notifiedRev) => {\n          if (notifiedRev < receiverRev) {\n            // Notify only receivers added after the last notification\n            receiver.receive(\n                {\n                  onRecurrent(recurrentReceiver) {\n                    eventContext.onRecurrent(recurrentContext => recurrentReceiver(recurrentContext));\n                  },\n                },\n                componentContext,\n            );\n          }\n        },\n      });\n\n      ++currentRev.it;\n    });\n    this.readNotifier = currentRev.read().keepThru_(\n        rev => (context, notifiedRev) => {\n          created.send(context, notifiedRev);\n          return rev;\n        },\n    );\n  }\n\n}\n\nexport type ComponentNotifier<T extends object> = (\n    this: void,\n    context: ComponentContext<T>,\n    notifiedRev: number,\n) => number;\n","import { nextArgs, nextSkip } from '@proc7ts/call-thru';\nimport { ContextValues, ContextValueSpec } from '@proc7ts/context-values';\nimport { EventReceiver, EventSupply, OnEvent, trackValue, ValueTracker } from '@proc7ts/fun-events';\nimport { Class, valueProvider } from '@proc7ts/primitives';\nimport { ComponentContext, ComponentContext__symbol, ComponentDef, ComponentMount } from '../../component';\nimport { DefinitionContext, DefinitionSetup } from '../../component/definition';\nimport { BootstrapContext } from '../bootstrap-context';\nimport { ComponentContextRegistry } from './component-context-registry.impl';\nimport { MountComponentContext$ } from './component-mount.impl';\nimport { customElementType } from './custom-element.impl';\nimport { DefinitionContextRegistry } from './definition-context-registry.impl';\nimport { ComponentDefinitionClass, DefinitionContext__symbol } from './definition-context.symbol.impl';\nimport { ElementBuilder } from './element-builder.impl';\nimport { postDefSetup } from './post-def-setup.impl';\nimport { WhenComponent } from './when-component.impl';\n\n/**\n * @internal\n */\nexport class DefinitionContext$<T extends object> extends DefinitionContext<T> {\n\n  readonly get: ContextValues['get'];\n  private readonly _def: ComponentDef.Options<T>;\n  readonly _whenComponent = new WhenComponent<T>();\n  private readonly _ready: ValueTracker<boolean>;\n  private readonly _whenReady: OnEvent<[]>;\n  private readonly _perTypeRegistry: ComponentContextRegistry;\n\n  constructor(\n      readonly _bsContext: BootstrapContext,\n      readonly _elementBuilder: ElementBuilder,\n      readonly componentType: ComponentDefinitionClass<T>,\n  ) {\n    super();\n    this._ready = trackValue(false);\n    this._whenReady = this._ready.read().thru(ready => ready ? nextArgs() : nextSkip());\n    this._def = ComponentDef.of(componentType);\n\n    const definitionContextRegistry = new DefinitionContextRegistry(\n        _bsContext.get(DefinitionContextRegistry).seedIn(this),\n    );\n\n    definitionContextRegistry.provide({ a: DefinitionContext, is: this });\n    this.get = definitionContextRegistry.newValues().get;\n    this._perTypeRegistry = new ComponentContextRegistry(definitionContextRegistry.seedIn(this));\n\n    const whenReady$ = this.whenReady().F;\n    const whenComponent$ = this.whenComponent().F;\n\n    const definitionSetup: DefinitionSetup<T> = {\n      get componentType() {\n        return componentType;\n      },\n      get whenReady() {\n        return whenReady$;\n      },\n      get whenComponent() {\n        return whenComponent$;\n      },\n      perDefinition: spec => definitionContextRegistry.provide(spec),\n      perComponent: spec => this._perTypeRegistry.provide(spec),\n    };\n\n    this._def.setup?.(definitionSetup);\n    postDefSetup(componentType).setup(definitionSetup);\n  }\n\n  get elementType(): Class {\n    return this._elementType();\n  }\n\n  whenReady(): OnEvent<[this]>;\n  whenReady(receiver: EventReceiver<[this]>): EventSupply;\n  whenReady(receiver?: EventReceiver<[this]>): EventSupply | OnEvent<[this]> {\n    return (this.whenReady = (this._whenReady.thru_(valueProvider(this)).once() as OnEvent<[this]>).F)(receiver);\n  }\n\n  mountTo(element: any): ComponentMount<T> {\n    if (element[ComponentContext__symbol]) {\n      throw new Error(`Element ${String(element)} already bound to component`);\n    }\n\n    const context = new MountComponentContext$(this, element);\n\n    context._createComponent();\n\n    const { mount } = context;\n\n    mount.checkConnected();\n    context._created();\n    context.settle();\n\n    return mount;\n  }\n\n  whenComponent(): OnEvent<[ComponentContext<T>]>;\n  whenComponent(receiver: EventReceiver<[ComponentContext<T>]>): EventSupply;\n  whenComponent(receiver?: EventReceiver<[ComponentContext<T>]>): OnEvent<[ComponentContext<T>]> | EventSupply {\n    return (this.whenComponent = this._whenComponent.onCreated.F)(receiver);\n  }\n\n  perComponent<Deps extends any[], Src, Seed>(\n      spec: ContextValueSpec<ComponentContext<T>, any, Deps, Src, Seed>,\n  ): () => void {\n    return this._perTypeRegistry.provide(spec);\n  }\n\n  _newComponentRegistry(): ComponentContextRegistry {\n    return this._bsContext.get(ComponentContextRegistry).append(this._perTypeRegistry);\n  }\n\n  _elementType(): Class {\n    throw new Error('Custom element class is not constructed yet. Consider to use a `whenReady()` callback');\n  }\n\n  _define(): void {\n    this._def.define?.(this);\n    this._elementBuilder.definitions.send(this);\n    this._elementType = valueProvider(customElementType(this));\n    this.componentType[DefinitionContext__symbol] = this;\n    this._ready.it = true;\n  }\n\n}\n","import { SingleContextKey, SingleContextRef } from '@proc7ts/context-values';\nimport { EventEmitter } from '@proc7ts/fun-events';\nimport { ComponentContext } from '../../component';\nimport { ComponentClass, DefinitionContext } from '../../component/definition';\nimport { BootstrapContext } from '../bootstrap-context';\nimport { bootstrapDefault } from '../bootstrap-default';\nimport { DefinitionContext$ } from './definition-context.impl';\n\n/**\n * @internal\n */\nexport interface ElementBuilder {\n  readonly definitions: EventEmitter<[DefinitionContext]>;\n  readonly components: EventEmitter<[ComponentContext]>;\n  buildElement<T extends object>(this: void, componentType: ComponentClass<T>): DefinitionContext<T>;\n}\n\n/**\n * @internal\n */\nexport const ElementBuilder: SingleContextRef<ElementBuilder> = (/*#__PURE__*/ new SingleContextKey<ElementBuilder>(\n    'element-builder',\n    {\n      byDefault: bootstrapDefault(newElementBuilder),\n    },\n));\n\nfunction newElementBuilder(bsContext: BootstrapContext): ElementBuilder {\n  return {\n    definitions: new EventEmitter<[DefinitionContext]>(),\n    components: new EventEmitter<[ComponentContext]>(),\n    buildElement<T extends object>(componentType: ComponentClass<T>) {\n\n      const definitionContext = new DefinitionContext$(bsContext, this, componentType);\n\n      definitionContext._define();\n\n      return definitionContext;\n    },\n  };\n\n}\n","import { itsEach, overArray } from '@proc7ts/a-iterable';\nimport { EventSupply, eventSupply } from '@proc7ts/fun-events';\nimport { noop, valueProvider } from '@proc7ts/primitives';\n\n/**\n * @internal\n */\nexport interface Unloader {\n  readonly supply: EventSupply;\n  add(adder: () => () => void): () => void;\n}\n\nconst doNotAdd = valueProvider(noop);\n\n/**\n * @internal\n */\nexport function newUnloader(): Unloader {\n\n  const unloads: (() => void)[] = [];\n  let add = (adder: () => () => void): () => void => {\n\n    const unload = adder();\n\n    unloads.push(unload);\n\n    return unload;\n  };\n  const supply = eventSupply(() => {\n    add = doNotAdd;\n    itsEach(\n        overArray(unloads).reverse(),\n        unload => unload(),\n    );\n    unloads.length = 0;\n  });\n\n  return {\n    supply,\n    add(adder) {\n      return add(adder);\n    },\n  };\n}\n","import { ElementBuilder } from '../../boot/impl';\nimport { ComponentClass, CustomElements } from '../../component/definition';\nimport { FeatureContext } from '../feature-context';\n\n/**\n * @internal\n */\nexport class ComponentRegistry {\n\n  private _definitionQueue: (() => void)[] = [];\n\n  constructor(private readonly _context: FeatureContext) {\n    _context.whenReady(() => {\n      this._definitionQueue.forEach(definition => definition());\n      delete this._definitionQueue;\n    });\n  }\n\n  get customElements(): CustomElements {\n    return this._context.get(CustomElements);\n  }\n\n  define<T extends object>(componentType: ComponentClass<T>): void {\n    this._definitionQueue.push(() => {\n\n      const elementBuilder = this._context.get(ElementBuilder);\n      const defContext = elementBuilder.buildElement(componentType);\n\n      this.customElements.define(componentType, defContext.elementType);\n    });\n  }\n\n}\n","import { nextArg, nextSkip } from '@proc7ts/call-thru';\nimport { ContextRegistry, ContextValueSpec } from '@proc7ts/context-values';\nimport { afterAll, EventReceiver, EventSupply, OnEvent, trackValue } from '@proc7ts/fun-events';\nimport { Class } from '@proc7ts/primitives';\nimport { BootstrapContext } from '../../boot';\nimport {\n  BootstrapContextRegistry,\n  ComponentContextRegistry,\n  DefinitionContextRegistry,\n  ElementBuilder,\n  newUnloader,\n  onPostDefSetup,\n} from '../../boot/impl';\nimport { ComponentContext } from '../../component';\nimport { ComponentClass, DefinitionContext, DefinitionSetup } from '../../component/definition';\nimport { FeatureContext } from '../feature-context';\nimport { ComponentRegistry } from './component-registry.impl';\nimport { FeatureLoader } from './feature-loader.impl';\n\n/**\n * @internal\n */\nexport class FeatureContext$ extends FeatureContext {\n\n  readonly _unloader = newUnloader();\n  readonly get: FeatureContext['get'];\n  private readonly _componentRegistry: ComponentRegistry;\n\n  constructor(\n      private readonly _bsContext: BootstrapContext,\n      private readonly _loader: FeatureLoader,\n  ) {\n    super();\n\n    const registry = new ContextRegistry<FeatureContext>(_bsContext);\n\n    registry.provide({ a: FeatureContext, is: this });\n    this.get = registry.newValues().get;\n    this._componentRegistry = new ComponentRegistry(this);\n  }\n\n  get feature(): Class {\n    return this._loader.request.feature;\n  }\n\n  whenReady(): OnEvent<[FeatureContext]>;\n  whenReady(receiver: EventReceiver<[FeatureContext]>): EventSupply;\n  whenReady(receiver?: EventReceiver<[FeatureContext]>): OnEvent<[FeatureContext]> | EventSupply {\n    return (this.whenReady = afterAll({\n      st: this._loader.state,\n      bs: trackValue<BootstrapContext>().by(this._bsContext.whenReady()),\n    }).thru(\n        ({\n          st: [ready],\n          bs: [bs],\n        }) => bs && ready ? nextArg(this) : nextSkip(),\n    ).once().F)(receiver);\n  }\n\n  onDefinition(): OnEvent<[DefinitionContext]>;\n  onDefinition(receiver: EventReceiver<[DefinitionContext]>): EventSupply;\n  onDefinition(receiver?: EventReceiver<[DefinitionContext]>): OnEvent<[DefinitionContext]> | EventSupply {\n    return (this.onDefinition = this._bsContext.get(ElementBuilder).definitions.on()\n        .tillOff(this._unloader.supply).F)(receiver);\n  }\n\n  onComponent(): OnEvent<[ComponentContext]>;\n  onComponent(receiver: EventReceiver<[ComponentContext]>): EventSupply;\n  onComponent(receiver?: EventReceiver<[ComponentContext]>): EventSupply | OnEvent<[ComponentContext]> {\n    return (this.onComponent = this._bsContext.get(ElementBuilder).components.on()\n        .tillOff(this._unloader.supply).F)(receiver);\n  }\n\n  provide<Deps extends any[], Src, Seed>(\n      spec: ContextValueSpec<BootstrapContext, any, Deps, Src, Seed>,\n  ): () => void {\n    return this._unloader.add(() => this._bsContext.get(BootstrapContextRegistry).provide(spec));\n  }\n\n  perDefinition<Deps extends any[], Src, Seed>(\n      spec: ContextValueSpec<DefinitionContext, any, Deps, Src, Seed>,\n  ): () => void {\n    return this._unloader.add(() => this._bsContext.get(DefinitionContextRegistry).provide(spec));\n  }\n\n  perComponent<Deps extends any[], Src, Seed>(\n      spec: ContextValueSpec<ComponentContext, any, Deps, Src, Seed>,\n  ): () => void {\n    return this._unloader.add(() => this._bsContext.get(ComponentContextRegistry).provide(spec));\n  }\n\n  setupDefinition<T extends object>(componentType: ComponentClass<T>): OnEvent<[DefinitionSetup]> {\n    return onPostDefSetup(componentType, this._unloader);\n  }\n\n  define<T extends object>(componentType: ComponentClass<T>): void {\n    this._componentRegistry.define(componentType);\n  }\n\n}\n","import { filterIt, mapIt } from '@proc7ts/a-iterable';\nimport { nextArgs, NextCall, NextSkip, nextSkip } from '@proc7ts/call-thru';\nimport { ContextValueSlot } from '@proc7ts/context-values';\nimport { ContextUpKey } from '@proc7ts/context-values/updatable';\nimport {\n  afterAll,\n  afterEach,\n  AfterEvent,\n  afterEventBy,\n  afterThe,\n  EventKeeper,\n  nextAfterEvent,\n  OnEventCallChain,\n  trackValue,\n} from '@proc7ts/fun-events';\nimport { Class, isPresent, setOfElements } from '@proc7ts/primitives';\nimport { BootstrapContext } from '../../boot';\nimport { FeatureContext } from '../feature-context';\nimport { FeatureContext$ } from './feature-context.impl';\nimport { FeatureClause, FeatureRequest } from './feature-request.impl';\n\nconst FeatureKey__symbol = (/*#__PURE__*/ Symbol('feature-key'));\n\ninterface FeatureClass extends Class {\n  [FeatureKey__symbol]?: FeatureKey;\n}\n\n/**\n * @internal\n */\nexport class FeatureKey extends ContextUpKey<AfterEvent<[FeatureLoader?]>, FeatureClause> {\n\n  static of(feature: Class): FeatureKey {\n    // eslint-disable-next-line no-prototype-builtins\n    return feature.hasOwnProperty(FeatureKey__symbol)\n        ? ((feature as FeatureClass)[FeatureKey__symbol] as FeatureKey)\n        : ((feature as FeatureClass)[FeatureKey__symbol] = new FeatureKey(feature));\n  }\n\n  get upKey(): this {\n    return this;\n  }\n\n  private constructor(feature: Class) {\n    super(`feature:${feature.name}`);\n  }\n\n  grow(\n      slot: ContextValueSlot<\n          AfterEvent<[FeatureLoader?]>,\n          EventKeeper<FeatureClause[]> | FeatureClause,\n          AfterEvent<FeatureClause[]>>,\n  ): void {\n    slot.insert(loadFeature(\n        slot.context.get(BootstrapContext),\n        slot.seed.keepThru(preferredFeatureClause),\n    ));\n  }\n\n}\n\nfunction preferredFeatureClause(...clauses: FeatureClause[]): FeatureClause | undefined {\n\n  let required = false;\n  let preferred: FeatureClause | undefined;\n\n  for (const clause of clauses) {\n    switch (clause[1]) {\n    case 'is':\n      required = true;\n      if (!preferred) {\n        preferred = clause;\n      }\n      break;\n    case 'has':\n      preferred = clause;\n      break;\n    case 'needs':\n      required = true;\n    }\n  }\n\n  return required ? preferred : undefined;\n}\n\nfunction loadFeature(\n    bsContext: BootstrapContext,\n    from: AfterEvent<[FeatureClause?]>,\n): AfterEvent<[FeatureLoader?]> {\n  return afterEventBy<[FeatureLoader?]>(receiver => {\n\n    let origin: Class | undefined;\n    let source: AfterEvent<[FeatureLoader?]> = afterThe();\n    let stageId: Promise<FeatureStageId> = Promise.resolve('idle');\n\n    return afterAll({\n      clause: from,\n      deps: loadFeatureDeps(bsContext, from),\n    }).keepThru_(({ clause: [clause], deps }): NextCall<OnEventCallChain, [FeatureLoader?]> => {\n      if (!clause) {\n        return nextArgs();\n      }\n\n      const [request, , target] = clause;\n\n      if (request.feature === origin) {\n        return nextAfterEvent(source); // Origin didn't change. Reuse the source.\n      }\n\n      origin = request.feature;\n\n      if (target !== origin) {\n        // Originated from replacement feature provider. Reuse its loader.\n        return nextAfterEvent(source = bsContext.get(FeatureKey.of(origin)).keepThru_(\n            loader => {\n              loader!.to(stageId);\n              stageId = loader!.stage;\n              return loader;\n            },\n        ));\n      }\n\n      // Create feature's own loader\n      const ownLoader = new FeatureLoader(bsContext, request, deps).to(stageId);\n      const ownSource = afterThe(ownLoader);\n\n      return nextAfterEvent(source = afterEventBy<[FeatureLoader]>(\n          rcv => ownSource.to(rcv).whenOff(() => {\n            stageId = ownLoader.unload();\n          }),\n      ).share()); // Can be accessed again when reused\n    }).to(receiver);\n  }).keepThru(\n      preventDuplicateLoader(),\n  );\n}\n\nfunction preventDuplicateLoader():\n    (\n        loader?: FeatureLoader,\n    ) => NextCall<OnEventCallChain, [FeatureLoader?]> | NextSkip {\n\n  let lastLoader: FeatureLoader | null | undefined = null; // Initially `null` to differ from `undefined`\n\n  return (loader?: FeatureLoader) => {\n    if (lastLoader === loader) {\n      return nextSkip();\n    }\n    lastLoader = loader;\n\n    if (!loader) {\n      return nextArgs<[FeatureLoader?]>();\n    }\n\n    return nextArgs<[FeatureLoader?]>(loader);\n  };\n}\n\nfunction loadFeatureDeps(\n    bsContext: BootstrapContext,\n    from: AfterEvent<[FeatureClause?]>,\n): AfterEvent<FeatureLoader[]> {\n  return from.keepThru_(clause => {\n    if (!clause) {\n      return nextArgs();\n    }\n\n    const [{ def }] = clause;\n    const needs = setOfElements(def.needs);\n\n    if (!needs.size) {\n      return nextArgs();\n    }\n\n    return nextAfterEvent(\n        afterEach(\n            ...mapIt(\n                needs,\n                dep => bsContext.get(FeatureKey.of(dep)),\n            ),\n        ).keepThru_(presentFeatureDeps),\n    );\n  });\n}\n\nfunction presentFeatureDeps(...deps: [FeatureLoader?][]): NextCall<OnEventCallChain, FeatureLoader[]> {\n  return nextArgs<FeatureLoader[]>(\n      ...filterIt<FeatureLoader | undefined, FeatureLoader>(\n          mapIt(deps, dep => dep[0]),\n          isPresent,\n      ),\n  );\n}\n\n/**\n * @internal\n */\nexport class FeatureLoader {\n\n  readonly down: Promise<void>;\n  private _stage: Promise<FeatureStage>;\n  private _down!: () => void;\n  readonly state = trackValue(false);\n\n  constructor(\n      readonly bsContext: BootstrapContext,\n      readonly request: FeatureRequest,\n      readonly deps: FeatureLoader[],\n  ) {\n    this.down = new Promise(resolve => this._down = resolve);\n    this._stage = Promise.resolve(new SetupFeatureStage(this));\n  }\n\n  get stage(): Promise<FeatureStageId> {\n    return this._stage.then(stage => stage.after);\n  }\n\n  get ready(): boolean {\n    return this.state.it;\n  }\n\n  to(stageId: Promise<FeatureStageId>): this {\n\n    const lastStage = this._stage;\n\n    this._stage = stageId.then(id => lastStage.then(stage => stage[id]()));\n\n    return this;\n  }\n\n  async setup(): Promise<void> {\n    await (this._stage = this._stage.then(stage => stage.setup()));\n  }\n\n  async init(): Promise<void> {\n    await (this._stage = this._stage.then(stage => stage.init()));\n  }\n\n  async unload(): Promise<FeatureStageId> {\n\n    const prevStage = this._stage;\n\n    delete this._stage; // Unloaded feature should never be accessed again.\n\n    const stage = await prevStage;\n    const stageId = await stage.stop();\n\n    this._down();\n\n    return stageId;\n  }\n\n}\n\ntype FeatureStageId = 'idle' | 'setup' | 'init';\ntype FeatureStageStop = (this: void) => Promise<any>;\n\nabstract class FeatureStage {\n\n  abstract readonly after: FeatureStageId;\n\n  constructor(\n      readonly loader: FeatureLoader,\n      private readonly _stop: FeatureStageStop = () => Promise.resolve(),\n  ) {}\n\n  idle(): Promise<this> {\n    return Promise.resolve(this);\n  }\n\n  abstract setup(): Promise<FeatureStage>;\n\n  abstract init(): Promise<FeatureStage>;\n\n  stop(): Promise<FeatureStageId> {\n    return this._stop().then(() => this.after);\n  }\n\n  protected perDep(action: (dep: FeatureLoader) => Promise<void>): Promise<any> {\n\n    const { deps } = this.loader;\n\n    return Promise.all(deps.map(dep => action(dep)));\n  }\n\n}\n\nclass SetupFeatureStage extends FeatureStage {\n\n  get after(): 'idle' {\n    return 'idle';\n  }\n\n  async setup(): Promise<FeatureStage> {\n    await this.perDep(loader => loader.setup());\n\n    const { bsContext, request: { def } } = this.loader;\n    const context = new FeatureContext$(bsContext, this.loader);\n    const supply = context._unloader.supply;\n\n    def.setup?.(context);\n\n    return new InitFeatureStage(\n        this.loader,\n        context,\n        () => Promise.resolve(supply.off()),\n    );\n  }\n\n  init(): Promise<FeatureStage> {\n    return this.setup().then(stage => stage.init());\n  }\n\n}\n\nclass InitFeatureStage extends FeatureStage {\n\n  get after(): 'setup' {\n    return 'setup';\n  }\n\n  constructor(\n      state: FeatureLoader,\n      private readonly _context: FeatureContext,\n      stop: FeatureStageStop,\n  ) {\n    super(state, stop);\n  }\n\n  setup(): Promise<FeatureStage> {\n    return Promise.resolve(this);\n  }\n\n  async init(): Promise<FeatureStage> {\n    await this.perDep(loader => loader.init());\n\n    const { request: { def } } = this.loader;\n\n    def.init?.(this._context);\n\n    return new ActiveFeatureStage(this);\n  }\n\n}\n\nclass ActiveFeatureStage extends FeatureStage {\n\n  get after(): 'init' {\n    return 'init';\n  }\n\n  constructor(prev: InitFeatureStage) {\n    super(prev.loader, () => prev.stop());\n    prev.loader.state.it = true;\n  }\n\n  setup(): Promise<FeatureStage> {\n    return Promise.resolve(this);\n  }\n\n  init(): Promise<FeatureStage> {\n    return Promise.resolve(this);\n  }\n\n}\n","import { Class, mergeFunctions, setOfElements } from '@proc7ts/primitives';\nimport { ComponentDef, ComponentDef__symbol } from '../../component';\nimport { FeatureDef } from '../feature-def';\nimport { FeatureNeedsError } from '../feature-needs-error';\nimport { FeatureKey } from './feature-loader.impl';\nimport { FeatureRequester } from './feature-requester.impl';\n\n/**\n * @internal\n */\nexport type FeatureClause = [FeatureRequest, 'is' | 'needs' | 'has', Class];\n\n/**\n * @internal\n */\nexport type FeatureNeedClause = [FeatureRequest, 'needs' | 'has', Class];\n\n/**\n * @internal\n */\nexport class FeatureRequest {\n\n  readonly def: FeatureDef.Options;\n  private _uses = 0;\n\n  constructor(\n      private readonly _requester: FeatureRequester,\n      readonly feature: Class,\n      private _revoke: () => void,\n  ) {\n    this.def = featureDef(feature);\n  }\n\n  request(clauses: readonly FeatureNeedClause[]): this {\n\n    const requester = this._requester;\n    const { registry } = requester;\n    const isClause: FeatureClause = [this, 'is', this.feature];\n\n    this._revokeBy(registry.provide({\n      a: FeatureKey.of(this.feature),\n      is: isClause,\n    }));\n\n    for (const feature of setOfElements(this.def.has)) {\n\n      const clause: FeatureNeedClause = [this, 'has', feature];\n\n      this._revokeBy(registry.provide({ a: FeatureKey.of(feature), is: clause }));\n\n      // Request the provided feature _after_ provider\n      const request = requester.request(feature, [...clauses, clause]);\n\n      this._revokeBy(() => request.unuse());\n    }\n\n    for (const feature of setOfElements(this.def.needs)) {\n\n      const clause: FeatureNeedClause = [this, 'needs', feature];\n\n      const request = requester.request(feature, [...clauses, clause]);\n\n      this._revokeBy(() => request.unuse());\n      this._revokeBy(registry.provide({ a: FeatureKey.of(feature), is: clause }));\n    }\n\n    this._uses = 1;\n\n    return this;\n  }\n\n  reuse(clauses: readonly FeatureNeedClause[]): this {\n    if (!this._uses) {\n      throw new FeatureNeedsError(clauses.map(([{ feature }, reason, need]) => [feature, reason, need]));\n    }\n\n    ++this._uses;\n\n    return this;\n  }\n\n  unuse(): void {\n    if (!--this._uses) {\n      this._revoke();\n    }\n  }\n\n  private _revokeBy(revoke: () => void): void {\n    this._revoke = mergeFunctions(revoke, this._revoke);\n  }\n\n}\n\nfunction featureDef(featureType: Class): FeatureDef.Options {\n\n  let def = FeatureDef.of(featureType);\n\n  if (ComponentDef__symbol in featureType) {\n    def = FeatureDef.merge(\n        def,\n        {\n          init(context) {\n            context.define(featureType);\n          },\n        },\n    );\n\n    const { feature } = ComponentDef.of(featureType);\n\n    if (feature) {\n      def = FeatureDef.merge(def, feature);\n    }\n\n  }\n\n  return def;\n}\n\n","import { ContextKey, ContextKey__symbol, SingleContextKey } from '@proc7ts/context-values';\nimport { Class } from '@proc7ts/primitives';\nimport { BootstrapContext, bootstrapDefault } from '../../boot';\nimport { BootstrapContextRegistry } from '../../boot/impl';\nimport { FeatureNeedClause, FeatureRequest } from './feature-request.impl';\n\nconst FeatureRequester__key = (/*#__PURE__*/ new SingleContextKey<FeatureRequester>(\n    'feature-requester',\n    {\n      byDefault: bootstrapDefault(context => new FeatureRequester(context)),\n    },\n));\n\n/**\n * @internal\n */\nexport class FeatureRequester {\n\n  static get [ContextKey__symbol](): ContextKey<FeatureRequester> {\n    return FeatureRequester__key;\n  }\n\n  readonly registry: BootstrapContextRegistry;\n  private readonly _map = new Map<Class, FeatureRequest>();\n\n  constructor(context: BootstrapContext) {\n    this.registry = context.get(BootstrapContextRegistry);\n  }\n\n  request(feature: Class, clauses: readonly FeatureNeedClause[] = []): FeatureRequest {\n\n    const existing = this._map.get(feature);\n\n    if (existing) {\n      return existing.reuse(clauses);\n    }\n\n    const request = new FeatureRequest(this, feature, () => this._map.delete(feature));\n\n    this._map.set(feature, request);\n\n    return request.request(clauses);\n  }\n\n}\n","import { OnEvent, onPromise } from '@proc7ts/fun-events';\nimport { ComponentClass, CustomElements, DefinitionContext } from '../../component/definition';\nimport { BootstrapContext } from '../bootstrap-context';\nimport { definitionContextOf } from './definition-context.symbol.impl';\n\n/**\n * @internal\n */\nexport const WhenDefined__symbol = (/*#__PURE__*/ Symbol('when-defined'));\n\ninterface WhenDefinedComponentClass<T extends object> extends ComponentClass<T> {\n  [WhenDefined__symbol]?: OnEvent<[DefinitionContext<T>]>;\n}\n\n/**\n * @internal\n */\nexport function whenDefined<T extends object>(\n    bsContext: BootstrapContext,\n    componentType: WhenDefinedComponentClass<T>,\n): OnEvent<[DefinitionContext<T>]> {\n  // eslint-disable-next-line no-prototype-builtins\n  if (componentType.hasOwnProperty(WhenDefined__symbol)) {\n    return componentType[WhenDefined__symbol] as OnEvent<[DefinitionContext<T>]>;\n  }\n\n  const result: OnEvent<[DefinitionContext<T>]> = onPromise(\n      Promise.resolve(bsContext.whenReady())\n          .then(() => bsContext.get(CustomElements).whenDefined(componentType))\n          .then(() => definitionContextOf(componentType)),\n  );\n\n  return componentType[WhenDefined__symbol] = result;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\n/**\n * A path to sub-state containing element an attributes.\n *\n * Thus, an attribute state path is always something like `[AttributePath__root, 'attribute-name']`.\n *\n * @category Feature\n */\nexport const AttributePath__root = (/*#__PURE__*/ Symbol('attribute'));\n\n/**\n * A path to the named attribute state.\n *\n * @category Feature\n */\nexport type AttributePath = readonly [keyof AttributePath.RootKeys, string];\n\n/**\n * Constructs a named attribute state path.\n *\n * @category Feature\n * @param name  Target attribute name.\n *\n * @return Attribute state path.\n */\nexport function attributePathTo(name: string): AttributePath {\n  return [AttributePath__root, name];\n}\n\n/**\n * @category Feature\n */\nexport namespace AttributePath {\n  export interface RootKeys {\n    [AttributePath__root]: true;\n  }\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { StatePath } from '@proc7ts/fun-events';\nimport { noop } from '@proc7ts/primitives';\nimport { ComponentContext } from '../../component';\nimport { AttributeUpdateReceiver } from './attribute-def';\nimport { AttributeChangedCallback } from './attribute-descriptor';\nimport { attributePathTo } from './attribute-path';\n\n/**\n * @internal\n */\nexport function attributeStateUpdate<T extends object>(\n    name: string,\n    updateState: boolean | AttributeUpdateReceiver<T> | StatePath = true,\n): AttributeChangedCallback<T> {\n  if (updateState === false) {\n    return noop;\n  }\n  if (updateState === true || typeof updateState === 'function') {\n\n    const path = attributePathTo(name);\n    const update: AttributeUpdateReceiver<T> = updateState === true ? updateAttributeState : updateState;\n\n    return (component: T, newValue, oldValue) => update(component, path, newValue, oldValue);\n  }\n\n  return (component: T, newValue, oldValue) => updateAttributeState(component, updateState, newValue, oldValue);\n}\n\nfunction updateAttributeState<T extends object>(\n    component: T,\n    path: StatePath,\n    newValue: string | null,\n    oldValue: string | null,\n): void {\n  ComponentContext.of(component).updateState(path, newValue, oldValue);\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\n/**\n * Converts property name to _dash-style_ attribute name.\n *\n * - Any ASCII uppercase letter A to Z is transformed into a dash followed by its lowercase counterpart;\n * - other characters are left unchanged.\n *\n * @category Feature\n * @param name  Property name to convert.\n *\n * @returns  _dash-style_ attribute name.\n */\nexport function property2attributeName(name: string): string {\n\n  let result: string | undefined;\n\n  for (let i = 0; i < name.length; ++i) {\n\n    const c = name[i];\n\n    if (c <= 'Z' && c >= 'A') {\n      if (!result) {\n        // Allocate result on first conversion\n        result = name.substring(0, i);\n      }\n      result += '-' + c.toLowerCase();\n    } else if (result) {\n      result += c;\n    }\n  }\n\n  return result || name;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { itsEach } from '@proc7ts/a-iterable';\nimport { ContextRef, SingleContextKey } from '@proc7ts/context-values';\nimport { mergeFunctions } from '@proc7ts/primitives';\nimport { BootstrapWindow } from '../../boot/globals';\nimport { CustomElementClass } from '../../common';\nimport { ComponentContext, ComponentMount } from '../../component';\nimport { DefinitionContext } from '../../component/definition';\nimport { AttributeChangedCallback, AttributeDescriptor } from './attribute-descriptor';\n\n/**\n * A registry of component's element attributes.\n *\n * @category Feature\n */\nexport interface AttributeRegistry {\n\n  /**\n   * Declares component element's attribute.\n   *\n   * @param descriptor  Attribute descriptor.\n   */\n  declareAttribute(descriptor: AttributeDescriptor): void;\n\n}\n\n/**\n * A key of component definition context value containing {@link AttributeRegistry attribute registry}.\n *\n * @category Feature\n */\nexport const AttributeRegistry: ContextRef<AttributeRegistry> = (\n    /*#__PURE__*/ new SingleContextKey<AttributeRegistry>(\n        'attribute-registry',\n        {\n          byDefault(context) {\n            return new AttributeRegistry$(context.get(DefinitionContext));\n          },\n        },\n    )\n);\n\n/**\n * @internal\n */\nclass AttributeRegistry$ implements AttributeRegistry {\n\n  private readonly attrs = new Map<string, AttributeChangedCallback<any>>();\n\n  constructor(private readonly _context: DefinitionContext) {\n    _context.whenReady(({ elementType }) => this.define(elementType as CustomElementClass));\n    _context.whenComponent(({ mount }) => {\n      if (mount) {\n        // Mount element attributes\n        this.mount(mount);\n      }\n    });\n  }\n\n  declareAttribute({ name, change }: AttributeDescriptor): void {\n    this.attrs.set(name, mergeFunctions(this.attrs.get(name), change));\n  }\n\n  private define(elementType: CustomElementClass): void {\n\n    const { attrs } = this;\n\n    if (!attrs.size) {\n      return; // No attributes defined\n    }\n\n    Object.defineProperty(elementType, 'observedAttributes', {\n      configurable: true,\n      enumerable: true,\n      value: observedAttributes(elementType, attrs.keys()),\n    });\n    Object.defineProperty(elementType.prototype, 'attributeChangedCallback', {\n      configurable: true,\n      enumerable: true,\n      value: attributeChangedCallback(elementType, attrs),\n    });\n  }\n\n  private mount(mount: ComponentMount): void {\n\n    const { element } = mount as { element: Element };\n    const { attrs } = this;\n    const attributeFilter = Array.from(attrs.keys());\n\n    if (!attributeFilter.length) {\n      return; // No attributes defined\n    }\n\n    const MutationObserver = this._context.get(BootstrapWindow).MutationObserver;\n    const observer = new MutationObserver(\n        records => records.forEach(\n            record => {\n\n              const attributeName = record.attributeName as string;\n\n              return attrs.get(attributeName)!(\n                  ComponentContext.of(element).component,\n                  element.getAttribute(attributeName),\n                  record.oldValue,\n              );\n            },\n        ),\n    );\n\n    observer.observe(element, {\n      attributes: true,\n      attributeFilter,\n      attributeOldValue: true,\n    });\n  }\n\n}\n\n/**\n * @internal\n */\ntype ElementAttributeChanged = (\n    this: any,\n    name: string,\n    oldValue: string | null,\n    newValue: string | null,\n) => void;\n\n/**\n * @internal\n */\nfunction observedAttributes(\n    elementType: CustomElementClass,\n    attrs: Iterable<string>,\n): readonly string[] {\n\n  const alreadyObserved = (elementType as any).observedAttributes as readonly string[] | undefined;\n\n  if (Array.isArray(alreadyObserved)) {\n\n    const newAttrs = new Set<string>(alreadyObserved);\n\n    itsEach(attrs, attr => newAttrs.add(attr));\n\n    attrs = newAttrs;\n  }\n\n  return Array.from(attrs);\n}\n\n/**\n * @internal\n */\nfunction attributeChangedCallback<T extends object>(\n    elementType: CustomElementClass,\n    attrs: Map<string, AttributeChangedCallback<T>>,\n): ElementAttributeChanged {\n\n  const prevCallback = elementType.prototype.attributeChangedCallback;\n\n  if (!prevCallback) {\n    return function (this: any, name, oldValue, newValue) {\n      attrs.get(name)!(ComponentContext.of<T>(this).component, newValue, oldValue);\n    };\n  }\n\n  return function (this: any, name, oldValue, newValue) {\n\n    const attrChanged = attrs.get(name);\n\n    if (attrChanged) {\n      attrChanged(ComponentContext.of<T>(this).component, newValue, oldValue);\n    } else {\n      prevCallback.call(this, name, oldValue, newValue);\n    }\n  };\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ComponentContext, ComponentProperty, ComponentPropertyDecorator } from '../../component';\nimport { ComponentClass } from '../../component/definition';\nimport { AttributeDef } from './attribute-def';\nimport { parseAttributeDescriptor } from './attribute-descriptor.impl';\nimport { AttributeRegistry } from './attribute-registry';\n\n/**\n * Creates a decorator for component's property that accesses custom element's attribute.\n *\n * The decorated property accesses corresponding attribute on read, and updates it on setting. `null` value corresponds\n * to absent attribute. Setting to `null` removes corresponding attribute.\n *\n * @category Feature\n * @typeparam T  A type of decorated component class.\n * @param def  Attribute definition or just an attribute name (either _camelCase_ or _dash-style_).\n *\n * @return Component property decorator.\n */\nexport function Attribute<T extends ComponentClass>(\n    def?: AttributeDef<InstanceType<T>> | string,\n): ComponentPropertyDecorator<string | null, T> {\n  return ComponentProperty(({ type, key }) => {\n\n    const descriptor = parseAttributeDescriptor(type.prototype, key, def);\n    const { name } = descriptor;\n\n    return {\n      componentDef: {\n        define(defContext) {\n          defContext.get(AttributeRegistry).declareAttribute(descriptor);\n        },\n      },\n      get(component: InstanceType<T>): string | null {\n        return (ComponentContext.of(component).element as Element).getAttribute(name);\n      },\n      set(component: InstanceType<T>, newValue: string | null) {\n\n        const { element } = ComponentContext.of(component) as { element: Element };\n\n        if (newValue != null) {\n          element.setAttribute(name, newValue);\n        } else {\n          element.removeAttribute(name);\n        }\n      },\n    };\n  });\n}\n","import { AttributeDef } from './attribute-def';\nimport { AttributeChangedCallback, AttributeDescriptor } from './attribute-descriptor';\nimport { attributeStateUpdate } from './attribute-state-update.impl';\nimport { property2attributeName } from './property2attribute-name';\n\n/**\n * @internal\n */\nexport function parseAttributeDescriptor<T extends object>(\n    target: T,\n    propertyKey: string | symbol,\n    opts?: AttributeDef<T> | string,\n): AttributeDescriptor<T> {\n\n  let name: string;\n  let change: AttributeChangedCallback<T>;\n\n  if (typeof opts === 'string') {\n    name = property2attributeName(opts);\n    change = attributeStateUpdate(name);\n  } else {\n    if (opts && opts.name) {\n      name = property2attributeName(opts.name);\n    } else if (typeof propertyKey !== 'string') {\n      throw new TypeError(\n          'Attribute name is required as property key is not a string: '\n          + `${target.constructor.name}.prototype.${String(propertyKey)}`,\n      );\n    } else {\n      name = property2attributeName(propertyKey);\n    }\n\n    change = attributeStateUpdate(name, opts && opts.updateState);\n  }\n\n  return { name, change };\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { StatePath } from '@proc7ts/fun-events';\nimport { Class } from '@proc7ts/primitives';\nimport { Component, ComponentDecorator } from '../../component';\nimport { ComponentClass } from '../../component/definition';\nimport { AttributeUpdateReceiver } from './attribute-def';\nimport { AttributeRegistry } from './attribute-registry';\nimport { attributeStateUpdate } from './attribute-state-update.impl';\nimport { property2attributeName } from './property2attribute-name';\n\n/**\n * Creates a component decorator declaring supported custom element's attributes.\n *\n * This decorator automatically enables [[AttributesSupport]] feature.\n *\n * @category Feature\n * @typeparam T  A type of decorated component class.\n * @param items  Attributes definition options.\n *\n * @return New component decorator.\n */\nexport function Attributes<T extends ComponentClass = Class>(\n    ...items: readonly Attributes.Item<InstanceType<T>>[]\n): ComponentDecorator<T> {\n  return Component({\n    define(defContext) {\n\n      const registry = defContext.get(AttributeRegistry);\n\n      for (const item of items) {\n        if (typeof item === 'string') {\n\n          const name = property2attributeName(item);\n\n          registry.declareAttribute({\n            name,\n            change: attributeStateUpdate(name),\n          });\n        } else {\n          for (const [key, updateState] of Object.entries(item)) {\n\n            const name = property2attributeName(key);\n\n            registry.declareAttribute({\n              name,\n              change: attributeStateUpdate(name, updateState),\n            });\n          }\n        }\n      }\n    },\n  });\n}\n\nexport namespace Attributes {\n\n  /**\n   * Attribute definition item.\n   *\n   * This is either an attribute name (_camelCase_ or _dash-style_), or a per-attribute options map.\n   *\n   * @typeparam T  A type of component.\n   */\n  export type Item<T extends object> = Map<T> | string;\n\n  /**\n   * Per-attribute definition options.\n   *\n   * This is a map with attribute names as keys (either _camelCase_ or _dash-style_), and their state update\n   * instructions as values.\n   *\n   * The state update instruction can be one of:\n   * - `false` to not update the component state,\n   * - `true` to update the component state with changed attribute key,\n   * - a state value key to update, or\n   * - an attribute update receiver function with custom state update logic.\n   *\n   * @typeparam T  A type of component.\n   */\n  export interface Map<T extends object> {\n    readonly [name: string]: boolean | StatePath | AttributeUpdateReceiver<T>;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKey__symbol, ContextValueSlot, SimpleContextKey } from '@proc7ts/context-values';\nimport { eventSupplyOf, StateTracker } from '@proc7ts/fun-events';\nimport { ComponentContext, StateUpdater } from '../../component';\n\nclass ComponentStateKey extends SimpleContextKey<ComponentState> {\n\n  constructor() {\n    super('component-state');\n  }\n\n  grow(\n      slot: ContextValueSlot<ComponentState, ComponentState, SimpleContextKey.Seed<ComponentState>>,\n  ): void {\n\n    const provided = slot.seed();\n    let state: ComponentState;\n\n    if (provided != null) {\n      state = provided;\n      slot.insert(state);\n    } else if (slot.hasFallback) {\n      return;\n    } else {\n      state = new ComponentState();\n      eventSupplyOf(slot.context.get(ComponentContext)).whenOff(reason => state.done(reason));\n      slot.insert(state);\n    }\n\n    slot.setup(({ registry }) => {\n      registry.provide({ a: StateUpdater, is: state.update });\n    });\n  }\n\n}\n\n/**\n * @internal\n */\nconst ComponentState__key = (/*#__PURE__*/ new ComponentStateKey());\n\n/**\n * Component state tracker.\n *\n * @category Feature\n */\nexport class ComponentState extends StateTracker {\n\n  static get [ContextKey__symbol](): ContextKey<ComponentState> {\n    return ComponentState__key;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { nextArgs } from '@proc7ts/call-thru';\nimport {\n  EventReceiver,\n  EventSupply,\n  eventSupply,\n  EventSupply__symbol,\n  eventSupplyOf,\n  OnEvent,\n  StatePath,\n  ValueTracker,\n} from '@proc7ts/fun-events';\nimport { ComponentContext } from '../../component';\nimport { ComponentState } from '../state';\nimport { attributePathTo } from './attribute-path';\n\nclass AttributeTracker extends ValueTracker<string | null> {\n\n  readonly [EventSupply__symbol] = eventSupply();\n\n  constructor(\n      private readonly _context: ComponentContext,\n      private readonly _name: string,\n      private readonly _path: StatePath,\n  ) {\n    super();\n  }\n\n  get it(): string | null {\n    return (this._context.element as Element).getAttribute(this._name);\n  }\n\n  set it(value: string | null) {\n    if (!eventSupplyOf(this).isOff) {\n      if (value == null) {\n        (this._context.element as Element).removeAttribute(this._name);\n      } else {\n        (this._context.element as Element).setAttribute(this._name, value);\n      }\n    }\n  }\n\n  on(): OnEvent<[string | null, string | null]>;\n  on(receiver: EventReceiver<[string | null, string | null]>): EventSupply;\n  on(\n      receiver?: EventReceiver<[string | null, string | null]>,\n  ): OnEvent<[string | null, string | null]> | EventSupply {\n    return (this.on = this._context.get(ComponentState).track(this._path).onUpdate().thru(\n        (_path, newValue, oldValue) => nextArgs(newValue, oldValue),\n    ).tillOff(this).F)(receiver);\n  }\n\n}\n\n/**\n * Creates a tracker of custom element's attribute value.\n *\n * Requires [[AttributesSupport]] feature to be enabled and attribute to be defined. E.g. with {@link Attribute\n * @Attribute}, {@link AttributeChanged @AttributeChanged}, or {@link Attributes @Attributes} decorator.\n *\n * @category Feature\n * @param context  Target component context.\n * @param name  Attribute name.\n * @param path  Custom attribute state path.\n *\n * @returns New attribute value tracker.\n */\nexport function trackAttribute(\n    context: ComponentContext,\n    name: string,\n    path: StatePath = attributePathTo(name),\n): ValueTracker<string | null> {\n  return new AttributeTracker(context, name, path);\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\n/**\n * A path to sub-state containing DOM properties.\n *\n * Thus a property state path is always something like `[DomPropertyPath__root, 'property-name']`.\n *\n * @category Feature\n */\nexport const DomPropertyPath__root = (/*#__PURE__*/ Symbol('dom-property'));\n\n/**\n * A path to the named DOM property state.\n *\n * @category Feature\n */\nexport type DomPropertyPath<K extends PropertyKey = PropertyKey> = readonly [keyof DomPropertyPath.RootKeys, K];\n\n/**\n * Constructs a named DOM property state path.\n *\n * @category Feature\n * @param key  Target property key.\n *\n * @return DOM property state path.\n */\nexport function domPropertyPathTo<K extends PropertyKey = PropertyKey>(key: K): DomPropertyPath<K> {\n  return [DomPropertyPath__root, key];\n}\n\n/**\n * @category Feature\n */\nexport namespace DomPropertyPath {\n  export interface RootKeys {\n    [DomPropertyPath__root]: true;\n  }\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { nextArgs, nextSkip } from '@proc7ts/call-thru';\nimport { EventSender, isEventSender, OnEvent, onSupplied, StatePath } from '@proc7ts/fun-events';\nimport { valueByRecipe } from '@proc7ts/primitives';\nimport { ComponentContext } from '../../component';\nimport { ComponentState } from '../state';\n\n/**\n * Element rendering definition.\n *\n * This is either a {@link RenderDef.Spec rendering specifier}, or its {@link RenderDef.Provider provider function}.\n *\n * @category Feature\n */\nexport type RenderDef =\n    | RenderDef.Spec\n    | RenderDef.Provider;\n\nexport namespace RenderDef {\n\n  /**\n   * Rendering options.\n   */\n  export interface Options {\n\n    /**\n     * When to start the rendering.\n     *\n     * One of:\n     * - `settled` (the default) - start rendering when component is {@link ComponentContext.settled settled}.\n     * - `connected` - start rendering when component's element is {@link ComponentContext.connected connected}\n     *   to document.\n     */\n    readonly when?: 'settled' | 'connected';\n\n    /**\n     * Reports rendering error. E.g. a render shot execution failure.\n     *\n     * @param messages  Error messages to report.\n     */\n    error?(...messages: any[]): void;\n\n  }\n\n  /**\n   * Rendering specifier.\n   */\n  export interface Spec extends Options {\n\n    /**\n     * A trigger that issues rendering.\n     *\n     * This can be useful e.g. when component has multiple independent sub-views.\n     *\n     * This can be one of the following:\n     * - A path to component state part the renderer should track. The rendering would trigger only when the target\n     *   state part is updated.\n     * - Arbitrary event sender. The rendering would be triggered on any event from this sender.\n     *\n     * A root state path is tracked when omitted.\n     *\n     * When trigger is a root path (the default value), then the rendering will be triggered by any state update.\n     * Except for updates of sub-states inside {@link RenderPath__root}.\n     */\n    readonly on?: StatePath | EventSender<[]>;\n\n  }\n\n  /**\n   * Rendering specifier provider signature.\n   */\n  export type Provider =\n  /**\n   * @param context  A context of component to render.\n   *\n   * @returns Rendering specifier.\n   */\n      (\n          this: void,\n          context: ComponentContext,\n      ) => RenderDef.Spec;\n\n}\n\n/**\n * A root path to sub-states updates to which will be ignored by default.\n *\n * This can be used to create sub-states that won't trigger rendering occasionally, but only when requested explicitly.\n *\n * @category Feature\n */\nexport const RenderPath__root = (/*#__PURE__*/ Symbol('render'));\n\n/**\n * @category Feature\n */\nexport const RenderDef = {\n\n  /**\n   * Builds a rendering specifier for component by its definition.\n   *\n   * @param context  A context of component to render.\n   * @param def  Arbitrary rendering definition.\n   *\n   * @returns Rendering specifier.\n   */\n  spec(\n      this: void,\n      context: ComponentContext,\n      def: RenderDef,\n  ): RenderDef.Spec {\n    return valueByRecipe(def, context);\n  },\n\n  /**\n   * Fulfills rendering specifier with the given defaults.\n   *\n   * @param base  Base rendering specifier to fulfill.\n   * @param defaults  Defaults that will be applied unless defined in `base` specifier.\n   *\n   * @return `base` rendering specifier fulfilled by `defaults`.\n   */\n  fulfill(this: void, base: RenderDef.Spec, defaults: RenderDef.Spec = {}): RenderDef.Spec {\n\n    const { on = defaults.on, error } = base;\n\n    return {\n      on,\n      error: error ? error.bind(base) : defaults.error && defaults.error.bind(defaults),\n    };\n  },\n\n  /**\n   * Builds a trigger issuing rendering updates.\n   *\n   * @param context  Rendered component context.\n   * @param spec  Rendering specifier.\n   *\n   * @returns `OnEvent` sender that sends an event each time the rendering required.\n   */\n  trigger(\n      this: void,\n      context: ComponentContext,\n      spec: RenderDef.Spec = {},\n  ): OnEvent<[]> {\n\n    const { on = [] } = spec;\n\n    if (typeof on === 'object' && isEventSender(on)) {\n      return onSupplied(on).tillOff(context);\n    }\n\n    const trigger = context\n        .get(ComponentState)\n        .track(on)\n        .onUpdate()\n        .tillOff(context);\n\n    if (Array.isArray(on) && !on.length) {\n      return trigger.thru_(\n          (path: StatePath.Normalized) => path[0] === RenderPath__root ? nextSkip : nextArgs(),\n      );\n    }\n\n    return trigger;\n  },\n\n};\n","/**\n * @packageDocumentation\n * @module @proc7ts/primitives\n */\n\nimport { valueProvider } from './value-providers';\n\n/**\n * A recipe of value evaluation.\n *\n * This is either a value as-is, or its {@link ValueRecipe.Evaluator evaluator} function.\n *\n * @typeparam T  Evaluated value type. This can not be a function.\n * @typeparam P  A type of parameters tuple required for value evaluation.\n */\nexport type ValueRecipe<T, P extends any[] = []> =\n    | T\n    | ValueRecipe.Evaluator<T, P>;\n\nexport namespace ValueRecipe {\n\n  /**\n   * Value evaluator signature.\n   *\n   * @typeparam T  Evaluated value type. This can not be a function.\n   * @typeparam P  A type of parameters tuple required for value evaluation.\n   */\n  export type Evaluator<T, P extends any[] = []> =\n  /**\n   * @param args  Parameters required for value evaluation.\n   *\n   * @returns Evaluated value.\n   */\n      (this: void, ...args: P) => T;\n\n}\n\n/**\n * @internal\n */\nfunction isValueEvaluator<T, P extends any[]>(\n    value: ValueRecipe<T, P>,\n): value is ValueRecipe.Evaluator<T, P> {\n  return typeof value === 'function';\n}\n\n/**\n * Evaluates a value by its recipe.\n *\n * @typeparam T  Evaluated value type. This can not be a function.\n * @typeparam P  A type of parameters tuple required for value evaluation.\n * @param recipe  Value evaluation recipe.\n * @param args  Parameters required for value evaluation.\n *\n * @returns Either value itself, or the one evaluated by the given evaluator recipe.\n */\nexport function valueByRecipe<T, P extends any[]>(\n    recipe: ValueRecipe<T, P>,\n    ...args: P\n): T {\n  return (/*#__INLINE__*/ isValueEvaluator(recipe)) ? recipe(...args) : recipe;\n}\n\n/**\n * Converts a value recipe to its {@link ValueRecipe.Evaluator evaluator} function.\n *\n * @typeparam T  Evaluated value type. This can not be a function.\n * @typeparam P  A type of parameters tuple required for value evaluation.\n * @param recipe  Value recipe to convert.\n *\n * @returns Either evaluator itself, or the one evaluating to the given value.\n */\nexport function valueRecipe<T, P extends any[]>(recipe: ValueRecipe<T, P>): ValueRecipe.Evaluator<T, P> {\n  return (/*#__INLINE__*/ isValueEvaluator(recipe)) ? recipe : valueProvider(recipe);\n}\n","import { EventSupply } from '@proc7ts/fun-events';\nimport { noop } from '@proc7ts/primitives';\nimport { immediateRenderScheduler, RenderExecution } from '@proc7ts/render-scheduler';\nimport { DefaultRenderScheduler } from '../../boot/globals';\nimport { ComponentContext } from '../../component';\nimport { ElementRenderCtl } from './element-render-ctl';\nimport { ElementRenderer } from './element-renderer';\nimport { RenderDef } from './render-def';\n\n/**\n * @internal\n */\nconst enum RenderStatus {\n  Cancelled = -1,\n  Complete = 0,\n  Pending = 1,\n  Scheduled = 2,\n}\n\n/**\n * @internal\n */\nexport class ElementRenderCtl$ implements ElementRenderCtl {\n\n  private readonly _renders = new Set<() => void>();\n\n  constructor(private readonly _context: ComponentContext) {\n  }\n\n  renderBy(\n      renderer: ElementRenderer,\n      def: RenderDef = {},\n  ): EventSupply {\n\n    const spec = RenderDef.spec(this._context, def);\n    const trigger = RenderDef.trigger(this._context, spec);\n    const schedule = this._context.get(DefaultRenderScheduler)({\n      ...RenderDef.fulfill(spec),\n      node: this._context.element as Element,\n    });\n    const whenConnected = spec.when === 'connected';\n    let status = RenderStatus.Pending;\n    const startRendering = (): 0 | void => status /* there is an update to render */ && scheduleRenderer();\n    const onUpdate = whenConnected\n        ? () => this._context.connected && scheduleRenderer()\n        : () => this._context.settled && scheduleRenderer();\n    const supply = trigger\n        .to(onUpdate)\n        .needs(this._context)\n        .whenOff(cancelRenderer);\n\n    (whenConnected ? this._context.whenConnected() : this._context.whenSettled()).to(startRendering);\n\n    const immediateSchedule = immediateRenderScheduler();\n\n    this._renders.add(renderNow);\n\n    return supply.whenOff(() => this._renders.delete(renderNow));\n\n    function scheduleRenderer(): void {\n      status = RenderStatus.Scheduled;\n      schedule(renderElement);\n    }\n\n    function renderNow(): void {\n      immediateSchedule(renderElement);\n    }\n\n    function cancelRenderer(): void {\n      if (status === RenderStatus.Scheduled) { // Scheduled, but not rendered yet\n        schedule(noop);\n      }\n      status = RenderStatus.Cancelled;\n    }\n\n    function renderElement(execution: RenderExecution): void {\n      if (status > RenderStatus.Complete) { // Prevent excessive rendering\n        status = RenderStatus.Complete;\n        for (; ;) {\n\n          const newRenderer = renderer(execution);\n\n          if (newRenderer === renderer || typeof newRenderer !== 'function') {\n            break;\n          }\n\n          renderer = newRenderer;\n        }\n      }\n    }\n  }\n\n  renderNow(): void {\n    this._renders.forEach(render => render());\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextRef, SingleContextKey } from '@proc7ts/context-values';\nimport { EventSupply } from '@proc7ts/fun-events';\nimport { ComponentContext } from '../../component';\nimport { ElementRenderCtl$ } from './element-render-ctl.impl';\nimport { ElementRenderer } from './element-renderer';\nimport { RenderDef } from './render-def';\n\n/**\n * A render control of component's element.\n *\n * Controls rendering by {@link ElementRenderer element renderers}.\n *\n * Available in component context.\n *\n * @category Feature\n */\nexport interface ElementRenderCtl {\n\n  /**\n   * Enables component element rendering by the given `renderer`.\n   *\n   * A `renderer` call will be scheduled by [[DefaultRenderScheduler]] once component state updated.\n   *\n   * @param renderer  Element renderer function.\n   * @param def  Optional element rendering definition.\n   *\n   * @returns Render shots supply. Element `renderer` will stop rendering once this supply is cut off.\n   */\n  renderBy(\n      renderer: ElementRenderer,\n      def?: RenderDef,\n  ): EventSupply;\n\n  /**\n   * Executes scheduled element render shots immediately.\n   *\n   * Uses `immediateRenderScheduler` for that.\n   *\n   * Does not execute element renderers that are not scheduled. I.e. if no corresponding state updates happened.\n   */\n  renderNow(): void;\n\n}\n\n/**\n * A key of component context value containing {@link ElementRenderCtl element render control}.\n *\n * @category Feature\n */\nexport const ElementRenderCtl: ContextRef<ElementRenderCtl> = (\n    /*#__PURE__*/ new SingleContextKey<ElementRenderCtl>(\n        'element-render-ctl',\n        {\n          byDefault(values) {\n            return new ElementRenderCtl$(values.get(ComponentContext));\n          },\n        },\n    )\n);\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextRef, ContextValues, SingleContextKey } from '@proc7ts/context-values';\nimport { trackValue } from '@proc7ts/fun-events';\nimport { noop } from '@proc7ts/primitives';\nimport { RenderSchedule, RenderScheduleOptions, RenderShot } from '@proc7ts/render-scheduler';\nimport { ElementRenderCtl } from './element-render-ctl';\nimport { ElementRenderer } from './element-renderer';\nimport { RenderDef } from './render-def';\n\n/**\n * A signature of element render scheduler.\n *\n * Schedules render shots to be executed by {@link ElementRenderCtl element render control}.\n *\n * Available in component context.\n *\n * @category Feature\n */\nexport type ElementRenderScheduler =\n/**\n * @param options  Options of constructed element render schedule.\n *\n * @returns New render schedule.\n */\n    (this: void, options?: ElementRenderScheduleOptions) => RenderSchedule;\n\n/**\n * Options for render schedule.\n *\n * This is passed to {@link ElementRenderScheduler element render scheduler} when constructing new render schedule.\n *\n * Generic `RenderSchedule` options are ignored.\n *\n * @category Feature\n */\nexport interface ElementRenderScheduleOptions extends RenderScheduleOptions, RenderDef.Options {\n\n  /**\n   * When to start the rendering.\n   *\n   * One of:\n   * - `settled` - start rendering when component is {@link ComponentContext.settled settled}.\n   * - `connected` (the default) - start rendering when component's element is {@link ComponentContext.connected\n   *   connected} to document.\n   */\n  readonly when?: 'settled' | 'connected';\n\n  /**\n   * Reports rendering error. E.g. a render shot execution failure.\n   *\n   * @param messages  Error messages to report.\n   */\n  error?(...messages: any[]): void;\n\n}\n\n/**\n * @internal\n */\nfunction newElementRenderScheduler(context: ContextValues): ElementRenderScheduler {\n\n  const renderCtl = context.get(ElementRenderCtl);\n\n  return (opts = {}): RenderSchedule => {\n\n    const recentShot = trackValue<RenderShot>(noop);\n    const renderer: ElementRenderer = execution => {\n      recentShot.it(execution);\n    };\n\n    renderCtl.renderBy(renderer, RenderDef.fulfill({ on: recentShot.on() }, opts));\n\n    return (shot: RenderShot): void => {\n      recentShot.it = execution => shot(execution); // Ensure render shot always updated\n    };\n  };\n}\n\n/**\n * A key of component context value containing {@link ElementRenderScheduler element render scheduler}.\n *\n * @category Feature\n */\nexport const ElementRenderScheduler: ContextRef<ElementRenderScheduler> = (\n    /*#__PURE__*/ new SingleContextKey<ElementRenderScheduler>(\n        'element-render-scheduler',\n        {\n          byDefault: newElementRenderScheduler,\n        },\n    )\n);\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { RenderExecution } from '@proc7ts/render-scheduler';\nimport { ComponentProperty, ComponentPropertyDecorator } from '../../component';\nimport { ComponentClass } from '../../component/definition';\nimport { ElementRenderCtl } from './element-render-ctl';\nimport { ElementRenderer } from './element-renderer';\nimport { RenderDef } from './render-def';\n\n/**\n * Component property decorator that declares a rendering method for the component.\n *\n * The decorated method call will be scheduled by [[DefaultRenderScheduler]] once component state updated.\n *\n * The decorated method should have no arguments. It may return either nothing, or a function. In the latter case the\n * returned function will be called immediately to render the element. It may, in turn, return a renderer function,\n * and so on.\n *\n * Enables rendering with {@link ElementRenderCtl.renderBy element render control}.\n *\n * @category Feature\n * @typeparam T  A type of decorated component class.\n * @param def  Non-mandatory render definition.\n *\n * @returns Component method decorator.\n */\nexport function Render<T extends ComponentClass>(\n    def?: RenderDef,\n): ComponentPropertyDecorator<(execution: RenderExecution) => ElementRenderer | void, T> {\n  return ComponentProperty(({ get }) => ({\n    componentDef: {\n      define(defContext) {\n        defContext.whenComponent(context => {\n          context.whenReady(() => {\n\n            const { component } = context;\n            const renderer = get(component).bind(component);\n\n            context.get(ElementRenderCtl).renderBy(renderer, def);\n          });\n        });\n      },\n    },\n  }));\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { SingleContextKey, SingleContextRef } from '@proc7ts/context-values';\n\n/**\n * Component shadow content root.\n *\n * @category Feature\n */\nexport type ShadowContentRoot = ShadowRoot;\n\n/**\n * A key of component context value containing a shadow content root instance.\n *\n * This is only available when the component is decorated with {@link AttachShadow @AttachShadow} decorator.\n *\n * @category Feature\n */\nexport const ShadowContentRoot: SingleContextRef<ShadowContentRoot> = (\n    /*#__PURE__*/ new SingleContextKey<ShadowContentRoot>('shadow-content-root')\n);\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\n/**\n * An event related to element's shadow DOM.\n *\n * The following event types supported:\n * - `wesib:shadowAttached` is dispatched when a shadow root is attached to element.\n *   In particular, it is dispatched for components decorated with {@link AttachShadow @AttachShadow}.\n *   The event is dispatched when component is connected for the first time. I.e. when element is added to the document.\n *   This event bubbles and is not cancelable.\n *\n * @category Feature\n */\nexport class ShadowDomEvent extends Event {\n\n  /**\n   * Shadow root this event relates to.\n   */\n  get shadowRoot(): ShadowRoot {\n    return (this.target as Element).shadowRoot as ShadowRoot;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { FnContextKey, FnContextRef } from '@proc7ts/context-values/updatable';\nimport { ComponentContext, ComponentContext__symbol } from '../../component';\nimport { ShadowContentDef } from './attach-shadow.decorator';\nimport { ShadowDomEvent } from './shadow-dom-event';\n\n/**\n * Shadow root builder function type.\n *\n * An instance of this function is available in component context and is used by {@link AttachShadow @AttachShadow}\n * decorator to attach shadow root to decorated component's custom element.\n *\n * By default, if shadow root already exists for the component's element, it uses one.\n *\n * Dispatches a `wesib:shadowAttached` event for the found or attached shadow root.\n *\n * @category Feature\n */\nexport type ShadowRootBuilder =\n/**\n * @param context  Target component context.\n * @param init  Shadow root initialization options.\n *\n * @returns A shadow root instance for target component, or `null`/`undefined` if one can not be attached.\n */\n    (context: ComponentContext, init: ShadowContentDef) => ShadowRoot | null | undefined;\n\n/**\n * A key of component context value containing a shadow root builder instance.\n *\n * @category Feature\n */\nexport const ShadowRootBuilder: FnContextRef<Parameters<ShadowRootBuilder>, ReturnType<ShadowRootBuilder>> = (\n    /*#__PURE__*/ new FnContextKey<Parameters<ShadowRootBuilder>, ReturnType<ShadowRootBuilder>>(\n        'shadow-root-builder',\n        {\n          byDefault() {\n            return attachShadow;\n          },\n        },\n    )\n);\n\n/**\n * @internal\n */\nfunction attachShadow(context: ComponentContext, init: ShadowRootInit): ShadowRoot | undefined {\n\n  const element = context.element as Element;\n  const shadowRoot = shadowRootOf(element, init);\n\n  if (shadowRoot) {\n    (shadowRoot as any)[ComponentContext__symbol] = context;\n    context.whenConnected(() => context.dispatchEvent(new ShadowDomEvent(\n        'wesib:shadowAttached',\n        { bubbles: true },\n    )));\n  }\n\n  return shadowRoot;\n}\n\n/**\n * @internal\n */\nfunction shadowRootOf(element: Element, init: ShadowRootInit): ShadowRoot | undefined {\n\n  const existing = element.shadowRoot;\n\n  if (existing) {\n    // Shadow root already attached. Using it.\n    return existing;\n  }\n  if ('attachShadow' in element) {\n    return element.attachShadow(init);\n  }\n\n  return; // Unable to attach shadow root.\n}\n\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { Class } from '@proc7ts/primitives';\nimport { Component, ComponentContext, ComponentDecorator, ContentRoot } from '../../component';\nimport { ComponentClass } from '../../component/definition';\nimport { ShadowContentRoot } from './shadow-content-root';\nimport { ShadowRootBuilder } from './shadow-root-builder';\n\n/**\n * @internal\n */\nconst defaultShadowContentDef: ShadowContentDef = { mode: 'open' };\n\n/**\n * Shadow content root definition.\n *\n * This is a readonly component shadow root initialization options.\n *\n * @category Feature\n */\nexport type ShadowContentDef = Readonly<ShadowRootInit>;\n\n/**\n * Creates a component decorator that attaches shadow root to decorated component instance.\n *\n * @category Feature\n * @typeparam T  A type of decorated component class.\n * @param def  Shadow content root definition. Uses `mode: 'open'` by default.\n *\n * @returns New component decorator.\n */\nexport function AttachShadow<T extends ComponentClass = Class>(\n    def: ShadowContentDef = defaultShadowContentDef,\n): ComponentDecorator<T> {\n  return Component({\n    setup(setup) {\n      setup.perComponent(\n          {\n            a: ShadowContentRoot,\n            by(ctx: ComponentContext<InstanceType<T>>) {\n              return ctx.get(ShadowRootBuilder)(ctx, def);\n            },\n          },\n      );\n      setup.perComponent({ // Content root is an alias of shadow root when present.\n        a: ContentRoot,\n        by(context: ComponentContext<InstanceType<T>>) {\n          return context.get(ShadowContentRoot, { or: null });\n        },\n      });\n    },\n  });\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { NamespaceDef } from '@proc7ts/namespace-aliaser';\n\n/**\n * Default Wesib namespace definition.\n *\n * @category Core\n */\nexport const Wesib__NS: NamespaceDef = (/*#__PURE__*/ new NamespaceDef(\n    'https://wesib.github.io/ns',\n    'b',\n    'wesib',\n));\n","/**\n * @packageDocumentation\n * @module @proc7ts/delta-set\n */\nimport { ReadonlyDeltaSet } from './readonly-delta-set';\n\n/**\n * A `Set` implementation that keeps a delta of changes made to it.\n *\n * @typeparam T  A type of elements of delta set.\n */\nexport class DeltaSet<T> extends Set<T> implements ReadonlyDeltaSet<T> {\n\n  /** @internal */\n  private readonly _added: Set<T>;\n\n  /** @internal */\n  private readonly _removed: Set<T>;\n\n  /**\n   * Constructs new delta set.\n   *\n   * @param values  An iterable of elements be add to constructed delta set. Or `null` to add nothing.\n   */\n  constructor(values?: Iterable<T> | null) {\n    super();\n    this._added = new Set<T>(values);\n    this._removed = new Set<T>();\n    this._added.forEach(value => this.add(value));\n  }\n\n  /**\n   * Appends a new element with a specified value to the end of this delta set. Unless the set contains this element\n   * already.\n   *\n   * Records element addition and forgets its removal unless the set contains it already.\n   *\n   * @param value  The value of the element to add.\n   *\n   * @returns `this` delta set.\n   */\n  add(value: T): this {\n    if (!this.has(value)) {\n      this._added.add(value);\n      this._removed.delete(value);\n      super.add(value);\n    }\n    return this;\n  }\n\n  /**\n   * Removes the specified element from this delta set.\n   *\n   * Records element removal and forgets its addition if removal succeed.\n   *\n   * @param value  The value of the element to remove.\n   *\n   * @returns `true` if element removed successfully; or `false` if this set did not contain the element.\n   */\n  delete(value: T): boolean {\n    if (super.delete(value)) {\n      this._added.delete(value);\n      this._removed.add(value);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Removes all elements from this delta set.\n   *\n   * Records all elements removal and forgets all elements additions.\n   */\n  clear(): void {\n    this._added.clear();\n    this.forEach(value => this._removed.add(value));\n    super.clear();\n  }\n\n  /**\n   * Applies changes to this delta set.\n   *\n   * First removes elements to `remove`. Then appends elements to `add`.\n   *\n   * Records all changes made.\n   *\n   * @param add  An iterable of elements to add.\n   * @param remove  An iterable of elements to remove.\n   *\n   * @returns `this` delta set.\n   */\n  delta(add: Iterable<T>, remove: Iterable<T> = []): this {\n    deltaSetDeltaReceiver(this)(add, remove);\n    return this;\n  }\n\n  /**\n   * Replays the changes made to this set in target receiver.\n   *\n   * @param receiver  A receiver of changes delta. E.g. another `Set`.\n   *\n   * @returns `this` delta set.\n   */\n  redelta(receiver: DeltaSet.DeltaReceiver<T>): this {\n\n    const receive = typeof receiver === 'function' ? receiver : deltaSetDeltaReceiver(receiver);\n\n    receive(Array.from(this._added), Array.from(this._removed));\n\n    return this;\n  }\n\n  /**\n   * Forgets all changes made to this set.\n   *\n   * Does not alter the set contents.\n   *\n   * @returns `this` delta set.\n   */\n  undelta(): this {\n    this._added.clear();\n    this._removed.clear();\n    return this;\n  }\n\n}\n\nexport namespace DeltaSet {\n\n  /**\n   * A delta set changes receiver.\n   *\n   * This can be either an {@link DeltaReceiverObject object}, or a {@link DeltaReceiverFunction function}.\n   *\n   * @typeparam T  A type of elements of delta set.\n   */\n  export type DeltaReceiver<T> =\n      | DeltaReceiverFunction<T>\n      | DeltaReceiverObject<T>;\n\n  /**\n   * A delta set changes receiver function.\n   *\n   * @typeparam T  A type of elements of delta set.\n   */\n  export type DeltaReceiverFunction<T> =\n  /**\n   * @param added  An array of added elements.\n   * @param removed  An array of removed elements.\n   */\n      (this: void, added: T[], remove: T[]) => void;\n\n  /**\n   * A delta set changes receiver object.\n   *\n   * A `Set` class implements this interface.\n   *\n   * @typeparam T  A type of elements of delta set.\n   */\n  export interface DeltaReceiverObject<T> {\n\n    /**\n     * Receives an element that has been added to delta set.\n     *\n     * @param value  The value of the added element.\n     */\n    add(value: T): void;\n\n    /**\n     * Receives an element that has been remove from delta set.\n     *\n     * @param value  The value of the removed element.\n     */\n    delete(value: T): void;\n\n  }\n\n}\n\n/**\n * @internal\n */\nfunction deltaSetDeltaReceiver<T>(\n    receiver: DeltaSet.DeltaReceiverObject<T>,\n): (this: void, add: Iterable<T>, remove: Iterable<T>) => void {\n  return (add, remove) => {\n    for (const removed of remove) {\n      receiver.delete(removed);\n    }\n    for (const added of add) {\n      receiver.add(added);\n    }\n  };\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/input-aspects\n */\nimport { InControl } from './control';\n\n/**\n * Some aspect of the user input. Such as input focus or validity.\n *\n * An aspect is applied to input control first. This creates an aspect instance bound to that control. All\n * aspect-related operations are performed by that instance.\n *\n * @category Aspect\n * @typeparam Instance  Aspect instance type.\n * @typeparam Kind  Aspect application kind.\n */\nexport interface InAspect<Instance, Kind extends InAspect.Application.Kind = 'default'> {\n\n  /**\n   * Applies this aspect to the given input `control`.\n   *\n   * This method is called at most once per control when requested aspect is not applied to the control yet.\n   *\n   * @typeparam Value  Input value type.\n   * @param control  Input control to apply aspect to.\n   *\n   * @returns An aspect applied to the given `control`.\n   */\n  applyTo<Value>(control: InControl<Value>): InAspect.Applied<Value, Instance>;\n\n}\n\n/**\n * A symbol of aspect key property containing a reference to aspect.\n *\n * @category Aspect\n */\nexport const InAspect__symbol = (/*#__PURE__*/ Symbol('in-aspect'));\n\nexport namespace InAspect {\n\n  /**\n   * A key of the aspect of user input.\n   *\n   * It is passed to `InControl.aspect()` method in order to apply target aspect to that control.\n   *\n   * This interface is typically implemented by aspect instance class object. I.e. by its static methods.\n   *\n   * @typeparam Instance  Aspect instance type.\n   * @typeparam Kind  Aspect application kind.\n   */\n  export interface Key<Instance, Kind extends Application.Kind = 'default'> {\n\n    /**\n     * A referenced aspect of user input.\n     */\n    [InAspect__symbol]: InAspect<Instance, Kind>;\n\n  }\n\n  /**\n   * An input aspect applied to control.\n   *\n   * This is what returned from `InAspect.applyTo()` method. Contains aspect instance and its manipulation methods.\n   *\n   * @typeparam Value  Input value type.\n   * @typeparam Instance  Aspect instance type.\n   * @typeparam ConvertedInstance  A type of aspect instance applied to converted control.\n   * The same as `Instance` by default.\n   */\n  export interface Applied<Value, Instance, ConvertedInstance extends Instance = Instance> {\n\n    /**\n     * Input aspect instance.\n     */\n    readonly instance: Instance;\n\n    /**\n     * Converts an aspect to another value type.\n     *\n     * This method is called by input control created by [[InControl.convert]] method.\n     *\n     * @typeparam To  Converted input value type.\n     * @param target  Target input control.\n     *\n     * @returns The same aspect applied to `target` control, or `undefined` if aspect can not be converted.\n     */\n    convertTo<To>(target: InControl<To>): Applied<To, ConvertedInstance> | undefined;\n\n    /**\n     * Converts an aspect to the same value type.\n     *\n     * When defined, this method is called instead of [[convertTo]] when converting aspect for converted control\n     * with the same value. I.e. when {@link InConverter.Aspect aspect-only converters} used for conversion.\n     *\n     * @param target  Target input control.\n     *\n     * @returns The same aspect applied to `target` control, or `undefined` if aspect can not be converted.\n     */\n    attachTo?(target: InControl<Value>): Applied<Value, Instance> | undefined;\n\n  }\n\n  export namespace Application {\n\n    /**\n     * A kind of input aspect application.\n     *\n     * This is a key of `InAspect.Application.Map` type.\n     */\n    export type Kind = keyof Map<unknown, unknown>;\n\n    /**\n     * A type of input aspect application result of the given application kind and input value type.\n     *\n     * @typeparam OfInstance  Aspect instance type.\n     * @typeparam OfValue  Input value type.\n     * @typeparam OfKind  Aspect application kind.\n     */\n    export type Result<OfInstance, OfValue, OfKind extends Kind> =\n        Applied<OfValue, Instance<OfInstance, OfValue, OfKind>>;\n\n    /**\n     * A type of applied aspect instance of the given application kind and input value type.\n     *\n     * @typeparam OfInstance  Aspect instance type.\n     * @typeparam OfValue  Input value type.\n     * @typeparam OfKind  Aspect application kind.\n     */\n    export type Instance<OfInstance, OfValue, OfKind extends Kind> =\n        ReturnType<Map<OfInstance, OfValue>[OfKind]>;\n\n    /**\n     * A map implementing application result detection algorithms.\n     *\n     * Each method name here is a kind of aspect application, while the return value of this method is an aspect\n     * instance type.\n     *\n     * @typeparam OfInstance  Aspect instance type.\n     * @typeparam OfValue  Input value type.\n     */\n    export interface Map<OfInstance, OfValue> {\n\n      /**\n       * Default aspect application type. Just an aspect instance type.\n       */\n      default(): OfInstance;\n\n    }\n\n  }\n\n}\n","import { noop, valueProvider } from '@proc7ts/primitives';\nimport { InAspect } from './aspect';\nimport { InControl } from './control';\n\n/**\n * @internal\n */\nexport const inAspectNull: InAspect.Applied<any, any, any> = {\n  instance: null,\n  convertTo: noop,\n};\n\n/**\n * @internal\n */\nexport function inAspectSameOrBuild<Value, Instance, Kind extends InAspect.Application.Kind>(\n    control: InControl<Value>,\n    aspectKey: InAspect.Key<Instance, Kind>,\n    build: <V>(this: void, control: InControl<V>, origin?: InControl<any>) => Instance,\n    instance?: Instance,\n    origin?: InControl<any>,\n): InAspect.Applied<Value, Instance> {\n  if (instance === undefined) {\n    instance = build(control, origin);\n  }\n  return {\n    instance,\n    convertTo<To>(target: InControl<To>): InAspect.Applied<To, Instance> {\n      return inAspectSameOrBuild<To, Instance, Kind>(\n          target,\n          aspectKey,\n          build,\n          undefined,\n          control,\n      );\n    },\n    attachTo(target: InControl<Value>): InAspect.Applied<Value, Instance> | undefined {\n      return inAspectSameOrBuild(\n          target,\n          aspectKey,\n          build,\n          (control.aspect(aspectKey) as Instance | undefined) || build(target),\n      );\n    },\n  };\n}\n\n/**\n * @internal\n */\nexport function inAspectSameOrNull<Value, Instance, Kind extends InAspect.Application.Kind>(\n    control: InControl<Value>,\n    aspectKey: InAspect.Key<Instance | null, Kind>,\n    instance: Instance | null = null,\n): InAspect.Applied<Value, Instance | null> {\n  return inAspectSameOrBuild(control, aspectKey, valueProvider(null), instance);\n}\n\n/**\n * @internal\n */\nexport function inAspectValue<Instance>(instance: Instance): InAspect.Applied<any, Instance> {\n  return {\n    instance,\n    convertTo() {\n      return this;\n    },\n  };\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/input-aspects\n */\nimport { NamespaceAliaser, NamespaceDef, newNamespaceAliaser } from '@proc7ts/namespace-aliaser';\nimport { InAspect, InAspect__symbol } from '../aspect';\nimport { inAspectValue } from '../aspect.impl';\nimport { InConverter } from '../converter';\n\n/**\n * Namespace aliaser aspect.\n *\n * Used by other aspect to generate unique names.\n *\n * Creates new namespace aliaser and reuses it across converted controls unless overridden e.g. by\n * [[InNamespaceAliaser.to]] converter.\n *\n * @category Aspect\n */\nexport type InNamespaceAliaser = NamespaceAliaser;\n\n/**\n * Default input-aspects namespace definition.\n *\n * @category Aspect\n */\nexport const InputAspects__NS: NamespaceDef = (/*#__PURE__*/ new NamespaceDef(\n    'https://surol.github.io/input-aspects/ns',\n    'inasp',\n    'input-aspects',\n));\n\n/**\n * @internal\n */\nconst InNamespaceAliaser__aspect: InAspect<InNamespaceAliaser> = {\n\n  applyTo() {\n    return inAspectValue(newNamespaceAliaser());\n  },\n\n};\n\n/**\n * @category Aspect\n */\nexport const InNamespaceAliaser = {\n\n  get [InAspect__symbol](): InAspect<InNamespaceAliaser> {\n    return InNamespaceAliaser__aspect;\n  },\n\n  /**\n   * Creates input control aspect converter that assigns the given namespace aliaser to converted control.\n   *\n   * @param nsAlias  Target namespace aliaser.\n   *\n   * @returns Input control aspect converter.\n   */\n  to<Value>(nsAlias: InNamespaceAliaser): InConverter.Aspect<any, Value> {\n    return {\n      applyAspect<Instance, Kind extends InAspect.Application.Kind>(\n          aspect: InAspect<any, any>,\n      ): InAspect.Applied<any, InAspect.Application.Instance<Instance, Value, Kind>> | undefined {\n        return aspect === InNamespaceAliaser__aspect\n            ? inAspectValue(nsAlias) as InAspect.Application.Result<Instance, Value, Kind>\n            : undefined;\n      },\n    };\n  },\n\n};\n","/**\n * @packageDocumentation\n * @module @proc7ts/input-aspects\n */\nimport { newRenderSchedule, RenderScheduler } from '@proc7ts/render-scheduler';\nimport { InAspect, InAspect__symbol } from '../aspect';\nimport { inAspectValue } from '../aspect.impl';\nimport { InConverter } from '../converter';\n\n/**\n * Input elements render scheduler.\n *\n * It is used e.g. to schedule CSS updates. The control values and attributes are updated instantly.\n *\n * Uses the default render scheduler unless overridden e.g. by [[InRenderScheduler.to]] converter.\n *\n * @category Aspect\n */\nexport type InRenderScheduler = RenderScheduler;\n\n/**\n * @internal\n */\nconst InRenderScheduler__aspect: InAspect<InRenderScheduler> = {\n\n  applyTo() {\n    return inAspectValue(newRenderSchedule);\n  },\n\n};\n\n/**\n * @category Aspect\n */\nexport const InRenderScheduler = {\n\n  get [InAspect__symbol](): InAspect<InRenderScheduler> {\n    return InRenderScheduler__aspect;\n  },\n\n  /**\n   * Creates input control aspect converter that assigns the given render scheduler to converted control.\n   *\n   * @param scheduler  Target DOM render scheduler.\n   *\n   * @returns Input control aspect converter.\n   */\n  to<Value>(scheduler: InRenderScheduler): InConverter.Aspect<any, Value> {\n    return {\n      applyAspect<Instance, Kind extends InAspect.Application.Kind>(\n          aspect: InAspect<any, any>,\n      ): InAspect.Applied<any, InAspect.Application.Instance<Instance, Value, Kind>> | undefined {\n        return aspect === InRenderScheduler__aspect\n            ? inAspectValue(scheduler) as InAspect.Application.Result<Instance, Value, Kind>\n            : undefined;\n      },\n    };\n  },\n\n};\n","/**\n * @packageDocumentation\n * @module @proc7ts/input-aspects\n */\nimport { filterIt, flatMapIt, itsReduction, mapIt } from '@proc7ts/a-iterable';\nimport { isPresent, noop, valueProvider } from '@proc7ts/primitives';\nimport { InAspect } from './aspect';\nimport { InControl } from './control';\n\n/**\n * Input control converter. Either aspect-only, or value one.\n *\n * Either a {@link InConverter.Conversion control conversion}, or a {@link InConverter.Factory conversion factory}.\n *\n * @category Converter\n * @typeparam From  Original input value type.\n * @typeparam To  Converted input value type.\n */\nexport type InConverter<From, To> =\n    | InConverter.Conversion<From, To>\n    | InConverter.Factory<From, To>;\n\nexport namespace InConverter {\n\n  /**\n   * Input control conversion factory signature. Either aspect-only, or value one.\n   *\n   * @typeparam From  Original input value type.\n   * @typeparam To  Converted input value type.\n   */\n  export type Factory<From, To> = (\n      this: void,\n      from: InControl<From>,\n      to: InControl<To>,\n  ) => Conversion<From, To>;\n\n  /**\n   * Input control conversion. Either aspect-only, or full one.\n   *\n   * @typeparam From  Original input value type.\n   * @typeparam To  Converted input value type.\n   */\n  export type Conversion<From, To> =\n      | InConverter.Value.Conversion<From, To>\n      | InConverter.Aspect.Conversion<To>;\n\n  /**\n   * Input control value converter.\n   *\n   * Either a {@link InConverter.Value.Conversion control value conversion}, or a {@link InConverter.Value.Factory\n   * value conversion factory}.\n   *\n   * @typeparam From  Original input value type.\n   * @typeparam To  Converted input value type.\n   */\n  export type Value<From, To> =\n      | InConverter.Value.Factory<From, To>\n      | InConverter.Value.Conversion<From, To>;\n\n  /**\n   * Input control aspect converter.\n   *\n   * Either an {@link InConverter.Aspect.Conversion control aspect conversion}, or {@link InConverter.Aspect.Factory\n   * aspect conversion factory}.\n   *\n   * @typeparam From  Original input value type.\n   * @typeparam To  Converted input value type.\n   */\n  export type Aspect<From, To = From> =\n      | InConverter.Aspect.Conversion<To>\n      | InConverter.Aspect.Factory<From, To>;\n\n}\n\nexport namespace InConverter.Value {\n\n  /**\n   * Input control value conversion factory signature.\n   *\n   * Called by [[InControl.convert]] to construct a {@link Conversion control conversion}.\n   *\n   * Should not access converted control value as the one does not exist at calling time.\n   *\n   * @typeparam From  Original input value type.\n   * @typeparam To  Converted input value type.\n   */\n  export type Factory<From, To> =\n  /**\n   * @param from  Original input control.\n   * @param to  Converted input control.\n   *\n   * @returns Control conversion.\n   */\n      (\n          this: void,\n          from: InControl<From>,\n          to: InControl<To>,\n      ) => Conversion<From, To>;\n\n  /**\n   * Input control value conversion.\n   *\n   * @typeparam From  Original input value type.\n   * @typeparam To  Converted input value type.\n   */\n  export interface Conversion<From, To> {\n\n    /**\n     * Applies the given aspect to converted control in a custom way.\n     *\n     * @typeparam Instance  Aspect instance type.\n     * @typeparam Kind  Aspect application kind.\n     * @param aspect  An aspect to apply.\n     *\n     * @returns Either applied aspect instance or `undefined` to apply the aspect in standard way (i.e. by converting\n     * it from corresponding aspect of original control).\n     */\n    applyAspect?<Instance, Kind extends InAspect.Application.Kind>(\n        aspect: InAspect<Instance, Kind>,\n    ): InAspect.Application.Result<Instance, To, Kind> | undefined;\n\n    /**\n     * Converts original value.\n     *\n     * @param value  Original value to convert.\n     *\n     * @returns New value of converted control.\n     */\n    set(value: From): To;\n\n    /**\n     * Restores original control value by converted one.\n     *\n     * @param value  A converted value to restore the original one by.\n     *\n     * @returns New value of original control.\n     */\n    get(value: To): From;\n\n  }\n\n}\n\nexport namespace InConverter.Aspect {\n\n  /**\n   * Input control aspect conversion factory signature.\n   *\n   * Called by [[InControl.convert]] to construct an {@link Conversion control aspect conversion}.\n   *\n   * Should not access converted control value as the one does not exist at calling time.\n   *\n   * @typeparam From  Original input value type.\n   * @typeparam To  Converted input value type.\n   */\n  export type Factory<From, To = From> = (\n      this: void,\n      from: InControl<From>,\n      to: InControl<To>,\n  ) => Conversion<To>;\n\n  /**\n   * Input control aspect conversion.\n   *\n   * @typeparam Value  Input value type.\n   */\n  export interface Conversion<Value> {\n\n    /**\n     * Applies the given aspect to converted control in a custom way.\n     *\n     * @typeparam Instance  Aspect instance type.\n     * @typeparam Kind  Aspect application kind.\n     * @param aspect  An aspect to apply.\n     *\n     * @returns Either applied aspect instance or `undefined` to apply the aspect in standard way (i.e. by converting\n     * it from corresponding aspect of original control).\n     */\n    applyAspect<Instance, Kind extends InAspect.Application.Kind>(\n        aspect: InAspect<Instance, Kind>,\n    ): InAspect.Application.Result<Instance, Value, Kind> | undefined;\n\n  }\n\n}\n\n/**\n * Creates converter that combines input aspect converters.\n *\n * @typeparam Value  Input value type.\n * @param converters  Input control aspect converters.\n *\n * @returns Input control aspect conversion factory.\n */\nexport function intoConvertedBy<Value>(\n    ...converters: InConverter.Aspect<Value, Value>[]\n): InConverter.Aspect.Factory<Value, Value>;\n\n/**\n * Creates converter that combines input value converter with aspect converters.\n *\n * @category Converter\n * @typeparam From  Original input value type.\n * @typeparam To  Converted input value type.\n * @param converter  Input control converter.\n * @param converters  Additional input control aspect converters.\n *\n * @returns Input control value conversion factory.\n */\nexport function intoConvertedBy<From, To>(\n    converter: InConverter.Value<From, To>,\n    ...converters: InConverter.Aspect<From, To>[]\n): InConverter.Value.Factory<From, To>;\n\n/**\n * Creates converter that combines any input control converter with aspect converters.\n *\n * @category Converter\n * @typeparam From  Original input value type.\n * @typeparam To  Converted input value type.\n * @param converter  Input control converter.\n * @param converters  Additional input control aspect converters.\n *\n * @returns Input control conversion factory.\n */\nexport function intoConvertedBy<From, To>(\n    converter?: InConverter<From, To>,\n    ...converters: InConverter.Aspect<From, To>[]\n): InConverter.Factory<From, To>;\n\nexport function intoConvertedBy<From, To>(\n    valueOrAspectConverter?: InConverter<From, To> | InConverter.Aspect<From, To>,\n    ...converters: InConverter.Aspect<From, To>[]\n): InConverter.Factory<From, To> {\n\n  type AspectApplicator = <Instance, Kind extends InAspect.Application.Kind>(\n      aspect: InAspect<Instance, Kind>,\n  ) => InAspect.Application.Result<Instance, To, Kind> | undefined;\n\n  if (!valueOrAspectConverter) {\n    return noopInConverter;\n  }\n\n  const converter = inConverter(valueOrAspectConverter);\n\n  if (!converters.length) {\n    return converter;\n  }\n\n  const aspectConverters = mapIt<InConverter.Aspect<From, To>, InConverter.Aspect.Factory<From, To>>(\n      converters,\n      inConverter,\n  );\n\n  return (\n      from,\n      to,\n  ): InConverter.Conversion<From, To> => {\n\n    const conversion = converter(from, to);\n    const conversions = flatMapIt<InConverter.Conversion<From, To>>([\n        [conversion],\n        filterIt<InConverter.Aspect.Conversion<To> | undefined, InConverter.Aspect.Conversion<To>>(\n            mapIt(\n                aspectConverters,\n                acf => acf(from, to),\n            ),\n            isPresent,\n        ),\n    ]);\n\n\n    const applyAspect: AspectApplicator = itsReduction(\n        conversions,\n        (prev: AspectApplicator, cv: InConverter.Conversion<From, To>) => cv.applyAspect\n            ? (aspect => prev(aspect) || cv.applyAspect!(aspect))\n            : prev,\n        noop,\n    );\n\n    if (/*#__INLINE__*/ isInAspectConversion(conversion)) {\n      return {\n        applyAspect,\n      };\n    }\n\n    return {\n      set: conversion.set.bind(conversion),\n      get: conversion.get.bind(conversion),\n      applyAspect,\n    };\n  };\n}\n\n/**\n * Creates converter that combines input aspect converters.\n *\n * @category Converter\n * @typeparam Value  Input value type.\n * @param aspects  Input aspect converter(s) to combine.\n *\n * @returns Input aspect conversion factory.\n */\nexport function intoConvertedAspects<Value>(\n    aspects?: InConverter.Aspect<Value> | readonly InConverter.Aspect<Value>[],\n): InConverter.Aspect.Factory<Value> {\n  return aspects\n      ? ((/*#__INLINE__*/ isArray(aspects)) ? intoConvertedBy(...aspects) : intoConvertedBy(aspects))\n      : intoConvertedBy<Value>();\n}\n\nfunction isArray<T>(value: T | readonly T[] | undefined): value is readonly T[] {\n  return Array.isArray(value);\n}\n\n/**\n * @internal\n */\nconst noopInConversion: InConverter.Aspect.Conversion<any> = {\n  applyAspect(): undefined {\n    return;\n  },\n};\n\n/**\n * @internal\n */\nfunction noopInConverter(): InConverter.Aspect.Conversion<any> {\n  return noopInConversion;\n}\n\n/**\n * Checks whether the given input control converter converts aspect only.\n *\n * @category Converter\n * @param conversion  Input control conversion to check.\n *\n * @returns `false` if the given conversion has a {@link InConverter.Value.Conversion.set set} method,\n * or `true` if there is no one.\n */\nexport function isInAspectConversion<From, To>(\n    conversion: InConverter.Conversion<From, To>,\n): conversion is InConverter.Aspect.Conversion<To> {\n  return !(conversion as any).set;\n}\n\n/**\n * @internal\n */\nfunction inConverter<From, To>(\n    converter: InConverter.Value<From, To>,\n): InConverter.Value.Factory<From, To>;\n\n/**\n * @internal\n */\nfunction inConverter<From, To>(\n    converter: InConverter.Aspect<From, To>,\n): InConverter.Aspect.Factory<From, To>;\n\n/**\n * @internal\n */\nfunction inConverter<From, To>(\n    converter: InConverter<From, To>,\n): InConverter.Factory<From, To>;\n\nfunction inConverter<From, To>(\n    converter: InConverter<From, To> | InConverter.Aspect<From, To>,\n): InConverter.Factory<From, To> | InConverter.Aspect.Factory<From, To> {\n  return typeof converter === 'function' ? converter : valueProvider<any>(converter);\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/input-aspects\n */\nimport {\n  EventEmitter,\n  EventReceiver,\n  eventSupply,\n  EventSupply,\n  EventSupply__symbol,\n  eventSupplyOf,\n  OnEvent,\n  trackValue,\n  ValueTracker,\n} from '@proc7ts/fun-events';\nimport { asis, noop } from '@proc7ts/primitives';\nimport { InAspect, InAspect__symbol } from './aspect';\nimport { InConverter, intoConvertedBy, isInAspectConversion } from './converter';\n\n/**\n * User input control.\n *\n * Maintains input value and various aspects of the user input, such as input focus, validity, etc.\n *\n * @category Control\n * @typeparam Value  Input value type.\n */\nexport abstract class InControl<Value> extends ValueTracker<Value> {\n\n  /**\n   * @internal\n   */\n  private readonly _aspects = new Map<InAspect<any, any>, InAspect.Applied<any, any>>();\n\n  /**\n   * Input value.\n   */\n  abstract it: Value;\n\n  /**\n   * This control's input supply.\n   *\n   * Releases all control resources when cut off.\n   *\n   * Each control has its own supply. An input supply of converted control depends on the input supply of control it\n   * is converted from.\n   *\n   * After this supply cut off the control should no longer be used.\n   */\n  abstract get [EventSupply__symbol](): EventSupply;\n\n  /**\n   * Retrieves an aspect instance applied to this control.\n   *\n   * If the given `aspect` is not applied yet, then applies it first.\n   *\n   * @typeparam Instance  Aspect instance type.\n   * @typeparam Kind  Aspect application kind.\n   * @param aspectKey  A key of aspect to apply to this control.\n   *\n   * @returns An applied aspect instance.\n   */\n  aspect<Instance, Kind extends InAspect.Application.Kind>(\n      aspectKey: InAspect.Key<Instance, Kind>,\n  ): InAspect.Application.Instance<Instance, Value, Kind> {\n    return this._aspect(aspectKey[InAspect__symbol]).instance;\n  }\n\n  /**\n   * Performs additional setup of this control.\n   *\n   * @param setup  A function that accepts this control as its only parameter to configure it.\n   *\n   * @returns `this` control instance.\n   */\n  setup(setup: (this: void, control: this) => void): this;\n\n  /**\n   * Performs additional setup of this control's aspect.\n   *\n   * @typeparam Instance  Aspect instance type.\n   * @typeparam Kind  Aspect application kind.\n   * @param aspectKey  A key of aspect to set up.\n   * @param setup  A function that accepts the aspect and this control as parameters to configure them.\n   *\n   * @returns `this` control instance.\n   */\n  setup<Instance, Kind extends InAspect.Application.Kind>(\n      aspectKey: InAspect.Key<Instance, Kind>,\n      setup?: (this: void, aspect: InAspect.Application.Instance<Instance, Value, Kind>, control: this) => void,\n  ): this;\n\n  setup<Instance, Kind extends InAspect.Application.Kind>(\n      aspectKeyOrSetup: InAspect.Key<Instance, Kind> | ((this: void, control: this) => void),\n      aspectSetup: (\n          this: void,\n          aspect: InAspect.Application.Instance<Instance, Value, Kind>,\n          control: this,\n      ) => void = noop,\n  ): this {\n    if (isAspectKey(aspectKeyOrSetup)) {\n      aspectSetup(this.aspect(aspectKeyOrSetup), this);\n    } else {\n      aspectKeyOrSetup(this);\n    }\n    return this;\n  }\n\n  /**\n   * Converts this control to another one without changing its value type.\n   *\n   * The converted aspect may have another value and input aspects.\n   *\n   * @typeparam To  Converted input value type.\n   * @param by  Input control aspect converters.\n   *\n   * @returns Converted control.\n   */\n  convert(\n      ...by: InConverter.Aspect<Value, Value>[]\n  ): InControl<Value>;\n\n  /**\n   * Converts this control to another one.\n   *\n   * The converted aspect may have another value and input aspects.\n   *\n   * @typeparam To  Converted input value type.\n   * @param by  Input control converter.\n   * @param and  Additional input control aspect converters.\n   *\n   * @returns Converted control.\n   */\n  convert<To>(\n      by: InConverter<Value, To>,\n      ...and: InConverter.Aspect<Value, To>[]\n  ): InControl<To>;\n\n  convert<To>(\n      by?: InConverter<Value, To>,\n      ...and: InConverter.Aspect<Value, To>[]\n  ): InControl<Value> | InControl<To> {\n    return new InConverted(this, intoConvertedBy(by, ...and));\n  }\n\n  /**\n   * @internal\n   */\n  _aspect<Instance, Kind extends InAspect.Application.Kind>(\n      aspect: InAspect<Instance, Kind>,\n  ): InAspect.Application.Result<Instance, Value, Kind> {\n\n    const existing = this._aspects.get(aspect);\n\n    if (existing) {\n      return existing as InAspect.Application.Result<Instance, Value, Kind>;\n    }\n\n    const applied = this._applyAspect(aspect) || aspect.applyTo(this);\n\n    this._aspects.set(aspect, applied);\n\n    return applied as InAspect.Application.Result<Instance, Value, Kind>;\n  }\n\n  /**\n   * Applies the given aspect to this control in a custom way.\n   *\n   * @typeparam Instance  Aspect instance type.\n   * @typeparam Kind  Aspect application kind.\n   * @param _aspect  An aspect to apply.\n   *\n   * @returns Either applied aspect instance or `undefined` to apply the aspect in standard way (i.e. using\n   * `InAspect.applyTo()` method).\n   */\n  protected _applyAspect<Instance, Kind extends InAspect.Application.Kind>(\n      _aspect: InAspect<Instance, Kind>,\n  ): InAspect.Application.Result<Instance, Value, Kind> | undefined {\n    return;\n  }\n\n}\n\n/**\n * @internal\n */\nfunction isAspectKey<Instance, Kind extends InAspect.Application.Kind>(\n    value: any,\n): value is InAspect.Key<Instance, Kind> {\n  return InAspect__symbol in value;\n}\n\nexport namespace InControl {\n\n  /**\n   * A value type of the given input control type.\n   *\n   * @typeparam Control  Input control type.\n   */\n  export type ValueType<Control extends InControl<any>> = Control extends InControl<infer Value> ? Value : never;\n\n}\n\n/**\n * @internal\n */\nclass InConverted<From, To> extends InControl<To> {\n\n  private readonly _supply: EventSupply;\n  private readonly _on = new EventEmitter<[To, To]>();\n  private readonly _it: ValueTracker<[To, number]>;\n  protected readonly _applyAspect: <Instance, Kind extends InAspect.Application.Kind>(\n      this: this,\n      aspect: InAspect<Instance, Kind>,\n  ) => InAspect.Application.Result<Instance, To, Kind> | undefined;\n\n  constructor(src: InControl<From>, by: InConverter.Factory<From, To>) {\n    super();\n    this._supply = eventSupply().needs(src);\n\n    let lastRev = 0;\n    let backward: From | undefined;\n\n    const conversion = by(src, this);\n    let set: (value: From) => To;\n    let get: (value: To) => From;\n    let convertAspect: <Instance, Kind extends InAspect.Application.Kind>(\n        aspect: InAspect<Instance, Kind>,\n    ) => InAspect.Application.Result<Instance, To, Kind> | undefined;\n\n    if (isInAspectConversion(conversion)) {\n      set = asis as (value: From) => To;\n      get = asis as (value: To) => From;\n      convertAspect = <Instance, Kind extends InAspect.Application.Kind>(aspect: InAspect<Instance, Kind>) => {\n\n        const fallback: InAspect.Applied<any, any> = src._aspect(aspect);\n\n        return fallback.attachTo ? fallback.attachTo(this) : fallback.convertTo(this);\n      };\n    } else {\n      set = conversion.set;\n      get = conversion.get;\n      convertAspect = <Instance, Kind extends InAspect.Application.Kind>(aspect: InAspect<Instance, Kind>) => {\n\n        const fallback: InAspect.Applied<any, any> = src._aspect(aspect);\n\n        return fallback.convertTo(this);\n      };\n    }\n\n    this._applyAspect = aspect => conversion.applyAspect?.(aspect) || convertAspect(aspect);\n    this._it = trackValue([set(src.it), 0]);\n    eventSupplyOf(this._it).needs(this._supply);\n    this._it.on(([newValue], [oldValue]) => {\n      if (newValue !== oldValue) {\n        this._on.send(newValue, oldValue);\n      }\n    }).cuts(this._on);\n    src.on(value => {\n      if (value !== backward) {\n        this._it.it = [set(value), ++lastRev];\n      }\n    }).cuts(this);\n    this._it.on(([value, rev]) => {\n      if (rev !== lastRev) {\n        lastRev = rev;\n        backward = get(value);\n        try {\n          src.it = backward;\n        } finally {\n          backward = undefined;\n        }\n      }\n    });\n  }\n\n  get [EventSupply__symbol](): EventSupply {\n    return this._supply;\n  }\n\n  get it(): To {\n    return this._it.it[0];\n  }\n\n  set it(value: To) {\n\n    const [prevValue, prevRev] = this._it.it;\n\n    if (value !== prevValue) {\n      this._it.it = [value, prevRev + 1];\n    }\n  }\n\n  on(): OnEvent<[To, To]>;\n  on(receiver: EventReceiver<[To, To]>): EventSupply;\n  on(receiver?: EventReceiver<[To, To]>): OnEvent<[To, To]> | EventSupply {\n    return (this.on = this._on.on().F)(receiver);\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/input-aspects\n */\nimport { EventReceiver, EventSupply, eventSupply, EventSupply__symbol, OnEvent } from '@proc7ts/fun-events';\nimport { InControl } from '../control';\n\n/**\n * @internal\n */\nclass InSameValueControl<Value> extends InControl<Value> {\n\n  private _supply?: EventSupply;\n\n  constructor(private readonly _control: InControl<Value>) {\n    super();\n  }\n\n  get [EventSupply__symbol](): EventSupply {\n    return this._supply || (this._supply = eventSupply().needs(this._control));\n  }\n\n  get it(): Value {\n    return this._control.it;\n  }\n\n  set it(value: Value) {\n    this._control.it = value;\n  }\n\n  on(): OnEvent<[Value, Value]>;\n  on(receiver: EventReceiver<[Value, Value]>): EventSupply;\n  on(receiver?: EventReceiver<[Value, Value]>): OnEvent<[Value, Value]> | EventSupply {\n    return (this.on = this._control.on().F)(receiver);\n  }\n\n}\n\n/**\n * Constructs input control with the same value as another one.\n *\n * The constructed control does not inherit any aspects from original one.\n *\n * @category Control\n * @param control  Original control containing the value.\n *\n * @returns New input control that accesses the value of original `control`.\n */\nexport function inValueOf<Value>(control: InControl<Value>): InControl<Value> {\n  return new InSameValueControl(control);\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/input-aspects\n */\nimport { InAspect } from '../aspect';\nimport { InControl } from '../control';\nimport { InConverter, intoConvertedAspects } from '../converter';\nimport { inValueOf } from './value-of.control';\n\n/**\n * Abstract input control implementation.\n *\n * Allows to define default input aspects.\n *\n * @category Control\n */\nexport abstract class AbstractInControl<Value> extends InControl<Value> {\n\n  /**\n   * @internal\n   */\n  private readonly _aspectConversion: InConverter.Aspect.Conversion<Value>;\n\n  /**\n   * Constructs input control.\n   *\n   * @param aspects  Input aspects applied by default. These are aspect converters to constructed control\n   * from the {@link inValueOf same-valued one}.\n   */\n  protected constructor(\n      {\n        aspects,\n      }: {\n        readonly aspects?: InConverter.Aspect<Value> | readonly InConverter.Aspect<Value>[];\n      },\n  ) {\n    super();\n    this._aspectConversion = intoConvertedAspects(aspects)(inValueOf(this), this);\n  }\n\n  protected _applyAspect<Instance, Kind extends InAspect.Application.Kind>(\n      aspect: InAspect<Instance, Kind>,\n  ): InAspect.Application.Result<Instance, Value, Kind> | undefined {\n    return this._aspectConversion.applyAspect(aspect) || super._applyAspect(aspect);\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/input-aspects\n */\nimport {\n  AfterEvent,\n  AfterEvent__symbol,\n  EventKeeper,\n  EventReceiver,\n  EventSender,\n  EventSupply,\n  OnEvent,\n  OnEvent__symbol,\n} from '@proc7ts/fun-events';\nimport { InAspect, InAspect__symbol } from '../aspect';\nimport { inAspectSameOrNull } from '../aspect.impl';\nimport { InControl } from '../control';\nimport { AbstractInControl } from '../controls';\n\n/**\n * @internal\n */\nconst InContainer__aspect: InAspect<InContainer<any> | null, 'container'> = {\n  applyTo(control) {\n    return inAspectSameOrNull(control, InContainer);\n  },\n};\n\n/**\n * An input control containing other controls.\n *\n * Container is available as an aspect of itself and converted controls with the same value.\n *\n * @category Control\n * @typeparam Value  Input value type.\n */\nexport abstract class InContainer<Value> extends AbstractInControl<Value> {\n\n  static get [InAspect__symbol](): InAspect<InContainer<any> | null, 'container'> {\n    return InContainer__aspect;\n  }\n\n  /**\n   * Controls of this input container.\n   */\n  abstract readonly controls: InContainerControls;\n\n  protected _applyAspect<Instance, Kind extends InAspect.Application.Kind>(\n      aspect: InAspect<Instance, Kind>,\n  ): InAspect.Application.Result<Instance, Value, Kind> | undefined {\n    return aspect === InContainer__aspect as InAspect<any>\n        ? inAspectSameOrNull(this, InContainer, this) as InAspect.Application.Result<Instance, Value, Kind>\n        : super._applyAspect(aspect);\n  }\n\n}\n\nexport namespace InContainer {\n\n  /**\n   * Input controls container entry.\n   *\n   * This is a tuple containing control key and control itself.\n   *\n   * Container implementations may apply limitations on the type of keys and input values they support.\n   *\n   * @typeparam L  Input container layout interface.\n   */\n  export type Entry = readonly [PropertyKey, InControl<any>];\n\n  /**\n   * A snapshot of input controls within container.\n   *\n   * Extends an `Iterable` interface by iterating over all nested controls.\n   */\n  export interface Snapshot extends Iterable<InControl<any>> {\n\n    [Symbol.iterator](): IterableIterator<InControl<any>>;\n\n    /**\n     * Iterates over nested control entries.\n     *\n     * @returns An iterable iterator over entries.\n     */\n    entries(): IterableIterator<InContainer.Entry>;\n\n  }\n\n}\n\n/**\n * Controls of input container.\n *\n * Allows to track container contents. I.e. nested controls, their additions and removal.\n *\n * Implements `EventSender` interface by sending arrays of added and removed control entries.\n *\n * Implements `EventKeeper` interface by sending container contents instance each time it is changed.\n *\n * @category Control\n */\nexport abstract class InContainerControls\n     implements EventSender<[InContainer.Entry[], InContainer.Entry[]]>, EventKeeper<[InContainer.Snapshot]> {\n\n  /**\n   * Builds an `OnEvent` sender of container updates.\n   *\n   * Sends two arrays on each container update: the first one contains added control entries, while the second one\n   * contains removed control entries.\n   *\n   * The `[OnEvent__symbol]` property is an alias of this one.\n   *\n   * @returns Container updates sender.\n   */\n  abstract on(): OnEvent<[InContainer.Entry[], InContainer.Entry[]]>;\n\n  /**\n   * Starts sending container updates to the given receiver.\n   *\n   * Sends two arrays on each container update: the first one contains added control entries, while the second one\n   * contains removed control entries.\n   *\n   * @param receiver  Target container updates receiver.\n   *\n   * @returns Container updates supply.\n   */\n  abstract on(receiver: EventReceiver<[InContainer.Entry[], InContainer.Entry[]]>): EventSupply;\n\n  [OnEvent__symbol](): OnEvent<[InContainer.Entry[], InContainer.Entry[]]> {\n    return this.on();\n  }\n\n  /**\n   * Builds an `AfterEvent` keeper of input container contents.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   *\n   * @returns Container contents snapshot keeper.\n   */\n  abstract read(): AfterEvent<[InContainer.Snapshot]>;\n\n  /**\n   * Starts sending container contents and updates to the given `receiver`\n   *\n   * @param receiver  Target receiver of container snapshot updates.\n   *\n   * @returns Container contents supply.\n   */\n  abstract read(receiver: EventReceiver<[InContainer.Snapshot]>): EventSupply;\n\n  [AfterEvent__symbol](): AfterEvent<[InContainer.Snapshot]> {\n    return this.read();\n  }\n\n}\n\ndeclare module '../aspect' {\n\n  export namespace InAspect.Application {\n\n    export interface Map<OfInstance, OfValue> {\n\n      /**\n       * Input controls container application type.\n       */\n      container(): InContainer<OfValue> | null;\n\n    }\n\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/input-aspects\n */\nimport {\n  AfterEvent,\n  AfterEvent__symbol,\n  afterSent,\n  EventEmitter,\n  EventKeeper,\n  EventReceiver,\n  EventSender,\n  eventSupply,\n  EventSupply,\n  eventSupplyOf,\n  OnEvent,\n  OnEvent__symbol,\n} from '@proc7ts/fun-events';\nimport { InAspect, InAspect__symbol } from '../aspect';\nimport { inAspectValue } from '../aspect.impl';\nimport { InControl } from '../control';\nimport { InContainer } from './container.control';\n\n/**\n * @internal\n */\nconst InParents__aspect: InAspect<InParents> = {\n  applyTo(control): InAspect.Applied<any, InParents> {\n    return inAspectValue(new InControlParents(control));\n  },\n};\n\n/**\n * Parents of input control.\n *\n * Reflects all containers the control belongs to. Note that component may belong to multiple containers. Or even\n * to the same container multiple times.\n *\n * Implements `EventSender` interface by sending arrays of parent entries the control is added to and removed from.\n *\n * Implements `EventKeeper` interface by sending a snapshot of all parents each time it is updated.\n *\n * @category Aspect\n */\nexport abstract class InParents\n    implements EventKeeper<[Iterable<InParents.Entry>]>, EventSender<[InParents.Entry[], InParents.Entry[]]> {\n\n  static get [InAspect__symbol](): InAspect<InParents> {\n    return InParents__aspect;\n  }\n\n  /**\n   * Builds an `OnEvent` sender of parent updates.\n   *\n   * Sends two arrays on each parents update: the first one contains added parent entries, while the second one\n   * contains removed parent entries.\n   *\n   * The `[OnEvent__symbol]` property is an alias of this one.\n   *\n   * @returns `OnEvent` sender of parent updates.\n   */\n  abstract on(): OnEvent<[InParents.Entry[], InParents.Entry[]]>;\n\n  /**\n   * Starts sending parent updates to the given `receiver`.\n   *\n   * Sends two arrays on each parents update: the first one contains added parent entries, while the second one\n   * contains removed parent entries.\n   *\n   * @param receiver  Target parent updates receiver.\n   *\n   * @returns Parent updates supply.\n   */\n  abstract on(receiver: EventReceiver<[InParents.Entry[], InParents.Entry[]]>): EventSupply;\n\n  [OnEvent__symbol](): OnEvent<[InParents.Entry[], InParents.Entry[]]> {\n    return this.on();\n  }\n\n  /**\n   * Builds an `AfterEvent` keeper of control parents.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   *\n   * @returns `AfterEvent` keeper of control parents.\n   */\n  abstract read(): AfterEvent<[InParents.All]>;\n\n  /**\n   * Starts sending control parents and updates to the given `receiver`\n   *\n   * @param receiver  Target control parents receiver.\n   *\n   * @returns Control parents supply.\n   */\n  abstract read(receiver: EventReceiver<[InParents.All]>): EventSupply;\n\n  [AfterEvent__symbol](): AfterEvent<[InParents.All]> {\n    return this.read();\n  }\n\n  /**\n   * Adds the input control to the given parent container under the given key.\n   *\n   * @param entry  Parent container entry.\n   *\n   * @returns A parent container supply. Removes the control from the parent container once cut off.\n   */\n  abstract add(entry: InParents.Entry): EventSupply;\n\n}\n\nexport namespace InParents {\n\n  /**\n   * Parent container entry of input control.\n   */\n  export interface Entry {\n\n    /**\n     * Parent container.\n     */\n    readonly parent: InContainer<any>;\n\n  }\n\n  /**\n   * All control parents as iterable instance.\n   */\n  export interface All extends Iterable<Entry> {\n\n    [Symbol.iterator](): IterableIterator<Entry>;\n\n  }\n\n}\n\n/**\n * @internal\n */\nclass InControlParents extends InParents {\n\n  private readonly _map = new Map<InParents.Entry, EventSupply>();\n  private readonly _on = new EventEmitter<[InParents.Entry[], InParents.Entry[]]>();\n\n  constructor(private readonly _control: InControl<any>) {\n    super();\n    eventSupplyOf(this._on).needs(this._control);\n  }\n\n  add(entry: InParents.Entry): EventSupply {\n\n    const existingSupply = this._map.get(entry);\n\n    if (existingSupply) {\n      // Parent entry already added. Doing nothing\n      return existingSupply;\n    }\n\n    // Adding new entry\n    const supply = eventSupply(() => {\n      this._map.delete(entry);\n      this._on.send([], [entry]);\n    });\n\n    this._map.set(entry, supply);\n    this._on.send([entry], []);\n\n    return supply\n        .needs(this._control)\n        .needs(entry.parent);\n  }\n\n  on(): OnEvent<[InParents.Entry[], InParents.Entry[]]>;\n  on(receiver: EventReceiver<[InParents.Entry[], InParents.Entry[]]>): EventSupply;\n  on(\n      receiver?: EventReceiver<[InParents.Entry[], InParents.Entry[]]>,\n  ): OnEvent<[InParents.Entry[], InParents.Entry[]]> | EventSupply {\n    return (this.on = this._on.on().F)(receiver);\n  }\n\n  read(): AfterEvent<[InParents.All]>;\n  read(receiver: EventReceiver<[InParents.All]>): EventSupply;\n  read(receiver?: EventReceiver<[InParents.All]>): AfterEvent<[InParents.All]> | EventSupply {\n\n    const allParents = (): IterableIterator<InParents.Entry> => this._map.keys();\n\n    return (this.read = afterSent<[InParents.All]>(\n        this.on().thru(allParents),\n        () => [allParents()],\n    ).F)(receiver);\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/input-aspects\n */\nimport { AfterEvent, EventReceiver, EventSupply } from '@proc7ts/fun-events';\nimport { DomEventDispatcher } from '@proc7ts/fun-events/dom';\nimport { InAspect, InAspect__symbol } from './aspect';\nimport { inAspectSameOrNull } from './aspect.impl';\nimport { AbstractInControl } from './controls';\n\n/**\n * @internal\n */\nconst InElement__aspect: InAspect<InElement<any> | null, 'element'> = {\n  applyTo(control) {\n    return inAspectSameOrNull(control, InElement);\n  },\n};\n\n/**\n * HTML input element control.\n *\n * It is also available as aspect of itself and converted controls with the same value.\n *\n * @category Control\n * @typeparam Value  Input value type.\n * @typeparam Elt  A type of input HTML element.\n */\nexport abstract class InElement<Value, Elt = HTMLElement> extends AbstractInControl<Value> {\n\n  /**\n   * HTML input element this control is based on.\n   */\n  abstract readonly element: Elt;\n\n  /**\n   * DOM event dispatcher of this element.\n   */\n  abstract readonly events: DomEventDispatcher;\n\n  static get [InAspect__symbol](): InAspect<InElement<any> | null, 'element'> {\n    return InElement__aspect;\n  }\n\n  /**\n   * Builds an `AfterEvent` keeper of user input.\n   *\n   * @returns `AfterEvent` keeper of user input.\n   */\n  abstract input(): AfterEvent<[InElement.Input<Value>]>;\n\n  /**\n   * Starts sending user input and updates to the given `receiver`.\n   *\n   * @param receiver  Target user input receiver.\n   *\n   * @returns User input supply.\n   */\n  abstract input(receiver: EventReceiver<[InElement.Input<Value>]>): EventSupply;\n\n  protected _applyAspect<Instance, Kind extends InAspect.Application.Kind>(\n      aspect: InAspect<Instance, Kind>,\n  ): InAspect.Application.Result<Instance, Value, Kind> | undefined {\n    return aspect as InAspect<any, any> === InElement__aspect\n        ? inAspectSameOrNull(\n            this,\n            InElement,\n            this as InElement<Value, any>,\n        ) as InAspect.Application.Result<Instance, Value, Kind>\n        : super._applyAspect(aspect);\n  }\n\n}\n\nexport namespace InElement {\n\n  /**\n   * User input.\n   *\n   * @typeparam Value  Input value type.\n   */\n  export interface Input<Value> {\n\n    /**\n     * The value user entered.\n     */\n    value: Value;\n\n    /**\n     * An event caused the value to be applied.\n     *\n     * The value has been applied programmatically if missing.\n     */\n    event?: Event;\n\n  }\n\n}\n\ndeclare module './aspect' {\n\n  export namespace InAspect.Application {\n\n    export interface Map<OfInstance, OfValue> {\n\n      /**\n       * Input element application type.\n       */\n      element(): InElement<OfValue> | null;\n\n    }\n\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/input-aspects\n */\nimport { flatMapIt } from '@proc7ts/a-iterable';\nimport { nextArgs, NextCall, nextSkip } from '@proc7ts/call-thru';\nimport {\n  afterAll,\n  afterEach,\n  AfterEvent,\n  AfterEvent__symbol,\n  afterSent,\n  afterSupplied,\n  EventEmitter,\n  EventKeeper,\n  EventReceiver,\n  EventSender,\n  eventSupply,\n  EventSupply,\n  EventSupply__symbol,\n  eventSupplyOf,\n  isEventKeeper,\n  nextAfterEvent,\n  OnEvent,\n  OnEvent__symbol,\n  OnEventCallChain,\n  trackValue,\n  ValueTracker,\n} from '@proc7ts/fun-events';\nimport { valuesProvider } from '@proc7ts/primitives';\nimport { InAspect, InAspect__symbol } from '../aspect';\nimport { inAspectSameOrBuild } from '../aspect.impl';\nimport { InParents } from '../containers';\nimport { InParentsAspect } from '../containers/parents.aspect.impl';\nimport { InControl } from '../control';\nimport { InElement } from '../element.control';\n\n/**\n * @internal\n */\nconst InMode__aspect: InAspect<InMode> = {\n\n  applyTo<Value>(control: InControl<Value>): InAspect.Applied<Value, InMode> {\n    return inAspectSameOrBuild(\n        control,\n        InMode,\n        ctrl => new InControlMode(ctrl),\n    );\n  },\n\n};\n\n/**\n * Input mode aspect of control.\n *\n * Control can be either enabled, disabled, or readonly.\n *\n * Each control maintains its own state, while nested controls respect container ones. I.e. when container is disabled\n * all nested ones are also disabled. When container is readonly, all nested ones are also readonly, unless explicitly\n * disabled.\n *\n * When applied to input element this aspect maintains its `disabled` and `readonly` attributes (not properties!).\n *\n * Implements `EventSender` interface by sending new and old mode values on each update.\n *\n * Implements `EventKeeper` interface by sending actual mode value.\n *\n * @category Aspect\n */\nexport abstract class InMode implements EventSender<[InMode.Value, InMode.Value]>, EventKeeper<[InMode.Value]> {\n\n  static get [InAspect__symbol](): InAspect<InMode> {\n    return InMode__aspect;\n  }\n\n  /**\n   * Creates an `OnEvent` sender of input mode updates.\n   *\n   * Sends a new mode value along with old one as second parameter.\n   *\n   * The `[OnEvent__symbol]` property is an alias of this one.\n   *\n   * @returns `OnEvent` sender of input mode updates.\n   */\n  abstract on(): OnEvent<[InMode.Value, InMode.Value]>;\n\n  /**\n   * Starts sending input mode updates to the given `receiver`\n   *\n   * Sends a new mode value along with old one as second parameter.\n   *\n   * @param receiver  Target input mode updates receiver.\n   *\n   * @returns Input mode updates supply.\n   */\n  abstract on(receiver: EventReceiver<[InMode.Value, InMode.Value]>): EventSupply;\n\n  [OnEvent__symbol](): OnEvent<[InMode.Value, InMode.Value]> {\n    return this.on();\n  }\n\n  /**\n   * Builds an `AfterEvent` keeper of input mode.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   *\n   * @returns `AfterEvent` keeper of input mode.\n   */\n  abstract read(): AfterEvent<[InMode.Value]>;\n\n  /**\n   * Starts sending input mode and updates to the given `receiver`.\n   *\n   * @param receiver  Target receiver of input mode.\n   *\n   * @returns Input mode supply.\n   */\n  abstract read(receiver: EventReceiver<[InMode.Value]>): EventSupply;\n\n  [AfterEvent__symbol](): AfterEvent<[InMode.Value]> {\n    return this.read();\n  }\n\n  /**\n   * Own input mode tracker.\n   */\n  abstract readonly own: ValueTracker<InMode.Value>;\n\n  /**\n   * Checks whether control in the given `mode` has data to submit.\n   *\n   * @param mode  Input control mode to check.\n   *\n   * @returns `true` if control in the given `mode` has data to submit, or `false` otherwise.\n   */\n  static hasData(mode: InMode.Value): boolean {\n    return mode !== 'off' && mode[0] !== '-';\n  }\n\n  /**\n   * Derives input mode from another `source`.\n   *\n   * If the `source` mode is disabled, this one would be disabled too. If the `source` mode is read-only, then this one\n   * would be read-only, unless disabled already.\n   *\n   * @param source  A source to derive input mode from.\n   *\n   * @returns Derived input mode supply. Disables `source` mode derivation once cut off.\n   */\n  abstract derive(source: InMode.Source): EventSupply;\n\n  /**\n   * Unregisters all receivers.\n   *\n   * @param reason  Optional reason.\n   *\n   * @returns `this` instance.\n   */\n  done(reason?: any): this {\n    this.own.done(reason);\n    return this;\n  }\n\n}\n\nexport namespace InMode {\n\n  /**\n   * Possible input control mode value:\n   *\n   * - `on` when control is writable. This is the default.\n   * - `ro` when control is read-only. Such control can not be edited, but still can be submitted.\n   * - `off` when control is disabled. Such control is not submitted.\n   * - `-on` when control is writable, but not submitted.\n   * - `-ro` when control is read-only, but not submitted.\n   */\n  export type Value = 'on' | 'ro' | 'off' | '-on' | '-ro';\n\n  /**\n   * A source of input mode.\n   *\n   * This is either an event keeper of {@link Value mode value}, or a function returning one and accepting target input\n   * control as the only parameter.\n   */\n  export type Source =\n      | EventKeeper<[InMode.Value]>\n      | ((this: void, control: InControl<any>) => EventKeeper<[InMode.Value]>);\n\n}\n\n/**\n * @internal\n */\nclass OwnModeTracker extends ValueTracker<InMode.Value> {\n\n  private readonly _tracker: ValueTracker<InMode.Value>;\n\n  constructor(element: InElement<any> | null) {\n    super();\n    this._tracker = trackValue(element ? initialInMode(element.element) : 'on');\n  }\n\n  get [EventSupply__symbol](): EventSupply {\n    return eventSupplyOf(this._tracker);\n  }\n\n  get it(): InMode.Value {\n    return this._tracker.it;\n  }\n\n  set it(value: InMode.Value) {\n    switch (value) {\n    case 'off':\n    case 'ro':\n    case '-on':\n    case '-ro':\n      break;\n    default:\n      value = 'on'; // Correct the value.\n    }\n\n    this._tracker.it = value;\n  }\n\n  on(): OnEvent<[InMode.Value, InMode.Value]>;\n  on(receiver: EventReceiver<[InMode.Value, InMode.Value]>): EventSupply;\n  on(receiver?: EventReceiver<[InMode.Value, InMode.Value]>): OnEvent<[InMode.Value, InMode.Value]> | EventSupply {\n    return (this.on = this._tracker.on().F)(receiver);\n  }\n\n}\n\n/**\n * @internal\n */\nclass DerivedInModes {\n\n  readonly read: AfterEvent<[InMode.Value]>;\n  private readonly _all = new Set<AfterEvent<[InMode.Value]>>();\n  private readonly _on = new EventEmitter<[]>();\n\n  constructor() {\n\n    const sources: AfterEvent<[Set<AfterEvent<[InMode.Value]>>]> = afterSent(\n        this._on.on().thru(() => this._all),\n        valuesProvider(this._all),\n    );\n\n    this.read = sources.keepThru(\n        (set: Set<AfterEvent<[InMode.Value]>>) => nextAfterEvent(afterEach(...set)),\n        mergeInModes,\n    );\n  }\n\n  add(source: AfterEvent<[InMode.Value]>): EventSupply {\n\n    const supply = eventSupply(() => {\n      this._all.delete(source);\n      this._on.send();\n    });\n\n    this._all.add(source);\n    this._on.send();\n\n    return supply;\n  }\n\n}\n\n/**\n * @internal\n */\nclass InControlMode extends InMode {\n\n  readonly own: OwnModeTracker;\n  private readonly _derived = new DerivedInModes();\n\n  constructor(private readonly _control: InControl<any>) {\n    super();\n\n    const element = _control.aspect(InElement);\n\n    this.own = new OwnModeTracker(element);\n    eventSupplyOf(this.own).needs(_control);\n    this.derive(_control.aspect(InParentsAspect).read().keepThru_(parentsInMode));\n    if (element) {\n      this.read(value => applyInMode(element.element, value));\n    }\n  }\n\n  read(): AfterEvent<[InMode.Value]>;\n  read(receiver: EventReceiver<[InMode.Value]>): EventSupply;\n  read(receiver?: EventReceiver<[InMode.Value]>): AfterEvent<[InMode.Value]> | EventSupply {\n\n    let last: InMode.Value = 'on';\n\n    return (this.read = afterSent<[InMode.Value]>(\n            afterAll({\n              derived: this._derived.read,\n              own: this.own,\n            }).thru(\n                ({\n                  derived: [derived],\n                  own: [own],\n                }) => {\n\n                  let next: InMode.Value;\n\n                  if (own === 'off' || derived === 'off') {\n                    next = 'off';\n                  } else {\n\n                    let off = false;\n\n                    if (own[0] === '-') {\n                      off = true;\n                      own = own.substring(1) as InMode.Value;\n                    }\n                    if (derived[0] === '-') {\n                      off = true;\n                      derived = derived.substring(1) as InMode.Value;\n                    }\n                    next = derived === 'ro' ? 'ro' : own;\n                    if (off) {\n                      next = '-' + next as InMode.Value;\n                    }\n                  }\n\n                  return last === next ? nextSkip() : nextArgs(last = next);\n                },\n            ),\n            valuesProvider<[InMode.Value]>(last),\n        ).F\n    )(receiver);\n  }\n\n  on(): OnEvent<[InMode.Value, InMode.Value]>;\n  on(receiver: EventReceiver<[InMode.Value, InMode.Value]>): EventSupply;\n  on(receiver?: EventReceiver<[InMode.Value, InMode.Value]>): OnEvent<[InMode.Value, InMode.Value]> | EventSupply {\n    let lastUpdate: InMode.Value = 'on';\n\n    return (this.on = this.read().thru(value => {\n\n      const old = lastUpdate;\n\n      return old === value ? nextSkip() : nextArgs(lastUpdate = value, old);\n    }).F)(receiver);\n  }\n\n  derive(source: InMode.Source): EventSupply {\n    return this._derived.add(\n        afterSupplied(isEventKeeper(source) ? source : source(this._control))\n            .tillOff(this._control),\n    ).needs(this._control);\n  }\n\n}\n\n/**\n * @internal\n */\nfunction initialInMode(element: HTMLElement): InMode.Value {\n  return element.getAttribute('disabled') != null\n      ? 'off' : (\n          element.getAttribute('readonly') != null ? 'ro' : 'on'\n      );\n}\n\n/**\n * @internal\n */\nfunction applyInMode(element: HTMLElement, value: InMode.Value): void {\n  switch (value) {\n  case 'off':\n    element.setAttribute('disabled', '');\n    break;\n  case 'ro':\n  case '-ro':\n    // Workaround of https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/12087679/\n    element.setAttribute('disabled', '');\n    element.removeAttribute('disabled');\n    element.setAttribute('readonly', '');\n    break;\n  default:\n    // Workaround of https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/12087679/\n    element.setAttribute('disabled', '');\n    element.removeAttribute('disabled');\n    // Workaround of https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/12087679/\n    element.setAttribute('readonly', '');\n    element.removeAttribute('readonly');\n  }\n}\n\n/**\n * @internal\n */\nfunction parentsInMode(parents: InParents.All): NextCall<OnEventCallChain, [InMode.Value]> {\n\n  const parentList = Array.from(parents);\n\n  if (!parentList.length) {\n    return nextArgs('on');\n  }\n\n  const parentModes = parentList.map(({ parent }) => parent.aspect(InMode));\n\n  return nextAfterEvent(afterEach(...parentModes).keepThru_(mergeInModes));\n}\n\nfunction mergeInModes(...modes: [InMode.Value][]): InMode.Value {\n  return inModeValue(...flatMapIt<InMode.Value>(modes));\n}\n\n/**\n * Merges multiple input mode values.\n *\n * @category Aspect\n * @param modes  Input mode values to merge.\n *\n * @returns Merged input mode value.\n */\nexport function inModeValue(...modes: InMode.Value[]): InMode.Value {\n\n  let ro = false;\n  let off = false;\n\n  for (const mode of modes) {\n    switch (mode) {\n    case 'off':\n      return 'off';\n    case 'ro':\n      ro = true;\n      break;\n    case '-on':\n      off = true;\n      break;\n    case '-ro':\n      off = true;\n      ro = true;\n      break;\n    case 'on':\n    }\n  }\n\n  return off ? (ro ? '-ro' : '-on') : (ro ? 'ro' : 'on');\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/input-aspects\n */\nimport { nextArgs } from '@proc7ts/call-thru';\nimport { afterAll, AfterEvent } from '@proc7ts/fun-events';\nimport { InAspect, InAspect__symbol } from '../aspect';\nimport { inAspectSameOrBuild } from '../aspect.impl';\nimport { InControl } from '../control';\nimport { InMode } from './mode.aspect';\n\n/**\n * A data aspect of the input.\n *\n * Represents input control data that will be submitted.\n *\n * Input data is typically the same as control value with respect to {@link InMode input mode}. I.e. when input mode is\n * `off` the data is `undefined`.\n *\n * An aspect interface is an `AfterEvent` keeper of input data.\n *\n * @category Aspect\n * @typeparam Value  Input value type.\n */\nexport type InData<Value> = AfterEvent<[InData.DataType<Value>?]>;\n\n/**\n * @internal\n */\nconst InData__aspect: Aspect = {\n\n  applyTo<Value>(control: InControl<Value>): Applied<Value> {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    return inAspectSameOrBuild(control, InData, <V>(ctrl: InControl<V>) => afterAll({\n      value: ctrl,\n      mode: ctrl.aspect(InMode),\n    }).keepThru(\n        ({ value: [value], mode: [mode] }) => InMode.hasData(mode)\n            ? nextArgs(value as any)\n            : nextArgs(),\n    ));\n  },\n\n};\n\n/**\n * Input data aspect.\n */\ninterface Aspect extends InAspect<InData<any>, 'data'> {\n\n  applyTo<Value>(control: InControl<Value>): Applied<Value>;\n\n}\n\n/**\n * An input data aspect applied to control.\n */\ninterface Applied<Value> extends InAspect.Applied<Value, InData<Value>, InData<any>> {\n\n  convertTo<To>(target: InControl<To>): Applied<To> | undefined;\n\n}\n\nexport const InData = {\n\n  get [InAspect__symbol](): InAspect<InData<any>, 'data'> {\n    return InData__aspect;\n  },\n\n};\n\n/**\n * @category Aspect\n */\nexport namespace InData {\n\n  /**\n   * Input data type.\n   *\n   * This is either a partial value (for the object), or the value itself (for everything else).\n   *\n   * @typeparam Value  Input value type.\n   */\n  export type DataType<Value> =\n      | (Value extends object ? { [K in keyof Value]?: DataType<Value[K]> } : Value)\n      | undefined;\n\n}\n\ndeclare module '../aspect' {\n\n  export namespace InAspect.Application {\n\n    export interface Map<OfInstance, OfValue> {\n\n      /**\n       * Input data aspect application type.\n       */\n      data(): InData<OfValue>;\n\n    }\n\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/input-aspects\n */\nimport { itsEach, itsIterable, mapIt, overEntries } from '@proc7ts/a-iterable';\nimport { nextArg, nextArgs, NextCall } from '@proc7ts/call-thru';\nimport {\n  afterAll,\n  AfterEvent,\n  AfterEvent__symbol,\n  afterSent,\n  EventEmitter,\n  EventKeeper,\n  EventReceiver,\n  EventSender,\n  eventSupply,\n  EventSupply,\n  EventSupply__symbol,\n  eventSupplyOf,\n  nextAfterEvent,\n  noEventSupply,\n  OnEvent,\n  OnEvent__symbol,\n  OnEventCallChain,\n  trackValue,\n  ValueTracker,\n} from '@proc7ts/fun-events';\nimport { noop } from '@proc7ts/primitives';\nimport { InAspect, InAspect__symbol } from '../aspect';\nimport { inAspectSameOrNull } from '../aspect.impl';\nimport { InControl } from '../control';\nimport { InConverter } from '../converter';\nimport { InData, InMode } from '../data';\nimport { InContainer, InContainerControls } from './container.control';\nimport { InParents } from './parents.aspect';\n\n/**\n * @internal\n */\nconst InGroup__aspect: InAspect<InGroup<any> | null, 'group'> = {\n  applyTo(control) {\n    return inAspectSameOrNull(control, InGroup);\n  },\n};\n\n/**\n * A group of input controls.\n *\n * Nested controls are identified by keys and can be added and removed via `controls` property.\n *\n * Group value (called model) is an object formed by nested control values. The model property value is the one of the\n * control with the same key, if present. When model is updated corresponding controls are also updated.\n *\n * Group is available as an aspect of itself and converted controls with the same value.\n *\n * @category Control\n * @typeparam Model  Group model type, i.e. its value type.\n */\nexport abstract class InGroup<Model extends object> extends InContainer<Model> {\n\n  static get [InAspect__symbol](): InAspect<InGroup<any> | null, 'group'> {\n    return InGroup__aspect;\n  }\n\n  /**\n   * Input group controls.\n   */\n  abstract readonly controls: InGroupControls<Model>;\n\n  protected _applyAspect<Instance, Kind extends InAspect.Application.Kind>(\n      aspect: InAspect<any, any>,\n  ): InAspect.Application.Result<Instance, Model, Kind> | undefined {\n    return aspect === InGroup__aspect\n        ? inAspectSameOrNull(this, InGroup, this) as InAspect.Application.Result<Instance, Model, Kind>\n        : super._applyAspect(aspect);\n  }\n\n}\n\nexport namespace InGroup {\n\n  /**\n   * Input group controls.\n   *\n   * This is a read-only object containing an input control per each model property under the same key.\n   *\n   * @typeparam Model  Group model type, i.e. its value type.\n   */\n  export type Controls<Model> = {\n    readonly [K in keyof Model]?: InControl<Model[K]>;\n  };\n\n  /**\n   * Input controls group entry.\n   *\n   * This is a tuple containing model key and corresponding control.\n   *\n   * @typeparam Model  Group model type, i.e. its value type.\n   */\n  export type Entry<Model, K extends keyof Model = any> = readonly [K, InControl<Model[K]>];\n\n  /**\n   * A snapshot of input control group controls.\n   *\n   * @typeparam Model  Group model type, i.e. its value type.\n   */\n  export interface Snapshot<Model> extends InContainer.Snapshot {\n\n    entries(): IterableIterator<Entry<Model>>;\n\n    /**\n     * Returns input control with the given key, if present.\n     *\n     * @param key  Control key, i.e. corresponding model property key.\n     *\n     * @returns Target control, or `undefined` if there is no control set for this key.\n     */\n    get<K extends keyof Model>(key: K): InGroup.Controls<Model>[K] | undefined;\n\n  }\n\n}\n\n/**\n * Input group controls.\n *\n * @category Control\n * @typeparam Model  Group model type, i.e. its value type.\n */\nexport abstract class InGroupControls<Model>\n    extends InContainerControls\n    implements EventSender<[InGroup.Entry<Model>[], InGroup.Entry<Model>[]]>, EventKeeper<[InGroup.Snapshot<Model>]> {\n\n  abstract on(): OnEvent<[InGroup.Entry<Model>[], InGroup.Entry<Model>[]]>;\n  abstract on(receiver: EventReceiver<[InGroup.Entry<Model>[], InGroup.Entry<Model>[]]>): EventSupply;\n\n  abstract read(): AfterEvent<[InGroup.Snapshot<Model>]>;\n  abstract read(receiver: EventReceiver<[InGroup.Snapshot<Model>]>): EventSupply;\n\n  /**\n   * Sets input control with the given key.\n   *\n   * Replaces existing control if already present.\n   *\n   * @param key  A key of input control to set. I.e. corresponding model property key.\n   * @param control  Input control to add, or `undefined` to remove control.\n   *\n   * @returns A supply of just added control that removes it once cut off. A cut off supply when set to `undefined`.\n   */\n  abstract set<K extends keyof Model>(key: K, control: InControl<Model[K]> | undefined): EventSupply;\n\n  /**\n   * Sets multiple input controls at a time.\n   *\n   * @param controls  A map of controls under their keys. A value can be `undefined` to remove corresponding control.\n   *\n   * @returns A supply of just added controls that removes them once cut off.\n   */\n  abstract set(controls: InGroup.Controls<Model>): EventSupply;\n\n  /**\n   * Removes input control with the given key.\n   *\n   * Calling this method is the same as calling `set(key, undefined)`\n   *\n   * @param key  A key of input control to remove. I.e. corresponding model property key.\n   */\n  remove(key: keyof Model): void {\n    this.set(key, undefined);\n  }\n\n  /**\n   * Removes all input controls.\n   */\n  abstract clear(): void;\n\n}\n\nexport interface InGroupControls<Model> {\n\n  [OnEvent__symbol](): OnEvent<[InGroup.Entry<Model>[], InGroup.Entry<Model>[]]>;\n\n  [AfterEvent__symbol](): AfterEvent<[InGroup.Snapshot<Model>]>;\n\n}\n\n/**\n * @internal\n */\ntype InGroupEntry = readonly [InControl<any>, EventSupply]; // When event supply is done the control is unused\n\n/**\n * @internal\n */\nconst inControlReplacedReason = {};\n\n/**\n * @internal\n */\nclass InGroupSnapshot<Model> implements InGroup.Snapshot<Model> {\n\n  constructor(private readonly _map: Map<keyof Model, InGroupEntry>) {\n  }\n\n  get<K extends keyof Model>(key: K): InGroup.Controls<Model>[K] | undefined {\n\n    const entry = this._map.get(key);\n\n    return entry && entry[0] as InGroup.Controls<Model>[K];\n  }\n\n  [Symbol.iterator](): IterableIterator<InControl<any>> {\n    return itsIterable(mapIt(this._map.values(), ([control]) => control));\n  }\n\n  entries(): IterableIterator<InGroup.Entry<Model>> {\n    return itsIterable(mapIt(this._map.entries(), ([key, [control]]) => [key, control]));\n  }\n\n}\n\n/**\n * @internal\n */\nclass InGroupMap<Model extends object> {\n\n  readonly _supply = eventSupply();\n  private _map = new Map<keyof Model, InGroupEntry>();\n  private _shot?: InGroupSnapshot<Model>;\n\n  constructor(private readonly _controls: InGroupControlControls<Model>) {\n  }\n\n  set<K extends keyof Model>(\n      key: K,\n      control: InControl<Model[K]> | undefined,\n      added: [keyof Model, InGroupEntry][],\n      removed: [keyof Model, InGroupEntry][],\n  ): EventSupply {\n\n    const replaced = this._map.get(key);\n    let supply: EventSupply;\n\n    if (control) {\n      supply = eventSupply();\n\n      const entry = this.newEntry(key, control, supply);\n\n      let sendUpdate = true;\n\n      if (replaced) {\n        if (replaced[0] === control) {\n          // Do not send update when replacing control with itself\n          sendUpdate = false;\n        } else {\n          removed.push([key, replaced]);\n        }\n      }\n\n      if (sendUpdate) {\n        this.modify().set(key, entry);\n        added.push([key, entry]);\n      } else {\n        this._map.set(key, entry);\n      }\n    } else {\n      supply = noEventSupply();\n      if (replaced) {\n        removed.push([key, replaced]);\n        this.modify().delete(key);\n      }\n    }\n    if (replaced) {\n      replaced[1].off(inControlReplacedReason);\n    }\n\n    return supply;\n  }\n\n  private newEntry<K extends keyof Model>(\n      key: K,\n      control: InControl<Model[K]>,\n      supply: EventSupply,\n  ): InGroupEntry {\n    return [\n      control,\n      eventSupply(reason => {\n        if (reason !== inControlReplacedReason) {\n          this._controls.remove(key);\n        }\n      })\n          .needs(this._supply)\n          .needs(supply)\n          .whenOff(\n              reason => supply.off(reason === inControlReplacedReason ? undefined : reason),\n          ),\n    ];\n  }\n\n  private modify(): Map<keyof Model, InGroupEntry> {\n    if (this._shot) {\n\n      const map = new Map<keyof Model, InGroupEntry>();\n\n      itsEach(this._map.entries(), ([k, e]) => map.set(k, e));\n      this._shot = undefined;\n      this._map = map;\n    }\n\n    return this._map;\n  }\n\n  snapshot(): InGroup.Snapshot<Model> {\n    return this._shot || (this._shot = new InGroupSnapshot<Model>(this._map));\n  }\n\n  clear(): [keyof Model, InGroupEntry][] {\n\n    const added: [keyof Model, InGroupEntry][] = [];\n    const removed: [keyof Model, InGroupEntry][] = [];\n\n    itsEach(this._map.keys(), key => this.set(key, undefined, added, removed));\n\n    return removed;\n  }\n\n}\n\n/**\n * @internal\n */\nclass InGroupControlControls<Model extends object> extends InGroupControls<Model> {\n\n  private readonly _map: InGroupMap<Model>;\n  private readonly _updates = new EventEmitter<[[keyof Model, InGroupEntry][], [keyof Model, InGroupEntry][]]>();\n\n  constructor(private readonly _group: InGroupControl<Model>) {\n    super();\n\n    const applyModelToControls = (model: Model): void => {\n      this.read().once(snapshot => {\n\n        const withValues = new Set<keyof Model>();\n\n        itsEach(overEntries(model), ([key, value]) => {\n          withValues.add(key);\n\n          const control = snapshot.get(key);\n\n          if (control) {\n            control.it = value;\n          }\n        });\n\n        itsEach(snapshot.entries(), ([key, control]) => {\n          if (!withValues.has(key)) {\n            control.it = undefined!;\n          }\n        });\n      });\n    };\n\n    this._map = new InGroupMap<Model>(this);\n    this._map._supply.needs(_group.read(applyModelToControls));\n  }\n\n  on(): OnEvent<[InGroup.Entry<Model>[], InGroup.Entry<Model>[]]>;\n  on(receiver: EventReceiver<[InGroup.Entry<Model>[], InGroup.Entry<Model>[]]>): EventSupply;\n  on(\n      receiver?: EventReceiver<[InGroup.Entry<Model>[], InGroup.Entry<Model>[]]>,\n  ): OnEvent<[InGroup.Entry<Model>[], InGroup.Entry<Model>[]]> | EventSupply {\n    return (this.on = this._updates.on().thru(\n        (added, removed) => nextArgs(\n            added.map(controlEntryToGroupEntry),\n            removed.map(controlEntryToGroupEntry),\n        ),\n    ).F)(receiver);\n  }\n\n  read(): AfterEvent<[InGroup.Snapshot<Model>]>;\n  read(receiver: EventReceiver<[InGroup.Snapshot<Model>]>): EventSupply;\n  read(receiver?: EventReceiver<[InGroup.Snapshot<Model>]>): AfterEvent<[InGroup.Snapshot<Model>]> | EventSupply {\n    return (this.read = afterSent<[InGroup.Snapshot<Model>]>(\n        this._updates.on().thru(\n            () => this._map.snapshot(),\n        ),\n        () => [this._map.snapshot()],\n    ).F)(receiver);\n  }\n\n  set<K extends keyof Model>(\n      keyOrControls: K | InGroup.Controls<Model>,\n      newControl?: InControl<Model[K]> | undefined,\n  ): EventSupply {\n\n    const group = this._group;\n    const added: [keyof Model, InGroupEntry][] = [];\n    const removed: [keyof Model, InGroupEntry][] = [];\n    let supply: EventSupply;\n\n    if (typeof keyOrControls === 'object') {\n      supply = eventSupply();\n      itsEach(overEntries(keyOrControls), ([key, value]) => {\n        this._map.set(key, value, added, removed).needs(supply);\n      });\n    } else {\n      supply = this._map.set(keyOrControls, newControl, added, removed);\n    }\n    if (added.length || removed.length) {\n      this._updates.send(added, removed);\n      if (added.length) {\n        applyControlsToModel();\n      }\n    }\n\n    return supply;\n\n    function applyControlsToModel(): void {\n\n      let newModel: Model | undefined;\n\n      added.forEach(<K extends keyof Model>(keyAndEntry: [keyof Model, InGroupEntry]) => {\n\n        const [key, [control, supply]] = keyAndEntry as [K, [InControl<Model[K]>, EventSupply]];\n\n        control.aspect(InParents)\n            .add({ parent: group })\n            .needs(supply)\n            .cuts(supply);\n\n        const value = control.it;\n\n        if (newModel) {\n          newModel[key] = value;\n        } else {\n\n          const model = group.it;\n\n          if (model[key] !== value) {\n            newModel = { ...model, [key]: value };\n          }\n        }\n      });\n\n      if (newModel) {\n        group.it = newModel;\n      }\n\n      added.forEach(<K extends keyof Model>(keyAndEntry: [keyof Model, InGroupEntry]) => {\n\n        const [key, [control, supply]] = keyAndEntry as [K, [InControl<Model[K]>, EventSupply]];\n\n        control.read().tillOff(supply).to(value => {\n          if (group.it[key] !== value) {\n            group.it = {\n              ...group.it,\n              [key]: value,\n            };\n          }\n        }).cuts(supply);\n      });\n    }\n  }\n\n  clear(): void {\n\n    const removed = this._map.clear();\n\n    if (removed.length) {\n      this._updates.send([], removed);\n    }\n  }\n\n}\n\n/**\n * @internal\n */\nfunction controlEntryToGroupEntry<Model extends object>(\n    [key, [control]]: [keyof Model, InGroupEntry],\n): InGroup.Entry<Model> {\n  return [key, control];\n}\n\n/**\n * @internal\n */\nclass InGroupControl<Model extends object> extends InGroup<Model> {\n\n  private readonly _model: ValueTracker<Model>;\n  readonly controls: InGroupControlControls<Model>;\n\n  constructor(\n      model: Model,\n      opts: {\n        readonly aspects?: InConverter.Aspect<Model> | readonly InConverter.Aspect<Model>[];\n      },\n  ) {\n    super(opts);\n    this._model = trackValue(model);\n    this.controls = new InGroupControlControls(this);\n    eventSupplyOf(this).whenOff(() => this.controls.clear());\n  }\n\n  get [EventSupply__symbol](): EventSupply {\n    return eventSupplyOf(this._model);\n  }\n\n  get it(): Model {\n    return this._model.it;\n  }\n\n  set it(value: Model) {\n    this._model.it = value;\n  }\n\n  on(): OnEvent<[Model, Model]>;\n  on(receiver: EventReceiver<[Model, Model]>): EventSupply;\n  on(receiver?: EventReceiver<[Model, Model]>): OnEvent<[Model, Model]> | EventSupply {\n    return (this.on = this._model.on().F)(receiver);\n  }\n\n  protected _applyAspect<Instance, Kind extends InAspect.Application.Kind>(\n      aspect: InAspect<any, any>,\n  ): InAspect.Application.Result<Instance, Model, Kind> | undefined {\n    if (aspect === InData[InAspect__symbol]) {\n      return {\n        instance: inGroupData(this),\n        convertTo: noop,\n      } as InAspect.Application.Result<any, any, any>;\n    }\n    return super._applyAspect(aspect);\n  }\n\n}\n\n/**\n * @internal\n */\nfunction inGroupData<Model extends object>(group: InGroup<Model>): InData<Model> {\n  return afterAll({\n    cs: group.controls,\n    model: group,\n    mode: group.aspect(InMode),\n  }).keepThru_(\n      readInGroupData,\n  );\n}\n\n/**\n * @internal\n */\nfunction readInGroupData<Model extends object>(\n    {\n      cs: [controls],\n      model: [model],\n      mode: [mode],\n    }: {\n      cs: [InGroup.Snapshot<Model>];\n      model: [Model];\n      mode: [InMode.Value];\n    },\n): NextCall<OnEventCallChain, [InData.DataType<Model>?]> {\n  if (!InMode.hasData(mode)) {\n    return nextArgs();\n  }\n\n  const csData = {} as { [key in keyof Model]: InData<any> };\n\n  itsEach(controls.entries(), ([key, control]) => {\n    csData[key as keyof Model] = control.aspect(InData);\n  });\n\n  return nextAfterEvent(afterAll(csData).keepThru(controlsData => {\n\n    const data: Partial<Model> = { ...model };\n\n    itsEach(\n        overEntries(controlsData),\n        <K extends keyof Model>(keyAndControlData: [keyof Model, [InData.DataType<any>?]]) => {\n\n          const [key, [controlData]] = keyAndControlData as [K, [Model[K]?]];\n\n          data[key] = controlData;\n        },\n    );\n\n    return nextArg(data as InData.DataType<Model>);\n  }));\n}\n\n/**\n * Constructs input controls group.\n *\n * @category Control\n * @typeparam Model  Group model type, i.e. its value type.\n * @param model  Initial model of the group.\n * @param aspects  Input aspects applied by default. These are aspect converters to constructed control\n * from {@link inValueOf same-valued one}.\n *\n * @returns New input controls group.\n */\nexport function inGroup<Model extends object>(\n    model: Model,\n    {\n      aspects,\n    }: {\n      readonly aspects?: InConverter.Aspect<Model> | readonly InConverter.Aspect<Model>[];\n    } = {},\n): InGroup<Model> {\n  return new InGroupControl(model, { aspects });\n}\n\ndeclare module '../aspect' {\n\n  export namespace InAspect.Application {\n\n    export interface Map<OfInstance, OfValue> {\n\n      /**\n       * Input control group application type.\n       */\n      group(): InGroup<OfValue extends object ? OfValue : never> | null;\n\n    }\n\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/input-aspects\n */\nimport { AfterEvent, afterThe } from '@proc7ts/fun-events';\n\n/**\n * @internal\n */\nconst RequireNothing$ = (/*#__PURE__*/ afterThe<[]>());\n\n/**\n * Input validator that requires nothing.\n *\n * @category Validation\n */\nexport function requireNothing(): AfterEvent<[]> {\n  return RequireNothing$;\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/input-aspects\n */\nimport { CallChain, nextArgs, NextCall } from '@proc7ts/call-thru';\nimport { AfterEvent, afterSupplied, EventKeeper, isEventKeeper } from '@proc7ts/fun-events';\nimport { valueProvider } from '@proc7ts/primitives';\nimport { InControl } from '../control';\nimport { InValidation } from './validation.aspect';\n\n/**\n * Input validator.\n *\n * Validator can be added to input validation aspect using `InValidation.by()` method. After that all validation\n * messages it sends are reported by validation aspect. Multiple messages could be sent at a time. These messages\n * replace the previously sent ones. To report the absence of error just send an empty event without messages.\n *\n * This can be one either a validation messages event keeper, a function returning one and accepting input control\n * as its only parameter, or simple validator instance.\n *\n * @category Validation\n * @typeparam Value  Input value type.\n */\nexport type InValidator<Value> =\n    | EventKeeper<InValidation.Message[]>\n    | ((this: void, control: InControl<Value>) => EventKeeper<InValidation.Message[]>)\n    | InValidator.Simple<Value>;\n\nexport namespace InValidator {\n\n  /**\n   * Simple input validator.\n   *\n   * @typeparam Value  Input value type.\n   */\n  export interface Simple<Value> {\n\n    /**\n     * Validates the user input.\n     *\n     * This method is called each time input value changes. The returned messages then reported by input validation\n     * aspect.\n     *\n     * @param control  Input control to validate.\n     *\n     * @returns Either validation message, array of validation messages, or `null`/`unknown` to indicate their absence.\n     */\n    validate(control: InControl<Value>): InValidation.Message | InValidation.Message[] | null | undefined;\n\n  }\n\n}\n\n/**\n * Converts arbitrary input validator to normalized form.\n *\n * @category Validation\n * @typeparam Value  Input value type.\n * @param validator  Validator to convert.\n *\n * @returns A function accepting input control as its only parameter and returning an `AfterEvent` keeper of validation\n * messages.\n */\nexport function inValidator<Value>(\n    validator: InValidator<Value>,\n): (this: void, control: InControl<Value>) => AfterEvent<InValidation.Message[]> {\n  if (isEventKeeper(validator)) {\n    return valueProvider(afterSupplied(validator));\n  }\n  if (typeof validator === 'function') {\n    return control => afterSupplied(validator(control));\n  }\n  return control => control.read().keepThru(simpleInValidator(control, validator));\n}\n\n/**\n * @internal\n */\nfunction simpleInValidator<Value>(\n    control: InControl<Value>,\n    validator: InValidator.Simple<Value>,\n): (value: Value) => NextCall<CallChain, InValidation.Message[]> {\n  return () => {\n\n    const messages = validator.validate(control);\n\n    return messages == null\n        ? nextArgs()\n        : Array.isArray(messages)\n            ? nextArgs(...messages)\n            : nextArgs(messages);\n  };\n}\n","import { flatMapIt, itsEach } from '@proc7ts/a-iterable';\nimport {\n  AfterEvent,\n  AfterEvent__symbol,\n  afterEventBy,\n  afterSupplied,\n  EventEmitter,\n  EventKeeper,\n  EventSupply,\n  eventSupply,\n} from '@proc7ts/fun-events';\nimport { asis, noop, valuesProvider } from '@proc7ts/primitives';\nimport { InControl } from '../control';\nimport { InValidation } from './validation.aspect';\nimport { inValidator, InValidator } from './validator';\n\nconst dontRemove = {};\n\n/**\n * @internal\n */\nexport class InValidationMessages<Value> implements EventKeeper<InValidation.Message[]> {\n\n  readonly _messages: AfterEvent<InValidation.Message[]>;\n  readonly from: (this: void, validator: InValidator<Value>) => EventSupply;\n\n  constructor(control: InControl<Value>) {\n\n    const emitter = new EventEmitter<InValidation.Message[]>();\n    const validators = new Map<AfterEvent<InValidation.Message[]>, EventSupply>();\n    const validatorMessages = new Map<InValidator<Value>, InValidation.Message[]>();\n    // Sends validation messages\n    let send: () => void = noop;\n    // Validates using the given validator\n    let validate: (validator: AfterEvent<InValidation.Message[]>, validatorSupply: EventSupply) => void = noop;\n\n    this._messages = afterEventBy<InValidation.Message[]>(receiver => {\n\n      // Validation messages supply\n      const resultSupply = afterSupplied(emitter, valuesProvider()).to(receiver).whenOff(() => {\n        send = noop; // Disable message sending\n        validate = noop; // Disable validation\n      });\n\n      // Enable validation using the given validator\n      validate = (validator: AfterEvent<InValidation.Message[]>, validatorSupply: EventSupply) => {\n\n        const supply = validator.to(\n            (...messages) => {\n              if (messages.length) {\n                // Replace messages reported by validator.\n                validatorMessages.set(validator, messages);\n              } else if (!validatorMessages.delete(validator)) {\n                // Nothing removed. No need to send messages\n                return;\n              }\n              send(); // Send all messages.\n            },\n        )\n            .needs(validatorSupply)\n            .whenOff(reason => {\n              if (reason !== dontRemove) {\n                validatorSupply.off(reason);\n              }\n              if (validatorMessages.delete(validator)) {\n                // Send all messages only if the removed validator reported some messages earlier\n                send();\n              }\n            });\n\n        resultSupply.whenOff(() => supply.off(dontRemove));\n      };\n\n      // Enable each validator\n      itsEach(validators.entries(), ([validator, validatorSupply]) => validate(validator, validatorSupply));\n\n      // Enable message sending\n      send = () => {\n        emitter.send(...allMessages());\n      };\n\n      // Send messages if present already\n      if (validatorMessages.size) {\n        send();\n      }\n    }).share().tillOff(control);\n\n    this.from = validator => {\n\n      const source = inValidator(validator)(control);\n      const validatorSupply = eventSupply(() => {\n        validators.delete(source);\n      });\n\n      validators.set(source, validatorSupply);\n      validate(source, validatorSupply); // Start validation using validator\n\n      return validatorSupply.needs(control);\n    };\n\n    function allMessages(): Iterable<InValidation.Message> {\n      return flatMapIt(validatorMessages.values(), asis);\n    }\n  }\n\n  [AfterEvent__symbol](): AfterEvent<InValidation.Message[]> {\n    return this._messages;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/input-aspects\n */\nimport { flatMapIt, itsEach, mapIt, overEntries } from '@proc7ts/a-iterable';\nimport { nextArgs, NextCall } from '@proc7ts/call-thru';\nimport {\n  afterEach,\n  AfterEvent,\n  AfterEvent__symbol,\n  afterSupplied,\n  EventKeeper,\n  EventReceiver,\n  EventSupply,\n  nextAfterEvent,\n  OnEventCallChain,\n} from '@proc7ts/fun-events';\nimport { InAspect, InAspect__symbol } from '../aspect';\nimport { inAspectSameOrBuild } from '../aspect.impl';\nimport { InContainer } from '../containers';\nimport { InControl } from '../control';\nimport { requireAll } from './require-all.validator';\nimport { InValidator } from './validator';\nimport { InValidationMessages } from './validator.impl';\n\n/**\n * @internal\n */\nconst InValidation__aspect: InAspect<InValidation<any>, 'validation'> = {\n  applyTo<Value>(control: InControl<Value>) {\n    return inAspectSameOrBuild<Value, InValidation<Value>, 'validation'>(\n        control,\n        InValidation,\n        <V>(ctrl: InControl<V>, origin?: InControl<any>): InValidation<any> => {\n\n          const validation = new InControlValidation<V>(ctrl);\n\n          if (origin) {\n\n            const from = origin.aspect(InValidation);\n\n            validation.by(from.read().keepThru(result => nextArgs(...result.messages())));\n          }\n\n          return validation;\n        },\n    );\n  },\n};\n\n/**\n * Validation aspect of the input.\n *\n * Reports validation messages sent by registered validators. To register validator call a `InValidation.by()` method.\n *\n * Implements an `EventKeeper` interface by sending validation result whenever validation messages reported.\n *\n * A validation aspect of converted control reports all messages from original control in addition to its own.\n *\n * A validation aspect of input controls container reports all messages from nested controls in addition to its own.\n *\n * @category Aspect\n * @typeparam Value  Input value type.\n */\nexport abstract class InValidation<Value> implements EventKeeper<[InValidation.Result]> {\n\n  /**\n   * Input validation aspect.\n   */\n  static get [InAspect__symbol](): InAspect<InValidation<any>, 'validation'> {\n    return InValidation__aspect;\n  }\n\n  /**\n   * Builds an `AfterEvent` keeper of input validation result.\n   *\n   * An `[AfterEvent__symbol]` property is an alias of this one.\n   *\n   * @return `AfterEvent` keeper of validation result keeper.\n   */\n  abstract read(): AfterEvent<[InValidation.Result]>;\n\n  /**\n   * Starts sending validation result and updates to the given `receiver`\n   *\n   * @param receiver  Target validation result receiver.\n   *\n   * @returns Validation results supply.\n   */\n  abstract read(receiver: EventReceiver<[InValidation.Result]>): EventSupply;\n\n  [AfterEvent__symbol](): AfterEvent<[InValidation.Result]> {\n    return this.read();\n  }\n\n  /**\n   * Validates the input using the given validators.\n   *\n   * Messages sent by each registered validator are handled independently. This means that every time the event received\n   * from validator, it replaces the list of validation messages reported previously by the same validator. But it never\n   * affects messages received from other validators.\n   *\n   * @param validators  Input validators to use.\n   *\n   * @returns Validators supply. Removes validators and their messages once cut off.\n   */\n  abstract by(...validators: InValidator<Value>[]): EventSupply;\n\n}\n\nexport namespace InValidation {\n\n  /**\n   * Input validation messages.\n   *\n   * This is a map of key/value pairs, where the key is a message code, while the value is arbitrary. Message codes\n   * are ignored when their values are falsy (i.e. `!message[code] === true`).\n   *\n   * Some message codes are treated specially by convenience.\n   */\n  export type Message = {\n    readonly [code in Extract<keyof GenericMessage, string>]?: any;\n  };\n\n  /**\n   * Generic input validation messages.\n   */\n  export interface GenericMessage {\n\n    readonly [code: string]: any;\n\n    /**\n     * Missing input.\n     */\n    readonly missing?: any;\n\n    /**\n     * The message with this code would be reported by `requireNeeded()` validator despite there are messages with\n     * `missing` code.\n     */\n    readonly despiteMissing?: any;\n\n    /**\n     * Incomplete input, except missing one.\n     */\n    readonly incomplete?: any;\n\n    /**\n     * The message with this code would be reported by `requireNeeded()` validator despite there are messages with\n     * `incomplete` code.\n     */\n    readonly despiteIncomplete?: any;\n\n    /**\n     * Invalid input, except missing or incomplete one.\n     */\n    readonly invalid?: any;\n\n    /**\n     * Submit failure.\n     *\n     * This is set by input submit aspect.\n     */\n    readonly submit?: any;\n\n  }\n\n  /**\n   * Input validation result.\n   *\n   * Combines messages sent by all registered validators.\n   *\n   * Implements `Iterable` interface by iterating over all validation messages.\n   */\n  export interface Result extends Iterable<Message> {\n\n    /**\n     * Whether validation succeed.\n     *\n     * This is `true` when there is no validation messages, or `false` otherwise.\n     */\n    readonly ok: boolean;\n\n    /**\n     * Returns messages with the given code.\n     *\n     * @param code  Target code. All messages reported when absent.\n     *\n     * @returns An array of matching messages. Possibly empty.\n     */\n    messages(code?: string): readonly Message[];\n\n    /**\n     * Checks whether there are errors with the given code.\n     *\n     * @param code  Target code. Any message matches when absent.\n     *\n     * @returns `true` if there is at least one message with the given code, or `false` otherwise.\n     */\n    has(code?: string): boolean;\n\n    /**\n     * Checks whether there are errors without the given codes.\n     *\n     * @param codes  Excluded codes. Any message matches when empty.\n     *\n     * @returns `true` is there is at least one message without any of the given codes, or `false` otherwise.\n     */\n    hasBut(...codes: string[]): boolean;\n\n    [Symbol.iterator](): IterableIterator<Message>;\n\n  }\n\n  /**\n   * Successful input validation result.\n   */\n  export interface Ok extends Result {\n\n    readonly ok: true;\n\n  }\n\n  /**\n   * Unsuccessful input validation result.\n   */\n  export interface Errors extends Result {\n\n    readonly ok: false;\n\n  }\n\n}\n\n/**\n * @internal\n */\nconst noInValidationErrors: InValidation.Result = {\n  get ok() {\n    return true;\n  },\n  messages() {\n    return [];\n  },\n  has() {\n    return false;\n  },\n  hasBut() {\n    return false;\n  },\n  [Symbol.iterator]() {\n    return [][Symbol.iterator]();\n  },\n};\n\n/**\n * @internal\n */\nclass InValidationErrors implements InValidation.Result {\n\n  private readonly _all: InValidation.Message[];\n  private readonly _byCode = new Map<string, InValidation.Message[]>();\n\n  constructor(messages: InValidation.Message[]) {\n    this._all = [];\n    itsEach(\n        messages,\n        message => {\n\n          let nonEmpty = false;\n\n          itsEach(overEntries(message), ([code, codePresent]) => {\n            if (codePresent) {\n              nonEmpty = true;\n\n              const prev = this._byCode.get(code);\n\n              if (prev) {\n                prev.push(message);\n              } else {\n                this._byCode.set(code, [message]);\n              }\n            }\n          });\n\n          // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n          if (nonEmpty) {\n            this._all.push(message);\n          }\n        },\n    );\n  }\n\n  get ok(): boolean {\n    return !this._all.length;\n  }\n\n  messages(code?: string): InValidation.Message[] {\n    return code == null ? this._all : this._byCode.get(code) || [];\n  }\n\n  has(code?: string): boolean {\n    return code == null || this._byCode.has(code);\n  }\n\n  hasBut(...codes: string[]): boolean {\n    return this._all.some(\n        message => codes.every(code => !message[code]),\n    );\n  }\n\n  [Symbol.iterator](): IterableIterator<InValidation.Message> {\n    return this._all[Symbol.iterator]();\n  }\n\n}\n\n/**\n * Returns successful input validation result.\n *\n * @category Validation\n * @returns Successful input validation result.\n */\nexport function inValidationResult(): InValidation.Ok;\n\n/**\n * Creates input validation result out of validation messages.\n *\n * @param messages  Input validation messages.\n *\n * @returns New input validation result containing the given `messages`.\n */\nexport function inValidationResult(...messages: InValidation.Message[]): InValidation.Result;\n\nexport function inValidationResult(...messages: InValidation.Message[]): InValidation.Result {\n  return messages.length ? new InValidationErrors(messages) : noInValidationErrors;\n}\n\n/**\n * @internal\n */\nclass InControlValidation<Value> extends InValidation<Value> {\n\n  readonly _messages: InValidationMessages<Value>;\n\n  constructor(control: InControl<Value>) {\n    super();\n    this._messages = new InValidationMessages(control);\n\n    const container = control.aspect(InContainer);\n\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (container) {\n      this._messages.from(nestedInValidationMessages(container));\n    }\n\n  }\n\n  by(...validators: InValidator<Value>[]): EventSupply {\n    return this._messages.from(requireAll(...validators));\n  }\n\n  read(): AfterEvent<[InValidation.Result]>;\n  read(receiver: EventReceiver<[InValidation.Result]>): EventSupply;\n  read(receiver?: EventReceiver<[InValidation.Result]>): AfterEvent<[InValidation.Result]> | EventSupply {\n    return (this.read = afterSupplied(this._messages).keepThru(inValidationResult).F)(receiver);\n  }\n\n}\n\n/**\n * @internal\n */\nfunction nestedInValidationMessages(container: InContainer<any>): EventKeeper<InValidation.Message[]> {\n  return container.controls.read().keepThru(\n      nestedInValidations,\n      combineInValidationResults,\n  );\n}\n\n/**\n * @internal\n */\nfunction nestedInValidations(\n    controls: InContainer.Snapshot,\n): NextCall<OnEventCallChain, [InValidation.Result][]> {\n  return nextAfterEvent(afterEach(...mapIt(controls, control => control.aspect(InValidation))));\n}\n\n/**\n * @internal\n */\nfunction combineInValidationResults(\n    ...results: [InValidation.Result][]\n): NextCall<OnEventCallChain, InValidation.Message[]> {\n  return nextArgs<InValidation.Message[]>(\n      ...flatMapIt(mapIt(results, result => result[0])),\n  );\n}\n\ndeclare module '../aspect' {\n\n  export namespace InAspect.Application {\n\n    export interface Map<OfInstance, OfValue> {\n\n      /**\n       * Input validation aspect application type.\n       */\n      validation(): InValidation<OfValue>;\n\n    }\n\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/input-aspects\n */\nimport { InControl } from '../control';\nimport { requireNothing } from './require-nothing.validator';\nimport { InValidator } from './validator';\nimport { InValidationMessages } from './validator.impl';\n\n/**\n * Creates input validator that validates using all listed validators.\n *\n * @category Validation\n * @param validators  Validators to validate the input with.\n *\n * @returns Validator that requires all the given `validators`. Or just the given validator if it is the only one given.\n */\nexport function requireAll<Value>(...validators: InValidator<Value>[]): InValidator<Value> {\n\n  const numValidators = validators.length;\n\n  if (numValidators === 1) {\n    return validators[0];\n  }\n  if (!numValidators) {\n    return requireNothing;\n  }\n\n  return (control: InControl<Value>) => {\n\n    const messages = new InValidationMessages(control);\n\n    validators.forEach(validator => messages.from(validator));\n\n    return messages;\n  };\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/input-aspects\n */\nimport { nextArgs } from '@proc7ts/call-thru';\nimport { EventKeeper } from '@proc7ts/fun-events';\nimport { InControl } from '../control';\nimport { InValidation } from './validation.aspect';\nimport { InValidator } from './validator';\n\n/**\n * Creates input validator that requires value to present.\n *\n * Reports empty (falsy) values with `missing` message code.\n *\n * @category Validation\n */\nexport function requirePresent(): InValidator<any>;\n\n/**\n * Input validator that requires value to present.\n *\n * Reports empty (falsy) values with `missing` message code.\n */\nexport function requirePresent(control: InControl<any>): EventKeeper<InValidation.Message[]>;\n\nexport function requirePresent(\n    control?: InControl<any>,\n): InValidator<any> | EventKeeper<InValidation.Message[]> {\n  return control\n      ? control.read().keepThru(value => value ? nextArgs() : { missing: 'missing' })\n      : requirePresent;\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/input-aspects\n */\nimport { nextArgs, nextSkip } from '@proc7ts/call-thru';\nimport {\n  AfterEvent,\n  afterSent,\n  EventEmitter,\n  EventReceiver,\n  EventSupply,\n  EventSupply__symbol,\n  eventSupplyOf,\n  OnEvent,\n} from '@proc7ts/fun-events';\nimport { DomEventDispatcher } from '@proc7ts/fun-events/dom';\nimport { asis } from '@proc7ts/primitives';\nimport { InConverter } from '../converter';\nimport { InElement } from '../element.control';\n\n/**\n * Abstract implementation of {@link InElement input HTML element control}.\n *\n * @category Control\n * @typeparam Value  Input value type.\n * @typeparam Elt  A type of input HTML element.\n */\nexport class AbstractInElement<Value, Elt extends HTMLElement> extends InElement<Value, Elt> {\n\n  readonly events: DomEventDispatcher;\n  private readonly _get: (this: AbstractInElement<Value, Elt>) => Value;\n  private readonly _set: (this: AbstractInElement<Value, Elt>, value: Value) => void;\n  private readonly _input: EventEmitter<[InElement.Input<Value>, Value]> = new EventEmitter();\n  private _value: Value;\n  private _update: (value: Value, oldValue: Value) => void;\n\n  /**\n   * Constructs HTML input element control.\n   *\n   * @param element  HTML input element the constructed control is based on.\n   * @param aspects  Input aspects applied by default. These are aspect converters to constructed control\n   * from the {@link inValueOf same-valued one}.\n   * @param get  Input value getter.\n   * @param set  Input value setter.\n   */\n  constructor(\n      readonly element: Elt,\n      {\n        aspects,\n        get,\n        set,\n      }: {\n        readonly aspects?: InConverter.Aspect<Value> | readonly InConverter.Aspect<Value>[];\n        readonly get: (this: AbstractInElement<Value, Elt>) => Value;\n        readonly set: (this: AbstractInElement<Value, Elt>, value: Value) => void;\n      },\n  ) {\n    super({ aspects });\n\n    const self = this;\n\n    this._get = get;\n    this._set = set;\n    this._value = this.it;\n\n    const doUpdate = this._update = (value: Value, oldValue: Value): void => update({ value }, oldValue);\n\n    this.events = new DomEventDispatcher(element);\n    eventSupplyOf(this.events).needs(this);\n    this.listenForInput(input => update(input, this._value));\n\n    function update(input: InElement.Input<Value>, oldValue: Value): void {\n      for (;;) {\n        self._value = input.value;\n\n        // Corrections are value updates performed by update event receivers\n        // The last correction is recorded and sent later, when all receivers receive current update\n        let correction: [InElement.Input<Value>, Value] | undefined;\n\n        // Record corrections\n        self._update = (newValue: Value, old: Value) => {\n          // Corrections retain the event instance\n          correction = [{ ...input, value: newValue }, old];\n        };\n        try {\n          self._input.send(input, oldValue);\n        } finally {\n          self._update = doUpdate;\n        }\n\n        if (!correction) {\n          break; // No more corrections\n        }\n\n        // Apply last correction\n        // noinspection JSUnusedAssignment\n        [input, oldValue] = correction;\n      }\n    }\n  }\n\n  get [EventSupply__symbol](): EventSupply {\n    return eventSupplyOf(this._input);\n  }\n\n  get it(): Value {\n    return this._get();\n  }\n\n  set it(value: Value) {\n\n    const oldValue = this.it;\n\n    if (value !== oldValue) {\n      this._set(value);\n      this._update(this._get(), oldValue);\n    }\n  }\n\n  input(): AfterEvent<[InElement.Input<Value>]>;\n  input(receiver: EventReceiver<[InElement.Input<Value>]>): EventSupply;\n  input(receiver?: EventReceiver<[InElement.Input<Value>]>): AfterEvent<[InElement.Input<Value>]> | EventSupply {\n    return (this.input = afterSent<[InElement.Input<Value>]>(\n        this._input.on().thru(asis), // remove the second parameter\n        () => [{ value: this.it }],\n    ).F)(receiver);\n  }\n\n  on(): OnEvent<[Value, Value]>;\n  on(receiver: EventReceiver<[Value, Value]>): EventSupply;\n  on(receiver?: EventReceiver<[Value, Value]>): OnEvent<[Value, Value]> | EventSupply {\n    return (this.on = this._input.on().thru(\n        ({ value: newValue }, oldValue) => newValue === oldValue ? nextSkip() : nextArgs(newValue, oldValue),\n    ).F)(receiver);\n  }\n\n  /**\n   * Enables reaction to input input.\n   *\n   * By default listens for `input` and `change` events.\n   *\n   * @param update  Updates current value by user input and sends update event. This function is to be called by\n   * input event listeners.\n   */\n  protected listenForInput(update: (input: InElement.Input<Value>) => void): void {\n\n    const onInput = (event: Event): void => update({ value: this.it, event });\n\n    this.events.on('input').to(onInput);\n    this.events.on('change').to(onInput);\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/input-aspects\n */\nimport { InConverter } from '../converter';\nimport { InElement } from '../element.control';\nimport { AbstractInElement } from './abstract-element.control';\n\n/**\n * Textual input control.\n *\n * @category Control\n */\nexport type InText = InElement<string, InText.Element>;\n\nexport namespace InText {\n\n  /**\n   * Text input element.\n   *\n   * Either `<input>`, `<textarea>`, or `<select>`.\n   */\n  export type Element = HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement;\n\n}\n\n/**\n * Creates control for the given textual input element.\n *\n * Note that this won't work for files, checkboxes, or radio buttons.\n *\n * For `<select multiple>` this would only reflect the first option. Consider to use `inSelect()` for multi-selects.\n *\n * @category Control\n * @param element  Target text input element.\n * @param aspects  Input aspects applied by default. These are aspect converters to constructed control\n * from the {@link inValueOf same-valued one}.\n *\n * @return New textual input control instance.\n */\nexport function inText(\n    element: InText.Element,\n    {\n      aspects,\n    }: {\n      readonly aspects?: InConverter.Aspect<string> | readonly InConverter.Aspect<string>[];\n    } = {},\n): InText {\n  return new AbstractInElement(\n      element,\n      {\n        get(): string {\n          return this.element.value;\n        },\n        set(value) {\n          this.element.value = value;\n        },\n        aspects,\n      },\n  );\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/input-aspects\n */\nimport {\n  EventReceiver,\n  EventSupply,\n  EventSupply__symbol,\n  eventSupplyOf,\n  OnEvent,\n  trackValue,\n  ValueTracker,\n} from '@proc7ts/fun-events';\nimport { noop } from '@proc7ts/primitives';\nimport { InAspect, InAspect__symbol } from '../../aspect';\nimport { inAspectSameOrBuild } from '../../aspect.impl';\nimport { InControl } from '../../control';\nimport { InElement } from '../../element.control';\n\n/**\n * @internal\n */\nconst InFocus__aspect: InAspect<InFocus | null> = {\n\n  applyTo<Value>(control: InControl<Value>): InAspect.Applied<Value, InFocus | null> {\n    return inAspectSameOrBuild(control, InFocus, ctrl => {\n\n      const element = ctrl.aspect(InElement);\n\n      return element && new InControlFocus(element);\n    });\n  },\n\n};\n\n/**\n * Input focus aspect.\n *\n * This is a value tracker of element focus flag. Or `null` when [[InElement]] aspect is absent.\n *\n * @category Aspect\n */\nexport abstract class InFocus extends ValueTracker<boolean> {\n\n  static get [InAspect__symbol](): InAspect<InFocus | null> {\n    return InFocus__aspect;\n  }\n\n}\n\n/**\n * @internal\n */\nclass InControlFocus extends InFocus {\n\n  private readonly _it: ValueTracker<boolean>;\n\n  constructor(inElement: InElement<any>) {\n    super();\n\n    const { element, events } = inElement;\n    const owner: DocumentOrShadowRoot = element.getRootNode\n        ? element.getRootNode() as unknown as DocumentOrShadowRoot\n        : element.ownerDocument;\n\n    this._it = trackValue(owner.activeElement === element);\n    eventSupplyOf(this).needs(inElement);\n\n    events.on('focus').to(() => this._it.it = true);\n    events.on('blur').to(() => this._it.it = false);\n    this.on({\n      receive(ctx, newValue) {\n        ctx.onRecurrent(noop);\n        if (newValue) {\n          element.focus();\n        } else {\n          element.blur();\n        }\n      },\n    });\n  }\n\n  get [EventSupply__symbol](): EventSupply {\n    return eventSupplyOf(this._it);\n  }\n\n  get it(): boolean {\n    return this._it.it;\n  }\n\n  set it(value: boolean) {\n    this._it.it = value;\n  }\n\n  on(): OnEvent<[boolean, boolean]>;\n  on(receiver: EventReceiver<[boolean, boolean]>): EventSupply;\n  on(receiver?: EventReceiver<[boolean, boolean]>): OnEvent<[boolean, boolean]> | EventSupply {\n    return (this.on = this._it.on().F)(receiver);\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/input-aspects\n */\nimport { itsEach, mapIt } from '@proc7ts/a-iterable';\nimport {\n  afterAll,\n  afterEach,\n  AfterEvent,\n  AfterEvent__symbol,\n  afterThe,\n  EventKeeper,\n  EventReceiver,\n  EventSupply,\n  eventSupplyOf,\n  nextAfterEvent,\n  trackValue,\n  ValueTracker,\n} from '@proc7ts/fun-events';\nimport { InAspect, InAspect__symbol } from '../../aspect';\nimport { inAspectSameOrBuild } from '../../aspect.impl';\nimport { InContainer } from '../../containers';\nimport { InControl } from '../../control';\nimport { InElement } from '../../element.control';\nimport { InFocus } from './focus.aspect';\n\n/**\n * @internal\n */\nconst InStatus__aspect: InAspect<InStatus> = {\n\n  applyTo<Value>(control: InControl<Value>): InAspect.Applied<Value, InStatus> {\n    return inAspectSameOrBuild(control, InStatus, ctrl => {\n\n      const container = ctrl.aspect(InContainer);\n\n      return container != null ? new InContainerStatus(container) : new InControlStatus(ctrl);\n    });\n  },\n\n};\n\n/**\n * Aggregate status aspect of user input.\n *\n * Collects and reports input status flags. Like whether the input ever had focus or being altered.\n *\n * Supports input elements and containers. For the rest of input controls always sends default status flags.\n *\n * Implements `EventKeeper` interface by sending collected status flags to receivers.\n *\n * @category Aspect\n */\nexport abstract class InStatus implements EventKeeper<[InStatus.Flags]> {\n\n  static get [InAspect__symbol](): InAspect<InStatus> {\n    return InStatus__aspect;\n  }\n\n  /**\n   * Builds `AfterEvent` keeper of input status flags.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   *\n   * @returns `AfterEvent` keeper of input status flags.\n   */\n  abstract read(): AfterEvent<[InStatus.Flags]>;\n\n  /**\n   * Starts sending input status flags and updates to the given `receiver`\n   *\n   * @param receiver  Target receiver of input status flags.\n   *\n   * @returns Input status flags supply.\n   */\n  abstract read(receiver: EventReceiver<[InStatus.Flags]>): EventSupply;\n\n  [AfterEvent__symbol](): AfterEvent<[InStatus.Flags]> {\n    return this.read();\n  }\n\n  /**\n   * Marks the input as touched.\n   *\n   * For container invokes this method for each of the nested controls.\n   *\n   * @param touched  Whether to mark the input as touched or not. `true` by default. When `false` the input would be\n   * marked as non-edited too. Setting to `false` affects only edited flag when input has focus.\n   *\n   * @returns `this` aspect instance.\n   */\n  abstract markTouched(touched?: boolean): this;\n\n  /**\n   * Marks the input as edited by user.\n   *\n   * For container invokes this method for each of the nested controls.\n   *\n   * @param edited  Whether to mark the input as edited by user. `true` by default, in which case the input will be\n   * marked as touched as well.\n   *\n   * @returns `this` aspect instance.\n   */\n  abstract markEdited(edited?: boolean): this;\n\n}\n\nexport namespace InStatus {\n\n  /**\n   * A flags representing aggregated input status.\n   */\n  export interface Flags {\n\n    /**\n     * Whether the input has focus currently.\n     */\n    readonly hasFocus: boolean;\n\n    /**\n     * Whether the input had focus already.\n     *\n     * This flag can be set using `InStatus.markTouched()`.\n     */\n    readonly touched: boolean;\n\n    /**\n     * Whether the input has been edited by user.\n     *\n     * This flag can be set using `InStatus.markEdited()`.\n     */\n    readonly edited: boolean;\n\n  }\n\n}\n\n/**\n * @internal\n */\nconst defaultInStatusFlags: InStatus.Flags = {\n  hasFocus: false,\n  touched: false,\n  edited: false,\n};\n\n/**\n * @internal\n */\nclass InControlStatus extends InStatus {\n\n  private readonly _flags = trackValue<InStatus.Flags>(defaultInStatusFlags);\n\n  constructor(control: InControl<any>) {\n    super();\n    eventSupplyOf(this._flags).needs(control);\n    this._flags.by(elementInStatusFlags(this._flags, control));\n  }\n\n  read(): AfterEvent<[InStatus.Flags]>;\n  read(receiver: EventReceiver<[InStatus.Flags]>): EventSupply;\n  read(receiver?: EventReceiver<[InStatus.Flags]>): AfterEvent<[InStatus.Flags]> | EventSupply {\n    return (this.read = this._flags.read().F)(receiver);\n  }\n\n  markTouched(touched = true): this {\n\n    const flags = this._flags.it;\n\n    if (!touched) {\n      if (flags.touched) {\n        // Try to reset touched.\n        // Still touched if in focus. Not edited anyway.\n        this._flags.it = { ...flags, touched: flags.hasFocus, edited: false };\n      }\n    } else if (!flags.touched) {\n      // Do not modify if already touched.\n      this._flags.it = { ...flags, touched };\n    }\n\n    return this;\n  }\n\n  markEdited(edited = true): this {\n\n    const flags = this._flags.it;\n\n    if (edited) {\n      if (!flags.edited) {\n        // Touched if edited\n        this._flags.it = { ...flags, touched: true, edited };\n      }\n    } else if (flags.edited) {\n      // Assume not edited\n      this._flags.it = { ...flags, edited };\n    }\n\n    return this;\n  }\n\n}\n\n/**\n * @internal\n */\nfunction elementInStatusFlags(\n    origin: ValueTracker<InStatus.Flags>,\n    control: InControl<any>,\n): AfterEvent<[InStatus.Flags]> {\n\n  const element = control.aspect(InElement);\n  const focus = control.aspect(InFocus);\n\n  return afterAll({\n    hasFocus: focus || afterThe(false),\n    edited: element ? element.input().keepThru(({ event }) => !!event) : afterThe(false),\n  }).keepThru(\n      ({ hasFocus: [hasFocus], edited: [edited] }) => updateInStatusFlags(origin.it, hasFocus, edited),\n  );\n}\n\n/**\n * @internal\n */\nfunction updateInStatusFlags(flags: InStatus.Flags, hasFocus: boolean, edited: boolean): InStatus.Flags {\n  if (hasFocus) {\n    flags = { ...flags, hasFocus, touched: true };\n  } else {\n    flags = { ...flags, hasFocus };\n  }\n  if (edited) {\n    flags = { ...flags, edited, touched: true };\n  }\n  return flags;\n}\n\n/**\n * @internal\n */\nclass InContainerStatus extends InStatus {\n\n  constructor(private readonly _container: InContainer<any>) {\n    super();\n  }\n\n  read(): AfterEvent<[InStatus.Flags]>;\n  read(receiver: EventReceiver<[InStatus.Flags]>): EventSupply;\n  read(receiver?: EventReceiver<[InStatus.Flags]>): AfterEvent<[InStatus.Flags]> | EventSupply {\n    return (this.read = containerInStatusFlags(this._container).F)(receiver);\n  }\n\n  markEdited(edited?: boolean): this {\n    this._container.controls.read().once(\n        snapshot => itsEach(\n            snapshot,\n            control => control.aspect(InStatus).markEdited(edited),\n        ),\n    );\n    return this;\n  }\n\n  markTouched(touched?: boolean): this {\n    this._container.controls.read().once(\n        snapshot => itsEach(\n            snapshot,\n            control => control.aspect(InStatus).markTouched(touched),\n        ),\n    );\n    return this;\n  }\n\n}\n\n/**\n * @internal\n */\nfunction containerInStatusFlags(container: InContainer<any>): AfterEvent<[InStatus.Flags]> {\n  return container.controls.read().tillOff(container).keepThru_(\n      (snapshot: InContainer.Snapshot) => nextAfterEvent(afterEach(...inControlStatuses(snapshot))),\n      combineInStatusFlags,\n  );\n}\n\n/**\n * @internal\n */\nfunction inControlStatuses(snapshot: InContainer.Snapshot): Iterable<InStatus> {\n  return mapIt(snapshot, c => c.aspect(InStatus));\n}\n\n/**\n * @internal\n */\nfunction combineInStatusFlags(...flags: [InStatus.Flags][]): InStatus.Flags {\n\n  const result: { -readonly [K in keyof InStatus.Flags]: InStatus.Flags[K] } = {\n    hasFocus: false,\n    touched: false,\n    edited: false,\n  };\n\n  itsEach(\n      flags,\n      (([{ hasFocus, touched, edited }]) => {\n            if (touched) {\n              result.touched = true;\n            }\n            if (hasFocus) {\n              result.hasFocus = result.touched = true;\n            }\n            if (edited) {\n              result.edited = result.touched = true;\n            }\n          }\n      ),\n  );\n\n  return result;\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/input-aspects\n */\nimport { InAspect, InAspect__symbol } from '../../aspect';\nimport { inAspectNull, inAspectValue } from '../../aspect.impl';\nimport { InControl } from '../../control';\nimport { InConverter } from '../../converter';\nimport { InElement } from '../../element.control';\n\n/**\n * An input aspect representing DOM element to apply styles to.\n *\n * This is a HTML element for input element control, and `null` for everything else by default.\n *\n * @category Aspect\n */\nexport type InStyledElement = Element;\n\n/**\n * @internal\n */\nconst InStyledElement__aspect: InAspect<InStyledElement | null> = {\n\n  applyTo(control: InControl<any>): InAspect.Applied<any, InStyledElement | null> {\n\n    const element = control.aspect(InElement);\n\n    return element ? inAspectValue(element.element) : inAspectNull as InAspect.Applied<any, InStyledElement | null>;\n  },\n\n};\n\n/**\n * @category Aspect\n */\nexport const InStyledElement = {\n\n  get [InAspect__symbol]() {\n    return InStyledElement__aspect;\n  },\n\n  /**\n   * Creates input control aspect converter that assigns the given styled element to converted control.\n   *\n   * This is useful for controls without elements (such as input groups), or can be used to apply CSS classes to input\n   * element wrappers (such as `form-group` in Bootstrap).\n   *\n   * @param element  A DOM element to apply styles to. Styles won't be applied when `null` or undefined.\n   *\n   * @returns Input control aspect converter.\n   */\n  to<Value>(element: InStyledElement | null = null): InConverter.Aspect<any, Value> {\n    return {\n      applyAspect<Instance, Kind extends InAspect.Application.Kind>(\n          aspect: InAspect<any, any>,\n      ): InAspect.Applied<any, InAspect.Application.Instance<Instance, Value, Kind>> | undefined {\n        return aspect === InStyledElement__aspect\n            ? inAspectValue(element) as InAspect.Application.Result<Instance, Value, Kind>\n            : undefined;\n      },\n    };\n  },\n\n};\n","/**\n * @packageDocumentation\n * @module @proc7ts/input-aspects\n */\nimport { filterIt, itsEach, ObjectEntry, overEntries } from '@proc7ts/a-iterable';\nimport { DeltaSet } from '@proc7ts/delta-set';\nimport {\n  afterEach,\n  AfterEvent,\n  AfterEvent__symbol,\n  afterEventBy,\n  afterSupplied,\n  EventKeeper,\n  EventNotifier,\n  EventReceiver,\n  eventSupply,\n  EventSupply,\n  eventSupplyOf,\n  isEventKeeper,\n  nextAfterEvent,\n  trackValue,\n} from '@proc7ts/fun-events';\nimport { css__naming, isQualifiedName, QualifiedName } from '@proc7ts/namespace-aliaser';\nimport { noop } from '@proc7ts/primitives';\nimport { RenderSchedule } from '@proc7ts/render-scheduler';\nimport { InAspect, InAspect__symbol } from '../../aspect';\nimport { InNamespaceAliaser, InRenderScheduler } from '../../aspects';\nimport { InControl } from '../../control';\nimport { InStyledElement } from './styled-element.aspect';\n\n/**\n * @internal\n */\nconst InCssClasses__aspect: InAspect<InCssClasses> = {\n\n  applyTo(control: InControl<any>): InAspect.Applied<any, InCssClasses> {\n    return {\n      instance: new InControlCssClasses(control),\n      convertTo: noop,\n    };\n  },\n\n};\n\n/**\n * An aspect of the user input representing CSS classes to apply to styled element.\n *\n * Implements an `EventKeeper` interface by reporting all CSS classes applied to styled element.\n *\n * @category Aspect\n */\nexport abstract class InCssClasses implements EventKeeper<[InCssClasses.Map]> {\n\n  static get [InAspect__symbol](): InAspect<InCssClasses> {\n    return InCssClasses__aspect;\n  }\n\n  /**\n   * Builds an `AfterEvent` keeper of CSS classes to be applied to styled element.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   *\n   * @returns `AfterEvent` keeper of CSS classes map.\n   */\n  abstract read(): AfterEvent<[InCssClasses.Map]>;\n\n  /**\n   * Starts sending CSS classes for styled element and updates to the given `receiver`.\n   *\n   * @param receiver  Target receiver of CSS classes map.\n   *\n   * @returns CSS classes supply.\n   */\n  abstract read(receiver: EventReceiver<[InCssClasses.Map]>): EventSupply;\n\n  [AfterEvent__symbol](): AfterEvent<[InCssClasses.Map]> {\n    return this.read();\n  }\n\n  /**\n   * Builds an `AfterEvent` keeper of added and removed CSS classes.\n   *\n   * Sends current CSS classes as added ones on receiver registration.\n   *\n   * @returns `AfterEvent` keeper of added and removed classes.\n   */\n  abstract track(): AfterEvent<[readonly string[], readonly string[]]>;\n\n  /**\n   * Starts sending current, added and removed CSS classes to the given `receiver`\n   *\n   * Sends current CSS classes as added ones on receiver registration.\n   *\n   * @param receiver  Target receiver of added and removed CSS classes.\n   *\n   * @returns CSS classes supply.\n   */\n  abstract track(receiver: EventReceiver<[readonly string[], readonly string[]]>): EventSupply;\n\n  /**\n   * Appends CSS classes from the given `source` to styled element.\n   *\n   * @param source  A source of CSS class names.\n   *\n   * @returns CSS class names supply. Removes `source` CSS classes from styled element once cut off.\n   */\n  abstract add(source: InCssClasses.Source): EventSupply;\n\n  /**\n   * Converts arbitrary CSS classes source to their {@link InCssClasses.Spec specifiers}.\n   *\n   * @param source  A source of CSS classes names.\n   *\n   * @returns An `AfterEvent` keeper of CSS class name specifiers.\n   */\n  abstract specs(source: InCssClasses.Source): AfterEvent<InCssClasses.Spec[]>;\n\n  /**\n   * Resolves arbitrary CSS classes source to {@link InCssClasses.Map map of class names}.\n   *\n   * @param source  A source of CSS classes names.\n   *\n   * @returns An `AfterEvent` keeper of CSS class names map.\n   */\n  abstract resolve(source: InCssClasses.Source): AfterEvent<[InCssClasses.Map]>;\n\n  /**\n   * Applies CSS classes to the given styled element.\n   *\n   * @param element  Target element to apply CSS classes to.\n   * @param schedule  DOM render schedule to add CSS class updates to. A new schedule is constructed by\n   * {@link InRenderScheduler input render scheduler} by default.\n   *\n   * @returns CSS classes supply that stops their application and removes already applied ones once cut off.\n   */\n  abstract applyTo(element: InStyledElement, schedule?: RenderSchedule): EventSupply;\n\n  /**\n   * Removes all CSS class sources and stops applying CSS classes to styled elements.\n   *\n   * @param reason  An optional reason.\n   *\n   * @returns `this` instance.\n   */\n  abstract done(reason?: any): this;\n\n}\n\nexport namespace InCssClasses {\n\n  /**\n   * A source of CSS class names for styled element.\n   *\n   * This is either an event keeper of CSS class names, or a function returning one and accepting target input\n   * control as the only parameter.\n   */\n  export type Source =\n      | EventKeeper<Spec[]>\n      | ((this: void, control: InControl<any>) => EventKeeper<Spec[]>);\n\n  /**\n   * A specifier of CSS classes for styled element.\n   *\n   * This is either a single (potentially qualified) class name, or a {@link Map map of class names}.\n   *\n   * Qualified names are converted to simple ones by [[InNamespaceAliaser]] aspect.\n   */\n  export type Spec =\n      | QualifiedName\n      | Map;\n\n  /**\n   * A map of CSS class names for styled element.\n   *\n   * The keys of this map are class names to apply.\n   * - When the value is `true` corresponding class name will be added.\n   * - When the value is `false` corresponding class name will not be added.\n   * - The `undefined` value is ignored.\n   */\n  export type Map = {\n    readonly [name in string]?: boolean;\n  };\n\n}\n\n/**\n * @internal\n */\nconst UnsubscribeReason__symbol = (/*#__PURE__*/ Symbol('reason'));\n\n/**\n * @internal\n */\ninterface UnsubscribeReason {\n  readonly [UnsubscribeReason__symbol]?: any;\n}\n\n/**\n * @internal\n */\nfunction isUnsubscribeReason(reason: any): reason is UnsubscribeReason {\n  return reason && typeof reason === 'object' && UnsubscribeReason__symbol in reason;\n}\n\n/**\n * @internal\n */\nclass InControlCssClasses extends InCssClasses {\n\n  private readonly _sources = trackValue<[Map<AfterEvent<[InCssClasses.Map]>, EventSupply>]>([new Map()]);\n  private _schedule?: RenderSchedule;\n\n  constructor(private readonly _control: InControl<any>) {\n    super();\n\n    const element = _control.aspect(InStyledElement);\n\n    if (element) {\n      this.applyTo(element, this.schedule);\n    }\n\n    eventSupplyOf(_control).whenOff(reason => this.done(reason));\n  }\n\n  get schedule(): RenderSchedule {\n    return this._schedule || (this._schedule = controlSchedule(\n        this._control,\n        this._control.aspect(InStyledElement)!,\n    ));\n  }\n\n  read(): AfterEvent<[InCssClasses.Map]>;\n  read(receiver: EventReceiver<[InCssClasses.Map]>): EventSupply;\n  read(receiver?: EventReceiver<[InCssClasses.Map]>): AfterEvent<[InCssClasses.Map]> | EventSupply {\n    return (this.read = this._sources.read().tillOff(this._control).keepThru_(\n        ([sources]) => nextAfterEvent(afterEach(...sources.keys())),\n        (...classes) => {\n\n          const result: { [name: string]: boolean } = {};\n\n          classes.forEach(([map]) => mergeInCssClassesMap(map, result));\n\n          return result;\n        },\n    ).F)(receiver);\n  }\n\n  track(): AfterEvent<[readonly string[], readonly string[]]>;\n  track(receiver: EventReceiver<[readonly string[], readonly string[]]>): EventSupply;\n  track(\n      receiver?: EventReceiver<[readonly string[], readonly string[]]>,\n  ): AfterEvent<[readonly string[], readonly string[]]> | EventSupply {\n    return (this.track = afterEventBy<[readonly string[], readonly string[]]>(receiver => {\n      receiver.supply.needs(this._control);\n\n      const classes = new DeltaSet<string>();\n      const emitter = new EventNotifier<[readonly string[], readonly string[]]>();\n      let classesSent = false;\n      const sendClasses = (): void => {\n        classesSent = true;\n        classes.redelta(\n            (add, remove) => emitter.send(add, remove),\n        ).undelta();\n      };\n\n      emitter.on(receiver);\n\n      return this.read(map => {\n\n        const remove = new Set(classes);\n        const add: string[] = [];\n\n        itsEach(\n            filterIt<ObjectEntry<InCssClasses.Map>>(\n                overEntries<InCssClasses.Map>(map),\n                ([, flag]) => !!flag,\n            ),\n            ([name]) => {\n              if (!remove.delete(name)) {\n                add.push(name);\n              }\n            },\n        );\n\n        if (!classesSent || add.length || remove.size) {\n          classes.delta(add, remove);\n          sendClasses();\n        }\n      });\n    }).F)(receiver);\n  }\n\n  specs(source: InCssClasses.Source): AfterEvent<InCssClasses.Spec[]> {\n    return afterSupplied(isEventKeeper(source) ? source : source(this._control));\n  }\n\n  resolve(source: InCssClasses.Source): AfterEvent<[InCssClasses.Map]> {\n\n    const nsAlias = this._control.aspect(InNamespaceAliaser);\n\n    return this.specs(source).keepThru(\n        (...names) => {\n\n          const result: { [name: string]: boolean } = {};\n\n          names.forEach(name => {\n            if (isQualifiedName(name)) {\n              result[css__naming.name(name, nsAlias)] = true;\n            } else {\n              mergeInCssClassesMap(name, result);\n            }\n          });\n\n          return result;\n        },\n    );\n  }\n\n  add(source: InCssClasses.Source): EventSupply {\n\n    const inSupply = eventSupplyOf(this._control);\n\n    if (inSupply.isOff) {\n      return inSupply;\n    }\n\n    const classesSupply = eventSupply();\n    const src = afterEventBy<[InCssClasses.Map]>(receiver => {\n\n      const supply = this.resolve(source).to({\n        receive(context, ...event) {\n          receiver.receive(context, ...event);\n        },\n      });\n\n      receiver.supply.whenOff(reason => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        classesSupply.off({ [UnsubscribeReason__symbol]: reason });\n      });\n      classesSupply.needs(supply).whenOff(reason => {\n        if (isUnsubscribeReason(reason)) {\n          supply.off(reason[UnsubscribeReason__symbol]);\n        }\n      });\n    }).share();\n\n    const [sources] = this._sources.it;\n\n    sources.set(src, classesSupply);\n    classesSupply.whenOff(reason => {\n      if (!isUnsubscribeReason(reason)) {\n        sources.delete(src);\n        this._sources.it = [sources];\n      }\n    });\n\n    this._sources.it = [sources];\n\n    return classesSupply.needs(inSupply);\n  }\n\n  applyTo(\n      element: Element,\n      schedule: RenderSchedule = controlSchedule(this._control, element),\n  ): EventSupply {\n\n    const { classList } = element;\n    const classes = new DeltaSet<string>();\n    const updateClasses = (): void => {\n      classes.redelta((add, remove) => {\n        classList.remove(...remove);\n        classList.add(...add);\n      }).undelta();\n    };\n\n    return this.track((add, remove) => {\n      classes.delta(add, remove);\n      schedule(updateClasses);\n    }).whenOff(() => {\n      if (classes.size) {\n        classes.clear();\n        schedule(updateClasses);\n      }\n    });\n  }\n\n  done(reason?: any): this {\n    itsEach(\n        this._sources.it[0].values(),\n        supply => supply.off(reason),\n    );\n    this._sources.done(reason);\n    return this;\n  }\n\n}\n\n/**\n * @internal\n */\nfunction mergeInCssClassesMap(map: InCssClasses.Map, result: { [name: string]: boolean }): void {\n  itsEach(\n      overEntries(map),\n      ([name, flag]) => {\n        if (flag != null) {\n          result[name] = flag;\n        }\n      },\n  );\n}\n\n/**\n * @internal\n */\nfunction controlSchedule(control: InControl<any>, node: Node | undefined): RenderSchedule {\n  return control.aspect(InRenderScheduler)({ node });\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/input-aspects\n */\nimport { nextArgs } from '@proc7ts/call-thru';\nimport { InputAspects__NS } from '../../aspects';\nimport { InValidation } from '../../validation';\nimport { InCssClasses } from './css-classes.aspect';\n\n/**\n * @internal\n */\nconst defaultInCssErrorMarks: InCssClasses.Spec[] = [['has-error', InputAspects__NS]];\n\n/**\n * @internal\n */\nfunction defaultInCssHasError(errors: InValidation.Result): boolean {\n  return !errors.ok;\n}\n\n/**\n * Builds a source of error marker CSS classes.\n *\n * Applies error marker class(es) when the given error message codes present in\n * {@link InValidation.Result validation result}.\n *\n * @category Style\n * @param mark  Error mark. Specifies CSS class(es) to apply when requested error present.\n * A class with `has-error` name in {@link InputAspects__NS input\n * aspects namespace} is used by default.\n * @param when  {@link InValidation.Message Validation message} code(s) to expect.\n * {@link InValidation.Result.ok Any} error matches by default.\n *\n * @returns A source of CSS class names to apply.\n */\nexport function inCssError(\n    {\n      mark,\n      when,\n    }: {\n      mark?: InCssClasses.Spec | InCssClasses.Spec[];\n      when?: string | string[];\n    } = {},\n): InCssClasses.Source {\n\n  let hasError: (errors: InValidation.Result) => boolean;\n\n  if (!when) {\n    hasError = defaultInCssHasError;\n  } else if (Array.isArray(when)) {\n    hasError = when.length ? errors => when.every(code => errors.has(code)) : defaultInCssHasError;\n  } else {\n    hasError = errors => errors.has(when);\n  }\n\n  let marks: InCssClasses.Spec[];\n\n  if (!mark) {\n    marks = defaultInCssErrorMarks;\n  } else if (Array.isArray(mark)) {\n    marks = mark.length ? mark : defaultInCssErrorMarks;\n  } else {\n    marks = [mark];\n  }\n\n  return control => control.aspect(InValidation).read().keepThru(\n      errors => hasError(errors) ? nextArgs(...marks) : nextArgs(),\n  );\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/input-aspects\n */\nimport { nextArgs } from '@proc7ts/call-thru';\nimport { afterAll } from '@proc7ts/fun-events';\nimport { NamespaceDef, QualifiedName } from '@proc7ts/namespace-aliaser';\nimport { InputAspects__NS } from '../../aspects';\nimport { InControl } from '../../control';\nimport { InMode } from '../../data';\nimport { InValidation } from '../../validation';\nimport { InStatus } from '../focus';\nimport { InCssClasses } from './css-classes.aspect';\n\n/**\n * Builds a source of informative CSS classes.\n *\n * Generates the following CSS classes:\n * - `disabled` when input control is disabled (i.e. has no data).\n * - `readonly` when input control is read-only,\n * - `invalid` when input control validation failed,\n * - `missing` when there are validation messages with `missing` code,\n * - `incomplete` when there are validation messages with `incomplete`,\n * - `hasFocus` when input control has input focus,\n * - `touched` when input control is touched (i.e. had focus already),\n * - `edited` when input control is edited by user.\n *\n * These names are qualified with the given (or {@link InputAspects__NS default}) namespace.\n *\n * @category Style\n * @param ns  A definition of namespace to qualify CSS class names with. The {@link InputAspects__NS default namespace}\n * will be used when omitted.\n *\n * @returns A source of CSS class names to apply.\n */\nexport function inCssInfo(\n    {\n      ns = InputAspects__NS,\n    }: {\n      ns?: NamespaceDef;\n    } = {},\n): InCssClasses.Source {\n  return (control: InControl<any>) => {\n\n    const cls = (name: string) => [name, ns] as const;\n\n    return afterAll({\n      md: control.aspect(InMode),\n      vl: control.aspect(InValidation),\n      st: control.aspect(InStatus),\n    }).keepThru(\n        ({ md: [mode], vl: [valid], st: [{ hasFocus, touched, edited }] }) => {\n\n          const names: QualifiedName[] = [];\n\n          if (!InMode.hasData(mode)) {\n            names.push(cls('disabled'));\n          }\n          if (mode === 'ro' || mode === '-ro') {\n            names.push(cls('readonly'));\n          }\n          if (!valid.ok) {\n            names.push(cls('invalid'));\n          }\n          if (valid.has('missing')) {\n            names.push(cls('missing'));\n          }\n          if (valid.has('incomplete')) {\n            names.push(cls('incomplete'));\n          }\n          if (hasFocus) {\n            names.push(cls('has-focus'));\n          }\n          if (touched) {\n            names.push(cls('touched'));\n          }\n          if (edited) {\n            names.push(cls('edited'));\n          }\n\n          return nextArgs(...names);\n        },\n    );\n  };\n}\n","import cssesc from 'cssesc';\n\n/**\n * @internal\n */\nexport function cssescId(id: string): string {\n  return cssesc(id, { isIdentifier: true });\n}\n\n/**\n * @internal\n */\nexport const IMPORTANT_CSS_SUFFIX = '!important';\n","/**\n * @internal\n */\nexport function isReadonlyArray<T>(value: any): value is readonly T[] {\n  return Array.isArray(value);\n}\n\n/**\n * @internal\n */\nexport function isNotEmptyArray<T>(array: readonly T[]): array is readonly [T, ...T[]];\n\n/**\n * @internal\n */\nexport function isNotEmptyArray<T>(array: T[]): array is [T, ...T[]];\n\n/**\n * @internal\n */\nexport function isNotEmptyArray<T>(array: readonly T[]): boolean {\n  return !!array.length;\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/style-producer\n */\nimport { StypColor } from './color';\nimport { StypNumeric } from './numeric';\nimport { StypPriority } from './priority';\nimport { StypURL } from './url';\n\n/**\n * CSS property value.\n *\n * This is either a scalar value, or {@link StypValueStruct structured} one.\n *\n * @category CSS Value\n */\nexport type StypValue =\n    | string\n    | number\n    | boolean\n    | undefined\n    | StypNumeric<any>\n    | StypURL\n    | StypColor;\n\n/**\n * Structured property CSS value. E.g. [length](https://developer.mozilla.org/en-US/docs/Web/CSS/length),\n * [percentage](https://developer.mozilla.org/en-US/docs/Web/CSS/percentage),\n * [color](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value), etc.\n *\n * @category CSS Value\n * @typeparam Self  A type of itself.\n */\nexport abstract class StypValueStruct<Self extends StypValueStruct<Self>> {\n\n  /**\n   * CSS property value priority.\n   *\n   * The value [[StypPriority.Important]] and above means the property is `!important`. Everything else means normal\n   * priority.\n   *\n   * The property value with higher priority number takes precedence over the one with lower one.\n   */\n  readonly priority: number;\n\n  /**\n   * Constructs structured CSS property value.\n   *\n   * @param opts  Construction options.\n   */\n  protected constructor(opts?: StypValue.Opts) {\n    this.priority = opts && opts.priority || StypPriority.Default;\n  }\n\n  /**\n   * Checks whether this value equals to CSS property value.\n   *\n   * @param other  CSS property value to compare with.\n   */\n  abstract is(other: StypValue): boolean;\n\n  /**\n   * Creates structured CSS value with the given `priority`.\n   *\n   * @param priority  New priority.\n   *\n   * @returns Either a new value equal to this one but having the given `priority`, or this one if `priority` did\n   * not change.\n   */\n  abstract prioritize(priority: number): Self;\n\n  /**\n   * Creates `!important` variant of this value.\n   *\n   * @returns Either a new value equal to this one but having `priority` equal to [[StypPriority.Important]],\n   * or this one if already the case.\n   */\n  important(): Self {\n    return this.prioritize(StypPriority.Important);\n  }\n\n  /**\n   * Creates usual (not `!important`) variant of this value.\n   *\n   * @returns Either a new value equal to this one but having `priority` equal to [[StypPriority.Usual]],\n   * or this one if already the case.\n   */\n  usual(): Self {\n    return this.prioritize(StypPriority.Usual);\n  }\n\n  /**\n   * Maps the given CSS property value to the value of this one's type. Defaults to this value if mapping is not\n   * possible.\n   *\n   * This method allows to use an structured value instance as {@link StypMapper.Mapping CSS property mapping}.\n   *\n   * @param source  A raw property value that should be converted.\n   *\n   * @returns Mapped property value.\n   */\n  abstract by(source: StypValue): StypValue;\n\n  /**\n   * Returns textual representation of this value.\n   *\n   * Textual representation never contains an `!important` suffix.\n   *\n   * @returns A textual representation of this value to use as CSS property value.\n   */\n  abstract toString(): string;\n\n}\n\nexport namespace StypValue {\n\n  /**\n   * Construction options of structured property CSS value.\n   */\n  export interface Opts {\n\n    /**\n     * Constructed value priority.\n     *\n     * The value [[StypPriority.Important]] and above means the property is `!important`. Everything else means normal\n     * priority.\n     */\n    readonly priority?: number;\n\n  }\n\n}\n\n/**\n * Checks whether two CSS property values are equal.\n *\n * Compares scalar values verbatim. Compares structured values using their [[StypValueStruct.is]] method. The latter\n * method is applied when at least one of the values is structured.\n *\n * @category CSS Value\n * @param first  The first CSS property value to compare.\n * @param second  The second CSS property value to compare.\n *\n * @returns `true` if `first` equals to `second`, or `false otherwise.\n */\nexport function stypValuesEqual(first: StypValue, second: StypValue): boolean {\n  if (first === second) {\n    return true;\n  }\n  if (typeof first === 'object') {\n    return first.is(second);\n  }\n  if (typeof second === 'object') {\n    return second.is(first);\n  }\n  return false;\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/style-producer\n */\nimport { StypValue, StypValueStruct } from '../value';\n\n/**\n * Structured [color](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value) CSS property value.\n *\n * Colors are represented by either `rgb()`, or `hsl()` functional notations.\n *\n * @category CSS Value\n */\nexport type StypColor = StypRGB | StypHSL;\n\n/**\n * Structured color CSS property value base.\n *\n * @category CSS Value\n */\nexport abstract class StypColorStruct<Self extends StypColorStruct<Self, Coords>, Coords>\n    extends StypValueStruct<Self> {\n\n  /**\n   * Color value type corresponding to color coordinates. Either `rgb` or `hsl`\n   */\n  abstract readonly type: 'rgb' | 'hsl';\n\n  /**\n   * This color in RGB coordinates.\n   */\n  abstract readonly rgb: StypRGB;\n\n  /**\n   * This color in HSL coordinates.\n   */\n  abstract readonly hsl: StypHSL;\n\n  /**\n   * Constructs another color value with updated coordinates.\n   *\n   * @param coords  Either partial color coordinates to apply or a function returning them and accepting this color\n   * instance as its only argument. Missing values are taken from this color.\n   *\n   * @returns Updated color value.\n   */\n  abstract set(coords: Partial<Coords> | ((this: void, color: this) => Partial<Coords>)): Self;\n\n}\n\n/**\n * CSS property value representing [RGB color](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#RGB_colors)\n * in `rgb()` or `rgba()` functional notation.\n *\n * @category CSS Value\n */\nexport class StypRGB extends StypColorStruct<StypRGB, StypRGB.Coords> implements StypRGB.Coords {\n\n  // noinspection JSMethodCanBeStatic\n  /**\n   * `rgb` value type.\n   */\n  get type(): 'rgb' {\n    return 'rgb';\n  }\n\n  /**\n   * Red color value between `0` and `255`.\n   */\n  readonly r: number;\n\n  /**\n   * Green color value between `0` and `255`.\n   */\n  readonly g: number;\n\n  /**\n   * Blue color value between `0` and `255`.\n   */\n  readonly b: number;\n\n  /**\n   * Alpha value between `0` and `1`.\n   */\n  readonly a: number;\n\n  /**\n   * Constructs RGB color value.\n   *\n   * @param coords  Color coordinates.\n   * @param opts  Construction options.\n   */\n  constructor(coords: StypRGB.Coords, opts?: StypValue.Opts) {\n    super(opts);\n    this.r = intCoord(coords.r, 255);\n    this.g = intCoord(coords.g, 255);\n    this.b = intCoord(coords.b, 255);\n    this.a = coords.a != null ? coord(coords.a, 1) : 1;\n  }\n\n  /**\n   * This color in RGB coordinates.\n   *\n   * Always the same as `this`.\n   */\n  get rgb(): this {\n    return this;\n  }\n\n  /**\n   * This color in HSL coordinates.\n   */\n  get hsl(): StypHSL {\n\n    const { a } = this;\n    const r = this.r * 100 / 255;\n    const g = this.g * 100 / 255;\n    const b = this.b * 100 / 255;\n    const max = Math.max(r, g, b);\n    const min = Math.min(r, g, b);\n    const l = Math.round((max + min) / 2);\n\n    if (max === min) {\n      return new StypHSL({ h: 0, s: 0, l, a }, this);\n    }\n\n    const d = max - min;\n    const s = Math.round(l > 50 ? d * 100 / (200 - max - min) : d * 100 / (max + min));\n    let h: number;\n\n    switch (max) {\n    case r:\n      h = ((g - b) / d) + (g < b ? 6 : 0);\n      break;\n    case g:\n      h = ((b - r) / d) + 2;\n      break;\n    default:\n      h = ((r - g) / d) + 4;\n      break;\n    }\n    h *= 60;\n    h = Math.round(h);\n\n    return new StypHSL({ h, s, l, a }, this);\n  }\n\n  by(source: StypValue): StypColor {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    return StypColor.by(source) || this;\n  }\n\n  is(other: StypValue): boolean {\n    return typeof other === 'object'\n        && other.type === this.type\n        && other.r === this.r\n        && other.g === this.g\n        && other.b === this.b\n        && other.a === this.a\n        && other.priority === this.priority;\n  }\n\n  prioritize(priority: number): StypRGB {\n    return this.priority === priority ? this : new StypRGB(this, { priority });\n  }\n\n  set(coords: Partial<StypRGB.Coords> | ((this: void, color: this) => Partial<StypRGB.Coords>)): StypRGB {\n    if (typeof coords === 'function') {\n      coords = coords(this);\n    }\n\n    const { r = this.r, g = this.g, b = this.b, a = this.a } = coords;\n\n    return new StypRGB({ r, g, b, a }, this);\n  }\n\n  toString(): string {\n\n    const rgb = `${this.r}, ${this.g}, ${this.b}`;\n\n    return this.a === 1 ? `rgb(${rgb})` : `rgba(${rgb}, ${this.a})`;\n\n  }\n\n}\n\nexport namespace StypRGB {\n\n  /**\n   * [RGB color](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#RGB_colors) coordinates.\n   */\n  export interface Coords {\n\n    /**\n     * Red color value between `0` and `255`.\n     */\n    r: number;\n\n    /**\n     * Green color value between `0` and `255`.\n     */\n    g: number;\n\n    /**\n     * Blue color value between `0` and `255`.\n     */\n    b: number;\n\n    /**\n     * Alpha value between `0` and `1`. `1` (full opacity) by default.\n     */\n    a?: number;\n  }\n\n}\n\n/**\n * CSS property value representing [HSL color](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#HSL_colors)\n * in `hsl()` or `hsla()` functional notation.\n *\n * @category CSS Value\n */\nexport class StypHSL extends StypColorStruct<StypHSL, StypHSL.Coords> implements StypHSL.Coords {\n\n  // noinspection JSMethodCanBeStatic\n  get type(): 'hsl' {\n    return 'hsl';\n  }\n\n  /**\n   * Hue angle value in degrees between `0` and `360`.\n   */\n  readonly h: number;\n\n  /**\n   * Saturation percentage.\n   */\n  readonly s: number;\n\n  /**\n   * Lightness percentage.\n   */\n  readonly l: number;\n\n  /**\n   * Alpha value between `0` and `1`.\n   */\n  readonly a: number;\n\n  /**\n   * Constructs HSL color value.\n   *\n   * @param coords  Color coordinates.\n   * @param opts  Construction options.\n   */\n  constructor(coords: StypHSL.Coords, opts?: StypValue.Opts) {\n    super(opts);\n    this.h = angleCoord(coords.h);\n    this.s = coord(coords.s, 100);\n    this.l = coord(coords.l, 100);\n    this.a = coords.a != null ? coord(coords.a, 1) : 1;\n  }\n\n  /**\n   * This color in RGB coordinates.\n   */\n  get rgb(): StypRGB {\n\n    const { a } = this;\n    const s = this.s / 100;\n    const l = this.l / 100;\n\n    if (!s) {\n\n      const c = l * 255;\n\n      return new StypRGB({ r: c, g: c, b: c, a }, this);\n    }\n\n    const q = l < 0.5 ? l * (1 + s) : (l + s) - (l * s);\n    const p = (2 * l) - q;\n    const hueAsFraction = this.h / 360;\n\n    return new StypRGB(\n        {\n          r: hueToRgb(p, q, hueAsFraction + (1.0 / 3.0)),\n          g: hueToRgb(p, q, hueAsFraction),\n          b: hueToRgb(p, q, hueAsFraction - (1.0 / 3.0)),\n          a,\n        },\n        this,\n    );\n  }\n\n  /**\n   * This color in HSL coordinates.\n   *\n   * Always the same as `this`.\n   */\n  get hsl(): this {\n    return this;\n  }\n\n  by(source: StypValue): StypColor {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    return StypColor.by(source) || this;\n  }\n\n  is(other: StypValue): boolean {\n    return typeof other === 'object'\n        && other.type === this.type\n        && other.h === this.h\n        && other.s === this.s\n        && other.l === this.l\n        && other.a === this.a\n        && other.priority === this.priority;\n  }\n\n  prioritize(priority: number): StypHSL {\n    return this.priority === priority ? this : new StypHSL(this, { priority });\n  }\n\n  set(coords: Partial<StypHSL.Coords> | ((this: void, color: this) => Partial<StypHSL.Coords>)): StypHSL {\n    if (typeof coords === 'function') {\n      coords = coords(this);\n    }\n\n    const { h = this.h, s = this.s, l = this.l, a = this.a } = coords;\n\n    return new StypHSL({ h, s, l, a }, this);\n  }\n\n  toString(): string {\n\n    const hsl = `${this.h}, ${this.s}%, ${this.l}%`;\n\n    return this.a === 1 ? `hsl(${hsl})` : `hsla(${hsl}, ${this.a})`;\n  }\n\n}\n\nexport namespace StypHSL {\n\n  /**\n   * [HSL color](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#HSL_colors) coordinates.\n   */\n  export interface Coords {\n\n    /**\n     * Hue angle value in degrees.\n     */\n    h: number;\n\n    /**\n     * Saturation percentage.\n     */\n    s: number;\n\n    /**\n     * Lightness percentage.\n     */\n    l: number;\n\n    /**\n     * Alpha value between `0` and `1`. `1` (full opacity) by default.\n     */\n    a?: number;\n  }\n\n}\n\n/**\n * @category CSS Value\n */\nexport const StypColor = {\n\n  /**\n   * Maps the given CSS property value to color. Defaults to `undefined` if mapping is not possible.\n   *\n   * This method allows to use a [[StypColor]] object as {@link StypMapper.Mapping CSS property mapping}.\n   *\n   * @param source  A raw property value that should be converted.\n   *\n   * @returns Mapped property value or `undefined`.\n   */\n  by(source: StypValue): StypColor | undefined {\n    if (typeof source === 'object' && (source.type === 'rgb' || source.type === 'hsl')) {\n      return source;\n    }\n    return;\n  },\n\n};\n\n/**\n * @internal\n */\nfunction angleCoord(value: number): number {\n  value = value % 360;\n  return value < 0 ? 360 + value : value;\n}\n\n/**\n * @internal\n */\nfunction intCoord(value: number, max: number): number {\n  return coord(Math.round(value), max);\n}\n\n/**\n * @internal\n */\nfunction coord(value: number, max: number): number {\n  return Math.max(Math.min(value, max), 0);\n}\n\n/**\n * @internal\n */\nfunction hueToRgb(p: number, q: number, t: number): number {\n\n  let newT = t;\n\n  if (newT < 0) {\n    newT += 1;\n  } else if (newT > 1) {\n    newT -= 1;\n  }\n\n  let result;\n\n  if (newT < 1.0 / 6.0) {\n    result = p + ((q - p) * (6 * newT));\n  } else if (newT < 1.0 / 2.0) {\n    result = q;\n  } else if (newT < 2.0 / 3.0) {\n    result = p + (((q - p) * ((2.0 / 3.0) - newT)) * 6);\n  } else {\n    result = p;\n  }\n\n  return result * 255;\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/style-producer\n */\nimport { StypColor, StypRGB } from './color';\n\n/**\n * Mixes two colors.\n *\n * Both the `weight` and the relative opacity of each color determines how much of each color is in the result.\n *\n * @category CSS Value\n * @param color1  First color to mix\n * @param color2  Second color to mix.\n * @param weight  A number between `0` and `1`. A larger weight indicates that more of `color1` should be used, and a\n * smaller weight indicates that more of `color2` should be used.\n *\n * @returns Mixed color.\n */\nexport function mixStypColors(color1: StypColor, color2: StypColor, weight: number): StypColor {\n\n  const w = weight * 2 - 1;\n  const rgba1 = color1.rgb;\n  const rgba2 = color2.rgb;\n  const aDiff = rgba1.a - rgba2.a;\n  const w1 = (((w * aDiff === -1) ? w : (w + aDiff) / (1 + w * aDiff)) + 1) / 2.0;\n  const w2 = 1 - w1;\n  return new StypRGB(\n      {\n        r: rgba1.r * w1 + rgba2.r * w2,\n        g: rgba1.g * w1 + rgba2.g * w2,\n        b: rgba1.b * w1 + rgba2.b * w2,\n        a: rgba1.a * weight + rgba2.a * (1 - weight),\n      },\n      color1,\n  );\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/style-producer\n */\nimport { StypValue, StypValueStruct } from '../value';\nimport { StypZero } from './zero';\n\n/**\n * Structured numeric CSS property value.\n *\n * This represents either dimension, zero value, or a `calc()` CSS function call.\n *\n * @category CSS Value\n * @typeparam Unit  Allowed unit type.\n * @typeparam Zero  A type of zero value. [[StypZero]] by default.\n */\nexport type StypNumeric<Unit extends string, Zero extends StypZero<Unit> | StypDimension<Unit> = StypZero<Unit>> =\n    | StypDimension<Unit>\n    | StypCalc<Unit>\n    | Zero;\n\n/**\n * Base implementation of structured numeric CSS property value.\n *\n * @category CSS Value\n * @typeparam Self  A type of itself.\n * @typeparam Unit  Allowed unit type.\n */\nexport abstract class StypNumericStruct<Self extends StypNumericStruct<Self, Unit>, Unit extends string>\n    extends StypValueStruct<Self> {\n\n  /**\n   * A type of structured numeric CSS property value.\n   */\n  abstract type: 'dimension' | 'calc' | 0;\n\n  readonly dim: StypDimension.Kind<Unit>;\n\n  constructor(opts: StypDimension.Opts<Unit>) {\n    super(opts);\n    this.dim = opts.dim;\n  }\n\n  /**\n   * Tries to converts this numeric value to another dimension.\n   *\n   * Does not actually construct a value in another dimension, as long as dimension unit supported by both dimensions.\n   *\n   * @typeparam U  A unit type allowed in target dimension.\n   * @param dim  Target dimension.\n   *\n   * @returns Either a value in dimension compatible with `dim`, or `undefined` if this value's unit is not supported\n   * by `dim`.\n   */\n  abstract toDim<U extends string>(dim: StypDimension.Kind<U>): StypNumeric<U> | undefined;\n\n  abstract add(addendum: StypNumeric<Unit>): StypNumeric<Unit>;\n\n  abstract add(addendum: number, unit: Unit): StypNumeric<Unit>;\n\n  abstract sub(subtrahend: StypNumeric<Unit>): StypNumeric<Unit>;\n\n  abstract sub(subtrahend: number, unit: Unit): StypNumeric<Unit>;\n\n  abstract mul(multiplier: number): StypNumeric<Unit>;\n\n  abstract div(divisor: number): StypNumeric<Unit>;\n\n  abstract negate(): StypNumeric<Unit>;\n\n  by(source: StypValue): StypNumeric<Unit> {\n    return this.dim.by(source) || this as StypNumeric<Unit>;\n  }\n\n  /**\n   * Returns a textual representation of this value to be used within CSS `calc()` function.\n   *\n   * @returns CSS value text without `!important` or `calc()`.\n   */\n  abstract toFormula(): string;\n\n  toString(): string {\n    return this.toFormula();\n  }\n\n}\n\n/**\n * Structured [dimension](https://developer.mozilla.org/en-US/docs/Web/CSS/dimension) value with unit.\n *\n * @category CSS Value\n * @typeparam Unit  Allowed units type.\n */\nexport interface StypDimension<Unit extends string>\n    extends StypValueStruct<StypDimension<Unit>>, StypNumericStruct<StypDimension<Unit>, Unit> {\n\n  readonly type: 'dimension';\n\n  readonly dim: StypDimension.Kind<Unit>;\n\n  /**\n   * Dimension value.\n   */\n  readonly val: number;\n\n  /**\n   * Dimension unit.\n   */\n  readonly unit: Unit;\n\n  add(addendum: StypNumeric<Unit>): StypNumeric<Unit>;\n\n  add(addendum: number, unit?: Unit): StypNumeric<Unit>;\n\n  sub(subtrahend: StypNumeric<Unit>): StypNumeric<Unit>;\n\n  sub(subtrahend: number, unit?: Unit): StypNumeric<Unit>;\n\n  by(source: StypValue): StypNumeric<Unit>;\n\n}\n\nexport namespace StypDimension {\n\n  /**\n   * A kind of dimensions. E.g. angle, length, percentage, etc.\n   *\n   * It is perfectly fine to use dimensions interchangeably as long as dimension units are compatible.\n   *\n   * @typeparam Unit  Allowed units type.\n   */\n  export interface Kind<Unit extends string> {\n\n    /**\n     * A similar kind of dimensions supporting all units this one supports and, in addition, supporting percents (`%`).\n     *\n     * `undefined` if there is no such dimension kind. Refers itself if supports percents.\n     */\n    readonly pt?: Kind<Unit | '%'>;\n\n    /**\n     * A similar kind of dimensions supporting all units this one supports, except percents (`%`).\n     *\n     * `undefined` if there is no such dimension kind. Refers itself if does not support percents.\n     */\n    readonly noPt: Kind<Exclude<Unit, '%'>>;\n\n    /**\n     * Zero value of this kind.\n     *\n     * Typically, this is unit-less [[StypZero]]. But some dimensions require units.\n     */\n    readonly zero: StypDimension<Unit> | StypZero<Unit>;\n\n    /**\n     * Constructs dimension value.\n     *\n     * @param val  Numeric dimension value.\n     * @param unit  Dimension unit.\n     *\n     * @returns Constructed dimension value. Either [[StypDimension]] instance, or [[StypZero]] if `val` is `0` and\n     * this dimension kind supports unitless zero.\n     */\n    of(val: number, unit: Unit): StypDimension<Unit> | StypZero<Unit>;\n\n    /**\n     * Maps the given CSS property value to the one compatible with this dimension kind. Defaults to `undefined`\n     * if mapping is not possible.\n     *\n     * This method allows to use a dimension kind as {@link StypMapper.Mapping CSS property mapping}.\n     *\n     * Any scalar or non-numeric value is mapped to `undefined`. A numeric value is converted to this dimension by\n     * [[StypNumericStruct.toDim]] method.\n     *\n     * @param source  A raw property value that should be converted.\n     *\n     * @returns Mapped property value or `undefined`.\n     */\n    by(source: StypValue): StypNumeric<Unit, StypDimension<Unit> | StypZero<Unit>> | undefined;\n\n  }\n\n  export namespace Kind {\n\n    /**\n     * A kind of dimension with unit-less zero. E.g. angle or length.\n     *\n     * @typeparam Unit  Allowed units type.\n     */\n    export interface UnitlessZero<Unit extends string> extends Kind<Unit> {\n\n      readonly pt?: UnitlessZero<Unit | '%'>;\n\n      readonly noPt: UnitlessZero<Exclude<Unit, '%'>>;\n\n      /**\n       * Zero value of this kind without unit.\n       */\n      readonly zero: StypZero<Unit>;\n\n      /**\n       * Constructs dimension value.\n       *\n       * @param val  Numeric dimension value.\n       * @param unit  Dimension unit.\n       *\n       * @returns Constructed dimension value. Either [[StypDimension]] instance, or [[StypZero]] if `val` is `0`.\n       */\n      of(val: number, unit: Unit): StypDimension<Unit> | StypZero<Unit>;\n\n      by(source: StypValue): StypNumeric<Unit> | undefined;\n\n    }\n\n    /**\n     * A kind of dimension which zero value has unit. E.g. frequency or resolution.\n     *\n     * @typeparam Unit  Allowed units type.\n     */\n    export interface UnitZero<Unit extends string> extends Kind<Unit> {\n\n      readonly pt?: UnitZero<Unit | '%'>;\n\n      readonly noPt: UnitZero<Exclude<Unit, '%'>>;\n\n      /**\n       * Zero value of this kind that has unit.\n       */\n      readonly zero: StypDimension<Unit>;\n\n      /**\n       * Constructs dimension value.\n       *\n       * @param val  Numeric dimension value.\n       * @param unit  Dimension unit.\n       *\n       * @returns Constructed dimension value as a [[StypDimension]] instance.\n       */\n      of(val: number, unit: Unit): StypDimension<Unit>;\n\n      by(source: StypValue): StypNumeric<Unit, StypDimension<Unit>> | undefined;\n\n    }\n\n  }\n\n  /**\n   * Construction options of dimensions.\n   *\n   * @typeparam Unit  Allowed units type.\n   */\n  export interface Opts<Unit extends string> extends StypValue.Opts {\n\n    /**\n     * A kind of dimension.\n     */\n    dim: Kind<Unit>;\n\n  }\n\n}\n\n/**\n * CSS `calc()` function call representation.\n *\n * This is either a {@link StypAddSub addition/subtraction}, or {@link StypMulDiv multiplication/division}.\n *\n * @category CSS Value\n * @typeparam Unit  Allowed unit type.\n */\nexport type StypCalc<Unit extends string> = StypAddSub<Unit> | StypMulDiv<Unit>;\n\n/**\n * CSS `calc()` function call representation containing either addition or subtraction.\n *\n * @category CSS Value\n * @typeparam Unit  Allowed unit type.\n */\nexport interface StypAddSub<Unit extends string> extends StypNumericStruct<StypAddSub<Unit>, Unit> {\n\n  readonly type: 'calc';\n\n  /**\n   * Left operand.\n   */\n  readonly left: StypNumeric<Unit>;\n\n  /**\n   * Operator.\n   */\n  readonly op: '+' | '-';\n\n  /**\n   * Right operand.\n   */\n  readonly right: StypNumeric<Unit>;\n\n}\n\n/**\n * CSS `calc()` function call representation containing either multiplication or division.\n *\n * @category CSS Value\n * @typeparam Unit  Allowed unit type.\n */\nexport interface StypMulDiv<Unit extends string> extends StypNumericStruct<StypMulDiv<Unit>, Unit> {\n\n  readonly type: 'calc';\n\n  /**\n   * Left operand.\n   */\n  readonly left: StypNumeric<Unit>;\n\n  /**\n   * Operator.\n   */\n  readonly op: '*' | '/';\n\n  /**\n   * Right operand.\n   */\n  readonly right: number;\n\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/style-producer\n */\nimport { itsEach, overKeys } from '@proc7ts/a-iterable';\nimport { StypProperties } from '../rule';\nimport { StypValue } from './value';\n\n/**\n * A type of function that maps CSS properties to something else.\n *\n * @category CSS Value\n * @typeparam R  A type of mapped properties. This is a mapping result type.\n */\nexport type StypMapper<R> =\n/**\n * @param from  CSS properties to map.\n *\n * @returns Mapping result.\n */\n    (this: void, from: StypProperties) => R;\n\nexport namespace StypMapper {\n\n  /**\n   * CSS property mapping.\n   *\n   * It is used to recognize raw property value and convert it to the one of the given type.\n   *\n   * It is one of:\n   * - Default property value. Replaces the source property value, unless the the have the same type.\n   * - A mapping function. Replaces the source property value with the result of this function call.\n   * - An object containing mapping method called `by()`. Replaces the source property value with the result of this\n   *   method call.\n   *\n   * @typeparam R  A type of mapped properties. This is an object containing mapped properties.\n   * @typeparam K  Type of mapped properties keys.\n   */\n  export type Mapping<R, K extends keyof R> =\n      | MappingFunction<R, K>\n      | MappingObject<R, K>\n      | R[K];\n\n  /**\n   * CSS property mapping function.\n   *\n   * @typeparam R  A type of mapped properties. This is a mapping result type.\n   * @typeparam K  Type of mapped properties keys.\n   */\n  export type MappingFunction<R, K extends keyof R> =\n  /**\n   * @param source  A raw property value that should be converted.\n   * @param mapped  An object granting access to other mapped properties.\n   * @param key  A key of converted property.\n   *\n   * @returns Mapped property value.\n   */\n      (this: void, source: StypValue, mapped: Mapped<R>, key: K) => R[K];\n\n  /**\n   * CSS property mapping object.\n   *\n   * @typeparam R  A type of mapped properties. This is a mapping result type.\n   * @typeparam K  Type of mapped properties keys.\n   */\n  export interface MappingObject<R, K extends keyof R> {\n\n    /**\n     * Maps CSS property value.\n     *\n     * @param source  A raw property value that should be converted.\n     * @param mapped  An object granting access to other mapped properties.\n     * @param key  A key of converted property.\n     *\n     * @returns Mapped property value.\n     */\n    by(source: StypValue, mapped: Mapped<R>, key: K): R[K];\n\n  }\n\n  /**\n   * Grants access to mapped values.\n   *\n   * Passed as a second argument to mapping function.\n   *\n   * @typeparam R  A type of mapped properties. This is a mapping result type.\n   */\n  export interface Mapped<R> {\n\n    /**\n     * Original properties to convert.\n     */\n    from: StypProperties;\n\n    /**\n     * Maps the property with the given type accordingly to mapping instruction.\n     *\n     * The mapping is performed at most once per property.\n     *\n     * @param key  Mapped property key.\n     *\n     * @returns Mapped property value.\n     */\n    get<K extends keyof R>(key: K): R[K];\n\n  }\n\n  /**\n   * Mappings of CSS properties.\n   *\n   * Contains mappings for each mapped CSS property with that property name as a key.\n   *\n   * @typeparam R  A type of mapped properties. This is a mapping result type.\n   */\n  export type Mappings<R> = { readonly [key in keyof R]: Mapping<R, key>; };\n\n}\n\nexport const StypMapper = {\n\n  /**\n   * Maps CSS properties accordingly to the given `mappings`.\n   *\n   * @typeparam R  A type of mapped properties. This is a mapping result type.\n   *\n   * @param mappings  Mappings of CSS properties.\n   * @param from  Raw CSS properties to map.\n   *\n   * @returns Mapped properties.\n   */\n  map<R>(mappings: StypMapper.Mappings<R>, from: StypProperties): R {\n\n    const result = {} as { [key in keyof R]: R[key] };\n    const mapped = {\n      from,\n      get<K extends keyof R>(key: K): R[K] {\n        if (key in result) {\n          return result[key];\n        }\n\n        const mapper = mappingBy<R, K>(mappings[key]);\n        const mappedValue = mapper(from[key as string], this, key);\n\n        result[key] = mappedValue;\n\n        return mappedValue;\n      },\n    };\n\n    itsEach(overKeys(mappings), key => mapped.get(key));\n\n    return result;\n  },\n\n  /**\n   * Creates CSS properties mapper function.\n   *\n   * @typeparam R  A type of mapped properties. This is a mapping result type.\n   * @param mappings  Mappings of CSS properties.\n   *\n   * @returns A function that maps CSS properties accordingly to the given `mappings`.\n   */\n  by<R>(mappings: StypMapper.Mappings<R>): StypMapper<R> {\n    return StypMapper.map.bind<void, StypMapper.Mappings<R>, [StypProperties], R>(undefined, mappings);\n  },\n\n};\n\n/**\n * @internal\n */\nfunction mappingBy<R, K extends keyof R>(\n    mapping: StypMapper.Mapping<R, K> | undefined,\n): StypMapper.MappingFunction<R, K> {\n  switch (typeof mapping) {\n  case 'function':\n    return mapping as StypMapper.MappingFunction<R, K>;\n  case 'object':\n    return (mapping as StypMapper.MappingObject<R, K>).by.bind(mapping);\n  default:\n  }\n\n  const type = typeof mapping;\n\n  return (from: StypValue): R[K] => typeof from === type\n      ? from as unknown as R[K]\n      : mapping as R[K];\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/style-producer\n */\nimport { IMPORTANT_CSS_SUFFIX } from '../internal';\nimport { StypValue } from './value';\n\n/**\n * Predefined CSS property value priorities.\n *\n * @category CSS Value\n */\nexport const enum StypPriority {\n\n  /**\n   * Usual, non-important priority.\n   *\n   * This priority is assigned to values by [[StypValueStruct.usual]] method.\n   */\n  Usual = 0,\n\n  /**\n   * Default priority.\n   *\n   * The same as `Usual`. This priority is assigned to values by default.\n   */\n  Default = Usual,\n\n  /**\n   * Important priority.\n   *\n   * This priority corresponds to values with `!important` suffix. It is applied to string values with `!important`\n   * suffix, and can be assigned to structured values using [[StypValueStruct.important]] method.\n   *\n   * All numeric priorities with higher values are rendered as `!important` ones.\n   */\n  Important = 1,\n\n}\n\n/**\n * Splits undefined CSS property value onto non-prioritized value and priority.\n *\n * @category CSS Value\n * @param value  Undefined CSS property value to split.\n *\n * @returns An `[undefined, 0]` tuple.\n */\nexport function stypSplitPriority<T extends StypValue>(value: undefined): [undefined, 0];\n\n/**\n * Splits string CSS property value onto non-prioritized value and priority.\n *\n * @param value  CSS property value to split.\n *\n * @returns A tuple containing the value without `!priority` suffix, and numeric priority (0 or 1).\n */\nexport function stypSplitPriority(value: string): [string, 0 | 1];\n\n/**\n * Splits scalar CSS property value onto non-prioritized value and priority.\n *\n * @param value  CSS property value to split.\n *\n * @returns A tuple containing the value and `0` priority.\n */\nexport function stypSplitPriority<T extends number | boolean>(value: T): [T, 0];\n\n/**\n * Splits arbitrary CSS property value onto value non-prioritized value and priority.\n *\n * @param value  CSS property value to split.\n *\n * @returns A tuple containing the value and numeric priority.\n */\nexport function stypSplitPriority<T extends StypValue>(value: T): [T, number];\n\nexport function stypSplitPriority<T extends StypValue>(value: T): [T, number] {\n  if (value == null) {\n    return [undefined as T, StypPriority.Default];\n  }\n\n  switch (typeof value) {\n  case 'object':\n    return [value, value.priority];\n  case 'string':\n    if (value.endsWith(IMPORTANT_CSS_SUFFIX)) {\n      return [\n        value.substring(0, value.length - IMPORTANT_CSS_SUFFIX.length).trim() as T,\n        StypPriority.Important,\n      ];\n    }\n    break;\n  default:\n  }\n\n  return [value, StypPriority.Default];\n}\n","import { StypPriority } from '../priority';\nimport { StypValue, stypValuesEqual } from '../value';\nimport {\n  StypAddSub as StypAddSub_,\n  StypDimension as StypDimension_,\n  StypMulDiv as StypMulDiv_,\n  StypNumeric,\n  StypNumericStruct,\n} from './numeric';\nimport { StypZero } from './zero';\n\n/**\n * @internal\n */\nexport class StypDimension<Unit extends string>\n    extends StypNumericStruct<StypDimension<Unit>, Unit>\n    implements StypDimension_<Unit> {\n\n  get type(): 'dimension' {\n    return 'dimension';\n  }\n\n  /**\n   * The number value.\n   */\n  readonly val: number;\n\n  /**\n   * The unit.\n   */\n  readonly unit: Unit;\n\n  /**\n   * Constructs new structured dimension value.\n   *\n   * @param val  The numeric value.\n   * @param unit  The unit.\n   * @param opts  CSS value options.\n   */\n  constructor(val: number, unit: Unit, opts: StypDimension_.Opts<Unit>) {\n    super(opts);\n    this.val = val;\n    this.unit = unit;\n  }\n\n  toDim<U extends string>(dim: StypDimension_.Kind<U>): StypDimension_<U> | undefined {\n\n    const thisDim: StypDimension_.Kind<any> = this.dim;\n\n    if (dim === thisDim /* same dimension */\n        || dim === thisDim.pt /* !% to compatible +% */\n        || dim === (this.unit === '%' ? dim.pt /* % to any +% */ : thisDim.noPt /* !% to compatible -% */)) {\n      return this as StypDimension_<any>;\n    }\n\n    return;\n  }\n\n  is(other: StypValue): boolean {\n    if (other === this) {\n      return true;\n    }\n    return typeof other === 'object'\n        && other.type === this.type\n        && this.unit === other.unit\n        && this.val === other.val\n        && this.priority === other.priority;\n  }\n\n  prioritize(priority: number): StypDimension<Unit> {\n    return this.priority === priority\n        ? this\n        : new StypDimension(this.val, this.unit, { dim: this.dim, priority });\n  }\n\n  add(addendum: StypNumeric<Unit>): StypNumeric<Unit>;\n\n  add(addendum: number, unit?: Unit): StypNumeric<Unit>;\n\n  add(addendum: StypNumeric<Unit> | number, unit?: Unit): StypNumeric<Unit> {\n    if (typeof addendum === 'number') {\n      addendum = stypDimension(addendum, unit || this.unit, this);\n    }\n    if (addendum.type === 'dimension' && this.unit === addendum.unit) {\n      return stypDimension(this.val + addendum.val, this.unit, this);\n    }\n    return stypAddSub(this, '+', addendum);\n  }\n\n  sub(subtrahend: StypNumeric<Unit>): StypNumeric<Unit>;\n\n  sub(subtrahend: number, unit?: Unit): StypNumeric<Unit>;\n\n  sub(subtrahend: StypNumeric<Unit> | number, unit?: Unit): StypNumeric<Unit> {\n    if (typeof subtrahend === 'number') {\n      subtrahend = stypDimension(subtrahend, unit || this.unit, this);\n    }\n    if (subtrahend.type === 'dimension' && this.unit === subtrahend.unit) {\n      return stypDimension(this.val - subtrahend.val, this.unit, this);\n    }\n    return stypAddSub(this, '-', subtrahend);\n  }\n\n  mul(multiplier: number): StypNumeric<Unit> {\n    return multiplier === 1 ? this : stypDimension(this.val * multiplier, this.unit, this);\n  }\n\n  div(divisor: number): StypNumeric<Unit> {\n    return divisor === 1 ? this : stypDimension(this.val / divisor, this.unit, this);\n  }\n\n  negate(): StypNumeric<Unit> {\n    return stypDimension(-this.val, this.unit, this);\n  }\n\n  /**\n   * Returns a textual representation of this value to be used within CSS `calc()` function.\n   *\n   * @returns `<value><unit>` or just `0`.\n   */\n  toFormula(): string {\n    return `${this.val}${this.unit}`;\n  }\n\n}\n\n/**\n * Constructs structured [dimension] CSS property value.\n *\n * @param val  Numeric value.\n * @param unit  Value unit.\n * @param opts  Construction options.\n *\n * @returns Either [[StypDimension]], or [[StypZero]] if `val === 0`.\n *\n * [dimension]: https://developer.mozilla.org/en-US/docs/Web/CSS/dimension\n *\n * @internal\n */\nexport function stypDimension<Unit extends string>(\n    val: number,\n    unit: Unit,\n    opts: StypDimension_.Opts<Unit>,\n): StypDimension_<Unit> | StypZero<Unit> {\n  return val\n      ? new StypDimension<Unit>(val, unit, opts)\n      : opts.dim.zero.prioritize(opts.priority || StypPriority.Default);\n}\n\n/**\n * @internal\n */\nexport abstract class StypCalcBase<\n    Self extends StypCalcBase<Self, Op, Right, Unit>,\n    Op extends '+' | '-' | '*' | '/',\n    Right extends number | StypNumeric<Unit>,\n    Unit extends string>\n    extends StypNumericStruct<Self, Unit> {\n\n  // noinspection JSMethodCanBeStatic\n  get type(): 'calc' {\n    return 'calc';\n  }\n\n  readonly left: StypNumeric<Unit>;\n  readonly op: Op;\n  readonly right: Right;\n\n  // noinspection TypeScriptAbstractClassConstructorCanBeMadeProtected\n  constructor(\n      left: StypNumeric<Unit>,\n      op: Op,\n      right: Right,\n      opts: StypDimension_.Opts<Unit>,\n  ) {\n    super(opts);\n    this.left = left.usual();\n    this.op = op;\n    this.right = right;\n  }\n\n  is(other: StypValue): boolean {\n    if (this === other) {\n      return true;\n    }\n    if (typeof other === 'object' && other.type === this.type) {\n      return this.op === other.op\n          && this.left.is(other.left)\n          && stypValuesEqual(this.right, other.right)\n          && this.priority === other.priority;\n    }\n    return false;\n  }\n\n  add(addendum: StypNumeric<Unit>): StypNumeric<Unit>;\n\n  add(addendum: number, unit: Unit): StypNumeric<Unit>;\n\n  add(addendum: StypNumeric<Unit> | number, unit?: Unit): StypNumeric<Unit> {\n    if (typeof addendum === 'number') {\n      addendum = stypDimension(addendum, unit as Unit, this);\n    }\n    return stypAddSub(this as StypNumeric<Unit>, '+', addendum);\n  }\n\n  sub(subtrahend: StypNumeric<Unit>): StypNumeric<Unit>;\n\n  sub(subtrahend: number, unit: Unit): StypNumeric<Unit>;\n\n  sub(subtrahend: StypNumeric<Unit> | number, unit?: Unit): StypNumeric<Unit> {\n    if (typeof subtrahend === 'number') {\n      subtrahend = stypDimension(subtrahend, unit as Unit, this);\n    }\n    return stypAddSub(this as StypNumeric<Unit>, '-', subtrahend);\n  }\n\n  mul(multiplier: number): StypNumeric<Unit> {\n    return stypMul(this as StypNumeric<Unit>, multiplier);\n  }\n\n  div(divisor: number): StypNumeric<Unit> {\n    return stypDiv(this as StypNumeric<Unit>, divisor);\n  }\n\n  abstract negate(): StypNumeric<Unit>;\n\n  abstract prioritize(priority: number): Self;\n\n  abstract toFormula(): string;\n\n  toString(): string {\n    return 'calc' + super.toString();\n  }\n\n}\n\n/**\n * CSS `calc()` function call representation containing either addition or subtraction.\n *\n * @typeparam Unit  Allowed unit type.\n *\n * @internal\n */\nexport class StypAddSub<Unit extends string>\n    extends StypCalcBase<StypAddSub<Unit>, '+' | '-', StypNumeric<Unit>, Unit>\n    implements StypAddSub_<Unit> {\n\n  constructor(left: StypNumeric<Unit>, op: '+' | '-', right: StypNumeric<Unit>, opts: StypDimension_.Opts<Unit>) {\n    super(left, op, right.usual(), opts);\n  }\n\n  prioritize(priority: number): StypAddSub<Unit> {\n    return this.priority === priority\n        ? this\n        : new StypAddSub(this.left, this.op, this.right, { dim: this.dim, priority });\n  }\n\n  toDim<U extends string>(dim: StypDimension_.Kind<U>): StypAddSub<U> | undefined {\n\n    const left = this.left.toDim(dim);\n\n    if (!left) {\n      return;\n    }\n\n    const right = this.right.toDim(dim);\n\n    if (!right) {\n      return;\n    }\n\n    if (left === this.left as StypNumeric<any> && right === this.right as StypNumeric<any>) {\n      return this as StypAddSub<any>;\n    }\n\n    return new StypAddSub<U>(left, this.op, right, { dim, priority: this.priority });\n  }\n\n  negate(): StypNumeric<Unit> {\n    return this.op === '-'\n        ? new StypAddSub(this.right, this.op, this.left, this)\n        : new StypAddSub(this.left.negate(), '-', this.right, this);\n  }\n\n  /**\n   * Returns a textual representation of this value to be used within CSS `calc()` function.\n   *\n   * @returns `(<left> <op> <right>)`.\n   */\n  toFormula(): string {\n    return `(${this.left.toFormula()} ${this.op} ${this.right.toFormula()})`;\n  }\n\n}\n\nfunction stypAddSub<Unit extends string>(\n    left: StypNumeric<Unit>,\n    op: '+' | '-',\n    right: StypNumeric<Unit>,\n): StypNumeric<Unit> {\n  return !right.type ? left : new StypAddSub(left, op, right, left);\n}\n\n/**\n * CSS `calc()` function call representation containing either multiplication or division.\n *\n * @typeparam Unit  Allowed unit type.\n *\n * @internal\n */\nexport class StypMulDiv<Unit extends string>\n    extends StypCalcBase<StypMulDiv<Unit>, '*' | '/', number, Unit>\n    implements StypMulDiv_<Unit> {\n\n  prioritize(priority: number): StypMulDiv<Unit> {\n    return this.priority === priority\n        ? this\n        : new StypMulDiv(this.left, this.op, this.right, { dim: this.dim, priority });\n  }\n\n  toDim<U extends string>(dim: StypDimension_.Kind<U>): StypMulDiv<U> | undefined {\n\n    const left = this.left.toDim(dim);\n\n    if (!left) {\n      return;\n    }\n\n    if (left === this.left as StypNumeric<any>) {\n      return this as StypMulDiv<any>;\n    }\n\n    return new StypMulDiv<U>(left, this.op, this.right, { dim, priority: this.priority });\n  }\n\n  mul(multiplier: number): StypNumeric<Unit> {\n    return (this.op === '*'\n        ? stypMul(this.left, this.right * multiplier)\n        : stypDiv(this.left, this.right / multiplier))\n        .prioritize(this.priority);\n  }\n\n  div(divisor: number): StypNumeric<Unit> {\n    return (this.op === '/'\n        ? stypDiv(this.left, this.right * divisor)\n        : stypMul(this.left, this.right / divisor))\n        .prioritize(this.priority);\n  }\n\n  negate(): StypNumeric<Unit> {\n    return new StypMulDiv(this.left, this.op, -this.right, this);\n  }\n\n  /**\n   * Returns a textual representation of this value to be used within CSS `calc()` function.\n   *\n   * @returns `(<left> <op> <right>)`.\n   */\n  toFormula(): string {\n    return `(${this.left.toFormula()} ${this.op} ${this.right})`;\n  }\n\n}\n\nfunction stypMul<Unit extends string>(left: StypNumeric<Unit>, right: number): StypNumeric<Unit> {\n  return !right\n      ? left.dim.zero.prioritize(left.priority)\n      : right === 1\n          ? left.prioritize(left.priority)\n          : new StypMulDiv(left, '*', right, left);\n}\n\nfunction stypDiv<Unit extends string>(left: StypNumeric<Unit>, right: number): StypNumeric<Unit> {\n  return right === 1\n      ? left.prioritize(left.priority)\n      : new StypMulDiv(left, '/', right, left);\n}\n\n/**\n * @internal\n */\nexport function isStypNumeric(source: StypValue): source is StypNumeric<any, any> {\n  return typeof source === 'object' && (source.type === 'dimension' || source.type === 'calc' || source.type === 0);\n}\n","import { StypPriority } from '../priority';\nimport { StypValue } from '../value';\nimport { StypDimension, StypNumeric, StypNumericStruct } from './';\nimport { stypDimension } from './numeric.impl';\nimport { StypZero } from './zero';\n\nclass Zero<Unit extends string> extends StypNumericStruct<Zero<Unit>, Unit> implements StypZero<Unit> {\n\n  constructor(private readonly _byPriority: ZeroByPriority<Unit>, opts: StypDimension.Opts<Unit>) {\n    super(opts);\n  }\n\n  get type(): 0 {\n    return 0;\n  }\n\n  toDim<U extends string>(dim: StypDimension.Kind<U>): StypDimension<U> | StypZero<U> {\n    return dim.zero.prioritize(this.priority);\n  }\n\n  is(other: StypValue): boolean {\n    if (this === other) {\n      return true;\n    }\n    if (typeof other === 'object') {\n      return other.type === this.type && other.priority === this.priority;\n    }\n    if (other === 0 || other === '0') {\n      return this.priority === StypPriority.Usual;\n    }\n    if (other === '0 !important') {\n      return this.priority === StypPriority.Important;\n    }\n    return false;\n  }\n\n  add(addendum: StypNumeric<Unit>): StypNumeric<Unit>;\n\n  add(addendum: number, unit?: Unit): StypNumeric<Unit>;\n\n  add(addendum: StypNumeric<Unit> | number, unit?: Unit): StypNumeric<Unit> {\n    if (typeof addendum === 'number') {\n      addendum = stypDimension(addendum, unit as Unit, this);\n    }\n    return addendum.prioritize(this.priority);\n  }\n\n  sub(subtrahend: StypNumeric<Unit>): StypNumeric<Unit>;\n\n  sub(subtrahend: number, unit: Unit): StypNumeric<Unit>;\n\n  sub(subtrahend: StypNumeric<Unit> | number, unit?: Unit): StypNumeric<Unit> {\n    if (typeof subtrahend === 'number') {\n      subtrahend = stypDimension(subtrahend, unit as Unit, this);\n    }\n    return subtrahend.negate().prioritize(this.priority);\n  }\n\n  mul(): this {\n    return this;\n  }\n\n  div(): this {\n    return this;\n  }\n\n  negate(): this {\n    return this;\n  }\n\n  prioritize(priority: number): Zero<Unit> {\n    return this._byPriority.get(priority);\n  }\n\n  important(): Zero<Unit> {\n    return this._byPriority.important;\n  }\n\n  usual(): Zero<Unit> {\n    return this._byPriority.usual;\n  }\n\n  toFormula(): string {\n    return '0';\n  }\n\n}\n\nclass ZeroByPriority<Unit extends string> {\n\n  readonly usual: Zero<Unit>;\n  readonly important: Zero<Unit>;\n\n  constructor(readonly dim: StypDimension.Kind<Unit>) {\n    this.usual = new Zero(this, { dim });\n    this.important = new Zero(this, { dim, priority: StypPriority.Important });\n  }\n\n  get(priority: number): Zero<Unit> {\n    switch (priority) {\n    case StypPriority.Usual: return this.usual;\n    case StypPriority.Important: return this.important;\n    }\n    return new Zero(this, { dim: this.dim, priority });\n  }\n\n}\n\n/**\n * @internal\n */\nexport function newStypZero<Unit extends string>(dim: StypDimension.Kind.UnitlessZero<Unit>): StypZero<Unit> {\n  return new ZeroByPriority<Unit>(dim).usual;\n}\n","import { StypValue } from '../value';\nimport { StypDimension, StypNumeric } from './numeric';\nimport { isStypNumeric, StypDimension as StypDimension_ } from './numeric.impl';\nimport { StypZero } from './zero';\nimport { newStypZero } from './zero.impl';\n\n/**\n * @internal\n */\nexport function unitlessZeroDimensionKind<Unit extends string>(\n    {\n      pt,\n      noPt,\n    }: {\n      pt: () => StypDimension.Kind.UnitlessZero<Unit | '%'>;\n      noPt: () => StypDimension.Kind.UnitlessZero<Exclude<Unit, '%'>>;\n    },\n): StypDimension.Kind.UnitlessZero<Unit> {\n\n  const dimension: StypDimension.Kind.UnitlessZero<Unit> = {\n\n    get zero(): StypZero<Unit> {\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      return zero;\n    },\n\n    get pt() {\n      return pt();\n    },\n\n    get noPt() {\n      return noPt();\n    },\n\n    of(val: number, unit: Unit): StypDimension<Unit> | StypZero<Unit> {\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      return val ? new StypDimension_(val, unit, { dim: this }) : zero;\n    },\n\n    by(source: StypValue): StypNumeric<Unit> | undefined {\n      if (!isStypNumeric(source)) {\n        return;\n      }\n      return (source as StypNumeric<Unit>).toDim(this);\n    },\n\n  };\n\n  const zero = newStypZero<Unit>(dimension);\n\n  return dimension;\n}\n\n/**\n * @internal\n */\nexport function unitZeroDimensionKind<Unit extends string>(\n    {\n      zeroUnit,\n      withPercent,\n      noPercent,\n    }: {\n      zeroUnit: Unit;\n      withPercent?: () => StypDimension.Kind.UnitZero<Unit | '%'>;\n      noPercent?: () => StypDimension.Kind.UnitZero<Exclude<Unit, '%'>>;\n    },\n): StypDimension.Kind.UnitZero<Unit> {\n\n  const dim: StypDimension.Kind.UnitZero<Unit> = {\n\n    get pt() {\n      return withPercent && withPercent();\n    },\n\n    get noPt() {\n      return noPercent ? noPercent() : this as StypDimension.Kind.UnitZero<Exclude<Unit, '%'>>;\n    },\n\n    get zero(): StypDimension<Unit> {\n      return zero;// eslint-disable-line @typescript-eslint/no-use-before-define\n    },\n\n    of(val: number, unit: Unit): StypDimension<Unit> {\n      return new StypDimension_(val, unit, { dim: this });\n    },\n\n    by(source: StypValue): StypNumeric<Unit, StypDimension<Unit>> | undefined {\n      if (!isStypNumeric(source)) {\n        return;\n      }\n      return (source as StypNumeric<Unit>).toDim(this) as StypNumeric<Unit, StypDimension<Unit>>;\n    },\n\n  };\n\n  const zero = new StypDimension_(0, zeroUnit, { dim });\n\n  return dim;\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/style-producer\n */\nimport { StypDimension, StypNumeric } from '../numeric';\nimport { unitlessZeroDimensionKind } from '../numeric/dimension-kind.impl';\n\n/**\n * Structured [length](https://developer.mozilla.org/en-US/docs/Web/CSS/length) property value.\n *\n * Can be constructed using `StypLength.of()` function.\n *\n * @category CSS Value\n */\nexport type StypLength = StypNumeric<StypLength.Unit>;\n\nexport namespace StypLength {\n\n  /**\n   * Supported length units, excluding percent.\n   */\n  export type Unit = 'cap' | 'ch' | 'em' | 'ex' | 'ic' | 'lh' | 'rem' | 'rlh'\n      | 'vh' | 'vw' | 'vi' | 'vb' | 'vmin' | 'vmax'\n      | 'px' | 'cm' | 'mm' | 'Q' | 'in' | 'pc' | 'pt';\n\n}\n\nexport const StypLength: StypDimension.Kind.UnitlessZero<StypLength.Unit> = (/*#__PURE__*/ unitlessZeroDimensionKind({\n  pt() {\n    return StypLengthPt;// eslint-disable-line @typescript-eslint/no-use-before-define\n  },\n  noPt() {\n    return StypLength;\n  },\n}));\n\n/**\n * Structured [length-percentage](https://developer.mozilla.org/en-US/docs/Web/CSS/length-percentage) CSS property\n * value.\n *\n * Can be constructed using `StypLengthPt.of()` function.\n *\n * @category CSS Value\n */\nexport type StypLengthPt = StypNumeric<StypLengthPt.Unit>;\n\nexport namespace StypLengthPt {\n\n  /**\n   * Supported length units, including percent.\n   */\n  export type Unit = StypLength.Unit | '%';\n\n}\n\nexport const StypLengthPt: StypDimension.Kind.UnitlessZero<StypLengthPt.Unit> = (\n    /*#__PURE__*/ unitlessZeroDimensionKind({\n      pt() {\n        return StypLengthPt;\n      },\n      noPt() {\n        return StypLength;\n      },\n    })\n);\n","/**\n * @packageDocumentation\n * @module @proc7ts/style-producer\n */\nimport cssesc from 'cssesc';\nimport { stypSplitPriority } from './priority';\nimport { StypValue, StypValueStruct } from './value';\n\n/**\n * Structured [URL](https://developer.mozilla.org/en-US/docs/Web/CSS/url) CSS property value.\n *\n * @category CSS Value\n */\nexport class StypURL extends StypValueStruct<StypURL> {\n\n  /**\n   * Target URL.\n   */\n  readonly url: string;\n\n  /**\n   * `url` value type.\n   */\n  get type(): 'url' {\n    return 'url';\n  }\n\n  /**\n   * Maps the given CSS property value to URL. Defaults to `undefined` if mapping is not possible.\n   *\n   * This method allows to use a [[StypURL]] class as [CSS property mapping][[StypMapper.Mapping]].\n   *\n   * Strings are treated as URLs (without `url()` functional syntax). `!important` suffix is respected.\n   *\n   * @param source  A raw property value that should be converted.\n   *\n   * @returns Mapped property value or `undefined`.\n   */\n  static by(source: StypValue): StypURL | undefined {\n    switch (typeof source) {\n    case 'string': {\n\n      const [url, priority] = stypSplitPriority(source);\n\n      return new StypURL(url, { priority });\n    }\n    case 'object':\n      if (source.type === 'url') {\n        return source;\n      }\n      break;\n    default:\n    }\n    return;\n  }\n\n  /**\n   * Constructs URL value.\n   *\n   * @param url  Target URL.\n   * @param opts  Construction options.\n   */\n  constructor(url: string, opts?: StypValue.Opts) {\n    super(opts);\n    this.url = url;\n  }\n\n  by(source: StypValue): StypURL {\n    return StypURL.by(source) || this;\n  }\n\n  prioritize(priority: number): StypURL {\n    return priority === this.priority ? this : new StypURL(this.url, { priority });\n  }\n\n  is(other: StypValue): boolean {\n    return typeof other === 'object'\n        && other.type === 'url'\n        && other.url === this.url\n        && other.priority === this.priority;\n  }\n\n  toString(): string {\n    return `url('${cssesc(this.url)}')`;\n  }\n\n}\n","import { filterIt, itsIterator, itsReduction, overEntries } from '@proc7ts/a-iterable';\nimport { nextSkip, NextSkip } from '@proc7ts/call-thru';\nimport {\n  afterAll,\n  AfterEvent,\n  afterSupplied,\n  afterThe,\n  EventKeeper,\n  EventSender,\n  isEventKeeper,\n  isEventSender,\n} from '@proc7ts/fun-events';\nimport { asis, isPresent, valuesProvider } from '@proc7ts/primitives';\nimport { IMPORTANT_CSS_SUFFIX } from '../internal';\nimport { StypValue, stypValuesEqual } from '../value';\nimport { StypProperties } from './properties';\nimport { StypRule } from './rule';\n\n/**\n * @internal\n */\nexport const noStypProperties: AfterEvent<[StypProperties]> = (/*#__PURE__*/ afterThe({}));\n\n/**\n * @internal\n */\nexport function noStypPropertiesSpec(): AfterEvent<[StypProperties]> {\n  return noStypProperties;\n}\n\n/**\n * @internal\n */\nexport function stypPropertiesBySpec(rule: StypRule, spec?: StypProperties.Spec): AfterEvent<[StypProperties]> {\n  if (!spec) {\n    return noStypProperties;\n  }\n  if (typeof spec !== 'string') {\n    if (isEventKeeper(spec)) {\n      return preventDuplicates(spec);\n    }\n    if (isEventSender(spec)) {\n      return preventDuplicates(propertiesKeeper(spec));\n    }\n    if (typeof spec === 'function') {\n\n      const senderOrProperties = spec(rule);\n\n      if (typeof senderOrProperties !== 'string') {\n        if (isEventKeeper(senderOrProperties)) {\n          return preventDuplicates(senderOrProperties);\n        }\n        if (isEventSender(senderOrProperties)) {\n          return preventDuplicates(propertiesKeeper(senderOrProperties));\n        }\n      }\n\n      return afterThe(propertiesMap(senderOrProperties));\n    }\n  }\n\n  return afterThe(propertiesMap(spec));\n}\n\nfunction propertiesKeeper(sender: EventSender<[string | StypProperties]>): AfterEvent<[string | StypProperties]> {\n  return afterSupplied(sender, valuesProvider({}));\n}\n\nfunction preventDuplicates(properties: EventKeeper<[string | StypProperties]>): AfterEvent<[StypProperties]> {\n  return afterSupplied(properties).keepThru(\n      propertiesMap,\n      passNonDuplicate(),\n      asis,\n  );\n}\n\nfunction passNonDuplicate(): (update: StypProperties) => StypProperties | NextSkip {\n\n  let stored: StypProperties | undefined;\n\n  return update => {\n    if (stored && propertiesEqual(update, stored)) {\n      return nextSkip();\n    }\n    return stored = { ...update };\n  };\n}\n\nfunction propertiesMap(properties: string | StypProperties): StypProperties {\n  return typeof properties === 'string' ? { $$css: properties } : properties;\n}\n\nfunction propertiesEqual(first: StypProperties, second: StypProperties): boolean {\n\n  const s = itsIterator(propertyEntries(second));\n\n  for (const [key, value] of propertyEntries(first)) {\n\n    const { value: sentry } = s.next() as IteratorResult<[keyof StypProperties, StypValue], undefined>;\n\n    if (!sentry || key !== sentry[0] || !stypValuesEqual(value, sentry[1])) {\n      return false;\n    }\n  }\n\n  return !s.next().value;\n}\n\nfunction propertyEntries(properties: StypProperties): Iterable<[keyof StypProperties, StypValue]> {\n  return filterIt(overEntries(properties), isPresent);\n}\n\n/**\n * @internal\n */\nexport function mergeStypProperties(\n    base: AfterEvent<[StypProperties]>,\n    addendum: AfterEvent<[StypProperties]>,\n): AfterEvent<[StypProperties]> {\n  return preventDuplicates(\n      afterAll({ base, addendum }).keepThru(\n          ({ base: [baseProperties], addendum: [addendumProperties] }) => addValues(baseProperties, addendumProperties),\n      ),\n  );\n}\n\nfunction addValues(base: StypProperties, addendum: StypProperties): StypProperties {\n  return itsReduction(\n      overEntries(addendum),\n      (result, [k, v]) => addValue(result, k, v),\n      { ...base },\n  );\n}\n\nfunction addValue(\n    properties: StypProperties.Mutable,\n    key: keyof StypProperties,\n    value: StypValue,\n): StypProperties.Mutable {\n  if (priorityOf(properties[key]) <= priorityOf(value)) {\n    delete properties[key];\n    properties[key] = value;\n  }\n  return properties;\n}\n\nfunction priorityOf(value: StypValue): number {\n  switch (typeof value) {\n  case 'string':\n    return value.endsWith(IMPORTANT_CSS_SUFFIX) ? 1 : 0;\n  case 'object':\n    return value.priority;\n  default:\n    return 0;\n  }\n}\n","import { flatMapIt } from '@proc7ts/a-iterable';\nimport { compareNames, isQualifiedName, QualifiedName } from '@proc7ts/namespace-aliaser';\nimport { isNotEmptyArray, isReadonlyArray } from '../internal';\nimport { StypPureSelector } from './pure-selector';\nimport { StypRuleKey } from './rule-key';\nimport { StypSelector } from './selector';\nimport { StypSubSelector } from './sub-selector';\n\n/**\n * @internal\n */\nexport function isCombinator(\n    item: string | StypSelector.Part | StypSelector.Combinator,\n): item is StypSelector.Combinator {\n  return item === '>' || item === '+' || item === '~';\n}\n\n/**\n * @internal\n */\nexport function normalizeStypSelector(selector: StypPureSelector.NormalizedPart): [StypPureSelector.NormalizedPart];\n\n/**\n * @internal\n */\nexport function normalizeStypSelector(selector: StypSelector.NormalizedPart): [StypSelector.NormalizedPart];\n\n/**\n * @internal\n */\nexport function normalizeStypSelector(selector: StypPureSelector): StypPureSelector.Normalized;\n\n/**\n * @internal\n */\nexport function normalizeStypSelector(selector: StypSelector): StypSelector.Normalized;\n\nexport function normalizeStypSelector(selector: StypSelector): StypSelector.Normalized {\n  if (!isReadonlyArray(selector)) {\n    return [normalizeKey(selector)];\n  }\n\n  const normalized: StypSelector.Mutable = [];\n  let combinator: StypSelector.Combinator | undefined;\n\n  for (const item of selector) {\n\n    const prevCombinator = combinator;\n\n    if (combinator) {\n      normalized.push(combinator);\n      combinator = undefined;\n    }\n\n    let part: StypSelector.NormalizedPart;\n\n    if (isCombinator(item)) {\n      combinator = item;\n      if (!prevCombinator) {\n        continue;\n      }\n      part = {};\n    } else {\n      part = normalizeKey(item);\n    }\n\n    normalized.push(part);\n  }\n  if (combinator) {\n    normalized.push(combinator, {});\n  }\n\n  return normalized;\n}\n\nfunction normalizeKey(key: StypSelector.Part | string): StypSelector.NormalizedPart {\n  if (typeof key === 'string') {\n    if (!key) {\n      return {};\n    }\n    return { s: key };\n  }\n  return normalizeStypSelectorPart(key);\n}\n\n/**\n * @internal\n */\nexport function normalizeStypSelectorPart(part: StypSelector.Part): StypSelector.NormalizedPart {\n\n  const ns = part.ns || undefined;\n  const i = part.i || undefined;\n  const c = normalizeClasses(part.c);\n  const u = normalizeSubSelectors(part.u);\n\n  return {\n    ns,\n    e: (part.e !== '*' || !ns && !i && !c && u && isPseudoSubSelector(u[0])) && part.e || undefined,\n    i,\n    c,\n    u,\n    s: part.s || undefined,\n    $: normalizeQualifiers(part.$),\n  };\n}\n\nfunction normalizeClasses(\n    classes: QualifiedName | readonly QualifiedName[] | undefined,\n): readonly [QualifiedName, ...QualifiedName[]] | undefined {\n  if (!classes) {\n    return;\n  }\n  if (isQualifiedName(classes)) {\n    return [classes];\n  }\n\n  const result = classes.filter(c => !!c);\n\n  return isNotEmptyArray(result) ? result.sort(compareNames) : undefined;\n}\n\nfunction normalizeSubSelectors(\n    subs: StypSubSelector | readonly StypSubSelector[] | undefined,\n): readonly [StypSubSelector.Normalized, ...StypSubSelector.Normalized[]] | undefined {\n  if (!subs) {\n    return;\n  }\n  if (/*#__INLINE__*/ isSubSelectorsArray(subs)) {\n\n    const result = subs.map(normalizeSubSelector);\n\n    return isNotEmptyArray(result) ? result : undefined;\n  }\n\n  return [normalizeSubSelector(subs)];\n}\n\nfunction isSubSelectorsArray(\n    subs: StypSubSelector | readonly StypSubSelector[],\n): subs is readonly StypSubSelector[] {\n  return typeof subs[0] !== 'string';\n}\n\nfunction normalizeSubSelector(sub: StypSubSelector): StypSubSelector.Normalized {\n  if (!isPseudoSubSelector(sub)) {\n    return sub;\n  }\n  if (sub.length < 3) {\n    return sub as StypSubSelector.Normalized;\n  }\n\n  const [prefix, name, ...params] = sub;\n\n  if (/*#__INLINE__*/ isSubSelectorParametersArray(params)) {\n    return [prefix, name, ...params.map(normalizeStypSelector)];\n  }\n\n  return [prefix, name, normalizeStypSelector(params)];\n}\n\n/**\n * @internal\n */\nexport function isPseudoSubSelector(sub: StypSubSelector.Normalized): sub is StypSubSelector.NormalizedPseudo;\n\n/**\n * @internal\n */\nexport function isPseudoSubSelector(sub: StypSubSelector): sub is StypSubSelector.Pseudo;\n\nexport function isPseudoSubSelector(sub: StypSubSelector): sub is StypSubSelector.Pseudo {\n  return sub.length > 1 && (sub[0] === ':' || sub[0] === '::');\n}\n\nfunction isSubSelectorParametersArray(\n    param: StypSubSelector.Parameter | readonly StypSubSelector.Parameter[],\n): param is readonly StypSubSelector.Parameter[] {\n  return isReadonlyArray(param[0]);\n}\n\nfunction normalizeQualifiers(\n    qualifiers: string | readonly string[] | undefined,\n): readonly [string, ...string[]] | undefined {\n  if (!qualifiers) {\n    return;\n  }\n\n  if (!isReadonlyArray(qualifiers)) {\n    qualifiers = Array.from(exposeQualifier(qualifiers));\n  } else {\n    qualifiers = Array.from(new Set(flatMapIt(qualifiers, exposeQualifier))).sort();\n  }\n\n  return isNotEmptyArray(qualifiers) ? qualifiers : undefined;\n}\n\nconst noQualifiers: Set<string> = new Set();\n\nfunction exposeQualifier(qualifier: string): Set<string> {\n  if (!qualifier) {\n    return noQualifiers;\n  }\n\n  const eqIdx = qualifier.indexOf('=');\n  const name = eqIdx < 0 ? qualifier : qualifier.substring(0, eqIdx);\n  const exposed = new Set<string>();\n  let lastExposed: string | undefined;\n\n  for (const part of name.split(':')) {\n    if (lastExposed) {\n      lastExposed += ':' + part;\n    } else {\n      lastExposed = part;\n    }\n    exposed.add(lastExposed);\n  }\n  if (eqIdx >= 0) {\n    exposed.add(qualifier);\n  }\n\n  return exposed;\n}\n\nconst noKeyAndTail: [[]] = [[]];\n\n/**\n * @internal\n */\nexport function stypRuleKeyAndTail(\n    selector: StypSelector.Normalized,\n): readonly [[]] | readonly [StypRuleKey.Nested, StypSelector.Normalized?] {\n  if (!selector.length) {\n    return noKeyAndTail;\n  }\n\n  let i = 0;\n  let combinator: StypSelector.Combinator | undefined;\n\n  for (;;) {\n\n    const part = selector[i++];\n\n    if (isCombinator(part)) {\n      combinator = part;\n      continue;\n    }\n\n    const key: StypRuleKey = combinator ? [combinator, part] : [part];\n\n    return [key, selector.slice(i)];\n  }\n}\n\nconst rootSelector: StypSelector.Normalized = [];\n\n/**\n * @internal\n */\nexport function stypOuterSelector(\n    selector: StypSelector.Normalized,\n): StypSelector.Normalized | undefined {\n\n  let i = selector.length - 1;\n\n  if (i <= 0) {\n    return i ? undefined : rootSelector;\n  }\n\n  do {\n    --i;\n    switch (selector[i]) {\n    case '>':\n      return selector.slice(0, i);\n    case '+':\n    case '~':\n      --i;\n      continue;\n    default:\n      return selector.slice(0, i + 1);\n    }\n  } while (i > 0);\n\n  return;\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/style-producer\n */\nimport { namesEqual, NamespaceDef, QualifiedName } from '@proc7ts/namespace-aliaser';\nimport { StypPureSelector } from './pure-selector';\nimport { StypSelector } from './selector';\nimport { normalizeStypSelectorPart } from './selector.impl';\n\n/**\n * CSS rule query.\n *\n * It may represent a selector like `element-name#id.class1.classN` with any of sub-parts omitted.\n *\n * Queries are used to grab a subset of matching rules from `StypRule`.\n *\n * All of its properties are optional.\n *\n * @category CSS Rule\n */\nexport interface StypQuery {\n\n  /**\n   * Element namespace.\n   */\n  readonly ns?: string | NamespaceDef;\n\n  /**\n   * Element name.\n   *\n   * This is the same as `*` when absent.\n   */\n  readonly e?: QualifiedName;\n\n  /**\n   * Element identifier.\n   */\n  readonly i?: QualifiedName;\n\n  /**\n   * Element class name or names.\n   */\n  readonly c?: QualifiedName | readonly QualifiedName[];\n\n  /**\n   * Qualifier or qualifiers.\n   */\n  readonly $?: string | readonly string[];\n\n}\n\nexport namespace StypQuery {\n\n  /**\n   * Normalized CSS rule query.\n   */\n  export type Normalized = StypQuery & StypSelector.NormalizedPart;\n\n}\n\n/**\n * Normalizes arbitrary CSS rule query.\n *\n * @category CSS Rule\n * @param query  CSS rule query to normalize.\n *\n * @returns Normalized CSS rule query.\n */\nexport function stypQuery(query: StypQuery): StypQuery.Normalized {\n  return normalizeStypSelectorPart(query);\n}\n\n/**\n * Checks whether the given structured CSS `selector` matches target `query`.\n *\n * @category CSS Rule\n * @param selector  Normalized structured CSS selector.\n * @param query  Normalized CSS rule query.\n *\n * @returns `true` if `selector` matches the `query`, or `false` otherwise.\n */\nexport function stypSelectorMatches(\n    selector: StypSelector.Normalized | StypPureSelector.Normalized,\n    query: StypQuery.Normalized,\n): boolean {\n  if (!selector.length) {\n    return false;\n  }\n\n  const part = selector[selector.length - 1] as StypSelector.NormalizedPart;\n\n  if (query.ns && part.ns !== query.ns) {\n    return false;\n  }\n  if (query.e && part.e !== query.e) {\n    return false;\n  }\n  if (query.i && part.i !== query.i) {\n    return false;\n  }\n  if (query.c && !classesMatch(part.c, query.c)) {\n    return false;\n  }\n  // noinspection RedundantIfStatementJS\n  if (query.$ && !classesMatch(part.$, query.$)) {\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * @internal\n */\nfunction classesMatch(\n    classes: readonly QualifiedName[] | undefined,\n    query: readonly QualifiedName[],\n): boolean | undefined {\n  return classes && query.every(qClass => classes.find(mClass => namesEqual(qClass, mClass)));\n}\n","import { StypSelector } from './index';\nimport { StypPureSelector } from './pure-selector';\nimport { normalizeStypSelector } from './selector.impl';\n\n/**\n * Converts normalized pure CSS selector part to normalized pure CSS selector.\n *\n * @category CSS Rule\n * @param selector  Normalized pure CSS selector part.\n *\n * @returns Normalized pure CSS selector. An array containing `selector` as its only item.\n */\nexport function stypSelector(selector: StypPureSelector.NormalizedPart): [StypPureSelector.NormalizedPart];\n\n/**\n * Converts normalized structured CSS selector part to normalized structured CSS selector.\n *\n * @category CSS Rule\n * @param selector  Normalized CSS selector part.\n *\n * @returns Normalized structured CSS selector. An array containing `selector` as its only item.\n */\nexport function stypSelector(selector: StypSelector.NormalizedPart): [StypSelector.NormalizedPart];\n\n/**\n * Normalizes arbitrary pure CSS selector.\n *\n * @param selector  CSS selector to normalize.\n *\n * @returns Normalized pure CSS selector.\n */\nexport function stypSelector(selector: StypPureSelector): StypPureSelector.Normalized;\n\n/**\n * Normalizes arbitrary structured CSS selector.\n *\n * @param selector  CSS selector to normalize.\n *\n * @returns Normalized structured CSS selector.\n */\nexport function stypSelector(selector: StypSelector): StypSelector.Normalized;\n\nexport function stypSelector(selector: StypSelector): StypSelector.Normalized {\n  return normalizeStypSelector(selector);\n}\n","import {\n  css__naming,\n  html__naming,\n  id__naming,\n  NamespaceAliaser,\n  NamespaceDef,\n  newNamespaceAliaser,\n} from '@proc7ts/namespace-aliaser';\nimport cssesc from 'cssesc';\nimport { cssescId } from '../internal';\nimport { StypRuleKey } from './rule-key';\nimport { StypSelector } from './selector';\nimport { StypSelectorFormat } from './selector-text';\nimport { isCombinator, isPseudoSubSelector } from './selector.impl';\nimport { StypSubSelector } from './sub-selector';\n\nconst ruleKeyTextOpts: StypSelectorFormat = {\n  qualify(qualifier: string) {\n    return `@${cssescId(qualifier)}`;\n  },\n};\n\n/**\n * @internal\n */\nexport function stypRuleKeyText(key: StypRuleKey): string {\n  return formatStypSelector(key, ruleKeyTextOpts);\n}\n\nconst displayTextOpts: StypSelectorFormat = {\n  qualify(qualifier: string) {\n    return `@${qualifier}`;\n  },\n};\n\n/**\n * @internal\n */\nexport function stypSelectorDisplayText(selector: StypSelector.Normalized): string {\n  return formatStypSelector(selector, displayTextOpts);\n}\n\nconst defaultFormat: StypSelectorFormat = {};\n\n/**\n * @internal\n */\nexport function formatStypSelector(\n    selector: StypSelector.Normalized,\n    {\n      qualify,\n      nsAlias = newNamespaceAliaser(),\n    }: StypSelectorFormat = defaultFormat,\n): string {\n\n  const format: ItemFormat = { qualify, nsAlias };\n\n  return selector.reduce(\n      (result, item) => {\n        if (isCombinator(item)) {\n          return result + item;\n        }\n        if (result && !isCombinator(result[result.length - 1])) {\n          result += ' ';\n        }\n        return result + formatItem(item, format);\n      },\n      '',\n  );\n}\n\ninterface ItemFormat extends StypSelectorFormat {\n  nsAlias: NamespaceAliaser;\n}\n\nfunction formatItem(\n    item: StypSelector.NormalizedPart,\n    {\n      qualify,\n      nsAlias,\n    }: ItemFormat,\n): string {\n\n  const { ns, e, i, c, s, u, $ } = item;\n  let hasProperties = false;\n  let out = '';\n\n  if (i) {\n    hasProperties = true;\n    out += `#${cssescId(id__naming.name(i, nsAlias))}`;\n  }\n  if (c) {\n    hasProperties = true;\n    out = c.reduce<string>(\n        (result, className) => `${result}.${cssescId(css__naming.name(className, nsAlias))}`,\n        out,\n    );\n  }\n  if (u) {\n    hasProperties = true;\n\n    const subFormat: ItemFormat = { nsAlias };\n\n    out = u.reduce(\n        (result, sub) => formatSubSelector(result, sub, subFormat),\n        out,\n    );\n  }\n  if (s) {\n    hasProperties = true;\n    out += s;\n  }\n  if (qualify && $) {\n    out = $.reduce((result, qualifier) => result + qualify(qualifier), out);\n  }\n  if (ns) {\n\n    const alias = xmlNs(ns, nsAlias);\n\n    if (alias) {\n      out = `${alias}|${e || '*'}${out}`;\n    } else {\n      out = qualifyElement();\n    }\n  } else {\n    out = qualifyElement();\n  }\n\n  return out;\n\n  function qualifyElement(): string {\n    if (hasProperties) {\n      return `${e ? html__naming.name(e, nsAlias) : ''}${out}`;\n    }\n    return `${e ? html__naming.name(e, nsAlias) : '*'}${out}`;\n  }\n}\n\nfunction formatSubSelector(\n    out: string,\n    sub: StypSubSelector.Normalized,\n    format: ItemFormat,\n): string {\n  if (isPseudoSubSelector(sub)) {\n    out += sub[0] + sub[1];\n\n    const len = sub.length;\n\n    if (len > 2) {\n      out += '(' + formatStypSelector(sub[2], format);\n      for (let i = 3; i < sub.length; ++i) {\n        out += ',' + formatStypSelector(sub[i] as StypSubSelector.NormalizedParameter, format);\n      }\n      out += ')';\n    }\n\n    return out;\n  }\n\n  const [attrName, attrOp, attrVal, attrFlag] = sub;\n\n  out += '[' + cssescId(attrName);\n  if (attrOp) {\n    out += attrOp + cssesc(attrVal!, { quotes: 'double', wrap: true });\n  }\n  if (attrFlag) {\n    out += ' ' + attrFlag;\n  }\n\n  return out + ']';\n}\n\nfunction xmlNs(ns: string | NamespaceDef, nsAlias: NamespaceAliaser): string | undefined {\n  return typeof ns === 'string' ? ns : ns.url ? nsAlias(ns) : undefined;\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/style-producer\n */\nimport { filterIt, itsReduction, ObjectEntry, overEntries } from '@proc7ts/a-iterable';\nimport { AfterEvent } from '@proc7ts/fun-events';\nimport { isNotEmptyArray } from '../../internal';\nimport { StypProperties, StypRule } from '../../rule';\nimport { mergeStypProperties } from '../../rule/properties.impl';\nimport { StypSelector, stypSelector } from '../../selector';\nimport { isCombinator } from '../../selector/selector.impl';\nimport { stypSplitPriority, StypValue } from '../../value';\nimport { StypRenderer } from '../renderer';\nimport { StyleProducer } from '../style-producer';\nimport { FIRST_RENDER_ORDER } from './renderer.impl';\n\n/**\n * @internal\n */\nclass AtRulesRenderer implements StypRenderer.Spec {\n\n  constructor(private readonly _rule: StypRule) {\n  }\n\n  read(properties: AfterEvent<[StypProperties]>): AfterEvent<[StypProperties]> {\n\n    let outer = this._rule.outer;\n\n    while (outer) {\n      properties = mergeStypProperties(outer.read().keepThru(onlyAtProperties), properties);\n      outer = outer.outer;\n    }\n\n    return properties;\n  }\n\n  render(producer: StyleProducer, properties: StypProperties): void {\n\n    const { selector } = producer;\n    let { writer } = producer;\n\n    if (!writer.isGroup) {\n      producer.render(properties);\n      return;\n    }\n\n    let sheet = writer;\n    const extracted = extractAtSelectors(selector);\n\n    if (!extracted) {\n      producer.render(properties);\n      return;\n    }\n\n    const [atSelectors, restSelector] = extracted;\n\n    for (const atSelector of atSelectors) {\n\n      const [name, params] = buildAtSelector(properties, atSelector);\n\n      if (params) {\n        writer = sheet = sheet.addGroup(name, params);\n      } else {\n        writer = sheet.addStyle(name);\n        break;\n      }\n    }\n\n    producer.render(properties, { writer, selector: restSelector });\n  }\n\n}\n\n/**\n * @internal\n */\nfunction buildAtSelector(\n    properties: StypProperties,\n    [key, [names, customQuery]]: [string, [Set<string>, string?]],\n): [string, string?] {\n\n  let query = '';\n  const addQuery = (q?: StypValue): void => {\n    if (q) {\n      if (query) {\n        query += ' and ';\n      }\n      query += q;\n    }\n  };\n\n  for (const name of names) {\n\n    const [namedQuery] = stypSplitPriority(properties[name]);\n\n    addQuery(namedQuery);\n  }\n\n  addQuery(customQuery);\n\n  return query ? [key, query] : [key];\n}\n\n/**\n * CSS stylesheet renderer of at-rules like `@media` queries.\n *\n * At-rules are represented by qualifiers which names start with `@` symbol. Qualifier names are used as at-rules keys,\n * and their values - as queries. If the rest of the selector is not empty, then properties are rendered in CSS\n * rule nested inside at-rule. Otherwise the properties are rendered in at-rule.\n *\n * So, for example CSS rule with `{ c: 'screen-only', $: '@media=screen' }` selector would be rendered as\n * ```css\n * @media screen {\n *   .screen-only {\n *      \\/* CSS properties *\\/\n *   }\n * }\n * ```\n *\n * Another option is to use named at-rules qualifiers. When named qualifier is used, the corresponding property is\n * searched in CSS rule and all of its outer rules. The values of all matching properties are used as queries.\n *\n * So the above example could be written as: `{ c: 'screen-only', $: '@media:screen' }` if CSS rule (or its outer\n * one) contains property `@media:screen` with value `screen`.\n *\n * Enabled by default in [[produceStyle]] function.\n *\n * @category Rendering\n */\nexport const stypRenderAtRules: StypRenderer = {\n\n  order: FIRST_RENDER_ORDER,\n\n  create(rule) {\n    return new AtRulesRenderer(rule);\n  },\n\n};\n\n/**\n * @internal\n */\nfunction onlyAtProperties(properties: StypProperties): StypProperties {\n  return itsReduction(\n      filterIt<ObjectEntry<StypProperties>, ObjectEntry<StypProperties, string>>(\n          overEntries(properties),\n          isAtEntry,\n      ),\n      (result: StypProperties.Mutable, [key, value]: ObjectEntry<StypProperties, string>) => {\n        result[key] = value;\n        return result;\n      },\n      {},\n  );\n}\n\n/**\n * @internal\n */\nfunction isAtEntry(entry: ObjectEntry<StypProperties>): entry is ObjectEntry<StypProperties, string> {\n  return String(entry[0])[0] === '@';\n}\n\n/**\n * @internal\n */\nfunction extractAtSelectors(\n    selector: StypSelector.Normalized,\n): [Map<string, [Set<string>, string?]>, StypSelector.Normalized] | undefined {\n\n  const atSelectors = new Map<string, [Set<string>, string?]>();\n  const rest: StypSelector.Mutable = [];\n\n  for (const part of selector) {\n    if (isCombinator(part)) {\n      rest.push(part);\n    } else {\n      rest.push(extractPartAtSelectors(part, atSelectors));\n    }\n  }\n\n  if (!atSelectors.size) {\n    return; // No at-rule qualifiers found.\n  }\n\n  return [atSelectors, stypSelector(rest)];\n}\n\n/**\n * @internal\n */\nfunction extractPartAtSelectors(\n    part: StypSelector.NormalizedPart,\n    atSelectors: Map<string, [Set<string>, string?]>,\n): StypSelector.NormalizedPart {\n\n  const qualifiers = part.$;\n\n  if (!qualifiers) {\n    return part;\n  }\n\n  const restQualifies: string[] = [];\n\n  for (const qualifier of qualifiers) {\n    if (qualifier[0] === '@') {\n      addAtSelector(atSelectors, qualifier);\n    } else {\n      restQualifies.push(qualifier);\n    }\n  }\n\n  if (restQualifies.length === qualifiers.length) {\n    return part; // No at-rule qualifiers found\n  }\n  if (isNotEmptyArray(restQualifies)) {\n    return { ...part, $: restQualifies };\n  }\n\n  return { ...part, $: undefined };\n}\n\n/**\n * @internal\n */\nfunction addAtSelector(atSelectors: Map<string, [Set<string>, string?]>, qualifier: string): void {\n\n  const eqIdx = qualifier.indexOf('=');\n  let name: string;\n  let query: string | undefined;\n\n  if (eqIdx < 0) {\n    name = qualifier;\n  } else {\n    name = qualifier.substring(0, eqIdx);\n    query = qualifier.substring(eqIdx + 1);\n  }\n\n  const colonIdx = name.indexOf(':');\n  const key = colonIdx < 0 ? name : name.substring(0, colonIdx);\n  const atSelector = atSelectors.get(key);\n\n  if (!atSelector) {\n    atSelectors.set(key, [new Set<string>().add(name), query]);\n  } else {\n\n    const [names, prevQuery] = atSelector;\n\n    names.add(name);\n    if (query) {\n      atSelector[1] = prevQuery ? `${prevQuery} and ${query}` : query;\n    }\n  }\n}\n","/**\n * @internal\n */\nexport const FIRST_RENDER_ORDER = -0xffff;\n","/**\n * @packageDocumentation\n * @module @proc7ts/style-producer\n */\nimport { overEntries } from '@proc7ts/a-iterable';\nimport { StypProperties } from '../../rule';\nimport { stypSplitPriority, StypURL, StypValue } from '../../value';\nimport { StypRenderer } from '../renderer';\nimport { StyleProducer } from '../style-producer';\nimport { StypWriter } from '../writer';\nimport { stypRenderAtRules } from './at-rules.renderer';\nimport { FIRST_RENDER_ORDER } from './renderer.impl';\n\n/**\n * CSS stylesheet renderer of global at-rules.\n *\n * It renders at-rules that should stay at the top level:\n * - `@namespace`\n * - `@import`\n *\n * At-rule parameters are taken from root CSS rule properties and treated as following.\n *\n * **`@import:url`** property value is treated as media query and appended after stylesheet URL. I.e.\n * ```json\n * {\n *     \"@import:path/to/included.css\": \"screen\"\n * }\n * ```\n * becomes\n * ```css\n * @import url(path/to/included.css) screen;\n * ```\n *\n * **`@namespace`** property value is treated as default namespace URL. I.e.\n * ```json\n * {\n *     \"@namespace\": \"http://www.w3.org/1999/xhtml\"\n * }\n * ```\n * becomes\n * ```css\n * @namespace url(http://www.w3.org/1999/xhtml);\n * ```\n *\n * **`@namespace:prefix`** property value is treated as namespace URL with the given prefix. I.e\n * ```json\n * {\n *     \"@namespace:svg\": \"http://www.w3.org/2000/svg\"\n * }\n * ```\n * becomes\n * ```css\n * @namespace svg url(http://www.w3.org/2000/svg);\n * ```\n *\n * Enabled by default in [[produceStyle]] function.\n *\n * @category Rendering\n */\nexport const stypRenderGlobals: StypRenderer = {\n\n  order: FIRST_RENDER_ORDER + 1,\n\n  needs: stypRenderAtRules,\n\n  render(producer: StyleProducer, properties: StypProperties) {\n\n    const rootRule = !producer.rule.selector.length;\n\n    const { sheet } = producer;\n    let importIndex = 0;\n    let nsIndex = 0;\n\n    for (const [k, v] of overEntries(properties)) {\n\n      const key = String(k);\n\n      if (key[0] === '@') {\n\n        const [value] = stypSplitPriority(v);\n        const importDelta = rootRule ? renderImport(sheet, importIndex, key, value) : 0;\n\n        importIndex += importDelta;\n        nsIndex += importDelta;\n\n        const url = StypURL.by(value);\n\n        if (url) {\n          nsIndex += renderDefaultNamespace(sheet, nsIndex, key, url);\n          nsIndex += renderNamespacePrefix(sheet, nsIndex, key, url);\n        }\n      }\n    }\n\n    producer.render(properties);\n  },\n\n};\n\n/**\n * @internal\n */\nconst IMPORT_PREFIX = '@import:';\n\n/**\n * @internal\n */\nfunction renderImport(\n    sheet: StypWriter.Sheet,\n    index: number,\n    key: string,\n    value: StypValue,\n): number {\n  if (!key.startsWith(IMPORT_PREFIX)) {\n    return 0;\n  }\n\n  const url = new StypURL(key.substring(IMPORT_PREFIX.length));\n  let css = String(url);\n\n  if (value) {\n    css += ` ${value}`;\n  }\n\n  sheet.addGlobal('@import', css, index);\n\n  return 1;\n}\n\n/**\n * @internal\n */\nfunction renderDefaultNamespace(\n    sheet: StypWriter.Sheet,\n    index: number,\n    key: string,\n    url: StypURL,\n): number {\n  if (key !== '@namespace') {\n    return 0;\n  }\n\n  sheet.addGlobal('@namespace', String(url), index);\n\n  return 1;\n}\n\n/**\n * @internal\n */\nconst NS_PREFIX = '@namespace:';\n\n/**\n * @internal\n */\nfunction renderNamespacePrefix(\n    sheet: StypWriter.Sheet,\n    index: number,\n    key: string,\n    url: StypURL,\n): number {\n  if (!key.startsWith(NS_PREFIX)) {\n    return 0;\n  }\n\n  const prefix = key.substring(NS_PREFIX.length);\n\n  sheet.addGlobal('@namespace', `${prefix} ${url}`, index);\n\n  return 1;\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/style-producer\n */\nimport { filterIt, itsEach, ObjectEntry, overEntries } from '@proc7ts/a-iterable';\nimport hyphenateStyleName from 'hyphenate-style-name';\nimport { StypProperties } from '../../rule';\nimport { stypSplitPriority } from '../../value';\nimport { StyleProducer } from '../style-producer';\n\n/**\n * Renders CSS properties.\n *\n * This renderer is always present, so there is typically no need to use it explicitly.\n *\n * @category Rendering\n */\nexport function stypRenderProperties(producer: StyleProducer, properties: StypProperties): void {\n\n  const style = producer.addStyle();\n\n  itsEach(\n      filterIt<ObjectEntry<StypProperties>, ObjectEntry<StypProperties, string>>(\n          overEntries(properties),\n          notCustomProperty,\n      ),\n      ([k, v]) => {\n\n        const [value, priority] = stypSplitPriority(v);\n\n        style.set(hyphenateStyleName(k), `${value}`, priority);\n      },\n  );\n\n  producer.render(properties, { writer: style });\n}\n\n/**\n * @internal\n */\nfunction notCustomProperty(\n    entry: ObjectEntry<StypProperties>,\n): entry is ObjectEntry<Required<StypProperties>, string> {\n\n  const [key, value] = entry;\n\n  if (value == null) {\n    return false;\n  }\n\n  const first = String(key)[0];\n\n  return first >= 'a' && first <= 'z' || first >= 'A' && first <= 'Z';\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/style-producer\n */\nimport { StypProperties } from '../../rule';\nimport { StyleProducer } from '../style-producer';\n\n/**\n * Renders raw CSS text. I.e. the contents of [[StypProperties.Generic.$$css]] property.\n *\n * It should be rendered before CSS properties normally to add the rendered rule as a first one.\n *\n * Enabled by default in [[produceStyle]] function.\n *\n * @category Rendering\n */\nexport function stypRenderText(producer: StyleProducer, properties: StypProperties): void {\n\n  const css = properties.$$css;\n\n  if (!css) {\n    producer.render(properties);\n  } else {\n\n    const style = producer.addStyle();\n\n    style.replace(css);\n    producer.render(properties, { writer: style });\n  }\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/style-producer\n */\nimport { filterIt, itsEmpty, itsReduction, mapIt, overArray } from '@proc7ts/a-iterable';\nimport { NamespaceDef } from '@proc7ts/namespace-aliaser';\nimport { isPresent } from '@proc7ts/primitives';\nimport { StypProperties } from '../../rule';\nimport { StypSelector } from '../../selector';\nimport { isCombinator } from '../../selector/selector.impl';\nimport { StypURL } from '../../value';\nimport { StypRenderer } from '../renderer';\nimport { StyleProducer } from '../style-producer';\nimport { stypRenderGlobals } from './globals.renderer';\nimport { FIRST_RENDER_ORDER } from './renderer.impl';\n\n/**\n * CSS stylesheet renderer of global XML namespace definitions.\n *\n * Renders `@namespace` declarations for CSS selectors containing namespace definitions.\n *\n * Enabled by default in [[produceStyle]] function.\n *\n * @category Rendering\n */\nexport const stypRenderXmlNs: StypRenderer = {\n\n  order: FIRST_RENDER_ORDER,\n\n  needs: stypRenderGlobals,\n\n  render(producer: StyleProducer, properties: StypProperties) {\n\n    const xmlNsDefs = extractXmlNsDefs(producer.selector);\n\n    producer.render(itsEmpty(xmlNsDefs) ? properties : declareNss());\n\n    function declareNss(): StypProperties {\n      return itsReduction(xmlNsDefs, declareNs, { ...properties });\n    }\n\n    function declareNs(result: StypProperties.Mutable, ns: NamespaceDef): StypProperties.Mutable {\n\n      const alias = producer.nsAlias(ns);\n\n      result[`@namespace:${alias}`] = new StypURL(ns.url);\n\n      return result;\n    }\n  },\n\n};\n\n/**\n * @internal\n */\nfunction extractXmlNsDefs(selector: StypSelector.Normalized): Iterable<NamespaceDef> {\n  return filterIt<NamespaceDef | null, NamespaceDef>(\n      mapIt(\n          overArray(selector),\n          part => !isCombinator(part) && part.ns && typeof part.ns !== 'string' ? part.ns : null,\n      ),\n      isPresent,\n  );\n}\n","import { newRenderSchedule, RenderScheduler } from '@proc7ts/render-scheduler';\nimport { isReadonlyArray } from '../../internal';\nimport { StypRule } from '../../rule';\nimport { StypFormat } from '../format';\nimport { StypRenderer } from '../renderer';\nimport { stypRenderProperties } from '../renderers';\n\n/**\n * @internal\n */\nexport interface StypRendererSpecFactory extends StypRenderer.Factory {\n  create(rule: StypRule): StypRenderer.Spec;\n}\n\n/**\n * @internal\n */\nexport function stypRenderFactories(format: StypFormat): readonly StypRendererSpecFactory[] {\n\n  const factories = new Map<StypRenderer, StypRendererSpecFactory>();\n\n  addRenderers(format.renderer);\n  factories.delete(stypRenderProperties);\n\n  return [...factories.values(), rendererFactory(stypRenderProperties)].sort(compareRenderers);\n\n  function addRenderers(renderers: StypRenderer | readonly StypRenderer[] | undefined): void {\n    if (renderers) {\n      if (isReadonlyArray(renderers)) {\n        renderers.forEach(addRenderer);\n      } else {\n        addRenderer(renderers);\n      }\n    }\n  }\n\n  function addRenderer(renderer: StypRenderer): void {\n    if (factories.has(renderer)) {\n      return;\n    }\n\n    const factory = rendererFactory(renderer);\n\n    factories.set(renderer, factory);\n    addRenderers(factory.needs);\n  }\n}\n\nfunction rendererFactory(renderer: StypRenderer): StypRendererSpecFactory {\n  if (typeof renderer === 'function') {\n    return {\n      create() {\n        return { render: renderer };\n      },\n    };\n  }\n  if (isRendererFactory(renderer)) {\n    return {\n      order: renderer.order,\n      needs: renderer.needs,\n      create(rule) {\n        return rendererSpec(renderer.create(rule));\n      },\n    };\n  }\n\n  const render = renderer.render.bind(renderer);\n\n  return {\n    order: renderer.order,\n    needs: renderer.needs,\n    create() {\n      return { render };\n    },\n  };\n}\n\nfunction isRendererFactory(renderer: StypRenderer): renderer is StypRenderer.Factory {\n  return 'create' in renderer;\n}\n\nfunction compareRenderers(first: StypRenderer.Factory, second: StypRenderer.Factory): number {\n\n  const firstOrder = first.order || 0;\n  const secondOrder = second.order || 0;\n\n  return firstOrder > secondOrder ? 1 : firstOrder < secondOrder ? -1 : 0;\n}\n\nfunction rendererSpec(renderer: ReturnType<StypRenderer.Factory['create']>): StypRenderer.Spec {\n  return typeof renderer === 'function' ? { render: renderer } : renderer;\n}\n\n/**\n * @internal\n */\nexport function stypRenderScheduler(\n    parent: Node,\n    scheduler: RenderScheduler = newRenderSchedule,\n): RenderScheduler {\n  return (options = {}) => {\n\n    const { node = parent, error } = options;\n\n    return scheduler({\n      ...options,\n      node,\n      error: error && error.bind(options),\n    });\n  };\n}\n\n/**\n * @internal\n */\nexport function removeStyleElement(element: HTMLStyleElement): void {\n  element.parentNode?.removeChild(element);\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/style-producer\n */\nimport { EventEmitter, EventReceiver, EventSupply, OnEvent } from '@proc7ts/fun-events';\nimport { immediateRenderScheduler, RenderScheduler } from '@proc7ts/render-scheduler';\nimport { StypPriority } from '../../value';\nimport { StypFormat, StypFormatConfig } from '../format';\nimport { StypWriter } from '../writer';\n\n/**\n * Textual CSS production format.\n *\n * Represents each style sheet in textual form and reports it to registered receivers. Such receivers should be\n * registered before {@link produceStyle style production} started in order to receive all style sheets.\n *\n * @category Rendering\n */\nexport interface StypTextFormat extends StypFormat, StypTextFormatConfig {\n\n  /**\n   * Detailed configuration of CSS text pretty print, or `false` for compact output.\n   */\n  readonly pretty: StypTextFormatConfig.PrettyPrint | false;\n\n  /**\n   * Builds an `OnEvent` sender of style sheet textual representation.\n   *\n   * Sends textual representation of each rendered style sheet on each update.\n   *\n   * @returns `OnEvent` sender of {@link StypSheetText} objects.\n   */\n  onSheet(): OnEvent<[StypSheetText]>;\n\n  /**\n   * Starts sending textual representations of style sheets to the given `receiver`.\n   *\n   * @param receiver  Target receiver of style sheet text.\n   */\n  onSheet(receiver: EventReceiver<[StypSheetText]>): EventSupply;\n\n}\n\n/**\n * Configuration of {@link stypTextFormat textual CSS production format}.\n *\n * @category Rendering\n */\nexport interface StypTextFormatConfig extends StypFormatConfig {\n\n  /**\n   * DOM rendering operations scheduler.\n   *\n   * Creates a render schedule per rule.\n   *\n   * Uses `immediateRenderScheduler` by default.\n   */\n  readonly scheduler?: RenderScheduler;\n\n  /**\n   * How to pretty-print generated CSS text.\n   *\n   * - `false` to disable pretty print and generate compact output,\n   * - `true` (default value) for default pretty print,\n   * - {@link StypTextFormatConfig.PrettyPrint detailed configuration object}.\n   */\n  readonly pretty?: boolean | StypTextFormatConfig.PrettyPrint;\n\n}\n\nexport namespace StypTextFormatConfig {\n\n  /**\n   * Detailed configuration of CSS text pretty print.\n   */\n  export interface PrettyPrint {\n\n    /**\n     * Indentation string to use when formatting CSS text.\n     *\n     * Two spaces by default.\n     */\n    indent?: string;\n\n  }\n\n}\n\n/**\n * Style sheet textual representation.\n *\n * This is sent when producing styles in {@link StypTextFormat.onSheet textual format}.\n *\n * @category Rendering\n */\nexport interface StypSheetText {\n\n  /**\n   * Unique style sheet identifier.\n   *\n   * Style sheet is reported with the same identifier on each update.\n   */\n  readonly id: string;\n\n  /**\n   * The textual representation of style sheet formatted accordingly to {@link StypTextFormatConfig options},\n   * or `undefined` to inform that corresponding style sheet have been removed.\n   */\n  readonly css?: string;\n\n}\n\n/**\n * @internal\n */\ninterface StypTextFormatter {\n  readonly pre: string;\n  readonly nv: string;\n  readonly eol: string;\n  indent(): StypTextFormatter;\n}\n\n/**\n * @internal\n */\nconst defaultPrettyPrint: StypTextFormatConfig.PrettyPrint = {\n  indent: '  ',\n};\n\n/**\n * @internal\n */\nconst compactStypTextFormatter: StypTextFormatter = {\n  nv: '',\n  eol: '',\n  pre: '',\n  indent() {\n    return this;\n  },\n};\n\n/**\n * @internal\n */\nclass StypTextFormatter$ implements StypTextFormatter {\n\n  constructor(\n      private readonly _config: StypTextFormatConfig.PrettyPrint,\n      readonly pre = '',\n  ) {\n  }\n\n  get nv(): string {\n    return ' ';\n  }\n\n  get eol(): string {\n    return '\\n';\n  }\n\n  indent(): StypTextFormatter$ {\n    return new StypTextFormatter$(this._config, this.pre + this._config.indent!);\n  }\n\n}\n\n/**\n * @internal\n */\nclass StypStyleTextWriter implements StypWriter.Style {\n\n  private readonly nf: StypTextFormatter;\n  private body = '';\n\n  constructor(\n      private readonly f: StypTextFormatter,\n      readonly selector: string,\n  ) {\n    this.nf = f.indent();\n  }\n\n  get isGroup(): false {\n    return false;\n  }\n\n  set(name: string, value: string, priority: number): void {\n\n    const p = priority >= StypPriority.Important ? ' !important' : '';\n    const { pre, nv, eol } = this.nf;\n\n    if (this.body) {\n      this.body += `;${eol}`;\n    }\n\n    this.body += `${pre}${name}:${nv}${value}${p}`;\n  }\n\n  replace(css: string): void {\n    this.body = css.trim();\n    if (this.body.endsWith(';')) {\n      this.body = this.body.substr(0, this.body.length - 1);\n    }\n  }\n\n  toString(): string {\n\n    const { pre, nv, eol } = this.f;\n\n    if (this.body) {\n\n      const afterBody = eol ? `;${eol}` : '';\n\n      return `${pre}${this.selector}${nv}{${eol}${this.body}${afterBody}${pre}}`;\n    }\n\n    return '';\n  }\n\n}\n\n/**\n * @internal\n */\nabstract class AbstractStypGroupTextWriter implements StypWriter.Group {\n\n  readonly _nested: any[] = [];\n\n  protected constructor(readonly nf: StypTextFormatter) {\n  }\n\n  get isGroup(): true {\n    return true;\n  }\n\n  addGroup(name: string, params: string, index?: number): StypWriter.Group {\n    return this._add(new StypGroupTextWriter(this.nf, name, params), index);\n  }\n\n  addStyle(selector: string, index?: number): StypWriter.Style {\n    return this._add(new StypStyleTextWriter(this.nf, selector), index);\n  }\n\n  toString(): string {\n\n    let out = '';\n\n    for (const nested of this._nested) {\n\n      const text = String(nested);\n\n      if (text) {\n        if (out) {\n          out += this.nf.eol;\n        }\n        out += text;\n      }\n    }\n\n    return out;\n  }\n\n  protected _add<N>(nested: N, index = this._nested.length): N {\n    this._nested.splice(index, 0, nested);\n    return nested;\n  }\n\n}\n\n/**\n * @internal\n */\nclass StypGroupTextWriter extends AbstractStypGroupTextWriter implements StypWriter.Group {\n\n  constructor(readonly f: StypTextFormatter, readonly name: string, readonly params: string) {\n    super(f.indent());\n  }\n\n  toString(): string {\n\n    const body = super.toString();\n\n    if (!body) {\n      return '';\n    }\n\n    const { pre, nv, eol } = this.f;\n\n    return `${pre}${this.name} ${this.params}${nv}{${eol}${body}${eol}${pre}}`;\n  }\n\n}\n\n/**\n * @internal\n */\nclass StypSheetTextWriter extends AbstractStypGroupTextWriter implements StypWriter.Sheet {\n\n  constructor(\n      readonly id: string,\n      readonly f: StypTextFormatter,\n      readonly sender: EventEmitter<[StypSheetText]>,\n  ) {\n    super(f);\n  }\n\n  addGlobal(name: string, value: string, index?: number): void {\n    this._add(`${this.f.pre}${name} ${value};`, index);\n  }\n\n  clear(): void {\n    this._nested.length = 0;\n  }\n\n  remove(): void {\n    this.clear();\n    this.sender.send({ id: this.id });\n  }\n\n  done(): void {\n    this.sender.send({\n      id: this.id,\n      css: this.toString(),\n    });\n  }\n\n}\n\n/**\n * Builds textual CSS production format.\n *\n * It is necessary to register {@link StypTextFormat.onSheet CSS text receiver(s)} prior to start {@link produceStyle\n * style production} in order to receive CSS text for style sheets.\n *\n * @category Rendering\n * @param config  Textual format config.\n *\n * @returns Textual CSS production format.\n */\nexport function stypTextFormat(config: StypTextFormatConfig = {}): StypTextFormat {\n\n  const pretty: StypTextFormatConfig.PrettyPrint | false = config.pretty === true || config.pretty == null\n      ? defaultPrettyPrint\n      : (config.pretty || false);\n  const { scheduler = immediateRenderScheduler } = config;\n  const sender = new EventEmitter<[StypSheetText]>();\n  let onSheet = ((receiver?: EventReceiver<[StypSheetText]>): OnEvent<[StypSheetText]> | EventSupply => (\n      onSheet = sender.on().F\n  )(receiver)) as StypTextFormat['onSheet'];\n  const formatter: StypTextFormatter = pretty ? new StypTextFormatter$(pretty) : compactStypTextFormatter;\n  let idSeq = 0;\n\n  return {\n    ...config,\n    pretty,\n    scheduler,\n    onSheet,\n    addSheet() {\n      return new StypSheetTextWriter(String(++idSeq), formatter, sender);\n    },\n  };\n}\n","import { RenderScheduler } from '@proc7ts/render-scheduler';\nimport { StypFormat } from '../format';\nimport { removeStyleElement, stypRenderScheduler } from './format.impl';\n/**\n * @packageDocumentation\n * @module @proc7ts/style-producer\n */\nimport { stypTextFormat, StypTextFormatConfig } from './text.format';\n\n/**\n * Configuration of {@link stypDomFormat DOM style production format}.\n *\n * @category Rendering\n */\nexport interface StypDomFormatConfig extends StypTextFormatConfig {\n\n  /**\n   * Document to add style elements to.\n   *\n   * `parent.ownerDocument` or `window.document` by default.\n   */\n  readonly document?: Document;\n\n  /**\n   * Parent DOM node to add stylesheets to.\n   *\n   * `document.head` by default.\n   *\n   * This node don't have to be attached to document.\n   */\n  readonly parent?: Node;\n\n  /**\n   * DOM rendering operations scheduler.\n   *\n   * Creates a render schedule per rule.\n   *\n   * Uses `newRenderSchedule` for [[parent]] node by default.\n   */\n  readonly scheduler?: RenderScheduler;\n\n}\n\n/**\n * Builds DOM style production format.\n *\n * The sheet writer creates a `<style>` element inside the `parent` node per CSS rule and fills it with CSS text\n * generated by {@link stypTextFormat textual CSS production format}.\n *\n * This format is generally slower than {@link stypObjectFormat CSS object model production format}, but allows to add\n * `<style>` elements to DOM node outside document. E.g. to `DocumentFragment`.\n *\n * @category Rendering\n * @param config  DOM style format configuration.\n *\n * @returns CSS production format.\n */\nexport function stypDomFormat(\n    config: StypDomFormatConfig = {},\n): StypFormat {\n\n  const {\n    document = config.parent?.ownerDocument || window.document,\n    parent = document.head,\n  } = config;\n  const textFormat = stypTextFormat(config);\n  const scheduler = stypRenderScheduler(parent, config.scheduler);\n  const schedule = scheduler();\n  const elements = new Map<string, HTMLStyleElement>();\n  const supply = textFormat.onSheet(({ id, css }) => {\n    // CSS text is reported within schedule. No need to re-schedule DOM manipulations here.\n\n    let element = elements.get(id);\n\n    if (css == null) { // element exists here\n      elements.delete(id);\n      removeStyleElement(element!);\n    } else if (element) {\n      element.textContent = css;\n    } else {\n      element = document.createElement('style');\n      element.setAttribute('type', 'text/css');\n      element.textContent = css;\n      parent.appendChild(element);\n      elements.set(id, element);\n      supply.whenOff(\n          // Schedule element removal on style sheet removal instead of removing it right away.\n          () => schedule(() => removeStyleElement(element!)),\n      );\n    }\n  });\n\n  return {\n    ...config,\n    scheduler,\n    addSheet(producer) {\n      supply.needs(producer);\n      this.addSheet = textFormat.addSheet.bind(textFormat);\n      return this.addSheet(producer);\n    },\n  };\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/style-producer\n */\nimport { RenderScheduler } from '@proc7ts/render-scheduler';\nimport { StypPriority } from '../../value';\nimport { StypFormat, StypFormatConfig } from '../format';\nimport { StypWriter } from '../writer';\nimport { removeStyleElement, stypRenderScheduler } from './format.impl';\n\n/**\n * @internal\n */\nclass StypStyleObjectWriter implements StypWriter.Style {\n\n  constructor(private readonly _target: CSSStyleRule) {\n  }\n\n  get isGroup(): false {\n    return false;\n  }\n\n  set(name: string, value: string, priority: number): void {\n    this._target.style.setProperty(name, value, priority >= StypPriority.Important ? 'important' : undefined);\n  }\n\n  replace(css: string): void {\n    this._target.style.cssText = css;\n  }\n\n}\n\n/**\n * @internal\n */\nclass StypGroupObjectWriter implements StypWriter.Group {\n\n  constructor(readonly _target: CSSStyleSheet | CSSGroupingRule) {\n  }\n\n  get isGroup(): true {\n    return true;\n  }\n\n  addGroup(name: string, params: string, index?: number): StypWriter.Group {\n    return new StypGroupObjectWriter(\n        this._add(\n            `${name} ${params}{}`,\n            index,\n        ) as CSSGroupingRule,\n    );\n  }\n\n  addStyle(selector: string, index?: number): StypWriter.Style {\n    return new StypStyleObjectWriter(this._add(`${selector}{}`, index) as CSSStyleRule);\n  }\n\n  protected _add(\n      ruleText: string,\n      index = this._target.cssRules.length,\n  ): CSSRule {\n\n    const idx = this._target.insertRule(ruleText, index);\n\n    return this._target.cssRules[idx];\n  }\n\n}\n\n/**\n * @internal\n */\nclass StypSheetObjectWriter extends StypGroupObjectWriter implements StypWriter.Sheet {\n\n  constructor(private readonly _element: HTMLStyleElement) {\n    super(_element.sheet as CSSStyleSheet);\n  }\n\n  addGlobal(name: string, value: string, index?: number): void {\n    this._add(`${name} ${value};`, index);\n  }\n\n  clear(): void {\n\n    const { cssRules } = this._target;\n\n    while (cssRules.length) {\n      this._target.deleteRule(cssRules.length - 1);\n    }\n  }\n\n  remove(): void {\n    removeStyleElement(this._element);\n  }\n\n  done(): void {\n    /* do nothing */\n  }\n\n}\n\n/**\n * Configuration of {@link stypObjectFormat CSS object model production format}.\n *\n * @category Rendering\n */\nexport interface StypObjectFormatConfig extends StypFormatConfig {\n\n  /**\n   * Parent DOM node to add stylesheets to.\n   *\n   * `document.head` by default.\n   *\n   * This node has to be attached to document.\n   */\n  readonly parent?: Node;\n\n  /**\n   * DOM rendering operations scheduler.\n   *\n   * Creates a render schedule per rule.\n   *\n   * Uses `newRenderSchedule` for [[parent]] node by default.\n   */\n  readonly scheduler?: RenderScheduler;\n\n}\n\n/**\n * Builds CSS object model production format.\n *\n * The sheet writer creates a `<style>` element inside the `parent` node per CSS rule and builds its style sheet\n * with CSS object model methods.\n *\n * @category Rendering\n * @param config  Object format configuration.\n *\n * @returns CSS production format.\n */\nexport function stypObjectFormat(\n    config: StypObjectFormatConfig = {},\n): StypFormat {\n\n  const { parent = document.head } = config;\n\n  return {\n    ...config,\n    scheduler: stypRenderScheduler(parent, config.scheduler),\n    addSheet() {\n\n      const element = document.createElement('style');\n\n      element.setAttribute('type', 'text/css');\n      element.append(document.createTextNode(''));\n\n      parent.appendChild(element);\n\n      return new StypSheetObjectWriter(element);\n    },\n  };\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/style-producer\n */\nimport { itsReduction, mapIt } from '@proc7ts/a-iterable';\nimport {\n  AfterEvent,\n  afterSupplied,\n  eventSupply,\n  EventSupply,\n  EventSupply__symbol,\n  onSupplied,\n} from '@proc7ts/fun-events';\nimport { NamespaceDef, newNamespaceAliaser } from '@proc7ts/namespace-aliaser';\nimport { noop } from '@proc7ts/primitives';\nimport { newRenderSchedule } from '@proc7ts/render-scheduler';\nimport { StypProperties, StypRule, StypRules } from '../rule';\nimport { StypSelector, stypSelector, StypSelectorFormat, stypSelectorText } from '../selector';\nimport { isCombinator } from '../selector/selector.impl';\nimport { StypFormat } from './format';\nimport { stypRenderFactories } from './formats/format.impl';\nimport { StypRenderer } from './renderer';\nimport { StyleProducer } from './style-producer';\nimport { StypWriter } from './writer';\n\n/**\n * Produces and dynamically updates basic CSS stylesheets based on the given CSS rules.\n *\n * Unlike [[produceStyle]], this function does not enable renderers but the basic one which just renders CSS properties.\n * Only select renderers can be enabled. This can be used to save a bundle size.\n *\n * @category Rendering\n * @param rules  CSS rules to produce stylesheets for. This can be e.g. a [[StypRule.rules]] to render all rules,\n * or a result of [[StypRuleList.grab]] method call to render only matching ones.\n * @param format  Production options.\n *\n * @returns Styles supply. Once cut off (i.e. its `off()` method is called) the produced stylesheets are removed.\n */\nexport function produceBasicStyle(rules: StypRules, format: StypFormat): EventSupply {\n\n  const {\n    rootSelector = { e: 'body' },\n    scheduler = newRenderSchedule,\n    nsAlias = newNamespaceAliaser(),\n  } = format;\n  const supply = eventSupply();\n  const selectorFormat: StypSelectorFormat = { nsAlias };\n  const factories = stypRenderFactories(format);\n  const renderSupply = renderRules(rules);\n  const trackSupply = trackRules();\n\n  return supply.needs(renderSupply)\n      .needs(trackSupply)\n      .cuts(renderSupply)\n      .cuts(trackSupply);\n\n  function styleProducer(\n      rule: StypRule,\n      renderer: StypRenderer.Function,\n      production: {\n        sheet: StypWriter.Sheet;\n        writer: StypWriter;\n        selector: StypSelector.Normalized;\n      },\n  ): StyleProducer {\n\n    class StyleProducer$ implements StyleProducer {\n\n      get [EventSupply__symbol](): EventSupply {\n        return supply;\n      }\n\n      get rule(): StypRule {\n        return rule;\n      }\n\n      get sheet(): StypWriter.Sheet {\n        return production.sheet;\n      }\n\n      get writer(): StypWriter {\n        return production.writer;\n      }\n\n      get selector(): StypSelector.Normalized {\n        return production.selector;\n      }\n\n      nsAlias(ns: NamespaceDef): string {\n        return nsAlias(ns);\n      }\n\n      render(properties: StypProperties, options?: StypRenderer.Options): void {\n        if (!options) {\n          renderer(this, properties);\n        } else {\n          renderer(\n              styleProducer(\n                  rule,\n                  renderer,\n                  {\n                    sheet: production.sheet,\n                    writer: options.writer || production.writer,\n                    selector: options.selector || production.selector,\n                  },\n              ),\n              properties,\n          );\n        }\n      }\n\n      addStyle(_selector: StypSelector.Normalized = production.selector): StypWriter.Style {\n\n        const { writer } = production;\n\n        if (!writer.isGroup) {\n          return writer;\n        }\n\n        return writer.addStyle(selectorText(_selector));\n      }\n\n    }\n\n    return new StyleProducer$();\n  }\n\n  function selectorText(selector: StypSelector.Normalized): string {\n    return stypSelectorText(selector, selectorFormat);\n  }\n\n  function renderRules(rulesToRender: Iterable<StypRule>): EventSupply {\n    return itsReduction<EventSupply, EventSupply>(\n        mapIt(rulesToRender, renderRule),\n        (prev, supply) => eventSupply().cuts(supply).cuts(prev),\n        eventSupply(),\n    );\n  }\n\n  function trackRules(): EventSupply {\n\n    const supply = eventSupply();\n\n    return onSupplied(rules).to({\n      supply,\n      receive: (_ctx, added) => {\n        added.forEach(r => renderRule(r).needs(supply));\n      },\n    });\n  }\n\n  function renderRule(rule: StypRule): EventSupply {\n\n    const [reader, renderer] = rendererForRule(rule);\n    let sheet: StypWriter.Sheet | undefined;\n    const selector = ruleSelector(rule);\n    const schedule = scheduler();\n\n    return reader.to(renderProperties).whenOff(removeStyle);\n\n    function renderProperties(properties: StypProperties): void {\n      schedule(() => {\n        sheet?.clear();\n\n        const producer = styleProducer(\n            rule,\n            renderer,\n            {\n              get sheet(): StypWriter.Sheet {\n                if (!sheet) {\n                  sheet = format.addSheet(producer);\n                }\n                return sheet;\n              },\n              get writer(): StypWriter.Sheet {\n                return this.sheet;\n              },\n              selector,\n            },\n        );\n\n        producer.render(properties);\n        sheet?.done();\n      });\n    }\n\n    function removeStyle(): void {\n      schedule(() => {\n\n        const lastSheet = sheet;\n\n        if (lastSheet) {\n          sheet = undefined;\n          return lastSheet.remove();\n        }\n        // Otherwise element is removed before anything rendered.\n        // Should never happen for properly constructed rule.\n      });\n    }\n  }\n\n  function ruleSelector(rule: StypRule): StypSelector.Normalized {\n\n    const selector = rule.selector;\n\n    if (!selector.length) {\n      // Use configured root selector\n      return stypSelector(rootSelector);\n    }\n    if (isCombinator(selector[0])) {\n      // First combinator is relative to root selector\n      return [...stypSelector(rootSelector), ...selector];\n    }\n\n    return selector;\n  }\n\n  function rendererForRule(rule: StypRule): [AfterEvent<[StypProperties]>, StypRenderer.Function] {\n\n    const specs = factories.map(factory => factory.create(rule));\n    const reader = specs.reduce(\n        (read, spec) => spec.read ? afterSupplied(spec.read(read)) : read,\n        rule.read(),\n    );\n\n    return [reader, renderAt(0)];\n\n    function renderAt(index: number): StypRenderer.Function {\n      return (producer, properties) => {\n\n        const nextIndex = index + 1;\n        let nextRenderer: StypRenderer.Function;\n\n        if (nextIndex === factories.length) {\n          nextRenderer = noop;\n        } else {\n          nextRenderer = renderAt(nextIndex);\n        }\n\n        const nextProducer = styleProducer(producer.rule, nextRenderer, producer);\n\n        specs[index].render(nextProducer, properties);\n      };\n    }\n  }\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/style-producer\n */\nimport { NamespaceAliaser } from '@proc7ts/namespace-aliaser';\nimport { StypPureSelector } from './pure-selector';\nimport { StypSelector } from './selector';\nimport { stypSelector } from './selector-constructor';\nimport { formatStypSelector } from './selector-text.impl';\n\n/**\n * Structured CSS selector textual format.\n *\n * @category CSS Rule\n */\nexport interface StypSelectorFormat {\n\n  /**\n   * Qualifier formatting function. When present, it is called for each qualifier to build its\n   * textual representation. When unspecified, the qualifiers won't be attached to resulting CSS selector text.\n   *\n   * @param qualifier  Qualifier to format.\n   *\n   * @returns Textual representation of `qualifier`.\n   */\n  qualify?: (qualifier: string) => string;\n\n  /**\n   * Namespace aliaser to use.\n   *\n   * New instance will be created if not specified.\n   */\n  nsAlias?: NamespaceAliaser;\n\n}\n\n/**\n * Converts structured CSS selector to its textual representation.\n *\n * @category CSS Rule\n * @param selector  Target CSS selector.\n * @param format  CSS selector format.\n *\n * @returns CSS selector string.\n */\nexport function stypSelectorText(selector: StypSelector | StypPureSelector, format?: StypSelectorFormat): string {\n  return formatStypSelector(stypSelector(selector), format);\n}\n","import { isReadonlyArray } from '../../internal';\nimport { StypRenderer } from '../renderer';\nimport { stypRenderAtRules } from './at-rules.renderer';\nimport { stypRenderGlobals } from './globals.renderer';\nimport { stypRenderText } from './text.renderer';\nimport { stypRenderXmlNs } from './xml-ns.renderer';\n\n/**\n * @internal\n */\nexport function defaultStypRenderers(\n    renderer: StypRenderer | readonly StypRenderer[] | undefined,\n): readonly StypRenderer[] {\n\n  const result: StypRenderer[] = [\n    stypRenderAtRules,\n    stypRenderXmlNs,\n    stypRenderGlobals,\n    stypRenderText,\n  ];\n\n  if (renderer) {\n    if (isReadonlyArray(renderer)) {\n      result.push(...renderer);\n    } else {\n      result.push(renderer);\n    }\n  }\n\n  return result;\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/style-producer\n */\nimport { EventSupply } from '@proc7ts/fun-events';\nimport { StypRules } from '../rule';\nimport { StypFormat } from './format';\nimport { produceBasicStyle } from './produce-basic-style';\nimport { defaultStypRenderers } from './renderers/default-renderers.impl';\n\n/**\n * Produces and dynamically updates CSS stylesheets based on the given CSS rules.\n *\n * Appends `<style>` element(s) to the given parent DOM node (`document.head` by default) and updates them when CSS\n * rules change.\n *\n * This function enables all default renderers. E.g. the one supporting raw CSS text rules. If some of them are not\n * needed a [[produceBasicStyle]] variant of this function may be used instead.\n *\n * @category Rendering\n * @param rules  CSS rules to produce stylesheets for. This can be e.g. a [[StypRule.rules]] to render all rules,\n * or a result of [[StypRuleList.grab]] method call to render only matching ones.\n * @param format  Production format.\n *\n * @returns Styles supply. Once cut off (i.e. its `off()` method is called) the produced stylesheets are removed.\n */\nexport function produceStyle(rules: StypRules, format: StypFormat): EventSupply {\n  return produceBasicStyle(rules, { ...format, renderer: defaultStypRenderers(format.renderer) });\n}\n\n\n","/**\n * @packageDocumentation\n * @module @proc7ts/style-producer\n */\nimport {\n  AfterEvent,\n  AfterEvent__symbol,\n  EventKeeper,\n  EventReceiver,\n  EventSupply,\n  OnEvent,\n  OnEvent__symbol,\n} from '@proc7ts/fun-events';\nimport { StypQuery, StypRuleKey, StypSelector } from '../selector';\nimport { StypProperties } from './properties';\nimport { StypRules } from './rules';\n\n/**\n * CSS rule.\n *\n * Represents CSS selector and corresponding CSS properties.\n *\n * @category CSS Rule\n */\nexport abstract class StypRule implements EventKeeper<[StypProperties]> {\n\n  /**\n   * A reference to the root CSS rule.\n   */\n  abstract readonly root: StypRule;\n\n  /**\n   * A reference to outer CSS rule.\n   *\n   * The outer rule is the one for enclosing element.\n   * I.e. for the rule with selector is `a b+c` the parent one is `a b`, while the outer one is `a`.\n   *\n   * This is `null` for the root rule and may be `null` for the rule removed from hierarchy.\n   */\n  abstract readonly outer: StypRule | null;\n\n  /**\n   * CSS selector of this rule.\n   */\n  abstract readonly selector: StypSelector.Normalized;\n\n  /**\n   * A key of this rule in the enclosing one.\n   */\n  abstract readonly key: StypRuleKey;\n\n  /**\n   * Whether this rule's properties are empty.\n   *\n   * This is `true` when the rule properties are constant and empty.\n   *\n   * Empty CSS rules returned from `rule()` method when there is no matching rule found.\n   */\n  abstract readonly empty: boolean;\n\n  /**\n   * Dynamic list of all CSS rules in hierarchy starting from this one.\n   */\n  abstract readonly rules: StypRuleHierarchy;\n\n  /**\n   * Build `AfterEvent` keeper of CSS properties of this rule.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   *\n   * @returns `AfterEvent` keeper of CSS properties map.\n   */\n  abstract read(): AfterEvent<[StypProperties]>;\n\n  /**\n   * Starts sending CSS properties of this rule and their updates to the given `receiver`.\n   *\n   * @param receiver  Target receiver of CSS properties map.\n   *\n   * @returns CSS properties supply.\n   */\n  abstract read(receiver: EventReceiver<[StypProperties]>): EventSupply;\n\n  [AfterEvent__symbol](): AfterEvent<[StypProperties]> {\n    return this.read();\n  }\n\n  /**\n   * Sets CSS properties of this rule.\n   *\n   * @param properties  CSS properties specifier. Or nothing to clear them.\n   *\n   * @returns `this` rule instance.\n   */\n  abstract set(properties?: StypProperties.Spec): this;\n\n  /**\n   * Appends CSS properties to this rule.\n   *\n   * @param properties  CSS properties specifier.\n   *\n   * @returns `this` rule instance.\n   */\n  add(properties: StypProperties.Spec): this {\n    return this.rules.add([], properties) as this;\n  }\n\n  /**\n   * Clears CSS properties of this rule.\n   *\n   * Calling this method is the same as calling `set()` without properties.\n   *\n   * @returns `this` rule instance.\n   */\n  clear(): this {\n    return this.set();\n  }\n\n  /**\n   * Removes this rule from hierarchy along with all nested rules.\n   *\n   * @param reason  Optional removal reason.\n   *\n   * @returns `this` (just removed) rule instance.\n   */\n  abstract remove(reason?: any): this;\n\n}\n\n/**\n * Dynamically updated list of CSS rules.\n *\n * This is an iterable of rules, an EventSender` of their updates, and an `EventKeeper` of itself.\n *\n * @category CSS Rule\n */\nexport abstract class StypRuleList implements StypRules, EventKeeper<[StypRuleList]> {\n\n  /**\n   * Builds an `AfterEvent` keeper of rule list.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   *\n   * @returns `AfterEvent` keeper of this rule list.\n   */\n  abstract read(): AfterEvent<[StypRuleList]>;\n\n  /**\n   * Starts sending rule list and updates to the given `receiver`.\n   *\n   * @param receiver  Target receiver of this rule list.\n   *\n   * @returns Rule list supply.\n   */\n  abstract read(receiver: EventReceiver<[StypRuleList]>): EventSupply;\n\n  [AfterEvent__symbol](): AfterEvent<[StypRuleList]> {\n    return this.read();\n  }\n\n  /**\n   * Builds an `OnEvent` sender of this rule list updates.\n   *\n   * The list updates receiver accepts two arguments:\n   * - An array of added rules\n   * - An array of removed rules.\n   *\n   * The `[OnEvent__symbol]` property is an alias of this one.\n   *\n   * @returns `OnEvent` sender of rule list updates.\n   */\n  abstract onUpdate(): OnEvent<[StypRule[], StypRule[]]>;\n\n  /**\n   * Starts sending updates to this rule list to the given `receiver`.\n   *\n   * @param receiver  Target receiver of updates to this rule list.\n   *\n   * @returns Rule list updates supply.\n   */\n  abstract onUpdate(receiver: EventReceiver<[StypRule[], StypRule[]]>): EventSupply;\n\n  [OnEvent__symbol](): OnEvent<[StypRule[], StypRule[]]> {\n    return this.onUpdate();\n  }\n\n  abstract [Symbol.iterator](): IterableIterator<StypRule>;\n\n  /**\n   * Grabs rules from this list matching the given `query`.\n   *\n   * @param query  CSS rule query to match.\n   *\n   * @returns Dynamic list of rules in this list matching the given query.\n   */\n  abstract grab(query: StypQuery): StypRuleList;\n\n}\n\n/**\n * Dynamic list of all CSS rules in hierarchy starting from its root.\n *\n * @category CSS Rule\n */\nexport abstract class StypRuleHierarchy extends StypRuleList {\n\n  /**\n   * Dynamic list containing only root CSS rule.\n   *\n   * This list never changes actually.\n   */\n  abstract readonly self: StypRuleList;\n\n  /**\n   * Dynamic list of all CSS rules directly nested within the root one.\n   */\n  abstract readonly nested: StypRuleList;\n\n  /**\n   * Appends CSS properties to nested rule.\n   *\n   * Creates target rule if necessary.\n   *\n   * @param selector  Target rule selector.\n   * @param properties  Optional CSS properties specifier.\n   *\n   * @returns Modified CSS rule.\n   */\n  abstract add(selector: StypSelector, properties?: StypProperties.Spec): StypRule;\n\n  /**\n   * Returns nested CSS rule matching the given `selector`.\n   *\n   * @param selector  Target rule selector.\n   *\n   * @returns Either matching CSS rule, or `undefined` if not found.\n   */\n  abstract get(selector: StypSelector): StypRule | undefined;\n\n  /**\n   * Watches for CSS rule properties.\n   *\n   * The properties are empty when the watched rule does not exist.\n   *\n   * @param selector  CSS selector of watched rule.\n   *\n   * @returns An `AfterEvent` registrar of CSS properties receiver.\n   */\n  abstract watch(selector: StypSelector): AfterEvent<[StypProperties]>;\n\n}\n","import { filterIt, itsIterable } from '@proc7ts/a-iterable';\nimport { AfterEvent, afterSent, EventReceiver, EventSupply, OnEvent, onEventBy, onSupplied } from '@proc7ts/fun-events';\nimport { asis, valueProvider, valuesProvider } from '@proc7ts/primitives';\nimport { stypQuery, StypQuery, stypSelectorMatches } from '../selector';\nimport { StypRule, StypRuleList } from './rule';\nimport { StypRules } from './rules';\n\n/**\n * @internal\n */\nexport class Rules extends StypRuleList {\n\n  private readonly _buildList: () => Iterable<StypRule>;\n  private readonly _filterArray: (rules: StypRule[]) => StypRule[];\n  // noinspection JSMismatchedCollectionQueryUpdate\n  private _ruleSet?: Set<StypRule>; // `undefined` updates are not tracked\n\n  constructor(private readonly _list: StypRules, ruleMatches?: (rule: StypRule) => boolean) {\n    super();\n    if (ruleMatches) {\n      this._buildList = () => filterIt(_list, ruleMatches);\n      this._filterArray = rules => rules.filter(ruleMatches);\n    } else {\n      this._buildList = () => _list;\n      this._filterArray = asis;\n    }\n  }\n\n  read(): AfterEvent<[StypRuleList]>;\n  read(receiver: EventReceiver<[StypRuleList]>): EventSupply;\n  read(receiver?: EventReceiver<[StypRuleList]>): AfterEvent<[StypRuleList]> | EventSupply {\n    return (this.read = afterSent<[Rules]>(\n        this.onUpdate().thru(valueProvider(this)),\n        valuesProvider(this),\n    ).F)(receiver);\n  }\n\n  onUpdate(): OnEvent<[StypRule[], StypRule[]]>;\n  onUpdate(receiver: EventReceiver<[StypRule[], StypRule[]]>): EventSupply;\n  onUpdate(receiver?: EventReceiver<[StypRule[], StypRule[]]>): OnEvent<[StypRule[], StypRule[]]> | EventSupply {\n    return (this.onUpdate = onEventBy<[StypRule[], StypRule[]]>(receiver => {\n\n      const rules = this._ruleSet || (this._ruleSet = new Set(this._buildList()));\n\n      onSupplied(this._list).to({\n        supply: receiver.supply.whenOff(() => this._ruleSet = undefined),\n        receive: (context, added, removed) => {\n          added = this._filterArray(added);\n          removed = this._filterArray(removed);\n          if (removed.length || added.length) {\n            removed.forEach(rule => rules.delete(rule));\n            added.forEach(rule => rules.add(rule));\n            receiver.receive(context, added, removed);\n          }\n        },\n      });\n    }).share().F)(receiver);\n  }\n\n  [Symbol.iterator](): IterableIterator<StypRule> {\n    if (this._ruleSet) {\n      // List changes are tracked.\n      return this._ruleSet.values();\n    }\n    // List changes are not currently tracked.\n    // Request the rules explicitly.\n    return itsIterable(this._buildList());\n  }\n\n  grab(query: StypQuery): StypRuleList {\n    return grabRules(this, query);\n  }\n\n}\n\n/**\n * @internal\n */\nexport function grabRules(list: StypRuleList, query: StypQuery): StypRuleList {\n\n  const q = stypQuery(query);\n\n  return new Rules(list, rule => stypSelectorMatches(rule.selector, q));\n}\n","import { itsIterable } from '@proc7ts/a-iterable';\nimport {\n  AfterEvent,\n  afterEventBy,\n  afterSent,\n  EventEmitter,\n  EventReceiver,\n  EventSupply,\n  nextAfterEvent,\n  OnEvent,\n  OnEvent__symbol,\n  trackValue,\n  ValueTracker,\n} from '@proc7ts/fun-events';\nimport { valueProvider, valuesProvider } from '@proc7ts/primitives';\nimport { StypQuery, StypRuleKey, stypSelector, StypSelector } from '../selector';\nimport { stypRuleKeyText } from '../selector/selector-text.impl';\nimport { stypOuterSelector, stypRuleKeyAndTail } from '../selector/selector.impl';\nimport { StypProperties } from './properties';\nimport { mergeStypProperties, noStypPropertiesSpec, stypPropertiesBySpec } from './properties.impl';\nimport { StypRule, StypRuleHierarchy, StypRuleList } from './rule';\nimport { StypRules } from './rules';\nimport { grabRules, Rules } from './rules.impl';\n\nclass AllRules extends StypRuleHierarchy {\n\n  private readonly _updates = new EventEmitter<[StypRule$[], StypRule$[]]>();\n  readonly self: StypRuleList;\n\n  constructor(private readonly _root: StypRule$, readonly nested: NestedRules) {\n    super();\n    this.self = selfRuleList(_root, this);\n  }\n\n  read(): AfterEvent<[AllRules]>;\n  read(receiver: EventReceiver<[AllRules]>): EventSupply;\n  read(receiver?: EventReceiver<[AllRules]>): AfterEvent<[AllRules]> | EventSupply {\n    return (this.read = afterSent<[AllRules]>(\n        this._updates.on().thru(valueProvider(this)),\n        valuesProvider(this),\n    ).F)(receiver);\n  }\n\n  onUpdate(): OnEvent<[StypRule$[], StypRule$[]]>;\n  onUpdate(receiver: EventReceiver<[StypRule$[], StypRule$[]]>): EventSupply;\n  onUpdate(receiver?: EventReceiver<[StypRule$[], StypRule$[]]>): OnEvent<[StypRule$[], StypRule$[]]> | EventSupply {\n    return (this.onUpdate = this._updates.on().F)(receiver);\n  }\n\n  [Symbol.iterator](): IterableIterator<StypRule$> {\n    return iterateAllRules(this._root);\n  }\n\n  grab(query: StypQuery): StypRuleList {\n    return grabRules(this, query);\n  }\n\n  add(selector: StypSelector, properties?: StypProperties.Spec): StypRule$ {\n    return extendRule(this._root, stypSelector(selector), properties, true);\n  }\n\n  get(selector: StypSelector): StypRule$ | undefined {\n    return this._get(stypSelector(selector));\n  }\n\n  private _get(selector: StypSelector.Normalized): StypRule$ | undefined {\n\n    const [key, tail] = stypRuleKeyAndTail(selector);\n\n    if (!tail) {\n      return this._root;\n    }\n\n    const found = this.nested._rule(stypRuleKeyText(key));\n\n    if (!found) {\n      return;\n    }\n\n    return found.rules.get(tail);\n  }\n\n  watch(selector: StypSelector): AfterEvent<[StypProperties]> {\n\n    const request = stypSelector(selector);\n\n    return afterEventBy<[StypProperties]>(receiver => {\n\n      const tracker = trackValue<StypProperties>({});\n      const propertiesSupply = this.read().consume(() => {\n\n        const found = this._get(request);\n\n        return found && found\n            .read(properties => tracker.it = properties)\n            .whenOff(() => tracker.it = {});\n      });\n\n      return tracker.read(receiver).cuts(propertiesSupply);\n    }).share();\n  }\n\n  _add(rule: StypRule$, sendUpdate: boolean): void {\n    rule.rules.onUpdate((added, removed) => this._updates.send(added, removed));\n    if (sendUpdate) {\n      this._updates.send(allRules(rule), []);\n    }\n  }\n\n  _remove(reason?: any): void {\n\n    const removed = allRules(this._root);\n\n    this._updates.send([], removed);\n    removed.forEach(rule => {\n      rule.rules._updates.done(reason);\n      rule._spec.done(reason);\n    });\n  }\n\n}\n\nfunction selfRuleList(rule: StypRule$, all: AllRules): StypRuleList {\n\n  const onUpdate = new EventEmitter<[StypRule$[], StypRule$[]]>();\n  const rules = [rule];\n\n  all.onUpdate((_added, removed) => {\n    if (removed[0] === rule) {\n      rules.length = 0;\n      onUpdate.send([], [rule]);\n    }\n  }).cuts(onUpdate);\n\n  class Self implements StypRules {\n\n    [OnEvent__symbol](): OnEvent<[StypRule$[], StypRule$[]]> {\n      return onUpdate.on();\n    }\n\n    [Symbol.iterator](): IterableIterator<StypRule$> {\n      return itsIterable(rules);\n    }\n\n  }\n\n  return new Rules(new Self());\n}\n\nfunction allRules(rule: StypRule$): StypRule$[] {\n  return Array.from(iterateAllRules(rule));\n}\n\nfunction *iterateAllRules(rule: StypRule$): IterableIterator<StypRule$> {\n  yield rule;\n  for (const nested of rule.rules.nested) {\n    yield* allRules(nested);\n  }\n}\n\nclass NestedRules extends StypRuleList {\n\n  readonly _all: AllRules;\n  private readonly _updates = new EventEmitter<[StypRule$[], StypRule$[]]>();\n  private readonly _byKey = new Map<string, StypRule$>();\n\n  constructor(root: StypRule$) {\n    super();\n    this._all = new AllRules(root, this);\n  }\n\n  read(): AfterEvent<[NestedRules]>;\n  read(receiver: EventReceiver<[NestedRules]>): EventSupply;\n  read(receiver?: EventReceiver<[NestedRules]>): AfterEvent<[NestedRules]> | EventSupply {\n    return (this.read = afterSent<[NestedRules]>(\n        this._updates.on().thru(valueProvider(this)),\n        valuesProvider(this),\n    ).F)(receiver);\n  }\n\n  onUpdate(): OnEvent<[StypRule[], StypRule[]]>;\n  onUpdate(receiver: EventReceiver<[StypRule[], StypRule[]]>): EventSupply;\n  onUpdate(receiver?: EventReceiver<[StypRule[], StypRule[]]>): OnEvent<[StypRule[], StypRule[]]> | EventSupply {\n    return (this.onUpdate = this._updates.on().F)(receiver);\n  }\n\n  [Symbol.iterator](): IterableIterator<StypRule$> {\n    return this._byKey.values();\n  }\n\n  grab(query: StypQuery): StypRuleList {\n    return grabRules(this, query);\n  }\n\n  _rule(key: string): StypRule$ | undefined {\n    return this._byKey.get(key);\n  }\n\n  _add(key: string, rule: StypRule$, sendUpdate: boolean): void {\n    this._byKey.set(key, rule);\n    rule.rules.onUpdate((_added, removed) => {\n      if (removed[0] === rule) {\n        this._byKey.delete(key);\n        this._updates.send([], [rule]);\n      }\n    });\n    if (sendUpdate) {\n      this._updates.send([rule], []);\n    }\n    this._all._add(rule, sendUpdate);\n  }\n\n}\n\n/**\n * @internal\n */\nexport class StypRule$ extends StypRule {\n\n  private readonly _root: StypRule$;\n  private _outer?: StypRule$ | null;\n  private readonly _selector: StypSelector.Normalized;\n  private readonly _key: StypRuleKey;\n  readonly _spec: ValueTracker<StypProperties.Builder>;\n  private readonly _nested: NestedRules;\n\n  get root(): StypRule$ {\n    return this._root;\n  }\n\n  get outer(): StypRule$ | null {\n    if (this._outer !== undefined) {\n      return this._outer;\n    }\n\n    const outerSelector = stypOuterSelector(this.selector);\n\n    return this._outer = outerSelector && this.root.rules.get(outerSelector) || null;\n  }\n\n  get selector(): StypSelector.Normalized {\n    return this._selector;\n  }\n\n  get key(): StypRuleKey {\n    return this._key;\n  }\n\n  get empty(): boolean {\n    return this._spec.it === noStypPropertiesSpec;\n  }\n\n  get rules(): AllRules {\n    return this._nested._all;\n  }\n\n  constructor(\n      root: StypRule$ | undefined,\n      selector: StypSelector.Normalized,\n      key: StypRuleKey,\n      spec: StypProperties.Builder = noStypPropertiesSpec,\n  ) {\n    super();\n    this._root = root || this;\n    this._selector = selector;\n    this._key = key;\n    this._spec = trackValue(spec);\n    this._nested = new NestedRules(this);\n  }\n\n  read(): AfterEvent<[StypProperties]>;\n  read(receiver: EventReceiver<[StypProperties]>): EventSupply;\n  read(receiver?: EventReceiver<[StypProperties]>): AfterEvent<[StypProperties]> | EventSupply {\n    return (this.read = this._spec.read().keepThru(builder => nextAfterEvent(builder(this))).F)(receiver);\n  }\n\n  set(properties?: StypProperties.Spec): this {\n    this._spec.it = properties ? r => stypPropertiesBySpec(r, properties) : noStypPropertiesSpec;\n    return this;\n  }\n\n  remove(reason?: any): this {\n    this.rules._remove(reason);\n    return this;\n  }\n\n}\n\nfunction extendRule(\n    rule: StypRule$,\n    targetSelector: StypSelector.Normalized,\n    properties: StypProperties.Spec | undefined,\n    sendUpdate: boolean,\n): StypRule$ {\n\n  const [key, tail] = stypRuleKeyAndTail(targetSelector);\n\n  if (!tail) {\n    // Target rule\n    rule._spec.it = extendSpec(rule, properties);\n    return rule;\n  }\n\n  const keyText = stypRuleKeyText(key);\n  const found = rule.rules.nested._rule(keyText);\n\n  if (found) {\n    return extendRule(found, tail, properties, sendUpdate);\n  }\n\n  const newNested = new StypRule$(rule.root, [...rule.selector, ...key], key);\n  const result = extendRule(newNested, tail, properties, false); // Send only a top-level update\n\n  rule.rules.nested._add(keyText, newNested, sendUpdate);\n\n  return result;\n}\n\nfunction extendSpec(rule: StypRule$, properties: StypProperties.Spec | undefined): StypProperties.Builder {\n\n  const oldSpec = rule._spec.it;\n\n  if (!properties) {\n    return oldSpec;\n  }\n\n  if (rule.empty) {\n    return r => stypPropertiesBySpec(r, properties);\n  }\n\n  return r => mergeStypProperties(oldSpec(r), stypPropertiesBySpec(r, properties));\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/style-producer\n */\nimport { StypSelector } from '../selector';\nimport { StypProperties } from './properties';\nimport { stypPropertiesBySpec } from './properties.impl';\nimport { StypRule } from './rule';\nimport { StypRule$ as StypRule_ } from './rule.impl';\n\n/**\n * @internal\n */\nconst rootSelector: StypSelector.Normalized = [];\n\n/**\n * Constructs root CSS rule representing global CSS declarations.\n *\n * All other rules are nested within single root.\n *\n * The root CSS rule selector is empty.\n *\n * @category CSS Rule\n * @param properties  Initial CSS rule properties specifier.\n *\n * @returns New root CSS rule.\n */\nexport function stypRoot(properties?: StypProperties.Spec): StypRule {\n  return new StypRule_(undefined, rootSelector, [], properties ? r => stypPropertiesBySpec(r, properties) : undefined);\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/style-producer\n */\nimport { nextArg } from '@proc7ts/call-thru';\nimport {\n  afterAll,\n  AfterEvent,\n  AfterEvent__symbol,\n  afterThe,\n  EventKeeper,\n  EventReceiver,\n  EventSupply,\n  isEventKeeper,\n} from '@proc7ts/fun-events';\nimport { valueProvider } from '@proc7ts/primitives';\nimport { StypSelector } from '../selector';\nimport { StypMapper } from '../value';\nimport { StypProperties } from './properties';\nimport { StypRule } from './rule';\n\n/**\n * A type safe reference to CSS rule.\n *\n * Allows to access an modify CSS properties of the rule in a type safe manner.\n *\n * @category CSS Rule\n * @typeparam T  CSS properties structure of referenced rule.\n */\nexport abstract class StypRuleRef<T extends StypProperties<T>> implements EventKeeper<[T]> {\n\n  /**\n   * Builds an `AfterEvent` keeper of CSS properties.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   *\n   * @returns `AfterEvent` keeper of typed CSS properties map.\n   */\n  abstract read(): AfterEvent<[T]>;\n\n  /**\n   * Starts sending CSS properties and updates to the given `receiver`.\n   *\n   * @param receiver  Target receiver of types CSS properties map.\n   *\n   * @returns CSS properties supply.\n   */\n  abstract read(receiver: EventReceiver<[T]>): EventSupply;\n\n  [AfterEvent__symbol](): AfterEvent<[T]> {\n    return this.read();\n  }\n\n  /**\n   * Sets CSS properties of the referenced rule.\n   *\n   * @param properties  CSS properties specifier. Or nothing to clear them.\n   *\n   * @returns `this` rule instance.\n   */\n  abstract set(properties?: Partial<StypProperties<T>> | EventKeeper<[Partial<StypProperties<T>>]>): this;\n\n  /**\n   * Appends CSS properties to the references CSS rule.\n   *\n   * @param properties  CSS properties specifier.\n   *\n   * @returns `this` rule instance.\n   */\n  abstract add(properties: Partial<StypProperties<T>> | EventKeeper<[Partial<StypProperties<T>>]>): this;\n\n  /**\n   * Clears CSS properties of the referenced rule.\n   *\n   * Calling this method is the same as calling `set()` without properties.\n   *\n   * @returns `this` rule instance.\n   */\n  clear(): this {\n    return this.set();\n  }\n\n}\n\n/**\n * CSS rule referrer.\n *\n * This is a function that obtains CSS rule reference relative to the given root.\n *\n * @category CSS Rule\n * @typeparam T  CSS properties interface of referenced rule.\n */\nexport type RefStypRule<T extends StypProperties<T>> =\n/**\n * @param root  Root CSS rule the constructed reference will be relative to.\n *\n * @returns CSS rule reference.\n */\n    (this: void, root: StypRule) => StypRuleRef<T>;\n\n\n/**\n * @internal\n */\nclass StypRuleRef$<T extends StypProperties<T>> extends StypRuleRef<T> {\n\n  constructor(\n      private readonly _root: StypRule,\n      private readonly _selector: StypSelector,\n      private readonly _map: (root: StypRule) => EventKeeper<[StypMapper.Mappings<T>]>,\n  ) {\n    super();\n  }\n\n  read(): AfterEvent<[T]>;\n  read(receiver: EventReceiver<[T]>): EventSupply;\n  read(receiver?: EventReceiver<[T]>): AfterEvent<[T]> | EventSupply {\n    return (this.read = afterAll({\n      ms: this._map(this._root),\n      ps: this._root.rules.watch(this._selector),\n    }).keepThru(\n        ({\n          ms: [_mappings],\n          ps: [_properties],\n        }) => nextArg<T>(StypMapper.map<T>(_mappings, _properties)),\n    ).F)(receiver);\n  }\n\n  add(properties: EventKeeper<[Partial<StypProperties<T>>]> | Partial<StypProperties<T>>): this {\n    this._root.rules.add(this._selector, properties);\n    return this;\n  }\n\n  set(properties?: EventKeeper<[Partial<StypProperties<T>>]> | Partial<StypProperties<T>>): this {\n    this._root.rules.add(this._selector).set(properties);\n    return this;\n  }\n\n}\n\n/**\n * @category CSS Rule\n */\nexport const RefStypRule = {\n\n  /**\n   * Constructs a CSS rule referrer that maps original CSS properties accordingly to the given `mappings`.\n   *\n   * @typeparam T  CSS properties structure of referenced rule.\n   * @param selector  CSS selector of target rule.\n   * @param mappings  Either a mappings of CSS properties, an event keeper sending such mappings, or a function\n   * returning one of them and accepting a root CSS rule as its only argument.\n   * The constructed reference will be relative to as its only parameter.\n   *\n   * @returns New CSS rule key instance.\n   */\n  by<T extends StypProperties<T>>(\n      selector: StypSelector,\n      mappings:\n          | StypMapper.Mappings<T>\n          | EventKeeper<[StypMapper.Mappings<T>]>\n          | ((this: void, root: StypRule) => StypMapper.Mappings<T> | EventKeeper<[StypMapper.Mappings<T>]>),\n  ): RefStypRule<T> {\n\n    let map: (root: StypRule) => EventKeeper<[StypMapper.Mappings<T>]>;\n\n    if (typeof mappings === 'function') {\n      map = root => mappingsKeeper(mappings(root));\n    } else {\n      map = valueProvider(mappingsKeeper(mappings));\n    }\n\n    return root => new StypRuleRef$(root, selector, map);\n  },\n\n};\n\n/**\n * @internal\n */\nfunction mappingsKeeper<T extends StypProperties<T>>(\n    mappings: StypMapper.Mappings<T> | EventKeeper<[StypMapper.Mappings<T>]>,\n): EventKeeper<[StypMapper.Mappings<T>]> {\n  return isEventKeeper(mappings) ? mappings : afterThe(mappings);\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/style-producer\n */\nimport { afterAll, AfterEvent, AfterEvent__symbol, EventKeeper, EventReceiver, EventSupply } from '@proc7ts/fun-events';\nimport { StypProperties } from './properties';\nimport { StypRule } from './rule';\nimport { RefStypRule, StypRuleRef } from './rule-ref';\n\n/**\n * Named CSS rule references complying to the CSS properties structure.\n *\n * Implements an event keeper interface by sending named CSS properties structures for each CSS rule reference.\n *\n * @category CSS Rule\n * @typeparam R  A type of target map of named CSS properties structures.\n */\nexport class StypRuleRefs<R extends StypRuleRefs.Struct<R>> implements EventKeeper<[R]> {\n\n  /**\n   * CSS rule references by name.\n   *\n   * Each property in this map is a CSS rule reference corresponding to the same named property in properties structure.\n   * I.e. it has the same name and the same properties structure of referenced rule.\n   */\n  readonly refs: { readonly [K in keyof R]: StypRuleRef<R[K]> };\n\n  /**\n   * Constructs named CSS rules by resolving CSS rule referrers.\n   *\n   * @typeparam R  A type of target map of named CSS properties structures.\n   * @param referrers  Named CSS rule referrers to resolve.\n   * @param root  A root CSS rule the references will be relative to.\n   *\n   * @returns New names CSS rules instance.\n   */\n  static by<R extends StypRuleRefs.Struct<R>>(\n      referrers: { readonly [K in keyof R]: RefStypRule<R[K]> },\n      root: StypRule,\n  ): StypRuleRefs<R>;\n\n  static by<R extends StypRuleRefs.Struct<R>>(\n      referrers: { readonly [name: string]: RefStypRule<any> },\n      root: StypRule,\n  ): StypRuleRefs<R> {\n\n    const refs: { [K in keyof R]?: StypRuleRef<any> } = {};\n\n    for (const key of Object.keys(referrers)) {\n      refs[key as keyof R] = referrers[key](root);\n    }\n\n    return new StypRuleRefs<R>(refs as { [K in keyof R]: StypRuleRef<R[K]> });\n  }\n\n  /**\n   * Constructs named CSS rules.\n   *\n   * @param refs  A map of named CSS rule references.\n   */\n  constructor(refs: { readonly [K in keyof R]: StypRuleRef<R[K]> }) {\n    this.refs = refs;\n  }\n\n  /**\n   * Builds an `AfterEvent` keeper of named CSS properties structures for each CSS rule reference.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   *\n   * @returns `AfterEvent` keeper of map of named CSS properties structures.\n   */\n  read(): AfterEvent<[R]>;\n\n  /**\n   * Starts sending named CSS properties structures for each CSS rule reference and updates to the given `receiver`.\n   *\n   * @param receiver Target receiver of map of named CSS properties structures.\n   *\n   * @returns Supply of maps of named CSS properties structures.\n   */\n  read(receiver: EventReceiver<[R]>): EventSupply;\n  read(receiver?: EventReceiver<[R]>): AfterEvent<[R]> | EventSupply {\n\n    const fromAll: AfterEvent<[{ [K in keyof R]: [StypProperties<any>] }]> = afterAll(this.refs);\n\n    return (this.read = (fromAll.keepThru(flattenProperties) as AfterEvent<[R]>).F)(receiver);\n  }\n\n  [AfterEvent__symbol](): AfterEvent<[R]> {\n    return this.read();\n  }\n\n}\n\n/**\n * @internal\n */\nfunction flattenProperties<R extends StypRuleRefs.Struct<R>>(\n    propertiesMap: { readonly [name: string]: [StypProperties<any>] },\n): R {\n\n  const result: { [name: string]: StypProperties<any> } = {};\n\n  for (const name of Object.keys(propertiesMap)) {\n    result[name] = propertiesMap[name][0];\n  }\n\n  return result as R;\n}\n\nexport namespace StypRuleRefs {\n\n  /**\n   * A map of named CSS properties structures.\n   *\n   * Each property in this map corresponds to CSS rule reference with the same CSS properties structure.\n   */\n  export type Struct<R = { readonly [name: string]: StypProperties<any> }> = {\n    readonly [K in keyof R]: StypProperties<any>;\n  };\n\n  /**\n   * A map of named CSS rule referrers.\n   *\n   * These referrers then resolved to the same named CSS rule references.\n   *\n   * @typeparam R  A type of target map of named CSS properties structures.\n   */\n  export type Referrers<R extends Struct<R>> = {\n    readonly [K in keyof R]: RefStypRule<R[K]>;\n  };\n\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/style-producer\n */\nimport { itsEach } from '@proc7ts/a-iterable';\nimport {\n  EventNotifier,\n  EventReceiver,\n  EventSender,\n  eventSupply,\n  isEventSender,\n  noEventSupply,\n  OnEvent,\n  OnEvent__symbol,\n  onEventBy,\n  onNever,\n  onSupplied,\n} from '@proc7ts/fun-events';\nimport { StypRule, StypRuleList } from './rule';\nimport { Rules } from './rules.impl';\n\n/**\n * Dynamically updated CSS rule set.\n *\n * This is an iterable of rules, and an `EventSender` of their updates.\n *\n * @category CSS Rule\n */\nexport interface StypRules extends Iterable<StypRule>, EventSender<[StypRule[], StypRule[]]> {\n\n  [Symbol.iterator](): IterableIterator<StypRule>;\n\n}\n\nexport namespace StypRules {\n\n  /**\n   * A source of CSS rules.\n   *\n   * A dynamically updated CSS rule set can be constructed out of one or more sources by [[stypRules]] and\n   * [[lazyStypRules]] functions.\n   *\n   * This can be one of:\n   * - Single `StypRule` instance.\n   *   A `StypRule.rules.self` is used instead. I.e. a list containing only the rule itself.\n   * - A `StypRules` instance.\n   *   It is used as is.\n   * - A promise of one of the above.\n   *   The resolved value is used as an actual source.\n   *   No rules are available until resolution.\n   * - A function returning one of the above.\n   *   The function call result is used as an actual source.\n   *   The function will be called lazily upon rules access.\n   */\n  export type Source =\n      | StypRule\n      | StypRules\n      | Promise<StypRule | StypRules>\n      | ((this: void) => StypRule | StypRules | Promise<StypRule | StypRules>);\n\n}\n\n/**\n * @internal\n */\nconst noStypRules: StypRuleList = (/*#__PURE__*/ new Rules({\n  [OnEvent__symbol]() {\n    return onNever;\n  },\n  [Symbol.iterator](): IterableIterator<StypRule> {\n    return [][Symbol.iterator]();\n  },\n}));\n\n/**\n * Constructs dynamically updated CSS rule list out of rule sources.\n *\n * @category CSS Rule\n * @param sources  CSS rule sources.\n *\n * @returns Dynamic CSS rule list.\n */\nexport function stypRules(...sources: StypRules.Source[]): StypRuleList {\n  return sources.length ? rulesByList(sources.map(rulesFromSource)) : noStypRules;\n}\n\n/**\n * @internal\n */\nfunction rulesFromSource(source: StypRules.Source): StypRules {\n  return typeof source === 'function' ? evalRules(source) : rulesByValue(source);\n}\n\n/**\n * Constructs lazily updated CSS rule list out of rule sources.\n *\n * In contrast to [[stypRules]] this one does not evaluate sources (e.g. does not call source functions) until there\n * is an updates receiver registered.\n *\n * This means that the constructed rule set won't necessary contain the rules from all sources originally. It will\n * report them as updates instead.\n *\n * @category CSS Rule\n * @param sources  CSS rule sources.\n *\n * @returns Dynamic CSS rule list.\n */\nexport function lazyStypRules(...sources: StypRules.Source[]): StypRuleList {\n  return sources.length ? rulesByList(sources.map(lazyRulesFromSource)) : noStypRules;\n}\n\n/**\n * @internal\n */\nfunction lazyRulesFromSource(source: StypRules.Source): StypRules {\n  return typeof source === 'function' ? lazyRules(source) : rulesByValue(source);\n}\n\n/**\n * @internal\n */\nfunction rulesByList(sources: StypRules[]): StypRuleList {\n  if (sources.length === 1) {\n\n    const source = sources[0];\n\n    return source instanceof StypRuleList ? source : new Rules(source);\n  }\n  return new Rules({\n    *[Symbol.iterator](): IterableIterator<StypRule> {\n      for (const rules of sources) {\n        yield* rules;\n      }\n    },\n    [OnEvent__symbol](): OnEvent<[StypRule[], StypRule[]]> {\n      return onEventBy<[StypRule[], StypRule[]]>(receiver => {\n        sources.forEach(source => onSupplied(source).to({\n          supply: eventSupply().needs(receiver.supply),\n          receive(context, added, removed) {\n            receiver.receive(context, added, removed);\n          },\n        }));\n      }).share();\n    },\n  });\n}\n\n/**\n * @internal\n */\nfunction evalRules(source: (this: void) => StypRule | StypRules | Promise<StypRule | StypRules>): StypRules {\n\n  let rules: StypRules | undefined;\n  const getRules = (): StypRules => rules || (rules = rulesByValue(source()));\n\n  return {\n    [Symbol.iterator](): IterableIterator<StypRule> {\n      return getRules()[Symbol.iterator]();\n    },\n    [OnEvent__symbol]() {\n      return getRules()[OnEvent__symbol]();\n    },\n  };\n}\n\n/**\n * @internal\n */\nfunction lazyRules(source: (this: void) => StypRule | StypRules | Promise<StypRule | StypRules>): StypRules {\n\n  const ruleSet = new Set<StypRule>();\n  const onEvent = onEventBy<[StypRule[], StypRule[]]>(receiver => {\n\n    const rules = rulesByValue(source());\n\n    reportExistingRules(rules, ruleSet, receiver);\n    rules[OnEvent__symbol]().to({\n      supply: receiver.supply.whenOff(() => ruleSet.clear()),\n      receive(context, added, removed) {\n        removed.forEach(rule => ruleSet.delete(rule));\n        added.forEach(rule => ruleSet.add(rule));\n        receiver.receive(context, added, removed);\n      },\n    });\n  }).share();\n\n  return {\n    [OnEvent__symbol]() {\n      return onEvent;\n    },\n    [Symbol.iterator](): IterableIterator<StypRule> {\n      return ruleSet.values();\n    },\n  };\n}\n\n/**\n * @internal\n */\nfunction rulesByValue(source: StypRule | StypRules | Promise<StypRule | StypRules>): StypRules {\n  return source instanceof StypRule ? source.rules.self : isEventSender(source) ? source : asyncRules(source);\n}\n\n/**\n * @internal\n */\nfunction asyncRules(source: Promise<StypRule | StypRules>): StypRules {\n\n  const ruleSet = new Set<StypRule>();\n  const onEvent = onEventBy<[StypRule[], StypRule[]]>(receiver => {\n\n    let sourceSupply = noEventSupply();\n    const { supply } = receiver;\n\n    supply.cuts(sourceSupply)\n        .whenOff(() => ruleSet.clear());\n\n    source.then(\n        resolution => {\n          if (!supply.isOff) {\n\n            const rules = resolution instanceof StypRule ? resolution.rules : resolution;\n\n            reportExistingRules(rules, ruleSet, receiver);\n\n            sourceSupply = onSupplied(rules).to({\n              receive(context, added, removed) {\n                removed.forEach(rule => ruleSet.delete(rule));\n                added.forEach(rule => ruleSet.add(rule));\n                receiver.receive(context, added, removed);\n              },\n            }).needs(supply);\n          }\n        },\n    ).catch(\n        error => supply.off(error),\n    );\n  }).share();\n\n  return {\n    [OnEvent__symbol]() {\n      return onEvent;\n    },\n    [Symbol.iterator](): IterableIterator<StypRule> {\n      return ruleSet.values();\n    },\n  };\n}\n\n/**\n * @internal\n */\nfunction reportExistingRules(\n    rules: StypRules,\n    ruleSet: Set<StypRule>,\n    receiver: EventReceiver.Generic<[StypRule[], StypRule[]]>,\n): void {\n\n  const existing: StypRule[] = [];\n\n  itsEach(rules, rule => {\n    existing.push(rule);\n    ruleSet.add(rule);\n  });\n  if (existing.length) {\n\n    const dispatcher = new EventNotifier<[StypRule[], StypRule[]]>();\n\n    dispatcher.on(receiver);\n    dispatcher.send(existing, []); // Report existing rules as just added\n  }\n}\n","import { HthvItem } from './hthv-item';\n\n/**\n * @internal\n */\nexport interface HthvPartial<I extends HthvItem<any, any, any> = HthvItem> {\n  $: I['$'];\n  n?: I['n'];\n  t?: I['t'];\n  v: I['v'];\n  x?: I['x'];\n  p?: I['p'];\n  pl?: I['pl'];\n}\n\n/**\n * @internal\n */\nexport function hthvItem<I extends HthvItem<any, any, any>>(\n    {\n      $,\n      n,\n      t,\n      v,\n      x = [],\n      p = {},\n      pl = [],\n    }: HthvPartial<I>,\n): I {\n  return {\n    $,\n    n,\n    t,\n    v,\n    x,\n    p,\n    pl,\n  } as I;\n}\n","import { HthvItem, HthvParamItem } from '../hthv-item';\n\n/**\n * @internal\n */\nexport function addParam(\n    {\n      p,\n      pl,\n    }: HthvItem,\n    param: HthvParamItem,\n): void {\n\n  const key = param.n || param.v;\n  const prev = p[key];\n\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  if (!prev || !prev.n && param.n) {\n    p[key] = param;\n  }\n  pl.push(param);\n}\n","/**\n * @internal\n */\nexport const parseNone = (): false => false;\n","import { parseNone } from './parse-none';\nimport { ParserConfig } from './parser-config';\nimport { ParserInput } from './parser-input';\n\nconst datePattern = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d\\d (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d\\d\\d\\d \\d\\d:\\d\\d:\\d\\d GMT/;\n\n/**\n * @internal\n */\nexport function dateTimeParser(\n    { dateTime }: ParserConfig,\n): (input: ParserInput, out: (v: string) => void) => boolean {\n  return dateTime ? parseDateTime : parseNone;\n}\n\nfunction parseDateTime(input: ParserInput, out: (value: string) => void): boolean {\n  input.s = input.s.substring(input.i);\n  input.i = 0;\n  if (datePattern.test(input.s)) {\n    out(input.s.substring(input.i, input.i += 29));\n    return true;\n  }\n  return false;\n}\n","import { ParserConfig } from './parser-config';\nimport { ParserInput } from './parser-input';\n\n/**\n * @internal\n */\nexport function nextInItem({ delimiterOf }: ParserConfig): (input: ParserInput) => string {\n  return input => {\n\n    const c = input.s[input.i];\n\n    input.d = delimiterOf(c);\n\n    return c;\n  };\n}\n","import { HthvDelimiter } from '../hthv-delimiter';\nimport { HthvExtraItem, HthvItem, HthvItemType } from '../hthv-item';\nimport { hthvItem } from '../hthv-partial.impl';\nimport { angleBracketsParser } from './angle-brackets-parser';\nimport { dateTimeParser } from './date-time-parser';\nimport { nextInItem } from './next-in-item';\nimport { parseNone } from './parse-none';\nimport { ParserConfig } from './parser-config';\nimport { ParserInput } from './parser-input';\nimport { quotedStringParser } from './quoted-string-parser';\n\n/**\n * @internal\n */\nexport interface ItemParserConfig {\n  named?: boolean;\n  tagged?: boolean;\n  extra?: boolean;\n  next?: (input: ParserInput) => string;\n}\n\n/**\n * @internal\n */\nexport function itemParser(\n    config: ParserConfig,\n    {\n      named = true,\n      tagged = true,\n      extra = true,\n      next = nextInItem(config),\n    }: ItemParserConfig = {},\n): (input: ParserInput, out: (param: HthvItem<any, any, any>) => void) => boolean {\n\n  const parseAngleBrackets = angleBracketsParser(config);\n  const parseDateTime = dateTimeParser(config);\n  const parseQuotedString = quotedStringParser(config);\n  const parseExtra = extra ? itemParser(config, { next, tagged: false, named: false, extra: false }) : parseNone;\n\n  return (input, out) => {\n\n    let name = '';\n    let type: HthvItemType = 'raw';\n    let tag: string | undefined;\n    let value: string | undefined;\n\n    while (input.i < input.s.length) {\n\n      const c = next(input);\n\n      if (input.d) {\n        if (input.d & (HthvDelimiter.Item | HthvDelimiter.Parameter)) {\n          break;\n        }\n        if (value == null) {\n          if (input.d & HthvDelimiter.Assignment) {\n            value = name ? '' : c;\n            ++input.i;\n            continue;\n          }\n          if (input.d & HthvDelimiter.Quote) {\n            if (tagged || !name) {\n              parseQuotedString(input, v => {\n                if (name) {\n                  type = 'tagged-string';\n                  tag = name;\n                } else {\n                  type = 'quoted-string';\n                }\n                name = '';\n                value = v;\n              });\n            }\n            break;\n          }\n          if (!name && parseAngleBrackets(input, v => {\n            type = 'angle-bracketed-string';\n            value = v;\n          })) {\n            break;\n          }\n          value = name;\n          name = '';\n        } else if (input.d & HthvDelimiter.Quote) {\n          if (tagged || !value) {\n            parseQuotedString(input, v => {\n              if (value) {\n                type = 'tagged-string';\n                tag = value;\n              } else {\n                type = 'quoted-string';\n              }\n              value = v;\n            });\n          }\n          break;\n        } else if (!value && parseAngleBrackets(input, v => {\n          type = 'angle-bracketed-string';\n          value = v;\n        })) {\n          break;\n        }\n      }\n\n      if (value == null) {\n        if (!name && parseDateTime(input, v => value = v)) {\n          type = 'date-time';\n          break;\n        }\n        if (named) {\n          name += c;\n        } else {\n          value = c;\n        }\n      } else if (!value && parseDateTime(input, v => value = v)) {\n        type = 'date-time';\n        break;\n      } else {\n        value += c;\n      }\n\n      ++input.i;\n    }\n\n    let item: HthvItem<any, any>;\n\n    if (value == null) {\n      if (!name) {\n        return false;\n      }\n      item = hthvItem({ $: type, v: name });\n    } else {\n      item = hthvItem({ $: type, n: name || undefined, t: tag, v: value });\n    }\n\n    // noinspection StatementWithEmptyBodyJS\n    while (parseExtra(input, extraItem => item.x.push(extraItem as HthvExtraItem))); // eslint-disable-line curly\n\n    out(item);\n\n    return true;\n  };\n}\n","import { HthvDelimiter } from '../hthv-delimiter';\nimport { ParserConfig } from './parser-config';\nimport { ParserInput } from './parser-input';\n\n/**\n * @internal\n */\nexport function angleBracketsParser(\n    { delimiterOf }: ParserConfig,\n): (input: ParserInput, out: (v: string) => void) => boolean {\n  return (input, out) => {\n     if (!(delimiterOf(input.s[input.i]) & HthvDelimiter.AngleBracketStart)) {\n       return false;\n     }\n\n     let result = '';\n\n     ++input.i;\n     while (input.i < input.s.length) {\n\n       const c = input.s[input.i++];\n\n       if (delimiterOf(c) & HthvDelimiter.AngleBracketEnd) {\n         break;\n       }\n       result += c;\n     }\n\n     out(result);\n\n     return true;\n  };\n}\n","import { HthvDelimiter } from '../hthv-delimiter';\nimport { ParserConfig } from './parser-config';\nimport { ParserInput } from './parser-input';\n\n/**\n * @internal\n */\nexport function quotedStringParser(\n    { delimiterOf }: ParserConfig,\n): (input: ParserInput, out: (value: string) => void) => void {\n  return (input, out) => {\n\n    let unquoted = '';\n\n    ++input.i;\n    for (; input.i < input.s.length; ++input.i) {\n\n      const c = input.s[input.i];\n\n      if (c === '\\\\') {\n\n        const next = input.s[++input.i];\n\n        if (next) {\n          unquoted += next;\n        } else {\n          unquoted += c;\n        }\n      } else if (delimiterOf(c) & HthvDelimiter.Quote) {\n        ++input.i;\n        out(unquoted);\n        return;\n      } else {\n        unquoted += c;\n      }\n    }\n\n    out(unquoted);\n  };\n}\n","import { HthvDelimiter } from '../hthv-delimiter';\nimport { ParserConfig } from './parser-config';\nimport { ParserInput } from './parser-input';\n\n/**\n * @internal\n */\nexport function nextInComment({ delimiterOf }: ParserConfig): (input: ParserInput) => string {\n  return input => {\n\n    let c = input.s[input.i];\n\n    if (c !== '\\\\') {\n      input.d = delimiterOf(c);\n      return c;\n    }\n\n    ++input.i;\n    if (input.i < input.s.length) {\n      c = input.s[input.i];\n      input.d = delimiterOf(c) ? HthvDelimiter.NonToken : HthvDelimiter.None;\n    } else {\n      input.d = HthvDelimiter.NonToken;\n    }\n\n    return c;\n  };\n}\n","import { HthvDelimiter } from '../hthv-delimiter';\nimport { ParserConfig } from './parser-config';\nimport { ParserInput } from './parser-input';\n\n/**\n * @internal\n */\nexport function spacesParser({ delimiterOf }: ParserConfig): (input: ParserInput) => boolean {\n  return input => {\n\n    const start = input.i;\n\n    do {\n\n      const c = input.s[input.i];\n\n      if (!(delimiterOf(c) & HthvDelimiter.Space)) {\n        break;\n      }\n      input.i++;\n    } while (input.i < input.s.length);\n\n    return input.i !== start;\n  };\n}\n","import { HthvDelimiter } from '../hthv-delimiter';\nimport { HthvParamItem } from '../hthv-item';\nimport { itemParser, ItemParserConfig } from './item-parser';\nimport { ParserConfig } from './parser-config';\nimport { ParserInput } from './parser-input';\nimport { spacesParser } from './spaces-parser';\n\n/**\n * @internal\n */\nexport function paramParser(\n    config: ParserConfig,\n    opts: ItemParserConfig = {},\n): (input: ParserInput, out: (param: HthvParamItem) => void) => boolean {\n\n  const { delimiterOf } = config;\n  const skipSpaces = spacesParser(config);\n  const parseItem = itemParser(config, { ...opts, tagged: false });\n\n  return (input, out) => {\n    if (!(delimiterOf(input.s[input.i]) & HthvDelimiter.Parameter)) {\n      return false;\n    }\n\n    ++input.i;\n    skipSpaces(input);\n\n    return parseItem(input, out);\n  };\n}\n","import { HthvDelimiter, HthvDelimiterChar } from '../hthv-delimiter';\nimport { HthvParserConfig } from '../hthv-parser';\n\n/**\n * @internal\n */\nexport interface ParserConfig {\n  readonly dateTime?: boolean\n  delimiterOf(this: void, char: string): number;\n}\n\n/**\n * @internal\n */\nexport type DelimitConfig = { [char in HthvDelimiterChar]: number };\n\n/**\n * @internal\n */\nexport const defaultDelimit: DelimitConfig = {\n  ' ': HthvDelimiter.NonToken | HthvDelimiter.Space | HthvDelimiter.Item,\n  '\\t': HthvDelimiter.NonToken | HthvDelimiter.Space | HthvDelimiter.Item,\n  ',': HthvDelimiter.NonToken | HthvDelimiter.Item,\n  ';': HthvDelimiter.NonToken | HthvDelimiter.Parameter,\n  '\"': HthvDelimiter.NonToken | HthvDelimiter.Escaped | HthvDelimiter.Quote,\n  '\\\\': HthvDelimiter.NonToken | HthvDelimiter.Escaped,\n  '<': HthvDelimiter.NonToken | HthvDelimiter.AngleBracketStart,\n  '>': HthvDelimiter.NonToken | HthvDelimiter.AngleBracketEnd,\n  '=': HthvDelimiter.NonToken | HthvDelimiter.Assignment,\n  '(': HthvDelimiter.NonToken,\n  ')': HthvDelimiter.NonToken,\n  '/': HthvDelimiter.NonToken,\n  ':': HthvDelimiter.NonToken,\n  '?': HthvDelimiter.NonToken,\n  '@': HthvDelimiter.NonToken,\n  '[': HthvDelimiter.NonToken,\n  ']': HthvDelimiter.NonToken,\n  '{': HthvDelimiter.NonToken,\n  '}': HthvDelimiter.NonToken,\n};\n\n/**\n * @internal\n */\nexport function buildParserConfig(\n    {\n      delimit,\n      dateTime,\n    }: HthvParserConfig = {},\n): ParserConfig {\n\n  const delimitConfig: DelimitConfig = delimit ? { ...defaultDelimit, ...delimit } : defaultDelimit;\n\n  return {\n    dateTime,\n    delimiterOf(c) {\n      return delimitConfig[c as HthvDelimiterChar]\n          || (c >= '\\u0000' && c <= ' ' || c === '\\u007f' ? HthvDelimiter.NonToken : HthvDelimiter.None);\n    },\n  };\n}\n\n/**\n * @internal\n */\nexport const defaultParserConfig = (/*#__PURE__*/ buildParserConfig());\n\n/**\n * @internal\n */\nexport const commentParserConfig = (/*#__PURE__*/ buildParserConfig({\n  delimit: {\n    ':': HthvDelimiter.NonToken | HthvDelimiter.Assignment,\n    '(': HthvDelimiter.NonToken | HthvDelimiter.Escaped | HthvDelimiter.Comment,\n    ')': HthvDelimiter.NonToken | HthvDelimiter.Escaped | HthvDelimiter.Item,\n    ' ': HthvDelimiter.NonToken | HthvDelimiter.Space,\n    '\\t': HthvDelimiter.NonToken | HthvDelimiter.Space,\n    '=': HthvDelimiter.NonToken,\n    ',': HthvDelimiter.NonToken,\n  },\n}));\n","/**\n * @packageDocumentation\n * @module @hatsy/http-header-value\n */\nimport { HthvDelimiterChar } from './hthv-delimiter';\nimport { HthvItem } from './hthv-item';\nimport { hthvItem } from './hthv-partial.impl';\nimport {\n  addParam,\n  buildParserConfig,\n  commentParser,\n  commentParserConfig,\n  defaultParserConfig,\n  itemDelimitParser,\n  itemParser,\n  paramParser,\n  parseNone,\n  ParserInput,\n} from './parser';\n\n/**\n * HTTP header value parser signature.\n *\n * Splits the value onto {@link HthvItem items}.\n *\n * @typeparam N  Whether parsed items have {@link HthvItem.n names}.\n * @typeparam T  Whether parsed items have {@link HthvItem.t tags}.\n * @typeparam P  Whether parsed items have {@link HthvItem.p parameters}.\n */\nexport type HthvParser<\n    N extends 'has-name' | 'no-name' = 'has-name' | 'no-name',\n    T extends 'has-tag' | 'no-tag' = 'has-tag' | 'no-tag',\n    P extends 'has-params' | 'no-params' = 'has-params' | 'no-params'> =\n/**\n * @param value  HTTP header value to parse.\n *\n * @returns An array of parsed value items.\n */\n    (this: void, value: string) => HthvItem<N, T, P>[];\n\n/**\n * A configuration of HTTP header value parser.\n *\n * This is used to {@link newHthvParser configure new parser}.\n */\nexport interface HthvParserConfig {\n\n  /**\n   * Delimits configuration.\n   *\n   * An object literal with {@link HthvDelimiterChar supported delimiter characters} as keys\n   * and corresponding {@link HthvDelimiter delimiters} as values.\n   */\n  readonly delimit?: HthvDelimitConfig;\n\n  /**\n   * Whether to parse date/time values.\n   *\n   * @default `false`\n   */\n  readonly dateTime?: boolean;\n\n  /**\n   * Whether to parse comments.\n   *\n   * @default `false`.\n   */\n  readonly comments?: boolean;\n\n}\n\n/**\n * Delimits configuration for HTTP header value parser.\n *\n * This is an object literal with {@link HthvDelimiterChar supported delimiter characters} as keys\n * and corresponding {@link HthvDelimiter delimiters} as values.\n *\n * The default delimiter configuration is used for omitted characters.\n */\nexport type HthvDelimitConfig = { readonly [char in HthvDelimiterChar]?: number };\n\n/**\n * Creates and configures new HTTP header value parser.\n *\n * @param config  New parser configuration.\n *\n * @returns New HTTP header value parser function.\n */\nexport function newHthvParser(config?: HthvParserConfig): HthvParser {\n\n  const parserConfig = config ? buildParserConfig(config) : defaultParserConfig;\n  const parseItemDelimit = itemDelimitParser(parserConfig);\n  const parseParam = paramParser(parserConfig);\n  const parseItem = itemParser(parserConfig);\n  const parseComment = config?.comments ? commentParser(commentParserConfig) : parseNone;\n\n  return headerValue => {\n\n    const result: HthvItem[] = [];\n    const input: ParserInput = { i: 0, s: headerValue };\n\n    // noinspection StatementWithEmptyBodyJS\n    while (parseTopLevelItem()); // eslint-disable-line curly\n\n    return result;\n\n    function parseTopLevelItem(): boolean {\n      return input.i < input.s.length && (\n          parseItemDelimit(input)\n          || parseParam(\n              input,\n              param => {\n                if (!result.length) {\n                  result.push(hthvItem({ $: 'raw', v: '' }));\n                }\n                addParam(result[result.length - 1], param);\n              },\n          )\n          || parseComment(input, item => result.push(item))\n          || parseItem(input, item => result.push(item))\n      );\n    }\n  };\n}\n","import { HthvDelimiter } from '../hthv-delimiter';\nimport { ParserConfig } from './parser-config';\nimport { ParserInput } from './parser-input';\nimport { spacesParser } from './spaces-parser';\n\n/**\n * @internal\n */\nexport function itemDelimitParser(config: ParserConfig): (input: ParserInput) => boolean {\n\n  const { delimiterOf } = config;\n  const skipSpaces = spacesParser(config);\n\n  return input => {\n    if (delimiterOf(input.s[input.i]) & HthvDelimiter.Item) {\n      input.i++;\n      skipSpaces(input);\n      return true;\n    }\n    return false;\n  };\n}\n","import { HthvDelimiter } from '../hthv-delimiter';\nimport { HthvItem } from '../hthv-item';\nimport { hthvItem } from '../hthv-partial.impl';\nimport { addParam } from './add-param';\nimport { itemParser, ItemParserConfig } from './item-parser';\nimport { nextInComment } from './next-in-comment';\nimport { paramParser } from './param-parser';\nimport { ParserConfig } from './parser-config';\nimport { ParserInput } from './parser-input';\nimport { spacesParser } from './spaces-parser';\n\n/**\n * @internal\n */\nexport function commentParser(config: ParserConfig): (input: ParserInput, out: (item: HthvItem) => void) => boolean {\n\n  const { delimiterOf } = config;\n  const skipSpaces = spacesParser(config);\n  const commentParserConfig: ItemParserConfig = {\n    next: nextInComment(config),\n  };\n  const parseItem = itemParser(config, commentParserConfig);\n  const parseParam = paramParser(config, commentParserConfig);\n\n  return (input, out) => {\n    if (!(delimiterOf(input.s[input.i]) & HthvDelimiter.Comment)) {\n      return false;\n    }\n\n    ++input.i;\n\n    let result: HthvItem | undefined;\n\n    // noinspection StatementWithEmptyBodyJS\n    while ( // eslint-disable-line curly\n        skipSpaces(input)\n        || parseParam(\n            input,\n            param => {\n              if (!result) {\n                result = hthvItem({ $: 'raw', v: '' });\n              }\n              addParam(result, param);\n            },\n        )\n        || parseItem(input, item => result = item)\n        );\n\n    ++input.i; // closing parent\n    out(result || hthvItem({ $: 'raw', v: '' }));\n\n    return true;\n  };\n}\n","/**\n * @packageDocumentation\n * @module @hatsy/http-header-value\n */\nimport { HthvParser, newHthvParser } from './hthv-parser';\n\n/**\n * Parses HTTP header value.\n *\n * Splits the value onto {@link HthvItem items}.\n *\n * Parser is configured with default {@link HthvParserConfig config}.\n *\n * Does not recognize comments or date/time values.\n *\n * Treats illegal characters as ASCII letters.\n *\n * @param value  HTTP header value to parse.\n *\n * @returns An array of comma- or space- separated value items.\n */\nexport const hthvParse: HthvParser = (/*#__PURE__*/ newHthvParser());\n\n/**\n * Parses HTTP header value that may contain date/time.\n *\n * Splits the value onto {@link HthvItem items}.\n *\n * Parser is configured with default config except {@link HthvParserConfig.dateTime date/time parsing enabled}.\n *\n * Does not recognize comments.\n *\n * Handles date/time values in [IMF-fixdate] format only.\n *\n * Treats illegal characters as ASCII letters.\n *\n * [IMF-fixdate]: https://tools.ietf.org/html/rfc7231#section-7.1.1.1\n *\n * @param value  HTTP header value to parse.\n *\n * @returns An array of comma- or space- separated value items.\n */\nexport const hthvParseDT: HthvParser = (/*#__PURE__*/ newHthvParser({ dateTime: true }));\n","/**\n * @packageDocumentation\n * @module @hatsy/http-header-value\n */\nimport { HthvDelimiter } from './hthv-delimiter';\nimport { defaultParserConfig } from './parser';\n\n/**\n * Conditionally encloses HTTP header value or its part into double quotes.\n *\n * Quotes will be added if delimiter or special character is present in input `string`, or the input `string` is empty.\n * {@link hthvEscapeQ Escapes} `\"` and `\\` symbols.\n *\n * @param string  A string to quote.\n *\n * @returns Either a string enclosed in double quotes, or original `string` if there is no need to quote it.\n */\nexport function hthvQuote(string: string): string {\n  if (!string) {\n    return '\"\"';\n  }\n\n  const { delimiterOf } = defaultParserConfig;\n  let escaped: undefined | string;\n  let quote = false;\n\n  for (let i = 0; i < string.length; ++i) {\n\n    const c = string[i];\n    const delimiter = delimiterOf(c);\n\n    if (delimiter) {\n      if (delimiter & HthvDelimiter.Escaped) {\n        if (!escaped) {\n          escaped = string.substring(0, i);\n        }\n        escaped += '\\\\' + c;\n      }\n      quote = true;\n    } else if (escaped) {\n      escaped += c;\n    }\n  }\n\n  return quote ? `\"${escaped || string}\"` : string;\n}\n","import { nextArg } from '@proc7ts/call-thru';\nimport { ContextValueSlot } from '@proc7ts/context-values';\nimport { contextDestroyed, ContextUpKey, ContextUpRef } from '@proc7ts/context-values/updatable';\nimport {\n  AfterEvent,\n  afterThe,\n  EventKeeper,\n  EventSender,\n  nextAfterEvent,\n  OnEvent,\n  onSupplied,\n} from '@proc7ts/fun-events';\n\n/**\n * @internal\n */\ntype FetchAgent<Res extends any[]> = (\n    this: void,\n    next: (this: void, request?: Request) => OnEvent<Res>,\n    request: Request,\n) => EventSender<Res>;\n\n/**\n * @internal\n */\ntype CombinedFetchAgent<Res extends any[]> = (\n    this: void,\n    next: (this: void, request: Request) => OnEvent<Res>,\n    request: Request,\n) => OnEvent<Res>;\n\n/**\n * @internal\n */\nexport class FetchAgentKey<Res extends any[]>\n    extends ContextUpKey<CombinedFetchAgent<Res>, FetchAgent<Res>>\n    implements ContextUpRef<CombinedFetchAgent<Res>, FetchAgent<Res>> {\n\n  readonly upKey: ContextUpKey.UpKey<CombinedFetchAgent<Res>, FetchAgent<Res>>;\n\n  constructor(name: string) {\n    super(name);\n    this.upKey = this.createUpKey(\n        slot => slot.insert(slot.seed.keepThru(\n            (...agents) => {\n              if (agents.length) {\n                return nextArg(combineFetchAgents(agents));\n              }\n              if (slot.hasFallback && slot.or) {\n                return nextAfterEvent(slot.or);\n              }\n              return defaultFetchAgent;\n            },\n        )),\n    );\n  }\n\n  grow(\n      slot: ContextValueSlot<\n          CombinedFetchAgent<Res>,\n          EventKeeper<FetchAgent<Res>[]> | FetchAgent<Res>,\n          AfterEvent<FetchAgent<Res>[]>>,\n  ): void {\n\n    let delegated: CombinedFetchAgent<Res>;\n\n    slot.context.get(\n        this.upKey,\n        slot.hasFallback ? { or: slot.or != null ? afterThe(slot.or) : slot.or } : undefined,\n    )!.to(\n        agent => delegated = agent,\n    ).whenOff(\n        reason => delegated = contextDestroyed(reason),\n    );\n\n    slot.insert((next, request) => delegated(next, request));\n  }\n\n}\n\n/**\n * @internal\n */\nfunction defaultFetchAgent<Res extends any[]>(\n    next: (this: void, request: Request) => OnEvent<Res>,\n    request: Request,\n): OnEvent<Res> {\n  return next(request);\n}\n\n/**\n * @internal\n */\nexport function combineFetchAgents<Res extends any[]>(agents: FetchAgent<Res>[]): CombinedFetchAgent<Res> {\n  return (next, request) => {\n\n    const fetch: (agentIdx: number, agentRequest: Request) => OnEvent<Res> = (agentIdx, agentRequest) => {\n\n      const agent = agents[agentIdx];\n\n      if (!agent) {\n        return next(agentRequest);\n      }\n\n      return onSupplied(\n          agent(\n              (nextRequest = agentRequest) => fetch(agentIdx + 1, nextRequest),\n              agentRequest,\n          ),\n      );\n    };\n\n    return fetch(0, request);\n  };\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { ContextUpRef } from '@proc7ts/context-values/updatable';\nimport { EventSender, OnEvent } from '@proc7ts/fun-events';\nimport { FetchAgentKey } from './fetch-agent-key.impl';\n\n/**\n * HTTP fetch agent signature.\n *\n * The agent can be used to alter [[HttpFetch]] processing. For that it should be registered in appropriate context.\n *\n * All registered agents are organized into chain. The first agent in chain is called by [[HttpFetch]].\n */\nexport type HttpFetchAgent =\n/**\n * @param next  Either calls the next agent in chain, or actually fetches the data if this agent is the last one.\n * Accepts an optional `Request` parameter. The original request will be used instead when omitted.\n * @param request  HTTP request.\n *\n * @returns An `EventSender` of response object(s). It is returned either to preceding agent in chain, or as a result of\n * [[HttpFetch]] call.\n */\n    (\n        this: void,\n        next: (this: void, request?: Request) => OnEvent<[Response]>,\n        request: Request,\n    ) => EventSender<[Response]>;\n\nexport namespace HttpFetchAgent {\n\n  /**\n   * Combined HTTP fetch agent signature.\n   *\n   * This is what is available under [[HttpFetchAgent]] key.\n   */\n  export type Combined =\n  /**\n   * @param next  Either calls the next agent in chain, or actually fetches the data if this agent is the last one.\n   * Accepts `Request` parameter.\n   * @param request  HTTP request.\n   *\n   * @returns An `OnEvent` registrar of response object(s) receivers. It is returned as a result of [[HttpFetch]] call.\n   */\n      (\n          this: void,\n          next: (this: void, request: Request) => OnEvent<[Response]>,\n          request: Request,\n      ) => OnEvent<[Response]>;\n\n}\n\n/**\n * A key of context value containing an [[HttpFetchAgent]] instance.\n *\n * The agent returned combines all registered agents into one. If no agent registered it just performs the fetch.\n */\nexport const HttpFetchAgent: ContextUpRef<HttpFetchAgent.Combined, HttpFetchAgent> = (\n    /*#__PURE__*/ new FetchAgentKey<[Response]>('http-fetch-agent')\n);\n","import { EventEmitter, EventSupply, eventSupply, OnEvent, onEventBy } from '@proc7ts/fun-events';\nimport { DomEventDispatcher } from '@proc7ts/fun-events/dom';\nimport { BootstrapContext, BootstrapWindow } from '@wesib/wesib';\nimport { HttpFetch } from './http-fetch';\nimport { HttpFetchAgent } from './http-fetch-agent';\n\nconst HttpFetchAborted = {};\n\n/**\n * @internal\n */\nexport function newHttpFetch(context: BootstrapContext): HttpFetch {\n\n  const window = context.get(BootstrapWindow);\n  const agent = context.get(HttpFetchAgent);\n\n  return (input, init) => agent(fetch, new Request(input, init));\n\n  function fetch(request: Request): OnEvent<[Response]> {\n    return onEventBy(receiver => {\n\n      const responseEmitter = new EventEmitter<[Response]>();\n      let supply: EventSupply;\n\n      if ('AbortController' in window) {\n\n        const abortController = new window.AbortController();\n        const { signal } = abortController;\n\n        supply = eventSupply(reason => {\n          if (reason === HttpFetchAborted) {\n            abortController.abort();\n          }\n        });\n        receiver.supply.whenOff(() => supply.off(HttpFetchAborted)).needs(supply);\n        responseEmitter.on({\n          supply,\n          receive(ctx, response) {\n            receiver.receive(ctx, response);\n          },\n        });\n\n        const customSignal = request.signal;\n\n        if (customSignal) {\n          new DomEventDispatcher(customSignal).on('abort').once(() => abortController.abort());\n          if (customSignal.aborted) {\n            abortController.abort();\n          }\n        }\n\n        request = new Request(request, { signal });\n      } else {\n        supply = responseEmitter.on(receiver);\n      }\n\n      window.fetch(request)\n          .then(response => {\n            responseEmitter.send(response);\n            supply.off();\n          })\n          .catch(reason => supply.off(reason));\n    });\n  }\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { FnContextKey, FnContextRef } from '@proc7ts/context-values/updatable';\nimport { OnEvent } from '@proc7ts/fun-events';\nimport { bootstrapDefault } from '@wesib/wesib';\nimport { newHttpFetch } from './http-fetch.impl';\n\n/**\n * HTTP fetch function signature.\n *\n * This is a function that wraps browser's\n * [fetch()](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch) function and provides\n * additional functionality. E.g. request interception.\n *\n * This function returns an `OnEvent` sender instead of a `Promise`. This allows to report multiple responses.\n * E.g. when the resource refresh requested and delivered. The request is sent whenever a receiver is registered\n * in this sender. When the fetch completes the response supply is cut off, and callbacks registered with its\n * `whenOff()` method are notified. When fetch fails for whatever reason, this reason is passed to these callbacks.\n * The fetch can be aborted by cutting off the response supply. I.e. by calling its `off()` method.\n *\n * An instance of [[HttpFetch]] is available from bootstrap context.\n */\nexport type HttpFetch =\n/**\n * @param input  The resource to fetch. This can either an URL string, or a `Request` object.\n * @param init  Custom settings to apply to the request.\n *\n * @returns An `OnEvent` sender of responses.\n */\n    (this: void, input: RequestInfo, init?: RequestInit) => OnEvent<[Response]>;\n\n/**\n * A key of bootstrap context value containing an [[HttpFetch]] instance.\n */\nexport const HttpFetch: FnContextRef<Parameters<HttpFetch>, ReturnType<HttpFetch>> = (\n    /*#__PURE__*/ new FnContextKey<Parameters<HttpFetch>, ReturnType<HttpFetch>>(\n        'http-fetch',\n        {\n          byDefault: bootstrapDefault(newHttpFetch),\n        },\n    )\n);\n","import { ContextKey, ContextKey__symbol, SingleContextKey } from '@proc7ts/context-values';\nimport { EventEmitter, OnEvent, trackValue, ValueTracker } from '@proc7ts/fun-events';\nimport { DomEventDispatcher } from '@proc7ts/fun-events/dom';\nimport {\n  BootstrapContext,\n  BootstrapRoot,\n  ComponentContext,\n  ComponentContext__symbol,\n  ComponentEvent,\n} from '@wesib/wesib';\n\n/**\n * @internal\n */\nexport type HierarchyRoot = ValueTracker<ComponentContext | undefined>;\n\n/**\n * @internal\n */\nexport const HierarchyRoot = (/*#__PURE__*/ new SingleContextKey<HierarchyRoot>(\n    'hierarchy-root',\n    {\n      byDefault: bsContext => {\n\n        const root = bsContext.get(BootstrapRoot);\n\n        new DomEventDispatcher(root).on<ComponentEvent>('wesib:component').to(\n            ({ context }: ComponentEvent) => context.get(HierarchyUpdates).issue(),\n        );\n\n        return trackValue();\n      },\n    },\n));\n\nconst HierarchyUpdates__key = (/*#__PURE__*/ new SingleContextKey<HierarchyUpdates>(\n    'hierarchy-updates',\n    {\n      byDefault: context => new HierarchyUpdates(context.get(ComponentContext)),\n    },\n));\n\n/**\n * @internal\n */\nexport class HierarchyUpdates {\n\n  static get [ContextKey__symbol](): ContextKey<HierarchyUpdates> {\n    return HierarchyUpdates__key;\n  }\n\n  readonly on: OnEvent<[ComponentContext]>;\n  readonly send: (this: void) => void;\n  readonly issue: () => void;\n\n  constructor(context: ComponentContext) {\n\n    const updates = new EventEmitter<[ComponentContext]>();\n    const hierarchyRoot = context.get(BootstrapContext).get(HierarchyRoot);\n\n    this.on = updates.on();\n    this.send = () => updates.send(context);\n    this.issue = () => {\n\n      const parent = findParentContext(context);\n\n      if (parent) {\n        parent[0].get(HierarchyUpdates).send();\n      } else {\n        hierarchyRoot.it = context;\n      }\n    };\n  }\n\n}\n\n/**\n * @internal\n */\nexport function findParentContext(of: ComponentContext): [ComponentContext, boolean] | undefined {\n\n  const root = of.get(BootstrapContext).get(BootstrapRoot);\n  let { element } = of as { element: Node };\n  let immediate = true;\n\n  if (element === root) {\n    return;\n  }\n  for (;;) {\n\n    const parent = element.parentNode;\n\n    if (!parent) {\n      return;\n    }\n\n    const ctx = (parent as any)[ComponentContext__symbol] as ComponentContext | undefined;\n\n    if (ctx) {\n      return [ctx, immediate];\n    }\n    if (parent === root) {\n      return;\n    }\n\n    immediate = false;\n    element = parent;\n  }\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport {\n  ContextKey,\n  ContextKey__symbol,\n  ContextRegistry,\n  ContextValues,\n  ContextValueSpec,\n  SingleContextKey,\n} from '@proc7ts/context-values';\nimport {\n  AfterEvent,\n  afterEventBy,\n  EventReceiver,\n  EventSupply,\n  eventSupply,\n  EventSupply__symbol,\n  eventSupplyOf,\n  EventSupplyPeer,\n  trackValue,\n  ValueTracker,\n} from '@proc7ts/fun-events';\nimport { noop } from '@proc7ts/primitives';\nimport { BootstrapContext, ComponentContext } from '@wesib/wesib';\nimport { newHierarchyRegistry } from './hierarchy-registry.impl';\nimport { findParentContext, HierarchyRoot, HierarchyUpdates } from './hierarchy-updates.impl';\n\n/**\n * @internal\n */\nconst HierarchyContext__key = (/*#__PURE__*/ new SingleContextKey<HierarchyContext>(\n    'hierarchy-context',\n    {\n      byDefault: context => new HierarchyContext$(context.get(ComponentContext)),\n    },\n));\n\n/**\n * Component's hierarchy context.\n *\n * Passes provided values to hierarchy contexts of nested components.\n *\n * Available as component context value.\n *\n * @typeparam T  A type of component.\n */\nexport abstract class HierarchyContext<T extends object = any> extends ContextValues implements EventSupplyPeer {\n\n  /**\n   * A key of component context value containing its hierarchy context instance.\n   */\n  static get [ContextKey__symbol](): ContextKey<HierarchyContext> {\n    return HierarchyContext__key;\n  }\n\n  /**\n   * Component context.\n   */\n  abstract readonly context: ComponentContext<T>;\n\n  get [EventSupply__symbol](): EventSupply {\n    return eventSupplyOf(this.context);\n  }\n\n  /**\n   * Builds an `AfterEvent` keeper of enclosing component's hierarchy context.\n   *\n   * May send `undefined` when component is outside of hierarchy. E.g. when it is disconnected.\n   *\n   * @returns An `AfterEvent` of enclosing hierarcy context.\n   */\n  abstract up(): AfterEvent<[HierarchyContext?]>;\n\n  /**\n   * Starts sending enclosing component's hierarchy context and updates to the given `receiver`\n   *\n   * May send `undefined` when component is outside of hierarchy. E.g. when it is disconnected.\n   *\n   * @param receiver  Target receiver of enclosing hierarchy context.\n   *\n   * @returns Enclosing hierarchy context supply.\n   */\n  abstract up(receiver: EventReceiver<[HierarchyContext?]>): EventSupply;\n\n  /**\n   * Assigns enclosing component to use by default.\n   *\n   * The provided component will be treated as enclosing one until component element connected. After that the real\n   * enclosing component will be used instead.\n   *\n   * @param enclosing  Enclosing component's context to assign, or nothing to remove one.\n   *\n   * @returns `this` instance.\n   */\n  abstract inside(enclosing?: ComponentContext): this;\n\n  /**\n   * Provides hierarchy context value.\n   *\n   * If provided value is updatable (i.e. its key implements `ContextUpKey`), then it will be available in this context,\n   * as well as in all nested hierarchy contexts. Otherwise the value will be available in this context only.\n   *\n   * @typeparam Deps  Dependencies tuple type.\n   * @typeparam Src  Source value type.\n   * @typeparam Seed  Value seed type.\n   * @param spec  Context value specifier.\n   *\n   * @returns A function that removes the given context value specifier when called.\n   */\n  abstract provide<Deps extends any[], Src, Seed>(\n      spec: ContextValueSpec<HierarchyContext<T>, any, Deps, Src, Seed>,\n  ): () => void;\n\n}\n\nclass HierarchyContext$<T extends object> extends HierarchyContext<T> {\n\n  private readonly _parent: ValueTracker<HierarchyContext | undefined>;\n  private readonly _registry: ContextRegistry<HierarchyContext<T>>;\n  readonly get: HierarchyContext<T>['get'];\n\n  constructor(readonly context: ComponentContext<T>) {\n    super();\n\n    const parent = this._parent = trackValue<HierarchyContext>();\n\n    context.whenConnected(noop).cuts(parent);\n\n    const registry = this._registry = newHierarchyRegistry<T>(this.up());\n\n    this.get = registry.newValues().get;\n  }\n\n  provide<Deps extends any[], Src, Seed>(\n      spec: ContextValueSpec<HierarchyContext<T>, any, Deps, Src, Seed>,\n  ): () => void {\n\n    const off = this._registry.provide(spec);\n\n    eventSupplyOf(this).whenOff(off);\n\n    return off;\n  }\n\n  up(): AfterEvent<[HierarchyContext?]>;\n  up(receiver: EventReceiver<[HierarchyContext?]>): EventSupply;\n  up(receiver?: EventReceiver<[HierarchyContext?]>): AfterEvent<[HierarchyContext?]> | EventSupply {\n    return (this.up = afterEventBy<[HierarchyContext?]>(\n        receiver => {\n\n          const { supply } = receiver;\n\n          supply.needs(this);\n\n          const parentHierarchy = trackValue<HierarchyContext>();\n\n          parentHierarchy.by(this._parent);\n          supply.cuts(parentHierarchy);\n\n          const rootSupply = eventSupply().needs(supply);\n          const parentSupply = eventSupply().needs(supply);\n          const updateParent = (): void => {\n\n            const parent = findParentContext(this.context);\n\n            if (parent) {\n\n              const [parentCtx, immediate] = parent;\n\n              parentHierarchy.it = parentCtx.get(HierarchyContext);\n              rootSupply.off();\n              if (immediate) {\n                parentSupply.off();\n              }\n            } else {\n              parentHierarchy.it = undefined;\n            }\n          };\n\n          this.context.get(BootstrapContext).get(HierarchyRoot).read({\n            supply: rootSupply,\n            receive: () => this.context.connected && updateParent(),\n          });\n          parentHierarchy.read().tillOff(parentSupply).consume(\n              newParent => newParent && newParent.context.get(HierarchyUpdates).on.to(updateParent),\n          );\n          parentHierarchy.read(receiver);\n          this.context.whenConnected({\n            supply: eventSupply().needs(supply),\n            receive: updateParent,\n          });\n        },\n    ).share().F)(receiver);\n  }\n\n  inside(enclosing?: ComponentContext): this {\n    this._parent.it = enclosing && enclosing.get(HierarchyContext);\n    return this;\n  }\n\n}\n","import { nextArgs } from '@proc7ts/call-thru';\nimport { ContextRegistry, ContextSeedKey } from '@proc7ts/context-values';\nimport { ContextUpKey } from '@proc7ts/context-values/updatable';\nimport { AfterEvent, EventKeeper, nextAfterEvent } from '@proc7ts/fun-events';\nimport { HierarchyContext } from './hierarchy-context';\n\n/**\n * @internal\n */\nexport function newHierarchyRegistry<T extends object>(\n    up: AfterEvent<[HierarchyContext?]>,\n): ContextRegistry<HierarchyContext<T>> {\n  return new ContextRegistry(\n      <Src, Seed>(key: ContextSeedKey<Src, Seed>) => isContextSeedUpKey(key)\n          ? up.keepThru(\n              upper => upper ? nextAfterEvent(upper.get(key)) : nextArgs(),\n          ) as unknown as Seed\n          : undefined,\n  );\n}\n\n/**\n * @internal\n */\nfunction isContextSeedUpKey<Src>(\n    key: ContextSeedKey<Src | EventKeeper<Src[]>, any>,\n): key is ContextUpKey.SeedKey<Src> {\n  return 'upKey' in key;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport {\n  AfterEvent,\n  AfterEvent__symbol,\n  EventKeeper,\n  EventReceiver,\n  EventSender,\n  EventSupply,\n  OnEvent,\n  OnEvent__symbol,\n} from '@proc7ts/fun-events';\nimport { ElementNode } from './element-node';\n\n/**\n * Dynamically updatable list of selected element nodes.\n *\n * It is an iterable of nodes.\n *\n * Implements an `EventSender` interface by sending added and removed nodes arrays.\n *\n * Implements an `EventKeeper` interface by sending updated node list.\n */\nexport abstract class ElementNodeList<N extends ElementNode = ElementNode>\n    implements Iterable<N>, EventSender<[N[], N[]]>, EventKeeper<[ElementNodeList<N>]> {\n\n  /**\n   * Builds an `OnEvent` sender of this list changes.\n   *\n   * The `[OnEvent__symbol]` property is an alias of this one.\n   *\n   * @returns An `OnEvent` sender of added an removed node arrays.\n   */\n  abstract onUpdate(): OnEvent<[N[], N[]]>;\n\n  /**\n   * Starts sending this list changes to the given `receiver`\n   *\n   * @param receiver  Target receiver of added an removed node arrays.\n   *\n   * @returns List changes supply.\n   */\n  abstract onUpdate(receiver: EventReceiver<[N[], N[]]>): EventSupply;\n\n  abstract [Symbol.iterator](): Iterator<N>;\n\n  [OnEvent__symbol](): OnEvent<[N[], N[]]> {\n    return this.onUpdate();\n  }\n\n  /**\n   * Builds an `AfterEvent` keeper of current node list.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   *\n   * @returns An `AfterEvent` keeper of this list.\n   */\n  abstract read(): AfterEvent<[ElementNodeList<N>]>;\n\n  /**\n   * Starts sending current node list and updates to the given `receiver`.\n   *\n   * @param receiver  Target receiver of this node list.\n   *\n   * @returns Node list supply.\n   */\n  abstract read(receiver: EventReceiver<[ElementNodeList<N>]>): EventSupply;\n\n  [AfterEvent__symbol](): AfterEvent<[ElementNodeList<N>]> {\n    return this.read();\n  }\n\n  /**\n   * Builds an `AfterEvent` keeper of tracked list changes.\n   *\n   * Sends current nodes immediately upon receiver registration as added ones.\n   *\n   * @returns An `AfterEvent` sender of arrays of added and removed nodes.\n   */\n  abstract track(): AfterEvent<[readonly N[], readonly N[]]>;\n\n  /**\n   * Starts sending tracked list changes to the given `receiver`.\n   *\n   * Sends current nodes immediately upon receiver registration as added ones.\n   *\n   * @param receiver  Target receiver of arrays of added and removed nodes.\n   *\n   * @returns Tracked list changes supply.\n   */\n  abstract track(receiver: EventReceiver<[readonly N[], readonly N[]]>): EventSupply;\n\n  /**\n   * Builds an `AfterEvent` keeper of the first node in this list.\n   *\n   * @returns `AfterEvent` keeper of either the first node, or `undefined` when the list is empty.\n   */\n  abstract first(): AfterEvent<[N?]>;\n\n  /**\n   * Starts sending the first node of this list and updates to the given `receiver`.\n   *\n   * @param receiver  Target receiver of either the first node, or `undefined` when the list is empty.\n   *\n   * @returns The first node supply.\n   */\n  abstract first(receiver: EventReceiver<[N?]>): EventSupply;\n\n}\n","import { filterIt, flatMapIt, itsEach, itsFirst, itsIterator, mapIt, overArray } from '@proc7ts/a-iterable';\nimport { nextArg } from '@proc7ts/call-thru';\nimport {\n  AfterEvent,\n  afterEventBy,\n  afterSent,\n  afterSupplied,\n  EventEmitter,\n  EventReceiver,\n  EventSupply,\n  OnEvent,\n  onEventBy,\n} from '@proc7ts/fun-events';\nimport { html__naming } from '@proc7ts/namespace-aliaser';\nimport { isPresent, valuesProvider } from '@proc7ts/primitives';\nimport {\n  BootstrapContext,\n  ComponentClass,\n  DefaultNamespaceAliaser,\n  ElementObserver,\n  ElementObserverInit,\n  isElement,\n} from '@wesib/wesib';\nimport { ElementNode, ElementPickMode } from './element-node';\nimport { ElementNodeList } from './element-node-list';\n\n/**\n * @internal\n */\nconst WATCH_DEEP: ElementObserverInit = { subtree: true };\n\n/**\n * @internal\n */\nexport function elementNodeList<N extends ElementNode>(\n    bsContext: BootstrapContext,\n    root: Element,\n    selectorOrType: string | ComponentClass<any>,\n    nodeOf: (node: Element, optional?: boolean) => N | undefined,\n    { deep, all }: ElementPickMode,\n): ElementNodeList<N> {\n\n  const updates = new EventEmitter<[N[], N[]]>();\n  const init = deep ? WATCH_DEEP : undefined;\n  let cache = new Set<Element>();\n  let iterable: Iterable<N> | undefined;\n  let selector: string | undefined;\n  const overNodes: (nodes: NodeList) => Iterable<Node> = deep ? overNodeSubtree : overArray;\n\n  if (typeof selectorOrType === 'string') {\n    selector = selectorOrType;\n  } else {\n    bsContext.whenDefined(selectorOrType).then(({ elementDef: { name } }) => {\n      iterable = undefined;\n      if (name) {\n        selector = html__naming.name(name, bsContext.get(DefaultNamespaceAliaser));\n        if (updates.size) {\n          // Refresh selection after component name resolution.\n          // This is needed  when new document loaded.\n\n          const selected = refresh();\n\n          if (selected.size) {\n\n            const added = Array.from(\n                filterIt<N | undefined, N>(\n                    mapIt(selected, node => nodeOf(node)),\n                    isPresent,\n                ),\n            );\n\n            /* istanbul ignore if. Can not test native custom element */\n            if (added.length) {\n              updates.send(added, []);\n            }\n          }\n        }\n      }\n    }).catch(console.error);\n  }\n\n  if (!all) {\n    root.addEventListener('wesib:component', event => {\n\n      const element = event.target as Element;\n\n      if (cache.has(element)) {\n\n        const node = nodeOf(element) as N;\n\n        updates.send([node], []);\n      }\n    });\n  }\n\n  class ElementNodeList$ extends ElementNodeList<N> {\n\n    onUpdate(): OnEvent<[N[], N[]]>;\n    onUpdate(receiver: EventReceiver<[N[], N[]]>): EventSupply;\n    onUpdate(receiver?: EventReceiver<[N[], N[]]>): OnEvent<[N[], N[]]> | EventSupply {\n\n      const observer = bsContext.get(ElementObserver)(update);\n\n      return (this.onUpdate = onEventBy<[N[], N[]]>(receiver => {\n\n        const firstReceiver = !updates.size;\n        const supply = updates.on(receiver);\n\n        if (firstReceiver) {\n          refresh();\n          observer.observe(root, init);\n        }\n\n        return supply.whenOff(() => {\n          if (!updates.size) {\n            observer.disconnect();\n            clearCache(); // clear cache as there is no more receivers\n          }\n        });\n      }).F)(receiver);\n    }\n\n    read(): AfterEvent<[ElementNodeList<N>]>;\n    read(receiver: EventReceiver<[ElementNodeList<N>]>): EventSupply;\n    read(receiver?: EventReceiver<[ElementNodeList<N>]>): AfterEvent<[ElementNodeList<N>]> | EventSupply {\n      return (this.read = afterSent<[ElementNodeList<N>]>(\n          this.onUpdate().thru(() => this),\n          valuesProvider(this),\n      ).F)(receiver);\n    }\n\n    track(): AfterEvent<[readonly N[], readonly N[]]>;\n    track(receiver: EventReceiver<[readonly N[], readonly N[]]>): EventSupply;\n    track(\n        receiver?: EventReceiver<[readonly N[], readonly N[]]>,\n    ): AfterEvent<[readonly N[], readonly N[]]> | EventSupply {\n\n      const onUpdate: OnEvent<[readonly N[], readonly N[]]> = this.onUpdate();\n\n      return (this.track = afterEventBy<[readonly N[], readonly N[]]>(receiver => {\n\n        const initialEmitter = new EventEmitter<[readonly N[], readonly N[]]>();\n\n        initialEmitter.on(receiver);\n        initialEmitter.send(Array.from(this), []);\n\n        onUpdate.to(receiver);\n      }).F)(receiver);\n    }\n\n    first(): AfterEvent<[N?]>;\n    first(receiver: EventReceiver<[N?]>): EventSupply;\n    first(receiver?: EventReceiver<[N?]>): AfterEvent<[N?]> | EventSupply {\n      return (this.first = afterSupplied(this.read()).keepThru(\n          list => nextArg<N | undefined>(itsFirst(list)),\n      ).F)(receiver);\n    }\n\n    [Symbol.iterator](): Iterator<N> {\n      return itsIterator(iterable || (iterable = filterIt<N | undefined, N>(\n          mapIt(\n              elements(),\n              element => nodeOf(element),\n          ),\n          isPresent,\n      )));\n    }\n\n  }\n\n  return new ElementNodeList$();\n\n  function elements(): Set<Element> {\n    return updates.size ? cache : refresh();\n  }\n\n  function clearCache(): void {\n    iterable = undefined;\n    cache.clear();\n  }\n\n  function refresh(): Set<Element> {\n    iterable = undefined;\n\n    const list = select();\n\n    if (updates.size) {\n      cache = list; // cache is for receivers only\n    }\n\n    return list;\n  }\n\n  function select(): Set<Element> {\n\n    const sel = selector;\n\n    if (!sel) {\n      return new Set();\n    }\n    if (deep) {\n      return new Set(overArray(root.querySelectorAll(sel)));\n    }\n    return new Set(\n        filterIt(\n            overArray(root.children),\n            item => item.matches(sel),\n        ),\n    );\n  }\n\n  function update(mutations: MutationRecord[]): void {\n\n    const added: N[] = [];\n    const removed: N[] = [];\n\n    mutations.forEach(mutation => {\n      itsEach(\n          filterIt<N | undefined, N>(\n              mapIt(overNodes(mutation.removedNodes), removeNode),\n              isPresent,\n          ),\n          node => removed.push(node),\n      );\n      itsEach(\n          filterIt<N | undefined, N>(\n              mapIt(overNodes(mutation.addedNodes), addNode),\n              isPresent,\n          ),\n          node => added.push(node),\n      );\n    });\n    if (added.length || removed.length) {\n      updates.send(added, removed);\n    }\n  }\n\n  function addNode(node: Node): N | undefined {\n    if (!isElement(node)) {\n      return;\n    }\n    if (selector && node.matches(selector) && !cache.has(node)) {\n      cache.add(node);\n      return nodeOf(node);\n    }\n    return;\n  }\n\n  function removeNode(node: Node): N | undefined {\n    if (!isElement(node)) {\n      return;\n    }\n    if (!cache.delete(node)) {\n      return;\n    }\n    return nodeOf(node, true);\n  }\n\n}\n\nfunction overNodeSubtree(nodes: NodeList): Iterable<Node> {\n  return flatMapIt(\n      overArray(nodes),\n      node => [node, ...overNodeSubtree(node.childNodes)],\n  );\n}\n","import {\n  EventEmitter,\n  eventReceiver,\n  EventReceiver,\n  eventSupply,\n  EventSupply,\n  EventSupply__symbol,\n  eventSupplyOf,\n  noEventSupply,\n  OnEvent,\n  onEventBy,\n  ValueTracker,\n} from '@proc7ts/fun-events';\nimport { BootstrapContext, BootstrapWindow } from '@wesib/wesib';\n\n/**\n * @internal\n */\nclass AttributesObserver {\n\n  private readonly _emitters = new Map<string, EventEmitter<[string | null, string | null]>>();\n  private _observer?: MutationObserver;\n\n  constructor(private readonly _bs: BootstrapContext, readonly element: Element) {\n  }\n\n  private get observer(): MutationObserver {\n    if (this._observer) {\n      return this._observer;\n    }\n\n    const Observer = this._bs.get(BootstrapWindow).MutationObserver;\n\n    return this._observer = new Observer(mutations => this._update(mutations));\n  }\n\n  observe(name: string, receiver: EventReceiver<[string | null, string | null]>): EventSupply {\n\n    const self = this;\n    const observer = this.observer;\n    const emitter = this._emitter(name);\n    const rcv = eventReceiver(receiver);\n    const supply = emitter.on({\n      supply: eventSupply(() => {\n        this._emitters.delete(name);\n        observer.disconnect();\n        if (this._emitters.size) {\n          reconnect();\n        } else {\n          this._observer = undefined;\n        }\n      }).needs(rcv.supply),\n      receive: (ctx, newValue, oldValue) => rcv.receive(ctx, newValue, oldValue),\n    });\n\n    observer.disconnect();\n    reconnect();\n\n    return supply;\n\n    function reconnect(): void {\n      self._update(observer.takeRecords());\n      observer.observe(self.element, {\n        attributes: true,\n        attributeOldValue: true,\n        attributeFilter: Array.from(self._emitters.keys()),\n      });\n    }\n  }\n\n  private _update(mutations: MutationRecord[]): void {\n    mutations.forEach(mutation => {\n\n      const attributeName = mutation.attributeName as string;\n      const emitter = this._emitters.get(attributeName);\n\n      if (emitter) {\n        emitter.send(this.element.getAttribute(attributeName) as string, mutation.oldValue);\n      }\n    });\n  }\n\n  private _emitter(name: string): EventEmitter<[string | null, string | null]> {\n\n    const emitter = new EventEmitter<[string | null, string | null]>();\n\n    this._emitters.set(name, emitter);\n\n    return emitter;\n  }\n\n}\n\n/**\n * @internal\n */\nclass AttributeTracker extends ValueTracker<string | null> {\n\n  private readonly _updates = new EventEmitter<[string | null, string | null]>();\n\n  constructor(\n      private readonly _observer: AttributesObserver,\n      private readonly _name: string,\n  ) {\n    super();\n  }\n\n  get [EventSupply__symbol](): EventSupply {\n    return eventSupplyOf(this._updates);\n  }\n\n  get it(): string | null {\n    return this._observer.element.getAttribute(this._name);\n  }\n\n  set it(value: string | null) {\n    if (value != null) {\n      this._observer.element.setAttribute(this._name, value);\n    } else {\n      this._observer.element.removeAttribute(this._name);\n    }\n  }\n\n  on(): OnEvent<[string | null, string | null]>;\n  on(receiver: EventReceiver<[string | null, string | null]>): EventSupply;\n  on(receiver?: EventReceiver<[string | null, string | null]>): OnEvent<[string | null, string | null]> | EventSupply {\n\n    let observeSupply = noEventSupply();\n\n    return (this.on = onEventBy(receiver => {\n      if (!this._updates.size) {\n        observeSupply = this._observer.observe(\n            this._name,\n            (newValue, oldValue) => this._updates.send(newValue, oldValue),\n        );\n      }\n      receiver.supply.needs(observeSupply);\n      this._updates.on(receiver).whenOff(reason => {\n        if (!this._updates.size) {\n          observeSupply.off(reason);\n        }\n      });\n    }).F)(receiver);\n  }\n\n}\n\n/**\n * @internal\n */\nexport class NodeAttributes {\n\n  private readonly _attrs = new Map<string, AttributeTracker>();\n  private readonly _observer: AttributesObserver;\n\n  constructor(bs: BootstrapContext, element: any) {\n    this._observer = new AttributesObserver(bs, element);\n  }\n\n  get(name: string): ValueTracker<string | null> {\n\n    const existing = this._attrs.get(name);\n\n    if (existing) {\n      return existing;\n    }\n\n    const created = new AttributeTracker(this._observer, name);\n\n    this._attrs.set(name, created);\n\n    return created;\n  }\n\n}\n","import {\n  EventEmitter,\n  EventReceiver,\n  EventSupply,\n  EventSupply__symbol,\n  eventSupplyOf,\n  OnEvent,\n  ValueTracker,\n} from '@proc7ts/fun-events';\nimport { ComponentContext, ComponentState, domPropertyPathTo } from '@wesib/wesib';\n\n/**\n * @internal\n */\nclass PropertyTracker<T> extends ValueTracker<T> {\n\n  private readonly _updates = new EventEmitter<[T, T]>();\n\n  constructor(\n      private readonly _element: any,\n      private readonly _key: PropertyKey,\n  ) {\n    super();\n  }\n\n  get [EventSupply__symbol](): EventSupply {\n    return eventSupplyOf(this._updates);\n  }\n\n  get it(): T {\n    return this._element[this._key] as T;\n  }\n\n  set it(value: T) {\n    this._element[this._key] = value;\n  }\n\n  on(): OnEvent<[T, T]>;\n  on(receiver: EventReceiver<[T, T]>): EventSupply;\n  on(receiver?: EventReceiver<[T, T]>): OnEvent<[T, T]> | EventSupply {\n    return (this.on = this._updates.on().F)(receiver);\n  }\n\n  bind(context: ComponentContext): void {\n\n    const propertyState = context.get(ComponentState).track(domPropertyPathTo(this._key));\n\n    propertyState.onUpdate().to({\n      supply: eventSupplyOf(this),\n      receive: (_ctx, _path, newValue: any, oldValue: any) => this._updates.send(newValue, oldValue),\n    });\n  }\n\n}\n\n/**\n * @internal\n */\nexport class NodeProperties {\n\n  private readonly _props = new Map<PropertyKey, PropertyTracker<any>>();\n  private _context?: ComponentContext<any>;\n\n  constructor(private readonly _element: any) {\n  }\n\n  bind(context: ComponentContext): void {\n    this._context = context;\n    this._props.forEach(prop => prop.bind(context));\n  }\n\n  get<T>(key: PropertyKey): ValueTracker<T> {\n\n    const existing = this._props.get(key);\n\n    if (existing) {\n      return existing;\n    }\n\n    const created = new PropertyTracker<any>(this._element, key);\n\n    if (this._context) {\n      created.bind(this._context);\n    }\n    this._props.set(key, created);\n\n    return created;\n  }\n\n}\n","import { ValueTracker } from '@proc7ts/fun-events';\nimport {\n  BootstrapContext,\n  ComponentClass,\n  ComponentContext,\n  ComponentContext__symbol,\n  ComponentEvent,\n  ElementAdapter,\n} from '@wesib/wesib';\nimport { ComponentNode, ComponentTreeNode, ElementNode, ElementPickMode } from './element-node';\nimport { ElementNodeList } from './element-node-list';\nimport { elementNodeList } from './element-node-list.impl';\nimport { NodeAttributes } from './node-attributes.impl';\nimport { NodeProperties } from './node-properties.impl';\n\n/**\n * @internal\n */\nconst ElementNode__symbol = (/*#__PURE__*/ Symbol('element-node'));\n\n/**\n * @internal\n */\nclass ElementNode$ implements ComponentTreeNode {\n\n  private readonly _attrs: NodeAttributes;\n  private readonly _props: NodeProperties;\n\n  constructor(private readonly _bs: BootstrapContext, readonly element: Element) {\n    this._attrs = new NodeAttributes(_bs, element);\n    this._props = new NodeProperties(element);\n    (element as any)[ElementNode__symbol] = this;\n\n    const context = (element as any)[ComponentContext__symbol] as ComponentContext<any> | undefined;\n\n    if (context) {\n      this._bind(context);\n    } else {\n      element.addEventListener('wesib:component', event => this._bind((event as ComponentEvent).context));\n    }\n  }\n\n  get context(): ComponentContext<any> | undefined {\n    return (this.element as any)[ComponentContext__symbol] as ComponentContext<any> | undefined;\n  }\n\n  get parent(): ElementNode | null {\n\n    const parent = this.element.parentNode;\n\n    return parent && elementNodeOf(this._bs, parent as Element);\n  }\n\n  select(selector: string | ComponentClass<any>, mode?: ElementPickMode): ElementNodeList<any> {\n    return selectNodes(this._bs, this.element, selector, mode);\n  }\n\n  attribute(name: string): ValueTracker<string | null> {\n    return this._attrs.get(name);\n  }\n\n  property<V>(key: PropertyKey): ValueTracker<V> {\n    return this._props.get(key);\n  }\n\n  private _bind(context: ComponentContext): void {\n    this._props.bind(context);\n  }\n\n}\n\n/**\n * @internal\n */\nexport function elementNodeOf(bsContext: BootstrapContext, element: Element, optional?: boolean): ElementNode {\n\n  const existing = (element as any)[ElementNode__symbol] as ElementNode;\n\n  return (existing || optional) ? existing : new ElementNode$(bsContext, element);\n}\n\n/**\n * @internal\n */\nfunction selectNodes(\n    bsContext: BootstrapContext,\n    root: Element,\n    selector: string | ComponentClass<any>,\n    mode: ElementPickMode = {},\n): ElementNodeList<any> {\n  if (mode.all) {\n    return elementNodeList<ElementNode>(\n        bsContext,\n        root,\n        selector,\n        (element, optional) => elementNodeOf(bsContext, element, optional),\n        mode,\n    );\n  }\n\n  const adapter = bsContext.get(ElementAdapter);\n\n  return elementNodeList<ComponentNode>(\n      bsContext,\n      root,\n      selector,\n      (element, optional) => adapter(element) && elementNodeOf(bsContext, element, optional) as ComponentNode,\n      mode,\n  );\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { SingleContextKey, SingleContextRef } from '@proc7ts/context-values';\nimport { ValueTracker } from '@proc7ts/fun-events';\nimport { BootstrapContext, ComponentClass, ComponentContext } from '@wesib/wesib';\nimport { ElementNodeList } from './element-node-list';\nimport { elementNodeOf } from './element-node.impl';\n\n/**\n * Arbitrary element node within component tree. Either bound to some component or not.\n */\nexport type ElementNode =\n    | RawElementNode\n    | ComponentNode;\n\n/**\n * Component tree node representing arbitrary element.\n *\n * This is a base interface of all element node implementations.\n */\nexport interface ComponentTreeNode {\n\n  /**\n   * The element itself.\n   */\n  readonly element: any;\n\n  /**\n   * A context of component bound to this element, if any.\n   */\n  readonly context?: ComponentContext<any>;\n\n  /**\n   * Parent element node, or `null` if element has no parent.\n   */\n  readonly parent: ElementNode | null;\n\n  /**\n   * Selects component nodes matching the given selector.\n   *\n   * @param selector  Simple CSS selector of nested components.\n   * @param mode  Component nodes pick mode.\n   *\n   * @returns Dynamically updatable list of matching component nodes.\n   */\n  select(\n      selector: string,\n      mode?: ComponentPickMode,\n  ): ElementNodeList<ComponentNode>;\n\n  /**\n   * Selects component nodes of the given type.\n   *\n   * @param componentType  Nested component type with custom element name.\n   * @param mode  Component nodes pick mode.\n   *\n   * @returns Dynamically updatable list of matching component nodes.\n   */\n  select<T extends object>(\n      componentType: ComponentClass<T>,\n      mode?: ComponentPickMode,\n  ): ElementNodeList<ComponentNode<T>>;\n\n  /**\n   * Selects element nodes matching the given selector.\n   *\n   * @param selector  Simple CSS selector of nested elements. E.g. CSS class selector.\n   * @param mode  A mode of node picking from component tree.\n   *\n   * @returns Dynamically updatable list of matching element nodes.\n   */\n  select(\n      selector: string,\n      mode: ElementPickMode,\n  ): ElementNodeList;\n\n  /**\n   * Tracks element attribute.\n   *\n   * `null` attribute value corresponds to its absence. Setting it to `null` removes attribute.\n   *\n   * @param name  Target attribute name.\n   *\n   * @returns Target attribute's value tracker.\n   */\n  attribute(name: string): ValueTracker<string | null>;\n\n  /**\n   * Tracks element element property.\n   *\n   * The changes are tracked with `StateTracker`. So it is expected that the target property notifies on its changes\n   * with state updater. E.g. when it is defined by `@DomProperty` decorator.\n   *\n   * @param key  Target property key.\n   *\n   * @returns Target property's value tracker.\n   */\n  property<V>(key: PropertyKey): ValueTracker<V>;\n\n}\n\n/**\n * Element node representing raw element not bound to any component.\n */\nexport interface RawElementNode extends ComponentTreeNode {\n\n  readonly context?: undefined;\n\n}\n\n/**\n * Element node representing an element bound to some component.\n */\nexport interface ComponentNode<T extends object = any> extends ComponentTreeNode {\n\n  readonly context: ComponentContext<T>;\n\n}\n\n/**\n * A key of component context value containing a component node instance.\n */\nexport const ComponentNode: SingleContextRef<ComponentNode> = (\n    /*#__PURE__*/ new SingleContextKey<ComponentNode>(\n        'component-node',\n        {\n          byDefault(context) {\n            return elementNodeOf(\n                context.get(BootstrapContext),\n                context.get(ComponentContext).element,\n            ) as ComponentNode;\n          },\n        },\n    )\n);\n\n/**\n * A mode of node picking from component tree.\n */\nexport interface ElementPickMode {\n\n  /**\n   * Set to `true` to select arbitrary nodes. Otherwise - select only component nodes.\n   */\n  all?: boolean;\n\n  /**\n   * Set to `true` to select from entire subtree. Otherwise - select from element child nodes only.\n   */\n  deep?: boolean;\n\n}\n\n/**\n * A mode that picks component nodes from component tree.\n */\nexport interface ComponentPickMode extends ElementPickMode {\n\n  all?: false;\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\n/**\n * Extracts URL contained in the hash of another URL.\n *\n * Extracted hash URL is based on origin of the original URL. Still, it may be absolute one.\n *\n * Input URL is never altered.\n *\n * @param url  An URL to extract hash from.\n *\n * @returns URL extracted from hash.\n */\nexport function getHashURL(url: URL): URL {\n  return new URL(url.hash.substring(1), url.origin);\n}\n\n/**\n * Creates an URL based on original one, but with hash substituted by the given hash URL.\n *\n * The hash URL is substituted as following:\n *\n * 1. If the hash URL's origin is not the same as the one of the base one, or if it contains a username,\n *    then absolute hash URL is substituted:\n * 2. Otherwise:\n *    - pathname is substituted, unless it is equal to `/` and no hash and search parameters present,\n *    - search parameters are substituted when at least one present,\n *    - hash is substituted only when present.\n *\n * Input URLs are never altered.\n *\n * @param url  Base URL.\n * @param hashURL  Hash URL to substitute.\n *\n * @returns URL with updated hash.\n */\nexport function setHashURL(url: URL, hashURL: URL): URL {\n  if (hashURL.origin !== url.origin || hashURL.username) {\n    return new URL(`#${hashURL}`, url);\n  }\n\n  const { pathname, search, hash } = hashURL;\n  const result = new URL('', url);\n\n  result.hash = (search || hash || pathname.length > 1) ? (pathname + search + hash) : (search + hash);\n\n  return result;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { Page } from './page';\nimport { PageParamContext } from './page-param-context';\n\n/**\n * A key of {@link PageParam.Ref page parameter request} property containing requested page parameter.\n */\nexport const PageParam__symbol = (/*#__PURE__*/ Symbol('page-param'));\n\n/**\n * Page navigation parameter.\n *\n * Can applied before navigation happened (i.e. to [[LeavePageEvent]]). Then it will be available to the target page\n * both before and after navigation.\n *\n * @typeparam T  Parameter value type.\n * @typeparam I  Parameter input type.\n */\nexport abstract class PageParam<T, I> implements PageParam.Ref<T, I> {\n\n  get [PageParam__symbol](): this {\n    return this;\n  }\n\n  /**\n   * Creates page parameter handle.\n   *\n   * This method is called when {@link Page.put assigning new page parameter}. It is called at most once per request,\n   * unless this parameter is assigned already. A {@link PageParam.Handle.put} method will be called instead\n   * in the latter case.\n   *\n   * @param page  A page to assign navigation parameter to.\n   * @param input  Parameter input used to construct its initial value.\n   * @param context  Page parameter context.\n   *\n   * @returns New page parameter value handle.\n   */\n  abstract create(page: Page, input: I, context: PageParamContext): PageParam.Handle<T, I>;\n\n  /**\n   * Creates default page parameter handle.\n   *\n   * This method is called when {@link Page.get requesting page parameter} which value is not present in the page.\n   * The value handle returned is assigned to the page.\n   *\n   * Returns nothing by default.\n   *\n   * @param _page  A page to assign navigation parameter to.\n   * @param _context  Page parameter context.\n   *\n   * @returns New page parameter value handle or nothing if there is no default value.\n   */\n  byDefault(_page: Page, _context: PageParamContext): PageParam.Handle<T, I> | undefined {\n    return;\n  }\n\n}\n\nexport namespace PageParam {\n\n  /**\n   * Page navigation parameter reference.\n   *\n   * @typeparam T  Parameter value type.\n   * @typeparam I  Parameter input type.\n   */\n  export interface Ref<T, I> {\n\n    /**\n     * Referred page navigation parameter instance.\n     */\n    readonly [PageParam__symbol]: PageParam<T, I>;\n\n  }\n\n  /**\n   * Page navigation parameter that has default value.\n   *\n   * @typeparam T  Parameter value type.\n   * @typeparam I  Parameter input type.\n   */\n  export interface WithDefaults<T, I> extends PageParam<T, I> {\n\n    byDefault(page: Page, context: PageParamContext): PageParam.Handle<T, I>;\n\n  }\n\n  export namespace WithDefaults {\n\n    /**\n     * A reference to page navigation parameter that has default value.\n     *\n     * @typeparam T  Parameter value type.\n     * @typeparam I  Parameter input type.\n     */\n    export interface Ref<T, I> {\n\n      /**\n       * Referred page navigation parameter instance.\n       */\n      readonly [PageParam__symbol]: WithDefaults<T, I>;\n\n    }\n\n  }\n\n  /**\n   * Page navigation parameter value handle.\n   *\n   * Holds and maintains parameter value.\n   *\n   * Created by {@link PageParam.create} method.\n   *\n   * @typeparam T  Parameter value type.\n   * @typeparam I  Parameter input type.\n   */\n  export interface Handle<T, I> {\n\n    /**\n     * Returns current parameter value.\n     *\n     * @returns Parameter value.\n     */\n    get(): T;\n\n    /**\n     * Puts page parameter value.\n     *\n     * This method is called when {@link Page.put re-assigning page parameter}. It is called when page parameter\n     * is assigned already and can be used to update it. The update logic is up to the implementation.\n     *\n     * @param input  Parameter input to use when updating its value.\n     */\n    put(input: I): void;\n\n    /**\n     * Transfers parameter to target page.\n     *\n     * This is called right before [[LeavePageEvent]] is fired for each parameter handle of current page.\n     *\n     * @param to  A page to transfer parameter to.\n     * @param when  When the transfer happens. Either `pretend`, `pre-open`, `pre-replace`, `open`, or `return`.\n     * `return` is used when return to page generated by another app version. E.g. from the page that has been\n     * reloaded.\n     *\n     * @returns New parameter handle instance for target page, or `undefined` if nothing to transfer.\n     */\n    transfer?(to: Page, when: 'pretend' | 'pre-open' | 'pre-replace' | 'enter' | 'return'): Handle<T, I> | undefined;\n\n    /**\n     * This method is called when the page this parameter created for is entered.\n     *\n     * @param page  Entered page.\n     * @param when  When the page is entered. Either `init`, `open`, `replace`, `enter`, or `return`.\n     */\n    enter?(page: Page, when: 'init' | 'open' | 'replace' | 'enter' | 'return'): void;\n\n    /**\n     * This method is called when the page this parameter created for is left.\n     */\n    leave?(): void;\n\n    /**\n     * This method is called when page navigation aborted and target page won't be reached.\n     *\n     * The handle won't be accessed after this method call.\n     *\n     * @param at  The page the browser remains at.\n     */\n    stay?(at: Page): void;\n\n    /**\n     * This method is called when the page this parameter is created for is removed from navigation history.\n     *\n     * The handle won't be accessed after this method call.\n     */\n    forget?(): void;\n\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { ContextValueSlot } from '@proc7ts/context-values';\nimport { contextDestroyed, ContextUpKey, ContextUpRef } from '@proc7ts/context-values/updatable';\nimport { AfterEvent, afterThe, EventKeeper, nextAfterEvent } from '@proc7ts/fun-events';\nimport { BootstrapWindow } from '@wesib/wesib';\nimport { Navigation } from './navigation';\nimport { Page } from './page';\nimport { PageParam } from './page-param';\nimport Target = Navigation.Target;\n\n/**\n * Navigation agent signature.\n *\n * The agent is called by navigation methods when leaving current page and may alter navigation processing.\n * E.g. change navigation target. For that it should be registered in appropriate context.\n *\n * All registered agents are organized into chain. The first agent in chain is called by navigation method.\n */\nexport type NavigationAgent =\n/**\n * @param next  Either calls the next agent in chain, or applies the final navigation target if this agent is the last\n * one. Not calling this function effectively prevents navigation.\n * Accepts an optional [[Navigation.Target]] parameter. The original target will be used instead when omitted.\n * @param when  When navigation occurred. Either `pretend`, `pre-open`, or `pre-replace`.\n * @param from  The page to leave.\n * @param to  Navigation target page.\n */\n    (\n        this: void,\n        next: (this: void, target?: Target) => void,\n        when: 'pretend' | 'pre-open' | 'pre-replace',\n        from: Page,\n        to: Page,\n    ) => void;\n\n/**\n * @internal\n */\nclass NavigationAgentKey\n    extends ContextUpKey<NavigationAgent.Combined, NavigationAgent>\n    implements ContextUpRef<NavigationAgent.Combined, NavigationAgent> {\n\n  readonly upKey: ContextUpKey.UpKey<NavigationAgent.Combined, NavigationAgent>;\n\n  constructor(name: string) {\n    super(name);\n    this.upKey = this.createUpKey(\n        slot => {\n\n          const { document } = slot.context.get(BootstrapWindow);\n\n          slot.insert(slot.seed.keepThru(\n              (...agents) => {\n                if (agents.length) {\n                  return combinedAgent;\n                }\n                if (slot.hasFallback && slot.or) {\n                  return nextAfterEvent(slot.or);\n                }\n\n                return defaultNavigationAgent;\n\n                function combinedAgent(\n                    next: (this: void, target: Navigation.URLTarget) => void,\n                    when: 'pretend' | 'pre-open' | 'pre-replace',\n                    from: Page,\n                    to: Page,\n                ): void {\n\n                  return navigate(0, to);\n\n                  function navigate(agentIdx: number, agentTo: Page): void {\n\n                    const agent = agents[agentIdx];\n\n                    if (!agent) {\n                      return next(agentTo);\n                    }\n\n                    agent(\n                        (\n                            {\n                              url: nextURL = agentTo.url,\n                              title: nextTitle = agentTo.title,\n                              // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                              data: nextData = agentTo.data,\n                            }: Navigation.Target = agentTo,\n                        ) => navigate(\n                            agentIdx + 1,\n                            {\n                              url: new URL(String(nextURL), document.baseURI),\n                              title: nextTitle,\n                              // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                              data: nextData,\n                              get visited() {\n                                return agentTo.visited;\n                              },\n                              get current() {\n                                return agentTo.current;\n                              },\n                              get<T>(ref: PageParam.Ref<T, unknown>): T | undefined {\n                                return agentTo.get(ref);\n                              },\n                              put(ref, input) {\n                                agentTo.put(ref, input);\n                              },\n                            },\n                        ),\n                        when,\n                        from,\n                        agentTo,\n                    );\n                  }\n                }\n              },\n          ));\n        },\n    );\n  }\n\n  grow(\n      slot: ContextValueSlot<\n          NavigationAgent.Combined,\n          EventKeeper<NavigationAgent[]> | NavigationAgent,\n          AfterEvent<NavigationAgent[]>>,\n  ): void {\n\n    let delegated: NavigationAgent.Combined;\n\n    slot.context.get(\n        this.upKey,\n        slot.hasFallback ? { or: slot.or != null ? afterThe(slot.or) : slot.or } : undefined,\n    )!.to(\n        agent => delegated = agent,\n    ).whenOff(\n        reason => delegated = contextDestroyed(reason),\n    );\n\n    slot.insert((next, when, from, to) => delegated(next, when, from, to));\n  }\n\n}\n\n/**\n * @internal\n */\nfunction defaultNavigationAgent(\n    next: (this: void, target: Navigation.URLTarget) => void,\n    _when: 'pretend' | 'pre-open' | 'pre-replace',\n    _from: Page,\n    to: Page,\n): void {\n  next(to);\n}\n\nexport namespace NavigationAgent {\n\n  /**\n   * Combined navigation agent signature.\n   *\n   * This is what is available under [[NavigationAgent]] key.\n   */\n  export type Combined =\n  /**\n   * @param next  Either calls the next agent in chain, or applies the final navigation target if this agent is the last\n   * one. Not calling this function effectively prevents navigation.\n   * Accepts an optional [[Navigation.Target]] parameter. The original target will be used instead when omitted.\n   * @param when  When navigation occurred. Either `pretend`, `pre-open`, or `pre-replace`.\n   * @param from  The page to leave.\n   * @param to  Navigation target page.\n   */\n      (\n          this: void,\n          next: (this: void, target: Navigation.URLTarget) => void,\n          when: 'pretend' | 'pre-open' | 'pre-replace',\n          from: Page,\n          to: Page,\n      ) => void;\n\n}\n\n/**\n * A key of context value containing an [[NavigationAgent]] instance.\n *\n * The agent returned combines all registered agents into one. If no agent registered it just performs the navigation.\n */\nexport const NavigationAgent: ContextUpRef<NavigationAgent.Combined, NavigationAgent> = (\n    /*#__PURE__*/ new NavigationAgentKey('navigation-agent')\n);\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { ContextValues } from '@proc7ts/context-values';\n\n/**\n * Page parameter context.\n *\n * Provides values available in bootstrap context.\n */\nexport abstract class PageParamContext extends ContextValues {\n}\n","import { itsEach } from '@proc7ts/a-iterable';\nimport { ContextKey, ContextKey__symbol, ContextRegistry, SingleContextKey } from '@proc7ts/context-values';\nimport { ValueTracker } from '@proc7ts/fun-events';\nimport { noop } from '@proc7ts/primitives';\nimport { BootstrapContext, bootstrapDefault, BootstrapWindow } from '@wesib/wesib';\nimport { Navigation } from './navigation';\nimport { Page } from './page';\nimport { PageParam, PageParam__symbol } from './page-param';\nimport { PageParamContext } from './page-param-context';\n\nconst NavHistory__key = (/*#__PURE__*/ new SingleContextKey<NavHistory>(\n    'nav-history',\n    {\n      byDefault: bootstrapDefault(ctx => new NavHistory(ctx)),\n    },\n));\n\n/**\n * @internal\n */\nexport const NAV_DATA_KEY = 'wesib:navigation:data' as const;\n\n/**\n * @internal\n */\nexport interface PartialNavData {\n  readonly uid?: string;\n  readonly id?: number;\n  readonly data: any;\n}\n\n/**\n * @internal\n */\nexport interface NavData extends PartialNavData {\n  readonly uid: string;\n  readonly id: number;\n}\n\n/**\n * @internal\n */\nexport interface NavDataEnvelope {\n  readonly [NAV_DATA_KEY]: NavData;\n}\n\nfunction extractNavData(state: any): PartialNavData {\n  return state == null || typeof state !== 'object'\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      ? { data: state }\n      : state[NAV_DATA_KEY] as PartialNavData;\n}\n\n/**\n * @internal\n */\nexport class NavHistory {\n\n  static get [ContextKey__symbol](): ContextKey<NavHistory> {\n    return NavHistory__key;\n  }\n\n  private readonly _document: Document;\n  private readonly _location: Location;\n  private readonly _history: History;\n  private readonly _entries = new Map<number, PageEntry>();\n  private readonly _uid: string;\n  private _lastId = 0;\n\n  constructor(private readonly _context: BootstrapContext) {\n    const window = _context.get(BootstrapWindow);\n\n    this._document = window.document;\n    this._location = window.location;\n    this._history = window.history;\n    this._uid = btoa(String(Math.random()));\n  }\n\n  init(): PageEntry {\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const { data } = extractNavData(this._history.state);\n    const entry = this.newEntry({\n      url: new URL(this._location.href),\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      data,\n      title: this._document.title,\n    });\n\n    this._entries.set(entry.id, entry);\n    entry.schedule(() => {\n      entry.enter('init');\n      this._history.replaceState(this._historyState(entry), '');\n    });\n\n    return entry;\n  }\n\n  newEntry(target: Navigation.URLTarget): PageEntry {\n    return new PageEntry(this._context, ++this._lastId, target);\n  }\n\n  open(\n      toEntry: PageEntry,\n      tracker: ValueTracker<PageEntry>,\n  ): void {\n\n    const { page: { title = '', url } } = toEntry;\n\n    this._history.pushState(\n        this._historyState(toEntry),\n        title,\n        url.href,\n    );\n\n    this._enter('open', toEntry, tracker);\n  }\n\n  private _enter(\n      when: 'open' | 'enter',\n      toEntry: PageEntry,\n      tracker: ValueTracker<PageEntry>,\n  ): void {\n\n    const fromEntry = tracker.it;\n\n    this._entries.set(toEntry.id, toEntry);\n\n    try {\n      // Forget all entries starting from next one\n      for (let e = fromEntry.next; e; e = e.next) {\n        this._forget(e);\n      }\n    } finally {\n      toEntry.prev = fromEntry;\n      fromEntry.next = toEntry;\n      toEntry.schedule(() => {\n        try {\n          fromEntry.leave();\n        } finally {\n          toEntry.enter(when);\n        }\n      });\n      tracker.it = toEntry;\n    }\n  }\n\n  replace(\n      toEntry: PageEntry,\n      tracker: ValueTracker<PageEntry>,\n  ): void {\n\n    const fromEntry = tracker.it;\n    const { page: { title = '', url } } = toEntry;\n\n    this._history.replaceState(\n        this._historyState(toEntry),\n        title,\n        url.href,\n    );\n\n    this._entries.set(toEntry.id, toEntry);\n\n    const prev = fromEntry.prev;\n\n    if (prev) {\n      toEntry.prev = prev;\n      prev.next = toEntry;\n    }\n\n    toEntry.schedule(() => {\n      try {\n        fromEntry.leave();\n      } finally {\n        try {\n          this._forget(fromEntry);\n        } finally {\n          toEntry.enter('replace');\n        }\n      }\n    });\n    tracker.it = toEntry;\n  }\n\n  popState(\n      popState: PopStateEvent,\n      tracker: ValueTracker<PageEntry>,\n  ): PageEntry | undefined {\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const { state } = popState;\n\n    if (state == null) {\n      // Hash change\n      if (this._history.state == null) {\n        // Not a return\n        return this._changeHash(tracker);\n      }\n      return; // Already handled by `hashchange` handler\n    }\n\n    const fromEntry = tracker.it;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const { uid, data, id: pageId } = extractNavData(state);\n    let toEntry: PageEntry;\n\n    const existingEntry = uid === this._uid && pageId != null ? this._entries.get(pageId) : undefined;\n\n    if (existingEntry) {\n      toEntry = existingEntry;\n    } else {\n      // Returning to page existed in previous app version\n      toEntry = this.newEntry({\n        url: new URL(this._location.href),\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        data,\n        title: this._document.title,\n      });\n      fromEntry.transfer(toEntry, 'return');\n      this._entries.set(toEntry.id, toEntry);\n      this._history.replaceState(this._historyState(toEntry), '');\n    }\n\n    toEntry.schedule(() => {\n      try {\n        fromEntry.leave();\n      } finally {\n        toEntry.enter('return');\n      }\n    });\n\n    tracker.it = toEntry;\n\n    return toEntry;\n  }\n\n  public hashChange(tracker: ValueTracker<PageEntry>): PageEntry | void {\n    if (this._history.state == null) {\n      // Not a return\n      return this._changeHash(tracker);\n    }\n    // Otherwise, a `popstate` event is also triggered,\n    // and its handler would do the job (or already did).\n  }\n\n  public update(tracker: ValueTracker<PageEntry>, url: URL): PageEntry {\n\n    const oldEntry = tracker.it;\n    const newEntry = new PageEntry(this._context, ++this._lastId, { ...oldEntry.page, url }, oldEntry);\n\n    this._entries.set(newEntry.id, newEntry);\n    this._history.replaceState(this._historyState(newEntry), '', url.href);\n    this._entries.delete(oldEntry.id);\n\n    return tracker.it = newEntry;\n  }\n\n  private _changeHash(tracker: ValueTracker<PageEntry>): PageEntry {\n\n    const fromEntry = tracker.it;\n    const toEntry = this.newEntry({\n      url: new URL(this._location.href),\n      data: null,\n      title: this._document.title,\n    });\n\n    try {\n      fromEntry.transfer(toEntry, 'enter');\n    } finally {\n      this._history.replaceState(this._historyState(toEntry), '');\n      this._enter('enter', toEntry, tracker);\n    }\n\n    return toEntry;\n  }\n\n  private _forget(entry: PageEntry): void {\n    this._entries.delete(entry.id);\n    entry.forget();\n  }\n\n  private _historyState({ id, page: { data } }: PageEntry): NavDataEnvelope {\n    return {\n      [NAV_DATA_KEY]: {\n        uid: this._uid,\n        id,\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        data,\n      },\n    };\n  }\n\n}\n\nconst enum PageStatus {\n  New,\n  Visited,\n  Current,\n}\n\n/**\n * @internal\n */\nexport class PageEntry {\n\n  next?: PageEntry;\n  prev?: PageEntry;\n  private _status: PageStatus = PageStatus.New;\n  readonly page: Page;\n  private readonly _params: Map<PageParam<any, any>, PageParam.Handle<any, any>>;\n  private _update: () => void = noop;\n\n  constructor(\n      private readonly _bsContext: BootstrapContext,\n      readonly id: number,\n      target: Navigation.URLTarget,\n      proto?: PageEntry,\n  ) {\n    this._params = proto ? proto._params : new Map<PageParam<any, any>, PageParam.Handle<any, any>>();\n\n    const entry = this;\n\n    this.page = {\n      get url() {\n        return target.url;\n      },\n      get title() {\n        return target.title;\n      },\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      get data(): any {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return target.data;\n      },\n      get visited() {\n        return !!entry._status;\n      },\n      get current() {\n        return entry._status === PageStatus.Current;\n      },\n      get<T>(ref: PageParam.Ref<T, unknown>): T | undefined {\n        return entry.get(ref);\n      },\n      put(ref, input) {\n        entry.put(ref, input);\n      },\n    };\n  }\n\n  get<T>(ref: PageParam.Ref<T, unknown>): T | undefined {\n\n    const param = ref[PageParam__symbol];\n    const handle: PageParam.Handle<T, unknown> | undefined = this._params.get(param);\n\n    if (handle) {\n      return handle.get();\n    }\n\n    const newHandle = param.byDefault(this.page, this._newContext());\n\n    return newHandle && this._init(param, newHandle);\n  }\n\n  put<T, I>(ref: PageParam.Ref<T, I>, input: I): T {\n\n    const param = ref[PageParam__symbol];\n    const handle: PageParam.Handle<T, I> | undefined = this._params.get(param);\n\n    if (handle) {\n      handle.put(input);\n      return handle.get();\n    }\n\n    return this._init(param, param.create(this.page, input, this._newContext()));\n  }\n\n  private _newContext(): PageParamContext {\n\n    const registry = new ContextRegistry<ParamContext>(this._bsContext);\n\n    class ParamContext extends PageParamContext {\n\n      readonly get: PageParamContext['get'] = registry.newValues().get;\n\n    }\n\n    return new ParamContext();\n  }\n\n  private _init<T, I>(param: PageParam<T, I>, handle: PageParam.Handle<T, I>): T {\n    this._params.set(param, handle);\n\n    if (this.page.current && handle.enter) {\n      handle.enter(this.page, 'init');\n    }\n\n    return handle.get();\n  }\n\n  transfer(to: PageEntry, when: 'pretend' | 'pre-open' | 'pre-replace' | 'enter' | 'return'): void {\n    itsEach(this._params.entries(), ([param, handle]) => {\n      if (handle.transfer) {\n\n        const transferred = handle.transfer(to.page, when);\n\n        if (transferred) {\n          to._params.set(param, transferred);\n        }\n      }\n    });\n  }\n\n  stay(at: Page): void {\n    itsEach(this._params.values(), handle => handle.stay && handle.stay(at));\n  }\n\n  enter(when: 'init' | 'open' | 'replace' | 'enter' | 'return'): void {\n    this._status = PageStatus.Current;\n    itsEach(this._params.values(), handle => handle.enter && handle.enter(this.page, when));\n  }\n\n  leave(): void {\n    this._status = PageStatus.Visited;\n    itsEach(this._params.values(), handle => handle.leave && handle.leave());\n  }\n\n  forget(): void {\n    itsEach(this._params.values(), handle => handle.forget && handle.forget());\n    this._params.clear();\n  }\n\n  schedule(update: () => void): void {\n    this._update = update;\n  }\n\n  apply(): void {\n\n    const update = this._update;\n\n    this._update = noop;\n    update();\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { Navigation } from './navigation';\nimport { Page } from './page';\n\n/**\n * Navigation event.\n */\nexport type NavigationEvent = LeavePageEvent | EnterPageEvent | StayOnPageEvent;\n\n/**\n * Navigation event type.\n */\nexport const enum NavigationEventType {\n\n  /**\n   * {@link EnterPageEvent Enter page event} type.\n   */\n  EnterPage = 'wesib:enterPage',\n\n  /**\n   * {@link LeavePageEvent Leave page event} type.\n   */\n  LeavePage = 'wesib:leavePage',\n\n  /**\n   * {@link StayOnPageEvent Stay on page event} type.\n   */\n  StayOnPage = 'wesib:stayOnPage',\n\n}\n\n/**\n * An event fired when navigation target reached by entering destination page.\n *\n * @event EnterPageEvent#wesib:enterPage\n */\nexport class EnterPageEvent extends Event {\n\n  /**\n   * When navigation event occurred.\n   *\n   * Can be one of:\n   * - `open` when opening a new page,\n   * - `replace` when replacing navigation history entry,\n   * - `enter` when entering new page by user action (e.g. hashchange event),\n   * - `return` when navigated to previously visited entry in navigation history.\n   */\n  readonly when: 'open' | 'replace' | 'enter' | 'return';\n\n  /**\n   * Entered page.\n   */\n  readonly to: Page;\n\n  /**\n   * Constructs enter page event.\n   *\n   * @param type  Event type.\n   * @param init  Initialization options.\n   */\n  constructor(type: string, init: EnterPageEventInit) {\n    super(type, { ...init, cancelable: false });\n    this.when = init.when;\n    this.to = init.to;\n  }\n\n}\n\n/**\n * {@link EnterPageEvent Enter page event} initialization options.\n */\nexport interface EnterPageEventInit extends Omit<EventInit, 'cancelable'> {\n\n  /**\n   * When navigation event occurred.\n   *\n   * Can be one of:\n   * - `open` when opening a new page,\n   * - `replace` when replacing navigation history entry,\n   * - `enter` when entering new page by user action (e.g. hashchange event),\n   * - `return` when navigated to previously visited entry in navigation history.\n   */\n  readonly when: 'open' | 'replace' | 'enter' | 'return';\n\n  /**\n   * Entered page.\n   */\n  readonly to: Page;\n\n}\n\n/**\n * An event fired right before leaving the page in order to navigate to another one.\n *\n * This event can be cancelled in order to prevent actual navigation or history update. The navigation is also\n * cancelled when another navigation initiated by one of the handlers of this event.\n *\n * @event LeavePageEvent#wesib:leavePage\n */\nexport class LeavePageEvent extends Event {\n\n  /**\n   * When navigation event occurred. Either `pre-open` when leaving a page to open a new one, or `pre-replace` when\n   * leaving a page to replace it with another history entry.\n   */\n  readonly when: 'pre-open' | 'pre-replace';\n\n  /**\n   * The page to leave.\n   */\n  readonly from: Page;\n\n  /**\n   * Navigation target page.\n   */\n  readonly to: Page;\n\n  /**\n   * Constructs leave page event.\n   *\n   * @param type  Event type.\n   * @param init  Initialization options.\n   */\n  constructor(type: string, init: LeavePageEventInit) {\n    super(type, { ...init, cancelable: true });\n    this.when = init.when;\n    this.from = init.from;\n    this.to = init.to;\n  }\n\n}\n\n/**\n * {@link LeavePageEvent Leave page event} initialization options.\n */\nexport interface LeavePageEventInit extends Omit<EventInit, 'cancelable'> {\n\n  /**\n   * When navigation event occurred. Either `pre-open` when leaving a page to open a new one, or `pre-replace` when\n   * leaving a page to replace it with another history entry.\n   */\n  readonly when: 'pre-open' | 'pre-replace';\n\n  /**\n   * The page to leave.\n   */\n  readonly from: Page;\n\n  /**\n   * Navigation target page.\n   */\n  readonly to: Page;\n\n}\n\n/**\n * An event fired when navigation cancelled or failed.\n *\n * @event StayOnPageEvent#wesib:stayOnPage\n */\nexport class StayOnPageEvent extends Event {\n\n  /**\n   * When navigation event occurred. Always `stay`.\n   */\n  get when(): 'stay' {\n    return 'stay';\n  }\n\n  /**\n   * The page to stay at.\n   */\n  readonly from: Page;\n\n  /**\n   * Navigation target.\n   */\n  readonly to: Navigation.URLTarget;\n\n  /**\n   * A reason of navigation failure. This is set when navigation failed due to some error.\n   */\n  readonly reason?: any;\n\n  /**\n   * Constructs stay on page event.\n   *\n   * @param type  Event type.\n   * @param init  Initialization options.\n   */\n  constructor(type: string, init: StayOnPageEventInit) {\n    super(type, { ...init, cancelable: true });\n    this.from = init.from;\n    this.to = init.to;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    this.reason = init.reason;\n  }\n\n}\n\n/**\n * {@link StayOnPageEvent Stay on page event} initialization options.\n */\nexport interface StayOnPageEventInit extends Omit<EventInit, 'cancelable'> {\n\n  /**\n   * The page to stay at.\n   */\n  readonly from: Page;\n\n  /**\n   * Navigation target.\n   */\n  readonly to: Navigation.URLTarget;\n\n  /**\n   * A reason of navigation failure. This is set when navigation failed due to some error.\n   */\n  readonly reason?: any;\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { ContextKey, ContextKey__symbol, SingleContextKey } from '@proc7ts/context-values';\nimport {\n  AfterEvent,\n  AfterEvent__symbol,\n  EventKeeper,\n  EventReceiver,\n  EventSender,\n  EventSupply,\n  onAny,\n  OnEvent,\n  OnEvent__symbol,\n  trackValue,\n} from '@proc7ts/fun-events';\nimport { DomEventDispatcher, DomEventListener, OnDomEvent } from '@proc7ts/fun-events/dom';\nimport { mergeFunctions, noop } from '@proc7ts/primitives';\nimport { BootstrapContext, bootstrapDefault, BootstrapWindow } from '@wesib/wesib';\nimport { NavHistory, PageEntry } from './nav-history.impl';\nimport { NavigationAgent } from './navigation-agent';\nimport {\n  EnterPageEvent,\n  LeavePageEvent,\n  NavigationEvent,\n  NavigationEventType,\n  StayOnPageEvent,\n} from './navigation.event';\nimport { Page } from './page';\nimport { PageParam } from './page-param';\n\n/**\n * @internal\n */\nconst Navigation__key = (/*#__PURE__*/ new SingleContextKey<Navigation>(\n    'navigation',\n    {\n      byDefault: bootstrapDefault(createNavigation),\n    },\n));\n\n/**\n * Browser navigation service.\n *\n * Expected to be used as a [History] and [Location] APIs replacement.\n *\n * Fires additional navigation events the browser does not support natively.\n *\n * Implements an `EventSender` interface by sending {@link NavigationEvent navigation events} to registered receivers.\n *\n * Implements an `EventKeeper` interface by sending current {@link Page page} to registered receivers.\n *\n * Available as bootstrap context value.\n *\n * [History]: https://developer.mozilla.org/en-US/docs/Web/API/History\n * [Location]: https://developer.mozilla.org/en-US/docs/Web/API/Location\n */\nexport abstract class Navigation implements EventSender<[NavigationEvent]>, EventKeeper<[Page]> {\n\n  static get [ContextKey__symbol](): ContextKey<Navigation> {\n    return Navigation__key;\n  }\n\n  /**\n   * Current page.\n   */\n  abstract readonly page: Page;\n\n  /**\n   * The number of element in navigation history.\n   */\n  abstract readonly length: number;\n\n  /**\n   * Build an `OnDomEvent` sender of {@link EnterPageEvent enter page events}.\n   *\n   * @returns An `OnDomEvent` sender of {@link EnterPageEvent enter page events}.\n   */\n  abstract onEnter(): OnDomEvent<EnterPageEvent>;\n\n  /**\n   * Starts sending {@link EnterPageEvent enter page events} to the given `listener`.\n   *\n   * @param listener  Target listener of {@link EnterPageEvent enter page events}.\n   *\n   * @returns {@link EnterPageEvent Enter page events} supply.\n   */\n  abstract onEnter(listener: DomEventListener<EnterPageEvent>): EventSupply;\n\n  /**\n   * Builds an `OnDomEvent` sender of {@link LeavePageEvent leave page events}.\n   *\n   * The registered listener may cancel navigation by calling `preventDefault()` method of received event.\n   *\n   * @returns `OnDomEvent` sender of {@link LeavePageEvent leave page events}.\n   */\n  abstract onLeave(): OnDomEvent<LeavePageEvent>;\n\n  /**\n   * Starts sending {@link LeavePageEvent leave page events} to the given `listener`.\n   *\n   * The registered listener may cancel navigation by calling `preventDefault()` method of received event.\n   *\n   * @param listener  Target listener of {@link LeavePageEvent leave page events}.\n   *\n   * @returns {@link LeavePageEvent Leave page events} supply.\n   */\n  abstract onLeave(listener: DomEventListener<LeavePageEvent>): EventSupply;\n\n  /**\n   * Builds an `OnDomEvent` {@link StayOnPageEvent stay on page events}.\n   *\n   * The registered listener is informed when navigation has been cancelled by one of leave page event receivers,\n   * navigation failed due to e.g. invalid URL, or when another navigation request initiated before the page left.\n   *\n   * @returns `OnDomEvent` sender of {@link StayOnPageEvent stay on page events}.\n   */\n  abstract onStay(): OnDomEvent<StayOnPageEvent>;\n\n  /**\n   * Starts sending {@link StayOnPageEvent stay on page events} to the given `listener`.\n   *\n   * @param listener  Target listener of {@link StayOnPageEvent stay on page events}.\n   *\n   * @returns {@link StayOnPageEvent Stay on page events} supply.\n   */\n  abstract onStay(listener: DomEventListener<StayOnPageEvent>): EventSupply;\n\n  /**\n   * Builds an `OnEvent` sender of {@link NavigationEvent navigation events}.\n   *\n   * The `[OnEvent__symbol]` property is an alias of this one.\n   *\n   * @returns `OnEvent` sender of {@link NavigationEvent navigation events}.\n   */\n  abstract on(): OnEvent<[NavigationEvent]>;\n\n  /**\n   * Starts sending of {@link NavigationEvent navigation events} to the given `receiver`.\n   *\n   * @param receiver  Target receiver of {@link NavigationEvent navigation events}.\n   *\n   * @returns {@link NavigationEvent Navigation events} supply.\n   */\n  abstract on(receiver: EventReceiver<[NavigationEvent]>): EventSupply;\n\n  [OnEvent__symbol](): OnEvent<[NavigationEvent]> {\n    return this.on();\n  }\n\n  /**\n   * Builds an `AfterEvent` keeper of {@link page current page}.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   *\n   * @returns An `AfterEvent` keeper of {@link page current page}.\n   */\n  abstract read(): AfterEvent<[Page]>;\n\n  /**\n   * Starts sending {@link page current page} and updates to the given `receiver.\n   *\n   * @param receiver  Target receiver of {@link page current page}.\n   *\n   * @returns {@link page Current page} supply.\n   */\n  abstract read(receiver: EventReceiver<[Page]>): EventSupply;\n\n  [AfterEvent__symbol](): AfterEvent<[Page]> {\n    return this.read();\n  }\n\n  /**\n   * Goes to the previous page in navigation history.\n   *\n   * Calling this method is the same as calling `go(-1)`.\n   */\n  back(): void {\n    this.go(-1);\n  }\n\n  /**\n   * Goes to the next page in navigation history.\n   *\n   * Calling this method is the same as calling `go(1)`.\n   */\n  forward(): void {\n    this.go(1);\n  }\n\n  /**\n   * Loads a page from navigation history, identified by its relative location to the current page.\n   *\n   * For example `-1` navigates to previous page, while `1` navigates to the next one. If you specify an out-of-bounds\n   * value (for instance, specifying -1 when there are no previously-visited pages in navigation history), this method\n   * silently has no effect.\n   *\n   * @param delta  Relative location in navigation history to navigate to. The absent value or value of `0` reloads\n   * the current page.\n   */\n  abstract go(delta?: number): void;\n\n  /**\n   * Reloads current page.\n   *\n   * Calling this method is the same as calling `go()`.\n   */\n  reload(): void {\n    this.go();\n  }\n\n  /**\n   * Opens a page by navigating to the given `target`.\n   *\n   * Appends an entry to navigation history.\n   *\n   * @param target  Either navigation target or URL to navigate to.\n   * @fires PreNavigateEvent#wesib:preNavigate  On window object prior to actually navigate.\n   * Then navigates to the `target`, unless the event cancelled.\n   * @fires NavigateEvent@wesib:navigate  On window object when navigation succeed.\n   *\n   * @returns A promise resolved to navigated page, or to `null` otherwise.\n   */\n  abstract open(target: Navigation.Target | string | URL): Promise<Page | null>;\n\n  /**\n   * Replaces current navigation history entry with the given `target`.\n   *\n   * @param target  Either navigation target or URL to replace current history entry with.\n   * @fires PreNavigateEvent#wesib:preNavigate  On window object prior to actually update the history.\n   * Then navigates to the `target`, unless the event cancelled.\n   * @fires NavigateEvent@wesib:navigate  On window object when history updated.\n   *\n   * @returns A promise resolved to navigated page, or to `null` otherwise.\n   */\n  abstract replace(target: Navigation.Target | string | URL): Promise<Page | null>;\n\n  /**\n   * Replaces current page URL with the given one.\n   *\n   * Does not alter current page state, and does not trigger any events.\n   *\n   * @param url  An URL to replace the the current one with.\n   *\n   * @returns Current page with updated URL.\n   */\n  abstract update(url: string | URL): Page;\n\n  /**\n   * Creates parameterized navigation instance and assigns a page parameter to apply to target page.\n   *\n   * @typeparam T  Parameter value type.\n   * @typeparam I  Parameter input type.\n   * @param ref  A reference to page navigation parameter to apply.\n   * @param input  Parameter input to use when constructing its value.\n   *\n   * @returns New parameterized navigation instance.\n   */\n  abstract with<T, I>(ref: PageParam.Ref<T, I>, input: I): Navigation.Parameterized;\n\n}\n\nexport namespace Navigation {\n\n  /**\n   * Parameterized navigation.\n   *\n   * Allows to assign target page parameters prior to navigating to it.\n   */\n  export interface Parameterized {\n\n    /**\n     * Applies parameter to navigation target page.\n     *\n     * @typeparam T  Parameter value type.\n     * @typeparam I  Parameter input type.\n     * @param ref  A reference to page navigation parameter to apply.\n     * @param input  Parameter input to use when constructing its value.\n     *\n     * @returns New parameterized navigation instance.\n     */\n    with<T, I>(ref: PageParam.Ref<T, I>, input: I): Parameterized;\n\n    /**\n     * Opens a page by navigating to the given `target` with provided page parameters.\n     *\n     * Appends an entry to navigation history.\n     *\n     * @param target  Either navigation target or URL to navigate to. Navigates to current page URL when omitted.\n     * @fires PreNavigateEvent#wesib:preNavigate  On window object prior to actually navigate.\n     * Then navigates to the `target`, unless the event cancelled.\n     * @fires NavigateEvent@wesib:navigate  On window object when navigation succeed.\n     *\n     * @returns A promise resolved to navigated page, or to `null` otherwise.\n     */\n    open(target?: Navigation.Target | string | URL): Promise<Page | null>;\n\n    /**\n     * Replaces the most recent entry in navigation history with the given `target` and provided page parameters.\n     *\n     * @param target  Either navigation target or URL to replace the latest history entry with. Navigates to current\n     * page URL when omitted.\n     * @fires PreNavigateEvent#wesib:preNavigate  On window object prior to actually update the history.\n     * Then navigates to the `target`, unless the event cancelled.\n     * @fires NavigateEvent@wesib:navigate  On window object when history updated.\n     *\n     * @returns A promise resolved to navigated page, or to `null` otherwise.\n     */\n    replace(target?: Navigation.Target | string | URL): Promise<Page | null>;\n\n    /**\n     * Pretends navigation.\n     *\n     * Prepares navigation and parameters, but does not actually navigate. Instead it calls the provided callback\n     * function.\n     *\n     * This is useful e.g. to build target URL or evaluate target page parameter.\n     *\n     * @param target  Either navigation target or URL to pretend navigation to.\n     * @param callback A callback function receiving two pages as parameters: the page to leave, and the page to open.\n     * The latter one is valid only inside callback, as its parameters will be cleaned up right after callback returns.\n     * The value returned from callback is then returned from this method call. It may be used to collect some data\n     * from target page.\n     *\n     * @returns Either the value returned by callback, or `undefined` when navigation failed.\n     */\n    pretend<T>(\n        target: Navigation.Target | string | URL,\n        callback: (this: void, from: Page, to: Page) => T,\n    ): T | undefined;\n\n    /**\n     * Pretends navigation to the same page.\n     *\n     * Prepares navigation and parameters, but does not actually navigate. Instead it calls the provided callback\n     * function.\n     *\n     * This is useful e.g. to build target URL or evaluate target page parameter.\n     *\n     * @param callback A callback function receiving two pages as parameters: the page to leave, and the page to open.\n     * The latter one is valid only inside callback, as its parameters will be cleaned up right after callback returns.\n     * The value returned from callback is then returned from this method call. It may be used to collect some data\n     * from target page.\n     *\n     * @returns Either the value returned by callback, or `undefined` when navigation failed.\n     */\n    pretend<T>(\n        callback: (this: void, from: Page, to: Page) => T,\n    ): T | undefined;\n\n    /**\n     * Pretends navigation and builds navigation target.\n     *\n     * Prepares navigation and parameters, but does not actually navigate. Instead it calls the provided callback\n     * function.\n     *\n     * This is useful e.g. to build target URL or evaluate target page parameter.\n     *\n     * @param target  Either navigation target or URL to pretend navigation to. Prepends navigation to current page\n     * when omitted.\n     *\n     * @returns Either Navigation target with URL value, or `undefined` when navigation failed.\n     */\n    pretend(\n        target?: Navigation.Target | string | URL,\n    ): URLTarget | undefined;\n\n  }\n\n  /**\n   * Navigation target.\n   *\n   * This is passed to [[Navigation.open]] and [[Navigation.replace]] methods.\n   */\n  export interface Target {\n\n    /**\n     * An URL to update the browser location string to.\n     */\n    readonly url?: string | URL;\n\n    /**\n     * Opaque data to apply to session history. I.e. either push or replace.\n     */\n    readonly data?: any;\n\n    /**\n     * New window title.\n     */\n    readonly title?: string;\n\n  }\n\n  /**\n   * Navigation target with URL value.\n   */\n  export interface URLTarget extends Target {\n\n    readonly url: URL;\n\n  }\n\n}\n\nfunction createNavigation(context: BootstrapContext): Navigation {\n\n  const window = context.get(BootstrapWindow);\n  const { document, history } = window;\n  const dispatcher = new DomEventDispatcher(window);\n  const navHistory = context.get(NavHistory);\n  const agent = context.get(NavigationAgent);\n  const nav = trackValue<PageEntry>(navHistory.init());\n\n  nav.read(nextEntry => nextEntry.apply()); // The very first page entry receiver applies scheduled updates to page\n\n  let next: Promise<any> = Promise.resolve();\n\n  dispatcher.on<PopStateEvent>('popstate').to(popState => {\n\n    const entry = navHistory.popState(popState, nav);\n\n    if (entry) {\n      dispatcher.dispatch(new EnterPageEvent(\n          NavigationEventType.EnterPage,\n          {\n            when: popState.state != null ? 'return' : 'enter',\n            to: entry.page,\n          },\n      ));\n    }\n  });\n\n  dispatcher.on('hashchange').to(() => {\n\n    const entry = navHistory.hashChange(nav);\n\n    if (entry) {\n      dispatcher.dispatch(new EnterPageEvent(\n          NavigationEventType.EnterPage,\n          {\n            when: 'enter',\n            to: entry.page,\n          },\n      ));\n    }\n  });\n\n  type NavTarget = { -readonly [K in keyof Navigation.URLTarget]: Navigation.URLTarget[K] };\n\n  class Navigation$ extends Navigation {\n\n    get page(): Page {\n      return nav.it.page;\n    }\n\n    get length(): number {\n      return history.length;\n    }\n\n    onEnter(): OnDomEvent<EnterPageEvent>;\n    onEnter(listener: DomEventListener<EnterPageEvent>): EventSupply;\n    onEnter(listener?: DomEventListener<EnterPageEvent>): OnDomEvent<EnterPageEvent> | EventSupply {\n      return (this.onEnter = dispatcher.on<EnterPageEvent>(NavigationEventType.EnterPage).F)(listener);\n    }\n\n    onLeave(): OnDomEvent<LeavePageEvent>;\n    onLeave(listener: DomEventListener<LeavePageEvent>): EventSupply;\n    onLeave(listener?: DomEventListener<LeavePageEvent>): OnDomEvent<LeavePageEvent> | EventSupply {\n      return (this.onLeave = dispatcher.on<LeavePageEvent>(NavigationEventType.LeavePage).F)(listener);\n    }\n\n    onStay(): OnDomEvent<StayOnPageEvent>;\n    onStay(listener: DomEventListener<StayOnPageEvent>): EventSupply;\n    onStay(listener?: DomEventListener<StayOnPageEvent>): OnDomEvent<StayOnPageEvent> | EventSupply {\n      return (this.onStay = dispatcher.on<StayOnPageEvent>(NavigationEventType.StayOnPage).F)(listener);\n    }\n\n    /**\n     * Builds an `OnEvent` sender of {@link NavigationEvent navigation events}.\n     *\n     * The `[OnEvent__symbol]` property is an alias of this one.\n     *\n     * @returns `OnEvent` sender of {@link NavigationEvent navigation events}.\n     */\n    on(): OnEvent<[NavigationEvent]>;\n    on(receiver: EventReceiver<[NavigationEvent]>): EventSupply;\n    on(receiver?: EventReceiver<[NavigationEvent]>): OnEvent<[NavigationEvent]> | EventSupply {\n      return (this.on = onAny<[NavigationEvent]>(this.onEnter(), this.onLeave(), this.onStay()).F)(receiver);\n    }\n\n    read(): AfterEvent<[Page]>;\n    read(receiver: EventReceiver<[Page]>): EventSupply;\n    read(receiver?: EventReceiver<[Page]>): AfterEvent<[Page]> | EventSupply {\n      return (this.read = nav.read().keepThru(entry => entry.page).F)(receiver);\n    }\n\n    go(delta?: number): void {\n      history.go(delta);\n    }\n\n    open(target: Navigation.Target | string | URL): Promise<Page | null> {\n      return navigate('pre-open', 'open', target);\n    }\n\n    replace(target: Navigation.Target | string | URL): Promise<Page | null> {\n      return navigate('pre-replace', 'replace', target);\n    }\n\n    update(url: string | URL): Page {\n      return navHistory.update(nav, toURL(url)).page;\n    }\n\n    with<T, I>(ref: PageParam.Ref<T, I>, input: I): Navigation.Parameterized {\n      return withParam(page => page.put(ref, input));\n    }\n\n  }\n\n  return new Navigation$();\n\n  function withParam(applyParams: (page: Page) => void): Navigation.Parameterized {\n    return {\n      with<TT, II>(ref: PageParam.Ref<TT, II>, input: II): Navigation.Parameterized {\n        return withParam(mergeFunctions(applyParams, page => page.put(ref, input)));\n      },\n      open(target?: Navigation.Target | string | URL) {\n        return navigate('pre-open', 'open', target, applyParams);\n      },\n      replace(target?: Navigation.Target | string | URL) {\n        return navigate('pre-replace', 'replace', target, applyParams);\n      },\n      pretend<T>(\n          targetOrCallback?: Navigation.Target | string | URL | ((this: void, from: Page, to: Page) => T),\n          callback: (this: void, from: Page, to: Page) => T = (_from, to) => to as unknown as T,\n      ): T | undefined {\n\n        let target: Navigation.Target | string | URL | undefined;\n\n        if (typeof targetOrCallback === 'function') {\n          callback = targetOrCallback;\n          target = undefined;\n        } else {\n          target = targetOrCallback;\n        }\n\n        const navTarget = navTargetOf(target);\n        const fromEntry = nav.it;\n        const toEntry = newEntry('pretend', fromEntry, navTarget, applyParams);\n\n        try {\n          return applyAgent('pretend', fromEntry, navTarget, toEntry)\n              ? callback(fromEntry.page, toEntry.page)\n              : undefined;\n        } finally {\n          toEntry.stay(nav.it.page);\n        }\n      },\n    };\n  }\n\n  function toURL(url: string | URL | undefined): URL {\n    if (typeof url === 'string') {\n      return new URL(url, document.baseURI);\n    }\n    return url || nav.it.page.url;\n  }\n\n  function navTargetOf(target?: Navigation.Target | string | URL): NavTarget {\n    if (target == null || typeof target === 'string' || target instanceof URL) {\n      return { url: toURL(target) };\n    }\n    if (target.url instanceof URL) {\n      return target as Navigation.URLTarget;\n    }\n    return { ...target, url: toURL(target.url) };\n  }\n\n  function navigate(\n      whenLeave: 'pre-open' | 'pre-replace',\n      when: 'open' | 'replace',\n      target?: Navigation.Target | string | URL,\n      applyParams: (page: Page) => void = noop,\n  ): Promise<Page | null> {\n\n    const navTarget = navTargetOf(target);\n    const promise = next = next.then(doNavigate, doNavigate);\n\n    return promise;\n\n    function doNavigate(): Page | null {\n\n      let toEntry: PageEntry | undefined = undefined;\n\n      try {\n\n        const prepared = prepare();\n\n        if (!prepared) {\n          return prepared; // Navigation cancelled\n        }\n\n        toEntry = prepared;\n        navHistory[when](toEntry, nav);\n        dispatcher.dispatch(new EnterPageEvent(\n            NavigationEventType.EnterPage,\n            {\n              when,\n              to: toEntry.page,\n            },\n        ));\n\n        return toEntry.page;\n      } catch (e) {\n        stay(toEntry, e);\n        throw e;\n      }\n    }\n\n    function prepare(): PageEntry | null {\n      if (next !== promise) {\n        return stay();\n      }\n\n      const fromEntry = nav.it;\n      const toEntry = newEntry(whenLeave, fromEntry, navTarget, applyParams);\n      const leavePage = new LeavePageEvent(\n          NavigationEventType.LeavePage,\n          {\n            when: whenLeave,\n            from: fromEntry.page,\n            to: toEntry.page,\n          },\n      );\n\n      if (!dispatcher.dispatch(leavePage)\n          || next !== promise\n          || !applyAgent(whenLeave, fromEntry, navTarget, toEntry)) {\n        return stay(toEntry);\n      }\n\n      return toEntry;\n    }\n\n    function stay(toEntry?: PageEntry, reason?: any): null {\n      if (toEntry) {\n        toEntry.stay(nav.it.page);\n      }\n\n      dispatcher.dispatch(new StayOnPageEvent(\n          NavigationEventType.StayOnPage,\n          {\n            from: nav.it.page,\n            to: navTarget,\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            reason,\n          },\n      ));\n\n      return null;\n    }\n\n  }\n\n  function newEntry(\n      whenLeave: 'pretend' | 'pre-open' | 'pre-replace',\n      fromEntry: PageEntry,\n      navTarget: NavTarget,\n      applyParams: (page: Page) => void,\n  ): PageEntry {\n\n    const toEntry = navHistory.newEntry(navTarget);\n\n    try {\n      fromEntry.transfer(toEntry, whenLeave);\n      applyParams(toEntry.page);\n    } catch (e) {\n      toEntry.stay(nav.it.page);\n      throw e;\n    }\n\n    return toEntry;\n  }\n\n  function applyAgent(\n      whenLeave: 'pretend' | 'pre-open' | 'pre-replace',\n      fromEntry: PageEntry,\n      navTarget: NavTarget,\n      toEntry: PageEntry,\n  ): boolean {\n\n    let navigated = false;\n\n    agent(\n        ({ url, data, title }) => {\n          navigated = true;\n          navTarget.url = url;\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n          navTarget.data = data;\n          navTarget.title = title;\n        },\n        whenLeave,\n        fromEntry.page,\n        toEntry.page,\n    );\n\n    return navigated;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { mapIt } from '@proc7ts/a-iterable';\nimport { nextArgs } from '@proc7ts/call-thru';\nimport {\n  afterEach,\n  AfterEvent,\n  afterEventBy,\n  afterSupplied,\n  afterThe,\n  EventKeeper,\n  eventSupply,\n  EventSupply,\n  nextAfterEvent,\n} from '@proc7ts/fun-events';\nimport { css__naming, QualifiedName } from '@proc7ts/namespace-aliaser';\nimport { Class, noop } from '@proc7ts/primitives';\nimport { RenderSchedule } from '@proc7ts/render-scheduler';\nimport {\n  Component,\n  ComponentClass,\n  ComponentContext,\n  ComponentDecorator,\n  DefaultNamespaceAliaser,\n  ElementRenderScheduler,\n  RenderDef,\n  Wesib__NS,\n} from '@wesib/wesib';\nimport { ComponentNode, ElementNode, ElementPickMode } from '../tree';\nimport { getHashURL } from './hash-url';\nimport { Navigation } from './navigation';\nimport { Page } from './page';\n\n/**\n * @internal\n */\ninterface ActiveNavLink {\n  supply(): EventSupply;\n}\n\n/**\n * Creates component decorator that marks navigation link(s) inside decorated component active.\n *\n * Marks navigation links with highest weight.\n *\n * @typeparam T  A type of decorated component class.\n * @param def  Navigation link activation definition.\n *\n * @returns New component decorator.\n */\nexport function ActivateNavLink<T extends ComponentClass = Class>(\n    def: ActivateNavLinkDef<InstanceType<T>> = {},\n): ComponentDecorator<T> {\n\n  const { select = 'a', pick = { all: true, deep: true } } = def;\n\n  return Component({\n    define(defContext) {\n      defContext.whenComponent(context => {\n\n        const activate = activateNavLink(context, def);\n        const weigh = navLinkWeight(def);\n        const navigation = context.get(Navigation);\n        const componentNode = context.get(ComponentNode);\n\n        context.whenConnected(() => {\n\n          let active = new Map<ElementNode, ActiveNavLink>();\n\n          navigation.read().tillOff(context).consume(\n              page => componentNode.select(select, pick).read().keepThru_(\n                  nodes => nextAfterEvent(afterEach(\n                      ...mapIt(nodes, node => weigh({ node, context, page })),\n                  )),\n              ).consume(\n                  (...weights: NavLinkWeight[]) => {\n\n                    const selected = selectActiveNavLinks(weights);\n                    const newActive = new Map<ElementNode, ActiveNavLink>();\n                    const result = eventSupply();\n\n                    selected.forEach(node => {\n\n                      let activeLink: ActiveNavLink;\n                      const existing = active.get(node);\n\n                      if (existing) {\n                        newActive.set(node, existing);\n                        activeLink = existing;\n                      } else {\n                        activeLink = activate({ node, context, page });\n                        newActive.set(node, activeLink);\n                      }\n\n                      activeLink.supply().needs(result);\n                    });\n\n                    active = newActive;\n\n                    return result;\n                  },\n              ),\n          );\n        });\n      });\n    },\n  });\n}\n\n/**\n * Navigation link activation definition.\n *\n * Defines a set of element nodes considered to be navigation links. Each matching node is {@link weigh weighed}\n * against {@link Navigation.read current page}, and the link with highest weight is marked [[active]].\n *\n * @typeparam T  A type of component.\n */\nexport interface ActivateNavLinkDef<T extends object = any> {\n\n  /**\n   * Navigation links CSS selector.\n   *\n   * `a` by default.\n   */\n  readonly select?: string;\n\n  /**\n   * A mode of navigation link node picking from component tree.\n   *\n   * By default picks any matching element from entire subtree.\n   */\n  readonly pick?: ElementPickMode;\n\n  /**\n   * Qualified name of CSS class to mark the active element with.\n   *\n   * The `active` class in Wesib namespace is used by default.\n   */\n  readonly active?: QualifiedName;\n\n  /**\n   * Rendering definition options to pass to nav links render scheduler.\n   */\n  readonly render?: RenderDef.Options;\n\n  /**\n   * Weighs matching navigation link.\n   *\n   * This method will be called for each navigation link on each current page update.\n   *\n   * By default:\n   * 1. If the link path has neither hash, nor search parameters, then:\n   * 1.1. Checks whether page URL path starts with the link's one.\n   * 1.2. If so, then uses link path length as weight.\n   * 2. If the link path has search parameters, but has no hash, then requires the page path to be the same as link's\n   *    one, and page search parameters include all of the link's ones. The number of link search parameters plus the\n   *    link path length is used as weight.\n   * 3. If the link path has a hash, then requires the page path and search parameters to be the same as link's ones,\n   *    and their hashes are treated as {@link getHashURL URLs}. The weight is calculated by applying steps 1, 2, and 3\n   *    to hash URLs increased by the link path length and the number of search parameters.\n   *\n   * Ignores search parameters with names starting and ending with double underscores. Like `__wesib_app_rev__`.\n   *\n   * @param node  Navigation link node to weigh.\n   * @param page  Current navigation page.\n   * @param context  Decorated component context.\n   *\n   * @returns Either navigation link weight, or its keeper. Non-positive wights means the page URL doesn't match\n   * the link at all.\n   */\n  weigh?(\n      {\n        node,\n        page,\n        context,\n      }: {\n        node: ElementNode;\n        page: Page;\n        context: ComponentContext<T>;\n      },\n  ): number | EventKeeper<[number]>;\n\n  /**\n   * Changes navigation link activity state.\n   *\n   * This method is called each time the active link changed.\n   *\n   * @param active  Whether to make target link active (`true`), or inactive (`false`).\n   * @param node  Navigation link node to update activity state of.\n   * @param page  Current navigation page.\n   * @param context  Decorated component context.\n   */\n  activate?(\n      active: boolean,\n      {\n        node,\n        page,\n        context,\n      }: {\n        node: ElementNode;\n        page: Page;\n        context: ComponentContext<T>;\n      },\n  ): void;\n\n}\n\n/**\n * @internal\n */\ntype NavLinkWeight = [ElementNode, number];\n\n/**\n * @internal\n */\ninterface NavLinkOpts {\n  node: ElementNode;\n  page: Page;\n  context: ComponentContext;\n}\n\n/**\n * @internal\n */\nfunction selectActiveNavLinks(weights: NavLinkWeight[]): ElementNode[] {\n\n  let maxWeight = 0;\n  let active: ElementNode[] = [];\n\n  weights.forEach(([node, weight]) => {\n    if (weight > maxWeight) {\n      maxWeight = weight;\n      active = [node];\n    } else if (weight === maxWeight) {\n      active.push(node);\n    }\n  });\n\n  return active;\n}\n\n/**\n * @internal\n */\nfunction navLinkWeight(\n    def: ActivateNavLinkDef,\n): (opts: NavLinkOpts) => AfterEvent<NavLinkWeight> {\n  if (!def.weigh) {\n    return defaultNavLinkWeight;\n  }\n  return opts => {\n\n    const weight = def.weigh!(opts);\n\n    if (typeof weight === 'number') {\n      return afterThe(opts.node, weight);\n    }\n\n    let supplier: AfterEvent<NavLinkWeight> = afterSupplied(weight).keepThru_(\n        weight => nextArgs(opts.node, weight),\n    );\n\n    return afterEventBy<NavLinkWeight>(receiver => {\n      supplier.to({\n        supply: eventSupply()\n            .needs(receiver.supply)\n            .whenOff(() => {\n              // Fall back to zero weight once the weight supply cut off\n              supplier = afterThe(opts.node, 0);\n              supplier.to(receiver);\n            }),\n        receive: receiver.receive.bind(receiver),\n      });\n    });\n  };\n}\n\n/**\n * @internal\n */\nfunction defaultNavLinkWeight(\n    {\n      node,\n      page,\n    }: NavLinkOpts,\n): AfterEvent<NavLinkWeight> {\n\n  const { element } = node as { element: Element };\n  const href = element.getAttribute('href');\n\n  if (href == null) {\n    return afterThe(node, -1);\n  }\n\n  const linkURL = new URL(href, element.ownerDocument.baseURI);\n\n  return afterThe(node, calcNavLinkWeight(linkURL, page.url));\n}\n\n/**\n * @internal\n */\nfunction calcNavLinkWeight(linkURL: URL, pageURL: URL): number {\n  if (linkURL.origin !== pageURL.origin) {\n    return -1;\n  }\n\n  const linkDir = navLinkPath2dir(linkURL);\n  const pageDir = navLinkPath2dir(pageURL);\n\n  if (linkURL.hash) {\n    if (linkDir !== pageDir) {\n      return -1;\n    }\n    // Require search parameters to be equal\n\n    const searchParamWeight = navLinkSearchParamsWeight(linkURL, pageURL);\n\n    if (searchParamWeight < 0 || navLinkSearchParamsWeight(pageURL, linkURL) < 0) {\n      return -1;\n    }\n\n    return linkURL.pathname.length\n        + searchParamWeight\n        + calcNavLinkWeight(getHashURL(linkURL), getHashURL(pageURL));\n  }\n\n  const searchParamWeight = navLinkSearchParamsWeight(linkURL, pageURL);\n\n  if (searchParamWeight) {\n    if (searchParamWeight < 0) {\n      return -1;\n    }\n    if (linkDir !== pageDir) {\n      return -1;\n    }\n    return linkURL.pathname.length + searchParamWeight;\n  }\n\n  if (!pageDir.startsWith(linkDir)) {\n    return -1;\n  }\n\n  return linkURL.pathname.length;\n}\n\n/**\n * @internal\n */\nfunction navLinkPath2dir(url: URL): string {\n\n  const path = url.pathname;\n\n  return path.endsWith('/') ? path : path + '/';\n}\n\n/**\n * @internal\n */\nfunction navLinkSearchParamsWeight(\n    { searchParams: linkParams }: URL,\n    { searchParams: pageParams }: URL,\n): number {\n\n  let weight = 0;\n\n  linkParams.forEach((_value, key) => {\n    if (!isIgnoredSearchParam(key)) {\n\n      const pageValues = new Set(pageParams.getAll(key));\n\n      if (weight >= 0) {\n        if (linkParams.getAll(key).every(linkValue => pageValues.has(linkValue))) {\n          weight += 1;\n        } else {\n          weight = -1;\n        }\n      }\n    }\n  });\n\n  return weight;\n}\n\n/**\n * @internal\n */\nfunction isIgnoredSearchParam(key: string): boolean {\n  return key.startsWith('__') && key.endsWith('__');\n}\n\n/**\n * @internal\n */\nconst NavLinkRenderSchedule__symbol = (/*#__PURE__*/ Symbol('nav-link-render-schedule'));\n\n/**\n * @internal\n */\nconst defaultActiveNavLinkClass: QualifiedName = ['active', Wesib__NS];\n\n/**\n * @internal\n */\ninterface RenderedElement extends Element {\n\n  [NavLinkRenderSchedule__symbol]?: RenderSchedule;\n\n}\n\n/**\n * @internal\n */\nfunction activateNavLink(\n    context: ComponentContext,\n    def: ActivateNavLinkDef,\n): (opts: NavLinkOpts) => ActiveNavLink {\n\n  const scheduler = context.get(ElementRenderScheduler);\n  const { render, active = defaultActiveNavLinkClass } = def;\n  const activeClass = css__naming.name(active, context.get(DefaultNamespaceAliaser));\n  const activate = def.activate ? def.activate.bind(def) : noop;\n  const assignClass = (active: boolean, { node }: { node: ElementNode }): void => {\n\n    const { element } = node as { element: Element };\n    const { classList } = element;\n\n    if (active) {\n      classList.add(activeClass);\n    } else {\n      classList.remove(activeClass);\n    }\n  };\n\n  return opts => {\n\n    const { element } = opts.node as { element: RenderedElement };\n    const schedule = element[NavLinkRenderSchedule__symbol]\n        || (element[NavLinkRenderSchedule__symbol] = scheduler(render));\n    const makeActive = (active: boolean): void => {\n      schedule(() => assignClass(active, opts));\n      activate(active, opts);\n    };\n\n    makeActive(true);\n\n    let lastSupply: EventSupply | undefined;\n\n    return {\n      supply(): EventSupply {\n\n        const supply = lastSupply = eventSupply(() => {\n          if (lastSupply === supply) {\n            makeActive(false);\n          }\n        });\n\n        return supply;\n      },\n    };\n  };\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { Class, setOfElements } from '@proc7ts/primitives';\nimport { Component, ComponentClass, ComponentContext, ComponentDecorator } from '@wesib/wesib';\nimport { Navigation } from './navigation';\nimport { Page } from './page';\n\n/**\n * Creates component decorator that handles events (e.g. clicks) on navigation links.\n *\n * Such events would lead to {@link Navigation navigation actions} instead of default ones.\n *\n * @typeparam T  A type of decorated component class.\n * @param def  Navigation links handler definition.\n *\n * @returns New component decorator.\n */\nexport function HandleNavLinks<T extends ComponentClass = Class>(\n    def: HandleNavLinksDef<InstanceType<T>> = {},\n): ComponentDecorator<T> {\n\n  const handle = def.handle ? def.handle.bind(def) : defaultHandleNavLinks(def);\n  const events = setOfElements(def.event || 'click');\n\n  return Component({\n    define(defContext) {\n      defContext.whenComponent(context => {\n        context.whenConnected(() => {\n\n          const navigation = context.get(Navigation);\n\n          for (const eventType of events) {\n            context.on(eventType).to(event => {\n              navigation.read().once(\n                  page => handle({\n                    event,\n                    page,\n                    context,\n                    navigation,\n                  }),\n              );\n            });\n          }\n        });\n      });\n    },\n  });\n}\n\n/**\n * Navigation links handler definition.\n *\n * @typeparam T  A type of component.\n */\nexport interface HandleNavLinksDef<T extends object = any> {\n\n  /**\n   * Type or types of events to handle.\n   *\n   * `click` by default.\n   */\n  readonly event?: string | readonly string[];\n\n  /**\n   * Handles event by performing navigation action.\n   *\n   * Every {@link event} sent by one of elements inside decorated component is passed to this function. In response\n   * it may perform a navigation event.\n   *\n   * By default handles events on anchor tags. When such tag contains an `href` attribute containing same-origin URL\n   * it {@link Navigation.open opens} a page at this URL instead of default action. It also prevents navigation\n   * if URL didn't change.\n   *\n   * @param event  A click event to handle.\n   * @param page  Current navigation page.\n   * @param navigation  Navigation service to use.\n   * @param context  Component context.\n   */\n  handle?(\n      {\n        event,\n        page,\n        navigation,\n        context,\n      }: {\n        event: Event;\n        page: Page;\n        navigation: Navigation;\n        context: ComponentContext<T>;\n      },\n  ): void;\n\n  /**\n   * Extracts hyper-reference of clicked element.\n   *\n   * Extracts hyper-reference from `href` attribute of event target.\n   *\n   * @param event  A click event to handle.\n   *\n   * @returns Extracted hyper-reference, or nothing if it can not be extracted. Event will be ignored in this case.\n   */\n  href?(event: Event): string | undefined | null;\n\n}\n\n/**\n * @internal\n */\nfunction defaultNavLinkHref(event: Event): string | null {\n\n  const target = event.target as Element;\n\n  return target.getAttribute('href');\n}\n\n/**\n * @internal\n */\nfunction defaultHandleNavLinks(\n    def: HandleNavLinksDef,\n): (\n    opts: {\n      event: Event;\n      page: Page;\n      navigation: Navigation;\n    },\n) => void {\n\n  const getHref = def.href ? def.href.bind(def) : defaultNavLinkHref;\n\n  return ({\n    event,\n    page,\n    navigation,\n  }) => {\n\n    const href = getHref(event);\n\n    if (href == null) {\n      return;\n    }\n\n    const target = event.target as Element;\n    const pageURL = page.url;\n    const url = new URL(href, target.ownerDocument.baseURI);\n\n    if (url.origin !== pageURL.origin) {\n      return; // External link\n    }\n\n    event.preventDefault();\n    if (pageURL.href !== url.href) {\n      navigation.open(href).catch(console.error);\n    }\n  };\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { itsEach, overArray } from '@proc7ts/a-iterable';\nimport { isElement } from '@wesib/wesib';\n\n/**\n * Imports DOM node from one document to another.\n *\n * @param from  The node to import.\n * @param to  The node to append imported node to.\n * @param importContent  A function that imports nodes nested in parent element. [[importNodeContent]] by default.\n *\n * @returns Imported node.\n */\nexport function importNode<N extends Node>(\n    from: N,\n    to: Node,\n    importContent?: (this: void, from: N, to: N) => void,\n): N;\n\n/**\n * Imports DOM node from one document to another and inserts it before the given node.\n *\n * @param from  The node to import.\n * @param to  The node to append imported node to.\n * @param before  The node to insert imported node before, or `null` to append it to the end of target one.\n * @param importContent  A function that imports nodes nested in parent element. [[importNodeContent]] by default.\n *\n * @returns Imported node.\n */\nexport function importNode<N extends Node>(\n    from: N,\n    to: Node,\n    before?: Node | null,\n    importContent?: (this: void, from: N, to: N) => void,\n): N;\n\nexport function importNode<N extends Node>(\n    from: N,\n    to: Node,\n    beforeOrImport?: Node | null | ((this: void, from: N, to: N) => void),\n    importContent: (this: void, from: N, to: N) => void = importNodeContent,\n): N {\n\n  let before: Node | null;\n\n  if (typeof beforeOrImport === 'function') {\n    importContent = beforeOrImport;\n    before = null;\n  } else {\n    before = beforeOrImport || null;\n  }\n\n  const doc = to.ownerDocument!;\n\n  if (isElement(from)) {\n\n    const elementClone = doc.createElement(from.tagName.toLowerCase()) as Node as (Element & N);\n\n    from.getAttributeNames().forEach(attr => elementClone.setAttribute(attr, from.getAttribute(attr)!));\n    importContent(from, elementClone);\n    to.insertBefore(elementClone, before);\n\n    return elementClone;\n  }\n\n  const nodeClone = doc.importNode(from, false);\n\n  to.insertBefore(nodeClone, before);\n\n  return nodeClone;\n}\n\n/**\n * Imports DOM node contents from one document to another.\n *\n * @param from  The node which contents to import.\n * @param to  The node to append imported nodes to.\n */\nexport function importNodeContent(from: Node, to: Node): void {\n  itsEach(\n      overArray(from.childNodes),\n      node => importNode(node, to),\n  );\n}\n","import { nextArgs, nextSkip } from '@proc7ts/call-thru';\nimport { eventSupply, EventSupply, OnEvent, onEventBy, trackValue } from '@proc7ts/fun-events';\nimport { Page } from '../page';\nimport { PageLoadResponse } from './page-load-response';\nimport { PageLoader } from './page-loader.impl';\n\n/**\n * @internal\n */\nexport function cachingPageLoader(loader: PageLoader): PageLoader {\n\n  let state: {\n    readonly url: string;\n    readonly on: OnEvent<[PageLoadResponse]>;\n    readonly sup: EventSupply;\n  } | undefined;\n\n  return page => {\n\n    const url = pageUrl(page);\n\n    if (state) {\n      if (state.url === url) {\n        return state.on;\n      }\n      state.sup.off();\n    }\n\n    let tracked: {\n      readonly on: OnEvent<[PageLoadResponse]>;\n      num: number;\n    } | undefined;\n    const supply = eventSupply().whenOff(() => {\n      state = undefined;\n      tracked = undefined;\n    });\n\n    const on = onEventBy<[PageLoadResponse]>(receiver => {\n      if (!tracked) {\n\n        const onLoad = loader(page);\n        const tracker = trackValue<PageLoadResponse>();\n        const trackSupply = onLoad.to(resp => {\n          tracker.it = resp;\n        }).whenOff(reason => {\n          // Error drops page cache, unlike successful page load.\n          if (reason != null) {\n            supply.off(reason);\n          }\n        });\n\n        supply.cuts(trackSupply).cuts(tracker);\n\n        tracked = {\n          on: tracker.read().thru_(\n              response => response ? nextArgs(response) : nextSkip(),\n          ),\n          num: 0,\n        };\n      }\n\n      const requested = tracked;\n\n      ++requested.num;\n\n      return requested.on.tillOff(supply).to(receiver).whenOff(reason => {\n        if (!--requested.num) {\n          // Allow to request the same page again\n          Promise.resolve().then(() => {\n            if (!requested.num && requested === tracked) {\n              supply.off(reason);\n            }\n          }).catch(console.error);\n        }\n      });\n    });\n\n    state = { url, on, sup: supply };\n\n    return on;\n  };\n}\n\nfunction pageUrl(page: Page): string {\n  return new URL('', page.url).href;\n}\n","import { flatMapIt, itsEach, itsIterator } from '@proc7ts/a-iterable';\nimport {\n  EventEmitter,\n  eventReceiver,\n  EventReceiver,\n  eventSupply,\n  EventSupply,\n  noEventSupply,\n  OnEvent,\n  onEventBy,\n} from '@proc7ts/fun-events';\nimport { noop } from '@proc7ts/primitives';\nimport { Navigation } from '../navigation';\nimport { Page } from '../page';\nimport { PageParam } from '../page-param';\nimport { PageFragmentRequest, PageLoadRequest } from './page-load-request';\nimport { PageLoadResponse } from './page-load-response';\nimport { PageLoader } from './page-loader.impl';\n\n/**\n * @internal\n */\nexport interface PageLoadReq extends PageLoadRequest {\n\n  readonly receiver: EventReceiver.Generic<[PageLoadResponse]>;\n\n}\n\nclass PageLoadAbortError extends Error {}\n\nclass PageLoadRequestsParam$ extends PageParam<PageLoadRequests, PageLoadRequests> {\n\n  create(\n      _page: Page,\n      requests: PageLoadRequests,\n  ): PageParam.Handle<PageLoadRequests, PageLoadRequests> {\n    return {\n      get() {\n        return requests;\n      },\n      put: noop,\n    };\n  }\n\n}\n\n/**\n * @internal\n */\nexport const PageLoadRequestsParam: PageParam<PageLoadRequests, PageLoadRequests> = new PageLoadRequestsParam$();\n\n/**\n * @internal\n */\nexport class PageLoadRequests implements Iterable<PageLoadReq> {\n\n  private readonly _map = new Map<EventSupply, PageLoadReq[]>();\n\n  constructor(\n      private readonly _navigation: Navigation,\n      private readonly _loader: PageLoader,\n  ) {}\n\n  get fragments(): readonly PageFragmentRequest[] {\n\n    const result: PageFragmentRequest[] = [];\n\n    for (const request of this) {\n      if (!request.fragment) {\n        return [];\n      }\n      result.push(request.fragment);\n    }\n\n    return result;\n  }\n\n  [Symbol.iterator](): Iterator<PageLoadReq> {\n    return itsIterator(flatMapIt(this._map.values()));\n  }\n\n  handle(): PageParam.Handle<void, PageLoadRequest> {\n\n    const self = this;\n    const pageSupply = eventSupply();\n    let loadSupply = noEventSupply();\n\n    return {\n      get() {/* void */},\n      put(request: PageLoadRequest): void {\n        self._add(request);\n      },\n      transfer(to: Page, when) {\n        if (when === 'pretend') {\n          return;\n        }\n\n        const transferred = self._transfer();\n\n        to.put(PageLoadRequestsParam, transferred);\n\n        return transferred.handle();\n      },\n      enter(page: Page, when: 'init' | 'open' | 'replace' | 'return'): void {\n        if (when === 'init') {\n          // The page is loaded already. No need to fetch it.\n          return;\n        }\n\n        loadSupply = eventSupply().needs(pageSupply);\n\n        const onLoad = onEventBy<[PageLoadResponse]>(responseReceiver => {\n\n          const emitter = new EventEmitter<[PageLoadResponse]>();\n          const supply = emitter.on(responseReceiver);\n\n          self._loader(page)\n              .tillOff(loadSupply)\n              .to(response => emitter.send(response))\n              .whenOff(error => {\n                if (error !== undefined && !(error instanceof PageLoadAbortError)) {\n                  // Report current page load error as failed load response\n                  emitter.send({\n                    ok: false as const,\n                    page,\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                    error,\n                  });\n                }\n              });\n\n          return supply;\n        }).share();\n\n        itsEach(\n            self,\n            ({ fragment, receiver }) => onFragment(onLoad, fragment).to({\n              supply: eventSupply().needs(receiver.supply),\n              receive(context, response): void {\n                receiver.receive(context, response);\n              },\n            }),\n        );\n      },\n      leave(): void {\n        loadSupply.off(new PageLoadAbortError('page left'));\n      },\n      stay() {\n        pageSupply.off(new PageLoadAbortError('navigation cancelled'));\n      },\n      forget() {\n        pageSupply.off(new PageLoadAbortError('page forgotten'));\n      },\n    };\n\n  }\n\n  private _add(request: PageLoadRequest): void {\n\n    const req = { ...request, receiver: eventReceiver(request.receiver) };\n    const { supply } = req.receiver;\n    const list = this._map.get(supply);\n\n    if (list) {\n      list.push(req);\n    } else {\n      this._map.set(supply, [req]);\n      supply.whenOff(() => this._map.delete(supply));\n    }\n  }\n\n  private _transfer(): PageLoadRequests {\n\n    const transferred = new PageLoadRequests(this._navigation, this._loader);\n\n    for (const [supply, list] of this._map.entries()) {\n      transferred._map.set(supply, Array.from(list));\n    }\n\n    return transferred;\n  }\n\n}\n\nfunction onFragment(\n    onLoad: OnEvent<[PageLoadResponse]>,\n    fragment?: PageFragmentRequest,\n): OnEvent<[PageLoadResponse]> {\n  return fragment\n      ? onLoad.thru_(\n          response => response.ok\n              ? {\n                ...response,\n                fragment: (\n                    fragment.tag != null\n                        ? response.document.getElementsByTagName(fragment.tag)[0]\n                        : response.document.getElementById(fragment.id)\n                ) || undefined,\n              }\n              : response,\n      )\n      : onLoad;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { ContextUpRef } from '@proc7ts/context-values/updatable';\nimport { EventSender, OnEvent } from '@proc7ts/fun-events';\nimport { FetchAgentKey } from '../../fetch/fetch-agent-key.impl';\nimport { PageLoadResponse } from './page-load-response';\n\n/**\n * Page load agent signature.\n *\n * The agent can be used to alter loaded page document processing. For that it should be registered in appropriate\n * context.\n *\n * All registered agents are organized into chain. The first agent in chain is called by page loader.\n */\nexport type PageLoadAgent =\n/**\n * @param next  Either calls the next agent in chain, or actually loads page document if this agent is the last one.\n * Accepts an optional `Request` parameter. The original request will be used instead when omitted.\n * @param request  HTTP request.\n *\n * @returns An `EventSender` of page load response. It is returned either to preceding agent in chain, or as a loaded\n * document.\n */\n    (\n        this: void,\n        next: (this: void, request?: Request) => OnEvent<[PageLoadResponse]>,\n        request: Request,\n    ) => EventSender<[PageLoadResponse]>;\n\nexport namespace PageLoadAgent {\n\n  /**\n   * Combined page load agent signature.\n   *\n   * This is what is available under [[PageLoadAgent]] key.\n   */\n  export type Combined =\n  /**\n   * @param next  Either calls the next agent in chain, or actually loads page document if this agent is the last one.\n   * Accepts `Request` parameter.\n   * @param request  HTTP request.\n   *\n   * @returns An `OnEvent` registrar of loaded document.\n   */\n      (\n          this: void,\n          next: (this: void, request: Request) => OnEvent<[PageLoadResponse]>,\n          request: Request,\n      ) => OnEvent<[PageLoadResponse]>;\n\n}\n\n/**\n * A key of context value containing an [[PageLoadAgent]] instance.\n *\n * The agent returned combines all registered agents into one. If no agent registered it just performs the fetch.\n */\nexport const PageLoadAgent: ContextUpRef<PageLoadAgent.Combined, PageLoadAgent> = (\n    /*#__PURE__*/ new FetchAgentKey<[PageLoadResponse]>('page-load-agent')\n);\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { ContextUpRef, FnContextKey } from '@proc7ts/context-values/updatable';\nimport { noop, valueProvider } from '@proc7ts/primitives';\n\n/**\n * A signature of page load URL modifier function.\n *\n * All such functions registered in bootstrap context are called in order of their registration with current page URL.\n * They are able to modify it, e.g. by applying additional URL search parameters. The modified URL is used then to load\n * the page.\n */\nexport type PageLoadURLModifier =\n/**\n * @param url  An URL of page to load.\n */\n    (this: void, url: URL) => void;\n\n/**\n * A key of bootstrap context value containing a page load URL modifier.\n *\n * Does not modify URL by default.\n */\nexport const PageLoadURLModifier: ContextUpRef<PageLoadURLModifier, PageLoadURLModifier> = (\n    /*#__PURE__*/ new FnContextKey('page-load-url', { byDefault: valueProvider(noop) })\n);\n","import { hthvParse, hthvQuote } from '@hatsy/http-header-value';\nimport { itsReduction } from '@proc7ts/a-iterable';\nimport { nextEach } from '@proc7ts/call-thru';\nimport { SingleContextKey } from '@proc7ts/context-values';\nimport { EventNotifier, onAsync, OnEvent, onEventBy } from '@proc7ts/fun-events';\nimport { BootstrapContext, bootstrapDefault, BootstrapWindow } from '@wesib/wesib';\nimport { HttpFetch } from '../../fetch';\nimport { Page } from '../page';\nimport { PageLoadAgent } from './page-load-agent';\nimport { PageLoadRequestsParam } from './page-load-requests.impl';\nimport { PageLoadResponse } from './page-load-response';\nimport { PageLoadURLModifier } from './page-load-url-modifier';\n\n/**\n * @internal\n */\nexport type PageLoader = (this: void, page: Page) => OnEvent<[PageLoadResponse]>;\n\n/**\n * @internal\n */\nexport const PageLoader = (/*#__PURE__*/ new SingleContextKey<PageLoader>(\n    'page-loader',\n    {\n      byDefault: bootstrapDefault(newPageLoader),\n    },\n));\n\nfunction newPageLoader(context: BootstrapContext): PageLoader {\n\n  const window = context.get(BootstrapWindow);\n  const httpFetch = context.get(HttpFetch);\n  const modifyURL = context.get(PageLoadURLModifier);\n  const agent = context.get(PageLoadAgent);\n  const parser = new window.DOMParser();\n\n  return page => {\n\n    const url = new URL(page.url.href);\n\n    modifyURL(url);\n\n    const request = new Request(\n        url.href,\n        {\n          mode: 'same-origin',\n          credentials: 'same-origin',\n          headers: new Headers({ Accept: 'text/html' }),\n        },\n    );\n\n    return onEventBy(receiver => agent(fetch, request).to(receiver));\n\n    function fetch(fetchRequest: Request): OnEvent<[PageLoadResponse]> {\n      requestPageFragments(page, fetchRequest);\n\n      return onEventBy<[PageLoadResponse]>(receiver => {\n\n        const dispatcher = new EventNotifier<[PageLoadResponse]>();\n\n        dispatcher.on(receiver);\n        dispatcher.send({ page });\n\n        onAsync(httpFetch(fetchRequest).thru_(\n            response => Promise.all([response, response.text()]),\n        )).thru_(\n            (...batch: [Response, string][]) => nextEach(batch),\n            ([response, text]): PageLoadResponse => {\n              if (!response.ok) {\n                return {\n                  ok: false as const,\n                  page,\n                  response,\n                  error: response.status,\n                };\n              }\n              try {\n                return {\n                  ok: true as const,\n                  page,\n                  response,\n                  document: parsePageDocument(parser, url, response, text),\n                };\n              } catch (error) {\n                return {\n                  ok: false as const,\n                  page,\n                  response,\n                  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                  error,\n                };\n              }\n            },\n        ).to(receiver);\n      });\n    }\n  };\n}\n\nfunction requestPageFragments(page: Page, request: Request): void {\n\n  const fragments = page.get(PageLoadRequestsParam)?.fragments;\n\n  if (fragments && fragments.length) {\n    request.headers.set(\n        'Accept-Fragment',\n        itsReduction(\n            fragments,\n            (header, fragment) => (header ? header + ', ' : '') + (\n                fragment.tag != null\n                    ? 'tag=' + hthvQuote(fragment.tag)\n                    : 'id=' + hthvQuote(fragment.id)\n            ),\n            '',\n        ),\n    );\n  }\n}\n\nfunction parsePageDocument(parser: DOMParser, url: URL, response: Response, text: string): Document {\n\n  const doc = parser.parseFromString(\n      text,\n      hthvParse(response.headers.get('Content-Type') || 'text/html')[0].v as SupportedType,\n  );\n\n  if (doc.head) {\n\n    const base = doc.head.querySelector('base');\n\n    if (base) {\n      base.href = new URL(base.getAttribute('href')!, url).href;\n    } else {\n\n      const newBase = doc.createElement('base');\n\n      newBase.href = url.href;\n\n      doc.head.appendChild(newBase);\n    }\n  }\n\n  return doc;\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/call-thru\n */\nimport { CallChain } from '../call-chain';\nimport { nextCall, NextCall } from '../next-call';\n\n/**\n * Builds a next chained call that passes each provided element to the next pass.\n *\n * Note that default [[CallChain]] supported by [[callThru]] would return only the last element.\n *\n * @typeparam T  A type of element to pass down the chain.\n * @param elements  An iterable of elements to pass down the chain.\n *\n * @returns A multi-call of the next pass with each element.\n */\nexport function nextEach<T>(elements: Iterable<T>): NextCall<CallChain, [T], T> {\n  return nextCall((chain, pass) => {\n    for (const element of elements) {\n      chain.pass(pass, element);\n    }\n  });\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { Navigation } from '../navigation';\nimport { Page } from '../page';\nimport { PageParam } from '../page-param';\nimport { PageParamContext } from '../page-param-context';\nimport { cachingPageLoader } from './caching-page-loader.impl';\nimport { PageLoadRequest } from './page-load-request';\nimport { PageLoadRequests, PageLoadRequestsParam } from './page-load-requests.impl';\nimport { PageLoader } from './page-loader.impl';\n\n/**\n * @internal\n */\nclass PageLoadParam$ extends PageParam<void, PageLoadRequest> {\n\n  create(page: Page, request: PageLoadRequest, context: PageParamContext): PageParam.Handle<void, PageLoadRequest> {\n\n    const requests = new PageLoadRequests(context.get(Navigation), cachingPageLoader(context.get(PageLoader)));\n    const handle = requests.handle();\n\n    page.put(PageLoadRequestsParam, requests);\n    handle.put(request);\n\n    return handle;\n  }\n\n}\n\n/**\n * Page load parameter.\n *\n * Accepts a {@link PageLoadRequest page load request} as input.\n *\n * A page load is initiated whenever a page with new address is {@link Navigation.onEnter entered}.\n *\n * Page load won't be initiated if:\n * - page load parameter is not {@link Page.put} added,\n * - all added {@link PageLoadRequest.receiver response receiver}s supplies are cut off, or\n * - the entered page address is the the same one as previous one, except the hash,\n */\nexport const PageLoadParam: PageParam<void, PageLoadRequest> = (/*#__PURE__*/ new PageLoadParam$());\n","import { ContextKey__symbol, SingleContextKey } from '@proc7ts/context-values';\nimport { AfterEvent, afterThe } from '@proc7ts/fun-events';\nimport { BootstrapContext, bootstrapDefault, BootstrapWindow } from '@wesib/wesib';\nimport { Navigation } from '../navigation';\nimport { PageLoadAgent } from './page-load-agent';\nimport { PageLoadURLModifier } from './page-load-url-modifier';\n\nconst PageCacheBuster__key = (/*#__PURE__*/ new SingleContextKey<PageCacheBuster>(\n    'page-cache-buster',\n    {\n      byDefault: bootstrapDefault(context => new PageCacheBuster(context)),\n    },\n));\n\n/**\n * @internal\n */\nexport const appRevSearchParam = '__wesib_app_rev__';\n\n/**\n * @internal\n */\nexport class PageCacheBuster {\n\n  static get [ContextKey__symbol](): SingleContextKey<PageCacheBuster> {\n    return PageCacheBuster__key;\n  }\n\n  readonly urlModifier: AfterEvent<PageLoadURLModifier[]>;\n  readonly agent: AfterEvent<PageLoadAgent[]>;\n\n  constructor(context: BootstrapContext) {\n\n    const rev = appRev(context.get(BootstrapWindow).document);\n\n    if (!rev) {\n      this.urlModifier = afterThe();\n      this.agent = afterThe();\n    } else {\n\n      const navigation = context.get(Navigation);\n\n      this.urlModifier = afterThe(url => url.searchParams.set(appRevSearchParam, rev));\n      this.agent = afterThe(\n          (next, request) => next(new Request(request.url, request))\n              .thru_(\n                  response => {\n                    if (response.ok) {\n\n                      const newRev = appRev(response.document);\n\n                      if (newRev && newRev !== rev) {\n\n                        const url = new URL(response.page.url.href);\n\n                        url.searchParams.set(appRevSearchParam, newRev);\n                        navigation.update(url);\n                        navigation.reload();\n                      }\n                    }\n\n                    return response;\n                  },\n              ),\n      );\n    }\n  }\n\n}\n\nfunction appRev(doc: Document): string | null | undefined {\n  return doc.querySelector('meta[name=wesib-app-rev]')?.getAttribute('content');\n}\n","import { filterIt, itsEach, mapIt, overArray } from '@proc7ts/a-iterable';\nimport { BootstrapContext, BootstrapWindow } from '@wesib/wesib';\nimport { importNode } from '../../util';\nimport { PageLoadAgent } from './page-load-agent';\n\n/**\n * @internal\n */\nexport function pageScriptsAgent(context: BootstrapContext): PageLoadAgent {\n\n  const doc = context.get(BootstrapWindow).document;\n\n  return next => next().thru_(\n      response => {\n        if (response.ok) {\n\n          const allScripts = new Set<string>(mapIt(\n              externalScripts(doc, overArray(doc.scripts)),\n              ([src]) => src,\n          ));\n\n          itsEach(\n              filterIt(\n                  externalScripts(response.document, overArray(response.document.querySelectorAll('script'))),\n                  ([src]) => !allScripts.has(src),\n              ),\n              ([src, script]) => {\n                importNode(script, doc.head, (_from, to) => to.src = src);\n                allScripts.add(src);\n              },\n          );\n        }\n        return response;\n      },\n  );\n}\n\nfunction externalScripts(\n    doc: Document,\n    scripts: Iterable<HTMLScriptElement>,\n): Iterable<readonly [string, HTMLScriptElement]> {\n  return mapIt(\n      filterIt(\n          scripts,\n          script => !!script.src,\n      ),\n      script => [new URL(script.src, doc.baseURI).href, script] as const,\n  );\n}\n","import { itsEach, itsFirst, overArray } from '@proc7ts/a-iterable';\nimport { BootstrapContext, BootstrapWindow } from '@wesib/wesib';\nimport { importNode } from '../../util';\nimport { PageLoadAgent } from './page-load-agent';\n\n/**\n * @internal\n */\nexport function pageStyleAgent(context: BootstrapContext): PageLoadAgent {\n\n  const doc = context.get(BootstrapWindow).document;\n\n  return next => next().thru_(\n      response => {\n        if (!response.ok) {\n          return response;\n        }\n\n        const newStyles = response.document.querySelectorAll<HTMLLinkElement>('link[rel=stylesheet]');\n\n        if (!newStyles.length) {\n          return response;\n        }\n\n        let target: Node = doc.head;\n        let before: Node | null = null;\n        const oldStyles = doc.querySelectorAll<HTMLLinkElement>('link[rel=stylesheet]');\n        const oldStylesByHref = new Map<string, HTMLLinkElement>();\n        const firstOldStyle = oldStyles.item(0);\n\n        if (firstOldStyle) {\n          target = firstOldStyle.parentNode!;\n          before = firstOldStyle;\n          itsEach(\n              overArray(oldStyles),\n              link => oldStylesByHref.set(new URL(link.href, doc.baseURI).href, link),\n          );\n        }\n\n        itsEach(\n            overArray(newStyles),\n            newStyle => {\n\n              const href = new URL(newStyle.href, doc.baseURI).href;\n              const oldStyle = oldStylesByHref.get(href);\n\n              if (oldStyle) {\n                // Style already exists.\n                if (itsFirst(oldStylesByHref.keys()) === href) {\n                  // In proper position already.\n                  // Insert the remaining styles after it.\n                  target = oldStyle.parentNode!;\n                  before = oldStyle.nextSibling;\n                } else {\n                  // Move to proper position.\n                  target.insertBefore(oldStyle, before);\n                }\n                oldStylesByHref.delete(href);\n              } else {\n                // Import new style\n                importNode(newStyle, target, before, (_from, to) => to.href = href);\n              }\n            },\n        );\n\n        // Remove remaining old styles\n        itsEach(oldStylesByHref.values(), style => style.parentNode!.removeChild(style));\n\n        return response;\n      },\n  );\n}\n","import { BootstrapContext, BootstrapWindow } from '@wesib/wesib';\nimport { PageLoadAgent } from './page-load-agent';\n\n/**\n * @internal\n */\nexport function pageTitleAgent(context: BootstrapContext): PageLoadAgent {\n\n  const doc = context.get(BootstrapWindow).document;\n\n  return next => next().thru_(response => {\n    if (response.ok) {\n\n      const title = response.document.getElementsByTagName('title').item(0);\n\n      if (title && title.textContent) {\n        doc.title = title.textContent;\n      }\n    }\n\n    return response;\n  });\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { FeatureDef, FeatureDef__symbol } from '@wesib/wesib';\nimport { PageCacheBuster } from './page-cache-buster.impl';\nimport { PageLoadAgent } from './page-load-agent';\nimport { PageLoadURLModifier } from './page-load-url-modifier';\nimport { pageScriptsAgent } from './page-scripts-agent.impl';\nimport { pageStyleAgent } from './page-style-agent.impl';\nimport { pageTitleAgent } from './page-title-agent.impl';\n\n/**\n * @internal\n */\nconst PageLoadSupport__feature: FeatureDef = {\n  setup(setup) {\n    setup.provide({\n      a: PageLoadURLModifier,\n      by: (buster: PageCacheBuster) => buster.urlModifier,\n      with: [PageCacheBuster],\n    });\n    setup.provide({\n      a: PageLoadAgent,\n      by: (buster: PageCacheBuster) => buster.agent,\n      with: [PageCacheBuster],\n    });\n    setup.provide({ a: PageLoadAgent, by: pageScriptsAgent });\n    setup.provide({ a: PageLoadAgent, by: pageStyleAgent });\n    setup.provide({ a: PageLoadAgent, by: pageTitleAgent });\n  },\n};\n\n/**\n * Page load support feature.\n *\n * Enables default {@link PageLoadAgent page load agents}:\n * 1. Page cache busting agent.\n *    If `<meta name=\"wesib-app-rev\">` tag is present in initial page, then sends this tag's content with each page load\n *    request as `__wesib_app_rev__` search parameter. If the loaded page contains the same named meta tag with\n *    different content, then reloads the page.\n *    This serves both as cache busting technique, and as server-side application updates handler.\n * 2. Scripts agent.\n *    Includes external scripts from loaded page into main document.\n * 3. Style agent.\n *    Replaces external styles of main document styles with the ones from loaded page.\n *    Unless loaded page has no external styles.\n * 4. Title agent.\n *    Applies loaded page title to bootstrap window. If there is one.\n */\nexport class PageLoadSupport {\n\n  static get [FeatureDef__symbol](): FeatureDef {\n    return PageLoadSupport__feature;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { eventSupply } from '@proc7ts/fun-events';\nimport { Class, noop, valueProvider } from '@proc7ts/primitives';\nimport {\n  BootstrapWindow,\n  Component,\n  ComponentClass,\n  ComponentContext,\n  ComponentDecorator,\n  ElementRenderScheduler,\n  RenderDef,\n} from '@wesib/wesib';\nimport { importNodeContent } from '../../util';\nimport { Navigation } from '../navigation';\nimport { Page } from '../page';\nimport { PageLoadParam } from './page-load-param';\nimport { PageFragmentRequest } from './page-load-request';\nimport { PageLoadResponse } from './page-load-response';\nimport { PageLoadSupport } from './page-load-support.feature';\n\n/**\n * Creates component decorator that includes page contents into decorated component's element.\n *\n * The page is loaded and included whenever it is {@link Navigation.onEnter entered}.\n *\n * Utilizes [[PageLoadParam]] navigation parameter.\n *\n * Enables [[PageLoadSupport]] feature.\n *\n * @typeparam T  A type of decorated component class.\n * @param def  Page inclusion definition.\n *\n * @returns New component decorator.\n */\nexport function IncludePage<T extends ComponentClass = Class>(\n    def: IncludePageDef<InstanceType<T>> = {},\n): ComponentDecorator<T> {\n\n  const onResponse = def.onResponse ? def.onResponse.bind(def) : noop;\n  const contentKey: (page: Page) => string | undefined = def.contentKey\n      ? def.contentKey.bind(def)\n      : defaultPageContentKey;\n\n  return Component({\n    feature: {\n      needs: [PageLoadSupport],\n    },\n    define(context) {\n      context.whenComponent(context => {\n\n        const { fragment, render } = def;\n        const document = context.get(BootstrapWindow).document;\n        const schedule = context.get(ElementRenderScheduler)(render);\n        const navigation = context.get(Navigation);\n        let lastPageURL = contentKey(navigation.page);\n        let detectFragment: () => PageFragmentRequest;\n\n        if (fragment) {\n          detectFragment = valueProvider(fragment);\n        } else {\n          detectFragment = () => {\n\n            const { element: { id, tagName: tag } } = context as { element: Element };\n\n            return id ? { id } : { tag };\n          };\n        }\n\n        context.whenConnected(() => {\n\n          const range = document.createRange();\n\n          range.selectNodeContents(context.contentRoot);\n\n          navigation.read().once(page => {\n            page.put(\n                PageLoadParam,\n                {\n                  fragment: detectFragment(),\n                  receiver: {\n                    supply: eventSupply().needs(context),\n                    receive: (_ctx, response) => handleResponse(response),\n                  },\n                },\n            );\n          });\n\n          function handleResponse(response: PageLoadResponse): void {\n\n            const newPageURL = contentKey(response.page);\n\n            if (newPageURL === lastPageURL) {\n              return; // Only hash changed. Do not refresh the page.\n            }\n\n            if (!response.ok) {\n              schedule(() => onResponse({ context, range, response }));\n              return;\n            }\n\n            lastPageURL = newPageURL;\n            schedule(() => {\n              range.deleteContents();\n\n              const target = document.createDocumentFragment();\n              const { fragment } = response;\n\n              if (fragment) {\n                importNodeContent(fragment, target);\n                range.insertNode(target);\n              }\n\n              onResponse({ context, range, response });\n            });\n          }\n        });\n      });\n    },\n  });\n}\n\n/**\n * @internal\n */\nfunction defaultPageContentKey({ url }: Page): string {\n  return new URL('', url).href;\n}\n\n/**\n * Page inclusion definition.\n *\n * Configures {@link IncludePage @LoadPage} decorator.\n *\n * @typeparam T  A type of component.\n */\nexport interface IncludePageDef<T extends object = any> {\n\n  /**\n   * Page fragment to include.\n   *\n   * By default uses custom element identifier if present, or element tag name otherwise.\n   */\n  readonly fragment?: PageFragmentRequest;\n\n  /**\n   * Rendering options.\n   */\n  readonly render?: RenderDef.Options;\n\n  /**\n   * Builds content key for the given page.\n   *\n   * The loaded content will replace already included one only when their content key differ.\n   *\n   * By default uses page URL without hash part as a key. This prevents content refresh when only URL hash changes.\n   *\n   * @param page  Target page. Either loaded or not.\n   *\n   * @returns Content key.\n   */\n  contentKey?(page: Page): any;\n\n  /**\n   * Performs additional actions during page load.\n   *\n   * This method is called inside page contents render schedule for {@link PageLoadResponse each stage} of page\n   * load. At the final stage it is called after loaded page contents included.\n   *\n   * This method can be used e.g. to indicate the page load progress.\n   *\n   * @param context  Decorated component context.\n   * @param response  Page load response.\n   * @param range  Document range the loaded page contents going to replace.\n   */\n  onResponse?(\n      {\n        context,\n        response,\n        range,\n      }: {\n        context: ComponentContext<T>;\n        response: PageLoadResponse;\n        range: Range;\n      },\n  ): void;\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic/input\n */\nimport { ContextValueSlot } from '@proc7ts/context-values';\nimport { ContextSupply, ContextUpKey, ContextUpRef } from '@proc7ts/context-values/updatable';\nimport { AfterEvent, EventKeeper } from '@proc7ts/fun-events';\nimport { InConverter, InNamespaceAliaser, InRenderScheduler, intoConvertedBy } from '@proc7ts/input-aspects';\nimport { DefaultNamespaceAliaser, ElementRenderScheduler } from '@wesib/wesib';\n\n/**\n * Default input aspects.\n *\n * This is an `AfterEvent` keeper of aspect converter meant to be applied to controls.\n *\n * As a bare minimum it assigns the following aspects to converted controls:\n * - `InRenderScheduler` set to `ElementRenderScheduler`,\n * - `InNamespaceAliaser` set to `DefaultNamespaceAliaser.\n *\n * More input aspect converters may be registered in context. They may override the default ones.\n */\nexport type DefaultInAspects = AfterEvent<[InConverter.Aspect<any, any>]>;\n\n/**\n * @internal\n */\nclass DefaultInAspectsKey\n    extends ContextUpKey<AfterEvent<[InConverter.Aspect<any, any>]>, InConverter.Aspect<any, any>> {\n\n  get upKey(): this {\n    return this;\n  }\n\n  constructor() {\n    super('default-in-aspects');\n  }\n\n  grow(\n      slot: ContextValueSlot<\n          AfterEvent<[InConverter.Aspect<any, any>]>,\n          EventKeeper<InConverter.Aspect<any, any>[]> | InConverter.Aspect<any, any>,\n          AfterEvent<InConverter.Aspect<any, any>[]>>,\n  ): void {\n\n    const nsAlias = slot.context.get(DefaultNamespaceAliaser);\n    const scheduler = slot.context.get(ElementRenderScheduler);\n\n    slot.insert(\n        slot.seed.keepThru(\n            (...fns) => intoConvertedBy(\n                ...fns,\n                InRenderScheduler.to(scheduler),\n                InNamespaceAliaser.to(nsAlias),\n            ),\n        ).tillOff(\n            slot.context.get(ContextSupply),\n        ),\n    );\n  }\n\n}\n\n/**\n * A key of component context containing default input aspects.\n */\nexport const DefaultInAspects: ContextUpRef<DefaultInAspects, InConverter.Aspect<any, any>> = (\n    /*#__PURE__*/ new DefaultInAspectsKey()\n);\n","/**\n * @packageDocumentation\n * @module @wesib/generic/input\n */\nimport { SingleContextUpKey, SingleContextUpRef } from '@proc7ts/context-values/updatable';\nimport { eventSupply, EventSupply } from '@proc7ts/fun-events';\nimport { InControl } from '@proc7ts/input-aspects';\nimport { ComponentContext } from '@wesib/wesib';\nimport { HierarchyContext } from '../hierarchy';\n\n/**\n * A user input originated from control.\n *\n * It is meant to be present in root {@link HierarchyContext hierarchy context}. Nested components may access it from\n * their hierarchy contexts to participate in user input.\n *\n * An [[inputFromControl]] function can be used to initiate user input.\n *\n * @typeparam Value  Input value type.\n */\nexport interface InputFromControl<Value = any> {\n\n  /**\n   * Root component context the input is initiated for.\n   */\n  readonly root: ComponentContext;\n\n  /**\n   * User input control.\n   */\n  readonly control: InControl<Value>;\n\n}\n\n/**\n * No user input originated from control.\n */\nexport interface NoInputFromControl {\n  control?: undefined;\n}\n\n/**\n * A key of hierarchy context value containing a user input originated from control. Potentially\n * {@link NoInputFromControl absent}.\n */\nexport const InputFromControl: SingleContextUpRef<InputFromControl | NoInputFromControl> = (\n    /*#__PURE__*/ new SingleContextUpKey<InputFromControl | NoInputFromControl>(\n        'input-from-control',\n        {\n          byDefault: () => ({}),\n        },\n    )\n);\n\n/**\n * Initiates user input from the given control for the given root component.\n *\n * Constructs an [[InputFromControl]] instance and makes it available in `root` component's hierarchy.\n *\n * @typeparam Value  Input value type.\n * @param root  Root component context to initiate user input for.\n * @param control  User input control.\n *\n * @returns User input supply. The user input would be stopped once this supply is cut off.\n */\nexport function inputFromControl<Value>(\n    root: ComponentContext,\n    control: InControl<Value>,\n): EventSupply {\n\n  const off = root.get(HierarchyContext).provide({\n    a: InputFromControl,\n    by: () => ({\n      root,\n      control,\n    }),\n  });\n\n  return eventSupply(off)\n      .needs(root)\n      .needs(control);\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic/styp\n */\nimport { SingleContextKey, SingleContextRef } from '@proc7ts/context-values';\nimport { EventSupply } from '@proc7ts/fun-events';\nimport { produceBasicStyle, StypFormat, StypRules } from '@proc7ts/style-producer';\nimport { bootstrapDefault } from '@wesib/wesib';\n\n/**\n * Component style producer signature.\n */\nexport type ComponentStyleProducer =\n/**\n * @param rules  CSS rules to produce stylesheets for. This can be e.g. a `StypRule.rules` to render all rules,\n * or a result of `StypRuleList.grab()` method call to render only matching ones.\n * @param format  Style production format.\n *\n * @returns Styles supply. Once cut off (i.e. its `off()` method is called) the produced stylesheets are removed.\n */\n    (\n        rules: StypRules,\n        format: StypFormat,\n    ) => EventSupply;\n\n/**\n * A key of bootstrap, definition, or component context value containing a component style producer.\n *\n * Utilizes `produceBasicStyle()` by default. I.e. it does not enable default renderers. To enable them all a\n * [[StyleProducerSupport]] can be used.\n *\n * Depends on [@proc7ts/style-producer].\n *\n * [@proc7ts/style-producer]: https://www.npmjs.com/package/@proc7ts/style-producer\n */\nexport const ComponentStyleProducer: SingleContextRef<ComponentStyleProducer> = (\n    /*#__PURE__*/ new SingleContextKey<ComponentStyleProducer>(\n        'component-style-producer',\n        {\n          byDefault: bootstrapDefault(() => produceBasicStyle),\n        },\n    )\n);\n","/**\n * @packageDocumentation\n * @module @wesib/generic/styp\n */\nimport { StypDomFormatConfig } from '@proc7ts/style-producer';\nimport {\n  BootstrapWindow,\n  ComponentContext,\n  DefaultNamespaceAliaser,\n  ElementRenderScheduler,\n  RenderDef,\n} from '@wesib/wesib';\nimport { ComponentStypFormat, ComponentStypFormatConfig } from './component-styp-format';\n\n/**\n * Builds configuration of DOM style production format.\n *\n * Schedules style rendering in `ElementRenderScheduler` by default.\n *\n * Utilizes `DefaultNamespaceAliaser` by default.\n *\n * @param format  Target component style production format.\n * @param config  Original component style production format configuration.\n * @param render  Element render definition to apply to style render schedule, unless render scheduler specified\n * explicitly in `config`.\n *\n * @returns Configuration of DOM style production format.\n */\nexport function componentStypDomFormatConfig(\n    format: ComponentStypFormat,\n    config: ComponentStypFormatConfig & StypDomFormatConfig = {},\n    render?: RenderDef,\n): StypDomFormatConfig {\n\n  const { context } = format;\n\n  return {\n    ...config,\n    document: config.document || context.get(BootstrapWindow).document,\n    parent: config.parent || context.contentRoot,\n    rootSelector: [],\n    scheduler: config.scheduler || defaultStypRenderScheduler(context, render),\n    nsAlias: config.nsAlias || context.get(DefaultNamespaceAliaser),\n    renderer: format.renderer(config),\n  };\n}\n\n/**\n * @internal\n */\nfunction defaultStypRenderScheduler(\n    context: ComponentContext,\n    render: RenderDef = {},\n): ElementRenderScheduler {\n\n  const scheduler = context.get(ElementRenderScheduler);\n\n  return (opts = {}) => scheduler({ ...opts, ...render });\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic/styp\n */\nimport { MultiContextKey, MultiContextRef } from '@proc7ts/context-values';\nimport { StypRenderer } from '@proc7ts/style-producer';\n\n/**\n * A CSS renderer that will be enabled by default by {@link ComponentStypFormat component style production format}.\n */\nexport type ComponentStypRenderer = StypRenderer;\n\n/**\n * A key of component context value containing component CSS renderers.\n */\nexport const ComponentStypRenderer: MultiContextRef<ComponentStypRenderer> = (\n    /*#__PURE__*/ new MultiContextKey<ComponentStypRenderer>('component-styp-renderer')\n);\n","import { ContextValues, SingleContextKey, SingleContextRef } from '@proc7ts/context-values';\nimport { css__naming, html__naming, NamespaceDef, QualifiedName } from '@proc7ts/namespace-aliaser';\nimport { ComponentContext, DefaultNamespaceAliaser, ElementDef } from '@wesib/wesib';\n\n/**\n * @internal\n */\nexport type ElementIdClass = QualifiedName;\n\n/**\n * @internal\n */\nexport const ElementIdClass__NS = (/*#__PURE__*/ new NamespaceDef(\n    'https://wesib.github.io/ns/element-id-class',\n    'elic',\n    'element-id-class',\n));\n\n/**\n * @internal\n */\nexport const ElementIdClass: SingleContextRef<ElementIdClass> = (/*#__PURE__*/ new SingleContextKey(\n    'unique-element-class',\n    { byDefault: assignElementId },\n));\n\n/**\n * @internal\n */\nlet uniqueClassSeq = 0;\n\n/**\n * @internal\n */\nfunction assignElementId(contextValues: ContextValues): ElementIdClass {\n\n  const aliaser = contextValues.get(DefaultNamespaceAliaser);\n  const context = contextValues.get(ComponentContext);\n  const elementDef = context.get(ElementDef);\n  const name: string = elementDef.name ? html__naming.name(elementDef.name, aliaser) : 'component';\n  const local = `${name}#${++uniqueClassSeq}`;\n  const qualified = ElementIdClass__NS.name(aliaser(ElementIdClass__NS), local, css__naming);\n  const element = context.element as Element;\n\n  element.classList.add(qualified);\n\n  return qualified;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic/styp\n */\nimport { ContextKey, ContextKey__symbol, SingleContextKey } from '@proc7ts/context-values';\nimport { EventSupply, eventSupply, eventSupplyOf } from '@proc7ts/fun-events';\nimport { NamespaceAliaser } from '@proc7ts/namespace-aliaser';\nimport { elementOrArray, extendSetOfElements, setOfElements, valueProvider } from '@proc7ts/primitives';\nimport { RenderScheduler } from '@proc7ts/render-scheduler';\nimport {\n  lazyStypRules,\n  StypFormat,\n  StypFormatConfig,\n  stypObjectFormat,\n  StypObjectFormatConfig,\n  StypPureSelector,\n  StypRenderer,\n  StypRules,\n  StypSelector,\n  stypSelector,\n  StypSubSelector,\n} from '@proc7ts/style-producer';\nimport { ComponentContext, ShadowContentRoot } from '@wesib/wesib';\nimport { ComponentStyleProducer } from './component-style-producer';\nimport { componentStypDomFormatConfig } from './component-styp-dom.format-config';\nimport { ComponentStypRenderer } from './component-styp-renderer';\nimport { ElementIdClass } from './element-id-class.impl';\n\n/**\n * Configuration of {@link ComponentStypFormat component style production format}.\n *\n * Depends on [@proc7ts/style-producer].\n *\n * [@proc7ts/style-producer]: https://www.npmjs.com/package/@proc7ts/style-producer\n */\nexport interface ComponentStypFormatConfig extends StypFormatConfig {\n\n  /**\n   * Structured CSS selector to use for custom element's host.\n   *\n   * It modifies the selectors of produced CSS rules.\n   *\n   * For custom element with shadow root:\n   * - Replaces root CSS rule selector with `:host(<hostSelector>).\n   * - When `hostSelector` is omitted, then replaces root CSS rule selector with `:host`.\n   * - If CSS rule selector starts with `:host`, then replaces `:host` with `:host(<hostSelector>)`\n   * - If CSS rule selector starts with `:host(<selector>)`, then extends `<selector>` by `hostSelector`.\n   *   I.e. appends CSS classes and sub-selectors to it, and fulfills missing element and identifier selectors.\n   *\n   * For custom element without shadow root either uses provided `hostSelector`, or generates a unique one when omitted.\n   * And additionally:\n   * - Replaces root CSS rule selector it with `hostSelector`.\n   * - If CSS rule selector starts with `:host`, then replaces `:host` with `hostSelector`.\n   * - If CSS rule selector starts with `:host(<selector>), then replaces `:host(<selector>)` with `<selector>` extended\n   *   by `hostSelector`. I.e. appends CSS classes and sub-selectors to it, and fulfills missing element and identifier\n   *   selectors.\n   * - Otherwise prepends CSS rule selector with `hostSelector`.\n   *\n   * This selector should not contain a `:host` sub-selector.\n   */\n  readonly hostSelector?: StypPureSelector.Part | string;\n\n  /**\n   * Root CSS selector is never used for custom elements. A `hostSelector` is applied instead.\n   */\n  readonly rootSelector?: undefined;\n\n  /**\n   * DOM rendering operations scheduler.\n   *\n   * Creates a render schedule per rule.\n   *\n   * `ElementRenderScheduler` is used when omitted.\n   */\n  readonly scheduler?: RenderScheduler;\n\n  /**\n   * Namespace aliaser to use.\n   *\n   * `DefaultNamespaceAliaser` is used when omitted.\n   */\n  readonly nsAlias?: NamespaceAliaser;\n\n}\n\nconst ComponentStypFormat__symbol = (/*#__PURE__*/ new SingleContextKey<ComponentStypFormat>(\n    'component-styp-format',\n    {\n      byDefault(context) {\n        return new ComponentStypObjectFormat(context.get(ComponentContext));\n      },\n    },\n));\n\n/**\n * Component style production format.\n *\n * This format can be obtained from component context.\n *\n * The formats implemented:\n * - {@link ComponentStypObjectFormat} (the default) renders CSS using CSS object model.\n * - {@link ComponentStypDomFormat} renders CSS as text. May render CSS of disconnected element.\n */\nexport abstract class ComponentStypFormat {\n\n  /**\n   * A key of component context value containing its style production format.\n   */\n  static get [ContextKey__symbol](): ContextKey<ComponentStypFormat> {\n    return ComponentStypFormat__symbol;\n  }\n\n  /**\n   * Component context.\n   */\n  abstract readonly context: ComponentContext;\n\n  /**\n   * Produces and dynamically updates component's CSS stylesheets based on the given CSS rules.\n   *\n   * Utilizes {@link newProducer component's producer function}.\n   *\n   * @param rules  A source of CSS rules to produce stylesheets for.\n   * @param config  Style production format configuration.\n   *\n   * @returns CSS rules supply. Once cut off the produced stylesheets are removed.\n   */\n  produce(\n      rules: StypRules.Source,\n      config?: ComponentStypFormatConfig,\n  ): EventSupply {\n\n    const producer = this.newProducer(rules, config);\n    const supply = eventSupply();\n\n    this.context.whenSettled(() => {\n      producer().needs(supply).cuts(supply);\n    });\n\n    return supply;\n  }\n\n  /**\n   * Creates component's CSS stylesheets producer based on the given CSS rules.\n   *\n   * Utilizes {@link ComponentStyleProducer}.\n   *\n   * @param rules  A source of CSS rules to produce stylesheets for.\n   * @param config  Style production format configuration.\n   *\n   * @returns CSS rules producer function returning CSS rules supply. Once cut off the produced stylesheets are removed.\n   */\n  newProducer(\n      rules: StypRules.Source,\n      config?: ComponentStypFormatConfig,\n  ): (this: void) => EventSupply {\n\n    const css = lazyStypRules(rules);\n    let producer: () => EventSupply;\n    const componentSupply = eventSupplyOf(this.context);\n\n    producer = () => {\n\n      const produceStyle = this.context.get(ComponentStyleProducer);\n\n      return produceStyle(css, this.format(config)).needs(componentSupply);\n    };\n\n    // In case the component destroyed already, the producer will be reassigned here _before_ return.\n    componentSupply.whenOff(() => {\n      // Prevent style production once component destroyed.\n      producer = valueProvider(componentSupply);\n    });\n\n    return () => producer();\n  }\n\n  /**\n   * Builds CSS style production format to by its config.\n   *\n   * This method is called by {@link produce} one.\n   *\n   * @param config  Component style production format configuration.\n   *\n   * @returns Component style production format.\n   */\n  abstract format(config?: ComponentStypFormatConfig): StypFormat;\n\n  /**\n   * Builds component-specific style renderer.\n   *\n   * This renderer applies {@link ComponentStypFormatConfig.hostSelector host selector} to generated CSS rules.\n   *\n   * This method is called by {@link format} one.\n   *\n   * @param config  Component style production format configuration.\n   *\n   * @returns Component style renderer(s).\n   */\n  renderer(\n      config: ComponentStypFormatConfig,\n  ): StypRenderer | readonly StypRenderer[] | undefined {\n\n    const shadowRoot = this.context.get(ShadowContentRoot, { or: null });\n    const { renderer } = config;\n    const renderers = extendSetOfElements(\n        setOfElements<StypRenderer>(renderer),\n        this.context.get(ComponentStypRenderer),\n    );\n\n    const hostSelector = config.hostSelector\n        ? stypSelector(config.hostSelector)[0] as StypPureSelector.NormalizedPart\n        : undefined;\n\n    renderers.add(shadowRoot\n        ? shadowRenderer(hostSelector)\n        : noShadowRenderer(hostSelector || { c: [this.context.get(ElementIdClass)] }));\n\n    return elementOrArray(renderers);\n  }\n\n}\n\n\n/**\n * @internal\n */\nfunction shadowRenderer(hostSelector: StypPureSelector.NormalizedPart | undefined): StypRenderer {\n  return {\n    order: -100,\n    render(producer, properties) {\n\n      let { selector } = producer;\n\n      if (!selector.length) {\n        selector = [hostSelector || { u: [[':', 'host']] }];\n      } else if (hostSelector) {\n\n        const [rest, host] = extractHostSelector(selector);\n\n        if (host) {\n          if (host.length) {\n            selector = [{ u: [[':', 'host', extendHostSelector(host, hostSelector)]] }, ...rest];\n          } else {\n            selector = [{ u: [[':', 'host', [hostSelector]]] }, ...rest];\n          }\n        }\n      }\n\n      producer.render(properties, { selector });\n    },\n  };\n}\n\n/**\n * @internal\n */\nfunction noShadowRenderer(hostSelector: StypPureSelector.NormalizedPart): StypRenderer {\n  return {\n    order: -100,\n    render(producer, properties) {\n\n      let { selector } = producer;\n\n      if (!selector.length) {\n        selector = [hostSelector];\n      } else {\n\n        const [rest, host] = extractHostSelector(selector);\n\n        if (host && host.length) {\n          selector = [...extendHostSelector(host, hostSelector), ...rest];\n        } else {\n          selector = [hostSelector, ...rest];\n        }\n      }\n\n      producer.render(properties, { selector });\n    },\n  };\n}\n\n/**\n * @internal\n */\nfunction extractHostSelector(\n    selector: StypSelector.Normalized,\n): [StypSelector.Normalized, StypSelector.Normalized?] {\n  if (typeof selector[0] !== 'string') {\n\n    const [{ ns, e, i, c, u, s, $ }, ...restParts] = selector;\n\n    if (!ns && !e && !i && !c && !s && u) {\n\n      const [[prefix, name, ...params]] = u;\n\n      if (prefix === ':' && name === 'host') {\n\n        let host: StypSelector.Mutable;\n\n        if (params.length) {\n          host = Array.from(params[0] as StypSubSelector.NormalizedParameter);\n          (host[0] as any).$ = $;\n        } else {\n          host = $ ? [{ $ }] : [];\n        }\n\n        return [restParts, host];\n      }\n    }\n  }\n  return [selector];\n}\n\n/**\n * @internal\n */\nfunction extendHostSelector(\n    selector: StypSelector.Normalized,\n    {\n      ns,\n      e,\n      i,\n      c,\n      u,\n      s,\n    }: StypPureSelector.NormalizedPart,\n): StypSelector.Normalized {\n\n  const [first, ...rest] = selector as [StypSelector.NormalizedPart, ...StypSelector.Normalized];\n\n  return [\n    {\n      ns: first.e || first.ns ? first.ns : ns,\n      e: first.e || first.ns ? first.e : e,\n      i: first.i || i,\n      c: first.c ? (c ? [...first.c, ...c] : first.c) as typeof c : c,\n      u: first.u ? (u ? [...first.u, ...u] : first.u) as typeof u : u,\n      s: ((first.s || '') + (s || '')) || undefined,\n      $: first.$,\n    },\n    ...rest,\n  ];\n}\n\n/**\n * Component's CSS object model production format.\n *\n * Renders CSS when component's element connected to document.\n *\n * This format is used by default.\n */\nexport class ComponentStypObjectFormat extends ComponentStypFormat {\n\n  /**\n   * Constructs CSS object model production format.\n   *\n   * @param context  Target component context.\n   */\n  constructor(readonly context: ComponentContext) {\n    super();\n  }\n\n  format(config?: ComponentStypFormatConfig & StypObjectFormatConfig): StypFormat {\n    return stypObjectFormat(this.config(config));\n  }\n\n  /**\n   * Builds configuration of CSS object model production format.\n   *\n   * This method is called by {@link format} one.\n   *\n   * @param config  Original component style production format configuration.\n   *\n   * @returns Configuration of CSS object model production format.\n   */\n  config(config?: ComponentStypFormatConfig & StypObjectFormatConfig): StypObjectFormatConfig {\n    return componentStypDomFormatConfig(this, config, { when: 'connected' });\n  }\n\n}\n\n","/**\n * @packageDocumentation\n * @module @wesib/generic/styp\n */\nimport { stypDomFormat, StypDomFormatConfig, StypFormat } from '@proc7ts/style-producer';\nimport { ComponentContext } from '@wesib/wesib';\nimport { componentStypDomFormatConfig } from './component-styp-dom.format-config';\nimport { ComponentStypFormat, ComponentStypFormatConfig } from './component-styp-format';\n\n/**\n * Component's DOM style production format.\n *\n * Renders CSS styles as text.\n *\n * This format is generally slower than {@link ComponentStypObjectFormat}, but allows to render styles before element\n * is connected to document.\n */\nexport class ComponentStypDomFormat extends ComponentStypFormat {\n\n  /**\n   * When to start component style rendering.\n   *\n   * One of:\n   * `settled` (the default) - to start rendering when component is settled.\n   * `connected` - to start rendering when component's element is connected to document.\n   */\n  readonly when: 'settled' | 'connected';\n\n  /**\n   * Constructs DOM style production format.\n   *\n   * @param context  Target component context.\n   * @param when  When to start style rendering. `settled` by default.\n   */\n  constructor(\n      readonly context: ComponentContext,\n      {\n        when = 'settled',\n      }: {\n        readonly when?: 'settled' | 'connected';\n      } = {},\n  ) {\n    super();\n    this.when = when;\n  }\n\n  format(config?: ComponentStypFormatConfig & StypDomFormatConfig): StypFormat {\n    return stypDomFormat(this.config(config));\n  }\n\n  /**\n   * Builds configuration of DOM style production format.\n   *\n   * This method is called by {@link format} one.\n   *\n   * @param config  Original component style production format configuration.\n   *\n   * @returns Configuration of DOM style production format.\n   */\n  config(\n      config?: ComponentStypFormatConfig & StypDomFormatConfig,\n  ): StypDomFormatConfig {\n    return componentStypDomFormatConfig(this, config, { when: this.when });\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic/styp\n */\nimport { StypRule, StypRules } from '@proc7ts/style-producer';\nimport { ComponentClass, ComponentProperty, ComponentPropertyDecorator } from '@wesib/wesib';\nimport { ComponentStypFormat, ComponentStypFormatConfig } from './component-styp-format';\n\n/**\n * A decorator of component property returning CSS rules to produce.\n *\n * Decorated property value should either contain a CSS rules source of type `StypRules.Source` or be a method\n * returning it.\n *\n * Produces CSS using {@link ComponentStypFormat component style production format}.\n *\n * Depends on [@proc7ts/style-producer].\n *\n * [@proc7ts/style-producer]: https://www.npmjs.com/package/@proc7ts/style-producer\n *\n * @typeparam T  A type of decorated component class.\n * @param config  Non-mandatory component style production format config.\n *\n * @returns Component property decorator.\n */\nexport function ProduceStyle<T extends ComponentClass>(\n    config?: ComponentStypFormatConfig,\n): ComponentPropertyDecorator<\n    | StypRules.Source\n    | (() => StypRule | StypRules | Promise<StypRule | StypRules>),\n    T> {\n  return ComponentProperty(({ get }) => ({\n    componentDef: {\n      define(defContext) {\n        defContext.whenComponent(context => {\n          context.whenReady(({ component }) => {\n\n            const value = get(component);\n            const source: StypRules.Source = typeof value === 'function' ? value.bind(component) : value;\n            const format = context.get(ComponentStypFormat);\n\n            format.produce(source, config);\n          });\n        });\n      },\n    },\n  }));\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic/styp\n */\nimport { produceStyle } from '@proc7ts/style-producer';\nimport { FeatureDef, FeatureDef__symbol } from '@wesib/wesib';\nimport { ComponentStyleProducer } from './component-style-producer';\n\n/**\n * @internal\n */\nconst StyleProducerSupport__feature: FeatureDef = {\n  setup(setup) {\n    setup.provide({ a: ComponentStyleProducer, is: produceStyle });\n  },\n};\n\n/**\n * Style producer support feature.\n *\n * This feature enables default CSS renderers.\n *\n * It is _not_ enabled automatically by {@link ProduceStyle @ProduceStyle} decorator.\n *\n * Depends on [@proc7ts/style-producer].\n *\n * [@proc7ts/style-producer]: https://www.npmjs.com/package/@proc7ts/style-producer\n */\nexport class StyleProducerSupport {\n\n  static get [FeatureDef__symbol](): FeatureDef {\n    return StyleProducerSupport__feature;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic/styp\n */\nimport { ContextRef, ContextValueSlot, IterativeContextKey } from '@proc7ts/context-values';\nimport { stypRules, StypRules } from '@proc7ts/style-producer';\nimport { Theme } from './theme';\n\n/**\n * Theme style provides part of the theme styling information.\n *\n * Theme style(s) can be provided in bootstrap context. They are applied to the theme at most once, when requested\n * by calling [[Theme.style]] method.\n *\n * Theme style is either a function, or an extension of another theme style.\n */\nexport type ThemeStyle = ThemeStyle.Provider | ThemeStyle.Extension;\n\nexport namespace ThemeStyle {\n\n  /**\n   * Theme style provider function.\n   *\n   * This function is called at most once per theme to apply styles to the latter. E.g. by declaring CSS rules.\n   *\n   * This function is used as an identifier of particular style and can be extended using [[ThemeStyle.Extension]].\n   *\n   * It is not absolutely necessary to register style provider. It will be applied on request anyway.\n   *\n   * @param theme  A theme to apply styling to.\n   *\n   * @returns Dynamically updated CSS rule set containing the applied styling.\n   */\n  export type Provider = (this: void, theme: Theme) => StypRules;\n\n  /**\n   * Theme style extension.\n   *\n   * An extension should be registered in bootstrap context in order to be applied.\n   */\n  export interface Extension {\n\n    /**\n     * A theme style provider to extend.\n     */\n    readonly style: ThemeStyle.Provider;\n\n    /**\n     * Extends the theme style.\n     *\n     * This method is called at most once per theme to apply styles to the latter. E.g. by declaring CSS rules.\n     *\n     * It will be called after the style provider it extends.\n     *\n     * @param theme  A theme to apply styling to.\n     *\n     * @returns Dynamically updated CSS rule set containing the applied styling.\n     */\n    provide(theme: Theme): StypRules;\n\n  }\n\n  /**\n   * A function obtaining combined style provider. I.e. the one that applies the style along with all extensions.\n   *\n   * @param A  provider of theme style to apply.\n   *\n   * @returns A combined theme style provider.\n   */\n  export type ById = (this: void, style: ThemeStyle.Provider) => ThemeStyle.Provider;\n\n}\n\n/**\n * @internal\n */\nclass ThemeStyleKey extends IterativeContextKey<ThemeStyle.ById, ThemeStyle> {\n\n  constructor() {\n    super('theme-style');\n  }\n\n  grow(\n      slot: ContextValueSlot<ThemeStyle.ById, ThemeStyle, Iterable<ThemeStyle>>,\n  ): void {\n\n    const providers = new Map<ThemeStyle.Provider, [ThemeStyle.Provider, boolean]>();\n\n    for (const style of slot.seed) {\n\n      let key: ThemeStyle.Provider;\n      let provider: ThemeStyle.Provider;\n      let isId: boolean;\n\n      if (typeof style === 'function') {\n        key = provider = style;\n        isId = true;\n      } else {\n        key = style.style;\n        provider = style.provide.bind(style);\n        isId = false;\n      }\n\n      const prev = providers.get(key);\n\n      if (!prev) {\n        providers.set(key, [provider, isId]);\n      } else {\n\n        const [prevProvider, hasId] = prev;\n\n        providers.set(\n            key,\n            [\n              isId ? combineStyles(provider, prevProvider) : combineStyles(prevProvider, provider),\n              isId || hasId,\n            ],\n        );\n      }\n    }\n\n    if (providers.size || !slot.hasFallback) {\n      slot.insert(byId);\n    }\n\n    function byId(id: ThemeStyle.Provider): ThemeStyle.Provider {\n\n      const existing = providers.get(id);\n\n      if (!existing) {\n        return id;\n      }\n\n      const [provider, hasId] = existing;\n\n      return hasId ? provider : combineStyles(id, provider);\n    }\n  }\n\n}\n\n/**\n * A key of bootstrap context value containing theme styles.\n */\nexport const ThemeStyle: ContextRef<ThemeStyle.ById, ThemeStyle> = (/*#__PURE__*/ new ThemeStyleKey());\n\n/**\n * @internal\n */\nfunction combineStyles(first: ThemeStyle.Provider, second: ThemeStyle.Provider): ThemeStyle.Provider {\n  return theme => stypRules(first(theme), second(theme));\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic/styp\n */\nimport { ContextKey, ContextKey__symbol, SingleContextKey } from '@proc7ts/context-values';\nimport {\n  lazyStypRules,\n  RefStypRule,\n  StypProperties,\n  stypRoot,\n  StypRule,\n  StypRuleRef,\n  StypRules,\n} from '@proc7ts/style-producer';\nimport { bootstrapDefault } from '@wesib/wesib';\nimport { ThemeStyle } from './theme-style';\n\nexport interface ThemeFactory {\n\n  newTheme(): Theme;\n\n}\n\n/**\n * @internal\n */\nconst Theme__key = (/*#__PURE__*/ new SingleContextKey<Theme>(\n    'theme',\n    {\n      byDefault: bootstrapDefault(context => new Theme$(context.get(ThemeStyle))),\n    },\n));\n\n/**\n * A hierarchy of CSS rules within single root.\n *\n * A component may use it to extract styling information.\n *\n * Current theme is available in bootstrap, definition, or component context. By default, only one theme is declared\n * per bootstrap. But this can be overridden.\n */\nexport abstract class Theme {\n\n  /**\n   * A key of bootstrap, definition, or component context value containing current theme instance.\n   */\n  static get [ContextKey__symbol](): ContextKey<Theme> {\n    return Theme__key;\n  }\n\n  /**\n   * Root CSS rule.\n   *\n   * All theme styling is represented as rules within this root.\n   */\n  abstract readonly root: StypRule;\n\n  /**\n   * Obtains CSS rule reference by its `referrer`.\n   *\n   * This is a helper method that resolves the given `referrer` against the `root` CSS rule of this theme.\n   *\n   * @param referrer  Target CSS rule referrer.\n   *\n   * @returns CSS rule reference.\n   */\n  ref<T extends StypProperties<T>>(referrer: RefStypRule<T>): StypRuleRef<T> {\n    return referrer(this.root);\n  }\n\n  /**\n   * Obtains a styling for the given theme styles.\n   *\n   * This method requests the registered {@link ThemeStyle theme styles} for CSS rules they provide.\n   * If some of the styles are not registered then uses the given style as provider.\n   *\n   * @param styles  The styles to obtain styling information for.\n   *\n   * @returns Dynamically updated CSS rule set containing the requested styling.\n   */\n  abstract style(...styles: ThemeStyle.Provider[]): StypRules;\n\n}\n\n/**\n * @internal\n */\nclass Theme$ extends Theme {\n\n  readonly root: StypRule = stypRoot();\n  private readonly _rules = new Map<ThemeStyle.Provider, StypRules>();\n\n  constructor(private readonly _styles: ThemeStyle.ById) {\n    super();\n  }\n\n  style(...styles: ThemeStyle.Provider[]): StypRules {\n\n    const theme = this;\n\n    return lazyStypRules(...styles.reduce<StypRules[]>(addStyleRules, []));\n\n    function addStyleRules(target: StypRules[], style: ThemeStyle.Provider): StypRules[] {\n\n      const existing = theme._rules.get(style);\n\n      if (existing) {\n        target.push(existing);\n      } else {\n\n        const constructed = theme._styles(style)(theme);\n\n        theme._rules.set(style, constructed);\n        target.push(constructed);\n      }\n\n      return target;\n    }\n  }\n\n}\n","import { NamespaceDef } from '@proc7ts/namespace-aliaser';\n\nexport const Examples__NS = new NamespaceDef(\n    'https://wesib.github.io/examples',\n    'bex',\n    'wesib-examples',\n);\n","import { RefStypRule, StypColor, StypLength, StypLengthPt, StypProperties, StypRGB } from '@proc7ts/style-producer';\n\nexport interface ThemeSettings {\n  $color: StypColor;\n  $bgColor: StypColor;\n  $fontFace: string;\n  $fontSize: StypLengthPt;\n  $lineHeight: number;\n  $fontWeight: string;\n  $linkFontWeight: string;\n  $layoutBreakpoint: StypLength;\n}\n\nexport const ThemeSettings: RefStypRule<ThemeSettings> = RefStypRule.by(\n    { $: 'settings' },\n    {\n      $color: new StypRGB({ r: 161, g: 185, b: 142 }),\n      $bgColor: new StypRGB({ r: 40, g: 43, b: 36 }),\n      $fontFace: `'Exo 2', sans-serif`,\n      $fontSize: StypLengthPt.of(1, 'em'),\n      $lineHeight: 1.2,\n      $fontWeight: '400',\n      $linkFontWeight: '600',\n      $layoutBreakpoint: StypLength.of(576, 'px'),\n    },\n);\n\nexport function mediaStyle({ $layoutBreakpoint }: ThemeSettings): StypProperties {\n  return {\n    '@media:sm': `(max-width: ${$layoutBreakpoint})`,\n  };\n}\n","import { StypProperties, stypRules, StypRules } from '@proc7ts/style-producer';\nimport { Theme } from '@wesib/generic/styp';\nimport { ThemeSettings } from './theme-settings';\n\nexport function LinkStyle(theme: Theme): StypRules {\n\n  const settings = theme.ref(ThemeSettings).read();\n  const { root: { rules } } = theme;\n\n  return stypRules(\n      rules.add({ e: 'a' }, settings.keepThru(linkStyle)),\n      rules.add({ e: 'a', s: ':visited' }, settings.keepThru(linkStyle)),\n      rules.add({ e: 'a', s: ':hover' }, { textDecoration: 'underline' }),\n      rules.add({ e: 'a', s: ':active' }, { textDecoration: 'underline dotted' }),\n      rules.add({ e: 'a', s: ':focus' }, { textDecoration: 'underline dotted' }),\n  );\n}\n\nfunction linkStyle(\n    {\n      $color,\n      $linkFontWeight,\n    }: ThemeSettings,\n): StypProperties {\n  return {\n    color: $color,\n    fontWeight: $linkFontWeight,\n    textDecoration: 'none',\n  };\n}\n","import { StypProperties, stypRules, StypRules } from '@proc7ts/style-producer';\nimport { Theme } from '@wesib/generic/styp';\nimport { LinkStyle } from './link.style';\nimport { mediaStyle, ThemeSettings } from './theme-settings';\n\nexport function DefaultStyle(theme: Theme): StypRules {\n\n  const settings = theme.ref(ThemeSettings).read();\n\n  return stypRules(\n      theme.root\n          .add(settings.keepThru(defaultStyle))\n          .add(settings.keepThru(mediaStyle)),\n      theme.style(LinkStyle),\n  );\n}\n\nfunction defaultStyle(\n    {\n      $color,\n      $fontFace,\n      $fontSize,\n      $lineHeight,\n      $fontWeight,\n    }: ThemeSettings,\n): StypProperties {\n  return {\n    color: $color,\n    font: `normal ${$fontWeight} ${$fontSize}/${$lineHeight} ${$fontFace}`,\n  };\n}\n","import { StypProperties, stypRules, StypRules } from '@proc7ts/style-producer';\nimport { Theme } from '@wesib/generic/styp';\nimport { DefaultStyle } from './default.style';\nimport { ThemeSettings } from './theme-settings';\n\nexport function BodyStyle(theme: Theme): StypRules {\n\n  const settings = theme.ref(ThemeSettings).read();\n  const { root: { rules } } = theme;\n\n  return stypRules(\n      rules.add(\n          { e: 'html' },\n          {\n            height: '100%',\n            margin: 0,\n            padding: 0,\n          },\n      ),\n      rules.add(\n          { e: 'body' },\n          settings.keepThru(bodyStyle),\n      ),\n      theme.style(DefaultStyle),\n  );\n}\n\nfunction bodyStyle(\n    {\n      $bgColor,\n    }: ThemeSettings,\n): StypProperties {\n  return {\n    backgroundColor: $bgColor,\n    height: '100%',\n    margin: 0,\n    padding: 0,\n  };\n}\n","import { RefStypRule, StypColor, StypLength, StypLengthPt, StypMapper, StypRuleRefs } from '@proc7ts/style-producer';\nimport { ThemeSettings } from '../theme';\n\nexport interface FormThemeSettings {\n  $color: StypColor;\n  $bgColor: StypColor;\n  $roBgColor: StypColor;\n  $fontFace: string;\n  $fontSize: StypLengthPt;\n  $errorFontSize: StypLengthPt;\n  $lineHeight: number;\n  $fontWeight: string;\n  $borderColor: StypColor;\n  $marginV: StypLengthPt;\n  $marginH: StypLengthPt;\n  $paddingV: StypLengthPt;\n  $paddingH: StypLengthPt;\n  $borderW: StypLength;\n}\n\nexport const FormThemeSettings: RefStypRule<FormThemeSettings> = RefStypRule.by(\n    { $: 'settings:form' },\n    root => StypRuleRefs.by<{ global: ThemeSettings }>(\n        {\n          global: ThemeSettings,\n        },\n        root,\n    ).read().keepThru(formMappings),\n);\n\nfunction formMappings(\n    {\n      global: {\n        $color,\n        $bgColor,\n        $fontFace,\n        $fontSize,\n        $lineHeight,\n        $fontWeight,\n      },\n    }: {\n      global: ThemeSettings;\n    },\n): StypMapper.Mappings<FormThemeSettings> {\n  return {\n    $color,\n    $bgColor: $bgColor.hsl.set(({ l }) => ({ l: l * 0.8 })),\n    $roBgColor: $bgColor.hsl.set(({ l }) => ({ l: l * 0.94 })),\n    $fontFace,\n    $fontSize,\n    $errorFontSize: $fontSize.mul(0.8),\n    $lineHeight,\n    $fontWeight,\n    $borderColor: $bgColor,\n    $marginV: $fontSize.div(4),\n    $marginH: $fontSize.div(4),\n    $paddingV: $fontSize.div(2),\n    $paddingH: $fontSize,\n    $borderW: StypLength.of(1, 'px'),\n  };\n}\n","import { AfterEvent } from '@proc7ts/fun-events';\nimport { InCssClasses, inCssError, inCssInfo, InputAspects__NS, InStyledElement } from '@proc7ts/input-aspects';\nimport { QualifiedName } from '@proc7ts/namespace-aliaser';\nimport { StypLengthPt, stypRules, StypRules } from '@proc7ts/style-producer';\nimport { ConvertInput } from '@wesib/generic/input';\nimport { ProduceStyle, Theme } from '@wesib/generic/styp';\nimport { Attributes, Component, ComponentContext, trackAttribute } from '@wesib/wesib';\nimport { Examples__NS } from '../examples.ns';\nimport { FormThemeSettings } from './form.theme-settings';\n\n@Component(\n    ['in-error', Examples__NS],\n    Attributes('code'),\n    ConvertInput(\n        ({ control: { control }, aspects, context }) => {\n\n          const codes: AfterEvent<[string[]]> = trackAttribute(context, 'code')\n              .read()\n              .keepThru_(\n                  code => code ? code.trim().split(/\\s+/) : [],\n              );\n\n          return codes.keepThru(\n              when => control.convert(\n                  InStyledElement.to(context.element),\n                  aspects,\n              ).setup(\n                  InCssClasses,\n                  cssClasses => {\n                    cssClasses.add(inCssInfo());\n                    cssClasses.add(inCssError({ when }));\n                  },\n              ),\n          );\n        },\n    ),\n)\nexport class InErrorComponent {\n\n  constructor(private readonly _context: ComponentContext) {\n  }\n\n  @ProduceStyle()\n  style(): StypRules {\n    return this._context.get(Theme).style(InErrorStyle);\n  }\n\n}\n\nconst InError__qualifier = 'bex:in-error';\nconst hasError__cssClass: QualifiedName = ['has-error', InputAspects__NS];\n\nfunction InErrorStyle(theme: Theme): StypRules {\n\n  const settings = theme.ref(FormThemeSettings).read();\n  const { root: { rules } } = theme;\n  const borderW = StypLengthPt.of(4, 'px');\n\n  return stypRules(\n      rules.add(\n          { u: [':', 'host'], $: InError__qualifier },\n          settings.keepThru(({ $color, $errorFontSize }) => ({\n            display: 'none',\n            fontSize: $errorFontSize,\n            padding: $errorFontSize.div(2),\n            borderLeft: `${borderW} dotted ${$color}`,\n            paddingLeft: $errorFontSize.sub(borderW),\n          })),\n      ),\n      rules.add(\n          {\n            u: [\n              ':',\n              'host',\n              {\n                c: [hasError__cssClass, ['touched', InputAspects__NS]],\n                u: [':', 'not', { c: ['has-focus', InputAspects__NS] }],\n              },\n            ],\n            $: InError__qualifier,\n          },\n          {\n            display: 'block',\n          },\n      ),\n      rules.add(\n          {\n            u: [\n              ':',\n              'host',\n              {\n                c: hasError__cssClass,\n                u: [\n                  [':', 'not', { u: ['code', '~=', 'missing'] }],\n                  [':', 'not', { u: ['code', '~=', 'incomplete'] }],\n                ],\n              },\n            ],\n            $: InError__qualifier,\n          },\n          {\n            display: 'block',\n          },\n      ),\n  );\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic/input\n */\nimport { nextArg, nextArgs, NextCall } from '@proc7ts/call-thru';\nimport {\n  afterAll,\n  EventKeeper,\n  EventSupply,\n  eventSupplyOf,\n  nextAfterEvent,\n  OnEventCallChain,\n} from '@proc7ts/fun-events';\nimport { InControl, InConverter } from '@proc7ts/input-aspects';\nimport { Class } from '@proc7ts/primitives';\nimport { Component, ComponentClass, ComponentContext, ComponentDecorator } from '@wesib/wesib';\nimport { HierarchyContext } from '../hierarchy';\nimport { DefaultInAspects } from './default-in-aspects';\nimport { inputFromControl, InputFromControl, NoInputFromControl } from './input-from-control';\n\n/**\n * Constructs component decorator that converts input control from {@link HierarchyContext.up enclosing component}\n * and uses it as an {@link InputFromControl origin of user input} in decorated component.\n *\n * @param convert  Input control converter definition.\n *\n * @returns New component decorator.\n */\nexport function ConvertInput<T extends ComponentClass = Class>(\n    convert: ConvertInputDef<InstanceType<T>>,\n): ComponentDecorator<T> {\n  return Component({\n    define(defContext) {\n      defContext.whenComponent(context => {\n\n        const { up } = context.get(HierarchyContext);\n\n        afterAll({\n          parent: up().keepThru_(\n              upper => upper ? nextAfterEvent(upper.get(InputFromControl)) : nextArg<NoInputFromControl>({}),\n          ),\n          aspects: context.get(DefaultInAspects),\n        }).keepThru_(\n            ({\n              parent: [control],\n              aspects: [aspects],\n            }): NextCall<OnEventCallChain, [InControl<any>?, EventSupply?]> => {\n              if (control.control) {\n\n                const converted = convert({ control, context, aspects });\n\n                if (converted) {\n                  return converted instanceof InControl\n                      ? nextArgs(converted)\n                      : nextAfterEvent(converted);\n                }\n              }\n\n              return nextArgs();\n            },\n        ).consume(\n            (control?: InControl<any> | null, supply?: EventSupply) => {\n              if (!control) {\n                return;\n              }\n\n              const usageSupply = inputFromControl(context, control);\n\n              (supply || eventSupplyOf(control)).needs(usageSupply);\n\n              return usageSupply;\n            },\n        );\n      });\n    },\n  });\n}\n\n/**\n * Converter definition of enclosing component's user input control.\n *\n * The returned converted control keeper may send an event supply as a second parameter. This supply will be cut off\n * once the input from converted control is no longer needed. Otherwise the control's input supply will be cut off\n * instead, and control would become unusable after that.\n *\n * Configures {@link ConvertInput @ConvertInput} component decorator.\n */\nexport type ConvertInputDef<T extends object = any> =\n/**\n * @param control  Enclosing component's user input to convert.\n * @param context  Decorated component context.\n * @param aspects  Default input aspect converter. This is a value of [[DefaultInAspects]].\n *\n * @returns Either input control, its keeper, or nothing.\n */\n    (\n        this: void,\n        {\n          control,\n          context,\n          aspects,\n        }: {\n          control: InputFromControl;\n          context: ComponentContext<T>;\n          aspects: InConverter.Aspect<any, any>;\n        },\n    ) => InControl<any> | EventKeeper<[InControl<any>?, EventSupply?]> | null | undefined;\n","import { Feature } from '@wesib/wesib';\nimport { InErrorComponent } from './in-error.component';\n\n@Feature({\n  needs: [\n    InErrorComponent,\n  ],\n})\nexport class InputSupport {\n}\n","import { StypProperties } from '@proc7ts/style-producer';\nimport { IncludePage } from '@wesib/generic';\nimport { Component } from '@wesib/wesib';\nimport { Examples__NS } from '../examples.ns';\nimport { ThemeSettings } from '../theme';\n\n@Component(\n    ['main', Examples__NS],\n    IncludePage({\n      onResponse({ response, range }) {\n        if (!response.ok) {\n          range.deleteContents();\n          if (response.ok == null) {\n            range.insertNode(document.createTextNode('Loading...'));\n          } else {\n            range.insertNode(document.createTextNode(`Error. ${response.error}`));\n          }\n        }\n      },\n    }),\n)\nexport class MainComponent {\n}\n\nexport function mainStyle(\n    {\n      $fontSize,\n    }: ThemeSettings,\n): StypProperties {\n  return {\n    flex: '1 1 auto',\n    padding: 0,\n    margin: `0 0 0 ${$fontSize.div(2)}`,\n  };\n}\n","import { StypColor, StypLengthPt, StypProperties, stypRules, StypRules } from '@proc7ts/style-producer';\nimport { ActivateNavLink, HandleNavLinks } from '@wesib/generic';\nimport { ProduceStyle, Theme } from '@wesib/generic/styp';\nimport { Component, ComponentContext, Wesib__NS } from '@wesib/wesib';\nimport { Examples__NS } from '../examples.ns';\nimport { ThemeSettings } from '../theme';\n\n@Component(\n    ['nav', Examples__NS],\n    HandleNavLinks(),\n    ActivateNavLink(),\n)\nexport class NavComponent {\n\n  private readonly _theme: Theme;\n\n  constructor(context: ComponentContext) {\n    this._theme = context.get(Theme);\n  }\n\n  @ProduceStyle()\n  style(): StypRules {\n    return this._theme.style(NavStyle);\n  }\n\n}\n\nconst Nav__qualifier = 'bex:nav';\n\nfunction NavStyle(theme: Theme): StypRules {\n\n  const settings = theme.ref(ThemeSettings).read();\n  const { root: { rules } } = theme;\n\n  return stypRules(\n      rules.add(\n          { u: [':', 'host'], $: Nav__qualifier },\n          settings.keepThru(navStyle),\n      ),\n      rules.add(\n          { u: [':', 'host'], $: Nav__qualifier },\n          settings.keepThru(sts => ({\n            flex: '0 1 200px',\n            height: '100%',\n            background: navLinkBackground(sts),\n          })),\n      ),\n      rules.add(\n          { u: [':', 'host'], $: [Nav__qualifier, '@media:sm'] },\n          {\n            flex: '0 1 100%',\n          },\n      ),\n      rules.add(\n          [{ u: [':', 'host'], $: Nav__qualifier }, { e: 'a', $: Nav__qualifier }],\n          settings.keepThru(navLinkStyle),\n      ),\n      rules.add(\n          [{ u: [':', 'host'], $: Nav__qualifier }, { e: 'a', c: ['active', Wesib__NS], $: Nav__qualifier }],\n          settings.keepThru(activeNavLinkStyle),\n      ),\n  );\n}\n\nfunction navStyle(\n    {\n      $fontSize,\n    }: ThemeSettings,\n): StypProperties {\n  return {\n    padding: 0,\n    margin: `0 ${$fontSize.div(2)} 0 0`,\n  };\n}\n\nexport function navLinkBackground({ $bgColor }: ThemeSettings): StypColor {\n  return $bgColor.hsl.set(({ l }) => ({ l: l * 0.8 }));\n}\n\nfunction navLinkStyle(\n    settings: ThemeSettings,\n): StypProperties {\n\n  const { $fontSize } = settings;\n\n  return {\n    display: 'block',\n    margin: 0,\n    padding: `${$fontSize.div(2)} ${$fontSize}`,\n    border: 0,\n    outline: 0,\n    background: navLinkBackground(settings),\n  };\n}\n\nfunction activeNavLinkStyle(\n    {\n      $fontSize,\n      $color,\n      $bgColor,\n    }: ThemeSettings,\n): StypProperties {\n\n  const borderW = StypLengthPt.of(4, 'px');\n\n  return {\n    background: $bgColor,\n    borderLeft: `${borderW} solid ${$color}`,\n    paddingLeft: $fontSize.sub(borderW),\n  };\n}\n","import { QualifiedName } from '@proc7ts/namespace-aliaser';\nimport { stypRules, StypRules } from '@proc7ts/style-producer';\nimport { ProduceStyle, Theme } from '@wesib/generic/styp';\nimport { BootstrapContext, Component, ComponentContext } from '@wesib/wesib';\nimport { Examples__NS } from '../examples.ns';\nimport { mediaStyle, ThemeSettings } from '../theme';\nimport { MainComponent, mainStyle } from './main.component';\nimport { NavComponent } from './nav.component';\n\n@Component({\n  name: ['container', Examples__NS],\n  feature: {\n    needs: [\n      MainComponent,\n      NavComponent,\n    ],\n  },\n})\nexport class ContainerComponent {\n\n  constructor(private readonly _context: ComponentContext) {\n  }\n\n  @ProduceStyle()\n  async style(): Promise<StypRules> {\n\n    const { elementDef: { name: mainName } } = await this._context.get(BootstrapContext).whenDefined(MainComponent);\n\n    return this._context.get(Theme).style(ContainerStyle(mainName!));\n  }\n\n}\n\nconst Container__qualifier = 'bex:container';\n\nfunction ContainerStyle(mainName: QualifiedName): (theme: Theme) => StypRules {\n  return theme => {\n\n    const settings = theme.ref(ThemeSettings).read();\n    const { root: { rules } } = theme;\n\n    return stypRules(\n        rules.add(\n            { u: [':', 'host'], $: Container__qualifier },\n            {\n              height: '100%',\n              display: 'flex',\n              flexFlow: 'row wrap',\n              alignItems: 'stretch',\n              alignContent: 'flex-start',\n            },\n        ).add(\n            settings.keepThru(mediaStyle),\n        ),\n        rules.add(\n            { u: [':', 'host'], $: [Container__qualifier, '@media:sm'] },\n            {\n              height: 'auto',\n            },\n        ),\n        rules.add(\n            [{ u: [':', 'host'], $: Container__qualifier }, { e: mainName, $: Container__qualifier }],\n            settings.keepThru(mainStyle),\n        ),\n    );\n  };\n}\n","import { PageLoadSupport } from '@wesib/generic';\nimport { StyleProducerSupport } from '@wesib/generic/styp';\nimport { Feature } from '@wesib/wesib';\nimport { ContainerComponent } from './container.component';\n\n@Feature({\n  needs: [\n    ContainerComponent,\n    PageLoadSupport,\n    StyleProducerSupport,\n  ],\n})\nexport class LayoutSupportFeature {\n}\n","import { produceBasicStyle, stypDomFormat } from '@proc7ts/style-producer';\nimport { ComponentStypDomFormat, ComponentStypFormat, Theme } from '@wesib/generic/styp';\nimport { Feature } from '@wesib/wesib';\nimport { BodyStyle } from './body.style';\n\n@Feature({\n  setup(setup) {\n    setup.perComponent({ a: ComponentStypFormat, as: ComponentStypDomFormat });\n  },\n  init(context) {\n    context.whenReady(() => {\n      produceBasicStyle(context.get(Theme).style(BodyStyle), stypDomFormat());\n    });\n  },\n})\nexport class BodyStyleSupport {}\n\n","import { Feature } from '@wesib/wesib';\nimport { InputSupport } from './input/input-support.feature';\nimport { LayoutSupportFeature } from './layout';\nimport { BodyStyleSupport } from './theme/body-style-support.feature';\n\n@Feature({\n  needs: [\n    BodyStyleSupport,\n    InputSupport,\n    LayoutSupportFeature,\n  ],\n})\nexport class AppFeature {}\n","import { InputAspects__NS } from '@proc7ts/input-aspects';\nimport { mixStypColors, StypProperties, stypRules, StypRules } from '@proc7ts/style-producer';\nimport { Theme } from '@wesib/generic/styp';\nimport { FormThemeSettings } from './form.theme-settings';\n\nexport function InputStyle(theme: Theme): StypRules {\n\n  const formSettings = theme.ref(FormThemeSettings).read();\n  const { root: { rules } } = theme;\n\n  return stypRules(\n      rules.add({ e: 'input' }, formSettings.thru(inStyle)),\n      rules.add({ e: 'input', s: '[readonly]' }, formSettings.thru(readonlyInStyle)),\n      rules.add({ e: 'input', s: '[disabled]' }, formSettings.thru(readonlyInStyle)),\n      rules.add({ e: 'input', s: ':focus' }, formSettings.thru(focusedInStyle)),\n      rules.add(\n          {\n            e: 'input',\n            c: [\n              ['invalid', InputAspects__NS],\n              ['touched', InputAspects__NS],\n            ],\n          },\n          formSettings.keepThru(invalidInStyle),\n      ),\n      rules.add(\n          {\n            e: 'input',\n            c: [\n              ['missing', InputAspects__NS],\n              ['touched', InputAspects__NS],\n            ],\n          },\n          {\n            outlineStyle: 'dotted',\n          },\n      ),\n      rules.add(\n          {\n            e: 'input',\n            c: [\n              ['incomplete', InputAspects__NS],\n              ['touched', InputAspects__NS],\n            ],\n          },\n          {\n            outlineStyle: 'dotted',\n          },\n      ),\n  );\n}\n\nexport function inStyle(\n    {\n      $color,\n      $fontFace,\n      $fontSize,\n      $lineHeight,\n      $fontWeight,\n      $marginV,\n      $marginH,\n      $paddingV,\n      $paddingH,\n      $bgColor,\n      $borderColor,\n      $borderW,\n    }: FormThemeSettings,\n): StypProperties {\n  return {\n    color: $color,\n    font: `normal ${$fontWeight} ${$fontSize}/${$lineHeight} ${$fontFace}`,\n    padding: `${$paddingV} ${$paddingH}`,\n    margin: `${$marginV} ${$marginH}`,\n    backgroundColor: $bgColor,\n    border: '0 none',\n    outline: `${$borderW} solid ${$borderColor}`,\n    boxShadow: 'inset 1px 1px 2px -2px black',\n    boxSizing: 'border-box',\n    width: '100%',\n  };\n}\n\nexport function readonlyInStyle(\n    {\n      $roBgColor,\n    }: FormThemeSettings,\n): StypProperties {\n  return {\n    backgroundColor: $roBgColor,\n  };\n}\n\nfunction focusedInStyle(\n    {\n      $color,\n      $borderColor,\n    }: FormThemeSettings,\n): StypProperties {\n  return {\n    outlineColor: mixStypColors($borderColor, $color, 0.5),\n  };\n}\n\nfunction invalidInStyle(\n    {\n      $color,\n      $borderW,\n      $borderColor,\n    }: FormThemeSettings,\n): StypProperties {\n  return {\n    outline: `${$borderW.mul(2)} dashed ${mixStypColors($borderColor, $color, 0.25)}`,\n  };\n}\n","import { bootstrapComponents } from '@wesib/wesib';\nimport { AppFeature } from './app.feature';\n\nexport * from './app.feature';\nexport * from './examples.ns';\nexport * from './input';\nexport * from './theme';\n\nexport const examplesContext = bootstrapComponents(AppFeature);\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { nextArgs, nextSkip } from '@proc7ts/call-thru';\nimport { AfterEvent, afterEventBy, EventReceiver, EventSupply, OnEvent, trackValue } from '@proc7ts/fun-events';\nimport { newNamespaceAliaser } from '@proc7ts/namespace-aliaser';\nimport { Class } from '@proc7ts/primitives';\nimport { ComponentClass, DefinitionContext } from '../../component/definition';\nimport { FeatureDef, FeatureRef, FeatureStatus } from '../../feature';\nimport { FeatureKey, FeatureLoader, FeatureRequester } from '../../feature/loader';\nimport { BootstrapContext } from '../bootstrap-context';\nimport { DefaultNamespaceAliaser } from '../globals';\nimport { BootstrapContextRegistry } from '../impl';\nimport { whenDefined } from '../impl/when-defined.impl';\n\n/**\n * Bootstraps components.\n *\n * Both features and components can be passed as parameters to this function.\n *\n * @category Core\n * @param features  Features and components to enable.\n *\n * @returns Bootstrap context instance.\n */\nexport function bootstrapComponents(...features: Class[]): BootstrapContext {\n\n  const bootstrapContextRegistry = BootstrapContextRegistry.create();\n  const { bootstrapContext, complete } = initBootstrap(bootstrapContextRegistry);\n  const feature = features.length === 1 ? features[0] : bootstrapFeature(features);\n\n  bootstrapContext.get(FeatureRequester).request(feature);\n  bootstrapContext.get(FeatureKey.of(feature)).to(loader => {\n    loader!.init().then(complete).catch(console.error);\n  });\n\n  return bootstrapContext;\n}\n\n/**\n * @internal\n */\nfunction bootstrapFeature(needs: Class[]): Class {\n  return FeatureDef.define(class BootstrapFeature {}, { needs });\n}\n\n/**\n * @internal\n */\nconst enum BootstrapStage {\n  Init,\n  Ready,\n}\n\n/**\n * @internal\n */\nfunction initBootstrap(\n    bootstrapContextRegistry: BootstrapContextRegistry,\n): {\n  bootstrapContext: BootstrapContext;\n  complete(): void;\n} {\n\n  const stage = trackValue<BootstrapStage>(BootstrapStage.Init);\n  const values = bootstrapContextRegistry.values;\n\n  class BootstrapContext$ extends BootstrapContext {\n\n    readonly get = values.get;\n\n    constructor() {\n      super();\n      bootstrapContextRegistry.provide({ a: DefaultNamespaceAliaser, by: newNamespaceAliaser });\n      bootstrapContextRegistry.provide({ a: BootstrapContext, is: this });\n    }\n\n    whenDefined<C extends object>(componentType: ComponentClass<C>): OnEvent<[DefinitionContext<C>]> {\n      return whenDefined(this, componentType);\n    }\n\n    whenReady(): OnEvent<[BootstrapContext]>;\n    whenReady(receiver: EventReceiver<[BootstrapContext]>): EventSupply;\n    whenReady(receiver?: EventReceiver<[BootstrapContext]>): OnEvent<[BootstrapContext]> | EventSupply {\n      return (this.whenReady = stage.read().thru(\n          s => s ? nextArgs(this) : nextSkip(),\n      ).once().F)(receiver);\n    }\n\n    load(feature: Class<any>): FeatureRef {\n\n      interface FeatureInfo {\n        status: FeatureStatus;\n        down?: Promise<void>;\n      }\n\n      const status = afterEventBy<[FeatureInfo]>(receiver => {\n\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        const request = bootstrapContext.get(FeatureRequester).request(feature);\n        const info = trackValue<FeatureInfo>({\n          status: {\n            feature,\n            ready: false,\n          },\n        });\n\n        this.get(FeatureKey.of(feature)).to({\n          supply: receiver.supply,\n          receive(_ctx, ldr) {\n\n            // Present until `request` revoked\n            // But that happens only when supply is cut off.\n            const loader = ldr as FeatureLoader;\n\n            info.it = {\n              status: {\n                feature: loader.request.feature,\n                ready: loader.ready,\n              },\n              down: loader.down,\n            };\n            if (!loader.ready) {\n              loader.init().then(() => {\n                info.it = {\n                  status: {\n                    feature: loader.request.feature,\n                    ready: true,\n                  },\n                  down: loader.down,\n                };\n              }).catch(console.error);\n            }\n          },\n        }).whenOff(() => {\n          request.unuse(); // Apply this callback _after_ registration complete,\n                           // to prevent receiver call.\n        });\n\n        info.read(receiver);\n      }).share();\n\n      let whenDown: Promise<void>;\n      const supply = status.to(({ down }) => {\n        whenDown = down!;\n      });\n\n      class Ref extends FeatureRef {\n\n        get down(): Promise<void> {\n          return whenDown;\n        }\n\n        read(): AfterEvent<[FeatureStatus]>;\n        read(receiver: EventReceiver<[FeatureStatus]>): EventSupply;\n        read(receiver?: EventReceiver<[FeatureStatus]>): AfterEvent<[FeatureStatus]> | EventSupply {\n          return (this.read = status.tillOff(supply).keepThru(\n              info => info.status,\n          ).F)(receiver);\n        }\n\n        dismiss(reason?: any): Promise<void> {\n          supply.off(reason);\n          return whenDown;\n        }\n\n      }\n\n      return new Ref();\n    }\n\n  }\n\n  const bootstrapContext = new BootstrapContext$();\n\n  return {\n    bootstrapContext,\n    complete(): void {\n      stage.it = BootstrapStage.Ready;\n    },\n  };\n}\n"],"names":["elementOrArray","source","array","Array","from","length","setOfElements","elements","value","isArray","Set","extendSetOfElements","set","forEach","element","add","superClassOf","type","satisfying","prototype","Object","getPrototypeOf","superType","constructor","asis","mergeFunctions","first","second","merge","_f","s","args","apply","this","noop","valueProvider","valuesProvider","values","lazyValue","provider","get","isPresent","NextCall__symbol","Symbol","nextCall","callNext","result","chain","fn","nextArg","arg","pass","nextArgs","call","nextSkip","skip","itsIterator","iterable","iterator","itsIterable","makeIt","iterate","reverse","[object Object]","overArray","i","next","done","arrayIterator","reverseArrayIterator","reverseArray","itsEach","action","itsEmpty","itsFirst","undefined","itsReduction","reducer","initialValue","reduced","filterIt","test","it","flatMapIt","convert","cIt","cNext","mapIt","noneIterator","noneIterable","overKeys","target","Reflect","ownKeys","overEntries","targetKeys","mapToEntries","keys","key","ContextKey__symbol","ContextKey","name","ContextSeedKey","super","seedKey","opts","seeder","seed","isEmpty","hasFallback","insert","ContextKeyError","Error","message","withDeps","spec","ContextValues","ContextRegistry","initial","Map","_initial","a","by","byProvider","with","deps","context","map","dep","isConstant","is","viaAlias","via","ctx","asInstance","selfInstance","as","toAsInstance","Type","DepType","TypeError","JSON","stringify","contextValueSpec","_seeding","provide","found","_seeds","seeding","factory","cache","newValues","bind","_nonCachedValues","registry","Values","cached","constructed","setup","findSeed","setupValue","slot","or","fillBy","grow","prevSetup","growValue","other","combine","IterativeContextSeeder","_providers","push","indexOf","splice","overNone","iterativeSeed","IterativeSeedKey","IterativeContextKey","providers","MultiContextKey","byDefault","defaultSources","SimpleContextSeeder","unshift","lastIndexOf","makeSeed","seeds","combineSimpleSeeds","SimpleSeedKey","SimpleContextKey","SingleContextKey","AfterEvent__symbol","isEventKeeper","EventSupply__symbol","EventSupply","off","_off","reason","_whenOff","callback","prev","isOff","Promise","resolve","reject","whenOff","another","eventSupplyOf","needs","peer","eventSupply","eventReceiver","receiver","generic","supply","_context","event","receive","receiveByEach","receivers","send","sendNonRecurrent","actualReceivers","received","recurrent","processEvent","shift","recurrentReceivers","idx","recurrentReceiver","recurrentEvent","EventNotifier","rcs","_rcs","clear","size","delete","OnEvent__symbol","isEventSender","NoSupply","noSupply","noEventSupply","sendEventsTo","once","onSource","to","share","shared","sharedSupply","initialEvents","_ctx","on","dispatch","thru","passes","chains","index","chainSupply","lastPass","existing","prevSupply","entry","handleResult","sender","callResult","parentSupply","nextChain","firstChain","tillOff","required","dependentSupply","cuts","neverReceive","OnEvent","_on","F","onEvent","onCutOff","e","then","onEventBy","consume","consumerSupply","thru_","register","noEvent","AfterEvent","_or","dest","reported","_last","_rcn","afterEventBy","keepThru_","fallback","afterSent","afterSupplied","supplier","afterAll","sources","afterEach","afterThe","nextAfterEvent","keeper","EventEmitter","onNever","onSupplied","onAny","suppliers","remained","removeSupplier","onAsync","sourceSupply","numInProcess","numSent","numReceived","lastIndex","promise","onAnyAsync","toSend","onPromise","alwaysReceiveValue","catch","statePath","path","PathEntry","_drop","emitter","newValue","oldValue","nested","_nested","slice","_dropIfEmpty","dontCreateMissing","created","_remove","Trackers","_entry","_root","nest","SubStateTracker","_trackers","_path","update","_tracker","onUpdate","StateTracker","subTracker","track","ValueTracker","read","valueReceiver","onRecurrent","recurrentValue","extract","acceptValuesFrom","byNone","container","_by","TrackedValue","_it","trackValue","ValueSync","old","third","syncWithTracker","tracker","syncTrackers","extractTracker","tracker1","tracker2","supply1","supply2","Naming","nsAlias","local","ns","DefaultNaming","alias","default__naming","html__naming","XmlNaming","id__naming","CssNaming","css__naming","NamespaceDef","url","aliases","naming","applyAlias","isQualifiedName","isNameAndNamespace","compareNames","compareStrings","firstName","firstUrl","newNamespaceAliaser","aliasesByNs","nsNumPerAlias","mostPreferred","nsNumRegistered","preferred","ids","generated","OnDomEvent","listener","onDomEventBy","capture","instead","preventDefault","just","stopPropagation","last","stopImmediatePropagation","passive","domEventContext","DomEventDispatcher","_target","domListener","addEventListener","removeEventListener","dispatchEvent","contextDestroyed","ContextSupplyKey","ContextSupply","ContextUpSeeder","concat","providersTracker","keepThru","prov","toUpSrcKeeper","flatUpSources","upSrcKeepers","src","isUpSrcKeeper","ContextSeedUpKey","upKey","ContextUpKeyUpKey","_key","ContextUpKey","FnContextKey","createUpKey","fns","delegated","SingleContextUpKey","backup","defaultValue","RenderScheduleConfig","options","win","node","window","ownerDocument","defaultView","messages","error","console","RenderQ__symbol","RenderQ","q","ref","schedule","doSchedule","queue","shot","config","postponed","execution","reset","suspend","exec","postpone","post","resume","pull","scheduled","customRenderScheduler","scheduleOptions","queueRef","newQueue","enqueued","lastQueue","executed","nextQueue","activeQueue","nextEnqueued","RenderQueue","replace","shots","animationRenderQueues","WeakMap","immediateRenderScheduler","execute","pop","defaultRenderScheduler","task","requestAnimationFrame","replacement","newRenderSchedule","BootstrapContext__key","BootstrapContext","bootstrapDefault","bootstrapContext","decoratePropertyAccessor","propertyKey","desc","updateDescriptor","isField","updatedDesc","writable","isPropertyAccessorDescriptor","value__symbol","accessorDesc","toPropertyAccessorDescriptor","fieldKey","String","configurable","enumerable","fieldAccessorDescriptor","defineProperty","isElement","nodeType","Node","ELEMENT_NODE","MetaAccessor","symbol","hasOwnProperty","ownDef","own","superDef","of","prevMeta","updates","meta","newMeta","PromiseResolver","_resolve","_reject","FeatureDef__symbol","FeatureMeta","defs","def","has","init","featureMeta","noFeatureDef","FeatureDef","featureType","for","all","define","Feature","FeatureContext__key","FeatureContext","componentType","whenDefined","feature","load","FeatureNeedsError","reduce","need","FeatureRef","ComponentDef__symbol","ComponentMeta","componentMeta","noComponentDef","ComponentDef","Component","decorator","ComponentContext__key","ComponentEventDispatcher__key","dispatcher","ContentRoot","StateUpdaterKey","combined","StateUpdater","ComponentContext__symbol","ComponentContext","updateState","contentRoot","ComponentEvent","Event","AnonymousComponentProperty__symbol","ComponentProperty","decorateWith","readable","component","componentDef","By","proto","descriptor","getValue","setValue","notReadableAccessor","notWritableAccessor","updated","With","access","As","Bind","binder","accessor__symbol","accessor","BootstrapContextRegistry__key","BootstrapContextRegistry","ComponentContextRegistry__key","ComponentContextRegistry","DefinitionContextRegistry__key","DefinitionContextRegistry","PostDefSetup__symbol","postDefSetup","superPostDefSetup","BootstrapWindow","BootstrapRoot","document","body","DefaultNamespaceAliaser","DefaultRenderSchedulerKey","toDefaultRenderScheduler","scheduler","DefaultRenderScheduler","ElementAdapterKey","adapters","adapter","defaultElementAdapter","ElementAdapter","ElementObserver","bsContext","DefaultElementObserver","MutationObserver","mutations","mutation","removedNodes","mount","mountOf","checkConnected","addedNodes","observe","childList","DefinitionContext__symbol","definitionContextOf","CustomElements__key","customElements","CustomElements","componentTypeOrName","elementType","defContext","extend","elementDef","extends","componentResolver","ComponentResolver__symbol","DefinitionContext__key","ElementDef","elementExtend","HTMLElement","DefinitionContext","mountTo","connect","ComponentContext$","_definitionContext","_newComponentRegistry","_component","settled","_status","connected","whenReady","status","whenSettled","whenConnected","componentDestroyed","parentNode","removeChild","removeElement","whenComponent","_whenComponent","lastRev","readNotifier","notifier","_","_elementBuilder","components","prevContext","newComponent","bubbles","ComponentMount$","_connect","el","doc","contains","destroy","MountComponentContext$","definitionContext","CustomComponentContext$","WhenComponent","currentRev","onCreated","receiverRev","eventContext","componentContext","notifiedRev","recurrentContext","rev","DefinitionContext$","_bsContext","_ready","_whenReady","ready","_def","definitionContextRegistry","seedIn","_perTypeRegistry","whenReady$","whenComponent$","definitionSetup","perDefinition","perComponent","_elementType","_createComponent","_created","settle","append","definitions","CustomElement$","connectedCallback","disconnectedCallback","customElementType","ElementBuilder","_define","doNotAdd","ComponentRegistry","_definitionQueue","definition","buildElement","FeatureContext$","_loader","unloads","adder","unload","newUnloader","_componentRegistry","request","st","state","bs","onDefinition","_unloader","onComponent","unloader","onPostDefSetup","FeatureKey__symbol","FeatureKey","preferredFeatureClause","origin","stageId","clause","loadFeatureDeps","loader","stage","ownLoader","FeatureLoader","ownSource","rcv","lastLoader","preventDuplicateLoader","clauses","presentFeatureDeps","down","_down","_stage","SetupFeatureStage","after","lastStage","id","prevStage","stop","FeatureStage","_stop","perDep","InitFeatureStage","ActiveFeatureStage","FeatureRequest","_requester","_revoke","featureDef","requester","isClause","_revokeBy","unuse","_uses","revoke","FeatureRequester__key","FeatureRequester","_map","reuse","WhenDefined__symbol","AttributePath__root","attributePathTo","attributeStateUpdate","updateAttributeState","property2attributeName","c","substring","toLowerCase","AttributeRegistry","AttributeRegistry$","change","attrs","observedAttributes","attributeChangedCallback","attributeFilter","records","record","attributeName","getAttribute","attributes","attributeOldValue","alreadyObserved","newAttrs","attr","prevCallback","attrChanged","Attribute","parseAttributeDescriptor","declareAttribute","setAttribute","removeAttribute","Attributes","items","item","entries","ComponentStateKey","provided","ComponentState","ComponentState__key","AttributeTracker","_name","DomPropertyPath__root","RenderPath__root","RenderDef","recipe","valueByRecipe","base","defaults","trigger","ElementRenderCtl$","renderer","fulfill","when","scheduleRenderer","immediateSchedule","_renders","renderNow","renderElement","newRenderer","render","ElementRenderCtl","ElementRenderScheduler","renderCtl","recentShot","renderBy","Render","ShadowContentRoot","ShadowDomEvent","shadowRoot","ShadowRootBuilder","attachShadow","shadowRootOf","defaultShadowContentDef","mode","AttachShadow","Wesib__NS","DeltaSet","_added","_removed","remove","deltaSetDeltaReceiver","removed","added","InAspect__symbol","inAspectNull","instance","convertTo","inAspectSameOrBuild","control","aspectKey","build","attachTo","aspect","inAspectSameOrNull","inAspectValue","InputAspects__NS","InNamespaceAliaser__aspect","applyTo","InNamespaceAliaser","applyAspect","InRenderScheduler__aspect","InRenderScheduler","intoConvertedBy","valueOrAspectConverter","converters","noopInConverter","converter","inConverter","aspectConverters","conversion","acf","cv","isInAspectConversion","intoConvertedAspects","aspects","noopInConversion","InControl","_aspect","aspectKeyOrSetup","aspectSetup","and","InConverted","_aspects","applied","_applyAspect","_supply","backward","convertAspect","prevValue","prevRev","InSameValueControl","_control","AbstractInControl","_aspectConversion","InContainer__aspect","InContainer","InContainerControls","InParents__aspect","InControlParents","InParents","existingSupply","parent","allParents","InElement__aspect","InElement","InMode__aspect","InMode","ctrl","InControlMode","OwnModeTracker","initialInMode","DerivedInModes","_all","mergeInModes","derive","InParentsAspect","parentsInMode","applyInMode","derived","_derived","lastUpdate","parents","parentList","modes","ro","inModeValue","InData__aspect","InData","hasData","InGroup__aspect","InGroup","InGroupControls","inControlReplacedReason","InGroupSnapshot","InGroupMap","_controls","replaced","newEntry","sendUpdate","modify","_shot","k","InGroupControlControls","_group","model","snapshot","withValues","_updates","controlEntryToGroupEntry","keyOrControls","newControl","group","newModel","keyAndEntry","applyControlsToModel","InGroupControl","_model","controls","cs","readInGroupData","csData","controlsData","data","keyAndControlData","controlData","inGroup","RequireNothing$","requireNothing","inValidator","validator","validate","simpleInValidator","dontRemove","InValidationMessages","validators","validatorMessages","_messages","resultSupply","validatorSupply","InValidation__aspect","InValidation","validation","InControlValidation","noInValidationErrors","ok","hasBut","InValidationErrors","nonEmpty","code","codePresent","_byCode","codes","some","every","inValidationResult","nestedInValidations","combineInValidationResults","nestedInValidationMessages","numValidators","requireAll","results","requirePresent","missing","AbstractInElement","self","_get","_set","_value","doUpdate","_update","input","correction","_input","events","listenForInput","onInput","inText","InFocus__aspect","InFocus","InControlFocus","inElement","owner","getRootNode","activeElement","focus","blur","InStatus__aspect","InStatus","InContainerStatus","InControlStatus","defaultInStatusFlags","hasFocus","touched","edited","_flags","flags","updateInStatusFlags","elementInStatusFlags","_container","inControlStatuses","combineInStatusFlags","markEdited","markTouched","InStyledElement__aspect","InStyledElement","InCssClasses__aspect","InControlCssClasses","InCssClasses","UnsubscribeReason__symbol","isUnsubscribeReason","_schedule","controlSchedule","_sources","classes","mergeInCssClassesMap","classesSent","flag","delta","redelta","undelta","specs","names","inSupply","classesSupply","classList","updateClasses","defaultInCssErrorMarks","defaultInCssHasError","errors","inCssInfo","cls","md","vl","valid","cssescId","cssesc","isIdentifier","isReadonlyArray","isNotEmptyArray","StypValueStruct","priority","prioritize","stypValuesEqual","StypColorStruct","StypRGB","coords","r","intCoord","g","b","coord","rgb","hsl","max","Math","min","l","round","StypHSL","h","d","StypColor","p","hueAsFraction","hueToRgb","t","newT","mixStypColors","color1","color2","weight","w","rgba1","rgba2","aDiff","w1","w2","StypNumericStruct","dim","toFormula","StypMapper","mappings","mapped","mappedValue","mapping","mappingBy","mapper","stypSplitPriority","endsWith","trim","StypDimension","val","unit","thisDim","pt","noPt","addendum","stypDimension","stypAddSub","subtrahend","multiplier","divisor","zero","StypCalcBase","left","op","right","usual","stypMul","stypDiv","toString","StypAddSub","toDim","negate","StypMulDiv","Zero","_byPriority","important","ZeroByPriority","unitlessZeroDimensionKind","dimension","StypDimension_","isStypNumeric","StypLength","StypLengthPt","StypURL","noStypProperties","noStypPropertiesSpec","stypPropertiesBySpec","rule","preventDuplicates","propertiesKeeper","senderOrProperties","propertiesMap","properties","stored","propertyEntries","sentry","propertiesEqual","passNonDuplicate","$$css","mergeStypProperties","baseProperties","addendumProperties","v","priorityOf","addValue","addValues","isCombinator","normalizeStypSelector","selector","normalizeKey","normalized","combinator","prevCombinator","part","normalizeStypSelectorPart","filter","sort","normalizeClasses","u","subs","isSubSelectorsArray","normalizeSubSelector","normalizeSubSelectors","isPseudoSubSelector","$","normalizeQualifiers","sub","prefix","params","qualifiers","exposeQualifier","noQualifiers","qualifier","eqIdx","exposed","lastExposed","split","noKeyAndTail","stypRuleKeyAndTail","rootSelector","classesMatch","query","qClass","find","mClass","namesEqual","stypSelector","ruleKeyTextOpts","qualify","stypRuleKeyText","formatStypSelector","defaultFormat","format","hasProperties","out","className","subFormat","attrName","attrOp","attrVal","attrFlag","quotes","wrap","formatSubSelector","xmlNs","qualifyElement","formatItem","AtRulesRenderer","_rule","outer","onlyAtProperties","producer","writer","isGroup","sheet","extracted","atSelectors","rest","extractPartAtSelectors","extractAtSelectors","restSelector","atSelector","buildAtSelector","addStyle","addGroup","customQuery","addQuery","namedQuery","stypRenderAtRules","order","create","isAtEntry","restQualifies","addAtSelector","colonIdx","prevQuery","stypRenderGlobals","FIRST_RENDER_ORDER","rootRule","importIndex","nsIndex","importDelta","renderImport","renderDefaultNamespace","renderNamespacePrefix","startsWith","css","addGlobal","stypRenderProperties","style","notCustomProperty","hyphenateStyleName","stypRenderText","stypRenderXmlNs","xmlNsDefs","declareNs","rendererFactory","isRendererFactory","rendererSpec","compareRenderers","firstOrder","secondOrder","stypRenderScheduler","removeStyleElement","defaultPrettyPrint","indent","compactStypTextFormatter","nv","eol","pre","StypTextFormatter$","_config","StypStyleTextWriter","f","nf","substr","afterBody","AbstractStypGroupTextWriter","_add","StypGroupTextWriter","text","StypSheetTextWriter","stypDomFormat","head","textFormat","pretty","onSheet","formatter","idSeq","addSheet","stypTextFormat","textContent","createElement","appendChild","StypStyleObjectWriter","setProperty","cssText","StypGroupObjectWriter","ruleText","cssRules","insertRule","StypSheetObjectWriter","_element","deleteRule","produceBasicStyle","rules","selectorFormat","factories","addRenderers","renderers","addRenderer","stypRenderFactories","renderSupply","renderRule","trackSupply","trackRules","styleProducer","production","_selector","stypSelectorText","reader","renderAt","nextIndex","nextRenderer","nextProducer","rendererForRule","ruleSelector","lastSheet","defaultStypRenderers","produceStyle","StypRule","StypRuleList","StypRuleHierarchy","Rules","_list","ruleMatches","_buildList","_filterArray","_ruleSet","grabRules","list","stypQuery","stypSelectorMatches","AllRules","Self","selfRuleList","iterateAllRules","extendRule","targetSelector","tail","_spec","oldSpec","empty","extendSpec","keyText","newNested","StypRule$","root","propertiesSupply","allRules","NestedRules","_byKey","_outer","outerSelector","stypOuterSelector","builder","StypRuleRef","StypRuleRef$","ms","ps","watch","_mappings","_properties","RefStypRule","mappingsKeeper","StypRuleRefs","refs","referrers","fromAll","flattenProperties","noStypRules","stypRules","rulesByList","rulesFromSource","getRules","rulesByValue","evalRules","lazyStypRules","lazyRulesFromSource","ruleSet","reportExistingRules","lazyRules","resolution","asyncRules","hthvItem","n","x","pl","addParam","param","parseNone","datePattern","dateTimeParser","dateTime","parseDateTime","nextInItem","delimiterOf","itemParser","named","tagged","extra","parseAngleBrackets","angleBracketsParser","parseQuotedString","unquoted","quotedStringParser","parseExtra","tag","extraItem","nextInComment","spacesParser","start","paramParser","skipSpaces","parseItem","defaultDelimit"," ","\t",",",";","\"","\\","<",">","=","(",")","/",":","?","@","[","]","{","}","buildParserConfig","delimit","delimitConfig","defaultParserConfig","commentParserConfig","newHthvParser","parserConfig","parseItemDelimit","itemDelimitParser","parseParam","parseComment","comments","commentParser","headerValue","hthvParse","hthvQuote","string","escaped","quote","delimiter","FetchAgentKey","agents","fetch","agentIdx","agentRequest","agent","nextRequest","combineFetchAgents","defaultFetchAgent","HttpFetchAgent","HttpFetchAborted","HttpFetch","Request","responseEmitter","abortController","AbortController","signal","abort","response","customSignal","aborted","HierarchyRoot","HierarchyUpdates","issue","HierarchyUpdates__key","hierarchyRoot","findParentContext","immediate","HierarchyContext__key","HierarchyContext$","HierarchyContext","_parent","_registry","up","isContextSeedUpKey","upper","parentHierarchy","rootSupply","updateParent","parentCtx","newParent","enclosing","ElementNodeList","WATCH_DEEP","subtree","elementNodeList","selectorOrType","nodeOf","deep","overNodes","overNodeSubtree","selected","refresh","ElementNodeList$","observer","firstReceiver","disconnect","initialEmitter","sel","querySelectorAll","children","matches","select","removeNode","addNode","nodes","childNodes","AttributesObserver","_bs","_observer","Observer","_emitter","_emitters","reconnect","takeRecords","observeSupply","NodeAttributes","_attrs","PropertyTracker","NodeProperties","_props","prop","ElementNode__symbol","ElementNode$","_bind","elementNodeOf","optional","selectNodes","ComponentNode","getHashURL","URL","hash","PageParam__symbol","PageParam","_page","NavigationAgentKey","navigate","agentTo","nextURL","title","nextTitle","nextData","baseURI","visited","current","put","defaultNavigationAgent","_when","_from","NavigationAgent","PageParamContext","NavHistory__key","NavHistory","extractNavData","_document","_location","location","_history","history","_uid","btoa","random","href","_entries","enter","replaceState","_historyState","PageEntry","_lastId","toEntry","page","pushState","_enter","fromEntry","_forget","leave","popState","_changeHash","uid","pageId","existingEntry","transfer","oldEntry","forget","wesib:navigation:data","_params","handle","newHandle","_newContext","_init","transferred","at","stay","EnterPageEvent","cancelable","LeavePageEvent","StayOnPageEvent","Navigation__key","navHistory","nav","nextEntry","hashChange","Navigation","onEnter","onLeave","onStay","go","toURL","withParam","applyParams","open","targetOrCallback","navTarget","navTargetOf","applyAgent","whenLeave","doNavigate","prepared","leavePage","prepare","navigated","ActivateNavLink","pick","activate","active","defaultActiveNavLinkClass","activeClass","NavLinkRenderSchedule__symbol","makeActive","assignClass","lastSupply","activateNavLink","weigh","defaultNavLinkWeight","navLinkWeight","navigation","componentNode","weights","maxWeight","selectActiveNavLinks","newActive","activeLink","calcNavLinkWeight","linkURL","pageURL","linkDir","navLinkPath2dir","pageDir","searchParamWeight","navLinkSearchParamsWeight","pathname","searchParams","linkParams","pageParams","isIgnoredSearchParam","pageValues","getAll","linkValue","HandleNavLinks","getHref","defaultNavLinkHref","defaultHandleNavLinks","eventType","importNode","beforeOrImport","importContent","importNodeContent","before","elementClone","tagName","getAttributeNames","insertBefore","nodeClone","cachingPageLoader","pageUrl","sup","tracked","onLoad","resp","num","requested","PageLoadAbortError","PageLoadRequestsParam","requests","PageLoadRequests","_navigation","fragments","fragment","pageSupply","loadSupply","_transfer","responseReceiver","getElementsByTagName","getElementById","onFragment","req","PageLoadAgent","PageLoadURLModifier","PageLoader","httpFetch","modifyURL","parser","DOMParser","credentials","headers","Headers","Accept","fetchRequest","header","requestPageFragments","batch","nextEach","parsePageDocument","parseFromString","querySelector","newBase","PageLoadParam$","PageLoadParam","PageCacheBuster__key","PageCacheBuster","appRev","urlModifier","newRev","reload","pageScriptsAgent","allScripts","externalScripts","scripts","script","pageStyleAgent","newStyles","oldStyles","oldStylesByHref","firstOldStyle","link","newStyle","oldStyle","nextSibling","pageTitleAgent","PageLoadSupport__feature","buster","PageLoadSupport","IncludePage","onResponse","contentKey","defaultPageContentKey","detectFragment","lastPageURL","range","createRange","selectNodeContents","newPageURL","deleteContents","createDocumentFragment","insertNode","handleResponse","DefaultInAspectsKey","DefaultInAspects","InputFromControl","inputFromControl","ComponentStyleProducer","componentStypDomFormatConfig","defaultStypRenderScheduler","ComponentStypRenderer","ElementIdClass__NS","ElementIdClass","contextValues","aliaser","uniqueClassSeq","qualified","ComponentStypFormat__symbol","ComponentStypObjectFormat","ComponentStypFormat","newProducer","componentSupply","hostSelector","host","extractHostSelector","extendHostSelector","shadowRenderer","noShadowRenderer","restParts","createTextNode","stypObjectFormat","ComponentStypDomFormat","ProduceStyle","produce","StyleProducerSupport__feature","StyleProducerSupport","ThemeStyleKey","isId","prevProvider","hasId","combineStyles","ThemeStyle","theme","Theme__key","Theme$","Theme","referrer","_styles","StypRule_","styles","_rules","Examples__NS","ThemeSettings","$color","$bgColor","$fontFace","$fontSize","$lineHeight","$fontWeight","$linkFontWeight","$layoutBreakpoint","mediaStyle","@media:sm","LinkStyle","settings","linkStyle","textDecoration","color","fontWeight","DefaultStyle","defaultStyle","font","BodyStyle","height","margin","padding","bodyStyle","backgroundColor","FormThemeSettings","global","formMappings","$roBgColor","$errorFontSize","mul","$borderColor","$marginV","div","$marginH","$paddingV","$paddingH","$borderW","InErrorComponent","InErrorStyle","__decorate","trackAttribute","cssClasses","mark","hasError","marks","inCssError","converted","usageSupply","hasError__cssClass","borderW","display","fontSize","borderLeft","paddingLeft","InputSupport","MainComponent","mainStyle","flex","NavComponent","_theme","NavStyle","navStyle","sts","background","navLinkBackground","navLinkStyle","activeNavLinkStyle","border","outline","ContainerComponent","mainName","flexFlow","alignItems","alignContent","ContainerStyle","LayoutSupportFeature","BodyStyleSupport","AppFeature","InputStyle","formSettings","inStyle","readonlyInStyle","focusedInStyle","invalidInStyle","outlineStyle","boxShadow","boxSizing","width","outlineColor","examplesContext","features","bootstrapContextRegistry","complete","info","ldr","whenDown","initBootstrap","bootstrapComponents"],"mappings":"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"}