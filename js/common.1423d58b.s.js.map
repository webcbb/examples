{"version":3,"file":"common.1423d58b.s.js","sources":["../../../../proc7ts/call-thru/src/misc/asis.ts","../../../../proc7ts/call-thru/src/misc/noop.ts","../../../../proc7ts/call-thru/src/misc/presence.ts","../../../../proc7ts/call-thru/src/misc/value-providers.ts","../../../../proc7ts/call-thru/src/next-call.ts","../../../../proc7ts/call-thru/src/passes/arg.ts","../../../../proc7ts/call-thru/src/passes/args.ts","../../../../proc7ts/call-thru/src/passes/each.ts","../../../../proc7ts/a-iterable/src/util.ts","../../../../proc7ts/a-iterable/src/termination.ts","../../../../proc7ts/a-iterable/src/transform.ts","../../../../proc7ts/a-iterable/src/construction.ts","../../../../proc7ts/a-iterable/src/reverse.ts","../../../../proc7ts/a-iterable/src/objects.ts","../../../../proc7ts/context-values/src/context-value-spec.ts","../../../../proc7ts/context-values/src/iterative-context-key.ts","../../../../proc7ts/context-values/src/simple-context-key.ts","../../../../proc7ts/fun-events/src/base/event-keeper.ts","../../../../proc7ts/fun-events/src/base/event-supply.ts","../../../../proc7ts/fun-events/src/base/event-receiver.ts","../../../../proc7ts/fun-events/src/base/event-notifier.impl.ts","../../../../proc7ts/fun-events/src/base/event-sender.ts","../../../../proc7ts/fun-events/src/base/no-event-supply.ts","../../../../proc7ts/fun-events/src/base/send-events-to.ts","../../../../proc7ts/fun-events/src/impl/once.ts","../../../../proc7ts/fun-events/src/impl/share.ts","../../../../proc7ts/fun-events/src/impl/thru.ts","../../../../proc7ts/fun-events/src/impl/till-off.ts","../../../../proc7ts/fun-events/src/base/impl/never-receive.ts","../../../../proc7ts/fun-events/src/on-event.ts","../../../../proc7ts/fun-events/src/after-event.ts","../../../../proc7ts/fun-events/src/keepers/after-sent.ts","../../../../proc7ts/fun-events/src/keepers/after-supplied.ts","../../../../proc7ts/fun-events/src/keepers/after-all.ts","../../../../proc7ts/fun-events/src/keepers/after-each.ts","../../../../proc7ts/fun-events/src/keepers/after-the.ts","../../../../proc7ts/fun-events/src/passes/next-after-event.ts","../../../../proc7ts/fun-events/src/senders/on-supplied.ts","../../../../proc7ts/fun-events/src/senders/on-any.ts","../../../../proc7ts/fun-events/src/senders/on-async.ts","../../../../proc7ts/fun-events/src/senders/on-any-async.ts","../../../../proc7ts/fun-events/src/senders/on-promise.ts","../../../../proc7ts/fun-events/src/base/impl/always-receive-value.ts","../../../../proc7ts/fun-events/src/state/state-path.ts","../../../../proc7ts/fun-events/src/value/track-value.ts","../../../../proc7ts/namespace-aliaser/src/name.ts","../../../../proc7ts/namespace-aliaser/src/namespace-aliaser.ts","../../../../proc7ts/fun-events/src/dom/on-dom-event.ts","../../../../proc7ts/context-values/src/updatable/context-up-key.ts","../../../../proc7ts/render-scheduler/src/render-schedule.ts","../../../../proc7ts/render-scheduler/src/custom-render-scheduler.ts","../../../../proc7ts/render-scheduler/src/render-scheduler.ts","../../../wesib/src/boot/bootstrap-default.ts","../../../wesib/src/common/types.impl.ts","../../../wesib/src/common/classes.ts","../../../wesib/src/common/decorators.ts","../../../wesib/src/common/reflect.ts","../../../wesib/src/common/functions.ts","../../../wesib/src/common/is-element.ts","../../../wesib/src/feature/feature.decorator.ts","../../../wesib/src/component/component.decorator.ts","../../../wesib/src/component/component-context.ts","../../../wesib/src/component/component-property.decorator.ts","../../../wesib/src/boot/impl/post-def-setup.impl.ts","../../../wesib/src/boot/globals/default-render-scheduler.ts","../../../wesib/src/boot/globals/element-adapter.ts","../../../wesib/src/boot/impl/definition-context.symbol.impl.ts","../../../wesib/src/component/definition/custom-elements.ts","../../../wesib/src/boot/impl/component-context.impl.ts","../../../wesib/src/boot/impl/element-builder.impl.ts","../../../wesib/src/feature/loader/feature-loader.impl.ts","../../../wesib/src/boot/bootstrap/bootstrap-components.ts","../../../wesib/src/boot/impl/when-defined.impl.ts","../../../wesib/src/feature/attributes/attribute-path.ts","../../../wesib/src/feature/attributes/attribute-state-update.impl.ts","../../../wesib/src/feature/attributes/property2attribute-name.ts","../../../wesib/src/feature/attributes/attribute-registry.impl.ts","../../../wesib/src/feature/attributes/attributes.decorator.ts","../../../wesib/src/feature/render/element-render-scheduler.ts","../../../wesib/src/feature/shadow-dom/shadow-dom-support.feature.ts","../../../../proc7ts/http-header-value/src/hthv-partial.impl.ts","../../../../proc7ts/http-header-value/src/parser/add-param.ts","../../../../proc7ts/http-header-value/src/parser/angle-brackets-parser.ts","../../../../proc7ts/http-header-value/src/parser/next-in-item.ts","../../../../proc7ts/http-header-value/src/parser/parse-date-time.ts","../../../../proc7ts/http-header-value/src/parser/quoted-string-parser.ts","../../../../proc7ts/http-header-value/src/parser/item-parser.ts","../../../../proc7ts/http-header-value/src/parser/next-in-comment.ts","../../../../proc7ts/http-header-value/src/parser/spaces-parser.ts","../../../../proc7ts/http-header-value/src/parser/param-parser.ts","../../../../proc7ts/http-header-value/src/parser/parser-config.ts","../../../../proc7ts/http-header-value/src/hthv-parser.ts","../../../../proc7ts/http-header-value/src/parser/item-delimit-parser.ts","../../../../proc7ts/http-header-value/src/parser/comment-parser.ts","../../../../proc7ts/http-header-value/src/hthv-quote.ts","../../../generic/src/fetch/fetch-agent-key.impl.ts","../../../generic/src/fetch/http-fetch.impl.ts","../../../generic/src/hierarchy/hierarchy-updates.impl.ts","../../../generic/src/tree/element-node-list.impl.ts","../../../generic/src/tree/element-node.impl.ts","../../../generic/src/navigation/hash-url/hash-url.ts","../../../generic/src/navigation/navigation-agent.ts","../../../generic/src/navigation/nav-history.impl.ts","../../../generic/src/navigation/navigation.impl.ts","../../../generic/src/navigation/activate-nav-link.decorator.ts","../../../generic/src/navigation/handle-nav-links.decorator.ts","../../../generic/src/util/import-node.ts","../../../generic/src/navigation/page-load/caching-page-loader.impl.ts","../../../generic/src/navigation/page-load/page-loader.impl.ts","../../../generic/src/navigation/page-load/page-cache-buster.impl.ts","../../../generic/src/navigation/page-load/page-scripts-agent.impl.ts","../../../generic/src/navigation/page-load/page-style-agent.impl.ts","../../../generic/src/navigation/page-load/page-title-agent.impl.ts","../../../generic/src/navigation/page-load/include-page.decorator.ts","../../../../proc7ts/style-producer/src/internal/css.ts","../../../../proc7ts/style-producer/src/internal/types.ts","../../../../proc7ts/style-producer/src/value/value.ts","../../../../proc7ts/style-producer/src/value/color/color.ts","../../../../proc7ts/style-producer/src/value/color/mix.ts","../../../../proc7ts/style-producer/src/value/priority.ts","../../../../proc7ts/style-producer/src/value/numeric/numeric.impl.ts","../../../../proc7ts/style-producer/src/value/numeric/dimension-kind.impl.ts","../../../../proc7ts/style-producer/src/value/numeric/zero.impl.ts","../../../../proc7ts/style-producer/src/rule/properties.impl.ts","../../../../proc7ts/style-producer/src/selector/selector.impl.ts","../../../../proc7ts/style-producer/src/selector/query.ts","../../../../proc7ts/style-producer/src/selector/selector-constructor.ts","../../../../proc7ts/style-producer/src/selector/selector-text.impl.ts","../../../../proc7ts/style-producer/src/producer/renderers/at-rules.renderer.ts","../../../../proc7ts/style-producer/src/producer/renderers/globals.renderer.ts","../../../../proc7ts/style-producer/src/producer/renderers/properties.renderer.ts","../../../../proc7ts/style-producer/src/producer/renderers/text.renderer.ts","../../../../proc7ts/style-producer/src/producer/formats/format.impl.ts","../../../../proc7ts/style-producer/src/producer/formats/text.format.ts","../../../../proc7ts/style-producer/src/producer/formats/dom.format.ts","../../../../proc7ts/style-producer/src/producer/produce-basic-style.ts","../../../../proc7ts/style-producer/src/selector/selector-text.ts","../../../../proc7ts/style-producer/src/producer/produce-style.ts","../../../../proc7ts/style-producer/src/producer/renderers/default-renderers.impl.ts","../../../../proc7ts/style-producer/src/rule/rules.impl.ts","../../../../proc7ts/style-producer/src/rule/rule.impl.ts","../../../../proc7ts/style-producer/src/rule/rule-ref.ts","../../../../proc7ts/style-producer/src/rule/rule-refs.ts","../../../../proc7ts/style-producer/src/rule/rules.ts","../../../generic/src/styp/element-id-class.impl.ts","../../../generic/src/styp/component-styp-format.ts","../../../generic/src/styp/component-styp-dom.format.ts","../../../generic/src/styp/produce-style.decorator.ts","../../../generic/src/theme/theme-style.ts","../../../../proc7ts/delta-set/src/delta-set.ts","../../../../proc7ts/input-aspects/src/aspect.impl.ts","../../../../proc7ts/input-aspects/src/converter.ts","../../../../proc7ts/input-aspects/src/control.ts","../../../../proc7ts/input-aspects/src/data/mode.aspect.ts","../../../../proc7ts/input-aspects/src/containers/group.control.ts","../../../../proc7ts/input-aspects/src/validation/require-nothing.validator.ts","../../../../proc7ts/input-aspects/src/validation/validator.ts","../../../../proc7ts/input-aspects/src/validation/require-all.validator.ts","../../../../proc7ts/input-aspects/src/validation/validation.aspect.ts","../../../../proc7ts/input-aspects/src/elements/focus/status.aspect.ts","../../../../proc7ts/input-aspects/src/elements/style/css-classes.aspect.ts","../../../../proc7ts/input-aspects/src/elements/style/css-error.ts","../../../../proc7ts/input-aspects/src/elements/style/css-info.ts","../../../generic/src/input/input-from-control.ts","../../src/common/theme/theme-settings.ts","../../src/common/theme/link.style.ts","../../src/common/theme/default.style.ts","../../src/common/theme/body.style.ts","../../src/common/input/form.theme-settings.ts","../../src/common/input/in-error.component.ts","../../src/common/layout/main.component.ts","../../src/common/layout/nav.component.ts","../../src/common/layout/container.component.ts","../../src/common/input/input.style.ts","../../../wesib/src/feature/attributes/attribute.decorator.ts","../../../wesib/src/feature/attributes/attribute-descriptor.impl.ts","../../../wesib/src/feature/render/render.decorator.ts","../../../wesib/src/feature/shadow-dom/attach-shadow.decorator.ts","../../../../proc7ts/input-aspects/src/elements/text.control.ts","../../../../proc7ts/input-aspects/src/validation/require-present.validator.ts","../../../generic/src/input/convert-input.decorator.ts","../../../../proc7ts/call-thru/src/passes/skip.ts","../../../../proc7ts/context-values/src/context-key.ts","../../../../proc7ts/context-values/src/context-key-error.ts","../../../../proc7ts/context-values/src/context-values.ts","../../../../proc7ts/context-values/src/context-registry.ts","../../../../proc7ts/context-values/src/multi-context-key.ts","../../../../proc7ts/context-values/src/single-context-key.ts","../../../../proc7ts/fun-events/src/base/event-notifier.ts","../../../../proc7ts/fun-events/src/impl/then.ts","../../../../proc7ts/fun-events/src/senders/event-emitter.ts","../../../../proc7ts/fun-events/src/senders/on-never.ts","../../../../proc7ts/fun-events/src/state/state-tracker.ts","../../../../proc7ts/fun-events/src/value/value-tracker.ts","../../../../proc7ts/fun-events/src/value/value-sync.ts","../../../../proc7ts/namespace-aliaser/src/namings.ts","../../../../proc7ts/namespace-aliaser/src/naming.ts","../../../../proc7ts/namespace-aliaser/src/namespace.ts","../../../../proc7ts/fun-events/src/dom/dom-event-dispatcher.ts","../../../../proc7ts/context-values/src/updatable/fn-context-key.ts","../../../../proc7ts/context-values/src/updatable/single-context-up-key.ts","../../../../proc7ts/render-scheduler/src/render-queue.ts","../../../../proc7ts/render-scheduler/src/animation-render-scheduler.ts","../../../../proc7ts/render-scheduler/src/immediate-render-scheduler.ts","../../../wesib/src/boot/bootstrap-context.key.impl.ts","../../../wesib/src/boot/bootstrap-context.ts","../../../wesib/src/common/array-set.ts","../../../wesib/src/common/meta-accessor.ts","../../../wesib/src/common/promises.ts","../../../wesib/src/feature/feature-def.ts","../../../wesib/src/feature/feature-context.ts","../../../wesib/src/feature/feature-needs-error.ts","../../../wesib/src/feature/feature-ref.ts","../../../wesib/src/component/component-def.ts","../../../wesib/src/component/component-context.key.impl.ts","../../../wesib/src/component/component-event.key.impl.ts","../../../wesib/src/component/content-root.ts","../../../wesib/src/component/state-updater.ts","../../../wesib/src/component/component-event.ts","../../../wesib/src/component/component-mount.ts","../../../wesib/src/boot/impl/bootstrap-context-registry.impl.ts","../../../wesib/src/boot/impl/component-context-registry.impl.ts","../../../wesib/src/boot/impl/definition-context-registry.impl.ts","../../../wesib/src/boot/globals/bootstrap-window.ts","../../../wesib/src/boot/globals/bootstrap-root.ts","../../../wesib/src/boot/globals/default-namespace-aliaser.ts","../../../wesib/src/boot/globals/element-observer.ts","../../../wesib/src/component/definition/definition.context.key.impl.ts","../../../wesib/src/component/definition/element-def.ts","../../../wesib/src/component/definition/definition-context.ts","../../../wesib/src/boot/impl/component-mount.impl.ts","../../../wesib/src/boot/impl/custom-element.impl.ts","../../../wesib/src/boot/impl/when-component.impl.ts","../../../wesib/src/boot/impl/definition-context.impl.ts","../../../wesib/src/boot/impl/unloader.impl.ts","../../../wesib/src/feature/loader/component-registry.impl.ts","../../../wesib/src/feature/loader/feature-context.impl.ts","../../../wesib/src/feature/loader/feature-request.impl.ts","../../../wesib/src/feature/loader/feature-requester.impl.ts","../../../wesib/src/feature/attributes/attribute-descriptor.ts","../../../wesib/src/feature/attributes/attributes-support.feature.ts","../../../wesib/src/feature/state/component-state.ts","../../../wesib/src/feature/state/state-support.feature.ts","../../../wesib/src/feature/attributes/track-attribute.ts","../../../wesib/src/feature/dom-properties/dom-property-path.ts","../../../wesib/src/feature/render/render-def.ts","../../../wesib/src/feature/render/element-render-ctl.impl.ts","../../../wesib/src/feature/render/element-render-ctl.ts","../../../wesib/src/feature/shadow-dom/shadow-content-root.ts","../../../wesib/src/feature/shadow-dom/shadow-dom-event.ts","../../../wesib/src/feature/shadow-dom/shadow-root-builder.ts","../../../wesib/src/wesib.ns.ts","../../../../proc7ts/http-header-value/src/parser/parse-none.ts","../../../../proc7ts/http-header-value/src/hthv-parse.ts","../../../generic/src/fetch/http-fetch-agent.ts","../../../generic/src/fetch/http-fetch.ts","../../../generic/src/hierarchy/hierarchy-context.ts","../../../generic/src/hierarchy/hierarchy-registry.impl.ts","../../../generic/src/tree/element-node.ts","../../../generic/src/tree/element-node-list.ts","../../../generic/src/tree/node-attributes.impl.ts","../../../generic/src/tree/node-properties.impl.ts","../../../generic/src/tree/component-tree-support.feature.ts","../../../generic/src/navigation/page-param.ts","../../../generic/src/navigation/navigation.ts","../../../generic/src/navigation/page-param-context.ts","../../../generic/src/navigation/navigation.event.ts","../../../generic/src/navigation/navigation-support.feature.ts","../../../generic/src/navigation/page-load/page-load-requests.impl.ts","../../../generic/src/navigation/page-load/page-load-agent.ts","../../../generic/src/navigation/page-load/page-load-url-modifier.ts","../../../generic/src/navigation/page-load/page-load-param.ts","../../../generic/src/navigation/page-load/page-load-support.feature.ts","../../../../proc7ts/style-producer/src/value/mapper.ts","../../../../proc7ts/style-producer/src/value/numeric/numeric.ts","../../../../proc7ts/style-producer/src/value/unit/length.ts","../../../../proc7ts/style-producer/src/value/url.ts","../../../../proc7ts/style-producer/src/producer/renderers/renderer.impl.ts","../../../../proc7ts/style-producer/src/producer/renderers/xml-ns.renderer.ts","../../../../proc7ts/style-producer/src/producer/formats/object.format.ts","../../../../proc7ts/style-producer/src/rule/rule.ts","../../../../proc7ts/style-producer/src/rule/root.ts","../../../generic/src/styp/component-style-producer.ts","../../../generic/src/styp/component-styp-renderer.ts","../../../generic/src/styp/component-styp-object.format.ts","../../../generic/src/styp/basic-style-producer-support.feature.ts","../../../generic/src/styp/style-producer-support.feature.ts","../../../generic/src/theme/theme.ts","../../../generic/src/theme/theme-factory.ts","../../../generic/src/theme/theme.impl.ts","../../../generic/src/theme/theme-factory.impl.ts","../../../generic/src/theme/theme-support.feature.ts","../../../../proc7ts/input-aspects/src/aspect.ts","../../../../proc7ts/input-aspects/src/aspects/namespace-aliaser.aspect.ts","../../../../proc7ts/input-aspects/src/aspects/render-scheduler.aspect.ts","../../../../proc7ts/input-aspects/src/controls/value-of.control.ts","../../../../proc7ts/input-aspects/src/containers/container.control.ts","../../../../proc7ts/input-aspects/src/controls/abstract.control.ts","../../../../proc7ts/input-aspects/src/containers/parents.aspect.ts","../../../../proc7ts/input-aspects/src/element.control.ts","../../../../proc7ts/input-aspects/src/data/data.aspect.ts","../../../../proc7ts/input-aspects/src/validation/validator.impl.ts","../../../../proc7ts/input-aspects/src/elements/abstract-element.control.ts","../../../../proc7ts/input-aspects/src/elements/focus/focus.aspect.ts","../../../../proc7ts/input-aspects/src/elements/style/styled-element.aspect.ts","../../../generic/src/input/default-in-aspects.ts","../../src/common/examples.ns.ts","../../src/common/input/input-support.feature.ts","../../src/common/layout/layout-support.feature.ts","../../src/common/theme/body-style-support.feature.ts","../../src/common/app.feature.ts","../../src/common/index.ts"],"sourcesContent":["/**\n * @packageDocumentation\n * @module @proc7ts/call-thru\n */\n/**\n * A function that returns its argument as is.\n *\n * @param value  A value to return.\n *\n * @returns `value`.\n */\nexport function asis<T>(value: T): T {\n  return value;\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/call-thru\n */\n/**\n * A function that does nothing.\n *\n * @returns `undefined`.\n */\nexport function noop(): undefined {\n  return;\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/call-thru\n */\n/**\n * A function that checks whether the given value is present.\n *\n * @param value  A value to check.\n *\n * @returns `true` when the given `value` is not `null` or `undefined`, or `false` otherwise.\n */\nexport function isPresent<T>(value: T | undefined | null): value is T {\n  return value != null;\n}\n\n/**\n * A function that checks whether the given value is not present.\n *\n * This is a direct opposite to `isPresent()`.\n *\n * @param value  A value to check.\n *\n * @returns `true` when the given `value` is `null` or `undefined`, or `false` otherwise.\n */\nexport function isNotPresent<T>(value: T | undefined | null): value is T {\n  return value == null;\n}\n\n/**\n * A function that checks whether the given value is defined.\n *\n * @param value  A value to check.\n *\n * @returns `true` when the given `value` is not `undefined`, or `false` otherwise.\n */\nexport function isDefined<T>(value: T | undefined): value is T {\n  return value !== undefined;\n}\n\n/**\n * A function that checks whether the given value is undefined.\n *\n * This is a direct opposite to `isDefined()`.\n *\n * @param value  A value to check.\n *\n * @returns `true` when the given `value` is `undefined`, or `false` otherwise.\n */\nexport function isUndefined<T>(value: T | undefined): value is T {\n  return value === undefined;\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/call-thru\n */\n/**\n * Creates a provider of the only argument.\n *\n * @param value  A value to return.\n *\n * @returns A function that returns `value`.\n */\nexport function valueProvider<T>(value: T): (this: void) => T {\n  return (): T => value;\n}\n\n/**\n * Creates a provider of lazily evaluated value.\n *\n * The returned function evaluates the value first time it is called. Then it just returns previously evaluated value.\n *\n * @param provider  A no-arg function evaluating the value.\n *\n * @returns A function that returns the value evaluated by `provider`.\n */\nexport function lazyValue<T>(provider: (this: void) => T): (this: void) => T {\n\n  let get = (): T => (get = valueProvider(provider()))();\n\n  return () => get();\n}\n\n/**\n * Creates a provider of arguments tuple.\n *\n * The returned tuple should never be modified as it is not cloned.\n *\n * @param values  Values to return.\n *\n * @returns A function that returns `values` tuple.\n */\nexport function valuesProvider<T extends readonly any[]>(...values: T): (this: void) => T {\n  return (): T => values;\n}\n\n/**\n * Creates a provider of cloned arguments tuple.\n *\n * The returned tuple can be modified as it is cloned before the return.\n *\n * @param values  Values to return.\n *\n * @returns A function that returns a clone of `values` tuple.\n */\nexport function valuesCloner<T extends any[]>(...values: T): (this: void) => T {\n  return (): T => Array.from(values) as T;\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/call-thru\n */\nimport { CallChain } from './call-chain';\n\n/**\n * A key of a [[NextCall]] method responsible for calling the next pass in chain.\n */\nexport const NextCall__symbol = (/*#__PURE__*/ Symbol('next-call'));\n\n/**\n * A call of the next pass in chain.\n *\n * This is basically a function with additional method, which is treated specially by call chaining functions.\n * When previous pass in chain returns a [[NextCall]] instance, it will be used to call the next pass in chain.\n * Otherwise the next pass will be called with value returned as its {@link CallChain.pass single argument}.\n *\n * A [[NextCall]] is a function returning itself. So it can be chained like any other pass.\n *\n * A [[nextCall]] function can be used to construct a next call.\n *\n * @typeparam Chain  A type of supported call chain.\n * @typeparam NextArgs  A type of arguments tuple of the next pass.\n * @typeparam NextArg  A type of single argument or arguments tuple of the next pass. The same as `NextArgs` by default.\n */\nexport interface NextCall<Chain extends CallChain, NextArgs extends any[], NextArg = NextArgs> {\n\n  readonly $?: NextArg; // Silence the TypeScript compiler, as `NextArg` is never read.\n\n  /**\n   * Calls the given pass of the call chain.\n   *\n   * @param chain  Target call chain.\n   * @param pass  A pass in call chain to call.\n   */\n  [NextCall__symbol](\n      chain: Chain,\n      pass: (this: void, ...args: NextArgs) => void,\n  ): void;\n\n  /**\n   * Returns itself.\n   *\n   * Makes this call a valid no-arg pass of a call chain.\n   */\n  (): this; // eslint-disable-line @typescript-eslint/prefer-function-type\n\n}\n\n/**\n * Constructs a call of the next pass in chain.\n *\n * @typeparam Chain  A type of supported call chain.\n * @typeparam NextArgs  A type of argument tuple of the next pass.\n * @typeparam NextArg  A type of single argument or arguments tuple of the next pass. The same as `NextArgs` by default.\n * @param callNext  A next pass caller function.\n *\n * @returns Next pass call performed by the given function.\n */\nexport function nextCall<Chain extends CallChain, NextArgs extends any[], NextArg>(\n    callNext: (\n        this: void,\n        chain: Chain,\n        fn: (this: void, ...args: NextArgs) => void,\n    ) => void,\n): NextCall<Chain, NextArgs, NextArg> {\n\n  const result = (() => result) as NextCall<Chain, NextArgs, NextArg>;\n\n  result[NextCall__symbol] = (chain, fn) => callNext(chain, fn);\n\n  return result;\n}\n\n/**\n * Checks whether the `target` value is a {@link NextCall next call}.\n *\n * @typeparam Chain  A type of supported call chain.\n * @typeparam NextArgs  A type of arguments tuple of the next pass.\n * @typeparam NextArg  A type of single argument or arguments tuple of the next pass.\n * @param target  A value to check.\n *\n * @returns `true` if the `target` value is a function with [[NextCall__symbol]] property, or `false` otherwise.\n */\nexport function isNextCall<Chain extends CallChain, NextArgs extends any[], NextArg>(\n    target: any,\n): target is NextCall<Chain, NextArgs, NextArg> {\n  return typeof target === 'function' && NextCall__symbol in target;\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/call-thru\n */\nimport { CallChain } from '../call-chain';\nimport { nextCall, NextCall } from '../next-call';\n\n/**\n * Provides a single argument for the next call chain pass.\n *\n * The returned [[NextCall]] implementation does the same as if the `arg` returned from the call chain pass.\n *\n * @typeparam NextArg  A type of argument for the next pass.\n * @param arg  Argument for the next pass.\n *\n * @return A call of the next pass with the given argument.\n */\nexport function nextArg<NextArg>(arg: NextArg): NextCall<CallChain, [NextArg], NextArg> {\n  return nextCall((chain, pass) => chain.pass(pass, arg));\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/call-thru\n */\nimport { CallChain } from '../call-chain';\nimport { nextCall, NextCall } from '../next-call';\n\n/**\n * Provides arguments for the next call chain pass.\n *\n * @typeparam NextArgs  A type of arguments tuple for the next pass.\n * @param args  Arguments for the next pass.\n *\n * @return A call of the next pass with the given arguments.\n */\nexport function nextArgs<NextArgs extends any[]>(\n    ...args: NextArgs\n): NextCall<CallChain, NextArgs, NextArgs> {\n  return nextCall((chain, fn) => chain.call(fn, args));\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/call-thru\n */\nimport { CallChain } from '../call-chain';\nimport { nextCall, NextCall } from '../next-call';\n\n/**\n * Builds a next chained call that passes each provided element to the next pass.\n *\n * Note that default [[CallChain]] supported by [[callThru]] would return only the last element.\n *\n * @typeparam T  A type of element to pass down the chain.\n * @param elements  An iterable of elements to pass down the chain.\n *\n * @returns A multi-call of the next pass with each element.\n */\nexport function nextEach<T>(elements: Iterable<T>): NextCall<CallChain, [T], T> {\n  return nextCall((chain, pass) => {\n    for (const element of elements) {\n      chain.pass(pass, element);\n    }\n  });\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/a-iterable\n */\nimport { RevertibleIterable } from './revertible-iterable';\n\n/**\n * Starts iteration over the given `iterable`.\n *\n * This is a shortcut for `iterable[Symbol.iterator]` to make it friendlier to minification.\n *\n * @param iterable  An iterable to iterate over.\n *\n * @return An iterator.\n */\nexport function itsIterator<T>(iterable: Iterable<T>): Iterator<T> {\n  return iterable[Symbol.iterator]();\n}\n\n/**\n * Builds an iterable iterator over the given `iterable`.\n *\n * @param iterable  An iterable to iterate over.\n *\n * @return An iterator.\n */\nexport function itsIterable<T>(iterable: Iterable<T>): IterableIterator<T> {\n  return function *() { yield* iterable; }();\n}\n\n/**\n * Creates custom iterable.\n *\n * @param iterate  A no-arg function constructing an iterator.\n * @param reverse  When `undefined` or unspecified the created iterable won't be reversible.\n *\n * @returns New iterable.\n */\nexport function makeIt<T>(iterate: (this: Iterable<T>) => Iterator<T>, reverse?: undefined): Iterable<T>;\n\n/**\n * Creates custom revertible iterable.\n *\n * @param iterate  A no-arg function constructing an iterator.\n * @param reverse  A no-arg function constructing a reverse iterable.\n *\n * @returns New reversible iterable.\n */\nexport function makeIt<T>(\n    iterate: (this: RevertibleIterable<T>) => Iterator<T>,\n    reverse: (this: RevertibleIterable<T>) => Iterable<T>,\n): RevertibleIterable<T>;\n\nexport function makeIt<T>(\n    iterate: (this: RevertibleIterable<T>) => Iterator<T>,\n    reverse?: (this: RevertibleIterable<T>) => Iterable<T>,\n): Iterable<T> {\n\n  const iterable: Iterable<T> = {\n    [Symbol.iterator]: iterate,\n  };\n\n  if (!reverse) {\n    return iterable;\n  }\n\n  const reversible = iterable as RevertibleIterable<T>;\n\n  reversible.reverse = reverse;\n\n  return reversible;\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/a-iterable\n */\nimport { isArrayLike } from './api';\nimport { itsRevertible, RevertibleIterable } from './revertible-iterable';\nimport { itsIterator } from './util';\n\n/**\n * Performs the given `action` for each element of the given `iterable`.\n *\n * @typeparam T  A type of `iterable` elements.\n * @param iterable  An iterable of elements to perform actions on.\n * @param action  An action to perform on each iterable element. This is a function accepting an element as its only\n * parameter.\n */\nexport function itsEach<T>(iterable: Iterable<T>, action: (this: void, element: T) => void): void {\n  for (const element of iterable) {\n    action(element);\n  }\n}\n\n/**\n * Checks whether the given `iterable` is empty.\n *\n * @param iterable  Iterable to check for elements.\n *\n * @return `true` if the given iterable contains at least one element, or `false` otherwise.\n */\nexport function itsEmpty(iterable: Iterable<any>): boolean {\n  return !!itsIterator(iterable).next().done;\n}\n\n/**\n * Tests whether all elements of the given `iterable` pass the test implemented by the provided function.\n *\n * @typeparam T  A type of `iterable` elements.\n * @param iterable  An iterable to test elements of.\n * @param test  A predicate function to test each element. Returns `true` to continue tests, or `false` to stop it\n * and return `false` from the method call. It accepts the tested element as the only parameter.\n *\n * @returns `true` if the `test` function returned a truthy value for every element, or `false` otherwise.\n * Returns `true` for empty iterable.\n */\nexport function itsEvery<T>(iterable: Iterable<T>, test: (this: void, element: T) => boolean): boolean {\n  for (const element of iterable) {\n    if (!test(element)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Tests whether at least one element of the given `iterable` passes the test implemented by the provided function.\n *\n * @typeparam T  A type of `iterable` elements.\n * @param iterable  An iterable to test elements of.\n * @param test  A predicate function to test each element. Returns `false` to continue tests, or `true` to stop it\n * and return `true` from the method call. It accepts the tested element as the only parameter.\n *\n * @returns `true` if the callback function returned a truthy value for at least one element in the array, or `false`\n * otherwise. Returns `false` for empty iterable.\n */\nexport function itsSome<T>(iterable: Iterable<T>, test: (this: void, element: T) => boolean): boolean {\n  for (const element of iterable) {\n    if (test(element)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Returns the first element of the given `iterable`.\n *\n * @typeparam T  A type of `iterable` elements.\n * @param iterable  Iterable to extract element from.\n *\n * @return Either the first element, or `undefined` if the given `iterable` is empty.\n */\nexport function itsFirst<T>(iterable: Iterable<T>): T | undefined {\n  return itsIterator(iterable).next().value;\n}\n\n/**\n * Returns the last element of the given `iterable`.\n *\n * If the given `iterable` is an array-like structure, then just returns its last element. If it is revertible,\n * then extracts the first element of reverted one. Otherwise iterates over elements to find the last one.\n *\n * @typeparam T  A type of `iterable` elements.\n * @param iterable  Iterable to extract element from.\n *\n * @return Either the last element, or `undefined` if the given `iterable` is empty.\n */\nexport function itsLast<T>(iterable: Iterable<T> | RevertibleIterable<T> | ArrayLike<T>): T | undefined {\n  if (isArrayLike(iterable)) {\n    return iterable[iterable.length - 1];\n  }\n  if (itsRevertible(iterable)) {\n    return itsFirst(iterable.reverse());\n  }\n\n  let last: T | undefined;\n\n  for (const element of iterable) {\n    last = element;\n  }\n\n  return last;\n}\n\n/**\n * Applies a function against an accumulator and each element of the given `iterable` to reduce elements to a single\n * value.\n *\n * @typeparam T  A type of `iterable` elements.\n * @typeparam R  A type of reduced value.\n * @param iterable  An iterable to reduce values of.\n * @param reducer  A function to apply the value returned from the previous `reducer` call and to each element.\n * @param initialValue  Initial value passed to the first `reducer` call.\n *\n * @return Reduced value returned from the last `reducer` call, or `initialValue` if there is no elements in the given\n * `iterable`.\n */\nexport function itsReduction<T, R>(\n    iterable: Iterable<T>,\n    reducer: (this: void, prev: R, element: T) => R,\n    initialValue: R,\n): R {\n\n  let reduced = initialValue;\n\n  for (const element of iterable) {\n    reduced = reducer(reduced, element);\n  }\n\n  return reduced;\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/a-iterable\n */\nimport { asis } from '@proc7ts/call-thru';\nimport { makeIt } from './util';\n\n/**\n * Creates an iterable with all `source` iterable elements that pass the test implemented by the provided function.\n *\n * @typeparam T  A type of source elements.\n * @param source  A source iterable.\n * @param test  A predicate function to test each element. Returns `true` to keep the element, or `false` otherwise.\n * It accepts the tested element as the only parameter.\n *\n * @return A new iterable with the elements that pass the test. If no elements passed the test, an empty iterable will\n * be returned.\n */\nexport function filterIt<T>(\n    source: Iterable<T>,\n    test: (this: void, element: T) => boolean,\n): Iterable<T>;\n\n/**\n * Creates an iterable with all `source` iterable elements extending the given type.\n *\n * @typeparam T  A type of source elements\n * @typeparam R  Target type.\n * @param source  A source iterable.\n * @param test  A predicate function to test that element extends the type `R`. Returns `true` to keep the element, or\n * `false` otherwise. It accepts the tested element as the only parameter.\n *\n * @return A new iterable with the elements that pass the test. If no elements passed the test, an empty iterable will\n * be returned.\n */\nexport function filterIt<T, R extends T>(\n    source: Iterable<T>,\n    test: (this: void, element: T) => element is R,\n): Iterable<R>;\n\nexport function filterIt<T>(source: Iterable<T>, test: (this: void, element: T) => boolean): Iterable<T> {\n  return makeIt(function *() {\n    for (const element of source) {\n      if (test(element)) {\n        yield element;\n      }\n    }\n  });\n}\n\n/**\n * Flattens the source iterable of iterables into a new iterable.\n *\n * Calling this function is the same as calling `flatMapIt(source, asis)`.\n *\n * @typeparam T  A type of source elements.\n * @param source  A source iterable of iterables.\n *\n * @returns A new iterable with each element of `source` being the flattened.\n */\nexport function flatMapIt<T>(source: Iterable<Iterable<T>>): Iterable<T>;\n\n/**\n * First maps each element of the `source` iterable using a mapping function, then flattens the result into a new\n * iterable.\n *\n * @typeparam T  A type of source elements.\n * @typeparam R  A type of converted elements.\n * @param source  A source iterable.\n * @param convert  A function that produces a new iterable, taking the source element as the only parameter.\n *\n * @returns A new iterable with each element being the flattened result of the `convert` function call.\n */\nexport function flatMapIt<T, R>(source: Iterable<T>, convert: (this: void, element: T) => Iterable<R>): Iterable<R>;\n\nexport function flatMapIt<T, R>(\n    source: Iterable<T>,\n    convert: (this: void, element: T) => Iterable<R> = asis as (element: T) => Iterable<R>,\n): Iterable<R> {\n  return makeIt(function *() {\n    for (const element of source) {\n      yield* convert(element);\n    }\n  });\n}\n\n/**\n * Creates a new iterable with the results of calling a provided function on every element of the `source` one.\n *\n * @typeparam T  A type of source elements.\n * @typeparam R  A type of converted elements.\n * @param source  A source iterable.\n * @param convert  A function that produces an element of the new iterable, taking the source element as the only\n * parameter.\n */\nexport function mapIt<T, R>(source: Iterable<T>, convert: (this: void, element: T) => R): Iterable<R> {\n  return makeIt(function *() {\n    for (const element of source) {\n      yield convert(element);\n    }\n  });\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/a-iterable\n */\nimport { reverseArray } from './reverse';\nimport { RevertibleIterable } from './revertible-iterable';\nimport { makeIt } from './util';\n\n/**\n * Builds an iterable over elements of array-like structure.\n *\n * @param array  An array-like structure. E.g. `Array`, DOM `NodeList`, etc.\n *\n * @returns A revertible iterable over array elements.\n */\nexport function overArray<T>(array: ArrayLike<T>): RevertibleIterable<T> {\n  return makeIt<T>(\n      function *() {\n        // eslint-disable-next-line @typescript-eslint/prefer-for-of\n        for (let i = 0; i < array.length; ++i) {\n          yield array[i];\n        }\n      },\n      () => reverseArray(array),\n  );\n}\n\n/**\n * @internal\n */\nconst noneIterable: RevertibleIterable<any> = {\n\n  *[Symbol.iterator](): Iterator<any> {/* do not iterate */},\n\n  reverse() { return this; },\n\n};\n\n/**\n * Returns an iterable without elements.\n *\n * @typeparam T  A type of constructed iterable elements.\n *\n * @returns An empty iterable instance revertible to itself.\n */\nexport function overNone<T>(): RevertibleIterable<T> {\n  return noneIterable;\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/a-iterable\n */\nimport { isArrayLike } from './api';\nimport { itsRevertible, RevertibleIterable } from './revertible-iterable';\nimport { itsIterator, makeIt } from './util';\n\n/**\n * Constructs a reversed iterable.\n *\n * If the `source` iterable is an array-like structure, then uses `reverseArray()` function to revert the constructed\n * iterable.\n * If the `source` iterable is revertible, then uses its `reverse()` method to revert the constructed one.\n * Otherwise stores elements to array and reverts them with `reverseArray()` function.\n *\n * @param source  A source iterable.\n *\n * @returns An iterable of the `source` elements in reverse order.\n */\nexport function reverseIt<T>(source: Iterable<T> | RevertibleIterable<T> | ArrayLike<T>): Iterable<T> {\n  if (isArrayLike(source)) {\n    return reverseArray(source);\n  }\n  if (itsRevertible(source)) {\n\n    const reversed = source.reverse();\n\n    return makeIt(() => itsIterator(reversed));\n  }\n  return reverseArray(Array.from(source));\n}\n\n/**\n * Constructs an iterable of array-like structure elements in reverse order.\n *\n * @param array  Source array.\n *\n * @returns An iterable of the `source` elements in reverse order.\n */\nexport function reverseArray<T>(array: ArrayLike<T>): Iterable<T> {\n  return makeIt(\n      function *() {\n\n        const len = array.length;\n\n        for (let i = len - 1; i >= 0; --i) {\n          yield array[i];\n        }\n      },\n  );\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/a-iterable\n */\nimport { overArray } from './construction';\nimport { RevertibleIterable } from './revertible-iterable';\nimport { mapIt } from './transform';\nimport { itsIterator, makeIt } from './util';\n\n/**\n * Builds an iterable over the keys of the given object.\n *\n * A list of keys is constructed using `Reflect.ownKeys()`.\n *\n * @param target  An object to select keys from.\n */\nexport function overKeys<T extends object>(target: T): RevertibleIterable<keyof T> {\n  return overArray(Reflect.ownKeys(target) as (keyof T)[]);\n}\n\n/**\n * Object property entry. This is a tuple consisting of property key and value.\n */\nexport type ObjectEntry<T, K extends keyof T = keyof T> = [K, T[K]];\n\n/**\n * Builds an iterable over the key/value entries of the given object.\n *\n * A list of keys is constructed using `Reflect.ownKeys()`.\n *\n * @param target  An object to select keys and values from.\n */\nexport function overEntries<T extends object>(target: T): RevertibleIterable<ObjectEntry<T>> {\n\n  const keys = overKeys(target);\n\n  function mapToEntries(_keys: Iterable<keyof T>): Iterable<ObjectEntry<T>> {\n    return mapIt(_keys, key => [key, target[key]] as ObjectEntry<T>);\n  }\n\n  return makeIt(() => itsIterator(mapToEntries(keys)), () => mapToEntries(keys.reverse()));\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/context-values\n */\nimport { valueProvider } from '@proc7ts/call-thru';\nimport { ContextRequest, ContextTarget } from './context-ref';\nimport { ContextValues } from './context-values';\n\n/**\n * Context value provider.\n *\n * It is responsible for constructing the values associated with particular key for the given context. Note that\n * provider generates source value, not the context values themselves.\n *\n * @typeparam Ctx  Context type.\n * @typeparam Src  Source value type.\n */\nexport type ContextValueProvider<Ctx extends ContextValues, Src> =\n/**\n * @param context  Target context.\n *\n * @return Either constructed value source, or `null`/`undefined` if unknown.\n */\n    (this: void, context: Ctx) => Src | null | undefined;\n\n/**\n * Context value specifier.\n *\n * @typeparam Ctx  Context type.\n * @typeparam Value  Context value type.\n * @typeparam Deps  Dependencies tuple type.\n * @typeparam Src  Source value type.\n * @typeparam Seed  Value seed type.\n */\nexport type ContextValueSpec<\n    Ctx extends ContextValues,\n    Value,\n    Deps extends any[] = unknown[],\n    Src = Value,\n    Seed = unknown> =\n    | ContextValueSpec.IsConstant<Src, Seed>\n    | ContextValueSpec.ViaAlias<Src, Seed>\n    | ContextValueSpec.ByProvider<Ctx, Src, Seed>\n    | ContextValueSpec.ByProviderWithDeps<Deps, Src, Seed>\n    | ContextValueSpec.AsInstance<Ctx, Src, Seed>\n    | ContextValueSpec.SelfInstance<Ctx, Src, Seed>\n    | ContextValueSpec.AsInstanceWithDeps<Deps, Src, Seed>\n    | ContextValueSpec.SelfInstanceWithDeps<Deps, Src, Seed>;\n\nexport namespace ContextValueSpec {\n\n  /**\n   * A specifier defining a context value is constant.\n   *\n   * @typeparam Src  Source value type.\n   * @typeparam Seed  Value seed type.\n   */\n  export interface IsConstant<Src, Seed = unknown> {\n\n    /**\n     * Target value to define.\n     */\n    a: ContextTarget<Src, Seed>;\n\n    /**\n     * Constant context value.\n     */\n    is: Src;\n\n  }\n\n  /**\n   * A specifier defining a context value via another one (alias).\n   *\n   * @typeparam Sec  Source value type.\n   * @typeparam Seed  Value seed type.\n   */\n  export interface ViaAlias<Src, Seed = unknown> {\n\n    /**\n     * Target value to define.\n     */\n    a: ContextTarget<Src, Seed>;\n\n    /**\n     * Context value request for the another value that will be used instead as provided one.\n     */\n    via: ContextRequest<Src, Seed>;\n\n  }\n\n  /**\n   * A specifier of context value defined by provider function.\n   *\n   * @typeparam Ctx  Context type.\n   * @typeparam Src  Source value type.\n   * @typeparam Seed  Value seed type.\n   */\n  export interface ByProvider<Ctx extends ContextValues, Src, Seed = unknown> {\n\n    /**\n     * Target value to define.\n     */\n    a: ContextTarget<Src, Seed>;\n\n    /**\n     * Context value provider.\n     */\n    by: ContextValueProvider<Ctx, Src>;\n\n  }\n\n  /**\n   * A specifier of context value defined by provider function depending on other context values.\n   *\n   * @typeparam Deps  Dependencies tuple type.\n   * @typeparam Src  Source value type.\n   * @typeparam Seed  Value seed type.\n   */\n  export interface ByProviderWithDeps<Deps extends any[], Src, Seed = unknown> {\n\n    /**\n     * Target value to define.\n     */\n    a: ContextTarget<Src, Seed>;\n\n    /**\n     * Context value provider function.\n     */\n    by: (this: void, ...args: Deps) => Src | null | undefined;\n\n    /**\n     * Context value requests for corresponding value provider function arguments.\n     */\n    with: DepsRequests<Deps>;\n\n  }\n\n  /**\n   * A specifier of context value defined as instance of some class.\n   *\n   * @typeparam Ctx  Context type.\n   * @typeparam Src  Source value type.\n   * @typeparam Seed  Value seed type.\n   */\n  export interface AsInstance<Ctx extends ContextValues, Src, Seed = unknown> {\n\n    /**\n     * Target value to define.\n     */\n    a: ContextTarget<Src, Seed>;\n\n    /**\n     * Context value class constructor.\n     */\n    as: new (context: Ctx) => Src;\n\n  }\n\n  /**\n   * A specifier of context value defined as instance of the same class as value.\n   *\n   * @typeparam Ctx  Context type.\n   * @typeparam Src  Source value type.\n   * @typeparam Seed  Value seed type.\n   */\n  export interface SelfInstance<Ctx extends ContextValues, Src, Seed = unknown> {\n\n    /**\n     * Target value to define as its class constructor.\n     */\n    as: ContextTarget<Src, Seed> & (new (context: Ctx) => Src);\n\n  }\n\n  /**\n   * A specifier of context value defined as instance of some class with constructor depending on other context values.\n   *\n   * @typeparam Deps  Dependencies tuple type.\n   * @typeparam Src  Source value type.\n   * @typeparam Seed  Value seed type.\n   */\n  export interface AsInstanceWithDeps<Deps extends any[], Src, Seed = unknown> {\n\n    /**\n     * Target value to define.\n     */\n    a: ContextTarget<Src, Seed>;\n\n    /**\n     * Context value class constructor.\n     */\n    as: new (...args: Deps) => Src;\n\n    /**\n     * Context value requests for corresponding constructor arguments.\n     */\n    with: DepsRequests<Deps>;\n\n  }\n\n  /**\n   * A specifier of context value defined as instance of the same class as value with constructor depending on other\n   * context values.\n   *\n   * @typeparam Deps  Dependencies tuple type.\n   * @typeparam Src  Source value type.\n   * @typeparam Seed  Value seed type.\n   */\n  export interface SelfInstanceWithDeps<Deps extends any[], Src, Seed = unknown> {\n\n    /**\n     * Target value to define as its class constructor.\n     */\n    as: ContextTarget<Src, Seed> & (new (...args: Deps) => Src);\n\n    /**\n     * Context value requests for corresponding constructor arguments.\n     */\n    with: DepsRequests<Deps>;\n\n  }\n\n  /**\n   * Dependencies requests.\n   *\n   * This is a tuple of context value requests, each of which corresponds to dependency.\n   *\n   * @typeparam Deps  Dependencies tuple type.\n   */\n  export type DepsRequests<Deps extends any[]> = {\n    [K in keyof Deps]: ContextRequest<Deps[K]>;\n  };\n\n}\n\n/**\n * Constructs a specifier of context value defined by provider out of arbitrary one.\n *\n * @typeparam Ctx  Context type.\n * @typeparam Value  Context value type.\n * @typeparam Deps  Dependencies tuple type.\n * @typeparam Src  Source value type.\n * @param spec  Context value specifier to convert.\n *\n * @returns A specifier of context value defined by provider function.\n *\n * @throws TypeError  On malformed context value specifier.\n */\nexport function contextValueSpec<Ctx extends ContextValues, Value, Deps extends any[], Src, Seed>(\n    spec: ContextValueSpec<Ctx, Value, Deps, Src, Seed>,\n): ContextValueSpec.ByProvider<Ctx, Src, Seed> {\n  if (byProvider(spec)) {\n    if (!withDeps<Ctx, Deps, Src, Seed>(spec)) {\n      return spec;\n    }\n\n    const { a, by, with: deps } = spec;\n\n    return {\n      a,\n      by(this: void, context: Ctx) {\n        return by(...deps.map(dep => context.get(dep)) as Deps);\n      },\n    };\n  }\n  if (isConstant<Src, Seed>(spec)) {\n\n    const { a, is: value } = spec;\n\n    return {\n      a,\n      by: valueProvider(value),\n    };\n  }\n  if (viaAlias(spec)) {\n\n    const { a, via } = spec;\n\n    return {\n      a,\n      by(ctx: Ctx) {\n        return ctx.get(via);\n      },\n    };\n  }\n  if (asInstance<Ctx, Deps, Src, Seed>(spec)) {\n    if (selfInstance<Ctx, Deps, Src, Seed>(spec)) {\n      spec = toAsInstance(spec);\n    }\n    if (!withDeps<Ctx, Deps, Src, Seed>(spec)) {\n\n      const { as: Type } = spec;\n\n      return {\n        a: spec.a,\n        by(ctx: Ctx) {\n          return new Type(ctx);\n        },\n      };\n    }\n\n    const { as: DepType, with: deps } = spec;\n\n    return {\n      a: spec.a,\n      by(this: void, context: Ctx) {\n        return new DepType(...deps.map(dep => context.get(dep)) as Deps);\n      },\n    };\n  }\n\n  throw new TypeError(`Malformed context value specifier: ${spec}`);\n}\n\n/**\n * @internal\n */\nfunction byProvider<Ctx extends ContextValues, Deps extends any[], Src, Seed>(\n    spec: ContextValueSpec<Ctx, any, Deps, Src, Seed>,\n): spec is ContextValueSpec.ByProvider<Ctx, Src, Seed> | ContextValueSpec.ByProviderWithDeps<Deps, Src, Seed> {\n  return 'by' in spec;\n}\n\n/**\n * @internal\n */\nfunction asInstance<Ctx extends ContextValues, Deps extends any[], Src, Seed>(\n    spec: ContextValueSpec<Ctx, any, Deps, Src, Seed>,\n): spec is ContextValueSpec.AsInstance<Ctx, Src, Seed> | ContextValueSpec.AsInstanceWithDeps<Deps, Src, Seed> {\n  return 'as' in spec;\n}\n\n/**\n * @internal\n */\nfunction selfInstance<Ctx extends ContextValues, Deps extends any[], Src, Seed>(\n    spec: ContextValueSpec<Ctx, any, Deps, Src, Seed>,\n): spec is ContextValueSpec.SelfInstance<Ctx, Src, Seed> | ContextValueSpec.SelfInstanceWithDeps<Deps, Src, Seed> {\n  return !('a' in spec);\n}\n\n/**\n * @internal\n */\nfunction toAsInstance<Ctx extends ContextValues, Deps extends any[], Src, Seed>(\n    spec: ContextValueSpec.SelfInstance<Ctx, Src, Seed> | ContextValueSpec.SelfInstanceWithDeps<Deps, Src, Seed>,\n): ContextValueSpec.AsInstance<Ctx, Src, Seed> | ContextValueSpec.AsInstanceWithDeps<Deps, Src, Seed> {\n  return {\n    ...spec,\n    a: spec.as,\n  } as ContextValueSpec.AsInstance<Ctx, Src, Seed> | ContextValueSpec.AsInstanceWithDeps<Deps, Src, Seed>;\n}\n\n/**\n * @internal\n */\nfunction isConstant<Src, Seed>(\n    spec: ContextValueSpec<any, any, any, Src, Seed>,\n): spec is ContextValueSpec.IsConstant<Src, Seed> {\n  return 'is' in spec;\n}\n\n/**\n * @internal\n */\nfunction viaAlias<Src, Seed>(\n    spec: ContextValueSpec<any, any, any, Src, Seed>,\n): spec is ContextValueSpec.ViaAlias<Src, Seed> {\n  return 'via' in spec;\n}\n\n/**\n * @internal\n */\nfunction withDeps<Ctx extends ContextValues, Deps extends any[], Src, Seed>(\n    spec: ContextValueSpec.ByProvider<Ctx, Src, Seed> | ContextValueSpec.ByProviderWithDeps<Deps, Src, Seed>,\n): spec is ContextValueSpec.ByProviderWithDeps<Deps, Src, Seed>;\n\n/**\n * @internal\n */\nfunction withDeps<Ctx extends ContextValues, Deps extends any[], Src, Seed>(\n    spec: ContextValueSpec.AsInstance<Ctx, Src, Seed> | ContextValueSpec.AsInstanceWithDeps<Deps, Src, Seed>,\n): spec is ContextValueSpec.AsInstanceWithDeps<Deps, Src, Seed>;\n\n/**\n * @internal\n */\nfunction withDeps<Ctx extends ContextValues, Deps extends any[], Src, Seed>(\n    spec: ContextValueSpec<Ctx, any, Deps, Src, Seed>,\n): boolean {\n  return 'with' in spec;\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/context-values\n */\nimport { filterIt, flatMapIt, itsEmpty, mapIt, overNone } from '@proc7ts/a-iterable';\nimport { isPresent, lazyValue } from '@proc7ts/call-thru';\nimport { ContextKey, ContextSeedKey } from './context-key';\nimport { ContextSeeder } from './context-seeder';\nimport { ContextValueProvider } from './context-value-spec';\nimport { ContextValues } from './context-values';\n\n/**\n * @internal\n */\nclass IterativeContextSeeder<Ctx extends ContextValues, Src> implements ContextSeeder<Ctx, Src, Iterable<Src>> {\n\n  private readonly _providers: ContextValueProvider<Ctx, Src>[] = [];\n\n  provide(provider: ContextValueProvider<Ctx, Src>): () => void {\n    this._providers.push(provider);\n    return () => {\n\n      const found = this._providers.indexOf(provider);\n\n      if (found >= 0) {\n        this._providers.splice(found, 1);\n      }\n    };\n  }\n\n  seed(context: Ctx, initial: Iterable<Src> = overNone()): Iterable<Src> {\n    return flatMapIt([\n      initial,\n      iterativeSeed(context, this._providers),\n    ]);\n  }\n\n  isEmpty(seed: Iterable<Src>): boolean {\n    return itsEmpty(seed);\n  }\n\n  combine(first: Iterable<Src>, second: Iterable<Src>): Iterable<Src> {\n    return flatMapIt([first, second]);\n  }\n\n}\n\n/**\n * @internal\n */\nclass IterativeSeedKey<Src> extends ContextSeedKey<Src, Iterable<Src>> {\n\n  seeder<Ctx extends ContextValues>(): IterativeContextSeeder<Ctx, Src> {\n    return new IterativeContextSeeder();\n  }\n\n}\n\n/**\n * Iterative context value key implementation.\n *\n * Collects value sources as iterable instance.\n *\n * A context value associated with this key is never changes once constructed.\n *\n * @typeparam Value  Context value type.\n * @typeparam Src  Source value type.\n */\nexport abstract class IterativeContextKey<Value, Src = Value> extends ContextKey<Value, Src, Iterable<Src>> {\n\n  readonly seedKey: ContextSeedKey<Src, Iterable<Src>>;\n\n  /**\n   * Constructs iterative context value key.\n   *\n   * @param name  Human-readable key name.\n   * @param seedKey  Value seed key. A new one will be constructed when omitted.\n   */\n  constructor(name: string, seedKey?: ContextSeedKey<Src, Iterable<Src>>) {\n    super(name);\n    this.seedKey = seedKey || new IterativeSeedKey(this);\n  }\n\n}\n\n/**\n * @internal\n */\nfunction iterativeSeed<Ctx extends ContextValues, Src>(\n    context: Ctx,\n    providers: readonly ContextValueProvider<Ctx, Src>[],\n): Iterable<Src> {\n  return filterIt<Src | null | undefined, Src>(\n      mapIt(\n          providers.map(provider => lazyValue(provider.bind(undefined, context))), // lazily evaluated providers\n          provider => provider(),\n      ),\n      isPresent,\n  );\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/context-values\n */\nimport { lazyValue, noop } from '@proc7ts/call-thru';\nimport { ContextKey, ContextSeedKey } from './context-key';\nimport { ContextSeeder } from './context-seeder';\nimport { ContextValueProvider } from './context-value-spec';\nimport { ContextValues } from './context-values';\n\n/**\n * @internal\n */\nclass SimpleContextSeeder<Ctx extends ContextValues, Src>\n    implements ContextSeeder<Ctx, Src, SimpleContextKey.Seed<Src>> {\n\n  private readonly _providers: ContextValueProvider<Ctx, Src>[] = [];\n\n  provide(provider: ContextValueProvider<Ctx, Src>): () => void {\n    this._providers.unshift(provider);\n    return () => {\n\n      const found = this._providers.lastIndexOf(provider);\n\n      if (found >= 0) {\n        this._providers.splice(found, 1);\n      }\n    };\n  }\n\n  seed(context: Ctx, initial?: SimpleContextKey.Seed<Src>): SimpleContextKey.Seed<Src> {\n\n    const { length } = this._providers;\n\n    if (!length) {\n      return initial || noop;\n    }\n\n    const makeSeed = (provider: ContextValueProvider<Ctx, Src>): SimpleContextKey.Seed<Src> => lazyValue(\n        provider.bind(undefined, context),\n    );\n\n    if (!initial && length === 1) {\n      return makeSeed(this._providers[0]);\n    }\n\n    const seeds: SimpleContextKey.Seed<Src>[] = this._providers.map(makeSeed);\n\n    if (initial) {\n      seeds.push(initial);\n    }\n\n    return combineSimpleSeeds(seeds);\n  }\n\n  isEmpty(seed: SimpleContextKey.Seed<Src>): boolean {\n    return seed() == null;\n  }\n\n  combine(\n      first: SimpleContextKey.Seed<Src>,\n      second: SimpleContextKey.Seed<Src>,\n  ): SimpleContextKey.Seed<Src> {\n    if (first === noop) {\n      return second;\n    }\n    if (second === noop) {\n      return first;\n    }\n    return combineSimpleSeeds([second, first]);\n  }\n\n}\n\n/**\n * @internal\n */\nfunction combineSimpleSeeds<Src>(\n    seeds: readonly SimpleContextKey.Seed<Src>[],\n): SimpleContextKey.Seed<Src> {\n  return lazyValue(() => {\n    for (const seed of seeds) {\n\n      const value = seed();\n\n      if (value != null) {\n        return value;\n      }\n    }\n    return;\n  });\n}\n\n/**\n * @internal\n */\nclass SimpleSeedKey<Src> extends ContextSeedKey<Src, SimpleContextKey.Seed<Src>> {\n\n  seeder<Ctx extends ContextValues>(): SimpleContextSeeder<Ctx, Src> {\n    return new SimpleContextSeeder();\n  }\n\n}\n\n/**\n * Simple context value key implementation.\n *\n * Collects the most recent source value.\n *\n * A context value associated with this key is never changes once constructed.\n *\n * @typeparam Value  Context value type.\n * @typeparam Src  Source value type.\n */\nexport abstract class SimpleContextKey<Value, Src = Value> extends ContextKey<Value, Src, SimpleContextKey.Seed<Src>> {\n\n  readonly seedKey: ContextSeedKey<Src, SimpleContextKey.Seed<Src>>;\n\n  /**\n   * Constructs simple context value key.\n   *\n   * @param name  Human-readable key name.\n   * @param seedKey  Value seed key. A new one will be constructed when omitted.\n   */\n  constructor(name: string, seedKey?: ContextSeedKey<Src, SimpleContextKey.Seed<Src>>) {\n    super(name);\n    this.seedKey = seedKey || new SimpleSeedKey(this);\n  }\n\n}\n\nexport namespace SimpleContextKey {\n\n  /**\n   * A seed of {@link SimpleContextKey simple context key}.\n   *\n   * @typeparam Src  Source vale type.\n   */\n  export type Seed<Src> =\n  /**\n   * @returns Either source value, or `null`/`undefined` when when absent.\n   */\n      (this: void) => Src | null | undefined;\n\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/fun-events\n */\nimport { AfterEvent } from '../after-event';\n\n/**\n * A key of [[EventKeeper]] method returning its [[AfterEvent]] instance..\n *\n * @category Core\n */\nexport const AfterEvent__symbol = (/*#__PURE__*/ Symbol('after-event'));\n\n/**\n * An event supplier that keeps the last event sent.\n *\n * The registered event receiver would receive the kept event immediately upon registration, and all upcoming events\n * after that.\n *\n * @category Core\n * @typeparam E  An event type. This is a list of event receiver parameter types.\n */\nexport interface EventKeeper<E extends any[]> {\n\n  /**\n   * Returns an [[AfterEvent]] instance of this event keeper.\n   *\n   * @returns [[AfterEvent]] instance registering event receivers sent by this keeper.\n   */\n  [AfterEvent__symbol](): AfterEvent<E>;\n\n}\n\nexport namespace EventKeeper {\n\n  /**\n   * A type of events sent by the given event keeper.\n   *\n   * @typeparam T  Target event keeper.\n   */\n  export type Event<T extends EventKeeper<any>> = T extends EventKeeper<infer E> ? E : never;\n\n}\n\n/**\n * Checks whether the given object implements an [[EventKeeper]] interface.\n *\n * @category Core\n * @typeparam E  An event type. This is a list of event receiver parameter types.\n * @param value  An object to check.\n *\n * @returns `true` if `value` contains an [[AfterEvent__symbol]] property, or `false` otherwise.\n */\nexport function isEventKeeper<E extends any[]>(value: object): value is EventKeeper<E> {\n  return AfterEvent__symbol in value;\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/fun-events\n */\nimport { noop } from '@proc7ts/call-thru';\n\n/**\n * A key of [[EventSupplyPeer]] property containing [[EventSupply]] instance.\n *\n * @category Core\n */\nexport const EventSupply__symbol = (/*#__PURE__*/ Symbol('events-supply'));\n\n/**\n * A supply of events from {@link EventSupplier event supplier} to {@link EventReceiver event receiver}.\n *\n * When no longer needed the supply may be {@link off cut off}.\n *\n * May be constructed using [[eventSupply]] function.\n *\n * @category Core\n */\nexport class EventSupply implements EventSupplyPeer {\n\n  /**\n   * @internal\n   */\n  private _off: (reason?: any) => void;\n\n  /**\n   * @internal\n   */\n  private _whenOff: (callback: (reason?: any) => void) => void;\n\n  constructor(off: (this: void, reason?: any) => void = noop) {\n    this._off = reason => {\n      this._whenOff = callback => callback(reason);\n      this._off = noop;\n      off(reason);\n    };\n    this._whenOff = callback => {\n\n      const prev = this._off;\n\n      this._off = reason => {\n        prev(reason);\n        callback(reason);\n      };\n    };\n  }\n\n  /**\n   * Whether this supply is {@link off cut off} already.\n   *\n   * `true` means the events will no longer be supplied.\n   */\n  get isOff(): boolean {\n    return this._off === noop;\n  }\n\n  /**\n   * `this` event supply.\n   */\n  get [EventSupply__symbol](): this {\n    return this;\n  }\n\n  /**\n   * Cuts off the supply of events.\n   *\n   * After this method call the receiver will no longer receive events.\n   *\n   * Calling this method for the second time has no effect.\n   *\n   * @param reason  An optional reason why supply is cut off. It will be reported to [[whenOff]] callbacks.\n   * @returns A cut off event supply instance.\n   */\n  off(reason?: any): EventSupply {\n    this._off(reason);\n    return this;\n  }\n\n  /**\n   * Registers a callback function that will be called as soon as this supply is {@link off cut off}. This callback\n   * will be called immediately if [[isOff]] is `true`.\n   *\n   * @param callback  A callback function accepting optional cut off reason as its only parameter.\n   * By convenience an `undefined` reason means normal completion.\n   *\n   * @returns `this` instance.\n   */\n  whenOff(callback: (this: void, reason?: any) => void): this {\n    this._whenOff(callback);\n    return this;\n  }\n\n  /**\n   * Makes another event supply depend on this one.\n   *\n   * Once this supply is {@link off cut off}, `another` one is cut off with the same reason.\n   *\n   * Calling this method has the same effect as calling {@link needs eventSupplyOf(another).need(this)}.\n   *\n   * @param another  A peer of event supply to make depend on this one.\n   *\n   * @returns `this` instance.\n   */\n  cuts(another: EventSupplyPeer): this {\n    eventSupplyOf(another).needs(this);\n    return this;\n  }\n\n  /**\n   * Declares this event supply depends on another one.\n   *\n   * Once `another` supply is {@link off cut off}, this one is will be cut off with the same reason.\n   *\n   * @param another  A peer of event supply this one depends on.\n   *\n   * @returns `this` instance.\n   */\n  needs(another: EventSupplyPeer): this {\n    eventSupplyOf(another).whenOff(reason => this._off(reason));\n    return this;\n  }\n\n}\n\n/**\n * A peer of event supply.\n *\n * Contains an [[EventSupply]] that can be extracted by [[eventSupplyOf]] function.\n *\n * To be implemented by objects that controls event supply. An [[EventSupply]] is a peer of itself.\n *\n * @category Core\n */\nexport interface EventSupplyPeer {\n\n  /**\n   * An event supply of this peer.\n   */\n  readonly [EventSupply__symbol]: EventSupply;\n\n}\n\n/**\n * Extracts an event supply from its peer.\n *\n * @category Core\n * @param peer  A peer of event supply.\n *\n * @returns Extracted event supply contained in [[EventSupply__symbol]] property.\n */\nexport function eventSupplyOf(peer: EventSupplyPeer): EventSupply {\n  return peer[EventSupply__symbol];\n}\n\n/**\n * Constructs new {@link EventSupply event supply}.\n *\n * @category Core\n * @param off  A function to call when supply will supply is {@link EventSupply.off cut off}. Accepts optional\n * cut off reason as its only parameter. No-op by default.\n */\nexport function eventSupply(off?: (this: void, reason?: any) => void): EventSupply {\n  return new EventSupply(off);\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/fun-events\n */\nimport { noop } from '@proc7ts/call-thru';\nimport { eventSupply, EventSupply } from './event-supply';\n\n/**\n * Event receiver is called on each event sent by [[EventSender]] when registered.\n *\n * A receiver may be represented either by {@link EventReceiver.Function function}, or by\n * {@link EventReceiver.Object object}. The former is a simplest form. The latter allows control all aspects of event\n * processing.\n *\n * To register an event receiver just call the event sender's `[OnEvent__symbol]` or event keeper's\n * `[AfterEvent__symbol]` method with this event receiver as argument.\n *\n * A _recurrent event_ is an event sent from inside event receiver and targeted the same receiver. Recurrent event\n * processing is scheduled until after the current event processing finishes. To handle recurrent events in a specific\n * way the event receiver may utilize an {@link EventReceiver.Context event processing context} available as\n * a first parameter of [[EventReceiver.Object.receive]] method.\n *\n * @category Core\n * @typeparam E  An event type. This is a tuple of event receiver parameter types.\n */\nexport type EventReceiver<E extends any[]> = EventReceiver.Function<E> | EventReceiver.Object<E>;\n\nexport namespace EventReceiver {\n\n  /**\n   * Event receiver function signature.\n   *\n   * It never receives event processing context.\n   *\n   * @typeparam E  An event type. This is a tuple of event receiver parameter types.\n   */\n  export type Function<E extends any[]> =\n  /**\n   * @param event  An event represented by function call arguments.\n   */\n      (this: void, ...event: E) => void;\n\n  /**\n   * Event receiver object.\n   *\n   * @typeparam E  An event type. This is a tuple of event receiver parameter types.\n   */\n  export interface Object<E extends any[]> {\n\n    /**\n     * Event supply to this receiver.\n     *\n     * Events will be supplied to this receiver until this supply is {@link EventSupply.off cut off}.\n     *\n     * When omitted a new supply will be created per receiver registration within event supplier.\n     */\n    readonly supply?: EventSupply;\n\n    /**\n     * Receives an event.\n     *\n     * @param context  An event processing context.\n     * @param event  An event represented as the rest of arguments.\n     */\n    receive(context: Context<E>, ...event: E): void;\n\n  }\n\n  /**\n   * The most generic event receiver form.\n   *\n   * Any event receiver may be converted to generic form by [[eventReceiver]] function.\n   *\n   * In contrast to [[Object]] this one always has a supply.\n   *\n   * @typeparam E  An event type. This is a tuple of event receiver parameter types.\n   */\n  export interface Generic<E extends any[]> extends Object<E> {\n\n    readonly supply: EventSupply;\n\n  }\n\n  /**\n   * Event processing context.\n   *\n   * It is passed to [[Object]] receivers.\n   *\n   * @typeparam E  An event type. This is a tuple of event receiver parameter types.\n   */\n  export interface Context<E extends any[]> {\n\n    /**\n     * Schedules the given event receiver to be called to process recurrent event(s).\n     *\n     * If called during event processing the recurrent events will be sent to the given `receiver` after current event\n     * processed instead of original one.\n     *\n     * If called multiple times the latest `receiver` will be used.\n     *\n     * If not called the recurrent events will be sent to original event receiver.\n     *\n     * > This method should be called __before__ the recurrent event issued. Otherwise it may happen that recurrent\n     * > event will be ignored in some situations. E.g. when it is issued during receiver registration.\n     *\n     * @param receiver  Recurrent events receiver function.\n     */\n    onRecurrent(receiver: Function<E>): void;\n\n  }\n\n}\n\n/**\n * Converts arbitrary event receiver to generic form.\n *\n * The returned event receiver would never send events to original receiver after event supply is cut off.\n *\n * @category Core\n * @typeparam E  An event type. This is a tuple of event receiver parameter types.\n * @param receiver  An event receiver to convert.\n *\n * @returns Event `receiver` in most generic form.\n */\nexport function eventReceiver<E extends any[]>(receiver: EventReceiver<E>): EventReceiver.Generic<E> {\n\n  let generic: {\n    readonly supply: EventSupply;\n    receive: (context: EventReceiver.Context<E>, ...event: E) => void;\n  };\n\n  if (typeof receiver === 'function') {\n    generic = {\n      supply: eventSupply(),\n      receive(_context, ...event) {\n        receiver(...event);\n      },\n    };\n  } else {\n    generic = {\n      supply: receiver.supply || eventSupply(),\n      receive(context, ...event) {\n        if (!this.supply.isOff) {\n          // Supply cut off callback may be called before the receiver disabled.\n          // Such callback may send an event that should not be received.\n          receiver.receive(context, ...event);\n        }\n      },\n    };\n  }\n\n  // Disable receiver when event supply is cut off. But see the comment above.\n  // For function receiver this callback is always the first one.\n  generic.supply.whenOff(() => generic.receive = noop);\n\n  return generic;\n}\n","import { eventReceiver, EventReceiver } from './event-receiver';\n\n/**\n * Creates an event receiver function that dispatches events to each of the given event receivers.\n *\n * @internal\n * @param receivers  An iterable of event receivers to dispatch event to.\n *\n * @returns An event receiver function that does not utilize event processing context an thus can be called directly.\n */\nexport function receiveByEach<E extends any[]>(\n    receivers: Iterable<EventReceiver.Generic<E>>,\n): (this: void, ...event: E) => void {\n\n  let send: (this: void, event: E) => void = sendNonRecurrent;\n\n  return (...event) => send(event);\n\n  function sendNonRecurrent(event: E): void {\n\n    let actualReceivers = receivers;\n    const received: E[] = [];\n\n    send = (recurrent: E) => received.push(recurrent);\n\n    try {\n      for (; ;) {\n        actualReceivers = processEvent(actualReceivers, event);\n\n        const recurrent = received.shift();\n\n        if (!recurrent) {\n          break;\n        }\n\n        event = recurrent;\n      }\n    } finally {\n      send = sendNonRecurrent;\n    }\n  }\n}\n\nfunction processEvent<E extends any[]>(\n    receivers: Iterable<EventReceiver.Generic<E>>,\n    event: E,\n): EventReceiver.Generic<E>[] {\n\n  const recurrentReceivers: EventReceiver.Generic<E>[] = [];\n\n  for (const receiver of receivers) {\n\n    const idx = recurrentReceivers.length;\n\n    recurrentReceivers.push(receiver);\n\n    const context: EventReceiver.Context<E> = {\n      onRecurrent(recurrentReceiver) {\n        recurrentReceivers[idx] = eventReceiver({\n          supply: receiver.supply,\n          receive(_context, ...recurrentEvent) {\n            recurrentReceiver(...recurrentEvent);\n          },\n        });\n      },\n    };\n\n    receiver.receive(context, ...event);\n  }\n\n  return recurrentReceivers;\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/fun-events\n */\nimport { OnEvent } from '../on-event';\n\n/**\n * A key of [[EventSender]] method returning its [[OnEvent]] instance.\n *\n * @category Core\n */\nexport const OnEvent__symbol = (/*#__PURE__*/ Symbol('on-event'));\n\n/**\n * A sender of events.\n *\n * Contains an [[OnEvent]] instance registering event receivers.\n *\n * @category Core\n * @typeparam E  An event type. This is a tuple of event receiver parameter types.\n */\nexport interface EventSender<E extends any[]> {\n\n  /**\n   * Returns an [[OnEvent]] instance of this event sender.\n   *\n   * @returns [[OnEvent]] instance registering event receivers sent by this sender.\n   */\n  [OnEvent__symbol](): OnEvent<E>;\n\n}\n\nexport namespace EventSender {\n\n  /**\n   * A type of events sent by the given event sender.\n   *\n   * @typeparam T  Target event sender.\n   */\n  export type Event<T extends EventSender<any>> = T extends EventSender<infer E> ? E : never;\n\n}\n\n/**\n * Checks whether the given object implements an [[EventSender]] interface.\n *\n * @category Core\n * @typeparam E  An event type. This is a list of event receiver parameter types.\n * @param value  An object to check.\n *\n * @returns `true` if `value` contains [[OnEvent__symbol]] property, or `false` otherwise.\n */\nexport function isEventSender<E extends any[]>(value: object): value is EventSender<E> {\n  return OnEvent__symbol in value;\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/fun-events\n */\nimport { EventSupply, eventSupplyOf, EventSupplyPeer } from './event-supply';\n\n/**\n * @internal\n */\nclass NoSupply extends EventSupply {\n\n  get isOff(): true {\n    return true;\n  }\n\n  off(): this {\n    return this;\n  }\n\n  whenOff(callback: (reason?: any) => void): this {\n    callback();\n    return this;\n  }\n\n  cuts(another: EventSupplyPeer): this {\n    eventSupplyOf(another).off();\n    return this;\n  }\n\n  needs(): this {\n    return this;\n  }\n\n}\n\n/**\n * @internal\n */\nconst noSupply = (/*#__PURE__*/ new NoSupply());\n\n/**\n * Returns a no-event supply.\n *\n * @category Core\n *\n * @returns An event supply that is already cut off without any particular reason.\n */\nexport function noEventSupply(): EventSupply {\n  return noSupply;\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/fun-events\n */\nimport { noop } from '@proc7ts/call-thru';\nimport { receiveByEach } from './event-notifier.impl';\nimport { eventReceiver, EventReceiver } from './event-receiver';\n\n/**\n * Creates an event sender targeted specific receiver.\n *\n * @category Core\n * @typeparam E  An event type. This is a list of event receiver parameter types.\n *\n * @param receiver  Target event receiver.\n *\n * @returns A function accepting events and sending them to target `receiver`.\n */\nexport function sendEventsTo<E extends any[]>(receiver: EventReceiver<E>): (this: void, ...event: E) => void {\n\n  const generic = eventReceiver(receiver);\n  let send: (...event: E) => void = receiveByEach([generic]);\n\n  generic.supply.whenOff(() => send = noop);\n\n  return (...event) => send(...event);\n}\n","import { EventReceiver } from '../base';\nimport { OnEvent } from '../on-event';\n\n/**\n * @internal\n */\nexport function once<E extends any[]>(\n    onSource: OnEvent<E>,\n): (receiver: EventReceiver.Generic<E>) => void {\n  return receiver => onSource.to({\n    supply: receiver.supply,\n    receive: (context, ...event) => {\n      receiver.receive(context, ...event);\n      receiver.supply.off();\n    },\n  });\n}\n","import { EventNotifier, EventReceiver, eventSupply, EventSupply, sendEventsTo } from '../base';\nimport { OnEvent } from '../on-event';\n\n/**\n * @internal\n */\nexport function share<E extends any[]>(\n    onSource: OnEvent<E>,\n): (receiver: EventReceiver.Generic<E>) => void {\n\n  const shared = new EventNotifier<E>();\n  let sharedSupply: EventSupply;\n  let initialEvents: E[] | undefined;\n\n  return receiver => {\n    if (!shared.size) {\n      initialEvents = [];\n      sharedSupply = eventSupply(() => initialEvents = undefined);\n\n      onSource.to({\n        supply: sharedSupply,\n        receive(_ctx, ...event) {\n          if (initialEvents) {\n            if (shared.size) {\n              // More events received\n              // Stop sending initial ones\n              initialEvents = undefined;\n            } else {\n              // Record events received during first receiver registration\n              // to send them to all receivers until more event received\n              initialEvents.push(event);\n            }\n          }\n          shared.send(...event);\n        },\n      });\n    }\n\n    receiver.supply.needs(sharedSupply);\n    shared.on(receiver).whenOff((reason?: any) => {\n      if (!shared.size) {\n        sharedSupply.off(reason);\n      }\n    });\n\n    if (initialEvents) {\n      // Send initial events to just registered receiver\n\n      const dispatch = sendEventsTo(receiver);\n\n      initialEvents.forEach(event => dispatch(...event));\n    }\n  };\n}\n","import { isNextCall, NextCall__symbol, noop } from '@proc7ts/call-thru';\nimport { EventReceiver, EventSender, eventSupply, EventSupply, noEventSupply, OnEvent__symbol } from '../base';\nimport { OnEvent } from '../on-event';\nimport { OnEventCallChain } from '../passes';\n\n/**\n * @internal\n */\nexport function thru<E extends any[]>(\n    onSource: OnEvent<E>,\n    passes: ((...args: any[]) => any)[],\n): (receiver: EventReceiver.Generic<E>) => void {\n\n  interface ChainEntry {\n    readonly chain: OnEventCallChain;\n    supply: EventSupply;\n  }\n\n  return (receiver: EventReceiver.Generic<any>) => {\n\n    const chains: ChainEntry[] = [];\n\n    onSource.to({\n      supply: receiver.supply,\n      receive(context, ...event) {\n\n        const chain = (index: number, chainSupply: EventSupply): [OnEventCallChain, EventSupply] => {\n\n          const lastPass = index >= passes.length;\n\n          ++index;\n\n          const existing = chains[index];\n\n          if (existing) {\n\n            const prevSupply = existing.supply;\n\n            existing.supply = chainSupply;\n\n            return [existing.chain, prevSupply];\n          }\n\n          const pass = index < passes.length ? passes[index] : noop;\n\n          const entry: ChainEntry = {\n            chain: {\n              call<A extends any[]>(fn: (...args: A) => any, args: A): void {\n                handleResult(fn(...args), args);\n              },\n              pass<A>(fn: (arg: A) => any, arg: A): void {\n                handleResult(fn(arg), [arg]);\n              },\n              skip(): void {\n                entry.supply.off();\n              },\n              onEvent<E extends any[]>(\n                  pass: (this: void, ...event: E) => void,\n                  sender: EventSender<E>,\n              ): void {\n\n                const supply = eventSupply().needs(entry.supply);\n\n                sender[OnEvent__symbol]().to({\n                  supply,\n                  receive(_context, ...event): void {\n                    handleResult(pass(...event), event, supply);\n                  },\n                });\n              },\n            },\n            supply: chainSupply,\n          };\n\n          chains[index] = entry;\n\n          return [entry.chain, noEventSupply()];\n\n          function handleResult(\n              callResult: any,\n              args: any[],\n              parentSupply = entry.supply,\n          ): void {\n\n            const [nextChain, prevSupply] = chain(index, eventSupply().needs(parentSupply));\n\n            try {\n              if (isNextCall(callResult)) {\n                callResult[NextCall__symbol](nextChain, pass);\n              } else if (lastPass) {\n                receiver.receive(context, ...args);\n              } else {\n                nextChain.pass(pass, callResult);\n              }\n            } finally {\n              prevSupply.off();\n            }\n          }\n        };\n\n        const [firstChain, prevSupply] = chain(0, eventSupply().needs(receiver.supply));\n\n        try {\n          firstChain.call(passes[0], event);\n        } finally {\n          prevSupply.off();\n        }\n      },\n    });\n  };\n}\n","import { EventReceiver, eventSupply, EventSupply, EventSupplyPeer } from '../base';\nimport { OnEvent } from '../on-event';\n\n/**\n * @internal\n */\nexport function tillOff<E extends any[]>(\n    onSource: OnEvent<E>,\n    required: EventSupplyPeer,\n    dependentSupply?: EventSupply,\n): (receiver: EventReceiver.Generic<E>) => void {\n  return receiver => {\n    if (dependentSupply) {\n      onSource.to({\n        supply: eventSupply().needs(required).cuts(dependentSupply),\n        receive: (receiver.receive as Function).bind(receiver),\n      });\n    } else {\n      receiver.supply.needs(required);\n      onSource.to(receiver);\n    }\n  };\n}\n","import { EventReceiver } from '../index';\n\n/**\n * @internal\n */\nexport function neverReceiveBecause(reason?: any): (receiver: EventReceiver.Generic<any>) => void {\n  return ({ supply }) => supply.off(reason);\n}\n\n/**\n * @internal\n */\nexport function neverReceive({ supply }: EventReceiver.Generic<any>): void {\n  supply.off();\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/fun-events\n */\nimport {\n  eventReceiver,\n  EventReceiver,\n  EventSender,\n  eventSupply,\n  EventSupply,\n  eventSupplyOf,\n  EventSupplyPeer,\n  noEventSupply,\n  OnEvent__symbol,\n} from './base';\nimport { once, share, then, thru, tillOff } from './impl';\nimport { OnEventCallChain } from './passes';\nimport Args = OnEventCallChain.Args;\nimport Out = OnEventCallChain.Out;\n\n/**\n * An [[EventSender]] implementation able to register event receivers.\n *\n * The registered event receiver starts receiving upcoming events until the returned event supply is\n * {@link EventSupply.off cut off}.\n *\n * Contains additional event processing methods.\n *\n * @category Core\n * @typeparam E  An event type. This is a list of event receiver parameter types.\n */\nexport class OnEvent<E extends any[]> implements EventSender<E> {\n\n  /**\n   * Generic event receiver registration function. It will be called on each receiver registration,\n   * unless the receiver's {@link EventReceiver.Generic.supply event supply} is cut off already.\n   */\n  protected readonly _on: (receiver: EventReceiver.Generic<E>) => void;\n\n  /**\n   * Constructs [[OnEvent]] instance.\n   *\n   * @param on  Generic event receiver registration function. It will be called on each receiver registration,\n   * unless the receiver's {@link EventReceiver.Generic.supply event supply} is cut off already.\n   */\n  constructor(on: (receiver: EventReceiver.Generic<E>) => void) {\n    this._on = on;\n  }\n\n  /**\n   * Event receiver registration function of this sender.\n   *\n   * Delegates to [[OnEvent.to]] method.\n   */\n  get F(): OnEvent.Fn<E> {\n    return this.to.bind(this);\n  }\n\n  [OnEvent__symbol](): this {\n    return this;\n  }\n\n  /**\n   * Returns a reference to itself.\n   *\n   * @returns `this` instance.\n   */\n  to(): this;\n\n  /**\n   * Starts sending events to the given `receiver`.\n   *\n   * @param receiver  Target receiver of events.\n   *\n   * @returns A supply of events from this sender to the given `receiver`.\n   */\n  to(receiver: EventReceiver<E>): EventSupply;\n\n  /**\n   * Either starts sending events to the given `receiver`, or returns a reference to itself.\n   *\n   * @param receiver  Target receiver of events.\n   *\n   * @returns Either a supply of events from this sender to the given `receiver`, or `this` instance when `receiver`\n   * is omitted.\n   */\n  to(receiver?: EventReceiver<E>): this | EventSupply;\n\n  to(receiver?: EventReceiver<E>): this | EventSupply {\n    if (!receiver) {\n      return this;\n    }\n\n    const generic = eventReceiver(receiver);\n    const { supply } = generic;\n\n    if (!supply.isOff) {\n      this._on(generic);\n    }\n\n    return supply;\n  }\n\n  /**\n   * Attaches callbacks to the next event and/or supply cut off reason.\n   *\n   * This method makes event sender act as promise-like for the first parameter of the next event. Thus it is possible\n   * e.g. to use it in `await` expression.\n   *\n   * @param onEvent  The callback to execute when next event received.\n   * @param onCutOff  The callback to execute when supply is cut off before the next event received.\n   *\n   * @returns A Promise for the next event.\n   */\n  then<TResult1 = E extends [infer F, ...any[]] ? F : undefined, TResult2 = never>(\n      onEvent?: ((...event: E) => TResult1 | PromiseLike<TResult1>) | undefined | null,\n      onCutOff?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null,\n  ): Promise<TResult1 | TResult2> {\n    return then(this, onEvent, onCutOff);\n  }\n\n  /**\n   * Builds an [[OnEvent]] sender of events originated from this one that stops sending them to registered receiver\n   * after the first one.\n   *\n   * @returns Event sender.\n   */\n  once(): OnEvent<E>;\n\n  /**\n   * Registers a receiver of events originated from this sender that stops receiving them after the first one.\n   *\n   * @param receiver  A receiver of events to register.\n   *\n   * @returns A supply of event.\n   */\n  once(receiver: EventReceiver<E>): EventSupply;\n\n  once(receiver?: EventReceiver<E>): OnEvent<E> | EventSupply {\n    return (this.once = onEventBy(once(this)).F)(receiver);\n  }\n\n  /**\n   * Builds an [[OnEvent]] sender that sends events from this one until the required `supply` is cut off.\n   *\n   * The outgoing events supply will be cut off once incoming event supply does. Unless a second supply passed in.\n   * In the latter case that supply will be cut off instead.\n   *\n   * @param required  A peer of required event supply.\n   * @param dependentSupply  The supply to cut off on cutting off the incoming events supply.\n   *\n   * @returns New event sender.\n   */\n  tillOff(required: EventSupplyPeer, dependentSupply?: EventSupply): OnEvent<E> {\n    return onEventBy(tillOff(this, required, dependentSupply));\n  }\n\n  /**\n   * Consumes events.\n   *\n   * @param consume  A function consuming events. This function may return a {@link EventSupplyPeer peer of event\n   * supply} when registers a nested event receiver. This supply will be cut off on new event, unless returned again.\n   *\n   * @returns An event supply that will stop consuming events once {@link EventSupply.off cut off}.\n   */\n  consume(consume: (...event: E) => EventSupplyPeer | void | undefined): EventSupply {\n\n    let consumerSupply = noEventSupply();\n\n    // Do not use `.cuts()` here as `consumerSupply` is mutable\n    const supply = eventSupply(reason => consumerSupply.off(reason));\n\n    this.to({\n      supply,\n      receive(_ctx, ...event: E) {\n\n        const prevSupply = consumerSupply;\n\n        try {\n          consumerSupply = eventSupplyOf(consume(...event) || noEventSupply());\n        } finally {\n          if (consumerSupply !== prevSupply) {\n            prevSupply.off();\n          }\n        }\n      },\n    });\n\n    return supply;\n  }\n\n  /**\n   * Constructs an [[OnEvent]] sender that shares events supply among all registered receivers.\n   *\n   * The created sender receives events from this one and sends to registered receivers. The shared sender registers\n   * a receiver in this one only once, when first receiver registered. And cuts off original events supply once all\n   * supplies do.\n   *\n   * @returns An [[OnEvent]] sender sharing a common supply of events originated from this sender.\n   */\n  share(): OnEvent<E> {\n    return onEventBy(share(this));\n  }\n\n  /**\n   * Constructs an [[OnEvent]] sender of original events passed trough the chain of transformations.\n   *\n   * The passes are preformed by `@proc7ts/call-thru` library. The event receivers registered by resulting event sender\n   * are called by the last pass in chain. Thus they can be e.g. filtered out or called multiple times.\n   *\n   * @returns An [[OnEvent]] sender of events transformed with provided passes. The returned sender shares the supply\n   * of transformed events among receivers.\n   */\n  thru<\n      Return1,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n  ): OnEvent<Out<Return1>>;\n\n  thru<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n  ): OnEvent<Out<Return2>>;\n\n  thru<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n  ): OnEvent<Out<Return3>>;\n\n  thru<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n  ): OnEvent<Out<Return3>>;\n\n  thru<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n  ): OnEvent<Out<Return3>>;\n\n  thru<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      Args6 extends Args<Return5>, Return6,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n      pass6: (this: void, ...args: Args6) => Return6,\n  ): OnEvent<Out<Return3>>;\n\n  thru<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      Args6 extends Args<Return5>, Return6,\n      Args7 extends Args<Return6>, Return7,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n      pass6: (this: void, ...args: Args6) => Return6,\n      pass7: (this: void, ...args: Args7) => Return7,\n  ): OnEvent<Out<Return3>>;\n\n  thru<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      Args6 extends Args<Return5>, Return6,\n      Args7 extends Args<Return6>, Return7,\n      Args8 extends Args<Return7>, Return8,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n      pass6: (this: void, ...args: Args6) => Return6,\n      pass7: (this: void, ...args: Args7) => Return7,\n      pass8: (this: void, ...args: Args8) => Return8,\n  ): OnEvent<Out<Return3>>;\n\n  thru<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      Args6 extends Args<Return5>, Return6,\n      Args7 extends Args<Return6>, Return7,\n      Args8 extends Args<Return7>, Return8,\n      Args9 extends Args<Return8>, Return9,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n      pass6: (this: void, ...args: Args6) => Return6,\n      pass7: (this: void, ...args: Args7) => Return7,\n      pass8: (this: void, ...args: Args8) => Return8,\n      pass9: (this: void, ...args: Args9) => Return9,\n  ): OnEvent<Out<Return3>>;\n\n  thru<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      Args6 extends Args<Return5>, Return6,\n      Args7 extends Args<Return6>, Return7,\n      Args8 extends Args<Return7>, Return8,\n      Args9 extends Args<Return8>, Return9,\n      Args10 extends Args<Return9>, Return10,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n      pass6: (this: void, ...args: Args6) => Return6,\n      pass7: (this: void, ...args: Args7) => Return7,\n      pass8: (this: void, ...args: Args8) => Return8,\n      pass9: (this: void, ...args: Args9) => Return9,\n      pass10: (this: void, ...args: Args10) => Return10,\n  ): OnEvent<Out<Return3>>;\n\n  thru<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      Args6 extends Args<Return5>, Return6,\n      Args7 extends Args<Return6>, Return7,\n      Args8 extends Args<Return7>, Return8,\n      Args9 extends Args<Return8>, Return9,\n      Args10 extends Args<Return9>, Return10,\n      Args11 extends Args<Return10>, Return11,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n      pass6: (this: void, ...args: Args6) => Return6,\n      pass7: (this: void, ...args: Args7) => Return7,\n      pass8: (this: void, ...args: Args8) => Return8,\n      pass9: (this: void, ...args: Args9) => Return9,\n      pass10: (this: void, ...args: Args10) => Return10,\n      pass11: (this: void, ...args: Args11) => Return11,\n  ): OnEvent<Out<Return3>>;\n\n  thru<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      Args6 extends Args<Return5>, Return6,\n      Args7 extends Args<Return6>, Return7,\n      Args8 extends Args<Return7>, Return8,\n      Args9 extends Args<Return8>, Return9,\n      Args10 extends Args<Return9>, Return10,\n      Args11 extends Args<Return10>, Return11,\n      Args12 extends Args<Return11>, Return12,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n      pass6: (this: void, ...args: Args6) => Return6,\n      pass7: (this: void, ...args: Args7) => Return7,\n      pass8: (this: void, ...args: Args8) => Return8,\n      pass9: (this: void, ...args: Args9) => Return9,\n      pass10: (this: void, ...args: Args10) => Return10,\n      pass11: (this: void, ...args: Args11) => Return11,\n      pass12: (this: void, ...args: Args12) => Return12,\n  ): OnEvent<Out<Return3>>;\n\n  thru<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      Args6 extends Args<Return5>, Return6,\n      Args7 extends Args<Return6>, Return7,\n      Args8 extends Args<Return7>, Return8,\n      Args9 extends Args<Return8>, Return9,\n      Args10 extends Args<Return9>, Return10,\n      Args11 extends Args<Return10>, Return11,\n      Args12 extends Args<Return11>, Return12,\n      Args13 extends Args<Return12>, Return13,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n      pass6: (this: void, ...args: Args6) => Return6,\n      pass7: (this: void, ...args: Args7) => Return7,\n      pass8: (this: void, ...args: Args8) => Return8,\n      pass9: (this: void, ...args: Args9) => Return9,\n      pass10: (this: void, ...args: Args10) => Return10,\n      pass11: (this: void, ...args: Args11) => Return11,\n      pass12: (this: void, ...args: Args12) => Return12,\n      pass13: (this: void, ...args: Args13) => Return13,\n  ): OnEvent<Out<Return3>>;\n\n  thru(...passes: any[]): OnEvent<any[]> {\n    return (this as any).thru_(...passes).share();\n  }\n\n  /**\n   * Constructs an [[OnEvent]] sender of original events passed trough the chain of transformations without sharing\n   * the transformed events supply.\n   *\n   * This method does the same as [[OnEvent.thru]] one, except it does not share the supply of transformed events\n   * among receivers. This may be useful e.g. when the result will be further transformed anyway. It is wise to\n   * {@link share share} the supply of events from final result in this case.\n   *\n   * @returns An [[OnEvent]] sender of events transformed with provided passes.\n   */\n  thru_<\n      Return1,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n  ): OnEvent<Out<Return1>>;\n\n  thru_<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n  ): OnEvent<Out<Return2>>;\n\n  thru_<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n  ): OnEvent<Out<Return3>>;\n\n  thru_<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n  ): OnEvent<Out<Return3>>;\n\n  thru_<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n  ): OnEvent<Out<Return3>>;\n\n  thru_<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      Args6 extends Args<Return5>, Return6,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n      pass6: (this: void, ...args: Args6) => Return6,\n  ): OnEvent<Out<Return3>>;\n\n  thru_<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      Args6 extends Args<Return5>, Return6,\n      Args7 extends Args<Return6>, Return7,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n      pass6: (this: void, ...args: Args6) => Return6,\n      pass7: (this: void, ...args: Args7) => Return7,\n  ): OnEvent<Out<Return3>>;\n\n  thru_<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      Args6 extends Args<Return5>, Return6,\n      Args7 extends Args<Return6>, Return7,\n      Args8 extends Args<Return7>, Return8,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n      pass6: (this: void, ...args: Args6) => Return6,\n      pass7: (this: void, ...args: Args7) => Return7,\n      pass8: (this: void, ...args: Args8) => Return8,\n  ): OnEvent<Out<Return3>>;\n\n  thru_<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      Args6 extends Args<Return5>, Return6,\n      Args7 extends Args<Return6>, Return7,\n      Args8 extends Args<Return7>, Return8,\n      Args9 extends Args<Return8>, Return9,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n      pass6: (this: void, ...args: Args6) => Return6,\n      pass7: (this: void, ...args: Args7) => Return7,\n      pass8: (this: void, ...args: Args8) => Return8,\n      pass9: (this: void, ...args: Args9) => Return9,\n  ): OnEvent<Out<Return3>>;\n\n  thru_<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      Args6 extends Args<Return5>, Return6,\n      Args7 extends Args<Return6>, Return7,\n      Args8 extends Args<Return7>, Return8,\n      Args9 extends Args<Return8>, Return9,\n      Args10 extends Args<Return9>, Return10,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n      pass6: (this: void, ...args: Args6) => Return6,\n      pass7: (this: void, ...args: Args7) => Return7,\n      pass8: (this: void, ...args: Args8) => Return8,\n      pass9: (this: void, ...args: Args9) => Return9,\n      pass10: (this: void, ...args: Args10) => Return10,\n  ): OnEvent<Out<Return3>>;\n\n  thru_<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      Args6 extends Args<Return5>, Return6,\n      Args7 extends Args<Return6>, Return7,\n      Args8 extends Args<Return7>, Return8,\n      Args9 extends Args<Return8>, Return9,\n      Args10 extends Args<Return9>, Return10,\n      Args11 extends Args<Return10>, Return11,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n      pass6: (this: void, ...args: Args6) => Return6,\n      pass7: (this: void, ...args: Args7) => Return7,\n      pass8: (this: void, ...args: Args8) => Return8,\n      pass9: (this: void, ...args: Args9) => Return9,\n      pass10: (this: void, ...args: Args10) => Return10,\n      pass11: (this: void, ...args: Args11) => Return11,\n  ): OnEvent<Out<Return3>>;\n\n  thru_<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      Args6 extends Args<Return5>, Return6,\n      Args7 extends Args<Return6>, Return7,\n      Args8 extends Args<Return7>, Return8,\n      Args9 extends Args<Return8>, Return9,\n      Args10 extends Args<Return9>, Return10,\n      Args11 extends Args<Return10>, Return11,\n      Args12 extends Args<Return11>, Return12,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n      pass6: (this: void, ...args: Args6) => Return6,\n      pass7: (this: void, ...args: Args7) => Return7,\n      pass8: (this: void, ...args: Args8) => Return8,\n      pass9: (this: void, ...args: Args9) => Return9,\n      pass10: (this: void, ...args: Args10) => Return10,\n      pass11: (this: void, ...args: Args11) => Return11,\n      pass12: (this: void, ...args: Args12) => Return12,\n  ): OnEvent<Out<Return3>>;\n\n  thru_<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      Args6 extends Args<Return5>, Return6,\n      Args7 extends Args<Return6>, Return7,\n      Args8 extends Args<Return7>, Return8,\n      Args9 extends Args<Return8>, Return9,\n      Args10 extends Args<Return9>, Return10,\n      Args11 extends Args<Return10>, Return11,\n      Args12 extends Args<Return11>, Return12,\n      Args13 extends Args<Return12>, Return13,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n      pass6: (this: void, ...args: Args6) => Return6,\n      pass7: (this: void, ...args: Args7) => Return7,\n      pass8: (this: void, ...args: Args8) => Return8,\n      pass9: (this: void, ...args: Args9) => Return9,\n      pass10: (this: void, ...args: Args10) => Return10,\n      pass11: (this: void, ...args: Args11) => Return11,\n      pass12: (this: void, ...args: Args12) => Return12,\n      pass13: (this: void, ...args: Args13) => Return13,\n  ): OnEvent<Out<Return3>>;\n\n  thru_(...passes: any[]): OnEvent<any[]> {\n    return onEventBy(thru(this, passes));\n  }\n\n}\n\nexport namespace OnEvent {\n\n  /**\n   * A signature of function registering receivers of events sent by event sender.\n   *\n   * When called without parameters it returns an [[OnEvent]] sender. When called with event receiver as parameter\n   * it returns a supply of events from that sender.\n   *\n   * Available as [[OnEvent.F]] property value.\n   *\n   * @typeparam E  An event type. This is a tuple of event receiver parameter types.\n   */\n  export interface Fn<E extends any[]> {\n\n    /**\n     * Returns the event sender.\n     *\n     * @returns [[OnEvent]] sender the events originated from.\n     */\n    (\n        this: void,\n    ): OnEvent<E>;\n\n    /**\n     * Registers a receiver of events sent by the sender.\n     *\n     * @param receiver  A receiver of events to register.\n     *\n     * @returns A supply of events from the sender to the given `receiver`.\n     */\n    (\n        this: void,\n        receiver: EventReceiver<E>,\n    ): EventSupply;\n\n    /**\n     * Either registers a receiver of events sent by the sender, or returns the sender itself.\n     *\n     * @param receiver  A receiver of events to register.\n     *\n     * @returns Either a supply of events from the sender to the given `receiver`, or [[OnEvent]] sender the events\n     * originated from when `receiver` is omitted.\n     */\n    (\n        this: void,\n        receiver?: EventReceiver<E>,\n    ): EventSupply | OnEvent<E>;\n\n  }\n\n}\n\n/**\n * Converts a plain event receiver registration function to [[OnEvent]] sender.\n *\n * @category Core\n * @typeparam E  An event type. This is a list of event receiver parameter types.\n * @param register  Generic event receiver registration function. It will be called on each receiver registration,\n * unless the receiver's {@link EventReceiver.Generic.supply event supply} is cut off already.\n *\n * @returns An [[OnEvent]] sender registering event receivers with the given `register` function.\n */\nexport function onEventBy<E extends any[]>(\n    register: (this: void, receiver: EventReceiver.Generic<E>) => void,\n): OnEvent<E> {\n  return new OnEvent(register);\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/fun-events\n */\nimport { noop } from '@proc7ts/call-thru';\nimport {\n  AfterEvent__symbol,\n  EventKeeper,\n  eventReceiver,\n  EventReceiver,\n  EventSupply,\n  eventSupply,\n  EventSupplyPeer,\n} from './base';\nimport { once, share, thru, tillOff } from './impl';\nimport { OnEvent } from './on-event';\nimport { OnEventCallChain } from './passes';\nimport Args = OnEventCallChain.Args;\nimport Out = OnEventCallChain.Out;\n\nfunction noEvent(): never {\n  throw new Error('No events to send');\n}\n\n/**\n * An [[EventKeeper]] implementation able to register the receivers of kept and upcoming events.\n *\n * The registered event receiver receives the kept event immediately upon registration, and all upcoming events\n * after that until the returned event supply is cut off.\n *\n * To convert a plain event receiver registration function to [[AfterEvent]] an [[afterEventBy]] function can be used.\n *\n * @category Core\n * @typeparam E  An event type. This is a list of event receiver parameter types.\n */\nexport class AfterEvent<E extends any[]> extends OnEvent<E> implements EventKeeper<E> {\n\n  /**\n   * @internal\n   */\n  private _last?: E;\n\n  /**\n   * @internal\n   */\n  private _rcn = 0;\n\n  /**\n   * @internal\n   */\n  private readonly _or: (this: void) => E;\n\n  /**\n   * Constructs [[AfterEvent]] instance.\n   *\n   * The event constructed by `or` will be sent to the registered first receiver, unless `register` function sends one.\n   *\n   * @param on  Generic event receiver registration function. It will be called on each receiver registration,\n   * unless the receiver's {@link EventReceiver.Generic.supply event supply} is cut off already.\n   * @param or  A function creating fallback event. When omitted, the initial event is expected to be sent by\n   * `register` function. A receiver registration would lead to an error otherwise.\n   */\n  constructor(\n      on: (this: void, receiver: EventReceiver.Generic<E>) => void,\n      or: (this: void) => E = noEvent,\n  ) {\n    super(on);\n    this._or = or;\n  }\n\n  /**\n   * Event receiver registration function of this event keeper.\n   *\n   * Delegates to [[AfterEvent.to]] method.\n   */\n  get F(): AfterEvent.Fn<E> {\n    return this.to.bind(this);\n  }\n\n  [AfterEvent__symbol](): this {\n    return this;\n  }\n\n  /**\n   * Returns a reference to itself.\n   *\n   * @returns `this` instance.\n   */\n  to(): this;\n\n  /**\n   * Starts sending events to the given `receiver`.\n   *\n   * @param receiver  Target receiver of events.\n   *\n   * @returns A supply of events from this keeper to the given `receiver`.\n   */\n  to(receiver: EventReceiver<E>): EventSupply;\n\n  /**\n   * Either starts sending events to the given `receiver`, or returns a reference to itself.\n   *\n   * @param receiver  Target receiver of events.\n   *\n   * @returns Either a supply of events from this keeper to the given `receiver`, or `this` instance when `receiver`\n   * is omitted.\n   */\n  to(receiver?: EventReceiver<E>): this | EventSupply;\n\n  to(receiver?: EventReceiver<E>): this | EventSupply {\n    if (!receiver) {\n      return this;\n    }\n\n    let dest: (context: EventReceiver.Context<E>, ...event: E) => void = noop;\n    const generic = eventReceiver(receiver);\n\n    if (generic.supply.isOff) {\n      return generic.supply;\n    }\n\n    const supply = eventSupply().needs(generic.supply);\n    let reported = false;\n\n    this._on({\n      supply,\n      receive: (context, ...event: E) => {\n        reported = true;\n        this._last = event;\n        dest(context, ...event);\n      },\n    });\n    ++this._rcn;\n\n    if (!supply.isOff || reported) {\n      generic.receive(\n          {\n            onRecurrent(recurrent) {\n              dest = (_context, ...event) => recurrent(...event);\n            },\n          },\n          ...(this._last || (this._last = this._or())),\n      );\n      dest = (context, ...event) => generic.receive(context, ...event);\n    }\n\n    supply.whenOff(reason => {\n      if (!--this._rcn) {\n        this._last = undefined;\n      }\n      generic.supply.off(reason);\n    });\n\n    return supply;\n  }\n\n  /**\n   * Builds an [[AfterEvent]] keeper of events originated from this one that stops sending them to registered receiver\n   * after the first one.\n   *\n   * @returns Event keeper.\n   */\n  once(): AfterEvent<E>;\n\n  /**\n   * Registers a receiver of events originated from this keeper that stops receiving them after the first one.\n   *\n   * @param receiver  A receiver of events to register.\n   *\n   * @returns A supply of event.\n   */\n  once(receiver: EventReceiver<E>): EventSupply;\n\n  once(receiver?: EventReceiver<E>): AfterEvent<E> | EventSupply {\n    return (this.once = afterEventBy(once(this)).F)(receiver);\n  }\n\n  /**\n   * Builds an [[AfterEvent]] keeper that sends events from this one until the required `supply` is cut off.\n   *\n   * The outgoing events supply will be cut off once incoming event supply does. Unless a second supply passed in.\n   * In the latter case that supply will be cut off instead.\n   *\n   * @param required  A peer of required event supply.\n   * @param dependentSupply  The supply to cut off on cutting off the incoming events supply.\n   *\n   * @returns New event keeper.\n   */\n  tillOff(required: EventSupplyPeer, dependentSupply?: EventSupply): AfterEvent<E> {\n    return afterEventBy(tillOff(this, required, dependentSupply));\n  }\n\n  /**\n   * Constructs an [[AfterEvent]] keeper that shares events supply among all registered receivers.\n   *\n   * The created keeper receives events from this one and sends to registered receivers. The shared keeper registers\n   * a receiver in this one only once, when first receiver registered. And cuts off original events supply once all\n   * event supplies do.\n   *\n   * @returns An [[AfterEvent]] keeper sharing a common supply of events originating from this keeper.\n   */\n  share(): AfterEvent<E> {\n    return afterEventBy(share(this));\n  }\n\n  /**\n   * Constructs an [[AfterEvent]] keeper of original events passed trough the chain of transformations.\n   *\n   * This does the same as [[thru]] method, but return [[AfterEvent]] keeper instead of [[OnEvent]] sender. This can\n   * not be done automatically, as not every transformation results to [[EventKeeper]]. E.g. when some events\n   * are filtered out.\n   *\n   * The passes are preformed by `@proc7ts/call-thru` library. The event receivers registered by resulting event keeper\n   * are called by the last pass in chain. Thus they can be e.g. filtered out or called multiple times.\n   *\n   * @returns An [[AfterEvent]] keeper of events transformed with provided passes. The returned keeper shares the supply\n   * of transformed events among receivers.\n   */\n  keepThru<\n      Return1,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n  ): AfterEvent<Out<Return1>>;\n\n  keepThru<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n  ): AfterEvent<Out<Return2>>;\n\n  keepThru<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n  ): AfterEvent<Out<Return3>>;\n\n  keepThru<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n  ): AfterEvent<Out<Return3>>;\n\n  keepThru<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n  ): AfterEvent<Out<Return3>>;\n\n  keepThru<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      Args6 extends Args<Return5>, Return6,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n      pass6: (this: void, ...args: Args6) => Return6,\n  ): AfterEvent<Out<Return3>>;\n\n  keepThru<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      Args6 extends Args<Return5>, Return6,\n      Args7 extends Args<Return6>, Return7,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n      pass6: (this: void, ...args: Args6) => Return6,\n      pass7: (this: void, ...args: Args7) => Return7,\n  ): AfterEvent<Out<Return3>>;\n\n  keepThru<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      Args6 extends Args<Return5>, Return6,\n      Args7 extends Args<Return6>, Return7,\n      Args8 extends Args<Return7>, Return8,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n      pass6: (this: void, ...args: Args6) => Return6,\n      pass7: (this: void, ...args: Args7) => Return7,\n      pass8: (this: void, ...args: Args8) => Return8,\n  ): AfterEvent<Out<Return3>>;\n\n  keepThru<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      Args6 extends Args<Return5>, Return6,\n      Args7 extends Args<Return6>, Return7,\n      Args8 extends Args<Return7>, Return8,\n      Args9 extends Args<Return8>, Return9,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n      pass6: (this: void, ...args: Args6) => Return6,\n      pass7: (this: void, ...args: Args7) => Return7,\n      pass8: (this: void, ...args: Args8) => Return8,\n      pass9: (this: void, ...args: Args9) => Return9,\n  ): AfterEvent<Out<Return3>>;\n\n  keepThru<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      Args6 extends Args<Return5>, Return6,\n      Args7 extends Args<Return6>, Return7,\n      Args8 extends Args<Return7>, Return8,\n      Args9 extends Args<Return8>, Return9,\n      Args10 extends Args<Return9>, Return10,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n      pass6: (this: void, ...args: Args6) => Return6,\n      pass7: (this: void, ...args: Args7) => Return7,\n      pass8: (this: void, ...args: Args8) => Return8,\n      pass9: (this: void, ...args: Args9) => Return9,\n      pass10: (this: void, ...args: Args10) => Return10,\n  ): AfterEvent<Out<Return3>>;\n\n  keepThru<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      Args6 extends Args<Return5>, Return6,\n      Args7 extends Args<Return6>, Return7,\n      Args8 extends Args<Return7>, Return8,\n      Args9 extends Args<Return8>, Return9,\n      Args10 extends Args<Return9>, Return10,\n      Args11 extends Args<Return10>, Return11,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n      pass6: (this: void, ...args: Args6) => Return6,\n      pass7: (this: void, ...args: Args7) => Return7,\n      pass8: (this: void, ...args: Args8) => Return8,\n      pass9: (this: void, ...args: Args9) => Return9,\n      pass10: (this: void, ...args: Args10) => Return10,\n      pass11: (this: void, ...args: Args11) => Return11,\n  ): AfterEvent<Out<Return3>>;\n\n  keepThru<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      Args6 extends Args<Return5>, Return6,\n      Args7 extends Args<Return6>, Return7,\n      Args8 extends Args<Return7>, Return8,\n      Args9 extends Args<Return8>, Return9,\n      Args10 extends Args<Return9>, Return10,\n      Args11 extends Args<Return10>, Return11,\n      Args12 extends Args<Return11>, Return12,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n      pass6: (this: void, ...args: Args6) => Return6,\n      pass7: (this: void, ...args: Args7) => Return7,\n      pass8: (this: void, ...args: Args8) => Return8,\n      pass9: (this: void, ...args: Args9) => Return9,\n      pass10: (this: void, ...args: Args10) => Return10,\n      pass11: (this: void, ...args: Args11) => Return11,\n      pass12: (this: void, ...args: Args12) => Return12,\n  ): AfterEvent<Out<Return3>>;\n\n  keepThru<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      Args6 extends Args<Return5>, Return6,\n      Args7 extends Args<Return6>, Return7,\n      Args8 extends Args<Return7>, Return8,\n      Args9 extends Args<Return8>, Return9,\n      Args10 extends Args<Return9>, Return10,\n      Args11 extends Args<Return10>, Return11,\n      Args12 extends Args<Return11>, Return12,\n      Args13 extends Args<Return12>, Return13,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n      pass6: (this: void, ...args: Args6) => Return6,\n      pass7: (this: void, ...args: Args7) => Return7,\n      pass8: (this: void, ...args: Args8) => Return8,\n      pass9: (this: void, ...args: Args9) => Return9,\n      pass10: (this: void, ...args: Args10) => Return10,\n      pass11: (this: void, ...args: Args11) => Return11,\n      pass12: (this: void, ...args: Args12) => Return12,\n      pass13: (this: void, ...args: Args13) => Return13,\n  ): AfterEvent<Out<Return3>>;\n\n  keepThru(...passes: any[]): AfterEvent<any[]> {\n    return (this as any).keepThru_(...passes).share();\n  }\n\n  /**\n   * Constructs an [[AfterEvent]] keeper of original events passed trough the chain of transformations without sharing\n   * the transformed events supply.\n   *\n   * This method does the same as [[AfterEvent.keepThru]] one, except it does not share the supply of transformed\n   * events among receivers. This may be useful e.g. when the result will be further transformed anyway.\n   * It is wise to {@link AfterEvent.share share} the supply of events from final result in this case.\n   *\n   * @returns An [[AfterEvent]] keeper of events transformed with provided passes.\n   */\n  keepThru_<\n      Return1,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n  ): AfterEvent<Out<Return1>>;\n\n  keepThru_<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n  ): AfterEvent<Out<Return2>>;\n\n  keepThru_<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n  ): AfterEvent<Out<Return3>>;\n\n  keepThru_<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n  ): AfterEvent<Out<Return3>>;\n\n  keepThru_<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n  ): AfterEvent<Out<Return3>>;\n\n  keepThru_<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      Args6 extends Args<Return5>, Return6,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n      pass6: (this: void, ...args: Args6) => Return6,\n  ): AfterEvent<Out<Return3>>;\n\n  keepThru_<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      Args6 extends Args<Return5>, Return6,\n      Args7 extends Args<Return6>, Return7,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n      pass6: (this: void, ...args: Args6) => Return6,\n      pass7: (this: void, ...args: Args7) => Return7,\n  ): AfterEvent<Out<Return3>>;\n\n  keepThru_<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      Args6 extends Args<Return5>, Return6,\n      Args7 extends Args<Return6>, Return7,\n      Args8 extends Args<Return7>, Return8,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n      pass6: (this: void, ...args: Args6) => Return6,\n      pass7: (this: void, ...args: Args7) => Return7,\n      pass8: (this: void, ...args: Args8) => Return8,\n  ): AfterEvent<Out<Return3>>;\n\n  keepThru_<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      Args6 extends Args<Return5>, Return6,\n      Args7 extends Args<Return6>, Return7,\n      Args8 extends Args<Return7>, Return8,\n      Args9 extends Args<Return8>, Return9,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n      pass6: (this: void, ...args: Args6) => Return6,\n      pass7: (this: void, ...args: Args7) => Return7,\n      pass8: (this: void, ...args: Args8) => Return8,\n      pass9: (this: void, ...args: Args9) => Return9,\n  ): AfterEvent<Out<Return3>>;\n\n  keepThru_<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      Args6 extends Args<Return5>, Return6,\n      Args7 extends Args<Return6>, Return7,\n      Args8 extends Args<Return7>, Return8,\n      Args9 extends Args<Return8>, Return9,\n      Args10 extends Args<Return9>, Return10,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n      pass6: (this: void, ...args: Args6) => Return6,\n      pass7: (this: void, ...args: Args7) => Return7,\n      pass8: (this: void, ...args: Args8) => Return8,\n      pass9: (this: void, ...args: Args9) => Return9,\n      pass10: (this: void, ...args: Args10) => Return10,\n  ): AfterEvent<Out<Return3>>;\n\n  keepThru_<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      Args6 extends Args<Return5>, Return6,\n      Args7 extends Args<Return6>, Return7,\n      Args8 extends Args<Return7>, Return8,\n      Args9 extends Args<Return8>, Return9,\n      Args10 extends Args<Return9>, Return10,\n      Args11 extends Args<Return10>, Return11,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n      pass6: (this: void, ...args: Args6) => Return6,\n      pass7: (this: void, ...args: Args7) => Return7,\n      pass8: (this: void, ...args: Args8) => Return8,\n      pass9: (this: void, ...args: Args9) => Return9,\n      pass10: (this: void, ...args: Args10) => Return10,\n      pass11: (this: void, ...args: Args11) => Return11,\n  ): AfterEvent<Out<Return3>>;\n\n  keepThru_<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      Args6 extends Args<Return5>, Return6,\n      Args7 extends Args<Return6>, Return7,\n      Args8 extends Args<Return7>, Return8,\n      Args9 extends Args<Return8>, Return9,\n      Args10 extends Args<Return9>, Return10,\n      Args11 extends Args<Return10>, Return11,\n      Args12 extends Args<Return11>, Return12,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n      pass6: (this: void, ...args: Args6) => Return6,\n      pass7: (this: void, ...args: Args7) => Return7,\n      pass8: (this: void, ...args: Args8) => Return8,\n      pass9: (this: void, ...args: Args9) => Return9,\n      pass10: (this: void, ...args: Args10) => Return10,\n      pass11: (this: void, ...args: Args11) => Return11,\n      pass12: (this: void, ...args: Args12) => Return12,\n  ): AfterEvent<Out<Return3>>;\n\n  keepThru_<\n      Return1,\n      Args2 extends Args<Return1>, Return2,\n      Args3 extends Args<Return2>, Return3,\n      Args4 extends Args<Return3>, Return4,\n      Args5 extends Args<Return4>, Return5,\n      Args6 extends Args<Return5>, Return6,\n      Args7 extends Args<Return6>, Return7,\n      Args8 extends Args<Return7>, Return8,\n      Args9 extends Args<Return8>, Return9,\n      Args10 extends Args<Return9>, Return10,\n      Args11 extends Args<Return10>, Return11,\n      Args12 extends Args<Return11>, Return12,\n      Args13 extends Args<Return12>, Return13,\n      >(\n      pass1: (this: void, ...args: E) => Return1,\n      pass2: (this: void, ...args: Args2) => Return2,\n      pass3: (this: void, ...args: Args3) => Return3,\n      pass4: (this: void, ...args: Args4) => Return4,\n      pass5: (this: void, ...args: Args5) => Return5,\n      pass6: (this: void, ...args: Args6) => Return6,\n      pass7: (this: void, ...args: Args7) => Return7,\n      pass8: (this: void, ...args: Args8) => Return8,\n      pass9: (this: void, ...args: Args9) => Return9,\n      pass10: (this: void, ...args: Args10) => Return10,\n      pass11: (this: void, ...args: Args11) => Return11,\n      pass12: (this: void, ...args: Args12) => Return12,\n      pass13: (this: void, ...args: Args13) => Return13,\n  ): AfterEvent<Out<Return3>>;\n\n  keepThru_(...passes: any[]): AfterEvent<any[]> {\n    return afterEventBy(thru(this, passes as any));\n  }\n\n}\n\nexport namespace AfterEvent {\n\n  /**\n   * A signature of function registering receivers of events sent by event keeper.\n   *\n   * When called without parameters it returns an [[AfterEvent]] keeper. When called with event receiver as parameter\n   * it returns a supply of events from that keeper.\n   *\n   * Available as [[AfterEvent.F]] property value.\n   *\n   * @typeparam E  An event type. This is a tuple of event receiver parameter types.\n   */\n  export interface Fn<E extends any[]> {\n\n    /**\n     * Returns the event keeper.\n     *\n     * @returns [[AfterEvent]] keeper the events originated from.\n     */\n    (\n        this: void,\n    ): AfterEvent<E>;\n\n    /**\n     * Registers a receiver of events sent by the keeper.\n     *\n     * @param receiver  A receiver of events to register.\n     *\n     * @returns A supply of events from the keeper to the given `receiver`.\n     */\n    (\n        this: void,\n        receiver: EventReceiver<E>,\n    ): EventSupply;\n\n    /**\n     * Either registers a receiver of events sent by the keeper, or returns the keeper itself.\n     *\n     * @param receiver  A receiver of events to register.\n     *\n     * @returns Either a supply of events from the keeper to the given `receiver`, or [[AfterEvent]] keeper the events\n     * originated from when `receiver` is omitted.\n     */\n    (\n        this: void,\n        receiver?: EventReceiver<E>,\n    ): EventSupply | AfterEvent<E>;\n  }\n\n}\n\n/**\n * Converts a plain event receiver registration function to [[AfterEvent]] keeper with a fallback.\n *\n * The event constructed by `fallback` will be sent to the registered first receiver, unless `register` function sends\n * one.\n *\n * @category Core\n * @typeparam E  An event type. This is a list of event receiver parameter types.\n * @param register  Generic event receiver registration function. It will be called on each receiver registration,\n * unless the receiver's {@link EventReceiver.Generic.supply event supply} is cut off already.\n * @param fallback  A function creating fallback event. When omitted, the initial event is expected to be sent by\n * `register` function. A receiver registration would lead to an error otherwise.\n *\n * @returns An [[AfterEvent]] keeper registering event receivers with the given `register` function.\n */\nexport function afterEventBy<E extends any[]>(\n    register: (this: void, receiver: EventReceiver.Generic<E>) => void,\n    fallback?: (this: void) => E,\n): AfterEvent<E> {\n  return new AfterEvent(register, fallback);\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/fun-events\n */\nimport { AfterEvent, afterEventBy } from '../after-event';\nimport { EventSender, OnEvent__symbol } from '../base';\n\n/**\n * Builds an [[AfterEvent]] keeper of events sent by the given `sender`.\n *\n * The event generated by `fallback` will be sent to the registered first receiver, unless `register` function sends\n * one.\n *\n * @category Core\n * @typeparam E  An event type. This is a list of event receiver parameter types.\n * @param sender  An event sender.\n * @param fallback  A function creating fallback event. When omitted, the initial event is expected to be sent by\n * `register` function. A receiver registration would lead to an error otherwise.\n *\n * @returns An [[AfterEvent]] keeper of events either originated from the given `sender`, or `initial` one.\n */\nexport function afterSent<E extends any[]>(\n    sender: EventSender<E>,\n    fallback?: (this: void) => E,\n): AfterEvent<E> {\n  return afterEventBy(receiver => sender[OnEvent__symbol]().to(receiver), fallback);\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/fun-events\n */\nimport { AfterEvent } from '../after-event';\nimport { AfterEvent__symbol, EventKeeper, EventSupplier, isEventKeeper } from '../base';\nimport { afterSent } from './after-sent';\n\n/**\n * Builds an [[AfterEvent]] keeper of events sent by the given `keeper`.\n *\n * @category Core\n * @typeparam E  An event type. This is a list of event receiver parameter types.\n * @param keeper  A keeper of events.\n *\n * @returns An [[AfterEvent]] keeper of events originated from the given `keeper`.\n */\nexport function afterSupplied<E extends any[]>(keeper: EventKeeper<E>): AfterEvent<E>;\n\n/**\n * Builds an [[AfterEvent]] keeper of events sent by the given `supplier`.\n *\n * The event generated by `fallback` will be sent to the registered first receiver, unless `supplier` sends one.\n *\n * This is a synonym of [[afterSent]], unless `supplier` is an [[EventKeeper]].\n *\n * @typeparam E  An event type. This is a list of event receiver parameter types.\n * @param supplier  An event supplier.\n * @param fallback  A function creating fallback event. When omitted, the initial event is expected to be sent by\n * `supplier`. A receiver registration would lead to an error otherwise.\n *\n * @returns An [[AfterEvent]] keeper of events either originated from the given `supplier`, or `initial` one.\n */\nexport function afterSupplied<E extends any[]>(\n    supplier: EventSupplier<E>,\n    fallback?: (this: void) => E,\n): AfterEvent<E>;\n\nexport function afterSupplied<E extends any[]>(\n    supplier: EventSupplier<E>,\n    fallback?: (this: void) => E,\n): AfterEvent<E> {\n  return isEventKeeper(supplier) ? supplier[AfterEvent__symbol]() : afterSent(supplier, fallback);\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/fun-events\n */\nimport { noop } from '@proc7ts/call-thru';\nimport { AfterEvent, afterEventBy } from '../after-event';\nimport { AfterEvent__symbol, EventKeeper, EventReceiver, sendEventsTo } from '../base';\nimport { afterSupplied } from './after-supplied';\n\n/**\n * Builds an [[AfterEvent]] keeper of events sent by all event keepers in `sources` map.\n *\n * @category Core\n * @typeparam S  A type of `sources` map.\n * @param sources  A map of named event keepers the events are originated from.\n *\n * @returns An event keeper sending a map of events received from each source keeper. Each event in this map has the\n * same key as its source keeper in `sources`.\n */\nexport function afterAll<S extends { readonly [key: string]: EventKeeper<any> }>(\n    sources: S,\n): AfterEvent<[{ readonly [K in keyof S]: EventKeeper.Event<S[K]> }]> {\n\n  const keys = Object.keys(sources);\n\n  return afterEventBy(registerReceiver, latestEvent).share();\n\n  function registerReceiver(\n      receiver: EventReceiver.Generic<[{ readonly [K in keyof S]: EventKeeper.Event<S[K]> }]>,\n  ): void {\n\n    const { supply } = receiver;\n    const dispatch = sendEventsTo(receiver);\n    let send: () => void = noop;\n    const result: { [K in keyof S]: EventKeeper.Event<S[K]> } = {} as any;\n\n    keys.forEach((key: keyof S) => {\n      supply.needs(sources[key][AfterEvent__symbol]().to((...event) => {\n        result[key] = event;\n        send();\n      }).needs(supply));\n    });\n\n    if (!supply.isOff) {\n      send = () => dispatch(result);\n    }\n  }\n\n  function latestEvent(): [{ readonly [K in keyof S]: EventKeeper.Event<S[K]> }] {\n\n    const result: { [K in keyof S]: EventKeeper.Event<S[K]> } = {} as any;\n\n    keys.forEach(\n        key => afterSupplied(sources[key]).once(\n            (...event) => result[key as keyof S] = event,\n        ),\n    );\n\n    return [result];\n  }\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/fun-events\n */\nimport { noop } from '@proc7ts/call-thru';\nimport { AfterEvent, afterEventBy } from '../after-event';\nimport { AfterEvent__symbol, EventKeeper, EventReceiver, sendEventsTo } from '../base';\nimport { afterSupplied } from './after-supplied';\n\n/**\n * Builds an [[AfterEvent]] keeper of events sent by each of the `sources`.\n *\n * @category Core\n * @typeparam E  A type of events sent by each source.\n * @param sources  An array of source event keepers.\n *\n * @returns An event keeper sending events received from each source keeper. Each event item is an event tuple\n * originated from source keeper under its index in `sources` array.\n */\nexport function afterEach<E extends any[]>(...sources: EventKeeper<E>[]): AfterEvent<E[]> {\n\n  return afterEventBy(registerReceiver, latestEvent).share();\n\n  function registerReceiver(receiver: EventReceiver.Generic<E[]>): void {\n\n    const { supply } = receiver;\n    const dispatch = sendEventsTo(receiver);\n    let send: () => void = noop;\n    const result: E[] = [];\n\n    sources.forEach((source, index) => {\n      supply.needs(source[AfterEvent__symbol]().to((...event) => {\n        result[index] = event;\n        send();\n      }).needs(supply));\n    });\n\n    if (!supply.isOff) {\n      send = () => dispatch(...result);\n    }\n  }\n\n  function latestEvent(): E[] {\n\n    const result: E[] = [];\n\n    sources.forEach(\n        source => afterSupplied(source).once(\n            (...event) => result.push(event),\n        ),\n    );\n\n    return result;\n  }\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/fun-events\n */\nimport { noop, valueProvider } from '@proc7ts/call-thru';\nimport { AfterEvent, afterEventBy } from '../after-event';\n\n/**\n * Builds an [[AfterEvent]] keeper of the given `event`.\n *\n * @category Core\n * @param event  An event that will be sent to all receivers upon registration.\n *\n * @returns An [[AfterEvent]] keeper that always sends the given `event`.\n */\nexport function afterThe<E extends any[]>(...event: E): AfterEvent<E> {\n  return afterEventBy(noop, valueProvider(event));\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/fun-events\n */\nimport { NextCall, nextCall } from '@proc7ts/call-thru';\nimport { EventKeeper } from '../base';\nimport { afterSupplied } from '../keepers';\nimport { OnEventCallChain } from './on-event-call-chain';\n\n/**\n * Builds a next chained call of {@link OnEventCallChain} that calls the next pass with every event supplied by\n * the given keeper.\n *\n * The event supply from the given keeper will be cut off each time the call is applied.\n *\n * This differs from [[nextOnEvent]] when passing supplier implementing both [[EventSender]] and [[EventKeeper]]\n * interfaces such as [[ValueTracker]]. [[nextOnEvent]] would prefer the former, while this one would prefer the latter.\n *\n * @category Core\n * @typeparam E  An event type. This is a tuple of argument types of the next pass.\n * @param keeper  A keeper of events to pass down the chain.\n *\n * @returns Next call passing events from the given `keeper`.\n */\nexport function nextAfterEvent<E extends any[]>(\n    keeper: EventKeeper<E>,\n): NextCall<OnEventCallChain, E> {\n  return nextCall((chain, pass) => chain.onEvent(pass, afterSupplied(keeper)));\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/fun-events\n */\nimport { AfterEvent__symbol, EventSupplier, isEventSender, OnEvent__symbol } from '../base';\nimport { OnEvent } from '../on-event';\n\n/**\n * Builds an [[OnEvent]] sender of events supplied by the given `supplier`.\n *\n * @category Core\n * @typeparam E  An event type. This is a list of event receiver parameter types.\n * @param supplier  An event supplier.\n *\n * @returns An [[OnEvent]] sender of events originated from the given `supplier`.\n */\nexport function onSupplied<E extends any[]>(supplier: EventSupplier<E>): OnEvent<E> {\n  return isEventSender(supplier) ? supplier[OnEvent__symbol]() : supplier[AfterEvent__symbol]();\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/fun-events\n */\nimport { EventReceiver, EventSupplier, eventSupply } from '../base';\nimport { OnEvent, onEventBy } from '../on-event';\nimport { onNever } from './on-never';\nimport { onSupplied } from './on-supplied';\n\n/**\n * Builds an [[OnEvent]] sender of events sent by any of the given `suppliers`.\n *\n * The resulting event supply is cut off as soon as all source supplies do.\n *\n * @category Core\n * @typeparam E  An event type. This is a list of event receiver parameter types.\n * @param suppliers  Original event suppliers.\n *\n * @returns An [[OnEvent]] sender of all supplied events.\n */\nexport function onAny<E extends any[]>(...suppliers: EventSupplier<E>[]): OnEvent<E> {\n  if (!suppliers.length) {\n    return onNever;\n  }\n\n  return onEventBy<E>(receiver => {\n\n    const { supply } = receiver;\n    let remained = suppliers.length;\n    const removeSupplier = (reason?: any): void => {\n      if (!--remained) {\n        supply.off(reason);\n      }\n    };\n    const receive = (context: EventReceiver.Context<E>, ...event: E): void => {\n      receiver.receive(context, ...event);\n    };\n\n    suppliers.forEach(\n        supplier => onSupplied(supplier).to({\n          supply: eventSupply(removeSupplier).needs(supply),\n          receive,\n        }),\n    );\n  }).share();\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/fun-events\n */\nimport { nextArg } from '@proc7ts/call-thru';\nimport { EventSender, eventSupply, sendEventsTo } from '../base';\nimport { OnEvent, onEventBy } from '../on-event';\nimport { onAnyAsync } from './on-any-async';\nimport { onSupplied } from './on-supplied';\n\n/**\n * Builds an [[OnEvent]] sender of asynchronously resolved events originated from the given sender of unresolved events.\n *\n * Receives events or their promises from the given event sender, and sends them once they are resolved in the same\n * order as they have been received. Possibly in batches, e.g. when events resolved out of order.\n *\n * The resulting events supply is cut if some of incoming event promises rejected. In this case the rejection reason\n * is used as a reason to cut off. If incoming events supply is cut off, then the resulting event supply will be cut off\n * too, but only after all incoming events resolved and sent.\n *\n * @category Core\n * @typeparam E  Resolved event type.\n * @param from  Unresolved events sender containing either events or their promises.\n *\n * @returns New `OnEvent` sender of resolved events.\n */\nexport function onAsync<E>(from: EventSender<[PromiseLike<E> | E]>): OnEvent<[E, ...E[]]> {\n  return onEventBy(receiver => {\n\n    const { supply } = receiver;\n    const dispatch = sendEventsTo(receiver);\n\n    const sourceSupply = eventSupply();\n    let numInProcess = 0;\n    const source = onSupplied(from)\n        .tillOff(supply, sourceSupply)\n        .thru_(event => {\n          ++numInProcess;\n          return nextArg(event);\n        });\n    let received: E[] = [];\n    let numSent = 1;\n    let numReceived = 0;\n\n    sourceSupply.whenOff(reason => {\n      if (!numInProcess) {\n        supply.off(reason);\n      }\n    });\n\n    onAnyAsync(source).to({\n      supply,\n      receive(_ctx, event, index) {\n\n        const i = index - numSent;\n\n        received[i] = event;\n        ++numReceived;\n        if (numReceived > i) {\n\n          let toSend: E[];\n\n          if (numReceived === received.length) {\n            // Can send all received events\n            toSend = received;\n            received = [];\n          } else {\n            // Can send events up to `i`\n            toSend = received.splice(0, i + 1);\n          }\n          numSent += toSend.length;\n          numReceived -= toSend.length;\n          numInProcess -= toSend.length;\n\n          dispatch(...(toSend as [E, ...E[]]));\n          if (!numInProcess && sourceSupply.isOff) {\n            receiver.supply.needs(sourceSupply);\n          }\n        }\n      },\n    });\n  });\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/fun-events\n */\nimport { EventSender, OnEvent__symbol, sendEventsTo } from '../base';\nimport { OnEvent, onEventBy } from '../on-event';\n\n/**\n * Builds an [[OnEvent]] sender of any of asynchronously resolved events originated from the given sender of\n * unresolved events.\n *\n * Receives events or their promises from the given event sender, and sends them once they are resolved. The original\n * order of events is not preserved. Instead each resolved event is sent along with its index in original order.\n *\n * The resulting events supply is cut off immediately once unresolved events supply is cut off, or some of incoming\n * event promises rejected. In the latter case the rejection reason is used as a reason to cut off.\n *\n * @category Core\n * @typeparam E  Resolved event type.\n * @param from  Unresolved events sender containing either events or their promises.\n *\n * @returns New `OnEvent` sender of resolved events and their indices in original order starting from `1`.\n */\nexport function onAnyAsync<E>(from: EventSender<[PromiseLike<E> | E]>): OnEvent<[E, number]> {\n  return onEventBy(receiver => {\n\n    const { supply } = receiver;\n    const dispatch = sendEventsTo(receiver);\n\n    let lastIndex = 0;\n\n    from[OnEvent__symbol]().to({\n      supply,\n      receive(_ctx, promise) {\n\n        const index = ++lastIndex;\n\n        Promise.resolve()\n            .then(() => promise)\n            .then(\n                event => dispatch(event, index),\n                reason => supply.off(reason),\n            );\n      },\n    });\n  });\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/fun-events\n */\nimport { EventReceiver } from '../base';\nimport { alwaysReceiveValue, neverReceiveBecause } from '../base/impl';\nimport { OnEvent, onEventBy } from '../on-event';\n\n/**\n * Represents a promise as event sender.\n *\n * When the `promise` resolves successfully the resolved value is sent to registered event receivers. The events\n * supply is {@link EventSupply.off cut off} immediately after that without any reason specified.\n *\n * When the `promise` is rejected the events supply is {@link EventSupply.off cut off} with promise rejection reason.\n *\n * @category Core\n * @param promise  The promise to represent as event sender.\n *\n * @returns An [[OnEvent]] sender of the given `promise` settlement event.\n */\nexport function onPromise<T>(promise: Promise<T>): OnEvent<[T]> {\n\n  let receive = (receiver: EventReceiver.Generic<[T]>): void => {\n    promise.then(() => receive(receiver), () => receive(receiver));\n  };\n\n  promise.then(value => {\n    receive = alwaysReceiveValue(value);\n  }).catch(e => {\n    receive = neverReceiveBecause(e);\n  });\n\n  return onEventBy(receiver => receive(receiver));\n}\n","import { EventReceiver } from '../event-receiver';\nimport { sendEventsTo } from '../send-events-to';\n\n/**\n * @internal\n */\nexport function alwaysReceiveValue<T>(value: T): (receiver: EventReceiver.Generic<[T]>) => void {\n  return receiver => {\n    try {\n      sendEventsTo(receiver)(value);\n      receiver.supply.off();\n    } catch (e) {\n      receiver.supply.off(e);\n    }\n  };\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/fun-events\n */\n/**\n * A path to state or its part. E.g. property value.\n *\n * May consist of one or more property keys.\n *\n * An array consisting of the only one property key is the same as this property key.\n *\n * An empty array is a path to the state itself.\n *\n * @category State Tracking\n */\nexport type StatePath = PropertyKey | StatePath.Normalized;\n\nexport namespace StatePath {\n\n  /**\n   * Normalized state path.\n   *\n   * This is always an array of property keys.\n   */\n  export type Normalized = readonly PropertyKey[];\n\n}\n\n/**\n * Normalizes a state path consisting of single key.\n *\n * @category State Tracking\n * @param key  A path key.\n *\n * @return Normalized state path.\n */\nexport function statePath<K extends PropertyKey>(key: K): [K];\n\n/**\n * Normalizes arbitrary state path. I.e. converts it to array.\n *\n * @param path  Arbitrary state path.\n *\n * @return Normalized state path.\n */\nexport function statePath(path: StatePath): StatePath.Normalized;\n\nexport function statePath(path: StatePath): StatePath.Normalized {\n  return Array.isArray(path) ? path : [path];\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/fun-events\n */\nimport { EventKeeper, EventReceiver, EventSupply, EventSupply__symbol, eventSupplyOf } from '../base';\nimport { OnEvent } from '../on-event';\nimport { EventEmitter } from '../senders';\nimport { ValueTracker } from './value-tracker';\n\n/**\n * @internal\n */\nclass TrackedValue<T> extends ValueTracker<T> {\n\n  private readonly _on = new EventEmitter<[T, T]>();\n\n  constructor(private _it: T) {\n    super();\n  }\n\n  get [EventSupply__symbol](): EventSupply {\n    return eventSupplyOf(this._on);\n  }\n\n  on(): OnEvent<[T, T]>;\n  on(receiver: EventReceiver<[T, T]>): EventSupply;\n  on(receiver?: EventReceiver<[T, T]>): OnEvent<[T, T]> | EventSupply {\n    return (this.on = this._on.on().F)(receiver);\n  }\n\n  get it(): T {\n    return this._it;\n  }\n\n  set it(value: T) {\n\n    const oldValue = this._it;\n\n    if (oldValue !== value) {\n      this._it = value;\n      this._on.send(value, oldValue);\n    }\n  }\n\n}\n\n/**\n * Constructs a value which changes can be tracked.\n *\n * @category Value Tracking\n * @param initial  Initial value.\n *\n * @returns Value tracker instance.\n */\nexport function trackValue<T>(initial: T): ValueTracker<T>;\n\n/**\n * Constructs an optional value which changes can be tracked.\n *\n * @param initial  Initial value.\n *\n * @returns Value tracker instance.\n */\nexport function trackValue<T>(initial?: T): ValueTracker<T | undefined>;\n\nexport function trackValue<T>(initial: T): ValueTracker<T> {\n  return new TrackedValue<T>(initial);\n}\n\n/**\n * Constructs a tracked value updated by the given value `supplier`.\n *\n * If the value is already updated by another supplier, then unbinds from the old one first.\n *\n * Call the [[ValueTracker.byNone]] method to unbind the tracked value from the `source`.\n *\n * Note that explicitly updating the value would override the value received from the `source`.\n *\n * @category Value Tracking\n * @param supplier  The source value keeper.\n *\n * @returns `this` instance.\n */\nexport function trackValueBy<T>(supplier: EventKeeper<[T]>): ValueTracker<T>;\n\n/**\n * Constructs a tracked value updated by value keepers extracted from events sent by the given `supplier`.\n *\n * If the value is already updated by another value supplier, then unbinds from the old one first.\n *\n * Call the [[ValueTracker.byNone]] method to unbind the tracked value from the `source`.\n *\n * Note that explicitly updating the value would override the value received from the `source`.\n *\n * @typeparam S  Source value type.\n * @param supplier  The event keeper to extract value keepers from.\n * @param extract  A function extracting value keeper from event received from `supplier`.\n *\n * @returns `this` instance.\n */\nexport function trackValueBy<T, S extends any[]>(\n    supplier: EventKeeper<S>,\n    extract: (this: void, ...event: S) => EventKeeper<[T]>,\n): ValueTracker<T>;\n\nexport function trackValueBy<T, S extends any[]>(\n    supplier: EventKeeper<S> | EventKeeper<[T]>,\n    extract?: (this: void, ...event: S) => EventKeeper<[T]>,\n): ValueTracker<T> {\n  return (trackValue() as any).by(supplier, extract);\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/namespace-aliaser\n */\nimport { DEFAULT__NS } from './default.ns';\nimport { NamespaceDef } from './namespace';\n\n/**\n * A name qualified with namespace.\n *\n * This can be either:\n * - a simple name string, which means a name in default namespace, or\n * - a name+namespace tuple.\n */\nexport type QualifiedName = string | NameAndNamespace;\n\n/**\n * A local name and namespace tuple.\n *\n * Consists of a local name string and namespace definition this name belongs to.\n */\nexport type NameAndNamespace = readonly [string, NamespaceDef];\n\n/**\n * Checks whether the given `value` is a name+namespace tuple.\n *\n * @param value  A value to check.\n *\n * @returns `true` if the given `value` is an array consisting of exactly two elements, where the first element is a\n * non-empty string, and the second element is an instance of [[NamespaceDef]]. Or `false` otherwise.\n */\nexport function isNameAndNamespace(value: any): value is NameAndNamespace {\n  return Array.isArray(value)\n      && value.length === 2\n      && typeof value[0] === 'string'\n      && value[1] instanceof NamespaceDef;\n}\n\n/**\n * Checks whether the given `value` is a qualified name.\n *\n * @param value  A value to check.\n *\n * @returns `true` if the given `value` is a non-empty string or an array consisting of exactly two elements,\n * where the first element is a non-empty string, and the second element is an instance of [[NamespaceDef]].\n * Or `false` otherwise.\n */\nexport function isQualifiedName(value: any): value is QualifiedName {\n  return typeof value === 'string' || isNameAndNamespace(value);\n}\n\n/**\n * Detects a namespace of the given qualified `name`\n *\n * @param name  Qualified name to detect a namespace of.\n *\n * @returns A namespace if the given `name` has it, or {@link DEFAULT__NS default namespace} otherwise.\n */\nexport function namespaceOf(name: QualifiedName): NamespaceDef {\n  return typeof name !== 'string' ? name[1] : DEFAULT__NS;\n}\n\n/**\n * Converts the given qualified `name` to local name and namespace tuple.\n *\n * @param name  Qualified name to convert.\n *\n * @returns The `name` itself if it has a namespace, or a tuple consisting of `name` and\n * {@link DEFAULT__NS default namespace} otherwise.\n */\nexport function nameAndNamespace(name: QualifiedName): NameAndNamespace {\n  return typeof name !== 'string' ? name : [name, DEFAULT__NS];\n}\n\n/**\n * Checks whether two qualified names are equal to each other.\n *\n * @param first  First qualified name to compare.\n * @param second  Second qualified name to compare.\n *\n * @returns `true` if both names are equal, or `false` otherwise.\n */\nexport function namesEqual(first: QualifiedName, second: QualifiedName): boolean {\n  if (typeof first === 'string') {\n    return typeof second === 'string' ? first === second : !second[1].url && second[0] === first;\n  }\n\n  const [firstName, { url: firstUrl }] = first;\n\n  if (typeof second === 'string') {\n    return !firstUrl && firstName === second;\n  }\n\n  return firstName === second[0] && firstUrl === second[1].url;\n}\n\n/**\n * Compares two qualified names.\n *\n * Names in default namespace considered less than other names. Namespaces are compared by their URLs.\n *\n * @param first  First qualified name to compare.\n * @param second  Second qualified name to compare.\n *\n * @returns `-1` if the `first` name is less than the `second` one, `0` if they are equal, or `1` if the `first` name\n * is greater than the `second` one.\n */\nexport function compareNames(first: QualifiedName, second: QualifiedName): -1 | 0 | 1 {\n  if (typeof first === 'string') {\n    if (typeof second === 'string') {\n      return compareStrings(first, second);\n    }\n    if (!second[1].url) {\n      return compareStrings(first, second[0]);\n    }\n    return -1;\n  }\n\n  const [firstName, { url: firstUrl }] = first;\n\n  if (typeof second === 'string') {\n    if (!firstUrl) {\n      return compareStrings(firstName, second);\n    }\n    return 1;\n  }\n\n  return compareStrings(firstUrl, second[1].url) || compareStrings(firstName, second[0]);\n}\n\n/**\n * @internal\n */\nfunction compareStrings(first: string, second: string): -1 | 0 | 1 {\n  return first < second ? -1 : first > second ? 1 : 0;\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/namespace-aliaser\n */\nimport { NamespaceDef } from './namespace';\n\n/**\n * Namespace aliaser function interface.\n *\n * Maps namespaces to their unique aliases.\n */\nexport type NamespaceAliaser =\n/**\n * @param ns  A definition of namespace to find alias for.\n *\n * @returns Namespace alias.\n */\n    (ns: NamespaceDef) => string;\n\n/**\n * Creates a namespace aliaser.\n *\n * The returned function tries to find a registered alias for the given namespace. If not found then tries to use one\n * of its preferred aliases. If all of them are reserved already for another namespaces, generates a new unique alias.\n *\n * @returns New instance of namespace aliaser.\n */\nexport function newNamespaceAliaser(): NamespaceAliaser {\n\n  const aliasesByNs = new Map<string, string>();\n  const nsNumPerAlias = new Map<string, number>();\n\n  return function nsAlias(ns: NamespaceDef): string {\n\n    const found = aliasesByNs.get(ns.url);\n\n    if (found) {\n      return found;\n    }\n\n    const mostPreferred = ns.alias;\n    let nsNumRegistered = 0;\n\n    for (const preferred of [mostPreferred, ...ns.aliases]) {\n\n      const ids = nsNumPerAlias.get(preferred);\n\n      if (!ids) {\n        aliasesByNs.set(ns.url, preferred);\n        nsNumPerAlias.set(preferred, 1);\n        return preferred;\n      }\n      if (!nsNumRegistered) {\n        // Use the first one\n        nsNumRegistered = ids;\n      }\n    }\n\n    const generated = mostPreferred + (++nsNumRegistered);\n\n    aliasesByNs.set(ns.url, generated);\n    nsNumPerAlias.set(mostPreferred, nsNumRegistered);\n\n    return generated;\n  };\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/fun-events/dom\n */\nimport { eventReceiver, EventReceiver, EventSupply, EventSupplyPeer } from '../base';\nimport { once, tillOff } from '../impl';\nimport { OnEvent } from '../on-event';\n\n/**\n * DOM event listener.\n *\n * DOM events are never recurrent.\n *\n * @category DOM\n * @typeparam E  Supported DOM event type.\n */\nexport type DomEventListener<E extends Event> = EventReceiver<[E]>;\n\n/**\n * An [[EventSender]] implementation able to register DOM event listeners.\n *\n * @category DOM\n * @typeparam E  Supported DOM event type.\n */\nexport class OnDomEvent<E extends Event> extends OnEvent<[E]> {\n\n  /**\n   * DOM event listener registration function of this event sender.\n   *\n   * Delegates to [[OnDomEvent.to]] method.\n   */\n  get F(): OnDomEvent.Fn<E> {\n    return this.to.bind(this);\n  }\n\n  /**\n   * Returns a reference to itself.\n   *\n   * @returns `this` instance.\n   */\n  to(): this;\n\n  /**\n   * Starts sending DOM events to the given `listener`.\n   *\n   * @param listener  Target listener of DOM events.\n   * @param opts  DOM event listener options to pass to `EventTarget.addEventListener()`.\n   *\n   * @returns A supply of DOM events from this sender to the given `listener`.\n   */\n  to(listener: DomEventListener<E>, opts?: AddEventListenerOptions | boolean): EventSupply;\n\n  /**\n   * Either starts sending DOM events to the given `listener`, or returns a reference to itself.\n   *\n   * @param listener  Target listener of DOM events.\n   * @param opts  DOM event listener options to pass to `EventTarget.addEventListener()`.\n   *\n   * @returns Either a supply of DOM events from this sender to the given `listener`, or `this` instance when `listener`\n   * is omitted.\n   */\n  to(listener?: DomEventListener<E>, opts?: AddEventListenerOptions | boolean): this | EventSupply;\n\n  to(listener?: DomEventListener<E>, opts?: AddEventListenerOptions | boolean): this | EventSupply {\n    if (!listener) {\n      return this;\n    }\n\n    const receiver = eventReceiver(listener);\n    const { supply } = receiver;\n\n    if (!supply.isOff) {\n      (this._on as (\n          this: void,\n          listener: EventReceiver.Generic<[E]>,\n          opts?: AddEventListenerOptions | boolean,\n      ) => void)(receiver, opts);\n    }\n\n    return supply;\n  }\n\n  /**\n   * Builds an [[OnDomEvent]] sender of events originated from this one that stops sending them to registered receiver\n   * after the first one.\n   *\n   * @returns DOM event sender.\n   */\n  once(): OnDomEvent<E>;\n\n  /**\n   * Registers a listener of DOM events originated from this sender that stops receiving them after the first one.\n   *\n   * @param listener  A DOM event listener to register.\n   * @param opts  DOM event listener options to pass to `EventTarget.addEventListener()`.\n   *\n   * @returns A supply of DOM event.\n   */\n  once(listener: DomEventListener<E>, opts?: AddEventListenerOptions | boolean): EventSupply;\n\n  once(listener?: DomEventListener<E>, opts?: AddEventListenerOptions | boolean): OnDomEvent<E> | EventSupply {\n    return (this.once = onDomEventBy(once(this)).F)(listener, opts);\n  }\n\n  /**\n   * Builds an [[OnDomEvent]] sender that sends events from this one until the required `supply` is cut off.\n   *\n   * The outgoing events supply will be cut off once incoming event supply does. Unless a second supply passed in.\n   * In the latter case that supply will be cut off instead.\n   *\n   * @param required  A peer of required event supply.\n   * @param dependentSupply  The supply to cut off on cutting off the incoming events supply.\n   *\n   * @returns New DOM event sender.\n   */\n  tillOff(required: EventSupplyPeer, dependentSupply?: EventSupply): OnDomEvent<E> {\n    return onDomEventBy(tillOff(this, required, dependentSupply));\n  }\n\n  /**\n   * Builds an [[OnDomEvent]] sender of events originated from this sender that enables event capturing by default.\n   *\n   * This corresponds to specifying `true` or `{ capture: true }` as a second argument to\n   * `EventTarget.addEventListener()`.\n   *\n   * @returns DOM events sender.\n   */\n  capture(): OnDomEvent<E>;\n\n  /**\n   * Registers a capturing listener of DOM events.\n   *\n   * This corresponds to specifying `true` or `{ capture: true }` as a second argument to\n   * `EventTarget.addEventListener()`.\n   *\n   * @param listener  A DOM events listener to register.\n   * @param opts  DOM event listener options to pass to `EventTarget.addEventListener()`.\n   *\n   * @returns A supply of DOM events.\n   */\n  capture(listener: DomEventListener<E>, opts?: AddEventListenerOptions | boolean): EventSupply;\n\n  capture(listener?: DomEventListener<E>, opts?: AddEventListenerOptions | boolean): OnDomEvent<E> | EventSupply {\n    return (this.capture = onDomEventBy((\n        listener: DomEventListener<E>,\n        opts?: AddEventListenerOptions | boolean,\n    ) => {\n      if (opts == null) {\n        return this.to(listener, true);\n      }\n      if (typeof opts === 'object' && opts.capture == null) {\n        return this.to(listener, { ...opts, capture: true });\n      }\n      return this.to(listener, opts);\n    }).F)(listener, opts);\n  }\n\n  /**\n   * Builds an [[OnDomEvent]] sender of events originated from this sender that registers listeners to invoke instead\n   * of the default action.\n   *\n   * It invokes an `Event.preventDefault()` method prior to calling the registered listener.\n   *\n   * @returns DOM events sender.\n   */\n  instead(): OnDomEvent<E>;\n\n  /**\n   * Registers a listener of DOM events to invoke instead of default action.\n   *\n   * This listener invokes an `Event.preventDefault()` method prior to event handling.\n   *\n   * @param listener  A DOM events listener to register.\n   * @param opts  DOM event listener options to pass to `EventTarget.addEventListener()`.\n   *\n   * @returns A supply of DOM events.\n   */\n  instead(listener: DomEventListener<E>, opts?: AddEventListenerOptions | boolean): EventSupply;\n\n  instead(listener?: DomEventListener<E>, opts?: AddEventListenerOptions | boolean): OnDomEvent<E> | EventSupply {\n    return (this.instead = onDomEventBy((\n        listener: DomEventListener<E>,\n        opts?: AddEventListenerOptions | boolean,\n    ) => {\n\n      const receiver = eventReceiver(listener);\n\n      return this.to(\n          {\n            supply: receiver.supply,\n            receive(context, event) {\n              event.preventDefault();\n              receiver.receive(context, event);\n            },\n          },\n          opts,\n      );\n    }).F)(listener, opts);\n  }\n\n  /**\n   * Builds an [[OnDomEvent]] sender of events originate from this sender that registers listeners preventing further\n   * propagation of current event in the capturing and bubbling phases.\n   *\n   * It invokes an `Event.stopPropagation()` method prior to calling the registered listener.\n   *\n   * @returns DOM events sender.\n   */\n  just(): OnDomEvent<E>;\n\n  /**\n   * Registers a listener of DOM events preventing further propagation of current event in the capturing and bubbling\n   * phases.\n   *\n   * This listener invokes an `Event.stopPropagation()` method prior to event handling.\n   *\n   * @param listener  A DOM events listener to register.\n   * @param opts  DOM event listener options to pass to `EventTarget.addEventListener()`.\n   *\n   * @returns A supply of DOM events.\n   */\n  just(listener: DomEventListener<E>, opts?: AddEventListenerOptions | boolean): EventSupply;\n\n  just(listener?: DomEventListener<E>, opts?: AddEventListenerOptions | boolean): OnDomEvent<E> | EventSupply {\n    return (this.just = onDomEventBy((\n        listener: DomEventListener<E>,\n        opts?: AddEventListenerOptions | boolean,\n    ) => {\n\n      const receiver = eventReceiver(listener);\n\n      return this.to(\n          {\n            supply: receiver.supply,\n            receive(context, event) {\n              event.stopPropagation();\n              receiver.receive(context, event);\n            },\n          },\n          opts,\n      );\n    }).F)(listener, opts);\n  }\n\n  /**\n   * Builds an [[OnDomEvent]] sender of events originated from this sender that registers the last event listener.\n   *\n   * It invokes an `Event.stopImmediatePropagation()` method prior to calling the registered listener.\n   *\n   * @returns DOM event sender.\n   */\n  last(): OnDomEvent<E>;\n\n  /**\n   * Registers the last DOM event listener.\n   *\n   * This listener invokes an `Event.stopImmediatePropagation()` method prior to event handling.\n   *\n   * @param listener  A DOM events listener to register.\n   * @param opts  DOM event listener options to pass to `EventTarget.addEventListener()`.\n   *\n   * @returns A supply of DOM events.\n   */\n  last(listener: DomEventListener<E>, opts?: AddEventListenerOptions | boolean): EventSupply;\n\n  last(listener?: DomEventListener<E>, opts?: AddEventListenerOptions | boolean): OnDomEvent<E> | EventSupply {\n    return (this.last = onDomEventBy((\n        listener: DomEventListener<E>,\n        opts?: AddEventListenerOptions | boolean,\n    ) => {\n\n      const receiver = eventReceiver(listener);\n\n      return this.to(\n          {\n            supply: receiver.supply,\n            receive(context, event) {\n              event.stopImmediatePropagation();\n              receiver.receive(context, event);\n            },\n          },\n          opts,\n      );\n    }).F)(listener, opts);\n  }\n\n  /**\n   * Builds an [[OnDomEvent]] sender of events originated from this sender that accepts listeners never calling\n   * `Event.preventDefault()`.\n   *\n   * This corresponds to specifying `{ passive: true }` as a second argument to `EventTarget.addEventListener()`.\n   *\n   * @returns DOM event listener.\n   */\n  passive(): OnDomEvent<E>;\n\n  /**\n   * Registers a DOM event listener that never calls `Event.preventDefault()`.\n   *\n   * This corresponds to specifying `{ passive: true }` as a second argument to `EventTarget.addEventListener()`.\n   *\n   * @param listener  A DOM events listener to register.\n   * @param opts  DOM event listener options to pass to `EventTarget.addEventListener()`.\n   *\n   * @returns A supply of DOM events.\n   */\n  passive(listener: DomEventListener<E>, opts?: AddEventListenerOptions | boolean): EventSupply;\n\n  passive(listener?: DomEventListener<E>, opts?: AddEventListenerOptions | boolean): OnDomEvent<E> | EventSupply {\n    return (this.passive = onDomEventBy((\n        listener: DomEventListener<E>,\n        opts?: AddEventListenerOptions | boolean,\n    ) => {\n      if (opts == null) {\n        return this.to(listener, { passive: true });\n      }\n      if (typeof opts === 'boolean') {\n        return this.to(listener, { capture: opts, passive: true });\n      }\n      if (opts.passive == null) {\n        return this.to(listener, { ...opts, passive: true });\n      }\n      return this.to(listener, opts);\n    }).F)(listener, opts);\n  }\n\n}\n\nexport namespace OnDomEvent {\n\n  /**\n   * A signature of function registering listeners of DOM events sent by event sender.\n   *\n   * When called without parameters it returns an [[OnDomEvent]] sender. When called with DOM event listener\n   * as parameter it returns a supply of DOM events from that sender.\n   *\n   * Available as [[OnDomEvent.F]] property value.\n   *\n   * @typeparam E  Supported DOM event type.\n   */\n  export interface Fn<E extends Event> {\n\n    /**\n     * Returns the DOM events sender.\n     *\n     * @returns [[OnDomEvent]] sender the events originated from.\n     */\n    (\n        this: void,\n    ): OnDomEvent<E>;\n\n    /**\n     * Registers a listener of DOM events sent by the sender.\n     *\n     * @param listener  A listener of DOM events to register.\n     * @param opts  DOM event listener options to pass to `EventTarget.addEventListener()`.\n     *\n     * @returns A supply of DOM events from the sender to the given `listener`.\n     */\n    (\n        this: void,\n        listener: DomEventListener<E>,\n        opts?: AddEventListenerOptions | boolean,\n    ): EventSupply;\n\n    /**\n     * Either registers a listener of DOM events sent by the sender, or returns the sender itself.\n     *\n     * @param listener  A listener of DOM events to register.\n     * @param opts  DOM event listener options to pass to `EventTarget.addEventListener()`.\n     *\n     * @returns Either a supply of DOM events from the sender to the given `listener`, or [[OnDomEvent]] sender\n     * the events originated from when `listener` is omitted.\n     */\n    (\n        this: void,\n        listener?: DomEventListener<E>,\n        opts?: AddEventListenerOptions | boolean,\n    ): EventSupply | OnDomEvent<E>;\n\n  }\n\n}\n\n/**\n * Converts a plain DOM event listener registration function to [[OnDomEvent]] sender.\n *\n * @category DOM\n * @typeparam E  Supported DOM event type.\n * @param register  A generic DOM event listener registration function.\n *\n * @returns An [[OnDomEvent]] sender registering event listeners with the given `register` function.\n */\nexport function onDomEventBy<E extends Event>(\n    register: (\n        this: void,\n        listener: EventReceiver.Generic<[E]>,\n        opts?: AddEventListenerOptions | boolean,\n    ) => void,\n): OnDomEvent<E> {\n  return new OnDomEvent(register);\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/context-values/updatable\n */\nimport { flatMapIt, mapIt, overArray } from '@proc7ts/a-iterable';\nimport { CallChain, nextArgs, NextCall } from '@proc7ts/call-thru';\nimport {\n  afterEach,\n  AfterEvent,\n  afterSupplied,\n  afterThe,\n  EventKeeper,\n  isEventKeeper,\n  nextAfterEvent,\n  trackValue,\n  ValueTracker,\n} from '@proc7ts/fun-events';\nimport { ContextKey, ContextKey__symbol, ContextSeedKey, ContextValueOpts } from '../context-key';\nimport { ContextRef } from '../context-ref';\nimport { ContextSeeder } from '../context-seeder';\nimport { ContextValueProvider } from '../context-value-spec';\nimport { ContextValues } from '../context-values';\n\n/**\n * @internal\n */\nclass ContextUpSeeder<Ctx extends ContextValues, Src>\n    implements ContextSeeder<Ctx, Src | EventKeeper<Src[]>, AfterEvent<Src[]>> {\n\n  private readonly _providers: ValueTracker<ContextValueProvider<Ctx, Src | EventKeeper<Src[]>>[]> = trackValue([]);\n\n  provide(provider: ContextValueProvider<Ctx, Src | EventKeeper<Src[]>>): () => void {\n    this._providers.it = [...this._providers.it, provider];\n    return () => {\n\n      const providers = this._providers.it;\n      const found = providers.indexOf(provider);\n\n      if (found >= 0) {\n        this._providers.it = providers.slice(0, found).concat(providers.slice(found + 1));\n      }\n    };\n  }\n\n  seed(context: Ctx, initial: AfterEvent<Src[]> = afterThe<Src[]>()): AfterEvent<Src[]> {\n    return this.combine(initial, upSrcKeepers(context, this._providers));\n  }\n\n  isEmpty(): boolean {\n    return false;\n  }\n\n  combine(first: AfterEvent<Src[]>, second: AfterEvent<Src[]>): AfterEvent<Src[]> {\n    return afterEach(\n        first,\n        second,\n    ).keepThru(\n        flatUpSources,\n    );\n  }\n\n}\n\n/**\n * @internal\n */\nfunction upSrcKeepers<Ctx extends ContextValues, Src>(\n    context: Ctx,\n    providersTracker: ValueTracker<ContextValueProvider<Ctx, Src | EventKeeper<Src[]>>[]>,\n): AfterEvent<Src[]> {\n  return providersTracker.read().keepThru(\n      providers => !providers.length\n          ? nextArgs()\n          : nextAfterEvent(\n              afterEach(\n                  ...mapIt(\n                      mapIt(\n                          overArray(providers),\n                          prov => prov(context),\n                      ),\n                      toUpSrcKeeper,\n                  ),\n              ),\n          ),\n      flatUpSources,\n  );\n}\n\n/**\n * @internal\n */\nfunction toUpSrcKeeper<Src>(src: null | undefined | Src | EventKeeper<Src[]>): AfterEvent<Src[]> {\n  return src == null ? afterThe() : isUpSrcKeeper(src) ? afterSupplied(src) : afterThe(src);\n}\n\n/**\n * @internal\n */\nfunction isUpSrcKeeper<Src>(src: Src | EventKeeper<Src[]>): src is EventKeeper<Src[]> {\n  return (typeof src === 'object' || typeof src === 'function') && isEventKeeper(src as (object | Function));\n}\n\n/**\n * @internal\n */\nfunction flatUpSources<Src>(...sources: Src[][]): NextCall<CallChain, Src[]> {\n  return nextArgs<Src[]>(...flatMapIt<Src>(sources));\n}\n\n/**\n * @internal\n */\nclass ContextSeedUpKey<Src> extends ContextSeedKey<Src | EventKeeper<Src[]>, AfterEvent<Src[]>> {\n\n  seeder<Ctx extends ContextValues>(): ContextSeeder<Ctx, Src | EventKeeper<Src[]>, AfterEvent<Src[]>> {\n    return new ContextUpSeeder();\n  }\n\n}\n\n/**\n * Updatable context value reference.\n *\n * @typeparam Value  Context value type.\n * @typeparam Src  Source value type.\n */\nexport interface ContextUpRef<Value, Src> extends ContextRef<Value, Src | EventKeeper<Src[]>> {\n\n  readonly [ContextKey__symbol]: ContextUpKey<Value, Src>;\n\n}\n\n/**\n * @internal\n */\nclass ContextUpKeyUpKey<Value, Src>\n    extends ContextKey<ContextUpKey.Up<Value>, Src | EventKeeper<Src[]>, AfterEvent<Src[]>> {\n\n  get seedKey(): ContextSeedKey<Src | EventKeeper<Src[]>, AfterEvent<Src[]>> {\n    return this._key.seedKey;\n  }\n\n  constructor(\n      private readonly _key: ContextUpKey<Value, Src>,\n      readonly grow: <Ctx extends ContextValues>(\n          opts: ContextValueOpts<Ctx, ContextUpKey.Up<Value>, EventKeeper<Src[]> | Src, AfterEvent<Src[]>>,\n      ) => ContextUpKey.Up<Value>,\n  ) {\n    super(_key.name + ':up');\n  }\n\n}\n\n/**\n * Abstract implementation of updatable context value key.\n *\n * Accepts single value sources and `EventKeeper`s of value source arrays.\n *\n * Collects value sources into `AfterEvent` keeper of source values.\n *\n * @typeparam Value  Context value type.\n * @typeparam Src  Source value type.\n */\nexport abstract class ContextUpKey<Value, Src>\n    extends ContextKey<Value, Src | EventKeeper<Src[]>, AfterEvent<Src[]>>\n    implements ContextUpRef<Value, Src> {\n\n  readonly seedKey: ContextSeedKey<Src | EventKeeper<Src[]>, AfterEvent<Src[]>>;\n\n  /**\n   * A key of context value containing an {@link ContextUpKey.Up updates keeper} of this key value.\n   *\n   * It is expected to report any updates to this key's value.\n   *\n   * The value of updates key is constructed by [[growUp]] function out of the same seed.\n   */\n  abstract readonly upKey: ContextUpKey.UpKey<Value, Src>;\n\n  /**\n   * Constructs simple context value key.\n   *\n   * @param name  Human-readable key name.\n   * @param seedKey  Value seed key. A new one will be constructed when omitted.\n   */\n  constructor(name: string, seedKey?: ContextSeedKey<Src | EventKeeper<Src[]>, AfterEvent<Src[]>>) {\n    super(name);\n    this.seedKey = seedKey || new ContextSeedUpKey(this);\n  }\n\n  /**\n   * A key of context value containing an {@link ContextUpKey.Up updates keeper} of the value of this key.\n   *\n   * @param grow  A function that grows an updates keeper of context value out of its seed.\n   *\n   * @returns New updates keeper key.\n   */\n  protected createUpKey(\n      grow: <Ctx extends ContextValues>(\n          opts: ContextValueOpts<Ctx, ContextUpKey.Up<Value>, EventKeeper<Src[]> | Src, AfterEvent<Src[]>>,\n      ) => ContextUpKey.Up<Value>,\n  ): ContextUpKey.UpKey<Value, Src> {\n    return new ContextUpKeyUpKey(this, grow);\n  }\n\n}\n\nexport namespace ContextUpKey {\n\n  /**\n   * A type of updates keeper of context value.\n   *\n   * It is the same as a type of original value if the value itself is an event keeper, or an `AfterEvent` keeper\n   * of original value otherwise.\n   *\n   * @typeparam Value  Original context value type.\n   */\n  export type Up<Value> = Value extends AfterEvent<any>\n      ? Value\n      : (Value extends EventKeeper<infer E>\n          ? AfterEvent<E>\n          : AfterEvent<[Value]>);\n\n  /**\n   * A key of context value containing an {@link ContextUpKey.Up updates keeper} of this key value.\n   *\n   * @typeparam Value  Context value type.\n   * @typeparam Src  Source value type.\n   */\n  export type UpKey<Value, Src> = ContextKey<ContextUpKey.Up<Value>, Src>;\n\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/render-scheduler\n */\nimport { RenderShot } from './render-shot';\n\n/**\n * Render schedule signature.\n *\n * This function accepts a {@link RenderShot render shot} to schedule. All scheduled render shots are meant to update\n * the same rendering target. If multiple render shots scheduled before execution starts, only the last one will be\n * executed to limit rendering rate.\n *\n * The render shot execution may fail. This should not prevent other scheduled or postponed render shots from being\n * executed. The render shot execution failure reason is expected to be reported with [[RenderScheduleConfig.error]]\n * method.\n *\n * Render schedules are constructed by {@link RenderScheduler render schedulers}, or by [[newRenderSchedule]] function\n * that uses the {@link setRenderScheduler default scheduler} for that.\n */\nexport type RenderSchedule =\n/**\n * @param shot  A render shot to schedule.\n */\n    (this: void, shot: RenderShot) => void;\n\n/**\n * Options for render schedule.\n *\n * This is passed to {@link RenderScheduler render scheduler} when constructing new {@link RenderSchedule schedule}.\n *\n * A {@link RenderScheduleConfig render configuration} can be constructed based on the options with\n * [[RenderScheduleConfig.by]] function.\n */\nexport interface RenderScheduleOptions {\n\n  /**\n   * A window for constructed schedule.\n   *\n   * Detected by [[nodeWindow]] by default, if [[node]] is specified. Falls back to current `window`.\n   *\n   * The schedulers that don't need a window never access this option value.\n   */\n  window?: Window;\n\n  /**\n   * A DOM node for constructed schedule.\n   *\n   * Used to detect missing [[window]] option.\n   */\n  node?: Node;\n\n  /**\n   * Reports an error. E.g. a render shot execution failure.\n   *\n   * Reports errors with `console.error()` by default.\n   *\n   * @param messages  Error messages to report.\n   */\n  error?(...messages: any[]): void;\n\n}\n\n/**\n * Render schedule configuration.\n *\n * This is based on {@link RenderScheduleOptions render options}, but has all properties present.\n *\n * The configuration ought to be constructed out of render options by [[RenderScheduleConfig.by]] function.\n */\nexport interface RenderScheduleConfig {\n\n  /**\n   * A window the schedule is constructed for.\n   *\n   * The schedulers that don't need a window should never access this option value.\n   */\n  window: Window;\n\n  /**\n   * A DOM node the schedule is constructed for.\n   */\n  node?: Node;\n\n  /**\n   * Reports an error. E.g. a render shot execution failure.\n   *\n   * @param messages  Error messages to report.\n   */\n  error(...messages: any[]): void;\n\n}\n\nexport const RenderScheduleConfig = {\n\n  /**\n   * Constructs a configuration of render scheduler by its options.\n   *\n   * @param options  Render scheduler options the configuration should be base on.\n   */\n  by(this: void, options: RenderScheduleOptions = {}): RenderScheduleConfig {\n\n    let win: Window | undefined;\n\n    return {\n      get node() {\n        return options.node;\n      },\n      get window() {\n        return win || (win = options.window || (options.node && nodeWindow(options.node)) || window);\n      },\n      error(...messages) {\n        if (options && options.error) {\n          options.error(...messages);\n        } else {\n          console.error(...messages);\n        }\n      },\n    };\n  },\n\n};\n\n/**\n * Detects a window the given DOM node is attached to.\n *\n * @param node  Target DOM node.\n *\n * @returns A window of the owner document, or `null` if absent.\n */\nexport function nodeWindow(node: Node): Window | null {\n\n  const document = node.ownerDocument || node as Document;\n\n  return document.defaultView;\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/render-scheduler\n */\nimport { RenderQueue } from './render-queue';\nimport { RenderScheduleConfig } from './render-schedule';\nimport { RenderScheduler } from './render-scheduler';\nimport { RenderExecution, RenderShot } from './render-shot';\n\n/**\n * Custom render scheduler options.\n *\n * This is passed to [[customRenderScheduler]] function to construct new custom scheduler.\n */\nexport interface CustomRenderSchedulerOptions {\n\n  /**\n   * Obtains a queue for render schedule.\n   *\n   * This is called once per render schedule.\n   *\n   * Render schedules may share the queue.\n   *\n   * @param config  Render schedule configuration.\n   *\n   * @returns  A queue of scheduled render shots.\n   */\n  newQueue(config: RenderScheduleConfig): RenderQueue;\n\n}\n\n/**\n * @internal\n */\nconst RenderQ__symbol = Symbol('render-q');\n\n/**\n * @internal\n */\nclass RenderQ {\n\n  readonly ref: [RenderQ, RenderQ];\n  schedule: (this: RenderQ, config: RenderScheduleConfig) => void;\n  private scheduled?: RenderScheduleConfig;\n\n  static by(queue: RenderQueue, ref?: [RenderQ, RenderQ]): RenderQ {\n    return (queue as any)[RenderQ__symbol]\n        || ((queue as any)[RenderQ__symbol] = new RenderQ(queue, ref));\n  }\n\n  private constructor(private readonly q: RenderQueue, ref?: [RenderQ, RenderQ]) {\n    this.schedule = this.doSchedule;\n    this.ref = ref || [this, this];\n  }\n\n  add(shot: RenderShot): void {\n    this.q.add(shot);\n  }\n\n  private doSchedule(config: RenderScheduleConfig): void {\n    this.schedule = () => {/* do not schedule */};\n\n    const postponed: RenderShot[] = [];\n    const execution: RenderExecution = {\n      get config() {\n        return config;\n      },\n      postpone(shot) {\n        postponed.unshift(shot);\n      },\n    };\n\n    this.q.schedule(() => {\n\n      const next = this.reset();\n\n      next.suspend();\n      this.exec(execution);\n      // Activate next queue\n      this.ref[1] = this.ref[0];\n      // Schedule postponed shots (in reverse order)\n      postponed.forEach(shot => this.q.add(shot));\n      // Recurrently postponed shots are executed immediately after their initiators\n      execution.postpone = shot => this.q.post(shot);\n      this.exec(execution);\n      next.resume();\n    });\n  }\n\n  private exec(execution: RenderExecution): void {\n    for (; ;) {\n\n      const shot = this.q.pull();\n\n      if (!shot) {\n        break;\n      }\n      shot(execution);\n    }\n  }\n\n  private reset(): RenderQ {\n    // Update next queue. Current queue remains active\n    return this.ref[0] = RenderQ.by(this.q.reset(), this.ref);\n  }\n\n  private suspend(): void {\n    this.schedule = config => {\n      this.scheduled = config;\n      this.schedule = () => {/* do not schedule */};\n    };\n  }\n\n  private resume(): void {\n    if (this.scheduled) {\n      this.doSchedule(this.scheduled);\n    } else {\n      this.schedule = this.doSchedule;\n    }\n  }\n\n}\n\n/**\n * Builds custom render scheduler.\n *\n * @param options  Render scheduler options.\n *\n * @returns New render scheduler.\n */\nexport function customRenderScheduler(\n    options: CustomRenderSchedulerOptions,\n): RenderScheduler {\n  return scheduleOptions => {\n\n    const config = RenderScheduleConfig.by(scheduleOptions);\n    const queueRef: readonly [RenderQ, RenderQ] = RenderQ.by(options.newQueue(config)).ref;\n    let enqueued: [RenderQ, RenderShot, true?] | [] = [];\n\n    return shot => {\n\n      const [lastQueue,, executed] = enqueued;\n      const [nextQueue, activeQueue] = queueRef;\n      let queue = lastQueue || activeQueue;\n\n      if (lastQueue === activeQueue && !executed || lastQueue === nextQueue) {\n        enqueued[1] = shot;\n      } else {\n\n        // Add to active queue initially, unless a shot executed in it already.\n        // Add to the next queue otherwise.\n        const nextEnqueued: [RenderQ, RenderShot, true?] = enqueued = [\n          queue = executed ? nextQueue : activeQueue,\n          shot,\n        ];\n\n        queue.add((execution: RenderExecution) => {\n          nextEnqueued[2] = true; // Switch to next queue\n          try {\n            nextEnqueued[1]({\n              get config() {\n                return config;\n              },\n              postpone(postponed) {\n                execution.postpone(postponed);\n              },\n            });\n          } catch (e) {\n            config.error(e);\n          }\n        });\n      }\n\n      queue.schedule(config);\n    };\n  };\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/render-scheduler\n */\nimport { animationRenderScheduler } from './animation-render-scheduler';\nimport { RenderSchedule, RenderScheduleOptions } from './render-schedule';\n\n/**\n * Render scheduler signature.\n *\n * This function constructs a {@link RenderSchedule render schedule} according to the given options.\n *\n * The default render scheduler is always available as [[newRenderSchedule]] function.\n *\n * There are several scheduler implementations exist:\n * - [[animationRenderScheduler]] (used by default),\n * - [[asyncRenderScheduler]],\n * - [[immediateRenderScheduler]],\n * - [[ManualRenderScheduler]],\n * - [[noopRenderScheduler]].\n *\n * Custom scheduler implementations could be created using [[customRenderScheduler]] function.\n */\nexport type RenderScheduler =\n/**\n * @param options  Options of constructed render schedule.\n *\n * @returns New render schedule.\n */\n    (this: void, options?: RenderScheduleOptions) => RenderSchedule;\n\n/**\n * @internal\n */\nlet defaultRenderScheduler = animationRenderScheduler;\n\n/**\n * Assigns or resets the default render scheduler.\n *\n * An {@link animationRenderScheduler animation frame render scheduler} is used bu default.\n *\n * @param scheduler  New default render scheduler. {@link animationRenderScheduler animation frame render scheduler}\n * will be used if `null`, `undefined`, or omitted.\n *\n * @returns New default render scheduler.\n */\nexport function setRenderScheduler(\n    scheduler?: RenderScheduler | null,\n): RenderScheduler {\n  return defaultRenderScheduler = scheduler || animationRenderScheduler;\n}\n\n/**\n * Constructs {@link RenderSchedule render schedule} using {@link setRenderScheduler default render scheduler}.\n *\n * @param options  Options of constructed render schedule.\n *\n * @returns New render schedule.\n */\nexport function newRenderSchedule(options?: RenderScheduleOptions): RenderSchedule {\n  return defaultRenderScheduler(options);\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKeyDefault } from '@proc7ts/context-values';\nimport { BootstrapContext } from './bootstrap-context';\n\n/**\n * Provides a default value for bootstrap context key.\n *\n * @category Core\n * @param provide  A function accepting bootstrap context and target key as parameters, and returning either a default\n * value, or `null`/`undefined` if unknown.\n *\n * @returns A provider of default value for bootstrap context value key.\n */\nexport function bootstrapDefault<Value, Key extends ContextKey<any, any, any>>(\n    provide: (this: void, context: BootstrapContext, key: Key) => Value | null | undefined,\n): ContextKeyDefault<Value, Key> {\n  return (context, key) => {\n\n    const bootstrapContext = context.get(BootstrapContext);\n\n    return context === bootstrapContext ? provide(bootstrapContext, key) : bootstrapContext.get(key);\n  };\n}\n","/**\n * @internal\n */\nexport function isArray<T>(value: T | T[] | null | undefined): value is T[];\n\n/**\n * @internal\n */\nexport function isArray<T>(value: T | readonly T[] | null | undefined): value is readonly T[];\n\nexport function isArray<T>(value: T | readonly T[]): value is T[] {\n  return Array.isArray(value);\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\n/**\n * Arbitrary class constructor.\n *\n * @category Utility\n * @typeparam T  A type of object.\n */\nexport interface Class<T extends object = any> extends Function {\n  new(...args: any[]): T;\n  prototype: T;\n}\n\n/**\n * Detects super class of the given class optionally satisfying the given criteria.\n *\n * Traverses all class ancestors until reaches the one satisfying the given criteria, or stops when there is no more\n * ancestors.\n *\n * @category Utility\n * @param type  The class constructor to find super class of.\n * @param satisfying  The criteria of super class matching. It is a function accepting a super class constructor\n * as the only parameter and returning `true` if the given super class matches, or `false` otherwise. Always returns\n * `true` by default.\n *\n * @return A super class `satisfying` the given criteria, or `undefined` if there is no such super class, or there is no\n * super class at all (e.g. when `Object` is passed in).\n */\nexport function superClassOf(type: Class, satisfying: (type: Class) => boolean = () => true): Class | undefined {\n\n  const prototype = Object.getPrototypeOf(type.prototype);\n\n  if (prototype == null) {\n    return;\n  }\n\n  const superType = prototype.constructor as Class;\n\n  if (satisfying(superType)) {\n    return superType;\n  }\n\n  return superClassOf(superType, satisfying);\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { Class } from './classes';\nimport { fieldAccessorDescriptor, PropertyAccessorDescriptor, toPropertyAccessorDescriptor } from './reflect';\n\n/**\n * Typed class decorator.\n *\n * @category Utility\n * @typeparam T  A type of class to decorate.\n */\nexport type TypedClassDecorator<T extends Class> = (type: T) => T | void;\n\n/**\n * Typed property decorator.\n *\n * @category Utility\n * @typeparam T  A type of class the decorated property belongs to.\n */\nexport type TypedPropertyDecorator<T extends Class> =\n    <V>(target: InstanceType<T>, propertyKey: string | symbol, descriptor?: TypedPropertyDescriptor<V>) => any | void;\n\n/**\n * Property decorator helper converting a field or property to the one with accessor (`get` and optionally `set`).\n *\n * @category Utility\n * @typeparam T  A type of target object.\n * @typeparam V  A property value type.\n * @param target  Target object containing the property.\n * @param propertyKey  Target property key.\n * @param desc  Target property descriptor, or `undefined` for object fields.\n * @param updateDescriptor  Descriptor updater. Accepts the accessor descriptor as the only argument. If returns\n * a descriptor, then it is applied to the property. Otherwise the target property descriptor is never updated.\n *\n * @returns Updated property descriptor to return from decorator to apply to the property, or `undefined` if there is\n * nothing to update.\n */\nexport function decoratePropertyAccessor<T, V>(\n    target: T,\n    propertyKey: string | symbol,\n    desc: TypedPropertyDescriptor<V> | undefined,\n    updateDescriptor: (desc: PropertyAccessorDescriptor<V>) => PropertyAccessorDescriptor<V>,\n): PropertyAccessorDescriptor<V> | undefined {\n\n  const isField = !desc;\n  const accessorDesc: PropertyAccessorDescriptor<V> = desc\n      ? toPropertyAccessorDescriptor(desc)\n      : fieldAccessorDescriptor(target, propertyKey as keyof T) as any;\n  const updatedDesc = updateDescriptor(accessorDesc);\n\n  if (isField && updatedDesc) {\n    Object.defineProperty(target, propertyKey, updatedDesc);\n    return;\n  }\n\n  return updatedDesc;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\n/**\n * Converts an object field to property accessor.\n *\n * Defines a new property with the given name in the target object and returns its descriptor.\n *\n * The converted descriptor is always configurable, enumerable, and writable.\n *\n * @category Utility\n * @typeparam T  The type of target object.\n * @typeparam K  Target object property keys type.\n * @param target  The object containing target field.\n * @param fieldKey  Target field key.\n *\n * @return New property accessor descriptor.\n */\nexport function field2accessor<T, K extends keyof T>(\n    target: T,\n    fieldKey: K,\n): PropertyAccessorDescriptor<T[K]> {\n\n  const desc = fieldAccessorDescriptor(target, fieldKey);\n\n  Object.defineProperty(target, fieldKey, desc);\n\n  return desc;\n}\n\n/**\n * Creates an property accessor descriptor for the given field.\n *\n * @category Utility\n * @typeparam T  The type of target object.\n * @typeparam K  Target object property keys type.\n * @param target  The object containing target field.\n * @param fieldKey  Target field key.\n */\nexport function fieldAccessorDescriptor<T, K extends keyof T>(\n    target: T,\n    fieldKey: K,\n): PropertyAccessorDescriptor<T[K]> {\n\n  const value__symbol = Symbol(`${String(fieldKey)}:value`);\n  const initial: T[K] = target[fieldKey];\n\n  return {\n    configurable: true,\n    enumerable: true,\n    get(this: any) {\n      return value__symbol in this ? this[value__symbol] : initial;\n    },\n    set(this: any, newValue) {\n      this[value__symbol] = newValue;\n    },\n  };\n}\n\n/**\n * Property accessor descriptor. I.e. the one with `get` and `set` functions.\n *\n * @category Utility\n * @typeparam V  Property value type.\n */\nexport interface PropertyAccessorDescriptor<V> extends TypedPropertyDescriptor<V> {\n  enumerable?: boolean;\n  configurable?: boolean;\n  writable?: undefined;\n  value?: undefined;\n  get?: () => V;\n  set?: (value: V) => void;\n}\n\n/**\n * Detects whether the given property descriptor is the one of property accessor.\n *\n * @category Utility\n * @typeparam V  Property value type.\n * @param desc  Target property descriptor.\n *\n * @return `true` if the descriptor has no `value` or `writable` attributes set.\n */\nexport function isPropertyAccessorDescriptor<V>(\n    desc: TypedPropertyDescriptor<V>,\n): desc is PropertyAccessorDescriptor<V> {\n  return desc.value === undefined && desc.writable === undefined;\n}\n\n/**\n * Converts a property descriptor to property accessor descriptor.\n *\n * @category Utility\n * @typeparam V  Property value type.\n * @param desc  Target property descriptor.\n *\n * @return Either an accessor descriptor constructed from data descriptor, or `desc` if it is an accessor descriptor\n * already.\n */\nexport function toPropertyAccessorDescriptor<V>(\n    desc: TypedPropertyDescriptor<V>,\n): PropertyAccessorDescriptor<V> {\n  if (isPropertyAccessorDescriptor(desc)) {\n    return desc;\n  }\n\n  const value__symbol = Symbol('value');\n  const initial = desc.value as V;\n\n  const accessorDesc: PropertyAccessorDescriptor<V> = {\n    ...desc,\n    writable: undefined,\n    value: undefined,\n    get(this: any) {\n      return value__symbol in this ? this[value__symbol] : initial;\n    },\n  };\n\n  if (desc.writable) {\n    accessorDesc.set = function (this: any, newValue: V) {\n      this[value__symbol] = newValue;\n    };\n  }\n\n  delete accessorDesc.writable;\n  delete accessorDesc.value;\n\n  return accessorDesc;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\n/**\n * Merges two functions by calling one after another.\n *\n * Optionally merges function call results.\n *\n * @category Utility\n * @typeparam P  Function parameter types as tuple.\n * @typeparam R  A type of function result.\n * @typeparam T  A type if `this` object expected by function.\n * @param first  The first function to call.\n * @param second  The second function to call.\n * @param merge  Optional function call results merger. Accepts two function results as arguments and returns the final\n * result. When omitted the first function call result is ignored and the second function's call result is returned.\n *\n * @return A function that calls both of the given ones and merges their results. If one of the functions is absent,\n * then just returns another one. If both are absent, then returns `undefined`.\n */\nexport function mergeFunctions<P extends any[], R, T>(\n    first: (this: T, ...args: P) => R,\n    second: ((this: T, ...args: P) => R) | undefined,\n    merge: (first: R, second: R) => R,\n): (this: T, ...args: P) => R;\n\nexport function mergeFunctions<P extends any[], R, T>(\n    first: ((this: T, ...args: P) => R) | undefined,\n    second: (this: T, ...args: P) => R,\n    merge?: (first: R, second: R) => R,\n): (this: T, ...args: P) => R;\n\nexport function mergeFunctions<P extends any[], R, T>(\n    first: ((this: T, ...args: P) => R) | undefined,\n    second: ((this: T, ...args: P) => R) | undefined,\n    merge?: (first: R, second: R) => R,\n): ((this: T, ...args: P) => R) | undefined;\n\nexport function mergeFunctions<P extends any[], R, T>(\n    first: ((this: T, ...args: P) => R) | undefined,\n    second: ((this: T, ...args: P) => R) | undefined,\n    merge: (first: R, second: R) => R = (_f, s) => s,\n): ((this: T, ...args: P) => R) | undefined {\n  if (!first) {\n    return second;\n  }\n  if (!second) {\n    return first;\n  }\n  return function (this: T, ...args: P): R {\n    return merge(\n        first.apply(this, args),\n        second.apply(this, args),\n    );\n  };\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\n/**\n * Checks whether the given DOM node is element.\n *\n * @category Utility\n * @param node  A DOM node to check.\n *\n * @returns `true` is `node` is element, or `false` otherwise.\n */\nexport function isElement(node: Node): node is Element {\n  return node.nodeType === Node.ELEMENT_NODE;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { Class, TypedClassDecorator } from '../common';\nimport { FeatureDef } from './feature-def';\n\n/**\n * Feature class decorator.\n *\n * Decorate a class with this decorator to define it as a feature like this:\n * ```TypeScript\n * @Feature({ needs: [OtherFeature, MyComponent] })\n * class MyFeature {\n *   // ...\n * }\n * ```\n *\n * Such feature can be passed to [[bootstrapComponents]] function or referenced by other features.\n *\n * This is an alternative to direct call to [[FeatureDef.define]] method.\n *\n * @category Core\n * @typeparam T  A type of decorated feature class.\n * @param defs  Feature definitions.\n *\n * @returns A feature class decorator.\n */\nexport function Feature<T extends Class = any>(...defs: FeatureDef[]): TypedClassDecorator<T> {\n  return (type: T) => FeatureDef.define(type, ...defs);\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { Class } from '../common';\nimport { ComponentDef, ComponentDef__symbol } from './component-def';\nimport { ComponentClass } from './definition';\n\n/**\n * Component decorator interface.\n *\n * In addition to being a decorator for component class, it may also serve as {@link ComponentDef component definition}.\n * Thus it can be added as parameter to {@link Component @Component} decorator, or used as class decorator by itself.\n *\n * Constructed by [[Component]] function.\n *\n * @category Core\n * @typeparam T  A type of decorated component class.\n */\nexport type ComponentDecorator<T extends ComponentClass = Class> =\n    & ((this: void, type: T) => T | void)\n    & ComponentDef<InstanceType<T>>;\n\n/**\n * Decorator of component class.\n *\n * Decorated class becomes component:\n * ```TypeScript\n * @Component({ name: 'my-element' })\n * class MyComponent {\n *   // ...\n * }\n * ```\n *\n * Such component can be registered with [[FeatureContext.define]] method or used as a feature, e.g. passed to\n * [[bootstrapComponents]] function, or added to [[FeatureDef.Options.needs]] property of another feature.\n *\n * This is an alternative to direct call to [[ComponentDef.Options.define]] method.\n *\n * @category Core\n * @typeparam T  A type of decorated component class.\n * @param defs  Component definitions.\n *\n * @returns A component class decorator.\n */\nexport function Component<T extends ComponentClass = Class>(\n    ...defs: ComponentDef<InstanceType<T>>[]\n): ComponentDecorator<T> {\n\n  const decorator = ((type: T) => ComponentDef.define(type, ...defs)) as ComponentDecorator<T>;\n  const def = decorator as ComponentDef.Factory<InstanceType<T>>;\n\n  def[ComponentDef__symbol] = () => ComponentDef.all(...defs);\n\n  return decorator;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKey__symbol, ContextValues } from '@proc7ts/context-values';\nimport {\n  EventReceiver,\n  EventSupply,\n  EventSupply__symbol,\n  EventSupplyPeer,\n  OnEvent,\n  StatePath,\n} from '@proc7ts/fun-events';\nimport { OnDomEvent } from '@proc7ts/fun-events/dom';\nimport { ComponentContext__key } from './component-context.key.impl';\nimport { ComponentEventDispatcher__key } from './component-event.key.impl';\nimport { ComponentMount } from './component-mount';\nimport { ContentRoot } from './content-root';\nimport { ComponentClass } from './definition';\nimport { StateUpdater } from './state-updater';\n\n/**\n * A key of a custom element and component properties containing a reference to component context.\n *\n * @category Core\n */\nexport const ComponentContext__symbol = (/*#__PURE__*/ Symbol('component-context'));\n\n/**\n * Component context.\n *\n * Passed to component constructor as its only parameter.\n *\n * Extends `ContextValues` interface. The values are provided by corresponding providers registered with\n * [[BootstrapSetup.perComponent]] and [[DefinitionSetup.perComponent]] methods.\n *\n * @category Core\n * @typeparam T  A type of component.\n */\nexport abstract class ComponentContext<T extends object = any> extends ContextValues implements EventSupplyPeer {\n\n  /**\n   * A key of component context value containing the component context instance itself.\n   */\n  static get [ContextKey__symbol](): ContextKey<ComponentContext> {\n    return ComponentContext__key;\n  }\n\n  /**\n   * Component class constructor.\n   */\n  abstract readonly componentType: ComponentClass<T>;\n\n  /**\n   * Custom element constructed for the component according to its type.\n   *\n   * E.g. `HTMLElement` instance.\n   */\n  abstract readonly element: any;\n\n  /**\n   * A component instance.\n   *\n   * It is an error accessing this property before the component is created, e.g. from inside of component constructor\n   * or {@link DefinitionContext.whenComponent component instantiation event} receiver. A [[whenReady]] callback could\n   * be utilized to work this around.\n   */\n  abstract readonly component: T;\n\n  /**\n   * Component mount.\n   *\n   * This is defined when component is mounted to arbitrary element by [[DefinitionContext.mountTo]]. Ot is `undefined`\n   * for components created in standard way.\n   */\n  abstract readonly mount: ComponentMount<T> | undefined;\n\n  /**\n   * Whether the component is settled.\n   *\n   * Component settlement happens:\n   * - when [[settle]] method is called,\n   * - when component is {@link DefinitionContext.mountTo mounted} to element, or\n   * - when component's element is [[connected]].\n   *\n   * It is guaranteed that component settlement won't happen inside custom element's constructor. So the settlement\n   * event may be used e.g. to start DOM manipulations, as the latter is prohibited inside custom element constructor.\n   *\n   * This becomes `true` right before [[whenSettled]] event is sent.\n   */\n  abstract readonly settled: boolean;\n\n  /**\n   * Whether the component's element is connected.\n   *\n   * This becomes `true` right before [[whenConnected]] event is sent.\n   */\n  abstract readonly connected: boolean;\n\n  /**\n   * An event supply that {@link destroy destroys} component when cut off.\n   */\n  abstract readonly [EventSupply__symbol]: EventSupply;\n\n  /**\n   * Updates component's state.\n   *\n   * This is a shorthand for invoking a component {@link StateUpdater state updater} .\n   *\n   * Note that state update has no effect unless [[StateSupport]] feature is enabled or [[StateUpdater]] context value\n   * is provided by other means.\n   *\n   * @typeparam V  A type of changed value.\n   * @param key  Changed value key.\n   * @param newValue  New value.\n   * @param oldValue  Previous value.\n   */\n  readonly updateState: StateUpdater = updateComponentState.bind(this);\n\n  /**\n   * Extracts component context from its custom element or from component itself.\n   *\n   * @param element  Custom element instance created for the component or the component itself.\n   *\n   * @return Component context reference stored under [[ComponentContext__symbol]] key.\n   *\n   * @throws TypeError  When the given `element` does not contain component context reference.\n   */\n  static of<T extends object>(element: any): ComponentContext<T> {\n\n    const context = element[ComponentContext__symbol];\n\n    if (!context) {\n      throw TypeError(`No component context found in ${element}`);\n    }\n\n    return context;\n  }\n\n  /**\n   * Component content root.\n   *\n   * This is a shorthand for requesting a {@link ContentRoot content root} from component context.\n   */\n  get contentRoot(): any {\n    return this.get(ContentRoot);\n  }\n\n  /**\n   * Builds an `OnEvent` sender of component readiness event.\n   *\n   * The component is constructed shortly after custom element. So the component may not exist when requested\n   * e.g. inside component constructor or {@link DefinitionContext.whenComponent component instantiation event}\n   * receiver. The registered receiver will be notified when the component is constructed.\n   *\n   * If the component is constructed already, the receiver will be notified immediately.\n   *\n   * @returns An `OnEvent` sender of this context upon component readiness.\n   */\n  abstract whenReady(): OnEvent<[this]>;\n\n  /**\n   * Registers a receiver of component readiness event.\n   *\n   * The component is constructed shortly after custom element. So the component may not exist when requested\n   * e.g. inside component constructor or {@link DefinitionContext.whenComponent component instantiation event}\n   * receiver. The registered receiver will be notified when the component is constructed.\n   *\n   * @param receiver  Target receiver of this component upon component readiness.\n   *\n   * @returns Component readiness event supply.\n   */\n  abstract whenReady(receiver: EventReceiver<[this]>): EventSupply;\n\n  /**\n   * Settles component.\n   *\n   * Calling this method has no effect if component is [[settled]] already, when component is not\n   * {@link whenReady ready} yet, or custom element's constructor is not exited.\n   *\n   * Calling this method may trigger DOM manipulations (the latter is prohibited inside custom element's constructor).\n   * This may be desired for rendering optimizations. E.g. to render element's content _before_ adding it to document.\n   *\n   * This method is called automatically when {@link DefinitionContext.mountTo mounting} component to element.\n   */\n  abstract settle(): void;\n\n  /**\n   * Builds an `OnEvent` sender of component settlement event.\n   *\n   * The registered receiver is called when component is [[settled]]. If settled already the receiver is called\n   * immediately.\n   *\n   * @returns An `OnEvent` sender of this component context when settled.\n   */\n  abstract whenSettled(): OnEvent<[this]>;\n\n  /**\n   * Registers a receiver of component settlement event.\n   *\n   * The registered receiver is called when component is [[settled]]. If settled already the receiver is called\n   * immediately.\n   *\n   * @param receiver  Target receiver of this component context when connected.\n   *\n   * @returns Component settlement event supply.\n   */\n  abstract whenSettled(receiver: EventReceiver<[this]>): EventSupply;\n\n  /**\n   * Builds an `OnEvent` sender of component's element connection event.\n   *\n   * The registered receiver is called when component's element is connected. I.e. when custom element's\n   * `connectedCallback()` method is called, or when the element this component is {@link mount mounted to} is\n   * {@link ComponentMount.connect connected}.\n   *\n   * If connected already the receiver is called immediately.\n   *\n   * @returns An `OnEvent` sender of this component context when connected.\n   */\n  abstract whenConnected(): OnEvent<[this]>;\n\n  /**\n   * Registers a receiver of component's element connection event.\n   *\n   * The registered receiver is called when component's element is connected. I.e. when custom element's\n   * `connectedCallback()` method is called, or when the element this component is {@link mount mounted to} is\n   * {@link ComponentMount.connect connected}.\n   *\n   * If connected already the receiver is called immediately.\n   *\n   * @param receiver  Target receiver of this component context when connected.\n   *\n   * @returns Component's element connection event supply.\n   */\n  abstract whenConnected(receiver: EventReceiver<[this]>): EventSupply;\n\n  /**\n   * Returns a DOM event producer for the given event type.\n   *\n   * This is a shorthand for invoking a component event producer function available under\n   * `[ComponentEventProducer.key]` key.\n   *\n   * @param type  An event type to listen for.\n   *\n   * @returns A producer of DOM event events of the given type.\n   */\n  on<E extends Event>(type: string): OnDomEvent<E> {\n    return this.get(ComponentEventDispatcher__key).on(type);\n  }\n\n  /**\n   * Dispatches an event to component element.\n   *\n   * This is a shorthand for invoking a component {@link ComponentEventDispatcher event dispatcher}.\n   *\n   * @param event  An event to dispatch.\n   */\n  dispatchEvent(event: Event): void {\n    this.get(ComponentEventDispatcher__key).dispatch(event);\n  }\n\n  /**\n   * Destroys the component.\n   *\n   * Removes element from the DOM tree. I.e. disconnects custom element first.\n   *\n   * After this method call the component should no longer be used.\n   *\n   * Note that component destruction is virtual. It is up to developer to decide when component is no longer needed.\n   * However the component is destroyed automatically once disconnected, i.e. when custom element's\n   * `disconnectedCallback()` method is called.\n   *\n   * @param reason  Optional reason of destruction.\n   */\n  abstract destroy(reason?: any): void;\n\n}\n\n/**\n * @internal\n */\nfunction updateComponentState<V>(this: ComponentContext<any>, key: StatePath, newValue: V, oldValue: V): void {\n  this.get(StateUpdater)(key, newValue, oldValue);\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { valueProvider } from '@proc7ts/call-thru';\nimport { Class, decoratePropertyAccessor, PropertyAccessorDescriptor } from '../common';\nimport { ComponentDef, ComponentDef__symbol } from './component-def';\nimport { Component, ComponentDecorator } from './component.decorator';\nimport { ComponentClass } from './definition';\n\n/**\n * Component property decorator interface.\n *\n * Allows to construct a {@link ComponentDecorator component decorator} by declaring a virtual property to use instead\n * of decorated one.\n *\n * Constructed by [[ComponentProperty]] function.\n *\n * @category Core\n * @typeparam V  Property value type.\n * @typeparam T  A type of decorated component class.\n */\nexport interface ComponentPropertyDecorator<V, T extends ComponentClass = Class> {\n\n  /**\n   * Decorates component method.\n   *\n   * @typeparam P  Property value type.\n   * @param proto  Decorated class prototype.\n   * @param propertyKey  Decorated property key.\n   * @param descriptor  Decorated property descriptor.\n   *\n   * @returns  Either updated property descriptor, or nothing.\n   */\n  // eslint-disable-next-line\n  <P extends V>(\n      this: void,\n      proto: InstanceType<T>,\n      propertyKey: string | symbol,\n      descriptor?: TypedPropertyDescriptor<P>,\n  ): any | void;\n\n  /**\n   * Builds component decorator assuming the virtual property has the given value.\n   *\n   * @param value  Virtual property value.\n   * @param key  Virtual property key. Defaults to [[AnonymousComponentProperty__symbol]].\n   *\n   * @returns New component decorator.\n   */\n  As(\n      this: void,\n      value: V,\n      key?: string | symbol,\n  ): ComponentDecorator<T>;\n\n  /**\n   * Builds component decorator assuming the virtual property value is provided by the given `provider`.\n   *\n   * @param provider  Virtual property read-only value provider.\n   * @param key  Virtual property key. Defaults to [[AnonymousComponentProperty__symbol]].\n   *\n   * @returns New component decorator.\n   */\n  By(\n      this: void,\n      provider: ComponentProperty.Provider<V, InstanceType<T>>,\n      key?: string | symbol,\n  ): ComponentDecorator<T>;\n\n  /**\n   * Builds component decorator assuming the decorated property is available via the given `accessor`.\n   *\n   * @param accessor  Virtual property accessor.\n   * @param key  Virtual property key. Defaults to [[AnonymousComponentProperty__symbol]].\n   *\n   * @returns New component decorator.\n   */\n  With(\n      this: void,\n      accessor: ComponentProperty.Accessor<V, InstanceType<T>>,\n      key?: string | symbol,\n  ): ComponentDecorator<T>;\n\n  /**\n   * Builds component decorator assuming the decorated property is bound to component with by the given `binder`.\n   *\n   * @param binder  A binder of virtual property accessor\n   * @param key  Virtual property key. Defaults to [[AnonymousComponentProperty__symbol]]..\n   *\n   * @returns New component decorator.\n   */\n  Bind(\n      this: void,\n      binder: ComponentProperty.Binder<V, InstanceType<T>>,\n      key?: string | symbol,\n  ): ComponentDecorator<T>;\n\n}\n\nexport namespace ComponentProperty {\n\n  /**\n   * Component property value provider signature.\n   *\n   * This function will be called each time the property value is requested.\n   *\n   * @typeparam V  Property value type.\n   * @typeparam T  A type of component.\n   */\n  export type Provider<V, T extends object = any> =\n  /**\n   * @param component  Component instance.\n   * @param key  Target property key.\n   *\n   * @returns Property value.\n   */\n      (\n          this: void,\n          component: T,\n          key: string | symbol,\n      ) => V;\n\n  /**\n   * Component property accessor.\n   *\n   * Allows to read and write property value.\n   *\n   * @typeparam V  Property value type.\n   * @typeparam T  A type of component.\n   */\n  export interface Accessor<V, T extends object = any> {\n\n    /**\n     * Reads property value.\n     *\n     * May throw if the property is not readable.\n     *\n     * @param component  Target component instance.\n     * @param key  Property key.\n     *\n     * @returns Property value.\n     */\n    get(this: void, component: T, key: string | symbol): V;\n\n    /**\n     * Assigns new property value.\n     *\n     * May throw is the property is not writable.\n     *\n     * @param component  Target component instance.\n     * @param value  New property value.\n     * @param key  Property key.\n     */\n    set(this: void, component: T, value: V, key: string | symbol): void;\n\n  }\n\n  /**\n   * Property accessor binder signature.\n   *\n   * This is a function that binds a {@link BoundAccessor property accessor} to target component.\n   *\n   * @typeparam V  Property value type.\n   * @typeparam T  A type of component.\n   */\n  export type Binder<V, T extends object = any> =\n  /**\n   * @param component  Target component to bind property accessor to.\n   * @param key  Property key.\n   *\n   * @returns Property accessor bound to `component`.\n   */\n      (\n          this: void,\n          component: T,\n          key: string | symbol,\n      ) => BoundAccessor<V>;\n\n  export interface BoundAccessor<V> {\n\n    /**\n     * Reads bound component's property value.\n     *\n     * An attempt to read the value would throw when omitted.\n     *\n     * @returns Property value.\n     */\n    get?(): V;\n\n    /**\n     * Assigns bound component's new property value.\n     *\n     * An attempt to assign the value would throw when omitted.\n     *\n     * @param value  New property value.\n     */\n    set?(value: V): void;\n\n  }\n\n  /**\n   * Component property descriptor.\n   *\n   * Passed to {@link Definer property definer} by [[ComponentProperty]] function to construct a {@link Definition\n   * property definition}.\n   *\n   * @typeparam V  Property value type.\n   * @typeparam T  A type of component class.\n   */\n  export interface Descriptor<V, T extends ComponentClass = Class> {\n\n    /**\n     * Component class constructor.\n     */\n    readonly type: T;\n\n    /**\n     * Component property key.\n     */\n    readonly key: string | symbol;\n\n    /**\n     * Whether the property is initially writable.\n     *\n     * This can be changed by {@link Definition.get property read definition}.\n     */\n    readonly readable: boolean;\n\n    /**\n     * Whether the property is initially writable.\n     *\n     * This can be changed by {@link Definition.set property assignment definition}.\n     */\n    readonly writable: boolean;\n\n    /**\n     * Whether the property is initially enumerable.\n     *\n     * This can be changed by {@link Definition.enumerable property definition}.\n     */\n    readonly enumerable: boolean;\n\n    /**\n     * Whether the property is initially configurable.\n     *\n     * This can be changed by {@link Definition.configurable property definition}.\n     */\n    readonly configurable: boolean;\n\n    /**\n     * Reads property value.\n     *\n     * May throw if the property is not readable.\n     *\n     * @param component  Target component instance.\n     *\n     * @returns Property value.\n     */\n    get(this: void, component: InstanceType<T>): V;\n\n    /**\n     * Assigns new property value.\n     *\n     * May throw is the property is not writable.\n     *\n     * @param component  Target component instance.\n     * @param value  New property value.\n     */\n    set(this: void, component: InstanceType<T>, value: V): void;\n\n  }\n\n  /**\n   * Component property definition builder signature.\n   *\n   * This is a function called by [[ComponentProperty]] to define the property.\n   *\n   * @typeparam V  Property value type.\n   * @typeparam T  A type of component class.\n   */\n  export type Definer<V, T extends ComponentClass = Class> =\n  /**\n   * @param descriptor  Component property descriptor.\n   *\n   * @returns Component property definition. Or nothing if the property definition is not to be changed.\n   */\n      (\n          this: void,\n          descriptor: Descriptor<V, T>,\n      ) => Definition<V, T> | void;\n\n  /**\n   * Property definition to apply to existing property.\n   *\n   * When applying to decorated property, this definition updates its definition.\n   *\n   * When applying to virtual property assumed by one of [[ComponentPropertyDecorator]] methods, most of returned\n   * values ignored. Except for {@link Definition.componentDef component definition}, {@link Definition.get value\n   * reader}, and {@link Definition.set value setter}.\n   *\n   * @typeparam V  Property value type.\n   * @typeparam T  A type of component class.\n   */\n  export interface Definition<V, T extends ComponentClass = Class> {\n\n    /**\n     * Component definition to apply to component.\n     *\n     * When specified, it is used to enable certain functionality for decorated (or virtual) property.\n     */\n    readonly componentDef?: ComponentDef<InstanceType<T>>;\n\n    /**\n     * Whether to make the property enumerable.\n     *\n     * When specified, it is used as `enumerable` attribute value of decorated property descriptor.\n     */\n    readonly enumerable?: boolean;\n\n    /**\n     * Whether to make the property configurable.\n     *\n     * When specified, it is used as `configurable` attribute value of decorated property descriptor.\n     */\n    readonly configurable?: boolean;\n\n    /**\n     * Reads property value.\n     *\n     * When specified it changes how the property value is read.\n     *\n     * When neither [[get]], nor [[set]] specified, the property access does not change.\n     *\n     * @param component  Target component instance.\n     * @param key  Property key.\n     *\n     * @returns Property value.\n     */\n    get?(this: void, component: InstanceType<T>, key: string | symbol): V;\n\n    /**\n     * Assigns new property value.\n     *\n     * When specified it changes how the property value is assigned.\n     *\n     * When neither [[get]], nor [[set]] specified, the property access does not change.\n     *\n     * @param component  Target component instance.\n     * @param value  New property value.\n     * @param key  Property key.\n     */\n    set?(this: void, component: InstanceType<T>, value: V, key: string | symbol): void;\n\n  }\n\n}\n\n/**\n * Anonymous component property key.\n *\n * Used as a default virtual property key.\n *\n * @category Core\n */\nexport const AnonymousComponentProperty__symbol = (/*#__PURE__*/ Symbol('anonymous-component-property'));\n\n/**\n * Decorator of component property.\n *\n * Updates decorated property and component definition. Can be converted to {@link ComponentDecorator component\n * decorator} by calling appropriate method of returned decorator instance.\n *\n * @category Core\n * @typeparam V  Decorated property value type.\n * @typeparam T  A type of decorated component class.\n * @param define  Component property definition builder.\n *\n * @returns Component property decorator.\n */\nexport function ComponentProperty<V, T extends ComponentClass = Class>(\n    define: ComponentProperty.Definer<V, T>,\n): ComponentPropertyDecorator<V, T> {\n\n  const decorator = (\n      proto: InstanceType<T>,\n      propertyKey: string | symbol,\n      descriptor?: TypedPropertyDescriptor<V>,\n  ): any | void => decoratePropertyAccessor(\n      proto,\n      propertyKey,\n      descriptor,\n      desc => {\n\n        const { get: getValue, set: setValue } = desc;\n        const type = proto.constructor;\n        const { get, set, configurable, enumerable, componentDef = {} } = define({\n          type,\n          key: propertyKey,\n          readable: !!desc.get,\n          writable: !!desc.set,\n          enumerable: !!desc.enumerable,\n          configurable: !!desc.configurable,\n          get: getValue\n              ? ((component: InstanceType<T>) => getValue.call(component))\n              : notReadableAccessor(propertyKey),\n          set: setValue\n              ? ((component, value) => setValue.call(component, value))\n              : notWritableAccessor(propertyKey),\n        }) || {};\n\n        ComponentDef.define(type, componentDef);\n\n        const updated: PropertyAccessorDescriptor<V> = {\n          ...desc,\n          configurable: configurable ?? desc.configurable,\n          enumerable: enumerable ?? desc.enumerable,\n        };\n\n        if (get || set) {\n          updated.get = get && function (this: InstanceType<T>) {\n            return get(this, propertyKey);\n          };\n          updated.set = set && function (this: InstanceType<T>, value: V) {\n            set(this, value, propertyKey);\n          };\n        }\n\n        return updated;\n      },\n  );\n  const decorateWith = (\n      { get, set }: ComponentProperty.Accessor<V, InstanceType<T>>,\n      key: string | symbol = AnonymousComponentProperty__symbol,\n      writable: boolean,\n  ): ComponentDecorator<T> => Component({\n    [ComponentDef__symbol](type: InstanceType<T>) {\n\n      const def = define({\n        type,\n        key,\n        readable: true,\n        writable,\n        enumerable: false,\n        configurable: false,\n        get: component => get(component, key),\n        set: (component, value) => set(component, value, key),\n      });\n\n      return (def && def.componentDef) || {};\n    },\n  });\n  const By = (\n      provider: ComponentProperty.Provider<V, InstanceType<T>>,\n      key?: string | symbol,\n  ): ComponentDecorator<T> => decorateWith(\n      {\n        get(component, key) {\n          return provider(component, key);\n        },\n      } as ComponentProperty.Accessor<V>,\n      key,\n      false,\n  );\n\n  const result = decorator as ComponentPropertyDecorator<V, T>;\n\n  result.With = (access, key) => decorateWith(access, key, true);\n  result.By = By;\n  result.As = (value, key?) => By(valueProvider(value), key);\n  result.Bind = (binder, key = AnonymousComponentProperty__symbol) => {\n\n    const accessor__symbol = Symbol(`${String(key)}:accessor`);\n    const accessor = (component: any): {\n      get(): V;\n      set(value: V): void;\n    } => {\n\n      const existing = component[accessor__symbol];\n\n      if (existing) {\n        return existing;\n      }\n\n      const accessor = binder(component, key);\n\n      return component[accessor__symbol] = {\n        get: accessor.get ? accessor.get.bind(accessor) : notReadableAccessor(key),\n        set: accessor.set ? accessor.set.bind(accessor) : notWritableAccessor(key),\n      };\n    };\n\n    return decorateWith(\n        {\n          get(component) {\n            return accessor(component).get();\n          },\n          set(component, value) {\n            return accessor(component).set(value);\n          },\n        },\n        key,\n        true,\n    );\n  };\n\n  return result;\n}\n\n/**\n * @internal\n */\nfunction notReadableAccessor(propertyKey: string | symbol): () => never {\n  return () => { throw new TypeError(`\"${String(propertyKey)}\" is not readable`); };\n}\n\n/**\n * @internal\n */\nfunction notWritableAccessor(propertyKey: string | symbol): () => never {\n  return () => { throw new TypeError(`\"${String(propertyKey)}\" is not writable`); };\n}\n","import { nextArgs, nextSkip } from '@proc7ts/call-thru';\nimport { EventEmitter, onAny, OnEvent, onEventBy, trackValue } from '@proc7ts/fun-events';\nimport { superClassOf } from '../../common';\nimport { ComponentDef__symbol } from '../../component';\nimport { ComponentClass, DefinitionSetup } from '../../component/definition';\nimport { Unloader } from './unloader.impl';\n\n/**\n * @internal\n */\nexport function onPostDefSetup(\n    componentType: ComponentClass,\n    unloader: Unloader,\n): OnEvent<[DefinitionSetup]> {\n\n  const { on } = postDefSetup(componentType);\n\n  return onEventBy(receiver => {\n    on.to({\n      supply: receiver.supply.needs(unloader.supply),\n      receive(ctx, setup) {\n\n        const whenReady = setup.whenReady().tillOff(unloader.supply).F;\n        const whenComponent = setup.whenComponent().tillOff(unloader.supply).F;\n\n        receiver.receive(ctx, {\n          get componentType() {\n            return setup.componentType;\n          },\n          get whenReady() {\n            return whenReady;\n          },\n          get whenComponent() {\n            return whenComponent;\n          },\n          perDefinition(spec) {\n            return unloader.add(() => setup.perDefinition(spec));\n          },\n          perComponent(spec) {\n            return unloader.add(() => setup.perComponent(spec));\n          },\n        });\n      },\n    });\n  });\n}\n\n/**\n * @internal\n */\nexport interface PostDefSetup<T extends object = any> {\n  readonly on: OnEvent<[DefinitionSetup<T>]>;\n  send(setup: DefinitionSetup): void;\n  setup(setup: DefinitionSetup<T>): void;\n}\n\nconst PostDefSetup__symbol = (/*#__PURE__*/ Symbol('post-def-setup'));\n\n/**\n * @internal\n */\nexport function postDefSetup<T extends object>(componentType: ComponentClass<T>): PostDefSetup<T> {\n  // eslint-disable-next-line no-prototype-builtins\n  if (componentType.hasOwnProperty(PostDefSetup__symbol)) {\n    return (componentType as any)[PostDefSetup__symbol];\n  }\n\n  const tracker = trackValue<DefinitionSetup<T>>();\n  const emitter = new EventEmitter<[DefinitionSetup]>();\n  const onSetup: OnEvent<[DefinitionSetup<T>]> = tracker.read().thru(setup => setup ? nextArgs(setup) : nextSkip());\n  const on = onAny(onSetup, emitter);\n  const superType = superClassOf(componentType, type => ComponentDef__symbol in type);\n\n  if (superType) {\n\n    const superPostDefSetup = postDefSetup(superType);\n\n    on.to(setup => superPostDefSetup.send(setup));\n  }\n\n  const result: PostDefSetup<T> = {\n    on,\n    send(setup) {\n      emitter.send(setup);\n    },\n    setup(setup) {\n      tracker.it = setup;\n    },\n  };\n\n  Object.defineProperty(componentType, PostDefSetup__symbol, { value: result });\n\n  return result;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextValueOpts, ContextValues } from '@proc7ts/context-values';\nimport { ContextUpKey, ContextUpRef } from '@proc7ts/context-values/updatable';\nimport { AfterEvent, afterThe, EventKeeper, nextAfterEvent } from '@proc7ts/fun-events';\nimport { newRenderSchedule, RenderScheduler } from '@proc7ts/render-scheduler';\nimport { BootstrapWindow } from './bootstrap-window';\n\n/**\n * Default rendering tasks scheduler.\n *\n * @category Core\n */\nexport type DefaultRenderScheduler = RenderScheduler;\n\nclass DefaultRenderSchedulerKey extends ContextUpKey<DefaultRenderScheduler, RenderScheduler> {\n\n  readonly upKey: ContextUpKey.UpKey<DefaultRenderScheduler, RenderScheduler>;\n\n  constructor() {\n    super('default-render-scheduler');\n    this.upKey = this.createUpKey(\n        opts => opts.seed.keepThru(\n            (...fns) => {\n              if (fns.length) {\n                return toDefaultRenderScheduler(opts.context, fns[fns.length - 1]);\n              }\n\n              const defaultProvider = (): AfterEvent<[DefaultRenderScheduler]> => afterThe(\n                  toDefaultRenderScheduler(opts.context, newRenderSchedule),\n              );\n\n              return nextAfterEvent(opts.byDefault(defaultProvider) || defaultProvider());\n            },\n        ),\n    );\n  }\n\n  grow<Ctx extends ContextValues>(\n      opts: ContextValueOpts<\n          Ctx,\n          DefaultRenderScheduler,\n          EventKeeper<RenderScheduler[]> | RenderScheduler,\n          AfterEvent<RenderScheduler[]>>,\n      ): DefaultRenderScheduler {\n\n    let delegated!: DefaultRenderScheduler;\n\n    opts.context.get(\n        this.upKey,\n        'or' in opts ? { or: opts.or != null ? afterThe(opts.or) : opts.or } : undefined,\n    )!.to(scheduler => delegated = toDefaultRenderScheduler(opts.context, scheduler));\n\n    return (...args) => delegated(...args);\n  }\n\n}\n\nfunction toDefaultRenderScheduler(\n    context: ContextValues,\n    scheduler: RenderScheduler,\n): DefaultRenderScheduler {\n  return (options = {}) => scheduler({\n    ...options,\n    window: options.window || context.get(BootstrapWindow),\n  });\n}\n\n/**\n * A key of bootstrap, definition, or component context value containing [[DefaultRenderScheduler]] instance.\n *\n * Uses the default `RenderScheduler` (`newRenderSchedule()`) for {@link BootstrapWindow bootstrap window}.\n *\n * @category Core\n */\nexport const DefaultRenderScheduler: ContextUpRef<DefaultRenderScheduler, RenderScheduler> = (\n    /*#__PURE__*/ new DefaultRenderSchedulerKey()\n);\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextValueOpts, ContextValues } from '@proc7ts/context-values';\nimport { ContextUpKey, ContextUpRef } from '@proc7ts/context-values/updatable';\nimport { AfterEvent, afterThe, EventKeeper, nextAfterEvent } from '@proc7ts/fun-events';\nimport { ComponentContext, ComponentContext__symbol } from '../../component';\n\n/**\n * Element adapter is a function able to convert a raw element to component. E.g. mount a component to it.\n *\n * Features may use it internally. E.g. an `AutoConnectSupport` applies it to each added DOM element.\n *\n * Multiple element adapters can be registered in bootstrap context.\n *\n * @category Core\n */\nexport type ElementAdapter =\n/**\n * @param element  Target raw element to adapt.\n *\n * @returns An adapted component's context, or `undefined` if element can not be adapted.\n */\n    (this: void, element: any) => ComponentContext | undefined;\n\n/**\n * @internal\n */\nclass ElementAdapterKey extends ContextUpKey<ElementAdapter, ElementAdapter> {\n\n  readonly upKey: ContextUpKey.UpKey<ElementAdapter, ElementAdapter>;\n\n  constructor() {\n    super('element-adapter');\n    this.upKey = this.createUpKey(\n        opts => opts.seed.keepThru((...adapters) => {\n\n          const combined: ElementAdapter = adapters.reduce(\n              (prev, adapter) => element => prev(element) || adapter(element),\n              defaultElementAdapter,\n          );\n\n          const defaultProvider = (): AfterEvent<[ElementAdapter]> => afterThe(defaultElementAdapter);\n\n          return combined !== defaultElementAdapter\n              ? combined\n              : nextAfterEvent(opts.byDefault(defaultProvider) || defaultProvider());\n        }),\n    );\n  }\n\n  grow<Ctx extends ContextValues>(\n      opts: ContextValueOpts<\n          Ctx,\n          ElementAdapter,\n          EventKeeper<ElementAdapter[]> | ElementAdapter,\n          AfterEvent<ElementAdapter[]>>,\n  ): ElementAdapter {\n\n    let delegated: ElementAdapter;\n\n    opts.context.get(\n        this.upKey,\n        'or' in opts ? { or: opts.or != null ? afterThe(opts.or) : opts.or } : undefined,\n    )!.to(adapter => delegated = adapter);\n\n    return element => delegated(element);\n  }\n\n}\n\n/**\n * @internal\n */\nfunction defaultElementAdapter(element: any): ComponentContext {\n  return element[ComponentContext__symbol];\n}\n\n/**\n * A key of bootstrap context value containing combined [[ElementAdapter]] instance.\n *\n * @category Core\n */\nexport const ElementAdapter: ContextUpRef<ElementAdapter, ElementAdapter> = (/*#__PURE__*/ new ElementAdapterKey());\n","import { ComponentClass, DefinitionContext } from '../../component/definition';\n\n/**\n * @internal\n */\nexport const DefinitionContext__symbol = (/*#__PURE__*/ Symbol('definition-context'));\n\n/**\n * @internal\n */\nexport function definitionContextOf<T extends object>(componentType: ComponentClass<T>): DefinitionContext<T> {\n  // eslint-disable-next-line no-prototype-builtins\n  if (!componentType.hasOwnProperty(DefinitionContext__symbol)) {\n    throw new TypeError(`Component is not defined: ${componentType}`);\n  }\n  return (componentType as any)[DefinitionContext__symbol];\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKey__symbol, SingleContextKey } from '@proc7ts/context-values';\nimport { html__naming, isQualifiedName, QualifiedName } from '@proc7ts/namespace-aliaser';\nimport { BootstrapContext, bootstrapDefault } from '../../boot';\nimport { BootstrapWindow, DefaultNamespaceAliaser } from '../../boot/globals';\nimport { definitionContextOf } from '../../boot/impl/definition-context.symbol.impl';\nimport { Class, PromiseResolver } from '../../common';\nimport { ComponentClass } from './component-class';\n\n/**\n * @internal\n */\nconst CustomElements__key = (/*#__PURE__*/ new SingleContextKey<CustomElements>(\n    'custom-elements',\n    {\n      byDefault: bootstrapDefault(createCustomElements),\n    },\n));\n\n/**\n * Custom elements registry.\n *\n * This is used to register custom elements.\n *\n * Typically implemented by `window.customElements`.\n *\n * @category Core\n */\nexport abstract class CustomElements {\n\n  /**\n   * A key of bootstrap context value containing a `CustomElements` instance used to register custom\n   * elements.\n   *\n   * Target value defaults to `window.customElements` from the window provided under `[BootstrapWindow.key]`.\n   */\n  static get [ContextKey__symbol](): ContextKey<CustomElements> {\n    return CustomElements__key;\n  }\n\n  /**\n   * Defines custom element.\n   *\n   * @param componentTypeOrName  A component class constructor or custom element name. The latter may belong to\n   * namespace to avoid naming conflicts.\n   * @param elementType  A constructor of custom element to define.\n   */\n  abstract define(componentTypeOrName: ComponentClass | QualifiedName, elementType: Class): void;\n\n  /**\n   * Allows to wait for component definition.\n   *\n   * This corresponds to `window.customElements.whenDefined()` method.\n   *\n   * @param componentTypeOrName  Component class constructor or custom element name possibly belonging to some\n   * namespace.\n   *\n   * @return A promise that is resolved when custom element is registered.\n   *\n   * @throws TypeError If `componentType` does not contain a component definition.\n   */\n  abstract whenDefined(componentTypeOrName: ComponentClass | QualifiedName): Promise<void>;\n\n}\n\n/**\n * @internal\n */\nfunction createCustomElements(bsContext: BootstrapContext): CustomElements {\n\n  const customElements: CustomElementRegistry = bsContext.get(BootstrapWindow).customElements;\n  const nsAlias = bsContext.get(DefaultNamespaceAliaser);\n\n  class CustomElements$ extends CustomElements {\n\n    define(componentTypeOrName: ComponentClass | string, elementType: Class): void {\n      if (isQualifiedName(componentTypeOrName)) {\n        customElements.define(html__naming.name(componentTypeOrName, nsAlias), elementType);\n        return;\n      }\n\n      const defContext = definitionContextOf(componentTypeOrName);\n      const { name, extend } = defContext.elementDef;\n\n      if (!name) {\n        componentResolver(componentTypeOrName).resolve(undefined);\n        return; // Anonymous component.\n      }\n      if (extend && extend.name) {\n        customElements.define(\n            html__naming.name(name, nsAlias),\n            elementType,\n            {\n              extends: extend.name,\n            },\n        );\n      } else {\n        customElements.define(html__naming.name(name, nsAlias), elementType);\n      }\n    }\n\n    whenDefined(componentTypeOrName: ComponentClass | string): Promise<void> {\n      if (isQualifiedName(componentTypeOrName)) {\n        return customElements.whenDefined(html__naming.name(componentTypeOrName, nsAlias));\n      }\n\n      const defContext = definitionContextOf(componentTypeOrName);\n      const { name } = defContext.elementDef;\n\n      if (!name) {\n        return componentResolver(componentTypeOrName).promise;\n      }\n\n      return customElements.whenDefined(html__naming.name(name, nsAlias));\n    }\n\n  }\n\n  return new CustomElements$();\n}\n\n/**\n * @internal\n */\nconst ComponentResolver__symbol = (/*#__PURE__*/ Symbol('component-resolver'));\n\n/**\n * @internal\n */\nfunction componentResolver(componentType: any): PromiseResolver {\n  // eslint-disable-next-line no-prototype-builtins\n  if (componentType.hasOwnProperty(ComponentResolver__symbol)) {\n    return componentType[ComponentResolver__symbol];\n  }\n  return componentType[ComponentResolver__symbol] = new PromiseResolver();\n}\n","import { nextArg, nextArgs, nextSkip, valueProvider } from '@proc7ts/call-thru';\nimport {\n  EventReceiver,\n  eventSupply,\n  EventSupply,\n  EventSupply__symbol,\n  eventSupplyOf,\n  OnEvent,\n  trackValue,\n} from '@proc7ts/fun-events';\nimport { ComponentContext, ComponentContext__symbol, ComponentEvent } from '../../component';\nimport { ComponentClass } from '../../component/definition';\nimport { DefinitionContext$ } from './definition-context.impl';\n\nconst enum ComponentStatus {\n  Building,\n  Ready,\n  Built,\n  Settled,\n  Connected,\n}\n\n/**\n * @internal\n */\nexport abstract class ComponentContext$<T extends object> extends ComponentContext<T> {\n\n  readonly get: ComponentContext<T>['get'];\n  private _status = trackValue<ComponentStatus>(ComponentStatus.Building);\n\n  constructor(\n      readonly _definitionContext: DefinitionContext$<T>,\n      readonly element: any,\n  ) {\n    super();\n\n    const registry = _definitionContext._newComponentRegistry();\n\n    registry.provide({ a: ComponentContext, is: this });\n    this.get = registry.newValues().get;\n  }\n\n  get componentType(): ComponentClass<T> {\n    return this._definitionContext.componentType;\n  }\n\n  get component(): T {\n    return this._component();\n  }\n\n  get settled(): boolean {\n    return this._status.it >= ComponentStatus.Settled && !eventSupplyOf(this).isOff;\n  }\n\n  get connected(): boolean {\n    return this._status.it >= ComponentStatus.Connected && !eventSupplyOf(this).isOff;\n  }\n\n  get [EventSupply__symbol](): EventSupply {\n    return eventSupplyOf(this._status);\n  }\n\n  _component(): T {\n    throw new TypeError('Component is not constructed yet. Consider to use a `whenReady()` callback');\n  }\n\n  whenReady(): OnEvent<[this]>;\n  whenReady(receiver: EventReceiver<[this]>): EventSupply;\n  whenReady(receiver?: EventReceiver<[this]>): OnEvent<[this]> | EventSupply {\n    return (this.whenReady = this._status.read().thru_(\n        status => status ? nextArgs(this) : nextSkip(),\n    ).once().F)(receiver);\n  }\n\n  settle(): void {\n    if (this._status.it === ComponentStatus.Built) {\n      // Prevent settling until exiting custom element constructor\n      this._status.it = ComponentStatus.Settled;\n    }\n  }\n\n  whenSettled(): OnEvent<[this]>;\n  whenSettled(receiver: EventReceiver<[this]>): EventSupply;\n  whenSettled(receiver?: EventReceiver<[this]>): OnEvent<[this]> | EventSupply {\n    return (this.whenSettled = this._status.read().thru_(\n        status => status >= ComponentStatus.Settled ? nextArg(this) : nextSkip(),\n    ).once().F)(receiver);\n  }\n\n  whenConnected(): OnEvent<[this]>;\n  whenConnected(receiver: EventReceiver<[this]>): EventSupply;\n  whenConnected(receiver?: EventReceiver<[this]>): OnEvent<[this]> | EventSupply {\n    return (this.whenConnected = this._status.read().thru_(\n        status => status >= ComponentStatus.Connected ? nextArg(this) : nextSkip(),\n    ).once().F)(receiver);\n  }\n\n  destroy(reason?: any): void {\n    try {\n      this._status.done(reason);\n    } finally {\n      delete (this.component as any)[ComponentContext__symbol];\n      delete this.element[ComponentContext__symbol];\n      this._component = componentDestroyed;\n      removeElement(this.element);\n    }\n  }\n\n  _createComponent(): this {\n\n    const whenComponent = this._definitionContext._whenComponent;\n\n    let lastRev = 0;\n\n    this.element[ComponentContext__symbol] = this;\n    whenComponent.readNotifier.once(notifier => lastRev = notifier(this, lastRev));\n    this.whenConnected(() => {\n      whenComponent.readNotifier.to({\n        supply: eventSupply().needs(this),\n        receive: (_, notifier) => {\n          lastRev = notifier(this, lastRev);\n        },\n      });\n    });\n    this._definitionContext._elementBuilder.components.send(this);\n\n    const component = newComponent(this);\n\n    this._component = valueProvider(component);\n    this._status.it = ComponentStatus.Ready; // Issue `whenReady` event\n\n    return this;\n  }\n\n  _connect(): void {\n    this._status.it = ComponentStatus.Connected;\n  }\n\n  _created(): void {\n    if (this._status.it < ComponentStatus.Built) { // Mounted component can be connected already\n      this._status.it = ComponentStatus.Built; // Can settle now\n    }\n    this.whenConnected(\n        () => this.dispatchEvent(new ComponentEvent('wesib:component', { bubbles: true })),\n    );\n  }\n\n}\n\nfunction newComponent<T extends object>(context: ComponentContext<T>): T {\n\n  const type = context.componentType;\n  const proto = type.prototype as any;\n  const prevContext = proto[ComponentContext__symbol];\n\n  proto[ComponentContext__symbol] = context;\n  try {\n\n    const component = new type(context);\n\n    (component as any)[ComponentContext__symbol] = context;\n\n    return component;\n  } finally {\n    proto[ComponentContext__symbol] = prevContext;\n  }\n}\n\nfunction removeElement(element: Element): void {\n\n  const { parentNode } = element;\n\n  if (parentNode) {\n    parentNode.removeChild(element);\n  }\n}\n\nfunction componentDestroyed(): never {\n  throw new TypeError('Component destroyed already');\n}\n","import { SingleContextKey, SingleContextRef } from '@proc7ts/context-values';\nimport { EventEmitter } from '@proc7ts/fun-events';\nimport { ComponentContext } from '../../component';\nimport { ComponentClass, DefinitionContext } from '../../component/definition';\nimport { BootstrapContext } from '../bootstrap-context';\nimport { bootstrapDefault } from '../bootstrap-default';\nimport { DefinitionContext$ } from './definition-context.impl';\n\n/**\n * @internal\n */\nexport interface ElementBuilder {\n  readonly definitions: EventEmitter<[DefinitionContext]>;\n  readonly components: EventEmitter<[ComponentContext]>;\n  buildElement<T extends object>(this: void, componentType: ComponentClass<T>): DefinitionContext<T>;\n}\n\n/**\n * @internal\n */\nexport const ElementBuilder: SingleContextRef<ElementBuilder> = (/*#__PURE__*/ new SingleContextKey<ElementBuilder>(\n    'element-builder',\n    {\n      byDefault: bootstrapDefault(newElementBuilder),\n    },\n));\n\nfunction newElementBuilder(bsContext: BootstrapContext): ElementBuilder {\n  return {\n    definitions: new EventEmitter<[DefinitionContext]>(),\n    components: new EventEmitter<[ComponentContext]>(),\n    buildElement<T extends object>(componentType: ComponentClass<T>) {\n\n      const definitionContext = new DefinitionContext$(bsContext, this, componentType);\n\n      definitionContext._define();\n\n      return definitionContext;\n    },\n  };\n\n}\n","import { filterIt, mapIt } from '@proc7ts/a-iterable';\nimport { isPresent, nextArgs, NextCall, NextSkip, nextSkip } from '@proc7ts/call-thru';\nimport { ContextValueOpts, ContextValues } from '@proc7ts/context-values';\nimport { ContextUpKey } from '@proc7ts/context-values/updatable';\nimport {\n  afterAll,\n  afterEach,\n  AfterEvent,\n  afterEventBy,\n  afterThe,\n  EventKeeper,\n  nextAfterEvent,\n  OnEventCallChain,\n  trackValue,\n} from '@proc7ts/fun-events';\nimport { BootstrapContext } from '../../boot';\nimport { ArraySet, Class } from '../../common';\nimport { FeatureContext } from '../feature-context';\nimport { FeatureContext$ } from './feature-context.impl';\nimport { FeatureClause, FeatureRequest } from './feature-request.impl';\n\nconst FeatureKey__symbol = (/*#__PURE__*/ Symbol('feature-key'));\n\n/**\n * @internal\n */\nexport class FeatureKey extends ContextUpKey<AfterEvent<[FeatureLoader?]>, FeatureClause> {\n\n  static of(feature: Class): FeatureKey {\n    // eslint-disable-next-line no-prototype-builtins\n    return feature.hasOwnProperty(FeatureKey__symbol)\n        ? (feature as any)[FeatureKey__symbol]\n        : ((feature as any)[FeatureKey__symbol] = new FeatureKey(feature));\n  }\n\n  get upKey(): this {\n    return this;\n  }\n\n  private constructor(feature: Class) {\n    super(`feature:${feature.name}`);\n  }\n\n  grow<Ctx extends ContextValues>(\n      opts: ContextValueOpts<\n          Ctx,\n          AfterEvent<[FeatureLoader?]>,\n          EventKeeper<FeatureClause[]> | FeatureClause,\n          AfterEvent<FeatureClause[]>>,\n  ): AfterEvent<[FeatureLoader?]> | null | undefined {\n    return loadFeature(\n        opts.context.get(BootstrapContext),\n        opts.seed.keepThru(preferredFeatureClause),\n    );\n  }\n\n}\n\nfunction preferredFeatureClause(...clauses: FeatureClause[]): FeatureClause | undefined {\n\n  let required = false;\n  let preferred: FeatureClause | undefined;\n\n  for (const clause of clauses) {\n    switch (clause[1]) {\n      case 'is':\n        required = true;\n        if (!preferred) {\n          preferred = clause;\n        }\n        break;\n      case 'has':\n        preferred = clause;\n        break;\n      case 'needs':\n        required = true;\n    }\n  }\n\n  return required ? preferred : undefined;\n}\n\nfunction loadFeature(\n    bsContext: BootstrapContext,\n    from: AfterEvent<[FeatureClause?]>,\n): AfterEvent<[FeatureLoader?]> {\n  return afterEventBy<[FeatureLoader?]>(receiver => {\n\n    let origin: Class | undefined;\n    let source: AfterEvent<[FeatureLoader?]> = afterThe();\n    let stageId: Promise<FeatureStageId> = Promise.resolve('idle');\n\n    return afterAll({\n      clause: from,\n      deps: loadFeatureDeps(bsContext, from),\n    }).keepThru_(({ clause: [clause], deps }): NextCall<OnEventCallChain, [FeatureLoader?]> => {\n      if (!clause) {\n        return nextArgs();\n      }\n\n      const [request, , target] = clause;\n\n      if (request.feature === origin) {\n        return nextAfterEvent(source); // Origin didn't change. Reuse the source.\n      }\n\n      origin = request.feature;\n\n      if (target !== origin) {\n        // Originated from replacement feature provider. Reuse its loader.\n        return nextAfterEvent(source = bsContext.get(FeatureKey.of(origin)).keepThru_(\n            loader => {\n              loader!.to(stageId);\n              stageId = loader!.stage;\n              return loader;\n            },\n        ));\n      }\n\n      // Create feature's own loader\n      const ownLoader = new FeatureLoader(bsContext, request, deps).to(stageId);\n      const ownSource = afterThe(ownLoader);\n\n      return nextAfterEvent(source = afterEventBy<[FeatureLoader]>(\n          rcv => ownSource.to(rcv).whenOff(() => {\n            stageId = ownLoader.unload();\n          }),\n      ).share()); // Can be accessed again when reused\n    }).to(receiver);\n  }).keepThru(\n      preventDuplicateLoader(),\n  );\n}\n\nfunction preventDuplicateLoader():\n    (\n        loader?: FeatureLoader,\n    ) => NextCall<OnEventCallChain, [FeatureLoader?]> | NextSkip {\n\n  let lastLoader: FeatureLoader | null | undefined = null; // Initially `null` to differ from `undefined`\n\n  return (loader?: FeatureLoader) => {\n    if (lastLoader === loader) {\n      return nextSkip();\n    }\n    lastLoader = loader;\n\n    if (!loader) {\n      return nextArgs<[FeatureLoader?]>();\n    }\n\n    return nextArgs<[FeatureLoader?]>(loader);\n  };\n}\n\nfunction loadFeatureDeps(\n    bsContext: BootstrapContext,\n    from: AfterEvent<[FeatureClause?]>,\n): AfterEvent<FeatureLoader[]> {\n  return from.keepThru_(clause => {\n    if (!clause) {\n      return nextArgs();\n    }\n\n    const [{ def }] = clause;\n    const needs = new ArraySet(def.needs);\n\n    if (!needs.size) {\n      return nextArgs();\n    }\n\n    return nextAfterEvent(\n        afterEach(\n            ...mapIt(\n                needs,\n                dep => bsContext.get(FeatureKey.of(dep)),\n            ),\n        ).keepThru_(presentFeatureDeps),\n    );\n  });\n}\n\nfunction presentFeatureDeps(...deps: [FeatureLoader?][]): NextCall<OnEventCallChain, FeatureLoader[]> {\n  return nextArgs<FeatureLoader[]>(\n      ...filterIt<FeatureLoader | undefined, FeatureLoader>(\n          mapIt(deps, dep => dep[0]),\n          isPresent,\n      ),\n  );\n}\n\n/**\n * @internal\n */\nexport class FeatureLoader {\n\n  readonly down: Promise<void>;\n  private _stage: Promise<FeatureStage>;\n  private _down!: () => void;\n  readonly state = trackValue(false);\n\n  constructor(\n      readonly bsContext: BootstrapContext,\n      readonly request: FeatureRequest,\n      readonly deps: FeatureLoader[],\n  ) {\n    this.down = new Promise(resolve => this._down = resolve);\n    this._stage = Promise.resolve(new SetupFeatureStage(this));\n  }\n\n  get stage(): Promise<FeatureStageId> {\n    return this._stage.then(stage => stage.after);\n  }\n\n  get ready(): boolean {\n    return this.state.it;\n  }\n\n  to(stageId: Promise<FeatureStageId>): this {\n\n    const lastStage = this._stage;\n\n    this._stage = stageId.then(id => lastStage.then(stage => stage[id]()));\n\n    return this;\n  }\n\n  async setup(): Promise<void> {\n    await (this._stage = this._stage.then(stage => stage.setup()));\n  }\n\n  async init(): Promise<void> {\n    await (this._stage = this._stage.then(stage => stage.init()));\n  }\n\n  async unload(): Promise<FeatureStageId> {\n\n    const prevStage = this._stage;\n\n    delete this._stage; // Unloaded feature should never be accessed again.\n\n    const stage = await prevStage;\n    const stageId = await stage.stop();\n\n    this._down();\n\n    return stageId;\n  }\n\n}\n\ntype FeatureStageId = 'idle' | 'setup' | 'init';\ntype FeatureStageStop = (this: void) => Promise<any>;\n\nabstract class FeatureStage {\n\n  abstract readonly after: FeatureStageId;\n\n  constructor(\n      readonly loader: FeatureLoader,\n      private readonly _stop: FeatureStageStop = () => Promise.resolve(),\n  ) {}\n\n  idle(): Promise<this> {\n    return Promise.resolve(this);\n  }\n\n  abstract setup(): Promise<FeatureStage>;\n\n  abstract init(): Promise<FeatureStage>;\n\n  stop(): Promise<FeatureStageId> {\n    return this._stop().then(() => this.after);\n  }\n\n  protected perDep(action: (dep: FeatureLoader) => Promise<void>): Promise<any> {\n\n    const { deps } = this.loader;\n\n    return Promise.all(deps.map(dep => action(dep)));\n  }\n\n}\n\nclass SetupFeatureStage extends FeatureStage {\n\n  get after(): 'idle' {\n    return 'idle';\n  }\n\n  async setup(): Promise<FeatureStage> {\n    await this.perDep(loader => loader.setup());\n\n    const { bsContext, request: { def } } = this.loader;\n    const context = new FeatureContext$(bsContext, this.loader);\n    const supply = context._unloader.supply;\n\n    def.setup?.(context);\n\n    return new InitFeatureStage(\n        this.loader,\n        context,\n        () => Promise.resolve(supply.off()),\n    );\n  }\n\n  init(): Promise<FeatureStage> {\n    return this.setup().then(stage => stage.init());\n  }\n\n}\n\nclass InitFeatureStage extends FeatureStage {\n\n  get after(): 'setup' {\n    return 'setup';\n  }\n\n  constructor(\n      state: FeatureLoader,\n      private readonly _context: FeatureContext,\n      stop: FeatureStageStop,\n  ) {\n    super(state, stop);\n  }\n\n  setup(): Promise<FeatureStage> {\n    return Promise.resolve(this);\n  }\n\n  async init(): Promise<FeatureStage> {\n    await this.perDep(loader => loader.init());\n\n    const { request: { def } } = this.loader;\n\n    def.init?.(this._context);\n\n    return new ActiveFeatureStage(this);\n  }\n\n}\n\nclass ActiveFeatureStage extends FeatureStage {\n\n  get after(): 'init' {\n    return 'init';\n  }\n\n  constructor(prev: InitFeatureStage) {\n    super(prev.loader, () => prev.stop());\n    prev.loader.state.it = true;\n  }\n\n  setup(): Promise<FeatureStage> {\n    return Promise.resolve(this);\n  }\n\n  init(): Promise<FeatureStage> {\n    return Promise.resolve(this);\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { nextArgs, nextSkip } from '@proc7ts/call-thru';\nimport { AfterEvent, afterEventBy, EventReceiver, EventSupply, OnEvent, trackValue } from '@proc7ts/fun-events';\nimport { newNamespaceAliaser } from '@proc7ts/namespace-aliaser';\nimport { Class } from '../../common';\nimport { ComponentClass, DefinitionContext } from '../../component/definition';\nimport { FeatureDef, FeatureRef, FeatureStatus } from '../../feature';\nimport { FeatureKey, FeatureLoader, FeatureRequester } from '../../feature/loader';\nimport { BootstrapContext } from '../bootstrap-context';\nimport { DefaultNamespaceAliaser } from '../globals';\nimport { BootstrapContextRegistry } from '../impl';\nimport { whenDefined } from '../impl/when-defined.impl';\n\n/**\n * Bootstraps components.\n *\n * Both features and components can be passed as parameters to this function.\n *\n * @category Core\n * @param features  Features and components to enable.\n *\n * @returns Bootstrap context instance.\n */\nexport function bootstrapComponents(...features: Class[]): BootstrapContext {\n\n  const bootstrapContextRegistry = BootstrapContextRegistry.create();\n  const { bootstrapContext, complete } = initBootstrap(bootstrapContextRegistry);\n  const feature = features.length === 1 ? features[0] : bootstrapFeature(features);\n\n  bootstrapContext.get(FeatureRequester).request(feature);\n  bootstrapContext.get(FeatureKey.of(feature)).to(loader => {\n    loader!.init().then(complete);\n  });\n\n  return bootstrapContext;\n}\n\n/**\n * @internal\n */\nfunction bootstrapFeature(needs: Class[]): Class {\n  return FeatureDef.define(class BootstrapFeature {}, { needs });\n}\n\n/**\n * @internal\n */\nconst enum BootstrapStage {\n  Init,\n  Ready,\n}\n\n/**\n * @internal\n */\nfunction initBootstrap(\n    bootstrapContextRegistry: BootstrapContextRegistry,\n): {\n  bootstrapContext: BootstrapContext;\n  complete(): void;\n} {\n\n  const stage = trackValue<BootstrapStage>(BootstrapStage.Init);\n  const values = bootstrapContextRegistry.values;\n\n  class BootstrapContext$ extends BootstrapContext {\n\n    readonly get = values.get;\n\n    constructor() {\n      super();\n      bootstrapContextRegistry.provide({ a: DefaultNamespaceAliaser, by: newNamespaceAliaser });\n      bootstrapContextRegistry.provide({ a: BootstrapContext, is: this });\n    }\n\n    whenDefined<C extends object>(componentType: ComponentClass<C>): OnEvent<[DefinitionContext<C>]> {\n      return whenDefined(this, componentType);\n    }\n\n    whenReady(): OnEvent<[BootstrapContext]>;\n    whenReady(receiver: EventReceiver<[BootstrapContext]>): EventSupply;\n    whenReady(receiver?: EventReceiver<[BootstrapContext]>): OnEvent<[BootstrapContext]> | EventSupply {\n      return (this.whenReady = stage.read().thru(\n          s => s ? nextArgs(this) : nextSkip(),\n      ).once().F)(receiver);\n    }\n\n    load(feature: Class<any>): FeatureRef {\n\n      interface FeatureInfo {\n        status: FeatureStatus;\n        down?: Promise<void>;\n      }\n\n      const status = afterEventBy<[FeatureInfo]>(receiver => {\n\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        const request = bootstrapContext.get(FeatureRequester).request(feature);\n        const info = trackValue<FeatureInfo>({\n          status: {\n            feature,\n            ready: false,\n          },\n        });\n\n        this.get(FeatureKey.of(feature)).to({\n          supply: receiver.supply,\n          receive(_ctx, ldr) {\n\n            // Present until `request` revoked\n            // But that happens only when supply is cut off.\n            const loader = ldr as FeatureLoader;\n\n            info.it = {\n              status: {\n                feature: loader.request.feature,\n                ready: loader.ready,\n              },\n              down: loader.down,\n            };\n            if (!loader.ready) {\n              loader.init().then(() => {\n                info.it = {\n                  status: {\n                    feature: loader.request.feature,\n                    ready: true,\n                  },\n                  down: loader.down,\n                };\n              });\n            }\n          },\n        }).whenOff(() => {\n          request.unuse(); // Apply this callback _after_ registration complete,\n                           // to prevent receiver call.\n        });\n\n        info.read(receiver);\n      }).share();\n\n      let whenDown: Promise<void>;\n      const supply = status.to(({ down }) => {\n        whenDown = down!;\n      });\n\n      class Ref extends FeatureRef {\n\n        get down(): Promise<void> {\n          return whenDown;\n        }\n\n        read(): AfterEvent<[FeatureStatus]>;\n        read(receiver: EventReceiver<[FeatureStatus]>): EventSupply;\n        read(receiver?: EventReceiver<[FeatureStatus]>): AfterEvent<[FeatureStatus]> | EventSupply {\n          return (this.read = status.tillOff(supply).keepThru(\n              info => info.status,\n          ).F)(receiver);\n        }\n\n        dismiss(reason?: any): Promise<void> {\n          supply.off(reason);\n          return whenDown;\n        }\n\n      }\n\n      return new Ref();\n    }\n\n  }\n\n  const bootstrapContext = new BootstrapContext$();\n\n  return {\n    bootstrapContext,\n    complete(): void {\n      stage.it = BootstrapStage.Ready;\n    },\n  };\n}\n","import { OnEvent, onPromise } from '@proc7ts/fun-events';\nimport { ComponentClass, CustomElements, DefinitionContext } from '../../component/definition';\nimport { BootstrapContext } from '../bootstrap-context';\nimport { definitionContextOf } from './definition-context.symbol.impl';\n\n/**\n * @internal\n */\nexport const WhenDefined__symbol = (/*#__PURE__*/ Symbol('when-defined'));\n\n/**\n * @internal\n */\nexport function whenDefined<T extends object>(\n    bsContext: BootstrapContext,\n    componentType: ComponentClass<T>,\n): OnEvent<[DefinitionContext<T>]> {\n  // eslint-disable-next-line no-prototype-builtins\n  if (componentType.hasOwnProperty(WhenDefined__symbol)) {\n    return (componentType as any)[WhenDefined__symbol];\n  }\n\n  const result: OnEvent<[DefinitionContext<T>]> = onPromise(\n      Promise.resolve(bsContext.whenReady())\n          .then(() => bsContext.get(CustomElements).whenDefined(componentType))\n          .then(() => definitionContextOf(componentType)),\n  );\n\n  return (componentType as any)[WhenDefined__symbol] = result;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\n/**\n * A path to sub-state containing element an attributes.\n *\n * Thus, an attribute state path is always something like `[AttributePath__root, 'attribute-name']`.\n *\n * @category Feature\n */\nexport const AttributePath__root = (/*#__PURE__*/ Symbol('attribute'));\n\n/**\n * A path to the named attribute state.\n *\n * @category Feature\n */\nexport type AttributePath = readonly [keyof AttributePath__rootKeys, string];\n\n/**\n * Constructs a named attribute state path.\n *\n * @category Feature\n * @param name  Target attribute name.\n *\n * @return Attribute state path.\n */\nexport function attributePathTo(name: string): AttributePath {\n  return [AttributePath__root, name];\n}\n\n/**\n * @category Feature\n */\n// eslint-disable-next-line @typescript-eslint/class-name-casing\nexport interface AttributePath__rootKeys {\n  [AttributePath__root]: true;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { noop } from '@proc7ts/call-thru';\nimport { StatePath } from '@proc7ts/fun-events';\nimport { ComponentContext } from '../../component';\nimport { AttributeUpdateReceiver } from './attribute-def';\nimport { AttributeChangedCallback } from './attribute-descriptor';\nimport { attributePathTo } from './attribute-path';\n\n/**\n * @internal\n */\nexport function attributeStateUpdate<T extends object>(\n    name: string,\n    updateState: boolean | AttributeUpdateReceiver<T> | StatePath = true,\n): AttributeChangedCallback<T> {\n  if (updateState === false) {\n    return noop;\n  }\n  if (updateState === true || typeof updateState === 'function') {\n\n    const path = attributePathTo(name);\n    const update: AttributeUpdateReceiver<T> = updateState === true ? updateAttributeState : updateState;\n\n    return (component: T, newValue, oldValue) => update(component, path, newValue, oldValue);\n  }\n\n  return (component: T, newValue, oldValue) => updateAttributeState(component, updateState, newValue, oldValue);\n}\n\nfunction updateAttributeState<T extends object>(\n    component: T,\n    path: StatePath,\n    newValue: string | null,\n    oldValue: string | null,\n): void {\n  ComponentContext.of(component).updateState(path, newValue, oldValue);\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\n/**\n * Converts property name to _dash-style_ attribute name.\n *\n * - Any ASCII uppercase letter A to Z is transformed into a dash followed by its lowercase counterpart;\n * - other characters are left unchanged.\n *\n * @category Feature\n * @param name  Property name to convert.\n *\n * @returns  _dash-style_ attribute name.\n */\nexport function property2attributeName(name: string): string {\n\n  let result: string | undefined;\n\n  for (let i = 0; i < name.length; ++i) {\n\n    const c = name[i];\n\n    if (c <= 'Z' && c >= 'A') {\n      if (!result) {\n        // Allocate result on first conversion\n        result = name.substring(0, i);\n      }\n      result += '-' + c.toLowerCase();\n    } else if (result) {\n      result += c;\n    }\n  }\n\n  return result || name;\n}\n","import { ContextKey, ContextKey__symbol, SingleContextKey } from '@proc7ts/context-values';\nimport { BootstrapWindow } from '../../boot/globals';\nimport { ArraySet, Class, mergeFunctions } from '../../common';\nimport { isArray } from '../../common/types.impl';\nimport { ComponentContext, ComponentMount } from '../../component';\nimport { DefinitionContext } from '../../component/definition';\nimport { AttributeChangedCallback, AttributeDescriptor } from './attribute-descriptor';\n\nconst AttributeRegistry__key = (/*#__PURE__*/ new SingleContextKey<AttributeRegistry>('attribute-registry'));\n\n/**\n * @internal\n */\nexport class AttributeRegistry<T extends object = any> {\n\n  static get [ContextKey__symbol](): ContextKey<AttributeRegistry> {\n    return AttributeRegistry__key;\n  }\n\n  private _attrs?: Map<string, AttributeChangedCallback<T>>;\n\n  constructor(private readonly _context: DefinitionContext) {\n  }\n\n  get attrs(): Map<string, AttributeChangedCallback<T>> {\n    if (this._attrs) {\n      return this._attrs;\n    }\n\n    const attrs = new Map<string, AttributeChangedCallback<T>>();\n\n    this._context.get(AttributeDescriptor).forEach(desc => {\n\n      const { name, change } = desc;\n\n      attrs.set(name, mergeFunctions(attrs.get(name), change));\n    });\n\n    return this._attrs = attrs;\n  }\n\n  define(elementType: Class): void {\n\n    const attrs = this.attrs;\n\n    if (!attrs.size) {\n      return; // No attributes defined\n    }\n\n    Object.defineProperty(elementType, 'observedAttributes', {\n      configurable: true,\n      enumerable: true,\n      value: observedAttributes(elementType, attrs.keys()),\n    });\n    Object.defineProperty(elementType.prototype, 'attributeChangedCallback', {\n      configurable: true,\n      enumerable: true,\n      value: attributeChangedCallback(elementType, attrs),\n    });\n  }\n\n  mount(mount: ComponentMount<T>): void {\n\n    const element = mount.element;\n    const attrs = this.attrs;\n    const attributeFilter = Array.from(attrs.keys());\n\n    if (!attributeFilter.length) {\n      return; // No attributes defined\n    }\n\n    const MutationObserver = this._context.get(BootstrapWindow).MutationObserver;\n    const observer = new MutationObserver(\n        records => records.forEach(\n            record => {\n\n              const attributeName = record.attributeName as string;\n\n              return attrs.get(attributeName)!(\n                  ComponentContext.of<T>(element).component,\n                  element.getAttribute(attributeName),\n                  record.oldValue,\n              );\n            },\n        ),\n    );\n\n    observer.observe(element, {\n      attributes: true,\n      attributeFilter,\n      attributeOldValue: true,\n    });\n  }\n\n}\n\n/**\n * @internal\n */\ntype ElementAttributeChanged = (\n    this: any,\n    name: string,\n    oldValue: string | null,\n    newValue: string | null,\n) => void;\n\n/**\n * @internal\n */\nfunction observedAttributes(\n    elementType: Class,\n    attrs: Iterable<string>,\n): readonly string[] {\n\n  const alreadyObserved: readonly string[] | undefined = (elementType as any).observedAttributes;\n\n  return Array.from(isArray<string>(alreadyObserved)\n      ? new ArraySet(alreadyObserved).addAll(attrs).items\n      : attrs);\n}\n\n/**\n * @internal\n */\nfunction attributeChangedCallback<T extends object>(\n    elementType: Class,\n    attrs: Map<string, AttributeChangedCallback<T>>,\n): ElementAttributeChanged {\n\n  const prevCallback: ElementAttributeChanged | undefined = elementType.prototype.attributeChangedCallback;\n\n  if (!prevCallback) {\n    return function (name, oldValue, newValue) {\n      attrs.get(name)!(ComponentContext.of<T>(this).component, newValue, oldValue);\n    };\n  }\n\n  return function (name, oldValue, newValue) {\n\n    const attrChanged = attrs.get(name);\n\n    if (attrChanged) {\n      attrChanged(ComponentContext.of<T>(this).component, newValue, oldValue);\n    } else {\n      prevCallback.call(this, name, oldValue, newValue);\n    }\n  };\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { StatePath } from '@proc7ts/fun-events';\nimport { Class } from '../../common';\nimport { Component, ComponentDecorator } from '../../component';\nimport { ComponentClass } from '../../component/definition';\nimport { AttributeUpdateReceiver } from './attribute-def';\nimport { AttributeDescriptor } from './attribute-descriptor';\nimport { attributeStateUpdate } from './attribute-state-update.impl';\nimport { AttributesSupport } from './attributes-support.feature';\nimport { property2attributeName } from './property2attribute-name';\n\n/**\n * Creates a component decorator declaring supported custom element's attributes.\n *\n * This decorator automatically enables [[AttributesSupport]] feature.\n *\n * @category Feature\n * @typeparam T  A type of decorated component class.\n * @param items  Attributes definition options.\n *\n * @return New component decorator.\n */\nexport function Attributes<T extends ComponentClass = Class>(\n    ...items: readonly Attributes.Item<InstanceType<T>>[]\n): ComponentDecorator<T> {\n  return Component({\n    feature: { needs: AttributesSupport },\n    setup(setup) {\n      for (const item of items) {\n        if (typeof item === 'string') {\n\n          const name = property2attributeName(item);\n\n          setup.perDefinition({\n            a: AttributeDescriptor,\n            is: {\n              name,\n              change: attributeStateUpdate(name),\n            },\n          });\n        } else {\n          for (const [key, updateState] of Object.entries(item)) {\n\n            const name = property2attributeName(key);\n\n            setup.perDefinition({\n              a: AttributeDescriptor,\n              is: {\n                name,\n                change: attributeStateUpdate(name, updateState),\n              },\n            });\n          }\n        }\n      }\n    },\n  });\n}\n\nexport namespace Attributes {\n\n  /**\n   * Attribute definition item.\n   *\n   * This is either an attribute name (_camelCase_ or _dash-style_), or a per-attribute options map.\n   *\n   * @typeparam T  A type of component.\n   */\n  export type Item<T extends object> = Map<T> | string;\n\n  /**\n   * Per-attribute definition options.\n   *\n   * This is a map with attribute names as keys (either _camelCase_ or _dash-style_), and their state update\n   * instructions as values.\n   *\n   * The state update instruction can be one of:\n   * - `false` to not update the component state,\n   * - `true` to update the component state with changed attribute key,\n   * - a state value key to update, or\n   * - an attribute update receiver function with custom state update logic.\n   *\n   * @typeparam T  A type of component.\n   */\n  export interface Map<T extends object> {\n    readonly [name: string]: boolean | StatePath | AttributeUpdateReceiver<T>;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { noop } from '@proc7ts/call-thru';\nimport { ContextRef, ContextValues, SingleContextKey } from '@proc7ts/context-values';\nimport { StatePath } from '@proc7ts/fun-events';\nimport { RenderSchedule, RenderScheduleOptions, RenderShot } from '@proc7ts/render-scheduler';\nimport { ComponentState } from '../state';\nimport { ElementRenderCtl } from './element-render-ctl';\nimport { ElementRenderer } from './element-renderer';\nimport { RenderDef } from './render-def';\n\n/**\n * A signature of element render scheduler.\n *\n * Schedules render shots to be executed by {@link ElementRenderCtl element render control}.\n *\n * Available in component context. Requires {@link StateSupport state support} to be enabled.\n *\n * @category Feature\n */\nexport type ElementRenderScheduler =\n/**\n * @param options  Options of constructed element render schedule.\n *\n * @returns New render schedule.\n */\n    (this: void, options?: ElementRenderScheduleOptions) => RenderSchedule;\n\n/**\n * Options for render schedule.\n *\n * This is passed to {@link ElementRenderScheduler element render scheduler} when constructing new render schedule.\n *\n * Generic `RenderSchedule` options are ignored.\n *\n * @category Feature\n */\nexport interface ElementRenderScheduleOptions extends RenderScheduleOptions, RenderDef {\n\n  /**\n   * When to start the rendering.\n   *\n   * One of:\n   * - `settled` - start rendering when component is {@link ComponentContext.settled settled}.\n   * - `connected` (the default) - start rendering when component's element is {@link ComponentContext.connected\n   *   connected} to document.\n   */\n  readonly when?: 'settled' | 'connected';\n\n  /**\n   * A path to component state part the schedule should update when new render shot is scheduled.\n   *\n   * An unique one will be constructed when omitted.\n   */\n  readonly path?: StatePath;\n\n  /**\n   * Reports rendering error. E.g. a render shot execution failure.\n   *\n   * @param messages  Error messages to report.\n   */\n  error?(...messages: any[]): void;\n\n}\n\n/**\n * @internal\n */\nfunction newElementRenderScheduler(context: ContextValues): ElementRenderScheduler {\n\n  const ElementRenderShot__root = Symbol('element-render-shot');\n  let scheduleSeq = 0;\n  const renderCtl = context.get(ElementRenderCtl);\n  const state = context.get(ComponentState);\n\n  return (opts = {}): RenderSchedule => {\n\n    const { path = [ElementRenderShot__root, ++scheduleSeq] } = opts;\n    let recentShot: RenderShot = noop;\n    const renderer: ElementRenderer = execution => {\n      recentShot(execution);\n    };\n\n    renderCtl.renderBy(renderer, RenderDef.merge(opts, { path }));\n\n    return (shot: RenderShot): void => {\n\n      const prevShot = shot;\n\n      recentShot = shot;\n      state.update(path, shot, prevShot);\n    };\n  };\n}\n\n/**\n * A key of component context value containing {@link ElementRenderScheduler element render scheduler}.\n *\n * @category Feature\n */\nexport const ElementRenderScheduler: ContextRef<ElementRenderScheduler> = (\n    /*#__PURE__*/ new SingleContextKey<ElementRenderScheduler>(\n        'element-render-scheduler',\n        {\n          byDefault: newElementRenderScheduler,\n        },\n    )\n);\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ComponentContext, ComponentContext__symbol } from '../../component';\nimport { FeatureDef, FeatureDef__symbol } from '../feature-def';\nimport { ShadowDomEvent } from './shadow-dom-event';\nimport { ShadowRootBuilder } from './shadow-root-builder';\n\n/**\n * @internal\n */\nconst ShadowDomSupport__feature: FeatureDef = {\n  setup(setup) {\n    setup.provide({ a: ShadowRootBuilder, is: attachShadow });\n  },\n};\n\n/**\n * Shadow root support feature.\n *\n * This feature is automatically enabled when {@link AttachShadow @AttachShadow} decorator is used.\n *\n * @category Feature\n */\nexport class ShadowDomSupport {\n\n  static get [FeatureDef__symbol](): FeatureDef {\n    return ShadowDomSupport__feature;\n  }\n\n}\n\n/**\n * @internal\n */\nfunction attachShadow(context: ComponentContext, init: ShadowRootInit): ShadowRoot | undefined {\n\n  const element = context.element;\n  const shadowRoot = shadowRootOf(element, init);\n\n  if (shadowRoot) {\n    (shadowRoot as any)[ComponentContext__symbol] = context;\n    context.whenConnected(() => context.dispatchEvent(new ShadowDomEvent(\n        'wesib:shadowAttached',\n        { bubbles: true },\n    )));\n  }\n\n  return shadowRoot;\n}\n\n/**\n * @internal\n */\nfunction shadowRootOf(element: Element, init: ShadowRootInit): ShadowRoot | undefined {\n\n  const existing = element.shadowRoot;\n\n  if (existing) {\n    // Shadow root already attached. Using it.\n    return existing;\n  }\n  if ('attachShadow' in element) {\n    return element.attachShadow(init);\n  }\n\n  return; // Unable to attach shadow root.\n}\n","import { HthvItem } from './hthv-item';\n\n/**\n * @internal\n */\nexport interface HthvPartial<I extends HthvItem<any, any, any> = HthvItem> {\n  $: I['$'];\n  n?: I['n'];\n  t?: I['t'];\n  v: I['v'];\n  x?: I['x'];\n  p?: I['p'];\n  pl?: I['pl'];\n}\n\n/**\n * @internal\n */\nexport function hthvItem<I extends HthvItem<any, any, any>>(\n    {\n      $,\n      n,\n      t,\n      v,\n      x = [],\n      p = {},\n      pl = [],\n    }: HthvPartial<I>,\n): I {\n  return {\n    $,\n    n,\n    t,\n    v,\n    x,\n    p,\n    pl,\n  } as I;\n}\n","import { HthvItem, HthvParamItem } from '../hthv-item';\n\n/**\n * @internal\n */\nexport function addParam(\n    {\n      p,\n      pl,\n    }: HthvItem,\n    param: HthvParamItem,\n): void {\n\n  const key = param.n || param.v;\n  const prev = p[key];\n\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  if (!prev || !prev.n && param.n) {\n    p[key] = param;\n  }\n  pl.push(param);\n}\n","import { HthvDelimiter } from '../hthv-delimiter';\nimport { ParserConfig } from './parser-config';\nimport { ParserInput } from './parser-input';\n\n/**\n * @internal\n */\nexport function angleBracketsParser(\n    config: ParserConfig,\n): (input: ParserInput, out: (v: string) => void) => boolean {\n  return (input, out) => {\n     if (!(config.delimiterOf(input.s[input.i]) & HthvDelimiter.AngleBracketStart)) {\n       return false;\n     }\n\n     let result = '';\n\n     ++input.i;\n     while (input.i < input.s.length) {\n\n       const c = input.s[input.i++];\n\n       if (config.delimiterOf(c) & HthvDelimiter.AngleBracketEnd) {\n         break;\n       }\n       result += c;\n     }\n\n     out(result);\n\n     return true;\n  };\n}\n","import { ParserConfig } from './parser-config';\nimport { ParserInput } from './parser-input';\n\n/**\n * @internal\n */\nexport function nextInItem(config: ParserConfig): (input: ParserInput) => string {\n  return input => {\n\n    const c = input.s[input.i];\n\n    input.d = config.delimiterOf(c);\n\n    return c;\n  };\n}\n","import { ParserInput } from './parser-input';\n\nconst datePattern = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d\\d (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d\\d\\d\\d \\d\\d:\\d\\d:\\d\\d GMT/;\n\n/**\n * @internal\n */\nexport function parseDateTime(input: ParserInput, out: (value: string) => void): boolean {\n  input.s = input.s.substring(input.i);\n  input.i = 0;\n  if (datePattern.test(input.s)) {\n    out(input.s.substring(input.i, input.i += 29));\n    return true;\n  }\n  return false;\n}\n","import { HthvDelimiter } from '../hthv-delimiter';\nimport { ParserConfig } from './parser-config';\nimport { ParserInput } from './parser-input';\n\n/**\n * @internal\n */\nexport function quotedStringParser(\n    config: ParserConfig,\n): (input: ParserInput, out: (value: string) => void) => void {\n  return (input, out) => {\n\n    let unquoted = '';\n\n    ++input.i;\n    for (; input.i < input.s.length; ++input.i) {\n\n      const c = input.s[input.i];\n\n      if (c === '\\\\') {\n\n        const next = input.s[++input.i];\n\n        if (next) {\n          unquoted += next;\n        } else {\n          unquoted += c;\n        }\n      } else if (config.delimiterOf(c) & HthvDelimiter.Quote) {\n        ++input.i;\n        out(unquoted);\n        return;\n      } else {\n        unquoted += c;\n      }\n    }\n\n    out(unquoted);\n  };\n}\n","import { HthvDelimiter } from '../hthv-delimiter';\nimport { HthvExtraItem, HthvItem, HthvItemType } from '../hthv-item';\nimport { hthvItem } from '../hthv-partial.impl';\nimport { angleBracketsParser } from './angle-brackets-parser';\nimport { nextInItem } from './next-in-item';\nimport { parseDateTime } from './parse-date-time';\nimport { parseNone } from './parse-none';\nimport { quotedStringParser } from './quoted-string-parser';\nimport { ParserConfig } from './parser-config';\nimport { ParserInput } from './parser-input';\n\n/**\n * @internal\n */\nexport interface ItemParserOpts {\n  named?: boolean;\n  tagged?: boolean;\n  extra?: boolean;\n  next?: (input: ParserInput) => string;\n}\n\n/**\n * @internal\n */\nexport function itemParser(\n    config: ParserConfig,\n    {\n      named = true,\n      tagged = true,\n      extra = true,\n      next = nextInItem(config),\n    }: ItemParserOpts = {},\n): (input: ParserInput, out: (param: HthvItem<any, any, any>) => void) => boolean {\n\n  const parseQuotedString = quotedStringParser(config);\n  const parseAngleBrackets = angleBracketsParser(config);\n  const parseExtra = extra ? itemParser(config, { next, tagged: false, named: false, extra: false }) : parseNone;\n\n  return (input, out) => {\n\n    let name = '';\n    let type: HthvItemType = 'raw';\n    let tag: string | undefined;\n    let value: string | undefined;\n\n    while (input.i < input.s.length) {\n\n      const c = next(input);\n\n      if (input.d) {\n        if (input.d & (HthvDelimiter.Item | HthvDelimiter.Parameter)) {\n          break;\n        }\n        if (value == null) {\n          if (input.d & HthvDelimiter.Assignment) {\n            value = name ? '' : c;\n            ++input.i;\n            continue;\n          }\n          if (input.d & HthvDelimiter.Quote) {\n            if (tagged || !name) {\n              parseQuotedString(input, v => {\n                if (name) {\n                  type = 'tagged-string';\n                  tag = name;\n                } else {\n                  type = 'quoted-string';\n                }\n                name = '';\n                value = v;\n              });\n            }\n            break;\n          }\n          if (!name && parseAngleBrackets(input, v => {\n            type = 'angle-bracketed-string';\n            value = v;\n          })) {\n            break;\n          }\n          value = name;\n          name = '';\n        } else if (input.d & HthvDelimiter.Quote) {\n          if (tagged || !value) {\n            parseQuotedString(input, v => {\n              if (value) {\n                type = 'tagged-string';\n                tag = value;\n              } else {\n                type = 'quoted-string';\n              }\n              value = v;\n            });\n          }\n          break;\n        } else if (!value && parseAngleBrackets(input, v => {\n          type = 'angle-bracketed-string';\n          value = v;\n        })) {\n          break;\n        }\n      }\n\n      if (value == null) {\n        if (!name && parseDateTime(input, v => value = v)) {\n          type = 'date-time';\n          break;\n        }\n        if (named) {\n          name += c;\n        } else {\n          value = c;\n        }\n      } else if (!value && parseDateTime(input, v => value = v)) {\n        type = 'date-time';\n        break;\n      } else {\n        value += c;\n      }\n\n      ++input.i;\n    }\n\n    let item: HthvItem<any, any>;\n\n    if (value == null) {\n      if (!name) {\n        return false;\n      }\n      item = hthvItem({ $: type, v: name });\n    } else {\n      item = hthvItem({ $: type, n: name || undefined, t: tag, v: value });\n    }\n\n    // noinspection StatementWithEmptyBodyJS\n    while (parseExtra(input, extraItem => item.x.push(extraItem as HthvExtraItem))); // eslint-disable-line curly\n\n    out(item);\n\n    return true;\n  };\n}\n","import { HthvDelimiter } from '../hthv-delimiter';\nimport { ParserConfig } from './parser-config';\nimport { ParserInput } from './parser-input';\n\n/**\n * @internal\n */\nexport function nextInComment(config: ParserConfig): (input: ParserInput) => string {\n  return input => {\n\n    let c = input.s[input.i];\n\n    if (c !== '\\\\') {\n      input.d = config.delimiterOf(c);\n      return c;\n    }\n\n    ++input.i;\n    if (input.i < input.s.length) {\n      c = input.s[input.i];\n      input.d = config.delimiterOf(c) ? HthvDelimiter.NonToken : HthvDelimiter.None;\n    } else {\n      input.d = HthvDelimiter.NonToken;\n    }\n\n    return c;\n  };\n}\n","import { HthvDelimiter } from '../hthv-delimiter';\nimport { ParserConfig } from './parser-config';\nimport { ParserInput } from './parser-input';\n\n/**\n * @internal\n */\nexport function spacesParser(config: ParserConfig): (input: ParserInput) => boolean {\n  return input => {\n\n    const start = input.i;\n\n    do {\n\n      const c = input.s[input.i];\n\n      if (!(config.delimiterOf(c) & HthvDelimiter.Space)) {\n        break;\n      }\n      input.i++;\n    } while (input.i < input.s.length);\n\n    return input.i !== start;\n  };\n}\n","import { HthvDelimiter } from '../hthv-delimiter';\nimport { HthvParamItem } from '../hthv-item';\nimport { itemParser, ItemParserOpts } from './item-parser';\nimport { ParserConfig } from './parser-config';\nimport { ParserInput } from './parser-input';\nimport { spacesParser } from './spaces-parser';\n\n/**\n * @internal\n */\nexport function paramParser(\n    config: ParserConfig,\n    opts: ItemParserOpts = {},\n): (input: ParserInput, out: (param: HthvParamItem) => void) => boolean {\n\n  const skipSpaces = spacesParser(config);\n  const parseItem = itemParser(config, { ...opts, tagged: false });\n\n  return (input, out) => {\n    if (!(config.delimiterOf(input.s[input.i]) & HthvDelimiter.Parameter)) {\n      return false;\n    }\n\n    ++input.i;\n    skipSpaces(input);\n\n    return parseItem(input, out);\n  };\n}\n","import { HthvDelimiter, HthvDelimiterChar } from '../hthv-delimiter';\nimport { HthvDelimitConfig } from '../hthv-parser';\n\n/**\n * @internal\n */\nexport interface ParserConfig {\n  delimiterOf(char: string): number;\n}\n\n/**\n * @internal\n */\nexport type DelimitConfig = { [char in HthvDelimiterChar]: number };\n\n/**\n * @internal\n */\nexport const defaultDelimit: DelimitConfig = {\n  ' ': HthvDelimiter.NonToken | HthvDelimiter.Space | HthvDelimiter.Item,\n  '\\t': HthvDelimiter.NonToken | HthvDelimiter.Space | HthvDelimiter.Item,\n  ',': HthvDelimiter.NonToken | HthvDelimiter.Item,\n  ';': HthvDelimiter.NonToken | HthvDelimiter.Parameter,\n  '\"': HthvDelimiter.NonToken | HthvDelimiter.Escaped | HthvDelimiter.Quote,\n  '\\\\': HthvDelimiter.NonToken | HthvDelimiter.Escaped,\n  '<': HthvDelimiter.NonToken | HthvDelimiter.AngleBracketStart,\n  '>': HthvDelimiter.NonToken | HthvDelimiter.AngleBracketEnd,\n  '=': HthvDelimiter.NonToken | HthvDelimiter.Assignment,\n  '(': HthvDelimiter.NonToken,\n  ')': HthvDelimiter.NonToken,\n  '/': HthvDelimiter.NonToken,\n  ':': HthvDelimiter.NonToken,\n  '?': HthvDelimiter.NonToken,\n  '@': HthvDelimiter.NonToken,\n  '[': HthvDelimiter.NonToken,\n  ']': HthvDelimiter.NonToken,\n  '{': HthvDelimiter.NonToken,\n  '}': HthvDelimiter.NonToken,\n};\n\n/**\n * @internal\n */\nexport function buildParserConfig(\n    {\n      delimit,\n    }: {\n      delimit?: HthvDelimitConfig;\n    } = {},\n): ParserConfig {\n\n  const delimitConfig: DelimitConfig = delimit ? { ...defaultDelimit, ...delimit } : defaultDelimit;\n\n  return {\n    delimiterOf(c) {\n      return delimitConfig[c as HthvDelimiterChar]\n          || (c >= '\\u0000' && c <= ' ' || c === '\\u007f' ? HthvDelimiter.NonToken : HthvDelimiter.None);\n    },\n  };\n}\n\n/**\n * @internal\n */\nexport const defaultParserConfig = (/*#__PURE__*/ buildParserConfig());\n\n/**\n * @internal\n */\nexport const commentParserConfig = (/*#__PURE__*/ buildParserConfig({\n  delimit: {\n    ':': HthvDelimiter.NonToken | HthvDelimiter.Assignment,\n    '(': HthvDelimiter.NonToken | HthvDelimiter.Escaped | HthvDelimiter.Comment,\n    ')': HthvDelimiter.NonToken | HthvDelimiter.Escaped | HthvDelimiter.Item,\n    ' ': HthvDelimiter.NonToken | HthvDelimiter.Space,\n    '\\t': HthvDelimiter.NonToken | HthvDelimiter.Space,\n    '=': HthvDelimiter.NonToken,\n    ',': HthvDelimiter.NonToken,\n  },\n}));\n","/**\n * @packageDocumentation\n * @module @proc7ts/http-header-value\n */\nimport { HthvDelimiterChar } from './hthv-delimiter';\nimport { HthvItem } from './hthv-item';\nimport { hthvItem } from './hthv-partial.impl';\nimport {\n  addParam,\n  buildParserConfig,\n  commentParser,\n  commentParserConfig,\n  defaultParserConfig,\n  itemDelimitParser,\n  itemParser,\n  paramParser,\n  parseNone,\n  ParserInput,\n} from './parser';\n\n/**\n * HTTP header value parser signature.\n *\n * Splits the value onto {@link HthvItem items}.\n *\n * @typeparam N  Whether parsed items have {@link HthvItem.n names}.\n * @typeparam T  Whether parsed items have {@link HthvItem.t tags}.\n * @typeparam P  Whether parsed items have {@link HthvItem.p parameters}.\n */\nexport type HthvParser<\n    N extends 'has-name' | 'no-name' = 'has-name' | 'no-name',\n    T extends 'has-tag' | 'no-tag' = 'has-tag' | 'no-tag',\n    P extends 'has-params' | 'no-params' = 'has-params' | 'no-params'> =\n/**\n * @param value  HTTP header value to parse.\n *\n * @returns An array of parsed value items.\n */\n    (this: void, value: string) => HthvItem<N, T, P>[];\n\n/**\n * A configuration of HTTP header value parser.\n *\n * This is used to {@link newHthvParser configure new parser}.\n */\nexport interface HthvParserConfig {\n\n  /**\n   * Delimits configuration.\n   *\n   * An object literal with {@link HthvDelimiterChar supported delimiter characters} as keys\n   * and corresponding {@link HthvDelimiter delimiters} as values.\n   */\n  readonly delimit?: HthvDelimitConfig;\n\n  /**\n   * Whether to parse comments.\n   *\n   * `false` by default.\n   */\n  readonly comments?: boolean;\n\n}\n\n/**\n * Delimits configuration for HTTP header value parser.\n *\n * This is an object literal with {@link HthvDelimiterChar supported delimiter characters} as keys\n * and corresponding {@link HthvDelimiter delimiters} as values.\n *\n * The default delimiter configuration is used for omitted characters.\n */\nexport type HthvDelimitConfig = { readonly [char in HthvDelimiterChar]?: number };\n\n/**\n * Creates and configures new HTTP header value parser.\n *\n * @param config  New parser configuration.\n *\n * @returns New HTTP header value parser function.\n */\nexport function newHthvParser(config?: HthvParserConfig): HthvParser {\n\n  const parserConfig = config ? buildParserConfig(config) : defaultParserConfig;\n  const parseItemDelimit = itemDelimitParser(parserConfig);\n  const parseParam = paramParser(parserConfig);\n  const parseItem = itemParser(parserConfig);\n  const parseComment = config?.comments ? commentParser(commentParserConfig) : parseNone;\n\n  return headerValue => {\n\n    const result: HthvItem[] = [];\n    const input: ParserInput = { i: 0, s: headerValue };\n\n    // noinspection StatementWithEmptyBodyJS\n    while (parseTopLevelItem()); // eslint-disable-line curly\n\n    return result;\n\n    function parseTopLevelItem(): boolean {\n      return input.i < input.s.length && (\n          parseItemDelimit(input)\n          || parseParam(\n              input,\n              param => {\n                if (!result.length) {\n                  result.push(hthvItem({ $: 'raw', v: '' }));\n                }\n                addParam(result[result.length - 1], param);\n              },\n          )\n          || parseComment(input, item => result.push(item))\n          || parseItem(input, item => result.push(item))\n      );\n    }\n  };\n}\n","import { HthvDelimiter } from '../hthv-delimiter';\nimport { ParserConfig } from './parser-config';\nimport { ParserInput } from './parser-input';\nimport { spacesParser } from './spaces-parser';\n\n/**\n * @internal\n */\nexport function itemDelimitParser(config: ParserConfig): (input: ParserInput) => boolean {\n\n  const skipSpaces = spacesParser(config);\n\n  return input => {\n    if (config.delimiterOf(input.s[input.i]) & HthvDelimiter.Item) {\n      input.i++;\n      skipSpaces(input);\n      return true;\n    }\n    return false;\n  };\n}\n","import { HthvDelimiter } from '../hthv-delimiter';\nimport { HthvItem } from '../hthv-item';\nimport { hthvItem } from '../hthv-partial.impl';\nimport { addParam } from './add-param';\nimport { itemParser, ItemParserOpts } from './item-parser';\nimport { nextInComment } from './next-in-comment';\nimport { paramParser } from './param-parser';\nimport { spacesParser } from './spaces-parser';\nimport { ParserConfig } from './parser-config';\nimport { ParserInput } from './parser-input';\n\n/**\n * @internal\n */\nexport function commentParser(config: ParserConfig): (input: ParserInput, out: (item: HthvItem) => void) => boolean {\n\n  const skipSpaces = spacesParser(config);\n  const commentParserOpts: ItemParserOpts = {\n    next: nextInComment(config),\n  };\n  const parseItem = itemParser(config, commentParserOpts);\n  const parseParam = paramParser(config, commentParserOpts);\n\n  return (input, out) => {\n    if (!(config.delimiterOf(input.s[input.i]) & HthvDelimiter.Comment)) {\n      return false;\n    }\n\n    ++input.i;\n\n    let result: HthvItem | undefined;\n\n    // noinspection StatementWithEmptyBodyJS\n    while ( // eslint-disable-line curly\n        skipSpaces(input)\n        || parseParam(\n            input,\n            param => {\n              if (!result) {\n                result = hthvItem({ $: 'raw', v: '' });\n              }\n              addParam(result, param);\n            },\n        )\n        || parseItem(input, item => result = item)\n        );\n\n    ++input.i; // closing parent\n    out(result || hthvItem({ $: 'raw', v: '' }));\n\n    return true;\n  };\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/http-header-value\n */\nimport { HthvDelimiter } from './hthv-delimiter';\nimport { defaultParserConfig } from './parser';\n\n/**\n * Conditionally encloses HTTP header value or its part into double quotes.\n *\n * Quotes will be added if delimiter or special character is present in input `string`, or the input `string` is empty.\n * {@link hthvEscapeQ Escapes} `\"` and `\\` symbols.\n *\n * @param string  A string to quote.\n *\n * @returns Either a string enclosed in double quotes, or original `string` if there is no need to quote it.\n */\nexport function hthvQuote(string: string): string {\n  if (!string) {\n    return '\"\"';\n  }\n\n  let escaped: undefined | string;\n  let quote = false;\n\n  for (let i = 0; i < string.length; ++i) {\n\n    const c = string[i];\n    const delimiter = defaultParserConfig.delimiterOf(c);\n\n    if (delimiter) {\n      if (delimiter & HthvDelimiter.Escaped) {\n        if (!escaped) {\n          escaped = string.substring(0, i);\n        }\n        escaped += '\\\\' + c;\n      }\n      quote = true;\n    } else if (escaped) {\n      escaped += c;\n    }\n  }\n\n  return quote ? `\"${escaped || string}\"` : string;\n}\n","import { nextArg } from '@proc7ts/call-thru';\nimport { ContextValueOpts, ContextValues } from '@proc7ts/context-values';\nimport { ContextUpKey, ContextUpRef } from '@proc7ts/context-values/updatable';\nimport {\n  AfterEvent,\n  afterThe,\n  EventKeeper,\n  EventSender,\n  nextAfterEvent,\n  OnEvent,\n  onSupplied,\n} from '@proc7ts/fun-events';\n\n/**\n * @internal\n */\ntype FetchAgent<Res extends any[]> = (\n    this: void,\n    next: (this: void, request?: Request) => OnEvent<Res>,\n    request: Request,\n) => EventSender<Res>;\n\n/**\n * @internal\n */\ntype CombinedFetchAgent<Res extends any[]> = (\n    this: void,\n    next: (this: void, request: Request) => OnEvent<Res>,\n    request: Request,\n) => OnEvent<Res>;\n\n/**\n * @internal\n */\nexport class FetchAgentKey<Res extends any[]>\n    extends ContextUpKey<CombinedFetchAgent<Res>, FetchAgent<Res>>\n    implements ContextUpRef<CombinedFetchAgent<Res>, FetchAgent<Res>> {\n\n  readonly upKey: ContextUpKey.UpKey<CombinedFetchAgent<Res>, FetchAgent<Res>>;\n\n  constructor(name: string) {\n    super(name);\n    this.upKey = this.createUpKey(\n        opts => opts.seed.keepThru(\n            (...agents) => {\n              if (agents.length) {\n                return nextArg(combineFetchAgents(agents));\n              }\n\n              const defaultProvider = (): AfterEvent<[CombinedFetchAgent<Res>]> => afterThe(defaultFetchAgent);\n\n              return nextAfterEvent(opts.byDefault(defaultProvider) || defaultProvider());\n            },\n        ),\n    );\n  }\n\n  grow<Ctx extends ContextValues>(\n      opts: ContextValueOpts<\n          Ctx,\n          CombinedFetchAgent<Res>,\n          EventKeeper<FetchAgent<Res>[]> | FetchAgent<Res>,\n          AfterEvent<FetchAgent<Res>[]>>,\n  ): CombinedFetchAgent<Res> {\n\n    let delegated!: CombinedFetchAgent<Res>;\n\n    opts.context.get(\n        this.upKey,\n        'or' in opts ? { or: opts.or != null ? afterThe(opts.or) : opts.or } : undefined,\n    )!.to(agent => delegated = agent);\n\n    return (next, request) => delegated(next, request);\n  }\n\n}\n\n/**\n * @internal\n */\nfunction defaultFetchAgent<Res extends any[]>(\n    next: (this: void, request: Request) => OnEvent<Res>,\n    request: Request,\n): OnEvent<Res> {\n  return next(request);\n}\n\n/**\n * @internal\n */\nexport function combineFetchAgents<Res extends any[]>(agents: FetchAgent<Res>[]): CombinedFetchAgent<Res> {\n  return (next, request) => {\n\n    const fetch: (agentIdx: number, agentRequest: Request) => OnEvent<Res> = (agentIdx, agentRequest) => {\n\n      const agent = agents[agentIdx];\n\n      if (!agent) {\n        return next(agentRequest);\n      }\n\n      return onSupplied(\n          agent(\n              (nextRequest = agentRequest) => fetch(agentIdx + 1, nextRequest),\n              agentRequest,\n          ),\n      );\n    };\n\n    return fetch(0, request);\n  };\n}\n","import { EventEmitter, EventSupply, eventSupply, OnEvent, onEventBy } from '@proc7ts/fun-events';\nimport { DomEventDispatcher } from '@proc7ts/fun-events/dom';\nimport { BootstrapContext, BootstrapWindow } from '@wesib/wesib';\nimport { HttpFetch } from './http-fetch';\nimport { HttpFetchAgent } from './http-fetch-agent';\n\nconst HttpFetchAborted = {};\n\n/**\n * @internal\n */\nexport function newHttpFetch(context: BootstrapContext): HttpFetch {\n\n  const window = context.get(BootstrapWindow);\n  const agent = context.get(HttpFetchAgent);\n\n  return (input, init) => agent(fetch, new Request(input, init));\n\n  function fetch(request: Request): OnEvent<[Response]> {\n    return onEventBy(receiver => {\n\n      const responseEmitter = new EventEmitter<[Response]>();\n      let supply: EventSupply;\n\n      if ('AbortController' in window) {\n\n        const abortController = new (window as any).AbortController();\n        const { signal } = abortController;\n\n        supply = eventSupply(reason => {\n          if (reason === HttpFetchAborted) {\n            abortController.abort();\n          }\n        });\n        receiver.supply.whenOff(() => supply.off(HttpFetchAborted)).needs(supply);\n        responseEmitter.on({\n          supply,\n          receive(ctx, response) {\n            receiver.receive(ctx, response);\n          },\n        });\n\n        const customSignal = request.signal;\n\n        if (customSignal) {\n          new DomEventDispatcher(customSignal).on('abort').once(() => abortController.abort());\n          if (customSignal.aborted) {\n            abortController.abort();\n          }\n        }\n\n        request = new Request(request, { signal });\n      } else {\n        supply = responseEmitter.on(receiver);\n      }\n\n      window.fetch(request)\n          .then(response => {\n            responseEmitter.send(response);\n            supply.off();\n          })\n          .catch(reason => supply.off(reason));\n    });\n  }\n}\n","import { ContextKey, ContextKey__symbol, SingleContextKey } from '@proc7ts/context-values';\nimport { EventEmitter, OnEvent, trackValue, ValueTracker } from '@proc7ts/fun-events';\nimport { DomEventDispatcher } from '@proc7ts/fun-events/dom';\nimport {\n  BootstrapContext,\n  BootstrapRoot,\n  ComponentContext,\n  ComponentContext__symbol,\n  ComponentEvent,\n} from '@wesib/wesib';\n\n/**\n * @internal\n */\nexport type HierarchyRoot = ValueTracker<ComponentContext | undefined>;\n\n/**\n * @internal\n */\nexport const HierarchyRoot = (/*#__PURE__*/ new SingleContextKey<HierarchyRoot>(\n    'hierarchy-root',\n    {\n      byDefault: bsContext => {\n\n        const root: Element = bsContext.get(BootstrapRoot);\n\n        new DomEventDispatcher(root).on<ComponentEvent>('wesib:component').to(\n            ({ context }: ComponentEvent) => context.get(HierarchyUpdates).issue(),\n        );\n\n        return trackValue();\n      },\n    },\n));\n\nconst HierarchyUpdates__key = (/*#__PURE__*/ new SingleContextKey<HierarchyUpdates>(\n    'hierarchy-updates',\n    {\n      byDefault: context => new HierarchyUpdates(context.get(ComponentContext)),\n    },\n));\n\n/**\n * @internal\n */\nexport class HierarchyUpdates {\n\n  static get [ContextKey__symbol](): ContextKey<HierarchyUpdates> {\n    return HierarchyUpdates__key;\n  }\n\n  readonly on: OnEvent<[ComponentContext]>;\n  readonly send: (this: void) => void;\n  readonly issue: () => void;\n\n  constructor(context: ComponentContext) {\n\n    const updates = new EventEmitter<[ComponentContext]>();\n    const hierarchyRoot = context.get(BootstrapContext).get(HierarchyRoot);\n\n    this.on = updates.on();\n    this.send = () => updates.send(context);\n    this.issue = () => {\n\n      const parent = findParentContext(context);\n\n      if (parent) {\n        parent[0].get(HierarchyUpdates).send();\n      } else {\n        hierarchyRoot.it = context;\n      }\n    };\n  }\n\n}\n\n/**\n * @internal\n */\nexport function findParentContext(of: ComponentContext): [ComponentContext, boolean] | undefined {\n\n  const root = of.get(BootstrapContext).get(BootstrapRoot);\n  let element: Node = of.element;\n  let immediate = true;\n\n  if (element === root) {\n    return;\n  }\n  for (;;) {\n\n    const parent = element.parentNode;\n\n    if (!parent) {\n      return;\n    }\n\n    const ctx: ComponentContext = (parent as any)[ComponentContext__symbol];\n\n    if (ctx) {\n      return [ctx, immediate];\n    }\n    if (parent === root) {\n      return;\n    }\n\n    immediate = false;\n    element = parent;\n  }\n}\n","import { filterIt, flatMapIt, itsEach, itsFirst, itsIterator, mapIt, overArray } from '@proc7ts/a-iterable';\nimport { isPresent, nextArg, valuesProvider } from '@proc7ts/call-thru';\nimport {\n  AfterEvent,\n  afterEventBy,\n  afterSent,\n  afterSupplied,\n  EventEmitter,\n  EventReceiver,\n  EventSupply,\n  OnEvent,\n  onEventBy,\n} from '@proc7ts/fun-events';\nimport { html__naming } from '@proc7ts/namespace-aliaser';\nimport {\n  BootstrapContext,\n  ComponentClass,\n  DefaultNamespaceAliaser,\n  ElementObserver,\n  ElementObserverInit,\n  isElement,\n} from '@wesib/wesib';\nimport { ElementNode, ElementPickMode } from './element-node';\nimport { ElementNodeList } from './element-node-list';\n\n/**\n * @internal\n */\nconst WATCH_DEEP: ElementObserverInit = { subtree: true };\n\n/**\n * @internal\n */\nexport function elementNodeList<N extends ElementNode>(\n    bsContext: BootstrapContext,\n    root: Element,\n    selectorOrType: string | ComponentClass<any>,\n    nodeOf: (node: Element, optional?: boolean) => N | undefined,\n    { deep, all }: ElementPickMode,\n): ElementNodeList<N> {\n\n  const updates = new EventEmitter<[N[], N[]]>();\n  const init = deep ? WATCH_DEEP : undefined;\n  let cache = new Set<Element>();\n  let iterable: Iterable<N> | undefined;\n  let selector: string | undefined;\n  const overNodes: (nodes: NodeList) => Iterable<Node> = deep ? overNodeSubtree : overArray;\n\n  if (typeof selectorOrType === 'string') {\n    selector = selectorOrType;\n  } else {\n    bsContext.whenDefined(selectorOrType).then(({ elementDef: { name } }) => {\n      iterable = undefined;\n      if (name) {\n        selector = html__naming.name(name, bsContext.get(DefaultNamespaceAliaser));\n        if (updates.size) {\n          // Refresh selection after component name resolution.\n          // This is needed  when new document loaded.\n\n          const selected = refresh();\n\n          if (selected.size) {\n\n            const added = Array.from(\n                filterIt<N | undefined, N>(\n                    mapIt(selected, node => nodeOf(node)),\n                    isPresent,\n                ),\n            );\n\n            /* istanbul ignore if. Can not test native custom element */\n            if (added.length) {\n              updates.send(added, []);\n            }\n          }\n        }\n      }\n    });\n  }\n\n  if (!all) {\n    root.addEventListener('wesib:component', event => {\n\n      const element = event.target as Element;\n\n      if (cache.has(element)) {\n\n        const node = nodeOf(element) as N;\n\n        updates.send([node], []);\n      }\n    });\n  }\n\n  class ElementNodeList$ extends ElementNodeList<N> {\n\n    onUpdate(): OnEvent<[N[], N[]]>;\n    onUpdate(receiver: EventReceiver<[N[], N[]]>): EventSupply;\n    onUpdate(receiver?: EventReceiver<[N[], N[]]>): OnEvent<[N[], N[]]> | EventSupply {\n\n      const observer = bsContext.get(ElementObserver)(update);\n\n      return (this.onUpdate = onEventBy<[N[], N[]]>(receiver => {\n\n        const firstReceiver = !updates.size;\n        const supply = updates.on(receiver);\n\n        if (firstReceiver) {\n          refresh();\n          observer.observe(root, init);\n        }\n\n        return supply.whenOff(() => {\n          if (!updates.size) {\n            observer.disconnect();\n            clearCache(); // clear cache as there is no more receivers\n          }\n        });\n      }).F)(receiver);\n    }\n\n    read(): AfterEvent<[ElementNodeList<N>]>;\n    read(receiver: EventReceiver<[ElementNodeList<N>]>): EventSupply;\n    read(receiver?: EventReceiver<[ElementNodeList<N>]>): AfterEvent<[ElementNodeList<N>]> | EventSupply {\n      return (this.read = afterSent<[ElementNodeList<N>]>(\n          this.onUpdate().thru(() => this),\n          valuesProvider(this),\n      ).F)(receiver);\n    }\n\n    track(): AfterEvent<[readonly N[], readonly N[]]>;\n    track(receiver: EventReceiver<[readonly N[], readonly N[]]>): EventSupply;\n    track(\n        receiver?: EventReceiver<[readonly N[], readonly N[]]>,\n    ): AfterEvent<[readonly N[], readonly N[]]> | EventSupply {\n\n      const onUpdate: OnEvent<[readonly N[], readonly N[]]> = this.onUpdate();\n\n      return (this.track = afterEventBy<[readonly N[], readonly N[]]>(receiver => {\n\n        const initialEmitter = new EventEmitter<[readonly N[], readonly N[]]>();\n\n        initialEmitter.on(receiver);\n        initialEmitter.send(Array.from(this), []);\n\n        onUpdate.to(receiver);\n      }).F)(receiver);\n    }\n\n    first(): AfterEvent<[N?]>;\n    first(receiver: EventReceiver<[N?]>): EventSupply;\n    first(receiver?: EventReceiver<[N?]>): AfterEvent<[N?]> | EventSupply {\n      return (this.first = afterSupplied(this.read()).keepThru(\n          list => nextArg<N | undefined>(itsFirst(list)),\n      ).F)(receiver);\n    }\n\n    [Symbol.iterator](): Iterator<N> {\n      return itsIterator(iterable || (iterable = filterIt<N | undefined, N>(\n          mapIt(\n              elements(),\n              element => nodeOf(element),\n          ),\n          isPresent,\n      )));\n    }\n\n  }\n\n  return new ElementNodeList$();\n\n  function elements(): Set<Element> {\n    return updates.size ? cache : refresh();\n  }\n\n  function clearCache(): void {\n    iterable = undefined;\n    cache.clear();\n  }\n\n  function refresh(): Set<Element> {\n    iterable = undefined;\n\n    const list = select();\n\n    if (updates.size) {\n      cache = list; // cache is for receivers only\n    }\n\n    return list;\n  }\n\n  function select(): Set<Element> {\n\n    const sel = selector;\n\n    if (!sel) {\n      return new Set();\n    }\n    if (deep) {\n      return new Set(overArray(root.querySelectorAll(sel)));\n    }\n    return new Set(\n        filterIt(\n            overArray(root.children),\n            item => item.matches(sel),\n        ),\n    );\n  }\n\n  function update(mutations: MutationRecord[]): void {\n\n    const added: N[] = [];\n    const removed: N[] = [];\n\n    mutations.forEach(mutation => {\n      itsEach(\n          filterIt<N | undefined, N>(\n              mapIt(overNodes(mutation.removedNodes), removeNode),\n              isPresent,\n          ),\n          node => removed.push(node),\n      );\n      itsEach(\n          filterIt<N | undefined, N>(\n              mapIt(overNodes(mutation.addedNodes), addNode),\n              isPresent,\n          ),\n          node => added.push(node),\n      );\n    });\n    if (added.length || removed.length) {\n      updates.send(added, removed);\n    }\n  }\n\n  function addNode(node: Node): N | undefined {\n    if (!isElement(node)) {\n      return;\n    }\n    if (selector && node.matches(selector) && !cache.has(node)) {\n      cache.add(node);\n      return nodeOf(node);\n    }\n    return;\n  }\n\n  function removeNode(node: Node): N | undefined {\n    if (!isElement(node)) {\n      return;\n    }\n    if (!cache.delete(node)) {\n      return;\n    }\n    return nodeOf(node, true);\n  }\n\n}\n\nfunction overNodeSubtree(nodes: NodeList): Iterable<Node> {\n  return flatMapIt(\n      overArray(nodes),\n      node => [node, ...overNodeSubtree(node.childNodes)],\n  );\n}\n","import { ValueTracker } from '@proc7ts/fun-events';\nimport {\n  BootstrapContext,\n  ComponentClass,\n  ComponentContext,\n  ComponentContext__symbol,\n  ComponentEvent,\n  ElementAdapter,\n} from '@wesib/wesib';\nimport { ComponentNode, ComponentTreeNode, ElementNode, ElementPickMode } from './element-node';\nimport { ElementNodeList } from './element-node-list';\nimport { elementNodeList } from './element-node-list.impl';\nimport { NodeAttributes } from './node-attributes.impl';\nimport { NodeProperties } from './node-properties.impl';\n\n/**\n * @internal\n */\nconst ElementNode__symbol = (/*#__PURE__*/ Symbol('element-node'));\n\n/**\n * @internal\n */\nclass ElementNode$ implements ComponentTreeNode {\n\n  private readonly _attrs: NodeAttributes;\n  private readonly _props: NodeProperties;\n\n  constructor(private readonly _bs: BootstrapContext, readonly element: Element) {\n    this._attrs = new NodeAttributes(_bs, element);\n    this._props = new NodeProperties(element);\n    (element as any)[ElementNode__symbol] = this;\n\n    const context = (element as any)[ComponentContext__symbol] as ComponentContext<any> | undefined;\n\n    if (context) {\n      this._bind(context);\n    } else {\n      element.addEventListener('wesib:component', event => this._bind((event as ComponentEvent).context));\n    }\n  }\n\n  get context(): ComponentContext<any> | undefined {\n    return (this.element as any)[ComponentContext__symbol];\n  }\n\n  get parent(): ElementNode | null {\n\n    const parent = this.element.parentNode;\n\n    return parent && elementNodeOf(this._bs, parent as Element);\n  }\n\n  select(selector: string | ComponentClass<any>, mode?: ElementPickMode): ElementNodeList<any> {\n    return selectNodes(this._bs, this.element, selector, mode);\n  }\n\n  attribute(name: string): ValueTracker<string | null> {\n    return this._attrs.get(name);\n  }\n\n  property<V>(key: PropertyKey): ValueTracker<V> {\n    return this._props.get(key);\n  }\n\n  private _bind(context: ComponentContext): void {\n    this._props.bind(context);\n  }\n\n}\n\n/**\n * @internal\n */\nexport function elementNodeOf(bsContext: BootstrapContext, element: Element, optional?: boolean): ElementNode {\n\n  const existing: ElementNode = (element as any)[ElementNode__symbol];\n\n  return (existing || optional) ? existing : new ElementNode$(bsContext, element);\n}\n\n/**\n * @internal\n */\nfunction selectNodes(\n    bsContext: BootstrapContext,\n    root: Element,\n    selector: string | ComponentClass<any>,\n    mode: ElementPickMode = {},\n): ElementNodeList<any> {\n  if (mode.all) {\n    return elementNodeList<ElementNode>(\n        bsContext,\n        root,\n        selector,\n        (element, optional) => elementNodeOf(bsContext, element, optional),\n        mode,\n    );\n  }\n\n  const adapter = bsContext.get(ElementAdapter);\n\n  return elementNodeList<ComponentNode>(\n      bsContext,\n      root,\n      selector,\n      (element, optional) => adapter(element) && elementNodeOf(bsContext, element, optional) as ComponentNode,\n      mode,\n  );\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\n/**\n * Extracts URL contained in the hash of another URL.\n *\n * Extracted hash URL is based on origin of the original URL. Still, it may be absolute one.\n *\n * Input URL is never altered.\n *\n * @param url  An URL to extract hash from.\n *\n * @returns URL extracted from hash.\n */\nexport function getHashURL(url: URL): URL {\n  return new URL(url.hash.substring(1), url.origin);\n}\n\n/**\n * Creates an URL based on original one, but with hash substituted by the given hash URL.\n *\n * The hash URL is substituted as following:\n *\n * 1. If the hash URL's origin is not the same as the one of the base one, or if it contains a username,\n *    then absolute hash URL is substituted:\n * 2. Otherwise:\n *    - pathname is substituted, unless it is equal to `/` and no hash and search parameters present,\n *    - search parameters are substituted when at least one present,\n *    - hash is substituted only when present.\n *\n * Input URLs are never altered.\n *\n * @param url  Base URL.\n * @param hashURL  Hash URL to substitute.\n *\n * @returns URL with updated hash.\n */\nexport function setHashURL(url: URL, hashURL: URL): URL {\n  if (hashURL.origin !== url.origin || hashURL.username) {\n    return new URL('#' + hashURL, url);\n  }\n\n  const { pathname, search, hash } = hashURL;\n  const result = new URL('', url);\n\n  result.hash = (search || hash || pathname.length > 1) ? (pathname + search + hash) : (search + hash);\n\n  return result;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { nextArg } from '@proc7ts/call-thru';\nimport { ContextValueOpts, ContextValues } from '@proc7ts/context-values';\nimport { ContextUpKey, ContextUpRef } from '@proc7ts/context-values/updatable';\nimport { AfterEvent, afterThe, EventKeeper, nextAfterEvent } from '@proc7ts/fun-events';\nimport { BootstrapWindow } from '@wesib/wesib';\nimport { Navigation } from './navigation';\nimport { Page } from './page';\nimport { PageParam } from './page-param';\nimport Target = Navigation.Target;\n\n/**\n * Navigation agent signature.\n *\n * The agent is called by navigation methods when leaving current page and may alter navigation processing.\n * E.g. change navigation target. For that it should be registered in appropriate context.\n *\n * All registered agents are organized into chain. The first agent in chain is called by navigation method.\n */\nexport type NavigationAgent =\n/**\n * @param next  Either calls the next agent in chain, or applies the final navigation target if this agent is the last\n * one. Not calling this function effectively prevents navigation.\n * Accepts an optional [[Navigation.Target]] parameter. The original target will be used instead when omitted.\n * @param when  When navigation occurred. Either `pretend`, `pre-open`, or `pre-replace`.\n * @param from  The page to leave.\n * @param to  Navigation target page.\n */\n    (\n        this: void,\n        next: (this: void, target?: Target) => void,\n        when: 'pretend' | 'pre-open' | 'pre-replace',\n        from: Page,\n        to: Page,\n    ) => void;\n\n/**\n * @internal\n */\nclass NavigationAgentKey\n    extends ContextUpKey<NavigationAgent.Combined, NavigationAgent>\n    implements ContextUpRef<NavigationAgent.Combined, NavigationAgent> {\n\n  readonly upKey: ContextUpKey.UpKey<NavigationAgent.Combined, NavigationAgent>;\n\n  constructor(name: string) {\n    super(name);\n    this.upKey = this.createUpKey(\n        opts => {\n\n          const { document } = opts.context.get(BootstrapWindow);\n\n          return opts.seed.keepThru(\n              (...agents) => {\n                if (agents.length) {\n                  return nextArg(combinedAgent);\n                }\n\n                const defaultProvider = (): AfterEvent<[NavigationAgent.Combined]> => afterThe(defaultNavigationAgent);\n\n                return nextAfterEvent(opts.byDefault(defaultProvider) || defaultProvider());\n\n                function combinedAgent(\n                    next: (this: void, target: Navigation.URLTarget) => void,\n                    when: 'pretend' | 'pre-open' | 'pre-replace',\n                    from: Page,\n                    to: Page,\n                ): void {\n\n                  return navigate(0, to);\n\n                  function navigate(agentIdx: number, agentTo: Page): void {\n\n                    const agent = agents[agentIdx];\n\n                    if (!agent) {\n                      return next(agentTo);\n                    }\n\n                    agent(\n                        (\n                            {\n                              url: nextURL = agentTo.url,\n                              title: nextTitle = agentTo.title,\n                              data: nextData = agentTo.data,\n                            }: Navigation.Target = agentTo,\n                        ) => navigate(\n                            agentIdx + 1,\n                            {\n                              url: new URL(String(nextURL), document.baseURI),\n                              title: nextTitle,\n                              data: nextData,\n                              get visited() {\n                                return agentTo.visited;\n                              },\n                              get current() {\n                                return agentTo.current;\n                              },\n                              get<T>(ref: PageParam.Ref<T, unknown>): T | undefined {\n                                return agentTo.get(ref);\n                              },\n                              put(ref, input) {\n                                agentTo.put(ref, input);\n                              },\n                            },\n                        ),\n                        when,\n                        from,\n                        agentTo,\n                    );\n                  }\n                }\n              },\n          );\n        },\n    );\n  }\n\n  grow<Ctx extends ContextValues>(\n      opts: ContextValueOpts<\n          Ctx,\n          NavigationAgent.Combined,\n          EventKeeper<NavigationAgent[]> | NavigationAgent,\n          AfterEvent<NavigationAgent[]>>,\n  ): NavigationAgent.Combined {\n\n    let delegated: NavigationAgent.Combined;\n\n    opts.context.get(\n        this.upKey,\n        'or' in opts ? { or: opts.or != null ? afterThe(opts.or) : opts.or } : undefined,\n    )!.to(agent => delegated = agent);\n\n    return (next, when, from, to) => delegated(next, when, from, to);\n  }\n\n}\n\n/**\n * @internal\n */\nfunction defaultNavigationAgent(\n    next: (this: void, target: Navigation.URLTarget) => void,\n    _when: 'pretend' | 'pre-open' | 'pre-replace',\n    _from: Page,\n    to: Page,\n): void {\n  next(to);\n}\n\nexport namespace NavigationAgent {\n\n  /**\n   * Combined navigation agent signature.\n   *\n   * This is what is available under [[NavigationAgent]] key.\n   */\n  export type Combined =\n  /**\n   * @param next  Either calls the next agent in chain, or applies the final navigation target if this agent is the last\n   * one. Not calling this function effectively prevents navigation.\n   * Accepts an optional [[Navigation.Target]] parameter. The original target will be used instead when omitted.\n   * @param when  When navigation occurred. Either `pretend`, `pre-open`, or `pre-replace`.\n   * @param from  The page to leave.\n   * @param to  Navigation target page.\n   */\n      (\n          this: void,\n          next: (this: void, target: Navigation.URLTarget) => void,\n          when: 'pretend' | 'pre-open' | 'pre-replace',\n          from: Page,\n          to: Page,\n      ) => void;\n\n}\n\n/**\n * A key of context value containing an [[NavigationAgent]] instance.\n *\n * The agent returned combines all registered agents into one. If no agent registered it just performs the navigation.\n */\nexport const NavigationAgent: ContextUpRef<NavigationAgent.Combined, NavigationAgent> = (\n    /*#__PURE__*/ new NavigationAgentKey('navigation-agent')\n);\n","import { itsEach } from '@proc7ts/a-iterable';\nimport { noop } from '@proc7ts/call-thru';\nimport { ContextKey, ContextKey__symbol, ContextRegistry, SingleContextKey } from '@proc7ts/context-values';\nimport { ValueTracker } from '@proc7ts/fun-events';\nimport { BootstrapContext, bootstrapDefault, BootstrapWindow } from '@wesib/wesib';\nimport { Navigation } from './navigation';\nimport { Page } from './page';\nimport { PageParam, PageParam__symbol } from './page-param';\nimport { PageParamContext } from './page-param-context';\n\nconst NavHistory__key = (/*#__PURE__*/ new SingleContextKey<NavHistory>(\n    'nav-history',\n    {\n      byDefault: bootstrapDefault(ctx => new NavHistory(ctx)),\n    },\n));\n\n/**\n * @internal\n */\nexport const NAV_DATA_KEY = 'wesib:navigation:data' as const;\n\n/**\n * @internal\n */\nexport interface PartialNavData {\n  readonly uid?: string;\n  readonly id?: number;\n  readonly data: any;\n}\n\n/**\n * @internal\n */\nexport interface NavData extends PartialNavData {\n  readonly uid: string;\n  readonly id: number;\n}\n\n/**\n * @internal\n */\nexport interface NavDataEnvelope {\n  readonly [NAV_DATA_KEY]: NavData;\n}\n\nfunction extractNavData(state: any): PartialNavData {\n  return state == null || typeof state !== 'object' ? { data: state } : state[NAV_DATA_KEY];\n}\n\n/**\n * @internal\n */\nexport class NavHistory {\n\n  static get [ContextKey__symbol](): ContextKey<NavHistory> {\n    return NavHistory__key;\n  }\n\n  private readonly _document: Document;\n  private readonly _location: Location;\n  private readonly _history: History;\n  private readonly _entries = new Map<number, PageEntry>();\n  private readonly _uid: string;\n  private _lastId = 0;\n\n  constructor(private readonly _context: BootstrapContext) {\n    const window = _context.get(BootstrapWindow);\n\n    this._document = window.document;\n    this._location = window.location;\n    this._history = window.history;\n    this._uid = btoa(String(Math.random()));\n  }\n\n  init(): PageEntry {\n\n    const { data } = extractNavData(this._history.state);\n    const entry = this.newEntry({\n      url: new URL(this._location.href),\n      data,\n      title: this._document.title,\n    });\n\n    this._entries.set(entry.id, entry);\n    entry.schedule(() => {\n      entry.enter('init');\n      this._history.replaceState(this._historyState(entry), '');\n    });\n\n    return entry;\n  }\n\n  newEntry(target: Navigation.URLTarget): PageEntry {\n    return new PageEntry(this._context, ++this._lastId, target);\n  }\n\n  open(\n      toEntry: PageEntry,\n      tracker: ValueTracker<PageEntry>,\n  ): void {\n\n    const { page: { title = '', url } } = toEntry;\n\n    this._history.pushState(\n        this._historyState(toEntry),\n        title,\n        url.href,\n    );\n\n    this._enter('open', toEntry, tracker);\n  }\n\n  private _enter(\n      when: 'open' | 'enter',\n      toEntry: PageEntry,\n      tracker: ValueTracker<PageEntry>,\n  ): void {\n\n    const fromEntry = tracker.it;\n\n    this._entries.set(toEntry.id, toEntry);\n\n    try {\n      // Forget all entries starting from next one\n      for (let e = fromEntry.next; e; e = e.next) {\n        this._forget(e);\n      }\n    } finally {\n      toEntry.prev = fromEntry;\n      fromEntry.next = toEntry;\n      toEntry.schedule(() => {\n        try {\n          fromEntry.leave();\n        } finally {\n          toEntry.enter(when);\n        }\n      });\n      tracker.it = toEntry;\n    }\n  }\n\n  replace(\n      toEntry: PageEntry,\n      tracker: ValueTracker<PageEntry>,\n  ): void {\n\n    const fromEntry = tracker.it;\n    const { page: { title = '', url } } = toEntry;\n\n    this._history.replaceState(\n        this._historyState(toEntry),\n        title,\n        url.href,\n    );\n\n    this._entries.set(toEntry.id, toEntry);\n\n    const prev = fromEntry.prev;\n\n    if (prev) {\n      toEntry.prev = prev;\n      prev.next = toEntry;\n    }\n\n    toEntry.schedule(() => {\n      try {\n        fromEntry.leave();\n      } finally {\n        try {\n          this._forget(fromEntry);\n        } finally {\n          toEntry.enter('replace');\n        }\n      }\n    });\n    tracker.it = toEntry;\n  }\n\n  popState(\n      popState: PopStateEvent,\n      tracker: ValueTracker<PageEntry>,\n  ): PageEntry | undefined {\n\n    const { state } = popState;\n\n    if (state == null) {\n      // Hash change\n      if (this._history.state == null) {\n        // Not a return\n        return this._changeHash(tracker);\n      }\n      return; // Already handled by `hashchange` handler\n    }\n\n    const fromEntry = tracker.it;\n    const { uid, data, id: pageId } = extractNavData(state);\n    let toEntry: PageEntry;\n\n    const existingEntry = uid === this._uid && pageId != null ? this._entries.get(pageId) : undefined;\n\n    if (existingEntry) {\n      toEntry = existingEntry;\n    } else {\n      // Returning to page existed in previous app version\n      toEntry = this.newEntry({\n        url: new URL(this._location.href),\n        data,\n        title: this._document.title,\n      });\n      fromEntry.transfer(toEntry, 'return');\n      this._entries.set(toEntry.id, toEntry);\n      this._history.replaceState(this._historyState(toEntry), '');\n    }\n\n    toEntry.schedule(() => {\n      try {\n        fromEntry.leave();\n      } finally {\n        toEntry.enter('return');\n      }\n    });\n\n    tracker.it = toEntry;\n\n    return toEntry;\n  }\n\n  public hashChange(tracker: ValueTracker<PageEntry>): PageEntry | void {\n    if (this._history.state == null) {\n      // Not a return\n      return this._changeHash(tracker);\n    }\n    // Otherwise, a `popstate` event is also triggered,\n    // and its handler would do the job (or already did).\n  }\n\n  public update(tracker: ValueTracker<PageEntry>, url: URL): PageEntry {\n\n    const oldEntry = tracker.it;\n    const newEntry = new PageEntry(this._context, ++this._lastId, { ...oldEntry.page, url }, oldEntry);\n\n    this._entries.set(newEntry.id, newEntry);\n    this._history.replaceState(this._historyState(newEntry), '', url.href);\n    this._entries.delete(oldEntry.id);\n\n    return tracker.it = newEntry;\n  }\n\n  private _changeHash(tracker: ValueTracker<PageEntry>): PageEntry {\n\n    const fromEntry = tracker.it;\n    const toEntry = this.newEntry({\n      url: new URL(this._location.href),\n      data: null,\n      title: this._document.title,\n    });\n\n    try {\n      fromEntry.transfer(toEntry, 'enter');\n    } finally {\n      this._history.replaceState(this._historyState(toEntry), '');\n      this._enter('enter', toEntry, tracker);\n    }\n\n    return toEntry;\n  }\n\n  private _forget(entry: PageEntry): void {\n    this._entries.delete(entry.id);\n    entry.forget();\n  }\n\n  private _historyState({ id, page: { data } }: PageEntry): NavDataEnvelope {\n    return {\n      [NAV_DATA_KEY]: {\n        uid: this._uid,\n        id,\n        data,\n      },\n    };\n  }\n\n}\n\nconst enum PageStatus {\n  New,\n  Visited,\n  Current,\n}\n\n/**\n * @internal\n */\nexport class PageEntry {\n\n  next?: PageEntry;\n  prev?: PageEntry;\n  private _status: PageStatus = PageStatus.New;\n  readonly page: Page;\n  private readonly _params: Map<PageParam<any, any>, PageParam.Handle<any, any>>;\n  private _update: () => void = noop;\n\n  constructor(\n      private readonly _bsContext: BootstrapContext,\n      readonly id: number,\n      target: Navigation.URLTarget,\n      proto?: PageEntry,\n  ) {\n    this._params = proto ? proto._params : new Map<PageParam<any, any>, PageParam.Handle<any, any>>();\n\n    const entry = this;\n\n    this.page = {\n      get url() {\n        return target.url;\n      },\n      get title() {\n        return target.title;\n      },\n      get data() {\n        return target.data;\n      },\n      get visited() {\n        return !!entry._status;\n      },\n      get current() {\n        return entry._status === PageStatus.Current;\n      },\n      get<T>(ref: PageParam.Ref<T, unknown>): T | undefined {\n        return entry.get(ref);\n      },\n      put(ref, input) {\n        entry.put(ref, input);\n      },\n    };\n  }\n\n  get<T>(ref: PageParam.Ref<T, unknown>): T | undefined {\n\n    const param = ref[PageParam__symbol];\n    const handle: PageParam.Handle<T, unknown> | undefined = this._params.get(param);\n\n    if (handle) {\n      return handle.get();\n    }\n\n    const newHandle = param.byDefault(this.page, this._newContext());\n\n    return newHandle && this._init(param, newHandle);\n  }\n\n  put<T, I>(ref: PageParam.Ref<T, I>, input: I): T {\n\n    const param = ref[PageParam__symbol];\n    const handle: PageParam.Handle<T, I> | undefined = this._params.get(param);\n\n    if (handle) {\n      handle.put(input);\n      return handle.get();\n    }\n\n    return this._init(param, param.create(this.page, input, this._newContext()));\n  }\n\n  private _newContext(): PageParamContext {\n\n    const registry = new ContextRegistry<ParamContext>(this._bsContext);\n\n    class ParamContext extends PageParamContext {\n\n      readonly get: PageParamContext['get'] = registry.newValues().get;\n\n    }\n\n    return new ParamContext();\n  }\n\n  private _init<T, I>(param: PageParam<T, I>, handle: PageParam.Handle<T, I>): T {\n    this._params.set(param, handle);\n\n    if (this.page.current && handle.enter) {\n      handle.enter(this.page, 'init');\n    }\n\n    return handle.get();\n  }\n\n  transfer(to: PageEntry, when: 'pretend' | 'pre-open' | 'pre-replace' | 'enter' | 'return'): void {\n    itsEach(this._params.entries(), ([param, handle]) => {\n      if (handle.transfer) {\n\n        const transferred = handle.transfer(to.page, when);\n\n        if (transferred) {\n          to._params.set(param, transferred);\n        }\n      }\n    });\n  }\n\n  stay(at: Page): void {\n    itsEach(this._params.values(), handle => handle.stay && handle.stay(at));\n  }\n\n  enter(when: 'init' | 'open' | 'replace' | 'enter' | 'return'): void {\n    this._status = PageStatus.Current;\n    itsEach(this._params.values(), handle => handle.enter && handle.enter(this.page, when));\n  }\n\n  leave(): void {\n    this._status = PageStatus.Visited;\n    itsEach(this._params.values(), handle => handle.leave && handle.leave());\n  }\n\n  forget(): void {\n    itsEach(this._params.values(), handle => handle.forget && handle.forget());\n    this._params.clear();\n  }\n\n  schedule(update: () => void): void {\n    this._update = update;\n  }\n\n  apply(): void {\n\n    const update = this._update;\n\n    this._update = noop;\n    update();\n  }\n\n}\n","import { noop } from '@proc7ts/call-thru';\nimport { AfterEvent, EventReceiver, EventSupply, onAny, OnEvent, trackValue } from '@proc7ts/fun-events';\nimport { DomEventDispatcher, DomEventListener, OnDomEvent } from '@proc7ts/fun-events/dom';\nimport { BootstrapContext, BootstrapWindow, mergeFunctions } from '@wesib/wesib';\nimport { NavHistory, PageEntry } from './nav-history.impl';\nimport { Navigation as Navigation } from './navigation';\nimport { NavigationAgent } from './navigation-agent';\nimport {\n  EnterPageEvent,\n  LeavePageEvent,\n  NavigationEvent,\n  NavigationEventType,\n  StayOnPageEvent,\n} from './navigation.event';\nimport { Page } from './page';\nimport { PageParam } from './page-param';\n\nexport function createNavigation(context: BootstrapContext): Navigation {\n\n  const window = context.get(BootstrapWindow);\n  const { document, history } = window;\n  const dispatcher = new DomEventDispatcher(window);\n  const navHistory = context.get(NavHistory);\n  const agent = context.get(NavigationAgent);\n  const nav = trackValue<PageEntry>(navHistory.init());\n\n  nav.read(nextEntry => nextEntry.apply()); // The very first page entry receiver applies scheduled updates to page\n\n  let next: Promise<any> = Promise.resolve();\n\n  dispatcher.on<PopStateEvent>('popstate').to(popState => {\n\n    const entry = navHistory.popState(popState, nav);\n\n    if (entry) {\n      dispatcher.dispatch(new EnterPageEvent(\n          NavigationEventType.EnterPage,\n          {\n            when: popState.state != null ? 'return' : 'enter',\n            to: entry.page,\n          },\n      ));\n    }\n  });\n\n  dispatcher.on('hashchange').to(() => {\n\n    const entry = navHistory.hashChange(nav);\n\n    if (entry) {\n      dispatcher.dispatch(new EnterPageEvent(\n          NavigationEventType.EnterPage,\n          {\n            when: 'enter',\n            to: entry.page,\n          },\n      ));\n    }\n  });\n\n  type NavTarget = { -readonly [K in keyof Navigation.URLTarget]: Navigation.URLTarget[K] };\n\n  class Navigation$ extends Navigation {\n\n    get page(): Page {\n      return nav.it.page;\n    }\n\n    get length(): number {\n      return history.length;\n    }\n\n    onEnter(): OnDomEvent<EnterPageEvent>;\n    onEnter(listener: DomEventListener<EnterPageEvent>): EventSupply;\n    onEnter(listener?: DomEventListener<EnterPageEvent>): OnDomEvent<EnterPageEvent> | EventSupply {\n      return (this.onEnter = dispatcher.on<EnterPageEvent>(NavigationEventType.EnterPage).F)(listener);\n    }\n\n    onLeave(): OnDomEvent<LeavePageEvent>;\n    onLeave(listener: DomEventListener<LeavePageEvent>): EventSupply;\n    onLeave(listener?: DomEventListener<LeavePageEvent>): OnDomEvent<LeavePageEvent> | EventSupply {\n      return (this.onLeave = dispatcher.on<LeavePageEvent>(NavigationEventType.LeavePage).F)(listener);\n    }\n\n    onStay(): OnDomEvent<StayOnPageEvent>;\n    onStay(listener: DomEventListener<StayOnPageEvent>): EventSupply;\n    onStay(listener?: DomEventListener<StayOnPageEvent>): OnDomEvent<StayOnPageEvent> | EventSupply {\n      return (this.onStay = dispatcher.on<StayOnPageEvent>(NavigationEventType.StayOnPage).F)(listener);\n    }\n\n    /**\n     * Builds an `OnEvent` sender of {@link NavigationEvent navigation events}.\n     *\n     * The `[OnEvent__symbol]` property is an alias of this one.\n     *\n     * @returns `OnEvent` sender of {@link NavigationEvent navigation events}.\n     */\n    on(): OnEvent<[NavigationEvent]>;\n    on(receiver: EventReceiver<[NavigationEvent]>): EventSupply;\n    on(receiver?: EventReceiver<[NavigationEvent]>): OnEvent<[NavigationEvent]> | EventSupply {\n      return (this.on = onAny<[NavigationEvent]>(this.onEnter(), this.onLeave(), this.onStay()).F)(receiver);\n    }\n\n    read(): AfterEvent<[Page]>;\n    read(receiver: EventReceiver<[Page]>): EventSupply;\n    read(receiver?: EventReceiver<[Page]>): AfterEvent<[Page]> | EventSupply {\n      return (this.read = nav.read().keepThru(entry => entry.page).F)(receiver);\n    }\n\n    go(delta?: number): void {\n      history.go(delta);\n    }\n\n    open(target: Navigation.Target | string | URL): Promise<Page | null> {\n      return navigate('pre-open', 'open', target);\n    }\n\n    replace(target: Navigation.Target | string | URL): Promise<Page | null> {\n      return navigate('pre-replace', 'replace', target);\n    }\n\n    update(url: string | URL): Page {\n      return navHistory.update(nav, toURL(url)).page;\n    }\n\n    with<T, I>(ref: PageParam.Ref<T, I>, input: I): Navigation.Parameterized {\n      return withParam(page => page.put(ref, input));\n    }\n\n  }\n\n  return new Navigation$();\n\n  function withParam(applyParams: (page: Page) => void): Navigation.Parameterized {\n    return {\n      with<TT, II>(ref: PageParam.Ref<TT, II>, input: II): Navigation.Parameterized {\n        return withParam(mergeFunctions(applyParams, page => page.put(ref, input)));\n      },\n      open(target?: Navigation.Target | string | URL) {\n        return navigate('pre-open', 'open', target, applyParams);\n      },\n      replace(target?: Navigation.Target | string | URL) {\n        return navigate('pre-replace', 'replace', target, applyParams);\n      },\n      pretend<T>(\n          targetOrCallback?: Navigation.Target | string | URL | ((this: void, from: Page, to: Page) => T),\n          callback: (this: void, from: Page, to: Page) => T = (_from, to) => to as unknown as T,\n      ): T | undefined {\n\n        let target: Navigation.Target | string | URL | undefined;\n\n        if (typeof targetOrCallback === 'function') {\n          callback = targetOrCallback;\n          target = undefined;\n        } else {\n          target = targetOrCallback;\n        }\n\n        const navTarget = navTargetOf(target);\n        const fromEntry = nav.it;\n        const toEntry = newEntry('pretend', fromEntry, navTarget, applyParams);\n\n        try {\n          return applyAgent('pretend', fromEntry, navTarget, toEntry)\n              ? callback(fromEntry.page, toEntry.page)\n              : undefined;\n        } finally {\n          toEntry.stay(nav.it.page);\n        }\n      },\n    };\n  }\n\n  function toURL(url: string | URL | undefined): URL {\n    if (typeof url === 'string') {\n      return new URL(url, document.baseURI);\n    }\n    return url || nav.it.page.url;\n  }\n\n  function navTargetOf(target?: Navigation.Target | string | URL): NavTarget {\n    if (target == null || typeof target === 'string' || target instanceof URL) {\n      return { url: toURL(target) };\n    }\n    if (target.url instanceof URL) {\n      return target as Navigation.URLTarget;\n    }\n    return { ...target, url: toURL(target.url) };\n  }\n\n  function navigate(\n      whenLeave: 'pre-open' | 'pre-replace',\n      when: 'open' | 'replace',\n      target?: Navigation.Target | string | URL,\n      applyParams: (page: Page) => void = noop,\n  ): Promise<Page | null> {\n\n    const navTarget = navTargetOf(target);\n    const promise = next = next.then(doNavigate, doNavigate);\n\n    return promise;\n\n    function doNavigate(): Page | null {\n\n      let toEntry: PageEntry | undefined = undefined;\n\n      try {\n\n        const prepared = prepare();\n\n        if (!prepared) {\n          return prepared; // Navigation cancelled\n        }\n\n        toEntry = prepared;\n        navHistory[when](toEntry, nav);\n        dispatcher.dispatch(new EnterPageEvent(\n            NavigationEventType.EnterPage,\n            {\n              when,\n              to: toEntry.page,\n            },\n        ));\n\n        return toEntry.page;\n      } catch (e) {\n        stay(toEntry, e);\n        throw e;\n      }\n    }\n\n    function prepare(): PageEntry | null {\n      if (next !== promise) {\n        return stay();\n      }\n\n      const fromEntry = nav.it;\n      const toEntry = newEntry(whenLeave, fromEntry, navTarget, applyParams);\n      const leavePage = new LeavePageEvent(\n          NavigationEventType.LeavePage,\n          {\n            when: whenLeave,\n            from: fromEntry.page,\n            to: toEntry.page,\n          },\n      );\n\n      if (!dispatcher.dispatch(leavePage)\n          || next !== promise\n          || !applyAgent(whenLeave, fromEntry, navTarget, toEntry)) {\n        return stay(toEntry);\n      }\n\n      return toEntry;\n    }\n\n    function stay(toEntry?: PageEntry, reason?: any): null {\n      if (toEntry) {\n        toEntry.stay(nav.it.page);\n      }\n\n      dispatcher.dispatch(new StayOnPageEvent(\n          NavigationEventType.StayOnPage,\n          {\n            from: nav.it.page,\n            to: navTarget,\n            reason,\n          },\n      ));\n\n      return null;\n    }\n\n  }\n\n  function newEntry(\n      whenLeave: 'pretend' | 'pre-open' | 'pre-replace',\n      fromEntry: PageEntry,\n      navTarget: NavTarget,\n      applyParams: (page: Page) => void,\n  ): PageEntry {\n\n    const toEntry = navHistory.newEntry(navTarget);\n\n    try {\n      fromEntry.transfer(toEntry, whenLeave);\n      applyParams(toEntry.page);\n    } catch (e) {\n      toEntry.stay(nav.it.page);\n      throw e;\n    }\n\n    return toEntry;\n  }\n\n  function applyAgent(\n      whenLeave: 'pretend' | 'pre-open' | 'pre-replace',\n      fromEntry: PageEntry,\n      navTarget: NavTarget,\n      toEntry: PageEntry,\n  ): boolean {\n\n    let navigated = false;\n\n    agent(\n        ({ url, data, title }) => {\n          navigated = true;\n          navTarget.url = url;\n          navTarget.data = data;\n          navTarget.title = title;\n        },\n        whenLeave,\n        fromEntry.page,\n        toEntry.page,\n    );\n\n    return navigated;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { mapIt } from '@proc7ts/a-iterable';\nimport { nextArgs, noop } from '@proc7ts/call-thru';\nimport {\n  afterEach,\n  AfterEvent,\n  afterEventBy,\n  afterSupplied,\n  afterThe,\n  EventKeeper,\n  eventSupply,\n  EventSupply,\n  nextAfterEvent,\n} from '@proc7ts/fun-events';\nimport { css__naming, QualifiedName } from '@proc7ts/namespace-aliaser';\nimport {\n  Class,\n  Component,\n  ComponentClass,\n  ComponentContext,\n  ComponentDecorator,\n  DefaultNamespaceAliaser,\n  ElementRenderScheduler,\n  Wesib__NS,\n} from '@wesib/wesib';\nimport { ComponentNode, ComponentTreeSupport, ElementNode, ElementPickMode } from '../tree';\nimport { getHashURL } from './hash-url';\nimport { Navigation } from './navigation';\nimport { NavigationSupport } from './navigation-support.feature';\nimport { Page } from './page';\n\n/**\n * @internal\n */\ninterface ActiveNavLink {\n  supply(): EventSupply;\n}\n\n/**\n * @internal\n */\ntype ActiveNavLinks = Map<ElementNode, ActiveNavLink>;\n\n/**\n * Creates component decorator that marks navigation link(s) inside decorated component active.\n *\n * Marks navigation links with highest weight.\n *\n * Enables [[ComponentTreeSupport]] and [[NavigationSupport]] features.\n *\n * @typeparam T  A type of decorated component class.\n * @param def  Navigation link activation definition.\n *\n * @returns New component decorator.\n */\nexport function ActivateNavLink<T extends ComponentClass = Class>(\n    def: ActivateNavLinkDef<InstanceType<T>> = {},\n): ComponentDecorator<T> {\n\n  const { select = 'a', pick = { all: true, deep: true } } = def;\n\n  return Component({\n    feature: {\n      needs: [ComponentTreeSupport, NavigationSupport],\n    },\n    define(defContext) {\n      defContext.whenComponent(context => {\n\n        const activate = activateNavLink(context, def);\n        const weigh = navLinkWeight(def);\n        const navigation = context.get(Navigation);\n        const componentNode = context.get(ComponentNode);\n\n        context.whenConnected(() => {\n\n          let active: ActiveNavLinks = new Map();\n\n          navigation.read().tillOff(context).consume(\n              page => componentNode.select(select, pick).read().keepThru_(\n                  nodes => nextAfterEvent(afterEach(\n                      ...mapIt(nodes, node => weigh({ node, context, page })),\n                  )),\n              ).consume(\n                  (...weights: NavLinkWeight[]) => {\n\n                    const selected = selectActiveNavLinks(weights);\n                    const newActive: ActiveNavLinks = new Map();\n                    const result = eventSupply();\n\n                    selected.forEach(node => {\n\n                      let activeLink: ActiveNavLink;\n                      const existing = active.get(node);\n\n                      if (existing) {\n                        newActive.set(node, existing);\n                        activeLink = existing;\n                      } else {\n                        activeLink = activate({ node, context, page });\n                        newActive.set(node, activeLink);\n                      }\n\n                      activeLink.supply().needs(result);\n                    });\n\n                    active = newActive;\n\n                    return result;\n                  },\n              ),\n          );\n        });\n      });\n    },\n  });\n}\n\n/**\n * Navigation link activation definition.\n *\n * Defines a set of element nodes considered to be navigation links. Each matching node is {@link weigh weighed}\n * against {@link Navigation.read current page}, and the link with highest weight is marked [[active]].\n *\n * @typeparam T  A type of component.\n */\nexport interface ActivateNavLinkDef<T extends object = any> {\n\n  /**\n   * Navigation links CSS selector.\n   *\n   * `a` by default.\n   */\n  readonly select?: string;\n\n  /**\n   * A mode of navigation link node picking from component tree.\n   *\n   * By default picks any matching element from entire subtree.\n   */\n  readonly pick?: ElementPickMode;\n\n  /**\n   * Qualified name of CSS class to mark the active element with.\n   *\n   * The `active` class in Wesib namespace is used by default.\n   */\n  readonly active?: QualifiedName;\n\n  /**\n   * Weighs matching navigation link.\n   *\n   * This method will be called for each navigation link on each current page update.\n   *\n   * By default:\n   * 1. If the link path has neither hash, nor search parameters, then:\n   * 1.1. Checks whether page URL path starts with the link's one.\n   * 1.2. If so, then uses link path length as weight.\n   * 2. If the link path has search parameters, but has no hash, then requires the page path to be the same as link's\n   *    one, and page search parameters include all of the link's ones. The number of link search parameters plus the\n   *    link path length is used as weight.\n   * 3. If the link path has a hash, then requires the page path and search parameters to be the same as link's ones,\n   *    and their hashes are treated as {@link getHashURL URLs}. The weight is calculated by applying steps 1, 2, and 3\n   *    to hash URLs increased by the link path length and the number of search parameters.\n   *\n   * Ignores search parameters with names starting and ending with double underscores. Like `__wesib_app_rev__`.\n   *\n   * @param node  Navigation link node to weigh.\n   * @param page  Current navigation page.\n   * @param context  Decorated component context.\n   *\n   * @returns Either navigation link weight, or its keeper. Non-positive wights means the page URL doesn't match\n   * the link at all.\n   */\n  weigh?(\n      {\n        node,\n        page,\n        context,\n      }: {\n        node: ElementNode;\n        page: Page;\n        context: ComponentContext<T>;\n      },\n  ): number | EventKeeper<[number]>;\n\n  /**\n   * Changes navigation link activity state.\n   *\n   * This method is called each time the active link changed.\n   *\n   * @param active  Whether to make target link active (`true`), or inactive (`false`).\n   * @param node  Navigation link node to update activity state of.\n   * @param page  Current navigation page.\n   * @param context  Decorated component context.\n   */\n  activate?(\n      active: boolean,\n      {\n        node,\n        page,\n        context,\n      }: {\n        node: ElementNode;\n        page: Page;\n        context: ComponentContext<T>;\n      },\n  ): void;\n\n}\n\n/**\n * @internal\n */\ntype NavLinkWeight = [ElementNode, number];\n\n/**\n * @internal\n */\ninterface NavLinkOpts {\n  node: ElementNode;\n  page: Page;\n  context: ComponentContext;\n}\n\n/**\n * @internal\n */\nfunction selectActiveNavLinks(weights: NavLinkWeight[]): ElementNode[] {\n\n  let maxWeight = 0;\n  let active: ElementNode[] = [];\n\n  weights.forEach(([node, weight]) => {\n    if (weight > maxWeight) {\n      maxWeight = weight;\n      active = [node];\n    } else if (weight === maxWeight) {\n      active.push(node);\n    }\n  });\n\n  return active;\n}\n\n/**\n * @internal\n */\nfunction navLinkWeight(\n    def: ActivateNavLinkDef,\n): (opts: NavLinkOpts) => AfterEvent<NavLinkWeight> {\n  if (!def.weigh) {\n    return defaultNavLinkWeight;\n  }\n  return opts => {\n\n    const weight = def.weigh!(opts);\n\n    if (typeof weight === 'number') {\n      return afterThe(opts.node, weight);\n    }\n\n    let supplier: AfterEvent<NavLinkWeight> = afterSupplied(weight).keepThru_(\n        weight => nextArgs(opts.node, weight),\n    );\n\n    return afterEventBy<NavLinkWeight>(receiver => {\n      supplier.to({\n        supply: eventSupply()\n            .needs(receiver.supply)\n            .whenOff(() => {\n              // Fall back to zero weight once the weight supply cut off\n              supplier = afterThe(opts.node, 0);\n              supplier.to(receiver);\n            }),\n        receive: receiver.receive.bind(receiver),\n      });\n    });\n  };\n}\n\n/**\n * @internal\n */\nfunction defaultNavLinkWeight(\n    {\n      node,\n      page,\n    }: NavLinkOpts,\n): AfterEvent<NavLinkWeight> {\n\n  const element: Element = node.element;\n  const href = element.getAttribute('href');\n\n  if (href == null) {\n    return afterThe(node, -1);\n  }\n\n  const linkURL = new URL(href, element.ownerDocument!.baseURI);\n\n  return afterThe(node, calcNavLinkWeight(linkURL, page.url));\n}\n\n/**\n * @internal\n */\nfunction calcNavLinkWeight(linkURL: URL, pageURL: URL): number {\n  if (linkURL.origin !== pageURL.origin) {\n    return -1;\n  }\n\n  const linkDir = navLinkPath2dir(linkURL);\n  const pageDir = navLinkPath2dir(pageURL);\n\n  if (linkURL.hash) {\n    if (linkDir !== pageDir) {\n      return -1;\n    }\n    // Require search parameters to be equal\n\n    const searchParamWeight = navLinkSearchParamsWeight(linkURL, pageURL);\n\n    if (searchParamWeight < 0 || navLinkSearchParamsWeight(pageURL, linkURL) < 0) {\n      return -1;\n    }\n\n    return linkURL.pathname.length\n        + searchParamWeight\n        + calcNavLinkWeight(getHashURL(linkURL), getHashURL(pageURL));\n  }\n\n  const searchParamWeight = navLinkSearchParamsWeight(linkURL, pageURL);\n\n  if (searchParamWeight) {\n    if (searchParamWeight < 0) {\n      return -1;\n    }\n    if (linkDir !== pageDir) {\n      return -1;\n    }\n    return linkURL.pathname.length + searchParamWeight;\n  }\n\n  if (!pageDir.startsWith(linkDir)) {\n    return -1;\n  }\n\n  return linkURL.pathname.length;\n}\n\n/**\n * @internal\n */\nfunction navLinkPath2dir(url: URL): string {\n\n  const path = url.pathname;\n\n  return path.endsWith('/') ? path : path + '/';\n}\n\n/**\n * @internal\n */\nfunction navLinkSearchParamsWeight(\n    { searchParams: linkParams }: URL,\n    { searchParams: pageParams }: URL,\n): number {\n\n  let weight = 0;\n\n  linkParams.forEach((_value, key) => {\n    if (!isIgnoredSearchParam(key)) {\n\n      const pageValues = new Set(pageParams.getAll(key));\n\n      if (weight >= 0) {\n        if (linkParams.getAll(key).every(linkValue => pageValues.has(linkValue))) {\n          weight += 1;\n        } else {\n          weight = -1;\n        }\n      }\n    }\n  });\n\n  return weight;\n}\n\n/**\n * @internal\n */\nfunction isIgnoredSearchParam(key: string): boolean {\n  return key.startsWith('__') && key.endsWith('__');\n}\n\n/**\n * @internal\n */\nconst NavLinkRenderSchedule__symbol = (/*#__PURE__*/ Symbol('nav-link-render-schedule'));\n\n/**\n * @internal\n */\nconst defaultActiveNavLinkClass: QualifiedName = ['active', Wesib__NS];\n\n/**\n * @internal\n */\nfunction activateNavLink(\n    context: ComponentContext,\n    def: ActivateNavLinkDef,\n): (opts: NavLinkOpts) => ActiveNavLink {\n\n  const scheduler = context.get(ElementRenderScheduler);\n  const { active = defaultActiveNavLinkClass } = def;\n  const activeClass = css__naming.name(active, context.get(DefaultNamespaceAliaser));\n  const activate = def.activate ? def.activate.bind(def) : noop;\n  const assignClass = (active: boolean, { node }: { node: ElementNode }): void => {\n\n    const element: Element = node.element;\n    const { classList } = element;\n\n    if (active) {\n      classList.add(activeClass);\n    } else {\n      classList.remove(activeClass);\n    }\n  };\n\n  return opts => {\n\n    const { element } = opts.node;\n    const schedule = element[NavLinkRenderSchedule__symbol]\n        || (element[NavLinkRenderSchedule__symbol] = scheduler({ node: element }));\n    const makeActive = (active: boolean): void => {\n      schedule(() => assignClass(active, opts));\n      activate(active, opts);\n    };\n\n    makeActive(true);\n\n    let lastSupply: EventSupply | undefined;\n\n    return {\n      supply(): EventSupply {\n\n        const supply = lastSupply = eventSupply(() => {\n          if (lastSupply === supply) {\n            makeActive(false);\n          }\n        });\n\n        return supply;\n      },\n    };\n  };\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { ArraySet, Class, Component, ComponentClass, ComponentContext, ComponentDecorator } from '@wesib/wesib';\nimport { Navigation } from './navigation';\nimport { NavigationSupport } from './navigation-support.feature';\nimport { Page } from './page';\n\n/**\n * Creates component decorator that handles events (e.g. clicks) on navigation links.\n *\n * Such events would lead to {@link Navigation navigation actions} instead of default ones.\n *\n * Enables [[NavigationSupport]] feature.\n *\n * @typeparam T  A type of decorated component class.\n * @param def  Navigation links handler definition.\n *\n * @returns New component decorator.\n */\nexport function HandleNavLinks<T extends ComponentClass = Class>(\n    def: HandleNavLinksDef<InstanceType<T>> = {},\n): ComponentDecorator<T> {\n\n  const handle = def.handle ? def.handle.bind(def) : defaultHandleNavLinks(def);\n  const events = new ArraySet(def.event || 'click');\n\n  return Component({\n    feature: {\n      needs: NavigationSupport,\n    },\n    define(defContext) {\n      defContext.whenComponent(context => {\n        context.whenConnected(() => {\n\n          const navigation = context.get(Navigation);\n\n          for (const eventType of events) {\n            context.on(eventType).to(event => {\n              navigation.read().once(\n                  page => handle({\n                    event,\n                    page,\n                    context,\n                    navigation,\n                  }),\n              );\n            });\n          }\n        });\n      });\n    },\n  });\n}\n\n/**\n * Navigation links handler definition.\n *\n * @typeparam T  A type of component.\n */\nexport interface HandleNavLinksDef<T extends object = any> {\n\n  /**\n   * Type or types of events to handle.\n   *\n   * `click` by default.\n   */\n  readonly event?: string | readonly string[];\n\n  /**\n   * Handles event by performing navigation action.\n   *\n   * Every {@link event} sent by one of elements inside decorated component is passed to this function. In response\n   * it may perform a navigation event.\n   *\n   * By default handles events on anchor tags. When such tag contains an `href` attribute containing same-origin URL\n   * it {@link Navigation.open opens} a page at this URL instead of default action. It also prevents navigation\n   * if URL didn't change.\n   *\n   * @param event  A click event to handle.\n   * @param page  Current navigation page.\n   * @param navigation  Navigation service to use.\n   * @param context  Component context.\n   */\n  handle?(\n      {\n        event,\n        page,\n        navigation,\n        context,\n      }: {\n        event: Event;\n        page: Page;\n        navigation: Navigation;\n        context: ComponentContext<T>;\n      },\n  ): void;\n\n  /**\n   * Extracts hyper-reference of clicked element.\n   *\n   * Extracts hyper-reference from `href` attribute of event target.\n   *\n   * @param event  A click event to handle.\n   *\n   * @returns Extracted hyper-reference, or nothing if it can not be extracted. Event will be ignored in this case.\n   */\n  href?(event: Event): string | undefined | null;\n\n}\n\n/**\n * @internal\n */\nfunction defaultNavLinkHref(event: Event): string | null {\n\n  const target = event.target as Element;\n\n  return target.getAttribute('href');\n}\n\n/**\n * @internal\n */\nfunction defaultHandleNavLinks(\n    def: HandleNavLinksDef,\n): (\n    opts: {\n      event: Event;\n      page: Page;\n      navigation: Navigation;\n    },\n) => void {\n\n  const getHref = def.href ? def.href.bind(def) : defaultNavLinkHref;\n\n  return ({\n    event,\n    page,\n    navigation,\n  }) => {\n\n    const href = getHref(event);\n\n    if (href == null) {\n      return;\n    }\n\n    const target = event.target as Element;\n    const pageURL = page.url;\n    const url = new URL(href, target.ownerDocument!.baseURI);\n\n    if (url.origin !== pageURL.origin) {\n      return; // External link\n    }\n\n    event.preventDefault();\n    if (pageURL.href !== url.href) {\n      navigation.open(href);\n    }\n  };\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { itsEach, overArray } from '@proc7ts/a-iterable';\nimport { isElement } from '@wesib/wesib';\n\n/**\n * Imports DOM node from one document to another.\n *\n * @param from  The node to import.\n * @param to  The node to append imported node to.\n * @param importContent  A function that imports nodes nested in parent element. [[importNodeContent]] by default.\n *\n * @returns Imported node.\n */\nexport function importNode<N extends Node>(\n    from: N,\n    to: Node,\n    importContent?: (this: void, from: N, to: N) => void,\n): N;\n\n/**\n * Imports DOM node from one document to another and inserts it before the given node.\n *\n * @param from  The node to import.\n * @param to  The node to append imported node to.\n * @param before  The node to insert imported node before, or `null` to append it to the end of target one.\n * @param importContent  A function that imports nodes nested in parent element. [[importNodeContent]] by default.\n *\n * @returns Imported node.\n */\nexport function importNode<N extends Node>(\n    from: N,\n    to: Node,\n    before?: Node | null,\n    importContent?: (this: void, from: N, to: N) => void,\n): N;\n\nexport function importNode<N extends Node>(\n    from: N,\n    to: Node,\n    beforeOrImport?: Node | null | ((this: void, from: N, to: N) => void),\n    importContent: (this: void, from: N, to: N) => void = importNodeContent,\n): N {\n\n  let before: Node | null;\n\n  if (typeof beforeOrImport === 'function') {\n    importContent = beforeOrImport;\n    before = null;\n  } else {\n    before = beforeOrImport || null;\n  }\n\n  const doc = to.ownerDocument!;\n\n  if (isElement(from)) {\n\n    const elementClone = doc.createElement(from.tagName.toLowerCase()) as Node as (Element & N);\n\n    from.getAttributeNames().forEach(attr => elementClone.setAttribute(attr, from.getAttribute(attr)!));\n    importContent(from, elementClone);\n    to.insertBefore(elementClone, before);\n\n    return elementClone;\n  }\n\n  const nodeClone = doc.importNode(from, false);\n\n  to.insertBefore(nodeClone, before);\n\n  return nodeClone;\n}\n\n/**\n * Imports DOM node contents from one document to another.\n *\n * @param from  The node which contents to import.\n * @param to  The node to append imported nodes to.\n */\nexport function importNodeContent(from: Node, to: Node): void {\n  itsEach(\n      overArray(from.childNodes),\n      node => importNode(node, to),\n  );\n}\n","import { nextArgs, nextSkip } from '@proc7ts/call-thru';\nimport { eventSupply, EventSupply, OnEvent, onEventBy, trackValue } from '@proc7ts/fun-events';\nimport { Page } from '../page';\nimport { PageLoadResponse } from './page-load-response';\nimport { PageLoader } from './page-loader.impl';\n\n/**\n * @internal\n */\nexport function cachingPageLoader(loader: PageLoader): PageLoader {\n\n  let state: {\n    readonly url: string;\n    readonly on: OnEvent<[PageLoadResponse]>;\n    readonly sup: EventSupply;\n  } | undefined;\n\n  return page => {\n\n    const url = pageUrl(page);\n\n    if (state) {\n      if (state.url === url) {\n        return state.on;\n      }\n      state.sup.off();\n    }\n\n    let tracked: {\n      readonly on: OnEvent<[PageLoadResponse]>;\n      num: number;\n    } | undefined;\n    const supply = eventSupply().whenOff(() => {\n      state = undefined;\n      tracked = undefined;\n    });\n\n    const on = onEventBy<[PageLoadResponse]>(receiver => {\n      if (!tracked) {\n\n        const onLoad = loader(page);\n        const tracker = trackValue<PageLoadResponse>();\n        const trackSupply = onLoad.to(resp => {\n          tracker.it = resp;\n        }).whenOff(reason => {\n          // Error drops page cache, unlike successful page load.\n          if (reason != null) {\n            supply.off(reason);\n          }\n        });\n\n        supply.cuts(trackSupply).cuts(tracker);\n\n        tracked = {\n          on: tracker.read().thru_(\n              response => response ? nextArgs(response) : nextSkip(),\n          ),\n          num: 0,\n        };\n      }\n\n      const requested = tracked;\n\n      ++requested.num;\n\n      return requested.on.tillOff(supply).to(receiver).whenOff(reason => {\n        if (!--requested.num) {\n          // Allow to request the same page again\n          Promise.resolve().then(() => {\n            if (!requested.num && requested === tracked) {\n              supply.off(reason);\n            }\n          });\n        }\n      });\n    });\n\n    state = { url, on, sup: supply };\n\n    return on;\n  };\n}\n\nfunction pageUrl(page: Page): string {\n  return new URL('', page.url).href;\n}\n","import { itsReduction } from '@proc7ts/a-iterable';\nimport { nextEach } from '@proc7ts/call-thru';\nimport { SingleContextKey } from '@proc7ts/context-values';\nimport { EventNotifier, onAsync, OnEvent, onEventBy } from '@proc7ts/fun-events';\nimport { BootstrapContext, bootstrapDefault, BootstrapWindow } from '@wesib/wesib';\nimport { hthvParse, hthvQuote } from '@proc7ts/http-header-value';\nimport { HttpFetch } from '../../fetch';\nimport { Page } from '../page';\nimport { PageLoadAgent } from './page-load-agent';\nimport { PageLoadRequestsParam } from './page-load-requests.impl';\nimport { PageLoadResponse } from './page-load-response';\nimport { PageLoadURLModifier } from './page-load-url-modifier';\n\n/**\n * @internal\n */\nexport type PageLoader = (this: void, page: Page) => OnEvent<[PageLoadResponse]>;\n\n/**\n * @internal\n */\nexport const PageLoader = (/*#__PURE__*/ new SingleContextKey<PageLoader>(\n    'page-loader',\n    {\n      byDefault: bootstrapDefault(newPageLoader),\n    },\n));\n\nfunction newPageLoader(context: BootstrapContext): PageLoader {\n\n  const window = context.get(BootstrapWindow);\n  const httpFetch = context.get(HttpFetch);\n  const modifyURL = context.get(PageLoadURLModifier);\n  const agent = context.get(PageLoadAgent);\n  const parser: DOMParser = new (window as any).DOMParser();\n\n  return page => {\n\n    const url = new URL(page.url.href);\n\n    modifyURL(url);\n\n    const request = new Request(\n        url.href,\n        {\n          mode: 'same-origin',\n          credentials: 'same-origin',\n          headers: new Headers({ Accept: 'text/html' }),\n        },\n    );\n\n    return onEventBy(receiver => agent(fetch, request).to(receiver));\n\n    function fetch(fetchRequest: Request): OnEvent<[PageLoadResponse]> {\n      requestPageFragments(page, fetchRequest);\n\n      return onEventBy<[PageLoadResponse]>(receiver => {\n\n        const dispatcher = new EventNotifier<[PageLoadResponse]>();\n\n        dispatcher.on(receiver);\n        dispatcher.send({ page });\n\n        onAsync(httpFetch(fetchRequest).thru_(\n            response => Promise.all([response, response.text()]),\n        )).thru_(\n            (...batch: [Response, string][]) => nextEach(batch),\n            ([response, text]): PageLoadResponse => {\n              if (!response.ok) {\n                return {\n                  ok: false as const,\n                  page,\n                  response,\n                  error: response.status,\n                };\n              }\n              try {\n                return {\n                  ok: true as const,\n                  page,\n                  response,\n                  document: parsePageDocument(parser, url, response, text),\n                };\n              } catch (error) {\n                return {\n                  ok: false as const,\n                  page,\n                  response,\n                  error,\n                };\n              }\n            },\n        ).to(receiver);\n      });\n    }\n  };\n}\n\nfunction requestPageFragments(page: Page, request: Request): void {\n\n  const fragments = page.get(PageLoadRequestsParam)?.fragments;\n\n  if (fragments && fragments.length) {\n    request.headers.set(\n        'Accept-Fragment',\n        itsReduction(\n            fragments,\n            (header, fragment) => (header ? header + ', ' : '') + (\n                fragment.tag != null\n                    ? 'tag=' + hthvQuote(fragment.tag)\n                    : 'id=' + hthvQuote(fragment.id)\n            ),\n            '',\n        ),\n    );\n  }\n}\n\nfunction parsePageDocument(parser: DOMParser, url: URL, response: Response, text: string): Document {\n\n  const doc = parser.parseFromString(\n      text,\n      hthvParse(response.headers.get('Content-Type') || 'text/html')[0].v as SupportedType,\n  );\n\n  if (doc.head) {\n\n    const base = doc.head.querySelector('base');\n\n    if (base) {\n      base.href = new URL(base.getAttribute('href')!, url).href;\n    } else {\n\n      const newBase = doc.createElement('base');\n\n      newBase.href = url.href;\n\n      doc.head.appendChild(newBase);\n    }\n  }\n\n  return doc;\n}\n","import { ContextKey__symbol, SingleContextKey } from '@proc7ts/context-values';\nimport { AfterEvent, afterThe } from '@proc7ts/fun-events';\nimport { BootstrapContext, bootstrapDefault, BootstrapWindow } from '@wesib/wesib';\nimport { Navigation } from '../navigation';\nimport { PageLoadAgent } from './page-load-agent';\nimport { PageLoadURLModifier } from './page-load-url-modifier';\n\nconst PageCacheBuster__key = (/*#__PURE__*/ new SingleContextKey<PageCacheBuster>(\n    'page-cache-buster',\n    {\n      byDefault: bootstrapDefault(context => new PageCacheBuster(context)),\n    },\n));\n\n/**\n * @internal\n */\nexport const appRevSearchParam = '__wesib_app_rev__';\n\n/**\n * @internal\n */\nexport class PageCacheBuster {\n\n  static get [ContextKey__symbol](): SingleContextKey<PageCacheBuster> {\n    return PageCacheBuster__key;\n  }\n\n  readonly urlModifier: AfterEvent<PageLoadURLModifier[]>;\n  readonly agent: AfterEvent<PageLoadAgent[]>;\n\n  constructor(context: BootstrapContext) {\n\n    const rev = appRev(context.get(BootstrapWindow).document);\n\n    if (!rev) {\n      this.urlModifier = afterThe();\n      this.agent = afterThe();\n    } else {\n\n      const navigation = context.get(Navigation);\n\n      this.urlModifier = afterThe(url => url.searchParams.set(appRevSearchParam, rev));\n      this.agent = afterThe(\n          (next, request) => next(new Request(request.url, request))\n              .thru_(\n                  response => {\n                    if (response.ok) {\n\n                      const newRev = appRev(response.document);\n\n                      if (newRev && newRev !== rev) {\n\n                        const url = new URL(response.page.url.href);\n\n                        url.searchParams.set(appRevSearchParam, newRev);\n                        navigation.update(url);\n                        navigation.reload();\n                      }\n                    }\n\n                    return response;\n                  },\n              ),\n      );\n    }\n  }\n\n}\n\nfunction appRev(doc: Document): string | null | undefined {\n  return doc.querySelector('meta[name=wesib-app-rev]')?.getAttribute('content');\n}\n","import { filterIt, itsEach, mapIt, overArray } from '@proc7ts/a-iterable';\nimport { BootstrapContext, BootstrapWindow } from '@wesib/wesib';\nimport { importNode } from '../../util';\nimport { PageLoadAgent } from './page-load-agent';\n\n/**\n * @internal\n */\nexport function pageScriptsAgent(context: BootstrapContext): PageLoadAgent {\n\n  const doc = context.get(BootstrapWindow).document;\n\n  return next => next().thru_(\n      response => {\n        if (response.ok) {\n\n          const allScripts = new Set<string>(mapIt(\n              externalScripts(doc, overArray(doc.scripts)),\n              ([src]) => src,\n          ));\n\n          itsEach(\n              filterIt(\n                  externalScripts(response.document, overArray(response.document.querySelectorAll('script'))),\n                  ([src]) => !allScripts.has(src),\n              ),\n              ([src, script]) => {\n                importNode(script, doc.head, (_from, to) => to.src = src);\n                allScripts.add(src);\n              },\n          );\n        }\n        return response;\n      },\n  );\n}\n\nfunction externalScripts(\n    doc: Document,\n    scripts: Iterable<HTMLScriptElement>,\n): Iterable<readonly [string, HTMLScriptElement]> {\n  return mapIt(\n      filterIt(\n          scripts,\n          script => !!script.src,\n      ),\n      script => [new URL(script.src, doc.baseURI).href, script] as const,\n  );\n}\n","import { itsEach, itsFirst, overArray } from '@proc7ts/a-iterable';\nimport { BootstrapContext, BootstrapWindow } from '@wesib/wesib';\nimport { importNode } from '../../util';\nimport { PageLoadAgent } from './page-load-agent';\n\n/**\n * @internal\n */\nexport function pageStyleAgent(context: BootstrapContext): PageLoadAgent {\n\n  const doc = context.get(BootstrapWindow).document;\n\n  return next => next().thru_(\n      response => {\n        if (!response.ok) {\n          return response;\n        }\n\n        const newStyles = response.document.querySelectorAll<HTMLLinkElement>('link[rel=stylesheet]');\n\n        if (!newStyles.length) {\n          return response;\n        }\n\n        let target: Node = doc.head;\n        let before: Node | null = null;\n        const oldStyles = doc.querySelectorAll<HTMLLinkElement>('link[rel=stylesheet]');\n        const oldStylesByHref = new Map<string, HTMLLinkElement>();\n        const firstOldStyle = oldStyles.item(0);\n\n        if (firstOldStyle) {\n          target = firstOldStyle.parentNode!;\n          before = firstOldStyle;\n          itsEach(\n              overArray(oldStyles),\n              link => oldStylesByHref.set(new URL(link.href, doc.baseURI).href, link),\n          );\n        }\n\n        itsEach(\n            overArray(newStyles),\n            newStyle => {\n\n              const href = new URL(newStyle.href, doc.baseURI).href;\n              const oldStyle = oldStylesByHref.get(href);\n\n              if (oldStyle) {\n                // Style already exists.\n                if (itsFirst(oldStylesByHref.keys()) === href) {\n                  // In proper position already.\n                  // Insert the remaining styles after it.\n                  target = oldStyle.parentNode!;\n                  before = oldStyle.nextSibling;\n                } else {\n                  // Move to proper position.\n                  target.insertBefore(oldStyle, before);\n                }\n                oldStylesByHref.delete(href);\n              } else {\n                // Import new style\n                importNode(newStyle, target, before, (_from, to) => to.href = href);\n              }\n            },\n        );\n\n        // Remove remaining old styles\n        itsEach(oldStylesByHref.values(), style => style.parentNode!.removeChild(style));\n\n        return response;\n      },\n  );\n}\n","import { BootstrapContext, BootstrapWindow } from '@wesib/wesib';\nimport { PageLoadAgent } from './page-load-agent';\n\n/**\n * @internal\n */\nexport function pageTitleAgent(context: BootstrapContext): PageLoadAgent {\n\n  const doc = context.get(BootstrapWindow).document;\n\n  return next => next().thru_(response => {\n    if (response.ok) {\n\n      const title = response.document.getElementsByTagName('title').item(0);\n\n      if (title && title.textContent) {\n        doc.title = title.textContent;\n      }\n    }\n\n    return response;\n  });\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { noop } from '@proc7ts/call-thru';\nimport { eventSupply } from '@proc7ts/fun-events';\nimport {\n  BootstrapWindow,\n  Class,\n  Component,\n  ComponentClass,\n  ComponentContext,\n  ComponentDecorator,\n  ElementRenderScheduler,\n  StateSupport,\n} from '@wesib/wesib';\nimport { importNodeContent } from '../../util';\nimport { Navigation } from '../navigation';\nimport { Page } from '../page';\nimport { PageLoadParam } from './page-load-param';\nimport { PageFragmentRequest } from './page-load-request';\nimport { PageLoadResponse } from './page-load-response';\nimport { PageLoadSupport } from './page-load-support.feature';\n\n/**\n * Creates component decorator that includes page contents into decorated component's element.\n *\n * The page is loaded and included whenever it is {@link Navigation.onEnter entered}.\n *\n * Utilizes [[PageLoadParam]] navigation parameter.\n *\n * Enables [[StateSupport]], [[NavigationSupport]], and [[PageLoadSupport]] features.\n *\n * @typeparam T  A type of decorated component class.\n * @param def  Page inclusion definition.\n *\n * @returns New component decorator.\n */\nexport function IncludePage<T extends ComponentClass = Class>(\n    def: IncludePageDef<InstanceType<T>> = {},\n): ComponentDecorator<T> {\n\n  const onResponse = def.onResponse ? def.onResponse.bind(def) : noop;\n  const contentKey = def.contentKey ? def.contentKey.bind(def) : defaultPageContentKey;\n\n  return Component({\n    feature: {\n      needs: [PageLoadSupport, StateSupport],\n    },\n    define(context) {\n      context.whenComponent(context => {\n\n        const document = context.get(BootstrapWindow).document;\n        const schedule = context.get(ElementRenderScheduler)();\n        const navigation = context.get(Navigation);\n        let lastPageURL: string | undefined = contentKey(navigation.page);\n        const detectFragment = (): PageFragmentRequest => {\n\n          const { fragment } = def;\n\n          if (fragment) {\n            return fragment;\n          }\n\n          const { element: { id, tagName: tag } }: { element: Element } = context;\n\n          return id ? { id } : { tag };\n        };\n\n        context.whenConnected(() => {\n\n          const range = document.createRange();\n\n          range.selectNodeContents(context.contentRoot);\n\n          navigation.read().once(page => {\n            page.put(\n                PageLoadParam,\n                {\n                  fragment: detectFragment(),\n                  receiver: {\n                    supply: eventSupply().needs(context),\n                    receive: (_ctx, response) => handleResponse(response),\n                  },\n                },\n            );\n          });\n\n          function handleResponse(response: PageLoadResponse): void {\n\n            const newPageURL = contentKey(response.page);\n\n            if (newPageURL === lastPageURL) {\n              return; // Only hash changed. Do not refresh the page.\n            }\n\n            if (!response.ok) {\n              schedule(() => onResponse({ context, range, response }));\n              return;\n            }\n\n            lastPageURL = newPageURL;\n            schedule(() => {\n              range.deleteContents();\n\n              const target = document.createDocumentFragment();\n              const { fragment } = response;\n\n              if (fragment) {\n                importNodeContent(fragment, target);\n                range.insertNode(target);\n              }\n\n              onResponse({ context, range, response });\n            });\n          }\n        });\n      });\n    },\n  });\n}\n\n/**\n * @internal\n */\nfunction defaultPageContentKey({ url }: Page): string {\n  return new URL('', url).href;\n}\n\n/**\n * Page inclusion definition.\n *\n * Configures {@link IncludePage @LoadPage} decorator.\n *\n * @typeparam T  A type of component.\n */\nexport interface IncludePageDef<T extends object = any> {\n\n  /**\n   * Page fragment to include.\n   *\n   * By default uses custom element identifier if present, or element tag name otherwise.\n   */\n  readonly fragment?: PageFragmentRequest;\n\n  /**\n   * Builds content key for the given page.\n   *\n   * The loaded content will replace already included one only when their content key differ.\n   *\n   * By default uses page URL without hash part as a key. This prevents content refresh when only URL hash changes.\n   *\n   * @param page  Target page. Either loaded or not.\n   *\n   * @returns Content key.\n   */\n  contentKey?(page: Page): any;\n\n  /**\n   * Performs additional actions during page load.\n   *\n   * This method is called inside page contents render schedule for {@link PageLoadResponse each stage} of page\n   * load. At the final stage it is called after loaded page contents included.\n   *\n   * This method can be used e.g. to indicate the page load progress.\n   *\n   * @param context  Decorated component context.\n   * @param response  Page load response.\n   * @param range  Document range the loaded page contents going to replace.\n   */\n  onResponse?(\n      {\n        context,\n        response,\n        range,\n      }: {\n        context: ComponentContext<T>;\n        response: PageLoadResponse;\n        range: Range;\n      },\n  ): void;\n\n}\n","import cssesc from 'cssesc';\n\n/**\n * @internal\n */\nexport function cssescId(id: string): string {\n  return cssesc(id, { isIdentifier: true });\n}\n\n/**\n * @internal\n */\nexport const IMPORTANT_CSS_SUFFIX = '!important';\n","/**\n * @internal\n */\nexport function isReadonlyArray<T>(value: any): value is readonly T[] {\n  return Array.isArray(value);\n}\n\n/**\n * @internal\n */\nexport function isNotEmptyArray<T>(array: readonly T[]): array is readonly [T, ...T[]];\n\n/**\n * @internal\n */\nexport function isNotEmptyArray<T>(array: T[]): array is [T, ...T[]];\n\n/**\n * @internal\n */\nexport function isNotEmptyArray<T>(array: readonly T[]): boolean {\n  return !!array.length;\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/style-producer\n */\nimport { StypColor } from './color';\nimport { StypNumeric } from './numeric';\nimport { StypPriority } from './priority';\nimport { StypURL } from './url';\n\n/**\n * CSS property value.\n *\n * This is either a scalar value, or {@link StypValueStruct structured} one.\n *\n * @category CSS Value\n */\nexport type StypValue =\n    | string\n    | number\n    | boolean\n    | undefined\n    | StypNumeric<any>\n    | StypURL\n    | StypColor;\n\n/**\n * Structured property CSS value. E.g. [length](https://developer.mozilla.org/en-US/docs/Web/CSS/length),\n * [percentage](https://developer.mozilla.org/en-US/docs/Web/CSS/percentage),\n * [color](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value), etc.\n *\n * @category CSS Value\n * @typeparam Self  A type of itself.\n */\nexport abstract class StypValueStruct<Self extends StypValueStruct<Self>> {\n\n  /**\n   * CSS property value priority.\n   *\n   * The value [[StypPriority.Important]] and above means the property is `!important`. Everything else means normal\n   * priority.\n   *\n   * The property value with higher priority number takes precedence over the one with lower one.\n   */\n  readonly priority: number;\n\n  /**\n   * Constructs structured CSS property value.\n   *\n   * @param opts  Construction options.\n   */\n  protected constructor(opts?: StypValue.Opts) {\n    this.priority = opts && opts.priority || StypPriority.Default;\n  }\n\n  /**\n   * Checks whether this value equals to CSS property value.\n   *\n   * @param other  CSS property value to compare with.\n   */\n  abstract is(other: StypValue): boolean;\n\n  /**\n   * Creates structured CSS value with the given `priority`.\n   *\n   * @param priority  New priority.\n   *\n   * @returns Either a new value equal to this one but having the given `priority`, or this one if `priority` did\n   * not change.\n   */\n  abstract prioritize(priority: number): Self;\n\n  /**\n   * Creates `!important` variant of this value.\n   *\n   * @returns Either a new value equal to this one but having `priority` equal to [[StypPriority.Important]],\n   * or this one if already the case.\n   */\n  important(): Self {\n    return this.prioritize(StypPriority.Important);\n  }\n\n  /**\n   * Creates usual (not `!important`) variant of this value.\n   *\n   * @returns Either a new value equal to this one but having `priority` equal to [[StypPriority.Usual]],\n   * or this one if already the case.\n   */\n  usual(): Self {\n    return this.prioritize(StypPriority.Usual);\n  }\n\n  /**\n   * Maps the given CSS property value to the value of this one's type. Defaults to this value if mapping is not\n   * possible.\n   *\n   * This method allows to use an structured value instance as {@link StypMapper.Mapping CSS property mapping}.\n   *\n   * @param source  A raw property value that should be converted.\n   *\n   * @returns Mapped property value.\n   */\n  abstract by(source: StypValue): StypValue;\n\n  /**\n   * Returns textual representation of this value.\n   *\n   * Textual representation never contains an `!important` suffix.\n   *\n   * @returns A textual representation of this value to use as CSS property value.\n   */\n  abstract toString(): string;\n\n}\n\nexport namespace StypValue {\n\n  /**\n   * Construction options of structured property CSS value.\n   */\n  export interface Opts {\n\n    /**\n     * Constructed value priority.\n     *\n     * The value [[StypPriority.Important]] and above means the property is `!important`. Everything else means normal\n     * priority.\n     */\n    readonly priority?: number;\n\n  }\n\n}\n\n/**\n * Checks whether two CSS property values are equal.\n *\n * Compares scalar values verbatim. Compares structured values using their [[StypValueStruct.is]] method. The latter\n * method is applied when at least one of the values is structured.\n *\n * @category CSS Value\n * @param first  The first CSS property value to compare.\n * @param second  The second CSS property value to compare.\n *\n * @returns `true` if `first` equals to `second`, or `false otherwise.\n */\nexport function stypValuesEqual(first: StypValue, second: StypValue): boolean {\n  if (first === second) {\n    return true;\n  }\n  if (typeof first === 'object') {\n    return first.is(second);\n  }\n  if (typeof second === 'object') {\n    return second.is(first);\n  }\n  return false;\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/style-producer\n */\nimport { StypValue, StypValueStruct } from '../value';\n\n/**\n * Structured [color](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value) CSS property value.\n *\n * Colors are represented by either `rgb()`, or `hsl()` functional notations.\n *\n * @category CSS Value\n */\nexport type StypColor = StypRGB | StypHSL;\n\n/**\n * Structured color CSS property value base.\n *\n * @category CSS Value\n */\nexport abstract class StypColorStruct<Self extends StypColorStruct<Self, Coords>, Coords>\n    extends StypValueStruct<Self> {\n\n  /**\n   * Color value type corresponding to color coordinates. Either `rgb` or `hsl`\n   */\n  abstract readonly type: 'rgb' | 'hsl';\n\n  /**\n   * This color in RGB coordinates.\n   */\n  abstract readonly rgb: StypRGB;\n\n  /**\n   * This color in HSL coordinates.\n   */\n  abstract readonly hsl: StypHSL;\n\n  /**\n   * Constructs another color value with updated coordinates.\n   *\n   * @param coords  Either partial color coordinates to apply or a function returning them and accepting this color\n   * instance as its only argument. Missing values are taken from this color.\n   *\n   * @returns Updated color value.\n   */\n  abstract set(coords: Partial<Coords> | ((this: void, color: this) => Partial<Coords>)): Self;\n\n}\n\n/**\n * CSS property value representing [RGB color](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#RGB_colors)\n * in `rgb()` or `rgba()` functional notation.\n *\n * @category CSS Value\n */\nexport class StypRGB extends StypColorStruct<StypRGB, StypRGB.Coords> implements StypRGB.Coords {\n\n  // noinspection JSMethodCanBeStatic\n  /**\n   * `rgb` value type.\n   */\n  get type(): 'rgb' {\n    return 'rgb';\n  }\n\n  /**\n   * Red color value between `0` and `255`.\n   */\n  readonly r: number;\n\n  /**\n   * Green color value between `0` and `255`.\n   */\n  readonly g: number;\n\n  /**\n   * Blue color value between `0` and `255`.\n   */\n  readonly b: number;\n\n  /**\n   * Alpha value between `0` and `1`.\n   */\n  readonly a: number;\n\n  /**\n   * Constructs RGB color value.\n   *\n   * @param coords  Color coordinates.\n   * @param opts  Construction options.\n   */\n  constructor(coords: StypRGB.Coords, opts?: StypValue.Opts) {\n    super(opts);\n    this.r = intCoord(coords.r, 255);\n    this.g = intCoord(coords.g, 255);\n    this.b = intCoord(coords.b, 255);\n    this.a = coords.a != null ? coord(coords.a, 1) : 1;\n  }\n\n  /**\n   * This color in RGB coordinates.\n   *\n   * Always the same as `this`.\n   */\n  get rgb(): this {\n    return this;\n  }\n\n  /**\n   * This color in HSL coordinates.\n   */\n  get hsl(): StypHSL {\n\n    const { a } = this;\n    const r = this.r * 100 / 255;\n    const g = this.g * 100 / 255;\n    const b = this.b * 100 / 255;\n    const max = Math.max(r, g, b);\n    const min = Math.min(r, g, b);\n    const l = Math.round((max + min) / 2);\n\n    if (max === min) {\n      return new StypHSL({ h: 0, s: 0, l, a }, this);\n    }\n\n    const d = max - min;\n    const s = Math.round(l > 50 ? d * 100 / (200 - max - min) : d * 100 / (max + min));\n    let h: number;\n\n    switch (max) {\n      case r:\n        h = ((g - b) / d) + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = ((b - r) / d) + 2;\n        break;\n      default:\n        h = ((r - g) / d) + 4;\n        break;\n    }\n    h *= 60;\n    h = Math.round(h);\n\n    return new StypHSL({ h, s, l, a }, this);\n  }\n\n  by(source: StypValue): StypColor {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    return StypColor.by(source) || this;\n  }\n\n  is(other: StypValue): boolean {\n    return typeof other === 'object'\n        && other.type === this.type\n        && other.r === this.r\n        && other.g === this.g\n        && other.b === this.b\n        && other.a === this.a\n        && other.priority === this.priority;\n  }\n\n  prioritize(priority: number): StypRGB {\n    return this.priority === priority ? this : new StypRGB(this, { priority });\n  }\n\n  set(coords: Partial<StypRGB.Coords> | ((this: void, color: this) => Partial<StypRGB.Coords>)): StypRGB {\n    if (typeof coords === 'function') {\n      coords = coords(this);\n    }\n\n    const { r = this.r, g = this.g, b = this.b, a = this.a } = coords;\n\n    return new StypRGB({ r, g, b, a }, this);\n  }\n\n  toString(): string {\n\n    const rgb = `${this.r}, ${this.g}, ${this.b}`;\n\n    return this.a === 1 ? `rgb(${rgb})` : `rgba(${rgb}, ${this.a})`;\n\n  }\n\n}\n\nexport namespace StypRGB {\n\n  /**\n   * [RGB color](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#RGB_colors) coordinates.\n   */\n  export interface Coords {\n\n    /**\n     * Red color value between `0` and `255`.\n     */\n    r: number;\n\n    /**\n     * Green color value between `0` and `255`.\n     */\n    g: number;\n\n    /**\n     * Blue color value between `0` and `255`.\n     */\n    b: number;\n\n    /**\n     * Alpha value between `0` and `1`. `1` (full opacity) by default.\n     */\n    a?: number;\n  }\n\n}\n\n/**\n * CSS property value representing [HSL color](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#HSL_colors)\n * in `hsl()` or `hsla()` functional notation.\n *\n * @category CSS Value\n */\nexport class StypHSL extends StypColorStruct<StypHSL, StypHSL.Coords> implements StypHSL.Coords {\n\n  // noinspection JSMethodCanBeStatic\n  get type(): 'hsl' {\n    return 'hsl';\n  }\n\n  /**\n   * Hue angle value in degrees between `0` and `360`.\n   */\n  readonly h: number;\n\n  /**\n   * Saturation percentage.\n   */\n  readonly s: number;\n\n  /**\n   * Lightness percentage.\n   */\n  readonly l: number;\n\n  /**\n   * Alpha value between `0` and `1`.\n   */\n  readonly a: number;\n\n  /**\n   * Constructs HSL color value.\n   *\n   * @param coords  Color coordinates.\n   * @param opts  Construction options.\n   */\n  constructor(coords: StypHSL.Coords, opts?: StypValue.Opts) {\n    super(opts);\n    this.h = angleCoord(coords.h);\n    this.s = coord(coords.s, 100);\n    this.l = coord(coords.l, 100);\n    this.a = coords.a != null ? coord(coords.a, 1) : 1;\n  }\n\n  /**\n   * This color in RGB coordinates.\n   */\n  get rgb(): StypRGB {\n\n    const { a } = this;\n    const s = this.s / 100;\n    const l = this.l / 100;\n\n    if (!s) {\n\n      const c = l * 255;\n\n      return new StypRGB({ r: c, g: c, b: c, a }, this);\n    }\n\n    const q = l < 0.5 ? l * (1 + s) : (l + s) - (l * s);\n    const p = (2 * l) - q;\n    const hueAsFraction = this.h / 360;\n\n    return new StypRGB(\n        {\n          r: hueToRgb(p, q, hueAsFraction + (1.0 / 3.0)),\n          g: hueToRgb(p, q, hueAsFraction),\n          b: hueToRgb(p, q, hueAsFraction - (1.0 / 3.0)),\n          a,\n        },\n        this,\n    );\n  }\n\n  /**\n   * This color in HSL coordinates.\n   *\n   * Always the same as `this`.\n   */\n  get hsl(): this {\n    return this;\n  }\n\n  by(source: StypValue): StypColor {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    return StypColor.by(source) || this;\n  }\n\n  is(other: StypValue): boolean {\n    return typeof other === 'object'\n        && other.type === this.type\n        && other.h === this.h\n        && other.s === this.s\n        && other.l === this.l\n        && other.a === this.a\n        && other.priority === this.priority;\n  }\n\n  prioritize(priority: number): StypHSL {\n    return this.priority === priority ? this : new StypHSL(this, { priority });\n  }\n\n  set(coords: Partial<StypHSL.Coords> | ((this: void, color: this) => Partial<StypHSL.Coords>)): StypHSL {\n    if (typeof coords === 'function') {\n      coords = coords(this);\n    }\n\n    const { h = this.h, s = this.s, l = this.l, a = this.a } = coords;\n\n    return new StypHSL({ h, s, l, a }, this);\n  }\n\n  toString(): string {\n\n    const hsl = `${this.h}, ${this.s}%, ${this.l}%`;\n\n    return this.a === 1 ? `hsl(${hsl})` : `hsla(${hsl}, ${this.a})`;\n  }\n\n}\n\nexport namespace StypHSL {\n\n  /**\n   * [HSL color](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#HSL_colors) coordinates.\n   */\n  export interface Coords {\n\n    /**\n     * Hue angle value in degrees.\n     */\n    h: number;\n\n    /**\n     * Saturation percentage.\n     */\n    s: number;\n\n    /**\n     * Lightness percentage.\n     */\n    l: number;\n\n    /**\n     * Alpha value between `0` and `1`. `1` (full opacity) by default.\n     */\n    a?: number;\n  }\n\n}\n\n/**\n * @category CSS Value\n */\nexport const StypColor = {\n\n  /**\n   * Maps the given CSS property value to color. Defaults to `undefined` if mapping is not possible.\n   *\n   * This method allows to use a [[StypColor]] object as {@link StypMapper.Mapping CSS property mapping}.\n   *\n   * @param source  A raw property value that should be converted.\n   *\n   * @returns Mapped property value or `undefined`.\n   */\n  by(source: StypValue): StypColor | undefined {\n    if (typeof source === 'object' && (source.type === 'rgb' || source.type === 'hsl')) {\n      return source;\n    }\n    return;\n  },\n\n};\n\n/**\n * @internal\n */\nfunction angleCoord(value: number): number {\n  value = value % 360;\n  return value < 0 ? 360 + value : value;\n}\n\n/**\n * @internal\n */\nfunction intCoord(value: number, max: number): number {\n  return coord(Math.round(value), max);\n}\n\n/**\n * @internal\n */\nfunction coord(value: number, max: number): number {\n  return Math.max(Math.min(value, max), 0);\n}\n\n/**\n * @internal\n */\nfunction hueToRgb(p: number, q: number, t: number): number {\n\n  let newT = t;\n\n  if (newT < 0) {\n    newT += 1;\n  } else if (newT > 1) {\n    newT -= 1;\n  }\n\n  let result;\n\n  if (newT < 1.0 / 6.0) {\n    result = p + ((q - p) * (6 * newT));\n  } else if (newT < 1.0 / 2.0) {\n    result = q;\n  } else if (newT < 2.0 / 3.0) {\n    result = p + (((q - p) * ((2.0 / 3.0) - newT)) * 6);\n  } else {\n    result = p;\n  }\n\n  return result * 255;\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/style-producer\n */\nimport { StypColor, StypRGB } from './color';\n\n/**\n * Mixes two colors.\n *\n * Both the `weight` and the relative opacity of each color determines how much of each color is in the result.\n *\n * @category CSS Value\n * @param color1  First color to mix\n * @param color2  Second color to mix.\n * @param weight  A number between `0` and `1`. A larger weight indicates that more of `color1` should be used, and a\n * smaller weight indicates that more of `color2` should be used.\n *\n * @returns Mixed color.\n */\nexport function mixStypColors(color1: StypColor, color2: StypColor, weight: number): StypColor {\n\n  const w = weight * 2 - 1;\n  const rgba1 = color1.rgb;\n  const rgba2 = color2.rgb;\n  const aDiff = rgba1.a - rgba2.a;\n  const w1 = (((w * aDiff === -1) ? w : (w + aDiff) / (1 + w * aDiff)) + 1) / 2.0;\n  const w2 = 1 - w1;\n  return new StypRGB(\n      {\n        r: rgba1.r * w1 + rgba2.r * w2,\n        g: rgba1.g * w1 + rgba2.g * w2,\n        b: rgba1.b * w1 + rgba2.b * w2,\n        a: rgba1.a * weight + rgba2.a * (1 - weight),\n      },\n      color1,\n  );\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/style-producer\n */\nimport { IMPORTANT_CSS_SUFFIX } from '../internal';\nimport { StypValue } from './value';\n\n/**\n * Predefined CSS property value priorities.\n *\n * @category CSS Value\n */\nexport const enum StypPriority {\n\n  /**\n   * Usual, non-important priority.\n   *\n   * This priority is assigned to values by [[StypValueStruct.usual]] method.\n   */\n  Usual = 0,\n\n  /**\n   * Default priority.\n   *\n   * The same as `Usual`. This priority is assigned to values by default.\n   */\n  Default = Usual,\n\n  /**\n   * Important priority.\n   *\n   * This priority corresponds to values with `!important` suffix. It is applied to string values with `!important`\n   * suffix, and can be assigned to structured values using [[StypValueStruct.important]] method.\n   *\n   * All numeric priorities with higher values are rendered as `!important` ones.\n   */\n  Important = 1,\n\n}\n\n/**\n * Splits undefined CSS property value onto non-prioritized value and priority.\n *\n * @category CSS Value\n * @param value  Undefined CSS property value to split.\n *\n * @returns An `[undefined, 0]` tuple.\n */\nexport function stypSplitPriority<T extends StypValue>(value: undefined): [undefined, 0];\n\n/**\n * Splits string CSS property value onto non-prioritized value and priority.\n *\n * @param value  CSS property value to split.\n *\n * @returns A tuple containing the value without `!priority` suffix, and numeric priority (0 or 1).\n */\nexport function stypSplitPriority(value: string): [string, 0 | 1];\n\n/**\n * Splits scalar CSS property value onto non-prioritized value and priority.\n *\n * @param value  CSS property value to split.\n *\n * @returns A tuple containing the value and `0` priority.\n */\nexport function stypSplitPriority<T extends number | boolean>(value: T): [T, 0];\n\n/**\n * Splits arbitrary CSS property value onto value non-prioritized value and priority.\n *\n * @param value  CSS property value to split.\n *\n * @returns A tuple containing the value and numeric priority.\n */\nexport function stypSplitPriority<T extends StypValue>(value: T): [T, number];\n\nexport function stypSplitPriority<T extends StypValue>(value: T): [T, number] {\n  if (value == null) {\n    return [undefined as T, StypPriority.Default];\n  }\n\n  switch (typeof value) {\n    case 'object':\n      return [value, value.priority];\n    case 'string':\n      if (value.endsWith(IMPORTANT_CSS_SUFFIX)) {\n        return[value.substring(0, value.length - IMPORTANT_CSS_SUFFIX.length).trim() as T, StypPriority.Important];\n      }\n  }\n\n  return [value, StypPriority.Default];\n}\n","import { StypPriority } from '../priority';\nimport { StypValue, stypValuesEqual } from '../value';\nimport {\n  StypAddSub as StypAddSub_,\n  StypDimension as StypDimension_,\n  StypMulDiv as StypMulDiv_,\n  StypNumeric,\n  StypNumericStruct,\n} from './numeric';\nimport { StypZero } from './zero';\n\n/**\n * @internal\n */\nexport class StypDimension<Unit extends string>\n    extends StypNumericStruct<StypDimension<Unit>, Unit>\n    implements StypDimension_<Unit> {\n\n  // noinspection JSMethodCanBeStatic\n  get type(): 'dimension' {\n    return 'dimension';\n  }\n\n  /**\n   * The number value.\n   */\n  readonly val: number;\n\n  /**\n   * The unit.\n   */\n  readonly unit: Unit;\n\n  /**\n   * Constructs new structured dimension value.\n   *\n   * @param val  The numeric value.\n   * @param unit  The unit.\n   * @param opts  CSS value options.\n   */\n  constructor(val: number, unit: Unit, opts: StypDimension_.Opts<Unit>) {\n    super(opts);\n    this.val = val;\n    this.unit = unit;\n  }\n\n  toDim<U extends string>(dim: StypDimension_.Kind<U>): StypDimension_<U> | undefined {\n\n    const thisDim: StypDimension_.Kind<any> = this.dim;\n\n    if (dim === thisDim /* same dimension */\n        || dim === thisDim.pt /* !% to compatible +% */\n        || dim === (this.unit === '%' ? dim.pt /* % to any +% */ : thisDim.noPt /* !% to compatible -% */)) {\n      return this as StypDimension_<any>;\n    }\n\n    return;\n  }\n\n  is(other: StypValue): boolean {\n    if (other === this) {\n      return true;\n    }\n    return typeof other === 'object'\n        && other.type === this.type\n        && this.unit === other.unit\n        && this.val === other.val\n        && this.priority === other.priority;\n  }\n\n  prioritize(priority: number): StypDimension<Unit> {\n    return this.priority === priority\n        ? this\n        : new StypDimension(this.val, this.unit, { dim: this.dim, priority });\n  }\n\n  add(addendum: StypNumeric<Unit>): StypNumeric<Unit>;\n\n  add(addendum: number, unit?: Unit): StypNumeric<Unit>;\n\n  add(addendum: StypNumeric<Unit> | number, unit?: Unit): StypNumeric<Unit> {\n    if (typeof addendum === 'number') {\n      addendum = stypDimension(addendum, unit || this.unit, this);\n    }\n    if (addendum.type === 'dimension' && this.unit === addendum.unit) {\n      return stypDimension(this.val + addendum.val, this.unit, this);\n    }\n    return stypAddSub(this, '+', addendum);\n  }\n\n  sub(subtrahend: StypNumeric<Unit>): StypNumeric<Unit>;\n\n  sub(subtrahend: number, unit?: Unit): StypNumeric<Unit>;\n\n  sub(subtrahend: StypNumeric<Unit> | number, unit?: Unit): StypNumeric<Unit> {\n    if (typeof subtrahend === 'number') {\n      subtrahend = stypDimension(subtrahend, unit || this.unit, this);\n    }\n    if (subtrahend.type === 'dimension' && this.unit === subtrahend.unit) {\n      return stypDimension(this.val - subtrahend.val, this.unit, this);\n    }\n    return stypAddSub(this, '-', subtrahend);\n  }\n\n  mul(multiplier: number): StypNumeric<Unit> {\n    return multiplier === 1 ? this : stypDimension(this.val * multiplier, this.unit, this);\n  }\n\n  div(divisor: number): StypNumeric<Unit> {\n    return divisor === 1 ? this : stypDimension(this.val / divisor, this.unit, this);\n  }\n\n  negate(): StypNumeric<Unit> {\n    return stypDimension(-this.val, this.unit, this);\n  }\n\n  /**\n   * Returns a textual representation of this value to be used within CSS `calc()` function.\n   *\n   * @returns `<value><unit>` or just `0`.\n   */\n  toFormula(): string {\n    return this.val + this.unit;\n  }\n\n}\n\n/**\n * Constructs structured [dimension] CSS property value.\n *\n * @param val  Numeric value.\n * @param unit  Value unit.\n * @param opts  Construction options.\n *\n * @returns Either [[StypDimension]], or [[StypZero]] if `val === 0`.\n *\n * [dimension]: https://developer.mozilla.org/en-US/docs/Web/CSS/dimension\n *\n * @internal\n */\nexport function stypDimension<Unit extends string>(\n    val: number,\n    unit: Unit,\n    opts: StypDimension_.Opts<Unit>,\n): StypDimension_<Unit> | StypZero<Unit> {\n  return val\n      ? new StypDimension<Unit>(val, unit, opts)\n      : opts.dim.zero.prioritize(opts.priority || StypPriority.Default);\n}\n\n/**\n * @internal\n */\nexport abstract class StypCalcBase<\n    Self extends StypCalcBase<Self, Op, Right, Unit>,\n    Op extends '+' | '-' | '*' | '/',\n    Right extends number | StypNumeric<Unit>,\n    Unit extends string>\n    extends StypNumericStruct<Self, Unit> {\n\n  // noinspection JSMethodCanBeStatic\n  get type(): 'calc' {\n    return 'calc';\n  }\n\n  readonly left: StypNumeric<Unit>;\n  readonly op: Op;\n  readonly right: Right;\n\n  // noinspection TypeScriptAbstractClassConstructorCanBeMadeProtected\n  constructor(\n      left: StypNumeric<Unit>,\n      op: Op,\n      right: Right,\n      opts: StypDimension_.Opts<Unit>,\n  ) {\n    super(opts);\n    this.left = left.usual();\n    this.op = op;\n    this.right = right;\n  }\n\n  is(other: StypValue): boolean {\n    if (this === other) {\n      return true;\n    }\n    if (typeof other === 'object' && other.type === this.type) {\n      return this.op === other.op\n          && this.left.is(other.left)\n          && stypValuesEqual(this.right, other.right)\n          && this.priority === other.priority;\n    }\n    return false;\n  }\n\n  add(addendum: StypNumeric<Unit>): StypNumeric<Unit>;\n\n  add(addendum: number, unit: Unit): StypNumeric<Unit>;\n\n  add(addendum: StypNumeric<Unit> | number, unit?: Unit): StypNumeric<Unit> {\n    if (typeof addendum === 'number') {\n      addendum = stypDimension(addendum, unit as Unit, this);\n    }\n    return stypAddSub(this as StypNumeric<Unit>, '+', addendum);\n  }\n\n  sub(subtrahend: StypNumeric<Unit>): StypNumeric<Unit>;\n\n  sub(subtrahend: number, unit: Unit): StypNumeric<Unit>;\n\n  sub(subtrahend: StypNumeric<Unit> | number, unit?: Unit): StypNumeric<Unit> {\n    if (typeof subtrahend === 'number') {\n      subtrahend = stypDimension(subtrahend, unit as Unit, this);\n    }\n    return stypAddSub(this as StypNumeric<Unit>, '-', subtrahend);\n  }\n\n  mul(multiplier: number): StypNumeric<Unit> {\n    return stypMul(this as StypNumeric<Unit>, multiplier);\n  }\n\n  div(divisor: number): StypNumeric<Unit> {\n    return stypDiv(this as StypNumeric<Unit>, divisor);\n  }\n\n  abstract negate(): StypNumeric<Unit>;\n\n  abstract prioritize(priority: number): Self;\n\n  abstract toFormula(): string;\n\n  toString(): string {\n    return 'calc' + super.toString();\n  }\n\n}\n\n/**\n * CSS `calc()` function call representation containing either addition or subtraction.\n *\n * @typeparam Unit  Allowed unit type.\n *\n * @internal\n */\nexport class StypAddSub<Unit extends string>\n    extends StypCalcBase<StypAddSub<Unit>, '+' | '-', StypNumeric<Unit>, Unit>\n    implements StypAddSub_<Unit> {\n\n  constructor(left: StypNumeric<Unit>, op: '+' | '-', right: StypNumeric<Unit>, opts: StypDimension_.Opts<Unit>) {\n    super(left, op, right.usual(), opts);\n  }\n\n  prioritize(priority: number): StypAddSub<Unit> {\n    return this.priority === priority\n        ? this\n        : new StypAddSub(this.left, this.op, this.right, { dim: this.dim, priority });\n  }\n\n  toDim<U extends string>(dim: StypDimension_.Kind<U>): StypAddSub<U> | undefined {\n\n    const left = this.left.toDim(dim);\n\n    if (!left) {\n      return;\n    }\n\n    const right = this.right.toDim(dim);\n\n    if (!right) {\n      return;\n    }\n\n    if (left === this.left as StypNumeric<any> && right === this.right as StypNumeric<any>) {\n      return this as StypAddSub<any>;\n    }\n\n    return new StypAddSub<U>(left, this.op, right, { dim, priority: this.priority });\n  }\n\n  negate(): StypNumeric<Unit> {\n    return this.op === '-'\n        ? new StypAddSub(this.right, this.op, this.left, this)\n        : new StypAddSub(this.left.negate(), '-', this.right, this);\n  }\n\n  /**\n   * Returns a textual representation of this value to be used within CSS `calc()` function.\n   *\n   * @returns `(<left> <op> <right>)`.\n   */\n  toFormula(): string {\n    return `(${this.left.toFormula()} ${this.op} ${this.right.toFormula()})`;\n  }\n\n}\n\nfunction stypAddSub<Unit extends string>(\n    left: StypNumeric<Unit>,\n    op: '+' | '-',\n    right: StypNumeric<Unit>,\n): StypNumeric<Unit> {\n  return !right.type ? left : new StypAddSub(left, op, right, left);\n}\n\n/**\n * CSS `calc()` function call representation containing either multiplication or division.\n *\n * @typeparam Unit  Allowed unit type.\n *\n * @internal\n */\nexport class StypMulDiv<Unit extends string>\n    extends StypCalcBase<StypMulDiv<Unit>, '*' | '/', number, Unit>\n    implements StypMulDiv_<Unit> {\n\n  prioritize(priority: number): StypMulDiv<Unit> {\n    return this.priority === priority\n        ? this\n        : new StypMulDiv(this.left, this.op, this.right, { dim: this.dim, priority });\n  }\n\n  toDim<U extends string>(dim: StypDimension_.Kind<U>): StypMulDiv<U> | undefined {\n\n    const left = this.left.toDim(dim);\n\n    if (!left) {\n      return;\n    }\n\n    if (left === this.left as StypNumeric<any>) {\n      return this as StypMulDiv<any>;\n    }\n\n    return new StypMulDiv<U>(left, this.op, this.right, { dim, priority: this.priority });\n  }\n\n  mul(multiplier: number): StypNumeric<Unit> {\n    return (this.op === '*'\n        ? stypMul(this.left, this.right * multiplier)\n        : stypDiv(this.left, this.right / multiplier))\n        .prioritize(this.priority);\n  }\n\n  div(divisor: number): StypNumeric<Unit> {\n    return (this.op === '/'\n        ? stypDiv(this.left, this.right * divisor)\n        : stypMul(this.left, this.right / divisor))\n        .prioritize(this.priority);\n  }\n\n  negate(): StypNumeric<Unit> {\n    return new StypMulDiv(this.left, this.op, -this.right, this);\n  }\n\n  /**\n   * Returns a textual representation of this value to be used within CSS `calc()` function.\n   *\n   * @returns `(<left> <op> <right>)`.\n   */\n  toFormula(): string {\n    return `(${this.left.toFormula()} ${this.op} ${this.right})`;\n  }\n\n}\n\nfunction stypMul<Unit extends string>(left: StypNumeric<Unit>, right: number): StypNumeric<Unit> {\n  return !right\n      ? left.dim.zero.prioritize(left.priority)\n      : right === 1\n          ? left.prioritize(left.priority)\n          : new StypMulDiv(left, '*', right, left);\n}\n\nfunction stypDiv<Unit extends string>(left: StypNumeric<Unit>, right: number): StypNumeric<Unit> {\n  return right === 1\n      ? left.prioritize(left.priority)\n      : new StypMulDiv(left, '/', right, left);\n}\n\n/**\n * @internal\n */\nexport function isStypNumeric(source: StypValue): source is StypNumeric<any, any> {\n  return typeof source === 'object' && (source.type === 'dimension' || source.type === 'calc' || source.type === 0);\n}\n","import { StypValue } from '../value';\nimport { StypDimension, StypNumeric } from './numeric';\nimport { isStypNumeric, StypDimension as StypDimension_ } from './numeric.impl';\nimport { StypZero } from './zero';\nimport { newStypZero } from './zero.impl';\n\n/**\n * @internal\n */\nexport function unitlessZeroDimensionKind<Unit extends string>(\n    {\n      pt,\n      noPt,\n    }: {\n      pt: () => StypDimension.Kind.UnitlessZero<Unit | '%'>;\n      noPt: () => StypDimension.Kind.UnitlessZero<Exclude<Unit, '%'>>;\n    },\n): StypDimension.Kind.UnitlessZero<Unit> {\n\n  const dimension: StypDimension.Kind.UnitlessZero<Unit> = {\n\n    get zero(): StypZero<Unit> {\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      return zero;\n    },\n\n    get pt() {\n      return pt();\n    },\n\n    get noPt() {\n      return noPt();\n    },\n\n    of(val: number, unit: Unit): StypDimension<Unit> | StypZero<Unit> {\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      return val ? new StypDimension_(val, unit, { dim: this }) : zero;\n    },\n\n    by(source: StypValue): StypNumeric<Unit> | undefined {\n      if (!isStypNumeric(source)) {\n        return;\n      }\n\n      const numeric: StypNumeric<any, any> = source;\n\n      return numeric.toDim(this);\n    },\n\n  };\n\n  const zero = newStypZero<Unit>(dimension);\n\n  return dimension;\n}\n\n/**\n * @internal\n */\nexport function unitZeroDimensionKind<Unit extends string>(\n    {\n      zeroUnit,\n      withPercent,\n      noPercent,\n    }: {\n      zeroUnit: Unit;\n      withPercent?: () => StypDimension.Kind.UnitZero<Unit | '%'>;\n      noPercent?: () => StypDimension.Kind.UnitZero<Exclude<Unit, '%'>>;\n    },\n): StypDimension.Kind.UnitZero<Unit> {\n\n  const dim: StypDimension.Kind.UnitZero<Unit> = {\n\n    get pt() {\n      return withPercent && withPercent();\n    },\n\n    get noPt() {\n      return noPercent ? noPercent() : this as StypDimension.Kind.UnitZero<Exclude<Unit, '%'>>;\n    },\n\n    get zero(): StypDimension<Unit> {\n      return zero;// eslint-disable-line @typescript-eslint/no-use-before-define\n    },\n\n    of(val: number, unit: Unit): StypDimension<Unit> {\n      return new StypDimension_(val, unit, { dim: this });\n    },\n\n    by(source: StypValue): StypNumeric<Unit, StypDimension<Unit>> | undefined {\n      if (!isStypNumeric(source)) {\n        return;\n      }\n\n      const numeric: StypNumeric<any, any> = source;\n\n      return numeric.toDim(this);\n    },\n\n  };\n\n  const zero = new StypDimension_(0, zeroUnit, { dim });\n\n  return dim;\n}\n","import { StypPriority } from '../priority';\nimport { StypValue } from '../value';\nimport { StypDimension, StypNumeric, StypNumericStruct } from './';\nimport { stypDimension } from './numeric.impl';\nimport { StypZero } from './zero';\n\nclass Zero<Unit extends string> extends StypNumericStruct<Zero<Unit>, Unit> implements StypZero<Unit> {\n\n  constructor(private readonly _byPriority: ZeroByPriority<Unit>, opts: StypDimension.Opts<Unit>) {\n    super(opts);\n  }\n\n  get type(): 0 {\n    return 0;\n  }\n\n  toDim<U extends string>(dim: StypDimension.Kind<U>): StypDimension<U> | StypZero<U> {\n    return dim.zero.prioritize(this.priority);\n  }\n\n  is(other: StypValue): boolean {\n    if (this === other) {\n      return true;\n    }\n    if (typeof other === 'object') {\n      return other.type === this.type && other.priority === this.priority;\n    }\n    if (other === 0 || other === '0') {\n      return this.priority === StypPriority.Usual;\n    }\n    if (other === '0 !important') {\n      return this.priority === StypPriority.Important;\n    }\n    return false;\n  }\n\n  add(addendum: StypNumeric<Unit>): StypNumeric<Unit>;\n\n  add(addendum: number, unit?: Unit): StypNumeric<Unit>;\n\n  add(addendum: StypNumeric<Unit> | number, unit?: Unit): StypNumeric<Unit> {\n    if (typeof addendum === 'number') {\n      addendum = stypDimension(addendum, unit as Unit, this);\n    }\n    return addendum.prioritize(this.priority);\n  }\n\n  sub(subtrahend: StypNumeric<Unit>): StypNumeric<Unit>;\n\n  sub(subtrahend: number, unit: Unit): StypNumeric<Unit>;\n\n  sub(subtrahend: StypNumeric<Unit> | number, unit?: Unit): StypNumeric<Unit> {\n    if (typeof subtrahend === 'number') {\n      subtrahend = stypDimension(subtrahend, unit as Unit, this);\n    }\n    return subtrahend.negate().prioritize(this.priority);\n  }\n\n  mul(): this {\n    return this;\n  }\n\n  div(): this {\n    return this;\n  }\n\n  negate(): this {\n    return this;\n  }\n\n  prioritize(priority: number): Zero<Unit> {\n    return this._byPriority.get(priority);\n  }\n\n  important(): Zero<Unit> {\n    return this._byPriority.important;\n  }\n\n  usual(): Zero<Unit> {\n    return this._byPriority.usual;\n  }\n\n  toFormula(): string {\n    return '0';\n  }\n\n}\n\nclass ZeroByPriority<Unit extends string> {\n\n  readonly usual: Zero<Unit>;\n  readonly important: Zero<Unit>;\n\n  constructor(readonly dim: StypDimension.Kind<Unit>) {\n    this.usual = new Zero(this, { dim });\n    this.important = new Zero(this, { dim, priority: StypPriority.Important });\n  }\n\n  get(priority: number): Zero<Unit> {\n    switch (priority) {\n      case StypPriority.Usual: return this.usual;\n      case StypPriority.Important: return this.important;\n    }\n    return new Zero(this, { dim: this.dim, priority });\n  }\n\n}\n\n/**\n * @internal\n */\nexport function newStypZero<Unit extends string>(dim: StypDimension.Kind.UnitlessZero<Unit>): StypZero<Unit> {\n  return new ZeroByPriority<Unit>(dim).usual;\n}\n","import { filterIt, itsIterator, itsReduction, overEntries } from '@proc7ts/a-iterable';\nimport { asis, isPresent, nextSkip, NextSkip, valuesProvider } from '@proc7ts/call-thru';\nimport {\n  afterAll,\n  AfterEvent,\n  afterSupplied,\n  afterThe,\n  EventKeeper,\n  EventSender,\n  isEventKeeper,\n  isEventSender,\n} from '@proc7ts/fun-events';\nimport { IMPORTANT_CSS_SUFFIX } from '../internal';\nimport { StypValue, stypValuesEqual } from '../value';\nimport { StypProperties } from './properties';\nimport { StypRule } from './rule';\n\n/**\n * @internal\n */\nexport const noStypProperties: AfterEvent<[StypProperties]> = (/*#__PURE__*/ afterThe({}));\n\n/**\n * @internal\n */\nexport function noStypPropertiesSpec(): AfterEvent<[StypProperties]> {\n  return noStypProperties;\n}\n\n/**\n * @internal\n */\nexport function stypPropertiesBySpec(rule: StypRule, spec?: StypProperties.Spec): AfterEvent<[StypProperties]> {\n  if (!spec) {\n    return noStypProperties;\n  }\n  if (typeof spec !== 'string') {\n    if (isEventKeeper(spec)) {\n      return preventDuplicates(spec);\n    }\n    if (isEventSender(spec)) {\n      return preventDuplicates(propertiesKeeper(spec));\n    }\n    if (typeof spec === 'function') {\n\n      const senderOrProperties = spec(rule);\n\n      if (typeof senderOrProperties !== 'string') {\n        if (isEventKeeper(senderOrProperties)) {\n          return preventDuplicates(senderOrProperties);\n        }\n        if (isEventSender(senderOrProperties)) {\n          return preventDuplicates(propertiesKeeper(senderOrProperties));\n        }\n      }\n\n      return afterThe(propertiesMap(senderOrProperties));\n    }\n  }\n\n  return afterThe(propertiesMap(spec));\n}\n\nfunction propertiesKeeper(sender: EventSender<[string | StypProperties]>): AfterEvent<[string | StypProperties]> {\n  return afterSupplied(sender, valuesProvider({}));\n}\n\nfunction preventDuplicates(properties: EventKeeper<[string | StypProperties]>): AfterEvent<[StypProperties]> {\n  return afterSupplied(properties).keepThru(\n      propertiesMap,\n      passNonDuplicate(),\n      asis as (props: StypProperties) => StypProperties, // Needed to satisfy signature\n  );\n}\n\nfunction passNonDuplicate(): (update: StypProperties) => StypProperties | NextSkip {\n\n  let stored: StypProperties | undefined;\n\n  return update => {\n    if (stored && propertiesEqual(update, stored)) {\n      return nextSkip();\n    }\n    return stored = { ...update };\n  };\n}\n\nfunction propertiesMap(properties: string | StypProperties): StypProperties {\n  return typeof properties === 'string' ? { $$css: properties } : properties;\n}\n\nfunction propertiesEqual(first: StypProperties, second: StypProperties): boolean {\n\n  const s = itsIterator(propertyEntries(second));\n\n  for (const [key, value] of propertyEntries(first)) {\n\n    const { value: sentry } = s.next();\n\n    if (!sentry || key !== sentry[0] || !stypValuesEqual(value, sentry[1])) {\n      return false;\n    }\n  }\n\n  return !s.next().value;\n}\n\nfunction propertyEntries(properties: StypProperties): Iterable<[keyof StypProperties, StypValue]> {\n  return filterIt(overEntries(properties), isPresent);\n}\n\n/**\n * @internal\n */\nexport function mergeStypProperties(\n    base: AfterEvent<[StypProperties]>,\n    addendum: AfterEvent<[StypProperties]>,\n): AfterEvent<[StypProperties]> {\n  return preventDuplicates(\n      afterAll({ base, addendum }).keepThru(\n          ({ base: [baseProperties], addendum: [addendumProperties] }) => addValues(baseProperties, addendumProperties),\n      ),\n  );\n}\n\nfunction addValues(base: StypProperties, addendum: StypProperties): StypProperties {\n  return itsReduction(\n      overEntries(addendum),\n      (result, [k, v]) => addValue(result, k, v),\n      { ...base },\n  );\n}\n\nfunction addValue(\n    properties: StypProperties.Mutable,\n    key: keyof StypProperties,\n    value: StypValue,\n): StypProperties.Mutable {\n  if (priorityOf(properties[key]) <= priorityOf(value)) {\n    delete properties[key];\n    properties[key] = value;\n  }\n  return properties;\n}\n\nfunction priorityOf(value: StypValue): number {\n  switch (typeof value) {\n    case 'string':\n      return value.endsWith(IMPORTANT_CSS_SUFFIX) ? 1 : 0;\n    case 'object':\n      return value.priority;\n  }\n  return 0;\n}\n","import { flatMapIt } from '@proc7ts/a-iterable';\nimport { compareNames, isQualifiedName, QualifiedName } from '@proc7ts/namespace-aliaser';\nimport { isNotEmptyArray, isReadonlyArray } from '../internal';\nimport { StypPureSelector } from './pure-selector';\nimport { StypRuleKey } from './rule-key';\nimport { StypSelector } from './selector';\nimport { StypSubSelector } from './sub-selector';\n\n/**\n * @internal\n */\nexport function isCombinator(\n    item: string | StypSelector.Part | StypSelector.Combinator,\n): item is StypSelector.Combinator {\n  return item === '>' || item === '+' || item === '~';\n}\n\n/**\n * @internal\n */\nexport function normalizeStypSelector(selector: StypPureSelector.NormalizedPart): [StypPureSelector.NormalizedPart];\n\n/**\n * @internal\n */\nexport function normalizeStypSelector(selector: StypSelector.NormalizedPart): [StypSelector.NormalizedPart];\n\n/**\n * @internal\n */\nexport function normalizeStypSelector(selector: StypPureSelector): StypPureSelector.Normalized;\n\n/**\n * @internal\n */\nexport function normalizeStypSelector(selector: StypSelector): StypSelector.Normalized;\n\nexport function normalizeStypSelector(selector: StypSelector): StypSelector.Normalized {\n  if (!isReadonlyArray(selector)) {\n    return [normalizeKey(selector)];\n  }\n\n  const normalized: StypSelector.Mutable = [];\n  let combinator: StypSelector.Combinator | undefined;\n\n  for (const item of selector) {\n\n    const prevCombinator = combinator;\n\n    if (combinator) {\n      normalized.push(combinator);\n      combinator = undefined;\n    }\n\n    let part: StypSelector.NormalizedPart;\n\n    if (isCombinator(item)) {\n      combinator = item;\n      if (!prevCombinator) {\n        continue;\n      }\n      part = {};\n    } else {\n      part = normalizeKey(item);\n    }\n\n    normalized.push(part);\n  }\n  if (combinator) {\n    normalized.push(combinator, {});\n  }\n\n  return normalized;\n}\n\nfunction normalizeKey(key: StypSelector.Part | string): StypSelector.NormalizedPart {\n  if (typeof key === 'string') {\n    if (!key) {\n      return {};\n    }\n    return { s: key };\n  }\n  return normalizeStypSelectorPart(key);\n}\n\n/**\n * @internal\n */\nexport function normalizeStypSelectorPart(part: StypSelector.Part): StypSelector.NormalizedPart {\n\n  const ns = part.ns || undefined;\n  const i = part.i || undefined;\n  const c = normalizeClasses(part.c);\n  const u = normalizeSubSelectors(part.u);\n\n  return {\n    ns,\n    e: (part.e !== '*' || !ns && !i && !c && u && isPseudoSubSelector(u[0])) && part.e || undefined,\n    i,\n    c,\n    u,\n    s: part.s || undefined,\n    $: normalizeQualifiers(part.$),\n  };\n}\n\nfunction normalizeClasses(\n    classes: QualifiedName | readonly QualifiedName[] | undefined,\n): readonly [QualifiedName, ...QualifiedName[]] | undefined {\n  if (!classes) {\n    return;\n  }\n  if (isQualifiedName(classes)) {\n    return [classes];\n  }\n\n  const result = classes.filter(c => !!c);\n\n  return isNotEmptyArray(result) ? result.sort(compareNames) : undefined;\n}\n\nfunction normalizeSubSelectors(\n    subs: StypSubSelector | readonly StypSubSelector[] | undefined,\n): readonly [StypSubSelector.Normalized, ...StypSubSelector.Normalized[]] | undefined {\n  if (!subs) {\n    return;\n  }\n  if (/*#__INLINE__*/ isSubSelectorsArray(subs)) {\n\n    const result = subs.map(normalizeSubSelector);\n\n    return isNotEmptyArray(result) ? result : undefined;\n  }\n\n  return [normalizeSubSelector(subs)];\n}\n\nfunction isSubSelectorsArray(\n    subs: StypSubSelector | readonly StypSubSelector[],\n): subs is readonly StypSubSelector[] {\n  return typeof subs[0] !== 'string';\n}\n\nfunction normalizeSubSelector(sub: StypSubSelector): StypSubSelector.Normalized {\n  if (!isPseudoSubSelector(sub)) {\n    return sub;\n  }\n  if (sub.length < 3) {\n    return sub as StypSubSelector.Normalized;\n  }\n\n  const [prefix, name, ...params] = sub;\n\n  if (/*#__INLINE__*/ isSubSelectorParametersArray(params)) {\n    return [prefix, name, ...params.map(normalizeStypSelector)];\n  }\n\n  return [prefix, name, normalizeStypSelector(params)];\n}\n\n/**\n * @internal\n */\nexport function isPseudoSubSelector(sub: StypSubSelector.Normalized): sub is StypSubSelector.NormalizedPseudo;\n\n/**\n * @internal\n */\nexport function isPseudoSubSelector(sub: StypSubSelector): sub is StypSubSelector.Pseudo;\n\nexport function isPseudoSubSelector(sub: StypSubSelector): sub is StypSubSelector.Pseudo {\n  return sub.length > 1 && (sub[0] === ':' || sub[0] === '::');\n}\n\nfunction isSubSelectorParametersArray(\n    param: StypSubSelector.Parameter | readonly StypSubSelector.Parameter[],\n): param is readonly StypSubSelector.Parameter[] {\n  return isReadonlyArray(param[0]);\n}\n\nfunction normalizeQualifiers(\n    qualifiers: string | readonly string[] | undefined,\n): readonly [string, ...string[]] | undefined {\n  if (!qualifiers) {\n    return;\n  }\n\n  if (!isReadonlyArray(qualifiers)) {\n    qualifiers = Array.from(exposeQualifier(qualifiers));\n  } else {\n    qualifiers = Array.from(new Set(flatMapIt(qualifiers, exposeQualifier))).sort();\n  }\n\n  return isNotEmptyArray(qualifiers) ? qualifiers : undefined;\n}\n\nconst noQualifiers: Set<string> = new Set();\n\nfunction exposeQualifier(qualifier: string): Set<string> {\n  if (!qualifier) {\n    return noQualifiers;\n  }\n\n  const eqIdx = qualifier.indexOf('=');\n  const name = eqIdx < 0 ? qualifier : qualifier.substring(0, eqIdx);\n  const exposed = new Set<string>();\n  let lastExposed: string | undefined;\n\n  for (const part of name.split(':')) {\n    if (lastExposed) {\n      lastExposed += ':' + part;\n    } else {\n      lastExposed = part;\n    }\n    exposed.add(lastExposed);\n  }\n  if (eqIdx >= 0) {\n    exposed.add(qualifier);\n  }\n\n  return exposed;\n}\n\nconst noKeyAndTail: [[]] = [[]];\n\n/**\n * @internal\n */\nexport function stypRuleKeyAndTail(\n    selector: StypSelector.Normalized,\n): readonly [[]] | readonly [StypRuleKey.Nested, StypSelector.Normalized?] {\n  if (!selector.length) {\n    return noKeyAndTail;\n  }\n\n  let i = 0;\n  let combinator: StypSelector.Combinator | undefined;\n\n  for (;;) {\n\n    const part = selector[i++];\n\n    if (isCombinator(part)) {\n      combinator = part;\n      continue;\n    }\n\n    const key: StypRuleKey = combinator ? [combinator, part] : [part];\n\n    return [key, selector.slice(i)];\n  }\n}\n\nconst rootSelector: StypSelector.Normalized = [];\n\n/**\n * @internal\n */\nexport function stypOuterSelector(\n    selector: StypSelector.Normalized,\n): StypSelector.Normalized | undefined {\n\n  let i = selector.length - 1;\n\n  if (i <= 0) {\n    return i ? undefined : rootSelector;\n  }\n\n  do {\n    --i;\n    switch (selector[i]) {\n      case '>':\n        return selector.slice(0, i);\n      case '+':\n      case '~':\n        --i;\n        continue;\n      default:\n        return selector.slice(0, i + 1);\n    }\n  } while (i > 0);\n\n  return;\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/style-producer\n */\nimport { namesEqual, NamespaceDef, QualifiedName } from '@proc7ts/namespace-aliaser';\nimport { StypPureSelector } from './pure-selector';\nimport { StypSelector } from './selector';\nimport { normalizeStypSelectorPart } from './selector.impl';\n\n/**\n * CSS rule query.\n *\n * It may represent a selector like `element-name#id.class1.classN` with any of sub-parts omitted.\n *\n * Queries are used to grab a subset of matching rules from `StypRule`.\n *\n * All of its properties are optional.\n *\n * @category CSS Rule\n */\nexport interface StypQuery {\n\n  /**\n   * Element namespace.\n   */\n  readonly ns?: string | NamespaceDef;\n\n  /**\n   * Element name.\n   *\n   * This is the same as `*` when absent.\n   */\n  readonly e?: QualifiedName;\n\n  /**\n   * Element identifier.\n   */\n  readonly i?: QualifiedName;\n\n  /**\n   * Element class name or names.\n   */\n  readonly c?: QualifiedName | readonly QualifiedName[];\n\n  /**\n   * Qualifier or qualifiers.\n   */\n  readonly $?: string | readonly string[];\n\n}\n\nexport namespace StypQuery {\n\n  /**\n   * Normalized CSS rule query.\n   */\n  export type Normalized = StypQuery & StypSelector.NormalizedPart;\n\n}\n\n/**\n * Normalizes arbitrary CSS rule query.\n *\n * @category CSS Rule\n * @param query  CSS rule query to normalize.\n *\n * @returns Normalized CSS rule query.\n */\nexport function stypQuery(query: StypQuery): StypQuery.Normalized {\n  return normalizeStypSelectorPart(query);\n}\n\n/**\n * Checks whether the given structured CSS `selector` matches target `query`.\n *\n * @category CSS Rule\n * @param selector  Normalized structured CSS selector.\n * @param query  Normalized CSS rule query.\n *\n * @returns `true` if `selector` matches the `query`, or `false` otherwise.\n */\nexport function stypSelectorMatches(\n    selector: StypSelector.Normalized | StypPureSelector.Normalized,\n    query: StypQuery.Normalized,\n): boolean {\n  if (!selector.length) {\n    return false;\n  }\n\n  const part = selector[selector.length - 1] as StypSelector.NormalizedPart;\n\n  if (query.ns && part.ns !== query.ns) {\n    return false;\n  }\n  if (query.e && part.e !== query.e) {\n    return false;\n  }\n  if (query.i && part.i !== query.i) {\n    return false;\n  }\n  if (query.c && !classesMatch(part.c, query.c)) {\n    return false;\n  }\n  // noinspection RedundantIfStatementJS\n  if (query.$ && !classesMatch(part.$, query.$)) {\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * @internal\n */\nfunction classesMatch(\n    classes: readonly QualifiedName[] | undefined,\n    query: readonly QualifiedName[],\n): boolean | undefined {\n  return classes && query.every(qClass => classes.find(mClass => namesEqual(qClass, mClass)));\n}\n","import { StypSelector } from './index';\nimport { StypPureSelector } from './pure-selector';\nimport { normalizeStypSelector } from './selector.impl';\n\n/**\n * Converts normalized pure CSS selector part to normalized pure CSS selector.\n *\n * @category CSS Rule\n * @param selector  Normalized pure CSS selector part.\n *\n * @returns Normalized pure CSS selector. An array containing `selector` as its only item.\n */\nexport function stypSelector(selector: StypPureSelector.NormalizedPart): [StypPureSelector.NormalizedPart];\n\n/**\n * Converts normalized structured CSS selector part to normalized structured CSS selector.\n *\n * @category CSS Rule\n * @param selector  Normalized CSS selector part.\n *\n * @returns Normalized structured CSS selector. An array containing `selector` as its only item.\n */\nexport function stypSelector(selector: StypSelector.NormalizedPart): [StypSelector.NormalizedPart];\n\n/**\n * Normalizes arbitrary pure CSS selector.\n *\n * @param selector  CSS selector to normalize.\n *\n * @returns Normalized pure CSS selector.\n */\nexport function stypSelector(selector: StypPureSelector): StypPureSelector.Normalized;\n\n/**\n * Normalizes arbitrary structured CSS selector.\n *\n * @param selector  CSS selector to normalize.\n *\n * @returns Normalized structured CSS selector.\n */\nexport function stypSelector(selector: StypSelector): StypSelector.Normalized;\n\nexport function stypSelector(selector: StypSelector): StypSelector.Normalized {\n  return normalizeStypSelector(selector);\n}\n","import {\n  css__naming,\n  html__naming,\n  id__naming,\n  NamespaceAliaser,\n  NamespaceDef,\n  newNamespaceAliaser,\n} from '@proc7ts/namespace-aliaser';\nimport cssesc from 'cssesc';\nimport { cssescId } from '../internal';\nimport { StypRuleKey } from './rule-key';\nimport { StypSelector } from './selector';\nimport { StypSelectorFormat } from './selector-text';\nimport { isCombinator, isPseudoSubSelector } from './selector.impl';\nimport { StypSubSelector } from './sub-selector';\n\nconst ruleKeyTextOpts: StypSelectorFormat = {\n  qualify(qualifier: string) {\n    return `@${cssescId(qualifier)}`;\n  },\n};\n\n/**\n * @internal\n */\nexport function stypRuleKeyText(key: StypRuleKey): string {\n  return formatStypSelector(key, ruleKeyTextOpts);\n}\n\nconst displayTextOpts: StypSelectorFormat = {\n  qualify(qualifier: string) {\n    return `@${qualifier}`;\n  },\n};\n\n/**\n * @internal\n */\nexport function stypSelectorDisplayText(selector: StypSelector.Normalized): string {\n  return formatStypSelector(selector, displayTextOpts);\n}\n\nconst defaultFormat: StypSelectorFormat = {};\n\n/**\n * @internal\n */\nexport function formatStypSelector(\n    selector: StypSelector.Normalized,\n    {\n      qualify,\n      nsAlias = newNamespaceAliaser(),\n    }: StypSelectorFormat = defaultFormat,\n): string {\n\n  const format: ItemFormat = { qualify, nsAlias };\n\n  return selector.reduce(\n      (result, item) => {\n        if (isCombinator(item)) {\n          return result + item;\n        }\n        if (result && !isCombinator(result[result.length - 1])) {\n          result += ' ';\n        }\n        return result + formatItem(item, format);\n      },\n      '',\n  );\n}\n\ninterface ItemFormat extends StypSelectorFormat {\n  nsAlias: NamespaceAliaser;\n}\n\nfunction formatItem(\n    item: StypSelector.NormalizedPart,\n    {\n      qualify,\n      nsAlias,\n    }: ItemFormat,\n): string {\n\n  const { ns, e, i, c, s, u, $ } = item;\n  let hasProperties = false;\n  let out = '';\n\n  if (i) {\n    hasProperties = true;\n    out += `#${cssescId(id__naming.name(i, nsAlias))}`;\n  }\n  if (c) {\n    hasProperties = true;\n    out = c.reduce<string>(\n        (result, className) => `${result}.${cssescId(css__naming.name(className, nsAlias))}`,\n        out,\n    );\n  }\n  if (u) {\n    hasProperties = true;\n\n    const subFormat: ItemFormat = { nsAlias };\n\n    out = u.reduce(\n        (result, sub) => formatSubSelector(result, sub, subFormat),\n        out,\n    );\n  }\n  if (s) {\n    hasProperties = true;\n    out += s;\n  }\n  if (qualify && $) {\n    out = $.reduce((result, qualifier) => result + qualify(qualifier), out);\n  }\n  if (ns) {\n\n    const alias = xmlNs(ns, nsAlias);\n\n    if (alias) {\n      out = `${alias}|${e || '*'}${out}`;\n    } else {\n      out = qualifyElement();\n    }\n  } else {\n    out = qualifyElement();\n  }\n\n  return out;\n\n  function qualifyElement(): string {\n    if (hasProperties) {\n      return `${e ? html__naming.name(e, nsAlias) : ''}${out}`;\n    }\n    return `${e ? html__naming.name(e, nsAlias) : '*'}${out}`;\n  }\n}\n\nfunction formatSubSelector(\n    out: string,\n    sub: StypSubSelector.Normalized,\n    format: ItemFormat,\n): string {\n  if (isPseudoSubSelector(sub)) {\n    out += sub[0] + sub[1];\n\n    const len = sub.length;\n\n    if (len > 2) {\n      out += '(' + formatStypSelector(sub[2], format);\n      for (let i = 3; i < sub.length; ++i) {\n        out += ',' + formatStypSelector(sub[i] as StypSubSelector.NormalizedParameter, format);\n      }\n      out += ')';\n    }\n\n    return out;\n  }\n\n  const [attrName, attrOp, attrVal, attrFlag] = sub;\n\n  out += '[' + cssescId(attrName);\n  if (attrOp) {\n    out += attrOp + cssesc(attrVal!, { quotes: 'double', wrap: true });\n  }\n  if (attrFlag) {\n    out += ' ' + attrFlag;\n  }\n\n  return out + ']';\n}\n\nfunction xmlNs(ns: string | NamespaceDef, nsAlias: NamespaceAliaser): string | undefined {\n  return typeof ns === 'string' ? ns : ns.url ? nsAlias(ns) : undefined;\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/style-producer\n */\nimport { filterIt, itsReduction, ObjectEntry, overEntries } from '@proc7ts/a-iterable';\nimport { AfterEvent } from '@proc7ts/fun-events';\nimport { isNotEmptyArray } from '../../internal';\nimport { StypProperties, StypRule } from '../../rule';\nimport { mergeStypProperties } from '../../rule/properties.impl';\nimport { StypSelector, stypSelector } from '../../selector';\nimport { isCombinator } from '../../selector/selector.impl';\nimport { stypSplitPriority, StypValue } from '../../value';\nimport { StypRenderer } from '../renderer';\nimport { StyleProducer } from '../style-producer';\nimport { FIRST_RENDER_ORDER } from './renderer.impl';\n\n/**\n * @internal\n */\nclass AtRulesRenderer implements StypRenderer.Spec {\n\n  constructor(private readonly _rule: StypRule) {\n  }\n\n  read(properties: AfterEvent<[StypProperties]>): AfterEvent<[StypProperties]> {\n\n    let outer = this._rule.outer;\n\n    while (outer) {\n      properties = mergeStypProperties(outer.read().keepThru(onlyAtProperties), properties);\n      outer = outer.outer;\n    }\n\n    return properties;\n  }\n\n  render(producer: StyleProducer, properties: StypProperties): void {\n\n    const { selector } = producer;\n    let { writer } = producer;\n\n    if (!writer.isGroup) {\n      producer.render(properties);\n      return;\n    }\n\n    let sheet = writer;\n    const extracted = extractAtSelectors(selector);\n\n    if (!extracted) {\n      producer.render(properties);\n      return;\n    }\n\n    const [atSelectors, restSelector] = extracted;\n\n    for (const atSelector of atSelectors) {\n\n      const [name, params] = buildAtSelector(properties, atSelector);\n\n      if (params) {\n        writer = sheet = sheet.addGroup(name, params);\n      } else {\n        writer = sheet.addStyle(name);\n        break;\n      }\n    }\n\n    producer.render(properties, { writer, selector: restSelector });\n  }\n\n}\n\n/**\n * @internal\n */\nfunction buildAtSelector(\n    properties: StypProperties,\n    [key, [names, customQuery]]: [string, [Set<string>, string?]],\n): [string, string?] {\n\n  let query = '';\n  const addQuery = (q?: StypValue): void => {\n    if (q) {\n      if (query) {\n        query += ' and ';\n      }\n      query += q;\n    }\n  };\n\n  for (const name of names) {\n\n    const [namedQuery] = stypSplitPriority(properties[name]);\n\n    addQuery(namedQuery);\n  }\n\n  addQuery(customQuery);\n\n  return query ? [key, query] : [key];\n}\n\n/**\n * CSS stylesheet renderer of at-rules like `@media` queries.\n *\n * At-rules are represented by qualifiers which names start with `@` symbol. Qualifier names are used as at-rules keys,\n * and their values - as queries. If the rest of the selector is not empty, then properties are rendered in CSS\n * rule nested inside at-rule. Otherwise the properties are rendered in at-rule.\n *\n * So, for example CSS rule with `{ c: 'screen-only', $: '@media=screen' }` selector would be rendered as\n * ```css\n * @media screen {\n *   .screen-only {\n *      \\/* CSS properties *\\/\n *   }\n * }\n * ```\n *\n * Another option is to use named at-rules qualifiers. When named qualifier is used, the corresponding property is\n * searched in CSS rule and all of its outer rules. The values of all matching properties are used as queries.\n *\n * So the above example could be written as: `{ c: 'screen-only', $: '@media:screen' }` if CSS rule (or its outer\n * one) contains property `@media:screen` with value `screen`.\n *\n * Enabled by default in [[produceStyle]] function.\n *\n * @category Rendering\n */\nexport const stypRenderAtRules: StypRenderer = {\n\n  order: FIRST_RENDER_ORDER,\n\n  create(rule) {\n    return new AtRulesRenderer(rule);\n  },\n\n};\n\n/**\n * @internal\n */\nfunction onlyAtProperties(properties: StypProperties): StypProperties {\n  return itsReduction(\n      filterIt<ObjectEntry<StypProperties>, ObjectEntry<StypProperties, string>>(\n          overEntries(properties),\n          isAtEntry,\n      ),\n      (result: StypProperties.Mutable, [key, value]: ObjectEntry<StypProperties, string>) => {\n        result[key] = value;\n        return result;\n      },\n      {},\n  );\n}\n\n/**\n * @internal\n */\nfunction isAtEntry(entry: ObjectEntry<StypProperties>): entry is ObjectEntry<StypProperties, string> {\n  return String(entry[0])[0] === '@';\n}\n\n/**\n * @internal\n */\nfunction extractAtSelectors(\n    selector: StypSelector.Normalized,\n): [Map<string, [Set<string>, string?]>, StypSelector.Normalized] | undefined {\n\n  const atSelectors = new Map<string, [Set<string>, string?]>();\n  const rest: StypSelector.Mutable = [];\n\n  for (const part of selector) {\n    if (isCombinator(part)) {\n      rest.push(part);\n    } else {\n      rest.push(extractPartAtSelectors(part, atSelectors));\n    }\n  }\n\n  if (!atSelectors.size) {\n    return; // No at-rule qualifiers found.\n  }\n\n  return [atSelectors, stypSelector(rest)];\n}\n\n/**\n * @internal\n */\nfunction extractPartAtSelectors(\n    part: StypSelector.NormalizedPart,\n    atSelectors: Map<string, [Set<string>, string?]>,\n): StypSelector.NormalizedPart {\n\n  const qualifiers = part.$;\n\n  if (!qualifiers) {\n    return part;\n  }\n\n  const restQualifies: string[] = [];\n\n  for (const qualifier of qualifiers) {\n    if (qualifier[0] === '@') {\n      addAtSelector(atSelectors, qualifier);\n    } else {\n      restQualifies.push(qualifier);\n    }\n  }\n\n  if (restQualifies.length === qualifiers.length) {\n    return part; // No at-rule qualifiers found\n  }\n  if (isNotEmptyArray(restQualifies)) {\n    return { ...part, $: restQualifies };\n  }\n\n  return { ...part, $: undefined };\n}\n\n/**\n * @internal\n */\nfunction addAtSelector(atSelectors: Map<string, [Set<string>, string?]>, qualifier: string): void {\n\n  const eqIdx = qualifier.indexOf('=');\n  let name: string;\n  let query: string | undefined;\n\n  if (eqIdx < 0) {\n    name = qualifier;\n  } else {\n    name = qualifier.substring(0, eqIdx);\n    query = qualifier.substring(eqIdx + 1);\n  }\n\n  const colonIdx = name.indexOf(':');\n  const key = colonIdx < 0 ? name : name.substring(0, colonIdx);\n  const atSelector = atSelectors.get(key);\n\n  if (!atSelector) {\n    atSelectors.set(key, [new Set<string>().add(name), query]);\n  } else {\n\n    const [names, prevQuery] = atSelector;\n\n    names.add(name);\n    if (query) {\n      atSelector[1] = prevQuery ? `${prevQuery} and ${query}` : query;\n    }\n  }\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/style-producer\n */\nimport { overEntries } from '@proc7ts/a-iterable';\nimport { StypProperties } from '../../rule';\nimport { stypSplitPriority, StypURL, StypValue } from '../../value';\nimport { StypRenderer } from '../renderer';\nimport { StyleProducer } from '../style-producer';\nimport { StypWriter } from '../writer';\nimport { stypRenderAtRules } from './at-rules.renderer';\nimport { FIRST_RENDER_ORDER } from './renderer.impl';\n\n/**\n * CSS stylesheet renderer of global at-rules.\n *\n * It renders at-rules that should stay at the top level:\n * - `@namespace`\n * - `@import`\n *\n * At-rule parameters are taken from root CSS rule properties and treated as following.\n *\n * **`@import:url`** property value is treated as media query and appended after stylesheet URL. I.e.\n * ```json\n * {\n *     \"@import:path/to/included.css\": \"screen\"\n * }\n * ```\n * becomes\n * ```css\n * @import url(path/to/included.css) screen;\n * ```\n *\n * **`@namespace`** property value is treated as default namespace URL. I.e.\n * ```json\n * {\n *     \"@namespace\": \"http://www.w3.org/1999/xhtml\"\n * }\n * ```\n * becomes\n * ```css\n * @namespace url(http://www.w3.org/1999/xhtml);\n * ```\n *\n * **`@namespace:prefix`** property value is treated as namespace URL with the given prefix. I.e\n * ```json\n * {\n *     \"@namespace:svg\": \"http://www.w3.org/2000/svg\"\n * }\n * ```\n * becomes\n * ```css\n * @namespace svg url(http://www.w3.org/2000/svg);\n * ```\n *\n * Enabled by default in [[produceStyle]] function.\n *\n * @category Rendering\n */\nexport const stypRenderGlobals: StypRenderer = {\n\n  order: FIRST_RENDER_ORDER + 1,\n\n  needs: stypRenderAtRules,\n\n  render(producer: StyleProducer, properties: StypProperties) {\n\n    const rootRule = !producer.rule.selector.length;\n\n    const { sheet } = producer;\n    let importIndex = 0;\n    let nsIndex = 0;\n\n    for (const [k, v] of overEntries(properties)) {\n\n      const key = String(k);\n\n      if (key[0] === '@') {\n\n        const [value] = stypSplitPriority(v);\n        const importDelta = rootRule ? renderImport(sheet, importIndex, key, value) : 0;\n\n        importIndex += importDelta;\n        nsIndex += importDelta;\n\n        const url = StypURL.by(value);\n\n        if (url) {\n          nsIndex += renderDefaultNamespace(sheet, nsIndex, key, url);\n          nsIndex += renderNamespacePrefix(sheet, nsIndex, key, url);\n        }\n      }\n    }\n\n    producer.render(properties);\n  },\n\n};\n\n/**\n * @internal\n */\nconst IMPORT_PREFIX = '@import:';\n\n/**\n * @internal\n */\nfunction renderImport(\n    sheet: StypWriter.Sheet,\n    index: number,\n    key: string,\n    value: StypValue,\n): number {\n  if (!key.startsWith(IMPORT_PREFIX)) {\n    return 0;\n  }\n\n  const url = new StypURL(key.substring(IMPORT_PREFIX.length));\n  let css = String(url);\n\n  if (value) {\n    css += ' ' + value;\n  }\n\n  sheet.addGlobal('@import', css, index);\n\n  return 1;\n}\n\n/**\n * @internal\n */\nfunction renderDefaultNamespace(\n    sheet: StypWriter.Sheet,\n    index: number,\n    key: string,\n    url: StypURL,\n): number {\n  if (key !== '@namespace') {\n    return 0;\n  }\n\n  sheet.addGlobal('@namespace', String(url), index);\n\n  return 1;\n}\n\n/**\n * @internal\n */\nconst NS_PREFIX = '@namespace:';\n\n/**\n * @internal\n */\nfunction renderNamespacePrefix(\n    sheet: StypWriter.Sheet,\n    index: number,\n    key: string,\n    url: StypURL,\n): number {\n  if (!key.startsWith(NS_PREFIX)) {\n    return 0;\n  }\n\n  const prefix = key.substring(NS_PREFIX.length);\n\n  sheet.addGlobal('@namespace', `${prefix} ${url}`, index);\n\n  return 1;\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/style-producer\n */\nimport { filterIt, itsEach, ObjectEntry, overEntries } from '@proc7ts/a-iterable';\nimport hyphenateStyleName from 'hyphenate-style-name';\nimport { StypProperties } from '../../rule';\nimport { stypSplitPriority } from '../../value';\nimport { StyleProducer } from '../style-producer';\n\n/**\n * Renders CSS properties.\n *\n * This renderer is always present, so there is typically no need to use it explicitly.\n *\n * @category Rendering\n */\nexport function stypRenderProperties(producer: StyleProducer, properties: StypProperties): void {\n\n  const style = producer.addStyle();\n\n  itsEach(\n      filterIt<ObjectEntry<StypProperties>, ObjectEntry<StypProperties, string>>(\n          overEntries(properties),\n          notCustomProperty,\n      ),\n      ([k, v]) => {\n\n        const [value, priority] = stypSplitPriority(v);\n\n        style.set(hyphenateStyleName(k), `${value}`, priority);\n      },\n  );\n\n  producer.render(properties, { writer: style });\n}\n\n/**\n * @internal\n */\nfunction notCustomProperty(\n    entry: ObjectEntry<StypProperties>,\n): entry is ObjectEntry<Required<StypProperties>, string> {\n\n  const [key, value] = entry;\n\n  if (value == null) {\n    return false;\n  }\n\n  const first = String(key)[0];\n\n  return first >= 'a' && first <= 'z' || first >= 'A' && first <= 'Z';\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/style-producer\n */\nimport { StypProperties } from '../../rule';\nimport { StyleProducer } from '../style-producer';\n\n/**\n * Renders raw CSS text. I.e. the contents of [[StypProperties.Generic.$$css]] property.\n *\n * It should be rendered before CSS properties normally to add the rendered rule as a first one.\n *\n * Enabled by default in [[produceStyle]] function.\n *\n * @category Rendering\n */\nexport function stypRenderText(producer: StyleProducer, properties: StypProperties): void {\n\n  const css = properties.$$css;\n\n  if (!css) {\n    producer.render(properties);\n  } else {\n\n    const style = producer.addStyle();\n\n    style.replace(css);\n    producer.render(properties, { writer: style });\n  }\n}\n","import { newRenderSchedule, RenderScheduler } from '@proc7ts/render-scheduler';\nimport { isReadonlyArray } from '../../internal';\nimport { StypRule } from '../../rule';\nimport { StypFormat } from '../format';\nimport { StypRenderer } from '../renderer';\nimport { stypRenderProperties } from '../renderers';\n\n/**\n * @internal\n */\nexport interface StypRendererSpecFactory extends StypRenderer.Factory {\n  create(rule: StypRule): StypRenderer.Spec;\n}\n\n/**\n * @internal\n */\nexport function stypRenderFactories(format: StypFormat): readonly StypRendererSpecFactory[] {\n\n  const factories = new Map<StypRenderer, StypRendererSpecFactory>();\n\n  addRenderers(format.renderer);\n  factories.delete(stypRenderProperties);\n\n  return [...factories.values(), rendererFactory(stypRenderProperties)].sort(compareRenderers);\n\n  function addRenderers(renderers: StypRenderer | readonly StypRenderer[] | undefined): void {\n    if (renderers) {\n      if (isReadonlyArray(renderers)) {\n        renderers.forEach(addRenderer);\n      } else {\n        addRenderer(renderers);\n      }\n    }\n  }\n\n  function addRenderer(renderer: StypRenderer): void {\n    if (factories.has(renderer)) {\n      return;\n    }\n\n    const factory = rendererFactory(renderer);\n\n    factories.set(renderer, factory);\n    addRenderers(factory.needs);\n  }\n}\n\nfunction rendererFactory(renderer: StypRenderer): StypRendererSpecFactory {\n  if (typeof renderer === 'function') {\n    return {\n      create() {\n        return { render: renderer };\n      },\n    };\n  }\n  if (isRendererFactory(renderer)) {\n    return {\n      order: renderer.order,\n      needs: renderer.needs,\n      create(rule) {\n        return rendererSpec(renderer.create(rule));\n      },\n    };\n  }\n\n  const render = renderer.render.bind(renderer);\n\n  return {\n    order: renderer.order,\n    needs: renderer.needs,\n    create() {\n      return { render };\n    },\n  };\n}\n\nfunction isRendererFactory(renderer: StypRenderer): renderer is StypRenderer.Factory {\n  return 'create' in renderer;\n}\n\nfunction compareRenderers(first: StypRenderer.Factory, second: StypRenderer.Factory): number {\n\n  const firstOrder = first.order || 0;\n  const secondOrder = second.order || 0;\n\n  return firstOrder > secondOrder ? 1 : firstOrder < secondOrder ? -1 : 0;\n}\n\nfunction rendererSpec(renderer: ReturnType<StypRenderer.Factory['create']>): StypRenderer.Spec {\n  return typeof renderer === 'function' ? { render: renderer } : renderer;\n}\n\n/**\n * @internal\n */\nexport function stypRenderScheduler(\n    parent: Node,\n    scheduler: RenderScheduler = newRenderSchedule,\n): RenderScheduler {\n  return (options = {}) => {\n\n    const { node = parent, error } = options;\n\n    return scheduler({\n      ...options,\n      node,\n      error: error && error.bind(options),\n    });\n  };\n}\n\n/**\n * @internal\n */\nexport function removeStyleElement(element: HTMLStyleElement): void {\n  element.parentNode?.removeChild(element);\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/style-producer\n */\nimport { EventEmitter, EventReceiver, EventSupply, OnEvent } from '@proc7ts/fun-events';\nimport { immediateRenderScheduler, RenderScheduler } from '@proc7ts/render-scheduler';\nimport { StypPriority } from '../../value';\nimport { StypFormat, StypFormatConfig } from '../format';\nimport { StypWriter } from '../writer';\n\n/**\n * Textual CSS production format.\n *\n * Represents each style sheet in textual form and reports it to registered receivers. Such receivers should be\n * registered before {@link produceStyle style production} started in order to receive all style sheets.\n *\n * @category Rendering\n */\nexport interface StypTextFormat extends StypFormat, StypTextFormatConfig {\n\n  /**\n   * Detailed configuration of CSS text pretty print, or `false` for compact output.\n   */\n  readonly pretty: StypTextFormatConfig.PrettyPrint | false;\n\n  /**\n   * Builds an `OnEvent` sender of style sheet textual representation.\n   *\n   * Sends textual representation of each rendered style sheet on each update.\n   *\n   * @returns `OnEvent` sender of {@link StypSheetText} objects.\n   */\n  onSheet(): OnEvent<[StypSheetText]>;\n\n  /**\n   * Starts sending textual representations of style sheets to the given `receiver`.\n   *\n   * @param receiver  Target receiver of style sheet text.\n   */\n  onSheet(receiver: EventReceiver<[StypSheetText]>): EventSupply;\n\n}\n\n/**\n * Configuration of {@link stypTextFormat textual CSS production format}.\n *\n * @category Rendering\n */\nexport interface StypTextFormatConfig extends StypFormatConfig {\n\n  /**\n   * DOM rendering operations scheduler.\n   *\n   * Creates a render schedule per rule.\n   *\n   * Uses `immediateRenderScheduler` by default.\n   */\n  readonly scheduler?: RenderScheduler;\n\n  /**\n   * How to pretty-print generated CSS text.\n   *\n   * - `false` to disable pretty print and generate compact output,\n   * - `true` (default value) for default pretty print,\n   * - {@link StypTextFormatConfig.PrettyPrint detailed configuration object}.\n   */\n  readonly pretty?: boolean | StypTextFormatConfig.PrettyPrint;\n\n}\n\nexport namespace StypTextFormatConfig {\n\n  /**\n   * Detailed configuration of CSS text pretty print.\n   */\n  export interface PrettyPrint {\n\n    /**\n     * Indentation string to use when formatting CSS text.\n     *\n     * Two spaces by default.\n     */\n    indent?: string;\n\n  }\n\n}\n\n/**\n * Style sheet textual representation.\n *\n * This is sent when producing styles in {@link StypTextFormat.onSheet textual format}.\n *\n * @category Rendering\n */\nexport interface StypSheetText {\n\n  /**\n   * Unique style sheet identifier.\n   *\n   * Style sheet is reported with the same identifier on each update.\n   */\n  readonly id: string;\n\n  /**\n   * The textual representation of style sheet formatted accordingly to {@link StypTextFormatConfig options},\n   * or `undefined` to inform that corresponding style sheet have been removed.\n   */\n  readonly css?: string;\n\n}\n\n/**\n * @internal\n */\ninterface StypTextFormatter {\n  readonly pre: string;\n  readonly nv: string;\n  readonly eol: string;\n  indent(): StypTextFormatter;\n}\n\n/**\n * @internal\n */\nconst defaultPrettyPrint: StypTextFormatConfig.PrettyPrint = {\n  indent: '  ',\n};\n\n/**\n * @internal\n */\nconst compactStypTextFormatter: StypTextFormatter = {\n  nv: '',\n  eol: '',\n  pre: '',\n  indent() {\n    return this;\n  },\n};\n\n/**\n * @internal\n */\nclass StypTextFormatter$ implements StypTextFormatter {\n\n  constructor(\n      private readonly _config: StypTextFormatConfig.PrettyPrint,\n      readonly pre = '',\n  ) {\n  }\n\n  get nv(): string {\n    return ' ';\n  }\n\n  get eol(): string {\n    return '\\n';\n  }\n\n  indent(): StypTextFormatter$ {\n    return new StypTextFormatter$(this._config, this.pre + this._config.indent);\n  }\n\n}\n\n/**\n * @internal\n */\nclass StypStyleTextWriter implements StypWriter.Style {\n\n  private readonly nf: StypTextFormatter;\n  private body = '';\n\n  constructor(\n      private readonly f: StypTextFormatter,\n      readonly selector: string,\n  ) {\n    this.nf = f.indent();\n  }\n\n  get isGroup(): false {\n    return false;\n  }\n\n  set(name: string, value: string, priority: number): void {\n\n    const p = priority >= StypPriority.Important ? ' !important' : '';\n    const { pre, nv, eol } = this.nf;\n\n    if (this.body) {\n      this.body += `;${eol}`;\n    }\n\n    this.body += `${pre}${name}:${nv}${value}${p}`;\n  }\n\n  replace(css: string): void {\n    this.body = css.trim();\n    if (this.body.endsWith(';')) {\n      this.body = this.body.substr(0, this.body.length - 1);\n    }\n  }\n\n  toString(): string {\n\n    const { pre, nv, eol } = this.f;\n\n    if (this.body) {\n\n      const afterBody = eol ? `;${eol}` : '';\n\n      return `${pre}${this.selector}${nv}{${eol}${this.body}${afterBody}${pre}}`;\n    }\n\n    return '';\n  }\n\n}\n\n/**\n * @internal\n */\nabstract class AbstractStypGroupTextWriter implements StypWriter.Group {\n\n  readonly _nested: any[] = [];\n\n  protected constructor(readonly nf: StypTextFormatter) {\n  }\n\n  get isGroup(): true {\n    return true;\n  }\n\n  addGroup(name: string, params: string, index?: number): StypWriter.Group {\n    return this._add(new StypGroupTextWriter(this.nf, name, params), index);\n  }\n\n  addStyle(selector: string, index?: number): StypWriter.Style {\n    return this._add(new StypStyleTextWriter(this.nf, selector), index);\n  }\n\n  toString(): string {\n\n    let out = '';\n\n    for (const nested of this._nested) {\n\n      const text = String(nested);\n\n      if (text) {\n        if (out) {\n          out += this.nf.eol;\n        }\n        out += text;\n      }\n    }\n\n    return out;\n  }\n\n  protected _add<N>(nested: N, index = this._nested.length): N {\n    this._nested.splice(index, 0, nested);\n    return nested;\n  }\n\n}\n\n/**\n * @internal\n */\nclass StypGroupTextWriter extends AbstractStypGroupTextWriter implements StypWriter.Group {\n\n  constructor(readonly f: StypTextFormatter, readonly name: string, readonly params: string) {\n    super(f.indent());\n  }\n\n  toString(): string {\n\n    const body = super.toString();\n\n    if (!body) {\n      return '';\n    }\n\n    const { pre, nv, eol } = this.f;\n\n    return `${pre}${this.name} ${this.params}${nv}{${eol}${body}${eol}${pre}}`;\n  }\n\n}\n\n/**\n * @internal\n */\nclass StypSheetTextWriter extends AbstractStypGroupTextWriter implements StypWriter.Sheet {\n\n  constructor(\n      readonly id: string,\n      readonly f: StypTextFormatter,\n      readonly sender: EventEmitter<[StypSheetText]>,\n  ) {\n    super(f);\n  }\n\n  addGlobal(name: string, value: string, index?: number): void {\n    this._add(`${this.f.pre}${name} ${value};`, index);\n  }\n\n  clear(): void {\n    this._nested.length = 0;\n  }\n\n  remove(): void {\n    this.clear();\n    this.sender.send({ id: this.id });\n  }\n\n  done(): void {\n    this.sender.send({\n      id: this.id,\n      css: this.toString(),\n    });\n  }\n\n}\n\n/**\n * Builds textual CSS production format.\n *\n * It is necessary to register {@link StypTextFormat.onSheet CSS text receiver(s)} prior to start {@link produceStyle\n * style production} in order to receive CSS text for style sheets.\n *\n * @category Rendering\n * @param config  Textual format config.\n *\n * @returns Textual CSS production format.\n */\nexport function stypTextFormat(config: StypTextFormatConfig = {}): StypTextFormat {\n\n  const pretty: StypTextFormatConfig.PrettyPrint | false = config.pretty === true || config.pretty == null\n      ? defaultPrettyPrint\n      : (config.pretty || false);\n  const { scheduler = immediateRenderScheduler } = config;\n  const sender = new EventEmitter<[StypSheetText]>();\n  let onSheet = ((receiver?: EventReceiver<[StypSheetText]>): OnEvent<[StypSheetText]> | EventSupply => (\n      onSheet = sender.on().F\n  )(receiver)) as StypTextFormat['onSheet'];\n  const formatter: StypTextFormatter = pretty ? new StypTextFormatter$(pretty) : compactStypTextFormatter;\n  let idSeq = 0;\n\n  return {\n    ...config,\n    pretty,\n    scheduler,\n    onSheet,\n    addSheet() {\n      return new StypSheetTextWriter(String(++idSeq), formatter, sender);\n    },\n  };\n}\n","import { RenderScheduler } from '@proc7ts/render-scheduler';\nimport { StypFormat } from '../format';\nimport { removeStyleElement, stypRenderScheduler } from './format.impl';\n/**\n * @packageDocumentation\n * @module @proc7ts/style-producer\n */\nimport { stypTextFormat, StypTextFormatConfig } from './text.format';\n\n/**\n * Configuration of {@link stypDomFormat DOM style production format}.\n *\n * @category Rendering\n */\nexport interface StypDomFormatConfig extends StypTextFormatConfig {\n\n  /**\n   * Document to add style elements to.\n   *\n   * `parent.ownerDocument` or `window.document` by default.\n   */\n  readonly document?: Document;\n\n  /**\n   * Parent DOM node to add stylesheets to.\n   *\n   * `document.head` by default.\n   *\n   * This node don't have to be attached to document.\n   */\n  readonly parent?: Node;\n\n  /**\n   * DOM rendering operations scheduler.\n   *\n   * Creates a render schedule per rule.\n   *\n   * Uses `newRenderSchedule` for [[parent]] node by default.\n   */\n  readonly scheduler?: RenderScheduler;\n\n}\n\n/**\n * Builds DOM style production format.\n *\n * The sheet writer creates a `<style>` element inside the `parent` node per CSS rule and fills it with CSS text\n * generated by {@link stypTextFormat textual CSS production format}.\n *\n * This format is generally slower than {@link stypObjectFormat CSS object model production format}, but allows to add\n * `<style>` elements to DOM node outside document. E.g. to `DocumentFragment`.\n *\n * @category Rendering\n * @param config  DOM style format configuration.\n *\n * @returns CSS production format.\n */\nexport function stypDomFormat(\n    config: StypDomFormatConfig = {},\n): StypFormat {\n\n  const {\n    document = config.parent?.ownerDocument || window.document,\n    parent = document.head,\n  } = config;\n  const textFormat = stypTextFormat(config);\n  const scheduler = stypRenderScheduler(parent, config.scheduler);\n  const schedule = scheduler();\n  const elements = new Map<string, HTMLStyleElement>();\n  const supply = textFormat.onSheet(({ id, css }) => {\n    // CSS text is reported within schedule. No need to re-schedule DOM manipulations here.\n\n    let element = elements.get(id);\n\n    if (css == null) { // element exists here\n      elements.delete(id);\n      removeStyleElement(element!);\n    } else if (element) {\n      element.textContent = css;\n    } else {\n      element = document.createElement('style');\n      element.setAttribute('type', 'text/css');\n      element.textContent = css;\n      parent.appendChild(element);\n      elements.set(id, element);\n      supply.whenOff(\n          // Schedule element removal on style sheet removal instead of removing it right away.\n          () => schedule(() => removeStyleElement(element!)),\n      );\n    }\n  });\n\n  return {\n    ...config,\n    scheduler,\n    addSheet(producer) {\n      supply.needs(producer);\n      this.addSheet = textFormat.addSheet.bind(textFormat);\n      return this.addSheet(producer);\n    },\n  };\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/style-producer\n */\nimport { itsReduction, mapIt } from '@proc7ts/a-iterable';\nimport { noop } from '@proc7ts/call-thru';\nimport {\n  AfterEvent,\n  afterSupplied,\n  eventSupply,\n  EventSupply,\n  EventSupply__symbol,\n  onSupplied,\n} from '@proc7ts/fun-events';\nimport { NamespaceDef, newNamespaceAliaser } from '@proc7ts/namespace-aliaser';\nimport { newRenderSchedule } from '@proc7ts/render-scheduler';\nimport { StypProperties, StypRule, StypRules } from '../rule';\nimport { StypSelector, stypSelector, StypSelectorFormat, stypSelectorText } from '../selector';\nimport { isCombinator } from '../selector/selector.impl';\nimport { StypFormat } from './format';\nimport { stypRenderFactories } from './formats/format.impl';\nimport { StypRenderer } from './renderer';\nimport { StyleProducer } from './style-producer';\nimport { StypWriter } from './writer';\n\n/**\n * Produces and dynamically updates basic CSS stylesheets based on the given CSS rules.\n *\n * Unlike [[produceStyle]], this function does not enable renderers but the basic one which just renders CSS properties.\n * Only select renderers can be enabled. This can be used to save a bundle size.\n *\n * @category Rendering\n * @param rules  CSS rules to produce stylesheets for. This can be e.g. a [[StypRule.rules]] to render all rules,\n * or a result of [[StypRuleList.grab]] method call to render only matching ones.\n * @param format  Production options.\n *\n * @returns Styles supply. Once cut off (i.e. its `off()` method is called) the produced stylesheets are removed.\n */\nexport function produceBasicStyle(rules: StypRules, format: StypFormat): EventSupply {\n\n  const {\n    rootSelector = { e: 'body' },\n    scheduler = newRenderSchedule,\n    nsAlias = newNamespaceAliaser(),\n  } = format;\n  const supply = eventSupply();\n  const selectorFormat: StypSelectorFormat = { nsAlias };\n  const factories = stypRenderFactories(format);\n  const renderSupply = renderRules(rules);\n  const trackSupply = trackRules();\n\n  return supply.needs(renderSupply)\n      .needs(trackSupply)\n      .cuts(renderSupply)\n      .cuts(trackSupply);\n\n  function styleProducer(\n      rule: StypRule,\n      renderer: StypRenderer.Function,\n      production: {\n        sheet: StypWriter.Sheet;\n        writer: StypWriter;\n        selector: StypSelector.Normalized;\n      },\n  ): StyleProducer {\n\n    class StyleProducer$ implements StyleProducer {\n\n      get [EventSupply__symbol](): EventSupply {\n        return supply;\n      }\n\n      get rule(): StypRule {\n        return rule;\n      }\n\n      get sheet(): StypWriter.Sheet {\n        return production.sheet;\n      }\n\n      get writer(): StypWriter {\n        return production.writer;\n      }\n\n      get selector(): StypSelector.Normalized {\n        return production.selector;\n      }\n\n      nsAlias(ns: NamespaceDef): string {\n        return nsAlias(ns);\n      }\n\n      render(properties: StypProperties, options?: StypRenderer.Options): void {\n        if (!options) {\n          renderer(this, properties);\n        } else {\n          renderer(\n              styleProducer(\n                  rule,\n                  renderer,\n                  {\n                    sheet: production.sheet,\n                    writer: options.writer || production.writer,\n                    selector: options.selector || production.selector,\n                  },\n              ),\n              properties,\n          );\n        }\n      }\n\n      addStyle(_selector: StypSelector.Normalized = production.selector): StypWriter.Style {\n\n        const { writer } = production;\n\n        if (!writer.isGroup) {\n          return writer;\n        }\n\n        return writer.addStyle(selectorText(_selector));\n      }\n\n    }\n\n    return new StyleProducer$();\n  }\n\n  function selectorText(selector: StypSelector.Normalized): string {\n    return stypSelectorText(selector, selectorFormat);\n  }\n\n  function renderRules(rulesToRender: Iterable<StypRule>): EventSupply {\n    return itsReduction<EventSupply, EventSupply>(\n        mapIt(rulesToRender, renderRule),\n        (prev, supply) => eventSupply().cuts(supply).cuts(prev),\n        eventSupply(),\n    );\n  }\n\n  function trackRules(): EventSupply {\n\n    const supply = eventSupply();\n\n    return onSupplied(rules).to({\n      supply,\n      receive: (_ctx, added) => {\n        added.forEach(r => renderRule(r).needs(supply));\n      },\n    });\n  }\n\n  function renderRule(rule: StypRule): EventSupply {\n\n    const [reader, renderer] = rendererForRule(rule);\n    let sheet: StypWriter.Sheet | undefined;\n    const selector = ruleSelector(rule);\n    const schedule = scheduler();\n\n    return reader.to(renderProperties).whenOff(removeStyle);\n\n    function renderProperties(properties: StypProperties): void {\n      schedule(() => {\n        sheet?.clear();\n\n        const producer = styleProducer(\n            rule,\n            renderer,\n            {\n              get sheet() {\n                if (!sheet) {\n                  sheet = format.addSheet(producer);\n                }\n                return sheet;\n              },\n              get writer() {\n                return this.sheet;\n              },\n              selector,\n            },\n        );\n\n        producer.render(properties);\n        sheet?.done();\n      });\n    }\n\n    function removeStyle(): void {\n      schedule(() => {\n\n        const lastSheet = sheet;\n\n        if (lastSheet) {\n          sheet = undefined;\n          return lastSheet.remove();\n        }\n        // Otherwise element is removed before anything rendered.\n        // Should never happen for properly constructed rule.\n      });\n    }\n  }\n\n  function ruleSelector(rule: StypRule): StypSelector.Normalized {\n\n    const selector = rule.selector;\n\n    if (!selector.length) {\n      // Use configured root selector\n      return stypSelector(rootSelector);\n    }\n    if (isCombinator(selector[0])) {\n      // First combinator is relative to root selector\n      return [...stypSelector(rootSelector), ...selector];\n    }\n\n    return selector;\n  }\n\n  function rendererForRule(rule: StypRule): [AfterEvent<[StypProperties]>, StypRenderer.Function] {\n\n    const specs = factories.map(factory => factory.create(rule));\n    const reader = specs.reduce(\n        (read, spec) => spec.read ? afterSupplied(spec.read(read)) : read,\n        rule.read(),\n    );\n\n    return [reader, renderAt(0)];\n\n    function renderAt(index: number): StypRenderer.Function {\n      return (producer, properties) => {\n\n        const nextIndex = index + 1;\n        let nextRenderer: StypRenderer.Function;\n\n        if (nextIndex === factories.length) {\n          nextRenderer = noop;\n        } else {\n          nextRenderer = renderAt(nextIndex);\n        }\n\n        const nextProducer = styleProducer(producer.rule, nextRenderer, producer);\n\n        specs[index].render(nextProducer, properties);\n      };\n    }\n  }\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/style-producer\n */\nimport { NamespaceAliaser } from '@proc7ts/namespace-aliaser';\nimport { StypPureSelector } from './pure-selector';\nimport { StypSelector } from './selector';\nimport { stypSelector } from './selector-constructor';\nimport { formatStypSelector } from './selector-text.impl';\n\n/**\n * Structured CSS selector textual format.\n *\n * @category CSS Rule\n */\nexport interface StypSelectorFormat {\n\n  /**\n   * Qualifier formatting function. When present, it is called for each qualifier to build its\n   * textual representation. When unspecified, the qualifiers won't be attached to resulting CSS selector text.\n   *\n   * @param qualifier  Qualifier to format.\n   *\n   * @returns Textual representation of `qualifier`.\n   */\n  qualify?: (qualifier: string) => string;\n\n  /**\n   * Namespace aliaser to use.\n   *\n   * New instance will be created if not specified.\n   */\n  nsAlias?: NamespaceAliaser;\n\n}\n\n/**\n * Converts structured CSS selector to its textual representation.\n *\n * @category CSS Rule\n * @param selector  Target CSS selector.\n * @param format  CSS selector format.\n *\n * @returns CSS selector string.\n */\nexport function stypSelectorText(selector: StypSelector | StypPureSelector, format?: StypSelectorFormat): string {\n  return formatStypSelector(stypSelector(selector), format);\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/style-producer\n */\nimport { EventSupply } from '@proc7ts/fun-events';\nimport { StypRules } from '../rule';\nimport { StypFormat } from './format';\nimport { produceBasicStyle } from './produce-basic-style';\nimport { defaultStypRenderers } from './renderers/default-renderers.impl';\n\n/**\n * Produces and dynamically updates CSS stylesheets based on the given CSS rules.\n *\n * Appends `<style>` element(s) to the given parent DOM node (`document.head` by default) and updates them when CSS\n * rules change.\n *\n * This function enables all default renderers. E.g. the one supporting raw CSS text rules. If some of them are not\n * needed a [[produceBasicStyle]] variant of this function may be used instead.\n *\n * @category Rendering\n * @param rules  CSS rules to produce stylesheets for. This can be e.g. a [[StypRule.rules]] to render all rules,\n * or a result of [[StypRuleList.grab]] method call to render only matching ones.\n * @param format  Production format.\n *\n * @returns Styles supply. Once cut off (i.e. its `off()` method is called) the produced stylesheets are removed.\n */\nexport function produceStyle(rules: StypRules, format: StypFormat): EventSupply {\n  return produceBasicStyle(rules, { ...format, renderer: defaultStypRenderers(format.renderer) });\n}\n\n\n","import { isReadonlyArray } from '../../internal';\nimport { StypRenderer } from '../renderer';\nimport { stypRenderAtRules } from './at-rules.renderer';\nimport { stypRenderGlobals } from './globals.renderer';\nimport { stypRenderText } from './text.renderer';\nimport { stypRenderXmlNs } from './xml-ns.renderer';\n\n/**\n * @internal\n */\nexport function defaultStypRenderers(\n    renderer: StypRenderer | readonly StypRenderer[] | undefined,\n): readonly StypRenderer[] {\n\n  const result: StypRenderer[] = [\n    stypRenderAtRules,\n    stypRenderXmlNs,\n    stypRenderGlobals,\n    stypRenderText,\n  ];\n\n  if (renderer) {\n    if (isReadonlyArray(renderer)) {\n      result.push(...renderer);\n    } else {\n      result.push(renderer);\n    }\n  }\n\n  return result;\n}\n","import { filterIt, itsIterable } from '@proc7ts/a-iterable';\nimport { asis, valueProvider, valuesProvider } from '@proc7ts/call-thru';\nimport { AfterEvent, afterSent, EventReceiver, EventSupply, OnEvent, onEventBy, onSupplied } from '@proc7ts/fun-events';\nimport { stypQuery, StypQuery, stypSelectorMatches } from '../selector';\nimport { StypRule, StypRuleList } from './rule';\nimport { StypRules } from './rules';\n\n/**\n * @internal\n */\nexport class Rules extends StypRuleList {\n\n  private readonly _buildList: () => Iterable<StypRule>;\n  private readonly _filterArray: (rules: StypRule[]) => StypRule[];\n  // noinspection JSMismatchedCollectionQueryUpdate\n  private _ruleSet?: Set<StypRule>; // `undefined` updates are not tracked\n\n  constructor(private readonly _list: StypRules, ruleMatches?: (rule: StypRule) => boolean) {\n    super();\n    if (ruleMatches) {\n      this._buildList = () => filterIt(_list, ruleMatches);\n      this._filterArray = rules => rules.filter(ruleMatches);\n    } else {\n      this._buildList = () => _list;\n      this._filterArray = asis;\n    }\n  }\n\n  read(): AfterEvent<[StypRuleList]>;\n  read(receiver: EventReceiver<[StypRuleList]>): EventSupply;\n  read(receiver?: EventReceiver<[StypRuleList]>): AfterEvent<[StypRuleList]> | EventSupply {\n    return (this.read = afterSent<[Rules]>(\n        this.onUpdate().thru(valueProvider(this)),\n        valuesProvider(this),\n    ).F)(receiver);\n  }\n\n  onUpdate(): OnEvent<[StypRule[], StypRule[]]>;\n  onUpdate(receiver: EventReceiver<[StypRule[], StypRule[]]>): EventSupply;\n  onUpdate(receiver?: EventReceiver<[StypRule[], StypRule[]]>): OnEvent<[StypRule[], StypRule[]]> | EventSupply {\n    return (this.onUpdate = onEventBy<[StypRule[], StypRule[]]>(receiver => {\n\n      const rules = this._ruleSet || (this._ruleSet = new Set(this._buildList()));\n\n      onSupplied(this._list).to({\n        supply: receiver.supply.whenOff(() => this._ruleSet = undefined),\n        receive: (context, added, removed) => {\n          added = this._filterArray(added);\n          removed = this._filterArray(removed);\n          if (removed.length || added.length) {\n            removed.forEach(rule => rules.delete(rule));\n            added.forEach(rule => rules.add(rule));\n            receiver.receive(context, added, removed);\n          }\n        },\n      });\n    }).share().F)(receiver);\n  }\n\n  [Symbol.iterator](): IterableIterator<StypRule> {\n    if (this._ruleSet) {\n      // List changes are tracked.\n      return this._ruleSet.values();\n    }\n    // List changes are not currently tracked.\n    // Request the rules explicitly.\n    return itsIterable(this._buildList());\n  }\n\n  grab(query: StypQuery): StypRuleList {\n    return grabRules(this, query);\n  }\n\n}\n\n/**\n * @internal\n */\nexport function grabRules(list: StypRuleList, query: StypQuery): StypRuleList {\n\n  const q = stypQuery(query);\n\n  return new Rules(list, rule => stypSelectorMatches(rule.selector, q));\n}\n","import { itsIterable } from '@proc7ts/a-iterable';\nimport { valueProvider, valuesProvider } from '@proc7ts/call-thru';\nimport {\n  AfterEvent,\n  afterEventBy,\n  afterSent,\n  EventEmitter,\n  EventReceiver,\n  EventSupply,\n  nextAfterEvent,\n  OnEvent,\n  OnEvent__symbol,\n  trackValue,\n  ValueTracker,\n} from '@proc7ts/fun-events';\nimport { StypQuery, StypRuleKey, stypSelector, StypSelector } from '../selector';\nimport { stypRuleKeyText } from '../selector/selector-text.impl';\nimport { stypOuterSelector, stypRuleKeyAndTail } from '../selector/selector.impl';\nimport { StypProperties } from './properties';\nimport { mergeStypProperties, noStypPropertiesSpec, stypPropertiesBySpec } from './properties.impl';\nimport { StypRule, StypRuleHierarchy, StypRuleList } from './rule';\nimport { StypRules } from './rules';\nimport { grabRules, Rules } from './rules.impl';\n\nclass AllRules extends StypRuleHierarchy {\n\n  private readonly _updates = new EventEmitter<[StypRule$[], StypRule$[]]>();\n  readonly self: StypRuleList;\n\n  constructor(private readonly _root: StypRule$, readonly nested: NestedRules) {\n    super();\n    this.self = selfRuleList(_root, this);\n  }\n\n  read(): AfterEvent<[AllRules]>;\n  read(receiver: EventReceiver<[AllRules]>): EventSupply;\n  read(receiver?: EventReceiver<[AllRules]>): AfterEvent<[AllRules]> | EventSupply {\n    return (this.read = afterSent<[AllRules]>(\n        this._updates.on().thru(valueProvider(this)),\n        valuesProvider(this),\n    ).F)(receiver);\n  }\n\n  onUpdate(): OnEvent<[StypRule$[], StypRule$[]]>;\n  onUpdate(receiver: EventReceiver<[StypRule$[], StypRule$[]]>): EventSupply;\n  onUpdate(receiver?: EventReceiver<[StypRule$[], StypRule$[]]>): OnEvent<[StypRule$[], StypRule$[]]> | EventSupply {\n    return (this.onUpdate = this._updates.on().F)(receiver);\n  }\n\n  [Symbol.iterator](): IterableIterator<StypRule$> {\n    return iterateAllRules(this._root);\n  }\n\n  grab(query: StypQuery): StypRuleList {\n    return grabRules(this, query);\n  }\n\n  add(selector: StypSelector, properties?: StypProperties.Spec): StypRule$ {\n    return extendRule(this._root, stypSelector(selector), properties, true);\n  }\n\n  get(selector: StypSelector): StypRule$ | undefined {\n    return this._get(stypSelector(selector));\n  }\n\n  private _get(selector: StypSelector.Normalized): StypRule$ | undefined {\n\n    const [key, tail] = stypRuleKeyAndTail(selector);\n\n    if (!tail) {\n      return this._root;\n    }\n\n    const found = this.nested._rule(stypRuleKeyText(key));\n\n    if (!found) {\n      return;\n    }\n\n    return found.rules.get(tail);\n  }\n\n  watch(selector: StypSelector): AfterEvent<[StypProperties]> {\n\n    const request = stypSelector(selector);\n\n    return afterEventBy<[StypProperties]>(receiver => {\n\n      const tracker = trackValue<StypProperties>({});\n      const propertiesSupply = this.read().consume(() => {\n\n        const found = this._get(request);\n\n        return found && found\n            .read(properties => tracker.it = properties)\n            .whenOff(() => tracker.it = {});\n      });\n\n      return tracker.read(receiver).cuts(propertiesSupply);\n    }).share();\n  }\n\n  _add(rule: StypRule$, sendUpdate: boolean): void {\n    rule.rules.onUpdate((added, removed) => this._updates.send(added, removed));\n    if (sendUpdate) {\n      this._updates.send(allRules(rule), []);\n    }\n  }\n\n  _remove(reason?: any): void {\n\n    const removed = allRules(this._root);\n\n    this._updates.send([], removed);\n    removed.forEach(rule => {\n      rule.rules._updates.done(reason);\n      rule._spec.done(reason);\n    });\n  }\n\n}\n\nfunction selfRuleList(rule: StypRule$, all: AllRules): StypRuleList {\n\n  const onUpdate = new EventEmitter<[StypRule$[], StypRule$[]]>();\n  const rules = [rule];\n\n  all.onUpdate((_added, removed) => {\n    if (removed[0] === rule) {\n      rules.length = 0;\n      onUpdate.send([], [rule]);\n    }\n  }).cuts(onUpdate);\n\n  class Self implements StypRules {\n\n    [OnEvent__symbol](): OnEvent<[StypRule$[], StypRule$[]]> {\n      return onUpdate.on();\n    }\n\n    [Symbol.iterator](): IterableIterator<StypRule$> {\n      return itsIterable(rules);\n    }\n\n  }\n\n  return new Rules(new Self());\n}\n\nfunction allRules(rule: StypRule$): StypRule$[] {\n  return Array.from(iterateAllRules(rule));\n}\n\nfunction *iterateAllRules(rule: StypRule$): IterableIterator<StypRule$> {\n  yield rule;\n  for (const nested of rule.rules.nested) {\n    yield* allRules(nested);\n  }\n}\n\nclass NestedRules extends StypRuleList {\n\n  readonly _all: AllRules;\n  private readonly _updates = new EventEmitter<[StypRule$[], StypRule$[]]>();\n  private readonly _byKey = new Map<string, StypRule$>();\n\n  constructor(root: StypRule$) {\n    super();\n    this._all = new AllRules(root, this);\n  }\n\n  read(): AfterEvent<[NestedRules]>;\n  read(receiver: EventReceiver<[NestedRules]>): EventSupply;\n  read(receiver?: EventReceiver<[NestedRules]>): AfterEvent<[NestedRules]> | EventSupply {\n    return (this.read = afterSent<[NestedRules]>(\n        this._updates.on().thru(valueProvider(this)),\n        valuesProvider(this),\n    ).F)(receiver);\n  }\n\n  onUpdate(): OnEvent<[StypRule[], StypRule[]]>;\n  onUpdate(receiver: EventReceiver<[StypRule[], StypRule[]]>): EventSupply;\n  onUpdate(receiver?: EventReceiver<[StypRule[], StypRule[]]>): OnEvent<[StypRule[], StypRule[]]> | EventSupply {\n    return (this.onUpdate = this._updates.on().F)(receiver);\n  }\n\n  [Symbol.iterator](): IterableIterator<StypRule$> {\n    return this._byKey.values();\n  }\n\n  grab(query: StypQuery): StypRuleList {\n    return grabRules(this, query);\n  }\n\n  _rule(key: string): StypRule$ | undefined {\n    return this._byKey.get(key);\n  }\n\n  _add(key: string, rule: StypRule$, sendUpdate: boolean): void {\n    this._byKey.set(key, rule);\n    rule.rules.onUpdate((_added, removed) => {\n      if (removed[0] === rule) {\n        this._byKey.delete(key);\n        this._updates.send([], [rule]);\n      }\n    });\n    if (sendUpdate) {\n      this._updates.send([rule], []);\n    }\n    this._all._add(rule, sendUpdate);\n  }\n\n}\n\n/**\n * @internal\n */\nexport class StypRule$ extends StypRule {\n\n  private readonly _root: StypRule$;\n  private _outer?: StypRule$ | null;\n  private readonly _selector: StypSelector.Normalized;\n  private readonly _key: StypRuleKey;\n  readonly _spec: ValueTracker<StypProperties.Builder>;\n  private readonly _nested: NestedRules;\n\n  get root(): StypRule$ {\n    return this._root;\n  }\n\n  get outer(): StypRule$ | null {\n    if (this._outer !== undefined) {\n      return this._outer;\n    }\n\n    const outerSelector = stypOuterSelector(this.selector);\n\n    return this._outer = outerSelector && this.root.rules.get(outerSelector) || null;\n  }\n\n  get selector(): StypSelector.Normalized {\n    return this._selector;\n  }\n\n  get key(): StypRuleKey {\n    return this._key;\n  }\n\n  get empty(): boolean {\n    return this._spec.it === noStypPropertiesSpec;\n  }\n\n  get rules(): AllRules {\n    return this._nested._all;\n  }\n\n  constructor(\n      root: StypRule$ | undefined,\n      selector: StypSelector.Normalized,\n      key: StypRuleKey,\n      spec: StypProperties.Builder = noStypPropertiesSpec,\n  ) {\n    super();\n    this._root = root || this;\n    this._selector = selector;\n    this._key = key;\n    this._spec = trackValue(spec);\n    this._nested = new NestedRules(this);\n  }\n\n  read(): AfterEvent<[StypProperties]>;\n  read(receiver: EventReceiver<[StypProperties]>): EventSupply;\n  read(receiver?: EventReceiver<[StypProperties]>): AfterEvent<[StypProperties]> | EventSupply {\n    return (this.read = this._spec.read().keepThru(builder => nextAfterEvent(builder(this))).F)(receiver);\n  }\n\n  set(properties?: StypProperties.Spec): this {\n    this._spec.it = properties ? r => stypPropertiesBySpec(r, properties) : noStypPropertiesSpec;\n    return this;\n  }\n\n  remove(reason?: any): this {\n    this.rules._remove(reason);\n    return this;\n  }\n\n}\n\nfunction extendRule(\n    rule: StypRule$,\n    targetSelector: StypSelector.Normalized,\n    properties: StypProperties.Spec | undefined,\n    sendUpdate: boolean,\n): StypRule$ {\n\n  const [key, tail] = stypRuleKeyAndTail(targetSelector);\n\n  if (!tail) {\n    // Target rule\n    rule._spec.it = extendSpec(rule, properties);\n    return rule;\n  }\n\n  const keyText = stypRuleKeyText(key);\n  const found = rule.rules.nested._rule(keyText);\n\n  if (found) {\n    return extendRule(found, tail, properties, sendUpdate);\n  }\n\n  const newNested = new StypRule$(rule.root, [...rule.selector, ...key], key);\n  const result = extendRule(newNested, tail, properties, false); // Send only a top-level update\n\n  rule.rules.nested._add(keyText, newNested, sendUpdate);\n\n  return result;\n}\n\nfunction extendSpec(rule: StypRule$, properties: StypProperties.Spec | undefined): StypProperties.Builder {\n\n  const oldSpec = rule._spec.it;\n\n  if (!properties) {\n    return oldSpec;\n  }\n\n  if (rule.empty) {\n    return r => stypPropertiesBySpec(r, properties);\n  }\n\n  return r => mergeStypProperties(oldSpec(r), stypPropertiesBySpec(r, properties));\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/style-producer\n */\nimport { nextArg, valueProvider } from '@proc7ts/call-thru';\nimport {\n  afterAll,\n  AfterEvent,\n  AfterEvent__symbol,\n  afterThe,\n  EventKeeper,\n  EventReceiver,\n  EventSupply,\n  isEventKeeper,\n} from '@proc7ts/fun-events';\nimport { StypSelector } from '../selector';\nimport { StypMapper } from '../value';\nimport { StypProperties } from './properties';\nimport { StypRule } from './rule';\n\n/**\n * A type safe reference to CSS rule.\n *\n * Allows to access an modify CSS properties of the rule in a type safe manner.\n *\n * @category CSS Rule\n * @typeparam T  CSS properties structure of referenced rule.\n */\nexport abstract class StypRuleRef<T extends StypProperties<T>> implements EventKeeper<[T]> {\n\n  /**\n   * Builds an `AfterEvent` keeper of CSS properties.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   *\n   * @returns `AfterEvent` keeper of typed CSS properties map.\n   */\n  abstract read(): AfterEvent<[T]>;\n\n  /**\n   * Starts sending CSS properties and updates to the given `receiver`.\n   *\n   * @param receiver  Target receiver of types CSS properties map.\n   *\n   * @returns CSS properties supply.\n   */\n  abstract read(receiver: EventReceiver<[T]>): EventSupply;\n\n  [AfterEvent__symbol](): AfterEvent<[T]> {\n    return this.read();\n  }\n\n  /**\n   * Sets CSS properties of the referenced rule.\n   *\n   * @param properties  CSS properties specifier. Or nothing to clear them.\n   *\n   * @returns `this` rule instance.\n   */\n  abstract set(properties?: Partial<StypProperties<T>> | EventKeeper<[Partial<StypProperties<T>>]>): this;\n\n  /**\n   * Appends CSS properties to the references CSS rule.\n   *\n   * @param properties  CSS properties specifier.\n   *\n   * @returns `this` rule instance.\n   */\n  abstract add(properties: Partial<StypProperties<T>> | EventKeeper<[Partial<StypProperties<T>>]>): this;\n\n  /**\n   * Clears CSS properties of the referenced rule.\n   *\n   * Calling this method is the same as calling `set()` without properties.\n   *\n   * @returns `this` rule instance.\n   */\n  clear(): this {\n    return this.set();\n  }\n\n}\n\n/**\n * CSS rule referrer.\n *\n * This is a function that obtains CSS rule reference relative to the given root.\n *\n * @category CSS Rule\n * @typeparam T  CSS properties interface of referenced rule.\n */\nexport type RefStypRule<T extends StypProperties<T>> =\n/**\n * @param root  Root CSS rule the constructed reference will be relative to.\n *\n * @returns CSS rule reference.\n */\n    (this: void, root: StypRule) => StypRuleRef<T>;\n\n\n/**\n * @internal\n */\nclass StypRuleRef$<T extends StypProperties<T>> extends StypRuleRef<T> {\n\n  constructor(\n      private readonly _root: StypRule,\n      private readonly _selector: StypSelector,\n      private readonly _map: (root: StypRule) => EventKeeper<[StypMapper.Mappings<T>]>,\n  ) {\n    super();\n  }\n\n  read(): AfterEvent<[T]>;\n  read(receiver: EventReceiver<[T]>): EventSupply;\n  read(receiver?: EventReceiver<[T]>): AfterEvent<[T]> | EventSupply {\n    return (this.read = afterAll({\n      ms: this._map(this._root),\n      ps: this._root.rules.watch(this._selector),\n    }).keepThru(\n        ({\n          ms: [_mappings],\n          ps: [_properties],\n        }) => nextArg<T>(StypMapper.map<T>(_mappings, _properties)),\n    ).F)(receiver);\n  }\n\n  add(properties: EventKeeper<[Partial<StypProperties<T>>]> | Partial<StypProperties<T>>): this {\n    this._root.rules.add(this._selector, properties);\n    return this;\n  }\n\n  set(properties?: EventKeeper<[Partial<StypProperties<T>>]> | Partial<StypProperties<T>>): this {\n    this._root.rules.add(this._selector).set(properties);\n    return this;\n  }\n\n}\n\n/**\n * @category CSS Rule\n */\nexport const RefStypRule = {\n\n  /**\n   * Constructs a CSS rule referrer that maps original CSS properties accordingly to the given `mappings`.\n   *\n   * @typeparam T  CSS properties structure of referenced rule.\n   * @param selector  CSS selector of target rule.\n   * @param mappings  Either a mappings of CSS properties, an event keeper sending such mappings, or a function\n   * returning one of them and accepting a root CSS rule as its only argument.\n   * The constructed reference will be relative to as its only parameter.\n   *\n   * @returns New CSS rule key instance.\n   */\n  by<T extends StypProperties<T>>(\n      selector: StypSelector,\n      mappings:\n          | StypMapper.Mappings<T>\n          | EventKeeper<[StypMapper.Mappings<T>]>\n          | ((this: void, root: StypRule) => StypMapper.Mappings<T> | EventKeeper<[StypMapper.Mappings<T>]>),\n  ): RefStypRule<T> {\n\n    let map: (root: StypRule) => EventKeeper<[StypMapper.Mappings<T>]>;\n\n    if (typeof mappings === 'function') {\n      map = root => mappingsKeeper(mappings(root));\n    } else {\n      map = valueProvider(mappingsKeeper(mappings));\n    }\n\n    return root => new StypRuleRef$(root, selector, map);\n  },\n\n};\n\n/**\n * @internal\n */\nfunction mappingsKeeper<T extends StypProperties<T>>(\n    mappings: StypMapper.Mappings<T> | EventKeeper<[StypMapper.Mappings<T>]>,\n): EventKeeper<[StypMapper.Mappings<T>]> {\n  return isEventKeeper(mappings) ? mappings : afterThe(mappings);\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/style-producer\n */\nimport { afterAll, AfterEvent, AfterEvent__symbol, EventKeeper, EventReceiver, EventSupply } from '@proc7ts/fun-events';\nimport { StypProperties } from './properties';\nimport { StypRule } from './rule';\nimport { RefStypRule, StypRuleRef } from './rule-ref';\n\n/**\n * Named CSS rule references complying to the CSS properties structure.\n *\n * Implements an event keeper interface by sending named CSS properties structures for each CSS rule reference.\n *\n * @category CSS Rule\n * @typeparam R  A type of target map of named CSS properties structures.\n */\nexport class StypRuleRefs<R extends StypRuleRefs.Struct<R>> implements EventKeeper<[R]> {\n\n  /**\n   * CSS rule references by name.\n   *\n   * Each property in this map is a CSS rule reference corresponding to the same named property in properties structure.\n   * I.e. it has the same name and the same properties structure of referenced rule.\n   */\n  readonly refs: { readonly [K in keyof R]: StypRuleRef<R[K]> };\n\n  /**\n   * Constructs named CSS rules by resolving CSS rule referrers.\n   *\n   * @typeparam R  A type of target map of named CSS properties structures.\n   * @param referrers  Named CSS rule referrers to resolve.\n   * @param root  A root CSS rule the references will be relative to.\n   *\n   * @returns New names CSS rules instance.\n   */\n  static by<R extends StypRuleRefs.Struct<R>>(\n      referrers: { readonly [K in keyof R]: RefStypRule<R[K]> },\n      root: StypRule,\n  ): StypRuleRefs<R>;\n\n  static by<R extends StypRuleRefs.Struct<R>>(\n      referrers: { readonly [name: string]: RefStypRule<any> },\n      root: StypRule,\n  ): StypRuleRefs<R> {\n\n    const refs: { [K in keyof R]?: StypRuleRef<any> } = {};\n\n    for (const key of Object.keys(referrers)) {\n      refs[key as keyof R] = referrers[key](root);\n    }\n\n    return new StypRuleRefs<R>(refs as { [K in keyof R]: StypRuleRef<R[K]> });\n  }\n\n  /**\n   * Constructs named CSS rules.\n   *\n   * @param refs  A map of named CSS rule references.\n   */\n  constructor(refs: { readonly [K in keyof R]: StypRuleRef<R[K]> }) {\n    this.refs = refs;\n  }\n\n  /**\n   * Builds an `AfterEvent` keeper of named CSS properties structures for each CSS rule reference.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   *\n   * @returns `AfterEvent` keeper of map of named CSS properties structures.\n   */\n  read(): AfterEvent<[R]>;\n\n  /**\n   * Starts sending named CSS properties structures for each CSS rule reference and updates to the given `receiver`.\n   *\n   * @param receiver Target receiver of map of named CSS properties structures.\n   *\n   * @returns Supply of maps of named CSS properties structures.\n   */\n  read(receiver: EventReceiver<[R]>): EventSupply;\n  read(receiver?: EventReceiver<[R]>): AfterEvent<[R]> | EventSupply {\n\n    const fromAll: AfterEvent<[{ [K in keyof R]: [StypProperties<any>] }]> = afterAll(this.refs);\n\n    return (this.read = (fromAll.keepThru(flattenProperties) as AfterEvent<[R]>).F)(receiver);\n  }\n\n  [AfterEvent__symbol](): AfterEvent<[R]> {\n    return this.read();\n  }\n\n}\n\n/**\n * @internal\n */\nfunction flattenProperties<R extends StypRuleRefs.Struct<R>>(\n    propertiesMap: { readonly [name: string]: [StypProperties<any>] },\n): R {\n\n  const result: { [name: string]: StypProperties<any> } = {};\n\n  for (const name of Object.keys(propertiesMap)) {\n    result[name] = propertiesMap[name][0];\n  }\n\n  return result as R;\n}\n\nexport namespace StypRuleRefs {\n\n  /**\n   * A map of named CSS properties structures.\n   *\n   * Each property in this map corresponds to CSS rule reference with the same CSS properties structure.\n   */\n  export type Struct<R = { readonly [name: string]: StypProperties<any> }> = {\n    readonly [K in keyof R]: StypProperties<any>;\n  };\n\n  /**\n   * A map of named CSS rule referrers.\n   *\n   * These referrers then resolved to the same named CSS rule references.\n   *\n   * @typeparam R  A type of target map of named CSS properties structures.\n   */\n  export type Referrers<R extends Struct<R>> = {\n    readonly [K in keyof R]: RefStypRule<R[K]>;\n  };\n\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/style-producer\n */\nimport { itsEach } from '@proc7ts/a-iterable';\nimport {\n  EventNotifier,\n  EventReceiver,\n  EventSender,\n  eventSupply,\n  isEventSender,\n  noEventSupply,\n  OnEvent,\n  OnEvent__symbol,\n  onEventBy,\n  onNever,\n  onSupplied,\n} from '@proc7ts/fun-events';\nimport { StypRule, StypRuleList } from './rule';\nimport { Rules } from './rules.impl';\n\n/**\n * Dynamically updated CSS rule set.\n *\n * This is an iterable of rules, and an `EventSender` of their updates.\n *\n * @category CSS Rule\n */\nexport interface StypRules extends Iterable<StypRule>, EventSender<[StypRule[], StypRule[]]> {\n\n  [Symbol.iterator](): IterableIterator<StypRule>;\n\n}\n\nexport namespace StypRules {\n\n  /**\n   * A source of CSS rules.\n   *\n   * A dynamically updated CSS rule set can be constructed out of one or more sources by [[stypRules]] and\n   * [[lazyStypRules]] functions.\n   *\n   * This can be one of:\n   * - Single `StypRule` instance.\n   *   A `StypRule.rules.self` is used instead. I.e. a list containing only the rule itself.\n   * - A `StypRules` instance.\n   *   It is used as is.\n   * - A promise of one of the above.\n   *   The resolved value is used as an actual source.\n   *   No rules are available until resolution.\n   * - A function returning one of the above.\n   *   The function call result is used as an actual source.\n   *   The function will be called lazily upon rules access.\n   */\n  export type Source =\n      | StypRule\n      | StypRules\n      | Promise<StypRule | StypRules>\n      | ((this: void) => StypRule | StypRules | Promise<StypRule | StypRules>);\n\n}\n\n/**\n * @internal\n */\nconst noStypRules: StypRuleList = (/*#__PURE__*/ new Rules({\n  [OnEvent__symbol]() {\n    return onNever;\n  },\n  [Symbol.iterator](): IterableIterator<StypRule> {\n    return [][Symbol.iterator]();\n  },\n}));\n\n/**\n * Constructs dynamically updated CSS rule list out of rule sources.\n *\n * @category CSS Rule\n * @param sources  CSS rule sources.\n *\n * @returns Dynamic CSS rule list.\n */\nexport function stypRules(...sources: StypRules.Source[]): StypRuleList {\n  return sources.length ? rulesByList(sources.map(rulesFromSource)) : noStypRules;\n}\n\n/**\n * @internal\n */\nfunction rulesFromSource(source: StypRules.Source): StypRules {\n  return typeof source === 'function' ? evalRules(source) : rulesByValue(source);\n}\n\n/**\n * Constructs lazily updated CSS rule list out of rule sources.\n *\n * In contrast to [[stypRules]] this one does not evaluate sources (e.g. does not call source functions) until there\n * is an updates receiver registered.\n *\n * This means that the constructed rule set won't necessary contain the rules from all sources originally. It will\n * report them as updates instead.\n *\n * @category CSS Rule\n * @param sources  CSS rule sources.\n *\n * @returns Dynamic CSS rule list.\n */\nexport function lazyStypRules(...sources: StypRules.Source[]): StypRuleList {\n  return sources.length ? rulesByList(sources.map(lazyRulesFromSource)) : noStypRules;\n}\n\n/**\n * @internal\n */\nfunction lazyRulesFromSource(source: StypRules.Source): StypRules {\n  return typeof source === 'function' ? lazyRules(source) : rulesByValue(source);\n}\n\n/**\n * @internal\n */\nfunction rulesByList(sources: StypRules[]): StypRuleList {\n  if (sources.length === 1) {\n\n    const source = sources[0];\n\n    return source instanceof StypRuleList ? source : new Rules(source);\n  }\n  return new Rules({\n    *[Symbol.iterator](): IterableIterator<StypRule> {\n      for (const rules of sources) {\n        yield* rules;\n      }\n    },\n    [OnEvent__symbol](): OnEvent<[StypRule[], StypRule[]]> {\n      return onEventBy<[StypRule[], StypRule[]]>(receiver => {\n        sources.forEach(source => onSupplied(source).to({\n          supply: eventSupply().needs(receiver.supply),\n          receive(context, added, removed) {\n            receiver.receive(context, added, removed);\n          },\n        }));\n      }).share();\n    },\n  });\n}\n\n/**\n * @internal\n */\nfunction evalRules(source: (this: void) => StypRule | StypRules | Promise<StypRule | StypRules>): StypRules {\n\n  let _rules: StypRules | undefined;\n\n  return {\n    [Symbol.iterator](): IterableIterator<StypRule> {\n      return rules()[Symbol.iterator]();\n    },\n    [OnEvent__symbol]() {\n      return rules()[OnEvent__symbol]();\n    },\n  };\n\n  function rules(): StypRules {\n    return _rules || (_rules = rulesByValue(source()));\n  }\n}\n\n/**\n * @internal\n */\nfunction lazyRules(source: (this: void) => StypRule | StypRules | Promise<StypRule | StypRules>): StypRules {\n\n  const ruleSet = new Set<StypRule>();\n  const onEvent = onEventBy<[StypRule[], StypRule[]]>(receiver => {\n\n    const rules = rulesByValue(source());\n\n    reportExistingRules(rules, ruleSet, receiver);\n    rules[OnEvent__symbol]().to({\n      supply: receiver.supply.whenOff(() => ruleSet.clear()),\n      receive(context, added, removed) {\n        removed.forEach(rule => ruleSet.delete(rule));\n        added.forEach(rule => ruleSet.add(rule));\n        receiver.receive(context, added, removed);\n      },\n    });\n  }).share();\n\n  return {\n    [OnEvent__symbol]() {\n      return onEvent;\n    },\n    [Symbol.iterator](): IterableIterator<StypRule> {\n      return ruleSet.values();\n    },\n  };\n}\n\n/**\n * @internal\n */\nfunction rulesByValue(source: StypRule | StypRules | Promise<StypRule | StypRules>): StypRules {\n  return source instanceof StypRule ? source.rules.self : isEventSender(source) ? source : asyncRules(source);\n}\n\n/**\n * @internal\n */\nfunction asyncRules(source: Promise<StypRule | StypRules>): StypRules {\n\n  const ruleSet = new Set<StypRule>();\n  const onEvent = onEventBy<[StypRule[], StypRule[]]>(receiver => {\n\n    let sourceSupply = noEventSupply();\n    const { supply } = receiver;\n\n    supply.cuts(sourceSupply)\n        .whenOff(() => ruleSet.clear());\n\n    source.then(resolution => {\n      if (!supply.isOff) {\n\n        const rules = resolution instanceof StypRule ? resolution.rules : resolution;\n\n        reportExistingRules(rules, ruleSet, receiver);\n\n        sourceSupply = onSupplied(rules).to({\n          receive(context, added, removed) {\n            removed.forEach(rule => ruleSet.delete(rule));\n            added.forEach(rule => ruleSet.add(rule));\n            receiver.receive(context, added, removed);\n          },\n        }).needs(supply);\n      }\n    });\n  }).share();\n\n  return {\n    [OnEvent__symbol]() {\n      return onEvent;\n    },\n    [Symbol.iterator](): IterableIterator<StypRule> {\n      return ruleSet.values();\n    },\n  };\n}\n\n/**\n * @internal\n */\nfunction reportExistingRules(\n    rules: StypRules,\n    ruleSet: Set<StypRule>,\n    receiver: EventReceiver.Generic<[StypRule[], StypRule[]]>,\n): void {\n\n  const existing: StypRule[] = [];\n\n  itsEach(rules, rule => {\n    existing.push(rule);\n    ruleSet.add(rule);\n  });\n  if (existing.length) {\n\n    const dispatcher = new EventNotifier<[StypRule[], StypRule[]]>();\n\n    dispatcher.on(receiver);\n    dispatcher.send(existing, []); // Report existing rules as just added\n  }\n}\n","import { ContextValues, SingleContextKey, SingleContextRef } from '@proc7ts/context-values';\nimport { css__naming, html__naming, NamespaceDef, QualifiedName } from '@proc7ts/namespace-aliaser';\nimport { ComponentContext, DefaultNamespaceAliaser, ElementDef } from '@wesib/wesib';\n\n/**\n * @internal\n */\nexport type ElementIdClass = QualifiedName;\n\n/**\n * @internal\n */\nexport const ElementIdClass__NS = (/*#__PURE__*/ new NamespaceDef(\n    'https://wesib.github.io/ns/element-id-class',\n    'elic',\n    'element-id-class',\n));\n\n/**\n * @internal\n */\nexport const ElementIdClass: SingleContextRef<ElementIdClass> = (/*#__PURE__*/ new SingleContextKey(\n    'unique-element-class',\n    { byDefault: assignElementId },\n));\n\n/**\n * @internal\n */\nlet uniqueClassSeq = 0;\n\n/**\n * @internal\n */\nfunction assignElementId(contextValues: ContextValues): ElementIdClass {\n\n  const aliaser = contextValues.get(DefaultNamespaceAliaser);\n  const context = contextValues.get(ComponentContext);\n  const elementDef = context.get(ElementDef);\n  const name: string = elementDef.name ? html__naming.name(elementDef.name, aliaser) : 'component';\n  const local = `${name}#${++uniqueClassSeq}`;\n  const qualified = ElementIdClass__NS.name(aliaser(ElementIdClass__NS), local, css__naming);\n  const element = context.element as Element;\n\n  element.classList.add(qualified);\n\n  return qualified;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic/styp\n */\nimport { valueProvider } from '@proc7ts/call-thru';\nimport { ContextKey, ContextKey__symbol, SingleContextKey } from '@proc7ts/context-values';\nimport { EventSupply, eventSupply, eventSupplyOf } from '@proc7ts/fun-events';\nimport { NamespaceAliaser } from '@proc7ts/namespace-aliaser';\nimport { RenderScheduler } from '@proc7ts/render-scheduler';\nimport {\n  lazyStypRules,\n  StypFormat,\n  StypFormatConfig,\n  StypPureSelector,\n  StypRenderer,\n  StypRules,\n  StypSelector,\n  stypSelector,\n  StypSubSelector,\n} from '@proc7ts/style-producer';\nimport { ArraySet, ComponentContext, ShadowContentRoot } from '@wesib/wesib';\nimport { ComponentStyleProducer } from './component-style-producer';\nimport { ComponentStypRenderer } from './component-styp-renderer';\nimport { ElementIdClass } from './element-id-class.impl';\n\n/**\n * Configuration of {@link ComponentStypFormat component style production format}.\n */\nexport interface ComponentStypFormatConfig extends StypFormatConfig {\n\n  /**\n   * Structured CSS selector to use for custom element's host.\n   *\n   * It modifies the selectors of produced CSS rules.\n   *\n   * For custom element with shadow root:\n   * - Replaces root CSS rule selector with `:host(<hostSelector>).\n   * - When `hostSelector` is omitted, then replaces root CSS rule selector with `:host`.\n   * - If CSS rule selector starts with `:host`, then replaces `:host` with `:host(<hostSelector>)`\n   * - If CSS rule selector starts with `:host(<selector>)`, then extends `<selector>` by `hostSelector`.\n   *   I.e. appends CSS classes and sub-selectors to it, and fulfills missing element and identifier selectors.\n   *\n   * For custom element without shadow root either uses provided `hostSelector`, or generates a unique one when omitted.\n   * And additionally:\n   * - Replaces root CSS rule selector it with `hostSelector`.\n   * - If CSS rule selector starts with `:host`, then replaces `:host` with `hostSelector`.\n   * - If CSS rule selector starts with `:host(<selector>), then replaces `:host(<selector>)` with `<selector>` extended\n   *   by `hostSelector`. I.e. appends CSS classes and sub-selectors to it, and fulfills missing element and identifier\n   *   selectors.\n   * - Otherwise prepends CSS rule selector with `hostSelector`.\n   *\n   * This selector should not contain a `:host` sub-selector.\n   */\n  readonly hostSelector?: StypPureSelector.Part | string;\n\n  /**\n   * Root CSS selector is never used for custom elements. A `hostSelector` is applied instead.\n   */\n  readonly rootSelector?: undefined;\n\n  /**\n   * DOM rendering operations scheduler.\n   *\n   * Creates a render schedule per rule.\n   *\n   * `ElementRenderScheduler` is used when omitted.\n   */\n  readonly scheduler?: RenderScheduler;\n\n  /**\n   * Namespace aliaser to use.\n   *\n   * `DefaultNamespaceAliaser` is used when omitted.\n   */\n  readonly nsAlias?: NamespaceAliaser;\n\n}\n\nconst ComponentStypFormat__symbol = (\n    /*#__PURE__*/ new SingleContextKey<ComponentStypFormat>(\n        'component-styp-format',\n    )\n);\n\n/**\n * Component style production format.\n *\n * This format can be obtained from component context.\n *\n * The formats implemented:\n * - {@link ComponentStypObjectFormat} (the default) renders CSS using CSS object model.\n * - {@link ComponentStypDomFormat} renders CSS as text. May render CSS of disconnected element.\n */\nexport abstract class ComponentStypFormat {\n\n  /**\n   * A key of component context value containing its style production format.\n   */\n  static get [ContextKey__symbol](): ContextKey<ComponentStypFormat> {\n    return ComponentStypFormat__symbol;\n  }\n\n  /**\n   * Component context.\n   */\n  abstract readonly context: ComponentContext;\n\n  /**\n   * Produces and dynamically updates component's CSS stylesheets based on the given CSS rules.\n   *\n   * Utilizes {@link newProducer component's producer function}.\n   *\n   * @param rules  A source of CSS rules to produce stylesheets for.\n   * @param config  Style production format configuration.\n   *\n   * @returns CSS rules supply. Once cut off the produced stylesheets are removed.\n   */\n  produce(\n      rules: StypRules.Source,\n      config?: ComponentStypFormatConfig,\n  ): EventSupply {\n\n    const producer = this.newProducer(rules, config);\n    const supply = eventSupply();\n\n    this.context.whenSettled(() => {\n      producer().needs(supply).cuts(supply);\n    });\n\n    return supply;\n  }\n\n  /**\n   * Creates component's CSS stylesheets producer based on the given CSS rules.\n   *\n   * Utilizes {@link ComponentStyleProducer}.\n   *\n   * @param rules  A source of CSS rules to produce stylesheets for.\n   * @param config  Style production format configuration.\n   *\n   * @returns CSS rules producer function returning CSS rules supply. Once cut off the produced stylesheets are removed.\n   */\n  newProducer(\n      rules: StypRules.Source,\n      config?: ComponentStypFormatConfig,\n  ): (this: void) => EventSupply {\n\n    const css = lazyStypRules(rules);\n    let producer: () => EventSupply;\n    const componentSupply = eventSupplyOf(this.context);\n\n    producer = () => {\n\n      const produceStyle = this.context.get(ComponentStyleProducer);\n\n      return produceStyle(css, this.format(config)).needs(componentSupply);\n    };\n\n    // In case the component destroyed already, the producer will be reassigned here _before_ return.\n    componentSupply.whenOff(() => {\n      // Prevent style production once component destroyed.\n      producer = valueProvider(componentSupply);\n    });\n\n    return () => producer();\n  }\n\n  /**\n   * Builds CSS style production format to by its config.\n   *\n   * This method is called by {@link produce} one.\n   *\n   * @param config  Component style production format configuration.\n   *\n   * @returns Component style production format.\n   */\n  abstract format(config?: ComponentStypFormatConfig): StypFormat;\n\n  /**\n   * Builds component-specific style renderer.\n   *\n   * This renderer applies {@link ComponentStypFormatConfig.hostSelector host selector} to generated CSS rules.\n   *\n   * This method is called by {@link format} one.\n   *\n   * @param config  Component style production format configuration.\n   *\n   * @returns Component style renderer(s).\n   */\n  renderer(\n      config: ComponentStypFormatConfig,\n  ): StypRenderer | readonly StypRenderer[] | undefined {\n\n    const shadowRoot = this.context.get(ShadowContentRoot, { or: null });\n    const { renderer } = config;\n    const renderers = new ArraySet<StypRenderer>(renderer)\n        .add(...this.context.get(ComponentStypRenderer));\n    const hostSelector = config.hostSelector\n        ? stypSelector(config.hostSelector)[0] as StypPureSelector.NormalizedPart\n        : undefined;\n\n    renderers.add(shadowRoot\n        ? shadowRenderer(hostSelector)\n        : noShadowRenderer(hostSelector || { c: [this.context.get(ElementIdClass)] }));\n\n    return renderers.value;\n  }\n\n}\n\n\n/**\n * @internal\n */\nfunction shadowRenderer(hostSelector: StypPureSelector.NormalizedPart | undefined): StypRenderer {\n  return {\n    order: -100,\n    render(producer, properties) {\n\n      let { selector } = producer;\n\n      if (!selector.length) {\n        selector = [hostSelector || { u: [[':', 'host']] }];\n      } else if (hostSelector) {\n\n        const [rest, host] = extractHostSelector(selector);\n\n        if (host) {\n          if (host.length) {\n            selector = [{ u: [[':', 'host', extendHostSelector(host, hostSelector)]] }, ...rest];\n          } else {\n            selector = [{ u: [[':', 'host', [hostSelector]]] }, ...rest];\n          }\n        }\n      }\n\n      producer.render(properties, { selector });\n    },\n  };\n}\n\n/**\n * @internal\n */\nfunction noShadowRenderer(hostSelector: StypPureSelector.NormalizedPart): StypRenderer {\n  return {\n    order: -100,\n    render(producer, properties) {\n\n      let { selector } = producer;\n\n      if (!selector.length) {\n        selector = [hostSelector];\n      } else {\n\n        const [rest, host] = extractHostSelector(selector);\n\n        if (host && host.length) {\n          selector = [...extendHostSelector(host, hostSelector), ...rest];\n        } else {\n          selector = [hostSelector, ...rest];\n        }\n      }\n\n      producer.render(properties, { selector });\n    },\n  };\n}\n\n/**\n * @internal\n */\nfunction extractHostSelector(\n    selector: StypSelector.Normalized,\n): [StypSelector.Normalized, StypSelector.Normalized?] {\n  if (typeof selector[0] !== 'string') {\n\n    const [{ ns, e, i, c, u, s, $ }, ...restParts] = selector;\n\n    if (!ns && !e && !i && !c && !s && u) {\n\n      const [[prefix, name, ...params]] = u;\n\n      if (prefix === ':' && name === 'host') {\n\n        let host: StypSelector.Mutable;\n\n        if (params.length) {\n          host = Array.from(params[0] as StypSubSelector.NormalizedParameter);\n          (host[0] as any).$ = $;\n        } else {\n          host = $ ? [{ $ }] : [];\n        }\n\n        return [restParts, host];\n      }\n    }\n  }\n  return [selector];\n}\n\n/**\n * @internal\n */\nfunction extendHostSelector(\n    selector: StypSelector.Normalized,\n    {\n      ns,\n      e,\n      i,\n      c,\n      u,\n      s,\n    }: StypPureSelector.NormalizedPart,\n): StypSelector.Normalized {\n\n  const [first, ...rest] = selector as [StypSelector.NormalizedPart, ...StypSelector.Normalized];\n\n  return [\n    {\n      ns: first.e || first.ns ? first.ns : ns,\n      e: first.e || first.ns ? first.e : e,\n      i: first.i || i,\n      c: first.c ? (c ? [...first.c, ...c] : first.c) as typeof c : c,\n      u: first.u ? (u ? [...first.u, ...u] : first.u) as typeof u : u,\n      s: ((first.s || '') + (s || '')) || undefined,\n      $: first.$,\n    },\n    ...rest,\n  ];\n}\n\n","/**\n * @packageDocumentation\n * @module @wesib/generic/styp\n */\nimport { stypDomFormat, StypDomFormatConfig, StypFormat } from '@proc7ts/style-producer';\nimport {\n  BootstrapWindow,\n  ComponentContext,\n  DefaultNamespaceAliaser,\n  ElementRenderScheduler,\n  RenderDef,\n} from '@wesib/wesib';\nimport { ComponentStypFormat, ComponentStypFormatConfig } from './component-styp-format';\n\n/**\n * Component's DOM style production format.\n *\n * Renders CSS styles as text.\n *\n * This format is generally slower than {@link ComponentStypObjectFormat}, but allows to render styles before element\n * is connected to document.\n */\nexport class ComponentStypDomFormat extends ComponentStypFormat {\n\n  /**\n   * When to start component style rendering.\n   *\n   * One of:\n   * `settled` (the default) - to start rendering when component is settled.\n   * `connected` - to start rendering when component's element is connected to document.\n   */\n  readonly when: 'settled' | 'connected';\n\n  /**\n   * Constructs DOM style production format.\n   *\n   * @param context  Target component context.\n   * @param when  When to start style rendering. `settled` by default.\n   */\n  constructor(\n      readonly context: ComponentContext,\n      {\n        when = 'settled',\n      }: {\n        readonly when?: 'settled' | 'connected';\n      } = {},\n  ) {\n    super();\n    this.when = when;\n  }\n\n  format(config?: ComponentStypFormatConfig & StypDomFormatConfig): StypFormat {\n    return stypDomFormat(this.config(config));\n  }\n\n  /**\n   * Builds configuration of DOM style production format.\n   *\n   * This method is called by {@link format} one.\n   *\n   * @param config  Original component style production format configuration.\n   *\n   * @returns Configuration of DOM style production format.\n   */\n  config(\n      config?: ComponentStypFormatConfig & StypDomFormatConfig,\n  ): StypDomFormatConfig {\n    return componentStypDomFormatConfig(this, config, { when: this.when });\n  }\n\n}\n\n/**\n * Builds configuration of DOM style production format.\n *\n * Schedules style rendering in `ElementRenderScheduler` by default.\n *\n * Utilizes `DefaultNamespaceAliaser` by default.\n *\n * @param format  Target component style production format.\n * @param config  Original component style production format configuration.\n * @param render  Element render definition to apply to style render schedule, unless render scheduler specified\n * explicitly in `config`.\n *\n * @returns Configuration of DOM style production format.\n */\nexport function componentStypDomFormatConfig(\n    format: ComponentStypFormat,\n    config: ComponentStypFormatConfig & StypDomFormatConfig = {},\n    render?: RenderDef,\n): StypDomFormatConfig {\n\n  const { context } = format;\n\n  return {\n    ...config,\n    document: config.document || context.get(BootstrapWindow).document,\n    parent: config.parent || context.contentRoot,\n    rootSelector: [],\n    scheduler: config.scheduler || defaultStypRenderScheduler(context, render),\n    nsAlias: config.nsAlias || context.get(DefaultNamespaceAliaser),\n    renderer: format.renderer(config),\n  };\n}\n\n/**\n * @internal\n */\nfunction defaultStypRenderScheduler(\n    context: ComponentContext,\n    render: RenderDef = {},\n): ElementRenderScheduler {\n\n  const scheduler = context.get(ElementRenderScheduler);\n\n  return (opts = {}) => scheduler({ ...opts, ...render });\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic/styp\n */\nimport { StypRule, StypRules } from '@proc7ts/style-producer';\nimport { ComponentClass, ComponentProperty, ComponentPropertyDecorator } from '@wesib/wesib';\nimport { BasicStyleProducerSupport } from './basic-style-producer-support.feature';\nimport { ComponentStypFormat, ComponentStypFormatConfig } from './component-styp-format';\n\n/**\n * A decorator of component property returning CSS rules to produce.\n *\n * Decorated property value should either contain a CSS rules source of type `StypRules.Source` or be a method\n * returning it.\n *\n * This decorator automatically enables [[BasicStyleProducerSupport]] feature.\n *\n * Produces CSS using {@link ComponentStypFormat component style production format}.\n *\n * @typeparam T  A type of decorated component class.\n * @param config  Non-mandatory component style production format config.\n *\n * @returns Component property decorator.\n */\nexport function ProduceStyle<T extends ComponentClass>(\n    config?: ComponentStypFormatConfig,\n): ComponentPropertyDecorator<\n    | StypRules.Source\n    | (() => StypRule | StypRules | Promise<StypRule | StypRules>),\n    T> {\n  return ComponentProperty(({ get }) => ({\n    componentDef: {\n      feature: {\n        needs: BasicStyleProducerSupport,\n      },\n      define(defContext) {\n        defContext.whenComponent(context => {\n          context.whenReady(({ component }) => {\n\n            const value = get(component);\n            const source: StypRules.Source = typeof value === 'function' ? value.bind(component) : value;\n            const format = context.get(ComponentStypFormat);\n\n            format.produce(source, config);\n          });\n        });\n      },\n    },\n  }));\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic/styp\n */\nimport { ContextRef, ContextValueOpts, ContextValues, IterativeContextKey } from '@proc7ts/context-values';\nimport { stypRules, StypRules } from '@proc7ts/style-producer';\nimport { Theme } from './theme';\n\n/**\n * Theme style provides part of the theme styling information.\n *\n * Theme style(s) can be provided in bootstrap context. They are applied to the theme at most once, when requested\n * by calling [[Theme.style]] method.\n *\n * Theme style is either a function, or an extension of another theme style.\n */\nexport type ThemeStyle = ThemeStyle.Provider | ThemeStyle.Extension;\n\nexport namespace ThemeStyle {\n\n  /**\n   * Theme style provider function.\n   *\n   * This function is called at most once per theme to apply styles to the latter. E.g. by declaring CSS rules.\n   *\n   * This function is used as an identifier of particular style and can be extended using [[ThemeStyle.Extension]].\n   *\n   * It is not absolutely necessary to register style provider. It will be applied on request anyway.\n   *\n   * @param theme  A theme to apply styling to.\n   *\n   * @returns Dynamically updated CSS rule set containing the applied styling.\n   */\n  export type Provider = (this: void, theme: Theme) => StypRules;\n\n  /**\n   * Theme style extension.\n   *\n   * An extension should be registered in bootstrap context in order to be applied.\n   */\n  export interface Extension {\n\n    /**\n     * A theme style provider to extend.\n     */\n    readonly style: ThemeStyle.Provider;\n\n    /**\n     * Extends the theme style.\n     *\n     * This method is called at most once per theme to apply styles to the latter. E.g. by declaring CSS rules.\n     *\n     * It will be called after the style provider it extends.\n     *\n     * @param theme  A theme to apply styling to.\n     *\n     * @returns Dynamically updated CSS rule set containing the applied styling.\n     */\n    provide(theme: Theme): StypRules;\n\n  }\n\n  /**\n   * A function obtaining combined style provider. I.e. the one that applies the style along with all extensions.\n   *\n   * @param A  provider of theme style to apply.\n   *\n   * @returns A combined theme style provider.\n   */\n  export type ById = (this: void, style: ThemeStyle.Provider) => ThemeStyle.Provider;\n\n}\n\n/**\n * @internal\n */\nclass ThemeStyleKey extends IterativeContextKey<ThemeStyle.ById, ThemeStyle> {\n\n  constructor() {\n    super('theme-style');\n  }\n\n  grow<Ctx extends ContextValues>(\n      opts: ContextValueOpts<Ctx, ThemeStyle.ById, ThemeStyle, Iterable<ThemeStyle>>,\n  ): ThemeStyle.ById | null | undefined {\n\n    const providers = new Map<ThemeStyle.Provider, [ThemeStyle.Provider, boolean]>();\n\n    for (const style of opts.seed) {\n\n      let key: ThemeStyle.Provider;\n      let provider: ThemeStyle.Provider;\n      let isId: boolean;\n\n      if (typeof style === 'function') {\n        key = provider = style;\n        isId = true;\n      } else {\n        key = style.style;\n        provider = style.provide.bind(style);\n        isId = false;\n      }\n\n      const prev = providers.get(key);\n\n      if (!prev) {\n        providers.set(key, [provider, isId]);\n      } else {\n\n        const [prevProvider, hasId] = prev;\n\n        providers.set(\n            key,\n            [\n              isId ? combineStyles(provider, prevProvider) : combineStyles(prevProvider, provider),\n              isId || hasId,\n            ],\n        );\n      }\n    }\n\n    return providers.size ? byId : opts.byDefault(() => byId);\n\n    function byId(id: ThemeStyle.Provider): ThemeStyle.Provider {\n\n      const existing = providers.get(id);\n\n      if (!existing) {\n        return id;\n      }\n\n      const [provider, hasId] = existing;\n\n      return hasId ? provider : combineStyles(id, provider);\n    }\n  }\n\n}\n\n/**\n * A key of bootstrap context value containing theme styles.\n */\nexport const ThemeStyle: ContextRef<ThemeStyle.ById, ThemeStyle> = new ThemeStyleKey();\n\n/**\n * @internal\n */\nfunction combineStyles(first: ThemeStyle.Provider, second: ThemeStyle.Provider): ThemeStyle.Provider {\n  return theme => stypRules(first(theme), second(theme));\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/delta-set\n */\n/**\n * A `Set` implementation that keeps a delta of changes made to it.\n *\n * @typeparam T  A type of elements of delta set.\n */\nexport class DeltaSet<T> extends Set<T> {\n\n  /** @internal */\n  private readonly _added: Set<T>;\n\n  /** @internal */\n  private readonly _removed: Set<T>;\n\n  /**\n   * Constructs new delta set.\n   *\n   * @param values  An iterable of elements be add to constructed delta set. Or `null` to add nothing.\n   */\n  constructor(values?: Iterable<T> | null) {\n    super();\n    this._added = new Set<T>(values);\n    this._removed = new Set<T>();\n    this._added.forEach(value => this.add(value));\n  }\n\n  /**\n   * Appends a new element with a specified value to the end of this delta set. Unless the set contains this element\n   * already.\n   *\n   * Records element addition and forgets its removal unless the set contains it already.\n   *\n   * @param value  The value of the element to add.\n   *\n   * @returns `this` delta set.\n   */\n  add(value: T): this {\n    if (!this.has(value)) {\n      this._added.add(value);\n      this._removed.delete(value);\n      super.add(value);\n    }\n    return this;\n  }\n\n  /**\n   * Removes the specified element from this delta set.\n   *\n   * Records element removal and forgets its addition if removal succeed.\n   *\n   * @param value  The value of the element to remove.\n   *\n   * @returns `true` if element removed successfully; or `false` if this set did not contain the element.\n   */\n  delete(value: T): boolean {\n    if (super.delete(value)) {\n      this._added.delete(value);\n      this._removed.add(value);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Removes all elements from this delta set.\n   *\n   * Records all elements removal and forgets all elements additions.\n   */\n  clear(): void {\n    this._added.clear();\n    this.forEach(value => this._removed.add(value));\n    super.clear();\n  }\n\n  /**\n   * Applies changes to this delta set.\n   *\n   * First removes elements to `remove`. Then appends elements to `add`.\n   *\n   * Records all changes made.\n   *\n   * @param add  An iterable of elements to add.\n   * @param remove  An iterable of elements to remove.\n   *\n   * @returns `this` delta set.\n   */\n  delta(add: Iterable<T>, remove: Iterable<T> = []): this {\n    deltaSetDeltaReceiver(this)(add, remove);\n    return this;\n  }\n\n  /**\n   * Replays changes made to this set in target receiver.\n   *\n   * @param receiver  A receiver of changes delta. E.g. another `Set`.\n   *\n   * @returns `this` delta set.\n   */\n  redelta(receiver: DeltaSet.DeltaReceiver<T>): this {\n\n    const receive = typeof receiver === 'function' ? receiver : deltaSetDeltaReceiver(receiver);\n\n    receive(Array.from(this._added), Array.from(this._removed));\n\n    return this;\n  }\n\n  /**\n   * Forgets all changes made to this set.\n   *\n   * Does not alter the set contents.\n   *\n   * @returns `this` delta set.\n   */\n  undelta(): this {\n    this._added.clear();\n    this._removed.clear();\n    return this;\n  }\n\n}\n\nexport namespace DeltaSet {\n\n  /**\n   * A delta set changes receiver.\n   *\n   * This can be either an {@link DeltaReceiverObject object}, or a {@link DeltaReceiverFunction function}.\n   *\n   * @typeparam T  A type of elements of delta set.\n   */\n  export type DeltaReceiver<T> =\n      | DeltaReceiverFunction<T>\n      | DeltaReceiverObject<T>;\n\n  /**\n   * A delta set changes receiver function.\n   *\n   * @typeparam T  A type of elements of delta set.\n   */\n  export type DeltaReceiverFunction<T> =\n  /**\n   * @param added  An array of added elements.\n   * @param removed  An array of removed elements.\n   */\n      (this: void, added: T[], remove: T[]) => void;\n\n  /**\n   * A delta set changes receiver object.\n   *\n   * A `Set` class implements this interface.\n   *\n   * @typeparam T  A type of elements of delta set.\n   */\n  export interface DeltaReceiverObject<T> {\n\n    /**\n     * Receives an element that has been added to delta set.\n     *\n     * @param value  The value of the added element.\n     */\n    add(value: T): void;\n\n    /**\n     * Receives an element that has been remove from delta set.\n     *\n     * @param value  The value of the removed element.\n     */\n    delete(value: T): void;\n\n  }\n\n}\n\n/**\n * @internal\n */\nfunction deltaSetDeltaReceiver<T>(\n    receiver: DeltaSet.DeltaReceiverObject<T>,\n): (this: void, add: Iterable<T>, remove: Iterable<T>) => void {\n  return (add, remove) => {\n    for (const removed of remove) {\n      receiver.delete(removed);\n    }\n    for (const added of add) {\n      receiver.add(added);\n    }\n  };\n}\n","import { noop, valueProvider } from '@proc7ts/call-thru';\nimport { InAspect } from './aspect';\nimport { InControl } from './control';\n\n/**\n * @internal\n */\nexport const inAspectNull: InAspect.Applied<any, any, any> = {\n  instance: null,\n  convertTo: noop,\n};\n\n/**\n * @internal\n */\nexport function inAspectSameOrBuild<Value, Instance, Kind extends InAspect.Application.Kind>(\n    control: InControl<Value>,\n    aspectKey: InAspect.Key<Instance, Kind>,\n    build: <V>(this: void, control: InControl<V>, origin?: InControl<any>) => Instance,\n    instance?: Instance,\n    origin?: InControl<any>,\n): InAspect.Applied<Value, Instance> {\n  if (instance === undefined) {\n    instance = build(control, origin);\n  }\n  return {\n    instance,\n    convertTo<To>(target: InControl<To>): InAspect.Applied<To, Instance> {\n      return inAspectSameOrBuild<To, Instance, Kind>(\n          target,\n          aspectKey,\n          build,\n          undefined,\n          control,\n      );\n    },\n    attachTo(target: InControl<Value>): InAspect.Applied<Value, Instance> | undefined {\n      return inAspectSameOrBuild(\n          target,\n          aspectKey,\n          build,\n          (control.aspect(aspectKey) as Instance | undefined) || build(target),\n      );\n    },\n  };\n}\n\n/**\n * @internal\n */\nexport function inAspectSameOrNull<Value, Instance, Kind extends InAspect.Application.Kind>(\n    control: InControl<Value>,\n    aspectKey: InAspect.Key<Instance | null, Kind>,\n    instance: Instance | null = null,\n): InAspect.Applied<Value, Instance | null> {\n  return inAspectSameOrBuild(control, aspectKey, valueProvider(null), instance);\n}\n\n/**\n * @internal\n */\nexport function inAspectValue<Instance>(instance: Instance): InAspect.Applied<any, Instance> {\n  return {\n    instance,\n    convertTo() {\n      return this;\n    },\n  };\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/input-aspects\n */\nimport { filterIt, flatMapIt, itsReduction, mapIt } from '@proc7ts/a-iterable';\nimport { isPresent, noop, valueProvider } from '@proc7ts/call-thru';\nimport { InAspect } from './aspect';\nimport { InControl } from './control';\n\n/**\n * Input control converter. Either aspect-only, or value one.\n *\n * Either a {@link InConverter.Conversion control conversion}, or a {@link InConverter.Factory conversion factory}.\n *\n * @category Converter\n * @typeparam From  Original input value type.\n * @typeparam To  Converted input value type.\n */\nexport type InConverter<From, To> =\n    | InConverter.Conversion<From, To>\n    | InConverter.Factory<From, To>;\n\nexport namespace InConverter {\n\n  /**\n   * Input control conversion factory signature. Either aspect-only, or value one.\n   *\n   * @typeparam From  Original input value type.\n   * @typeparam To  Converted input value type.\n   */\n  export type Factory<From, To> = (\n      this: void,\n      from: InControl<From>,\n      to: InControl<To>,\n  ) => Conversion<From, To>;\n\n  /**\n   * Input control conversion. Either aspect-only, or full one.\n   *\n   * @typeparam From  Original input value type.\n   * @typeparam To  Converted input value type.\n   */\n  export type Conversion<From, To> =\n      | InConverter.Value.Conversion<From, To>\n      | InConverter.Aspect.Conversion<To>;\n\n  /**\n   * Input control value converter.\n   *\n   * Either a {@link InConverter.Value.Conversion control value conversion}, or a {@link InConverter.Value.Factory\n   * value conversion factory}.\n   *\n   * @typeparam From  Original input value type.\n   * @typeparam To  Converted input value type.\n   */\n  export type Value<From, To> =\n      | InConverter.Value.Factory<From, To>\n      | InConverter.Value.Conversion<From, To>;\n\n  /**\n   * Input control aspect converter.\n   *\n   * Either an {@link InConverter.Aspect.Conversion control aspect conversion}, or {@link InConverter.Aspect.Factory\n   * aspect conversion factory}.\n   *\n   * @typeparam From  Original input value type.\n   * @typeparam To  Converted input value type.\n   */\n  export type Aspect<From, To = From> =\n      | InConverter.Aspect.Conversion<To>\n      | InConverter.Aspect.Factory<From, To>;\n\n}\n\nexport namespace InConverter.Value {\n\n  /**\n   * Input control value conversion factory signature.\n   *\n   * Called by [[InControl.convert]] to construct a {@link Conversion control conversion}.\n   *\n   * Should not access converted control value as the one does not exist at calling time.\n   *\n   * @typeparam From  Original input value type.\n   * @typeparam To  Converted input value type.\n   */\n  export type Factory<From, To> =\n  /**\n   * @param from  Original input control.\n   * @param to  Converted input control.\n   *\n   * @returns Control conversion.\n   */\n      (\n          this: void,\n          from: InControl<From>,\n          to: InControl<To>,\n      ) => Conversion<From, To>;\n\n  /**\n   * Input control value conversion.\n   *\n   * @typeparam From  Original input value type.\n   * @typeparam To  Converted input value type.\n   */\n  export interface Conversion<From, To> {\n\n    /**\n     * Applies the given aspect to converted control in a custom way.\n     *\n     * @typeparam Instance  Aspect instance type.\n     * @typeparam Kind  Aspect application kind.\n     * @param aspect  An aspect to apply.\n     *\n     * @returns Either applied aspect instance or `undefined` to apply the aspect in standard way (i.e. by converting\n     * it from corresponding aspect of original control).\n     */\n    applyAspect?<Instance, Kind extends InAspect.Application.Kind>(\n        aspect: InAspect<Instance, Kind>,\n    ): InAspect.Application.Result<Instance, To, Kind> | undefined;\n\n    /**\n     * Converts original value.\n     *\n     * @param value  Original value to convert.\n     *\n     * @returns New value of converted control.\n     */\n    set(value: From): To;\n\n    /**\n     * Restores original control value by converted one.\n     *\n     * @param value  A converted value to restore the original one by.\n     *\n     * @returns New value of original control.\n     */\n    get(value: To): From;\n\n  }\n\n}\n\nexport namespace InConverter.Aspect {\n\n  /**\n   * Input control aspect conversion factory signature.\n   *\n   * Called by [[InControl.convert]] to construct an {@link Conversion control aspect conversion}.\n   *\n   * Should not access converted control value as the one does not exist at calling time.\n   *\n   * @typeparam From  Original input value type.\n   * @typeparam To  Converted input value type.\n   */\n  export type Factory<From, To = From> = (\n      this: void,\n      from: InControl<From>,\n      to: InControl<To>,\n  ) => Conversion<To>;\n\n  /**\n   * Input control aspect conversion.\n   *\n   * @typeparam Value  Input value type.\n   */\n  export interface Conversion<Value> {\n\n    /**\n     * Applies the given aspect to converted control in a custom way.\n     *\n     * @typeparam Instance  Aspect instance type.\n     * @typeparam Kind  Aspect application kind.\n     * @param aspect  An aspect to apply.\n     *\n     * @returns Either applied aspect instance or `undefined` to apply the aspect in standard way (i.e. by converting\n     * it from corresponding aspect of original control).\n     */\n    applyAspect<Instance, Kind extends InAspect.Application.Kind>(\n        aspect: InAspect<Instance, Kind>,\n    ): InAspect.Application.Result<Instance, Value, Kind> | undefined;\n\n  }\n\n}\n\n/**\n * Creates converter that combines input aspect converters.\n *\n * @typeparam Value  Input value type.\n * @param converters  Input control aspect converters.\n *\n * @returns Input control aspect conversion factory.\n */\nexport function intoConvertedBy<Value>(\n    ...converters: InConverter.Aspect<Value, Value>[]\n): InConverter.Aspect.Factory<Value, Value>;\n\n/**\n * Creates converter that combines input value converter with aspect converters.\n *\n * @category Converter\n * @typeparam From  Original input value type.\n * @typeparam To  Converted input value type.\n * @param converter  Input control converter.\n * @param converters  Additional input control aspect converters.\n *\n * @returns Input control value conversion factory.\n */\nexport function intoConvertedBy<From, To>(\n    converter: InConverter.Value<From, To>,\n    ...converters: InConverter.Aspect<From, To>[]\n): InConverter.Value.Factory<From, To>;\n\n/**\n * Creates converter that combines any input control converter with aspect converters.\n *\n * @category Converter\n * @typeparam From  Original input value type.\n * @typeparam To  Converted input value type.\n * @param converter  Input control converter.\n * @param converters  Additional input control aspect converters.\n *\n * @returns Input control conversion factory.\n */\nexport function intoConvertedBy<From, To>(\n    converter?: InConverter<From, To>,\n    ...converters: InConverter.Aspect<From, To>[]\n): InConverter.Factory<From, To>;\n\nexport function intoConvertedBy<From, To>(\n    valueOrAspectConverter?: InConverter<From, To> | InConverter.Aspect<From, To>,\n    ...converters: InConverter.Aspect<From, To>[]\n): InConverter.Factory<From, To> {\n\n  type AspectApplicator = <Instance, Kind extends InAspect.Application.Kind>(\n      aspect: InAspect<Instance, Kind>,\n  ) => InAspect.Application.Result<Instance, To, Kind> | undefined;\n\n  if (!valueOrAspectConverter) {\n    return noopInConverter;\n  }\n\n  const converter = inConverter(valueOrAspectConverter);\n\n  if (!converters.length) {\n    return converter;\n  }\n\n  const aspectConverters = mapIt<InConverter.Aspect<From, To>, InConverter.Aspect.Factory<From, To>>(\n      converters,\n      inConverter,\n  );\n\n  return (\n      from,\n      to,\n  ): InConverter.Conversion<From, To> => {\n\n    const conversion = converter(from, to);\n    const conversions = flatMapIt<InConverter.Conversion<From, To>>([\n        [conversion],\n        filterIt<InConverter.Aspect.Conversion<To> | undefined, InConverter.Aspect.Conversion<To>>(\n            mapIt(\n                aspectConverters,\n                acf => acf(from, to),\n            ),\n            isPresent,\n        ),\n    ]);\n\n\n    const applyAspect: AspectApplicator = itsReduction(\n        conversions,\n        (prev: AspectApplicator, cv: InConverter.Conversion<From, To>) => cv.applyAspect\n            ? (aspect => prev(aspect) || cv.applyAspect!(aspect))\n            : prev,\n        noop,\n    );\n\n    if (/*#__INLINE__*/ isInAspectConversion(conversion)) {\n      return {\n        applyAspect,\n      };\n    }\n\n    return {\n      set: conversion.set.bind(conversion),\n      get: conversion.get.bind(conversion),\n      applyAspect,\n    };\n  };\n}\n\n/**\n * Creates converter that combines input aspect converters.\n *\n * @category Converter\n * @typeparam Value  Input value type.\n * @param aspects  Input aspect converter(s) to combine.\n *\n * @returns Input aspect conversion factory.\n */\nexport function intoConvertedAspects<Value>(\n    aspects?: InConverter.Aspect<Value> | readonly InConverter.Aspect<Value>[],\n): InConverter.Aspect.Factory<Value> {\n  return aspects\n      ? ((/*#__INLINE__*/ isArray(aspects)) ? intoConvertedBy(...aspects) : intoConvertedBy(aspects))\n      : intoConvertedBy<Value>();\n}\n\nfunction isArray<T>(value: T | readonly T[] | undefined): value is readonly T[] {\n  return Array.isArray(value);\n}\n\n/**\n * @internal\n */\nconst noopInConversion: InConverter.Aspect.Conversion<any> = {\n  applyAspect(): undefined {\n    return;\n  },\n};\n\n/**\n * @internal\n */\nfunction noopInConverter(): InConverter.Aspect.Conversion<any> {\n  return noopInConversion;\n}\n\n/**\n * Checks whether the given input control converter converts aspect only.\n *\n * @category Converter\n * @param conversion  Input control conversion to check.\n *\n * @returns `false` if the given conversion has a {@link InConverter.Value.Conversion.set set} method,\n * or `true` if there is no one.\n */\nexport function isInAspectConversion<From, To>(\n    conversion: InConverter.Conversion<From, To>,\n): conversion is InConverter.Aspect.Conversion<To> {\n  return !(conversion as any).set;\n}\n\n/**\n * @internal\n */\nfunction inConverter<From, To>(\n    converter: InConverter.Value<From, To>,\n): InConverter.Value.Factory<From, To>;\n\n/**\n * @internal\n */\nfunction inConverter<From, To>(\n    converter: InConverter.Aspect<From, To>,\n): InConverter.Aspect.Factory<From, To>;\n\n/**\n * @internal\n */\nfunction inConverter<From, To>(\n    converter: InConverter<From, To>,\n): InConverter.Factory<From, To>;\n\nfunction inConverter<From, To>(\n    converter: InConverter<From, To> | InConverter.Aspect<From, To>,\n): InConverter.Factory<From, To> | InConverter.Aspect.Factory<From, To> {\n  return typeof converter === 'function' ? converter : valueProvider<any>(converter);\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/input-aspects\n */\nimport { asis, noop } from '@proc7ts/call-thru';\nimport {\n  EventEmitter,\n  EventReceiver,\n  eventSupply,\n  EventSupply,\n  EventSupply__symbol,\n  eventSupplyOf,\n  OnEvent,\n  trackValue,\n  ValueTracker,\n} from '@proc7ts/fun-events';\nimport { InAspect, InAspect__symbol } from './aspect';\nimport { InConverter, intoConvertedBy, isInAspectConversion } from './converter';\n\n/**\n * User input control.\n *\n * Maintains input value and various aspects of the user input, such as input focus, validity, etc.\n *\n * @category Control\n * @typeparam Value  Input value type.\n */\nexport abstract class InControl<Value> extends ValueTracker<Value> {\n\n  /**\n   * @internal\n   */\n  private readonly _aspects = new Map<InAspect<any, any>, InAspect.Applied<any, any>>();\n\n  /**\n   * Input value.\n   */\n  abstract it: Value;\n\n  /**\n   * This control's input supply.\n   *\n   * Releases all control resources when cut off.\n   *\n   * Each control has its own supply. An input supply of converted control depends on the input supply of control it\n   * is converted from.\n   *\n   * After this supply cut off the control should no longer be used.\n   */\n  abstract get [EventSupply__symbol](): EventSupply;\n\n  /**\n   * Retrieves an aspect instance applied to this control.\n   *\n   * If the given `aspect` is not applied yet, then applies it first.\n   *\n   * @typeparam Instance  Aspect instance type.\n   * @typeparam Kind  Aspect application kind.\n   * @param aspectKey  A key of aspect to apply to this control.\n   *\n   * @returns An applied aspect instance.\n   */\n  aspect<Instance, Kind extends InAspect.Application.Kind>(\n      aspectKey: InAspect.Key<Instance, Kind>,\n  ): InAspect.Application.Instance<Instance, Value, Kind> {\n    return this._aspect(aspectKey[InAspect__symbol]).instance;\n  }\n\n  /**\n   * Performs additional setup of this control.\n   *\n   * @param setup  A function that accepts this control as its only parameter to configure it.\n   *\n   * @returns `this` control instance.\n   */\n  setup(setup: (this: void, control: this) => void): this;\n\n  /**\n   * Performs additional setup of this control's aspect.\n   *\n   * @typeparam Instance  Aspect instance type.\n   * @typeparam Kind  Aspect application kind.\n   * @param aspectKey  A key of aspect to set up.\n   * @param setup  A function that accepts the aspect and this control as parameters to configure them.\n   *\n   * @returns `this` control instance.\n   */\n  setup<Instance, Kind extends InAspect.Application.Kind>(\n      aspectKey: InAspect.Key<Instance, Kind>,\n      setup?: (this: void, aspect: InAspect.Application.Instance<Instance, Value, Kind>, control: this) => void,\n  ): this;\n\n  setup<Instance, Kind extends InAspect.Application.Kind>(\n      aspectKeyOrSetup: InAspect.Key<Instance, Kind> | ((this: void, control: this) => void),\n      aspectSetup: (\n          this: void,\n          aspect: InAspect.Application.Instance<Instance, Value, Kind>,\n          control: this,\n      ) => void = noop,\n  ): this {\n    if (isAspectKey(aspectKeyOrSetup)) {\n      aspectSetup(this.aspect(aspectKeyOrSetup), this);\n    } else {\n      aspectKeyOrSetup(this);\n    }\n    return this;\n  }\n\n  /**\n   * Converts this control to another one without changing its value type.\n   *\n   * The converted aspect may have another value and input aspects.\n   *\n   * @typeparam To  Converted input value type.\n   * @param by  Input control aspect converters.\n   *\n   * @returns Converted control.\n   */\n  convert(\n      ...by: InConverter.Aspect<Value, Value>[]\n  ): InControl<Value>;\n\n  /**\n   * Converts this control to another one.\n   *\n   * The converted aspect may have another value and input aspects.\n   *\n   * @typeparam To  Converted input value type.\n   * @param by  Input control converter.\n   * @param and  Additional input control aspect converters.\n   *\n   * @returns Converted control.\n   */\n  convert<To>(\n      by: InConverter<Value, To>,\n      ...and: InConverter.Aspect<Value, To>[]\n  ): InControl<To>;\n\n  convert<To>(\n      by?: InConverter<Value, To>,\n      ...and: InConverter.Aspect<Value, To>[]\n  ): InControl<Value> | InControl<To> {\n    return new InConverted(this, intoConvertedBy(by, ...and));\n  }\n\n  /**\n   * @internal\n   */\n  _aspect<Instance, Kind extends InAspect.Application.Kind>(\n      aspect: InAspect<Instance, Kind>,\n  ): InAspect.Application.Result<Instance, Value, Kind> {\n\n    const existing = this._aspects.get(aspect);\n\n    if (existing) {\n      return existing as InAspect.Application.Result<Instance, Value, Kind>;\n    }\n\n    const applied = this._applyAspect(aspect) || aspect.applyTo(this);\n\n    this._aspects.set(aspect, applied);\n\n    return applied as InAspect.Application.Result<Instance, Value, Kind>;\n  }\n\n  /**\n   * Applies the given aspect to this control in a custom way.\n   *\n   * @typeparam Instance  Aspect instance type.\n   * @typeparam Kind  Aspect application kind.\n   * @param _aspect  An aspect to apply.\n   *\n   * @returns Either applied aspect instance or `undefined` to apply the aspect in standard way (i.e. using\n   * `InAspect.applyTo()` method).\n   */\n  protected _applyAspect<Instance, Kind extends InAspect.Application.Kind>(\n      _aspect: InAspect<Instance, Kind>,\n  ): InAspect.Application.Result<Instance, Value, Kind> | undefined {\n    return;\n  }\n\n}\n\n/**\n * @internal\n */\nfunction isAspectKey<Instance, Kind extends InAspect.Application.Kind>(\n    value: any,\n): value is InAspect.Key<Instance, Kind> {\n  return InAspect__symbol in value;\n}\n\nexport namespace InControl {\n\n  /**\n   * A value type of the given input control type.\n   *\n   * @typeparam Control  Input control type.\n   */\n  export type ValueType<Control extends InControl<any>> = Control extends InControl<infer Value> ? Value : never;\n\n}\n\n/**\n * @internal\n */\nclass InConverted<From, To> extends InControl<To> {\n\n  private readonly _supply: EventSupply;\n  private readonly _on = new EventEmitter<[To, To]>();\n  private readonly _it: ValueTracker<[To, number]>;\n  protected readonly _applyAspect: <Instance, Kind extends InAspect.Application.Kind>(\n      this: this,\n      aspect: InAspect<Instance, Kind>,\n  ) => InAspect.Application.Result<Instance, To, Kind> | undefined;\n\n  constructor(src: InControl<From>, by: InConverter.Factory<From, To>) {\n    super();\n    this._supply = eventSupply().needs(src);\n\n    let lastRev = 0;\n    let backward: From | undefined;\n\n    const conversion = by(src, this);\n    let set: (value: From) => To;\n    let get: (value: To) => From;\n    let convertAspect: <Instance, Kind extends InAspect.Application.Kind>(\n        aspect: InAspect<Instance, Kind>,\n    ) => InAspect.Application.Result<Instance, To, Kind> | undefined;\n\n    if (isInAspectConversion(conversion)) {\n      set = asis as (value: From) => To;\n      get = asis as (value: To) => From;\n      convertAspect = <Instance, Kind extends InAspect.Application.Kind>(aspect: InAspect<Instance, Kind>) => {\n\n        const fallback: InAspect.Applied<any, any> = src._aspect(aspect);\n\n        return fallback.attachTo ? fallback.attachTo(this) : fallback.convertTo(this);\n      };\n    } else {\n      set = conversion.set;\n      get = conversion.get;\n      convertAspect = <Instance, Kind extends InAspect.Application.Kind>(aspect: InAspect<Instance, Kind>) => {\n\n        const fallback: InAspect.Applied<any, any> = src._aspect(aspect);\n\n        return fallback.convertTo(this);\n      };\n    }\n\n    this._applyAspect = aspect => conversion.applyAspect?.(aspect) || convertAspect(aspect);\n    this._it = trackValue([set(src.it), 0]);\n    eventSupplyOf(this._it).needs(this._supply);\n    this._it.on(([newValue], [oldValue]) => {\n      if (newValue !== oldValue) {\n        this._on.send(newValue, oldValue);\n      }\n    }).cuts(this._on);\n    src.on(value => {\n      if (value !== backward) {\n        this._it.it = [set(value), ++lastRev];\n      }\n    }).cuts(this);\n    this._it.on(([value, rev]) => {\n      if (rev !== lastRev) {\n        lastRev = rev;\n        backward = get(value);\n        try {\n          src.it = backward;\n        } finally {\n          backward = undefined;\n        }\n      }\n    });\n  }\n\n  get [EventSupply__symbol](): EventSupply {\n    return this._supply;\n  }\n\n  get it(): To {\n    return this._it.it[0];\n  }\n\n  set it(value: To) {\n\n    const [prevValue, prevRev] = this._it.it;\n\n    if (value !== prevValue) {\n      this._it.it = [value, prevRev + 1];\n    }\n  }\n\n  on(): OnEvent<[To, To]>;\n  on(receiver: EventReceiver<[To, To]>): EventSupply;\n  on(receiver?: EventReceiver<[To, To]>): OnEvent<[To, To]> | EventSupply {\n    return (this.on = this._on.on().F)(receiver);\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/input-aspects\n */\nimport { flatMapIt } from '@proc7ts/a-iterable';\nimport { nextArgs, NextCall, nextSkip, valuesProvider } from '@proc7ts/call-thru';\nimport {\n  afterAll,\n  afterEach,\n  AfterEvent,\n  AfterEvent__symbol,\n  afterSent,\n  afterSupplied,\n  EventEmitter,\n  EventKeeper,\n  EventReceiver,\n  EventSender,\n  eventSupply,\n  EventSupply,\n  EventSupply__symbol,\n  eventSupplyOf,\n  isEventKeeper,\n  nextAfterEvent,\n  OnEvent,\n  OnEvent__symbol,\n  OnEventCallChain,\n  trackValue,\n  ValueTracker,\n} from '@proc7ts/fun-events';\nimport { InAspect, InAspect__symbol } from '../aspect';\nimport { inAspectSameOrBuild } from '../aspect.impl';\nimport { InParents } from '../containers';\nimport { InParentsAspect } from '../containers/parents.aspect.impl';\nimport { InControl } from '../control';\nimport { InElement } from '../element.control';\n\n/**\n * @internal\n */\nconst InMode__aspect: InAspect<InMode> = {\n\n  applyTo<Value>(control: InControl<Value>): InAspect.Applied<Value, InMode> {\n    return inAspectSameOrBuild(\n        control,\n        InMode,\n        ctrl => new InControlMode(ctrl),\n    );\n  },\n\n};\n\n/**\n * Input mode aspect of control.\n *\n * Control can be either enabled, disabled, or readonly.\n *\n * Each control maintains its own state, while nested controls respect container ones. I.e. when container is disabled\n * all nested ones are also disabled. When container is readonly, all nested ones are also readonly, unless explicitly\n * disabled.\n *\n * When applied to input element this aspect maintains its `disabled` and `readonly` attributes (not properties!).\n *\n * Implements `EventSender` interface by sending new and old mode values on each update.\n *\n * Implements `EventKeeper` interface by sending actual mode value.\n *\n * @category Aspect\n */\nexport abstract class InMode implements EventSender<[InMode.Value, InMode.Value]>, EventKeeper<[InMode.Value]> {\n\n  static get [InAspect__symbol](): InAspect<InMode> {\n    return InMode__aspect;\n  }\n\n  /**\n   * Creates an `OnEvent` sender of input mode updates.\n   *\n   * Sends a new mode value along with old one as second parameter.\n   *\n   * The `[OnEvent__symbol]` property is an alias of this one.\n   *\n   * @returns `OnEvent` sender of input mode updates.\n   */\n  abstract on(): OnEvent<[InMode.Value, InMode.Value]>;\n\n  /**\n   * Starts sending input mode updates to the given `receiver`\n   *\n   * Sends a new mode value along with old one as second parameter.\n   *\n   * @param receiver  Target input mode updates receiver.\n   *\n   * @returns Input mode updates supply.\n   */\n  abstract on(receiver: EventReceiver<[InMode.Value, InMode.Value]>): EventSupply;\n\n  [OnEvent__symbol](): OnEvent<[InMode.Value, InMode.Value]> {\n    return this.on();\n  }\n\n  /**\n   * Builds an `AfterEvent` keeper of input mode.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   *\n   * @returns `AfterEvent` keeper of input mode.\n   */\n  abstract read(): AfterEvent<[InMode.Value]>;\n\n  /**\n   * Starts sending input mode and updates to the given `receiver`.\n   *\n   * @param receiver  Target receiver of input mode.\n   *\n   * @returns Input mode supply.\n   */\n  abstract read(receiver: EventReceiver<[InMode.Value]>): EventSupply;\n\n  [AfterEvent__symbol](): AfterEvent<[InMode.Value]> {\n    return this.read();\n  }\n\n  /**\n   * Own input mode tracker.\n   */\n  abstract readonly own: ValueTracker<InMode.Value>;\n\n  /**\n   * Checks whether control in the given `mode` has data to submit.\n   *\n   * @param mode  Input control mode to check.\n   *\n   * @returns `true` if control in the given `mode` has data to submit, or `false` otherwise.\n   */\n  static hasData(mode: InMode.Value): boolean {\n    return mode !== 'off' && mode[0] !== '-';\n  }\n\n  /**\n   * Derives input mode from another `source`.\n   *\n   * If the `source` mode is disabled, this one would be disabled too. If the `source` mode is read-only, then this one\n   * would be read-only, unless disabled already.\n   *\n   * @param source  A source to derive input mode from.\n   *\n   * @returns Derived input mode supply. Disables `source` mode derivation once cut off.\n   */\n  abstract derive(source: InMode.Source): EventSupply;\n\n  /**\n   * Unregisters all receivers.\n   *\n   * @param reason  Optional reason.\n   *\n   * @returns `this` instance.\n   */\n  done(reason?: any): this {\n    this.own.done(reason);\n    return this;\n  }\n\n}\n\nexport namespace InMode {\n\n  /**\n   * Possible input control mode value:\n   *\n   * - `on` when control is writable. This is the default.\n   * - `ro` when control is read-only. Such control can not be edited, but still can be submitted.\n   * - `off` when control is disabled. Such control is not submitted.\n   * - `-on` when control is writable, but not submitted.\n   * - `-ro` when control is read-only, but not submitted.\n   */\n  export type Value = 'on' | 'ro' | 'off' | '-on' | '-ro';\n\n  /**\n   * A source of input mode.\n   *\n   * This is either an event keeper of {@link Value mode value}, or a function returning one and accepting target input\n   * control as the only parameter.\n   */\n  export type Source =\n      | EventKeeper<[InMode.Value]>\n      | ((this: void, control: InControl<any>) => EventKeeper<[InMode.Value]>);\n\n}\n\n/**\n * @internal\n */\nclass OwnModeTracker extends ValueTracker<InMode.Value> {\n\n  private readonly _tracker: ValueTracker<InMode.Value>;\n\n  constructor(element: InElement<any> | null) {\n    super();\n    this._tracker = trackValue(element ? initialInMode(element.element) : 'on');\n  }\n\n  get [EventSupply__symbol](): EventSupply {\n    return eventSupplyOf(this._tracker);\n  }\n\n  get it(): InMode.Value {\n    return this._tracker.it;\n  }\n\n  set it(value: InMode.Value) {\n    switch (value) {\n      case 'off':\n      case 'ro':\n      case '-on':\n      case '-ro':\n        break;\n      default:\n        value = 'on'; // Correct the value.\n    }\n\n    this._tracker.it = value;\n  }\n\n  on(): OnEvent<[InMode.Value, InMode.Value]>;\n  on(receiver: EventReceiver<[InMode.Value, InMode.Value]>): EventSupply;\n  on(receiver?: EventReceiver<[InMode.Value, InMode.Value]>): OnEvent<[InMode.Value, InMode.Value]> | EventSupply {\n    return (this.on = this._tracker.on().F)(receiver);\n  }\n\n}\n\n/**\n * @internal\n */\nclass DerivedInModes {\n\n  readonly read: AfterEvent<[InMode.Value]>;\n  private readonly _all = new Set<AfterEvent<[InMode.Value]>>();\n  private readonly _on = new EventEmitter<[]>();\n\n  constructor() {\n\n    const sources: AfterEvent<[Set<AfterEvent<[InMode.Value]>>]> = afterSent(\n        this._on.on().thru(() => this._all),\n        valuesProvider(this._all),\n    );\n\n    this.read = sources.keepThru(\n        (set: Set<AfterEvent<[InMode.Value]>>) => nextAfterEvent(afterEach(...set)),\n        mergeInModes,\n    );\n  }\n\n  add(source: AfterEvent<[InMode.Value]>): EventSupply {\n\n    const supply = eventSupply(() => {\n      this._all.delete(source);\n      this._on.send();\n    });\n\n    this._all.add(source);\n    this._on.send();\n\n    return supply;\n  }\n\n}\n\n/**\n * @internal\n */\nclass InControlMode extends InMode {\n\n  readonly own: OwnModeTracker;\n  private readonly _derived = new DerivedInModes();\n\n  constructor(private readonly _control: InControl<any>) {\n    super();\n\n    const element = _control.aspect(InElement);\n\n    this.own = new OwnModeTracker(element);\n    eventSupplyOf(this.own).needs(_control);\n    this.derive(_control.aspect(InParentsAspect).read().keepThru_(parentsInMode));\n    if (element) {\n      this.read(value => applyInMode(element.element, value));\n    }\n  }\n\n  read(): AfterEvent<[InMode.Value]>;\n  read(receiver: EventReceiver<[InMode.Value]>): EventSupply;\n  read(receiver?: EventReceiver<[InMode.Value]>): AfterEvent<[InMode.Value]> | EventSupply {\n\n    let last: InMode.Value = 'on';\n\n    return (this.read = afterSent<[InMode.Value]>(\n            afterAll({\n              derived: this._derived.read,\n              own: this.own,\n            }).thru(\n                ({\n                  derived: [derived],\n                  own: [own],\n                }) => {\n\n                  let next: InMode.Value;\n\n                  if (own === 'off' || derived === 'off') {\n                    next = 'off';\n                  } else {\n\n                    let off = false;\n\n                    if (own[0] === '-') {\n                      off = true;\n                      own = own.substring(1) as InMode.Value;\n                    }\n                    if (derived[0] === '-') {\n                      off = true;\n                      derived = derived.substring(1) as InMode.Value;\n                    }\n                    next = derived === 'ro' ? 'ro' : own;\n                    if (off) {\n                      next = '-' + next as InMode.Value;\n                    }\n                  }\n\n                  return last === next ? nextSkip() : nextArgs(last = next);\n                },\n            ),\n            valuesProvider<[InMode.Value]>(last),\n        ).F\n    )(receiver);\n  }\n\n  on(): OnEvent<[InMode.Value, InMode.Value]>;\n  on(receiver: EventReceiver<[InMode.Value, InMode.Value]>): EventSupply;\n  on(receiver?: EventReceiver<[InMode.Value, InMode.Value]>): OnEvent<[InMode.Value, InMode.Value]> | EventSupply {\n    let lastUpdate: InMode.Value = 'on';\n\n    return (this.on = this.read().thru(value => {\n\n      const old = lastUpdate;\n\n      return old === value ? nextSkip() : nextArgs(lastUpdate = value, old);\n    }).F)(receiver);\n  }\n\n  derive(source: InMode.Source): EventSupply {\n    return this._derived.add(\n        afterSupplied(isEventKeeper(source) ? source : source(this._control))\n            .tillOff(this._control),\n    ).needs(this._control);\n  }\n\n}\n\n/**\n * @internal\n */\nfunction initialInMode(element: HTMLElement): InMode.Value {\n  return element.getAttribute('disabled') != null\n      ? 'off' : (\n          element.getAttribute('readonly') != null ? 'ro' : 'on'\n      );\n}\n\n/**\n * @internal\n */\nfunction applyInMode(element: HTMLElement, value: InMode.Value): void {\n  switch (value) {\n    case 'off':\n      element.setAttribute('disabled', '');\n      break;\n    case 'ro':\n    case '-ro':\n      // Workaround of https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/12087679/\n      element.setAttribute('disabled', '');\n      element.removeAttribute('disabled');\n      element.setAttribute('readonly', '');\n      break;\n    default:\n      // Workaround of https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/12087679/\n      element.setAttribute('disabled', '');\n      element.removeAttribute('disabled');\n      // Workaround of https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/12087679/\n      element.setAttribute('readonly', '');\n      element.removeAttribute('readonly');\n  }\n}\n\n/**\n * @internal\n */\nfunction parentsInMode(parents: InParents.All): NextCall<OnEventCallChain, [InMode.Value]> {\n\n  const parentList = Array.from(parents);\n\n  if (!parentList.length) {\n    return nextArgs('on');\n  }\n\n  const parentModes = parentList.map(({ parent }) => parent.aspect(InMode));\n\n  return nextAfterEvent(afterEach(...parentModes).keepThru_(mergeInModes));\n}\n\nfunction mergeInModes(...modes: [InMode.Value][]): InMode.Value {\n  return inModeValue(...flatMapIt<InMode.Value>(modes));\n}\n\n/**\n * Merges multiple input mode values.\n *\n * @category Aspect\n * @param modes  Input mode values to merge.\n *\n * @returns Merged input mode value.\n */\nexport function inModeValue(...modes: InMode.Value[]): InMode.Value {\n\n  let ro = false;\n  let off = false;\n\n  for (const mode of modes) {\n    switch (mode) {\n      case 'off':\n        return 'off';\n      case 'ro':\n        ro = true;\n        break;\n      case '-on':\n        off = true;\n        break;\n      case '-ro':\n        off = true;\n        ro = true;\n        break;\n    }\n  }\n\n  return off ? (ro ? '-ro' : '-on') : (ro ? 'ro' : 'on');\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/input-aspects\n */\nimport { itsEach, itsIterable, mapIt, overEntries } from '@proc7ts/a-iterable';\nimport { nextArg, nextArgs, NextCall, noop } from '@proc7ts/call-thru';\nimport {\n  afterAll,\n  AfterEvent,\n  AfterEvent__symbol,\n  afterSent,\n  EventEmitter,\n  EventKeeper,\n  EventReceiver,\n  EventSender,\n  eventSupply,\n  EventSupply,\n  EventSupply__symbol,\n  eventSupplyOf,\n  nextAfterEvent,\n  noEventSupply,\n  OnEvent,\n  OnEvent__symbol,\n  OnEventCallChain,\n  trackValue,\n  ValueTracker,\n} from '@proc7ts/fun-events';\nimport { InAspect, InAspect__symbol } from '../aspect';\nimport { inAspectSameOrNull } from '../aspect.impl';\nimport { InControl } from '../control';\nimport { InConverter } from '../converter';\nimport { InData, InMode } from '../data';\nimport { InContainer, InContainerControls } from './container.control';\nimport { InParents } from './parents.aspect';\n\n/**\n * @internal\n */\nconst InGroup__aspect: InAspect<InGroup<any> | null, 'group'> = {\n  applyTo(control) {\n    return inAspectSameOrNull(control, InGroup);\n  },\n};\n\n/**\n * A group of input controls.\n *\n * Nested controls are identified by keys and can be added and removed via `controls` property.\n *\n * Group value (called model) is an object formed by nested control values. The model property value is the one of the\n * control with the same key, if present. When model is updated corresponding controls are also updated.\n *\n * Group is available as an aspect of itself and converted controls with the same value.\n *\n * @category Control\n * @typeparam Model  Group model type, i.e. its value type.\n */\nexport abstract class InGroup<Model extends object> extends InContainer<Model> {\n\n  static get [InAspect__symbol](): InAspect<InGroup<any> | null, 'group'> {\n    return InGroup__aspect;\n  }\n\n  /**\n   * Input group controls.\n   */\n  abstract readonly controls: InGroupControls<Model>;\n\n  protected _applyAspect<Instance, Kind extends InAspect.Application.Kind>(\n      aspect: InAspect<any, any>,\n  ): InAspect.Application.Result<Instance, Model, Kind> | undefined {\n    return aspect === InGroup__aspect\n        ? inAspectSameOrNull(this, InGroup, this) as InAspect.Application.Result<Instance, Model, Kind>\n        : super._applyAspect(aspect);\n  }\n\n}\n\nexport namespace InGroup {\n\n  /**\n   * Input group controls.\n   *\n   * This is a read-only object containing an input control per each model property under the same key.\n   *\n   * @typeparam Model  Group model type, i.e. its value type.\n   */\n  export type Controls<Model> = {\n    readonly [K in keyof Model]?: InControl<Model[K]>;\n  };\n\n  /**\n   * Input controls group entry.\n   *\n   * This is a tuple containing model key and corresponding control.\n   *\n   * @typeparam Model  Group model type, i.e. its value type.\n   */\n  export type Entry<Model, K extends keyof Model = any> = readonly [K, InControl<Model[K]>];\n\n  /**\n   * A snapshot of input control group controls.\n   *\n   * @typeparam Model  Group model type, i.e. its value type.\n   */\n  export interface Snapshot<Model> extends InContainer.Snapshot {\n\n    entries(): IterableIterator<Entry<Model>>;\n\n    /**\n     * Returns input control with the given key, if present.\n     *\n     * @param key  Control key, i.e. corresponding model property key.\n     *\n     * @returns Target control, or `undefined` if there is no control set for this key.\n     */\n    get<K extends keyof Model>(key: K): InGroup.Controls<Model>[K] | undefined;\n\n  }\n\n}\n\n/**\n * Input group controls.\n *\n * @category Control\n * @typeparam Model  Group model type, i.e. its value type.\n */\nexport abstract class InGroupControls<Model>\n    extends InContainerControls\n    implements EventSender<[InGroup.Entry<Model>[], InGroup.Entry<Model>[]]>, EventKeeper<[InGroup.Snapshot<Model>]> {\n\n  abstract on(): OnEvent<[InGroup.Entry<Model>[], InGroup.Entry<Model>[]]>;\n  abstract on(receiver: EventReceiver<[InGroup.Entry<Model>[], InGroup.Entry<Model>[]]>): EventSupply;\n\n  abstract read(): AfterEvent<[InGroup.Snapshot<Model>]>;\n  abstract read(receiver: EventReceiver<[InGroup.Snapshot<Model>]>): EventSupply;\n\n  /**\n   * Sets input control with the given key.\n   *\n   * Replaces existing control if already present.\n   *\n   * @param key  A key of input control to set. I.e. corresponding model property key.\n   * @param control  Input control to add, or `undefined` to remove control.\n   *\n   * @returns A supply of just added control that removes it once cut off. A cut off supply when set to `undefined`.\n   */\n  abstract set<K extends keyof Model>(key: K, control: InControl<Model[K]> | undefined): EventSupply;\n\n  /**\n   * Sets multiple input controls at a time.\n   *\n   * @param controls  A map of controls under their keys. A value can be `undefined` to remove corresponding control.\n   *\n   * @returns A supply of just added controls that removes them once cut off.\n   */\n  abstract set(controls: InGroup.Controls<Model>): EventSupply;\n\n  /**\n   * Removes input control with the given key.\n   *\n   * Calling this method is the same as calling `set(key, undefined)`\n   *\n   * @param key  A key of input control to remove. I.e. corresponding model property key.\n   */\n  remove(key: keyof Model): void {\n    this.set(key, undefined);\n  }\n\n  /**\n   * Removes all input controls.\n   */\n  abstract clear(): void;\n\n}\n\nexport interface InGroupControls<Model> {\n\n  [OnEvent__symbol](): OnEvent<[InGroup.Entry<Model>[], InGroup.Entry<Model>[]]>;\n\n  [AfterEvent__symbol](): AfterEvent<[InGroup.Snapshot<Model>]>;\n\n}\n\n/**\n * @internal\n */\ntype InGroupEntry = readonly [InControl<any>, EventSupply]; // When event supply is done the control is unused\n\n/**\n * @internal\n */\nconst inControlReplacedReason = {};\n\n/**\n * @internal\n */\nclass InGroupSnapshot<Model> implements InGroup.Snapshot<Model> {\n\n  constructor(private readonly _map: Map<keyof Model, InGroupEntry>) {\n  }\n\n  get<K extends keyof Model>(key: K): InGroup.Controls<Model>[K] | undefined {\n\n    const entry = this._map.get(key);\n\n    return entry && entry[0] as InGroup.Controls<Model>[K];\n  }\n\n  [Symbol.iterator](): IterableIterator<InControl<any>> {\n    return itsIterable(mapIt(this._map.values(), ([control]) => control));\n  }\n\n  entries(): IterableIterator<InGroup.Entry<Model>> {\n    return itsIterable(mapIt(this._map.entries(), ([key, [control]]) => [key, control]));\n  }\n\n}\n\n/**\n * @internal\n */\nclass InGroupMap<Model extends object> {\n\n  readonly _supply = eventSupply();\n  private _map = new Map<keyof Model, InGroupEntry>();\n  private _shot?: InGroupSnapshot<Model>;\n\n  constructor(private readonly _controls: InGroupControlControls<Model>) {\n  }\n\n  set<K extends keyof Model>(\n      key: K,\n      control: InControl<Model[K]> | undefined,\n      added: [keyof Model, InGroupEntry][],\n      removed: [keyof Model, InGroupEntry][],\n  ): EventSupply {\n\n    const replaced = this._map.get(key);\n    let supply: EventSupply;\n\n    if (control) {\n      supply = eventSupply();\n\n      const entry = this.newEntry(key, control, supply);\n\n      let sendUpdate = true;\n\n      if (replaced) {\n        if (replaced[0] === control) {\n          // Do not send update when replacing control with itself\n          sendUpdate = false;\n        } else {\n          removed.push([key, replaced]);\n        }\n      }\n\n      if (sendUpdate) {\n        this.modify().set(key, entry);\n        added.push([key, entry]);\n      } else {\n        this._map.set(key, entry);\n      }\n    } else {\n      supply = noEventSupply();\n      if (replaced) {\n        removed.push([key, replaced]);\n        this.modify().delete(key);\n      }\n    }\n    if (replaced) {\n      replaced[1].off(inControlReplacedReason);\n    }\n\n    return supply;\n  }\n\n  private newEntry<K extends keyof Model>(\n      key: K,\n      control: InControl<Model[K]>,\n      supply: EventSupply,\n  ): InGroupEntry {\n    return [\n      control,\n      eventSupply(reason => {\n        if (reason !== inControlReplacedReason) {\n          this._controls.remove(key);\n        }\n      })\n          .needs(this._supply)\n          .needs(supply)\n          .whenOff(\n              reason => supply.off(reason === inControlReplacedReason ? undefined : reason),\n          ),\n    ];\n  }\n\n  private modify(): Map<keyof Model, InGroupEntry> {\n    if (this._shot) {\n\n      const map = new Map<keyof Model, InGroupEntry>();\n\n      itsEach(this._map.entries(), ([k, e]) => map.set(k, e));\n      this._shot = undefined;\n      this._map = map;\n    }\n\n    return this._map;\n  }\n\n  snapshot(): InGroup.Snapshot<Model> {\n    return this._shot || (this._shot = new InGroupSnapshot<Model>(this._map));\n  }\n\n  clear(): [keyof Model, InGroupEntry][] {\n\n    const added: [keyof Model, InGroupEntry][] = [];\n    const removed: [keyof Model, InGroupEntry][] = [];\n\n    itsEach(this._map.keys(), key => this.set(key, undefined, added, removed));\n\n    return removed;\n  }\n\n}\n\n/**\n * @internal\n */\nclass InGroupControlControls<Model extends object> extends InGroupControls<Model> {\n\n  private readonly _map: InGroupMap<Model>;\n  private readonly _updates = new EventEmitter<[[keyof Model, InGroupEntry][], [keyof Model, InGroupEntry][]]>();\n\n  constructor(private readonly _group: InGroupControl<Model>) {\n    super();\n\n    const applyModelToControls = (model: Model): void => {\n      this.read().once(snapshot => {\n\n        const withValues = new Set<keyof Model>();\n\n        itsEach(overEntries(model), ([key, value]) => {\n          withValues.add(key);\n\n          const control = snapshot.get(key);\n\n          if (control) {\n            control.it = value;\n          }\n        });\n\n        itsEach(snapshot.entries(), ([key, control]) => {\n          if (!withValues.has(key)) {\n            control.it = undefined!;\n          }\n        });\n      });\n    };\n\n    this._map = new InGroupMap<Model>(this);\n    this._map._supply.needs(_group.read(applyModelToControls));\n  }\n\n  on(): OnEvent<[InGroup.Entry<Model>[], InGroup.Entry<Model>[]]>;\n  on(receiver: EventReceiver<[InGroup.Entry<Model>[], InGroup.Entry<Model>[]]>): EventSupply;\n  on(\n      receiver?: EventReceiver<[InGroup.Entry<Model>[], InGroup.Entry<Model>[]]>,\n  ): OnEvent<[InGroup.Entry<Model>[], InGroup.Entry<Model>[]]> | EventSupply {\n    return (this.on = this._updates.on().thru(\n        (added, removed) => nextArgs(\n            added.map(controlEntryToGroupEntry),\n            removed.map(controlEntryToGroupEntry),\n        ),\n    ).F)(receiver);\n  }\n\n  read(): AfterEvent<[InGroup.Snapshot<Model>]>;\n  read(receiver: EventReceiver<[InGroup.Snapshot<Model>]>): EventSupply;\n  read(receiver?: EventReceiver<[InGroup.Snapshot<Model>]>): AfterEvent<[InGroup.Snapshot<Model>]> | EventSupply {\n    return (this.read = afterSent<[InGroup.Snapshot<Model>]>(\n        this._updates.on().thru(\n            () => this._map.snapshot(),\n        ),\n        () => [this._map.snapshot()],\n    ).F)(receiver);\n  }\n\n  set<K extends keyof Model>(\n      keyOrControls: K | InGroup.Controls<Model>,\n      newControl?: InControl<Model[K]> | undefined,\n  ): EventSupply {\n\n    const group = this._group;\n    const added: [keyof Model, InGroupEntry][] = [];\n    const removed: [keyof Model, InGroupEntry][] = [];\n    let supply: EventSupply;\n\n    if (typeof keyOrControls === 'object') {\n      supply = eventSupply();\n      itsEach(overEntries(keyOrControls), ([key, value]) => {\n        this._map.set(key, value, added, removed).needs(supply);\n      });\n    } else {\n      supply = this._map.set(keyOrControls, newControl, added, removed);\n    }\n    if (added.length || removed.length) {\n      this._updates.send(added, removed);\n      if (added.length) {\n        applyControlsToModel();\n      }\n    }\n\n    return supply;\n\n    function applyControlsToModel(): void {\n\n      let newModel: Model | undefined;\n\n      added.forEach(([key, [control, supply]]) => {\n        control.aspect(InParents)\n            .add({ parent: group })\n            .needs(supply)\n            .cuts(supply);\n\n        const value = control.it;\n\n        if (newModel) {\n          newModel[key] = value;\n        } else {\n\n          const model = group.it;\n\n          if (model[key] !== value) {\n            newModel = { ...model, [key]: value };\n          }\n        }\n      });\n\n      if (newModel) {\n        group.it = newModel;\n      }\n\n      added.forEach(([key, [control, supply]]) => {\n        control.read().tillOff(supply).to(value => {\n          if (group.it[key] !== value) {\n            group.it = {\n              ...group.it,\n              [key]: value,\n            };\n          }\n        }).cuts(supply);\n      });\n    }\n  }\n\n  clear(): void {\n\n    const removed = this._map.clear();\n\n    if (removed.length) {\n      this._updates.send([], removed);\n    }\n  }\n\n}\n\n/**\n * @internal\n */\nfunction controlEntryToGroupEntry<Model extends object>(\n    [key, [control]]: [keyof Model, InGroupEntry],\n): InGroup.Entry<Model> {\n  return [key, control];\n}\n\n/**\n * @internal\n */\nclass InGroupControl<Model extends object> extends InGroup<Model> {\n\n  private readonly _model: ValueTracker<Model>;\n  readonly controls: InGroupControlControls<Model>;\n\n  constructor(\n      model: Model,\n      opts: {\n        readonly aspects?: InConverter.Aspect<Model> | readonly InConverter.Aspect<Model>[];\n      },\n  ) {\n    super(opts);\n    this._model = trackValue(model);\n    this.controls = new InGroupControlControls(this);\n    eventSupplyOf(this).whenOff(() => this.controls.clear());\n  }\n\n  get [EventSupply__symbol](): EventSupply {\n    return eventSupplyOf(this._model);\n  }\n\n  get it(): Model {\n    return this._model.it;\n  }\n\n  set it(value: Model) {\n    this._model.it = value;\n  }\n\n  on(): OnEvent<[Model, Model]>;\n  on(receiver: EventReceiver<[Model, Model]>): EventSupply;\n  on(receiver?: EventReceiver<[Model, Model]>): OnEvent<[Model, Model]> | EventSupply {\n    return (this.on = this._model.on().F)(receiver);\n  }\n\n  protected _applyAspect<Instance, Kind extends InAspect.Application.Kind>(\n      aspect: InAspect<any, any>,\n  ): InAspect.Application.Result<Instance, Model, Kind> | undefined {\n    if (aspect === InData[InAspect__symbol]) {\n      return {\n        instance: inGroupData(this),\n        convertTo: noop,\n      } as InAspect.Application.Result<any, any, any>;\n    }\n    return super._applyAspect(aspect);\n  }\n\n}\n\n/**\n * @internal\n */\nfunction inGroupData<Model extends object>(group: InGroup<Model>): InData<Model> {\n  return afterAll({\n    cs: group.controls,\n    model: group,\n    mode: group.aspect(InMode),\n  }).keepThru_(\n      readInGroupData,\n  );\n}\n\n/**\n * @internal\n */\nfunction readInGroupData<Model extends object>(\n    {\n      cs: [controls],\n      model: [model],\n      mode: [mode],\n    }: {\n      cs: [InGroup.Snapshot<Model>];\n      model: [Model];\n      mode: [InMode.Value];\n    },\n): NextCall<OnEventCallChain, [InData.DataType<Model>?]> {\n  if (!InMode.hasData(mode)) {\n    return nextArgs();\n  }\n\n  const csData: { [key in keyof Model]: InData<any> } = {} as any;\n\n  itsEach(controls.entries(), ([key, control]) => {\n    csData[key as keyof Model] = control.aspect(InData);\n  });\n\n  return nextAfterEvent(afterAll(csData).keepThru(controlsData => {\n\n    const data: Partial<Model> = { ...model };\n\n    itsEach(overEntries(controlsData), ([key, [controlData]]) => {\n      data[key] = controlData;\n    });\n\n    return nextArg(data as InData.DataType<Model>);\n  }));\n}\n\n/**\n * Constructs input controls group.\n *\n * @category Control\n * @typeparam Model  Group model type, i.e. its value type.\n * @param model  Initial model of the group.\n * @param aspects  Input aspects applied by default. These are aspect converters to constructed control\n * from {@link inValueOf same-valued one}.\n *\n * @returns New input controls group.\n */\nexport function inGroup<Model extends object>(\n    model: Model,\n    {\n      aspects,\n    }: {\n      readonly aspects?: InConverter.Aspect<Model> | readonly InConverter.Aspect<Model>[];\n    } = {},\n): InGroup<Model> {\n  return new InGroupControl(model, { aspects });\n}\n\ndeclare module '../aspect' {\n\n  export namespace InAspect.Application {\n\n    export interface Map<OfInstance, OfValue> {\n\n      /**\n       * Input control group application type.\n       */\n      group(): InGroup<OfValue extends object ? OfValue : never> | null;\n\n    }\n\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/input-aspects\n */\nimport { AfterEvent, afterThe } from '@proc7ts/fun-events';\n\n/**\n * @internal\n */\nconst _requireNothing = (/*#__PURE__*/ afterThe<[]>());\n\n/**\n * Input validator that requires nothing.\n *\n * @category Validation\n */\nexport function requireNothing(): AfterEvent<[]> {\n  return _requireNothing;\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/input-aspects\n */\nimport { CallChain, nextArgs, NextCall, valueProvider } from '@proc7ts/call-thru';\nimport { AfterEvent, afterSupplied, EventKeeper, isEventKeeper } from '@proc7ts/fun-events';\nimport { InControl } from '../control';\nimport { InValidation } from './validation.aspect';\n\n/**\n * Input validator.\n *\n * Validator can be added to input validation aspect using `InValidation.by()` method. After that all validation\n * messages it sends are reported by validation aspect. Multiple messages could be sent at a time. These messages\n * replace the previously sent ones. To report the absence of error just send an empty event without messages.\n *\n * This can be one either a validation messages event keeper, a function returning one and accepting input control\n * as its only parameter, or simple validator instance.\n *\n * @category Validation\n * @typeparam Value  Input value type.\n */\nexport type InValidator<Value> =\n    | EventKeeper<InValidation.Message[]>\n    | ((this: void, control: InControl<Value>) => EventKeeper<InValidation.Message[]>)\n    | InValidator.Simple<Value>;\n\nexport namespace InValidator {\n\n  /**\n   * Simple input validator.\n   *\n   * @typeparam Value  Input value type.\n   */\n  export interface Simple<Value> {\n\n    /**\n     * Validates the user input.\n     *\n     * This method is called each time input value changes. The returned messages then reported by input validation\n     * aspect.\n     *\n     * @param control  Input control to validate.\n     *\n     * @returns Either validation message, array of validation messages, or `null`/`unknown` to indicate their absence.\n     */\n    validate(control: InControl<Value>): InValidation.Message | InValidation.Message[] | null | undefined;\n\n  }\n\n}\n\n/**\n * Converts arbitrary input validator to normalized form.\n *\n * @category Validation\n * @typeparam Value  Input value type.\n * @param validator  Validator to convert.\n *\n * @returns A function accepting input control as its only parameter and returning an `AfterEvent` keeper of validation\n * messages.\n */\nexport function inValidator<Value>(\n    validator: InValidator<Value>,\n): (this: void, control: InControl<Value>) => AfterEvent<InValidation.Message[]> {\n  if (isEventKeeper(validator)) {\n    return valueProvider(afterSupplied(validator));\n  }\n  if (typeof validator === 'function') {\n    return control => afterSupplied(validator(control));\n  }\n  return control => control.read().keepThru(simpleInValidator(control, validator));\n}\n\n/**\n * @internal\n */\nfunction simpleInValidator<Value>(\n    control: InControl<Value>,\n    validator: InValidator.Simple<Value>,\n): (value: Value) => NextCall<CallChain, InValidation.Message[]> {\n  return () => {\n\n    const messages = validator.validate(control);\n\n    return messages == null\n        ? nextArgs()\n        : Array.isArray(messages)\n            ? nextArgs(...messages)\n            : nextArgs(messages);\n  };\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/input-aspects\n */\nimport { InControl } from '../control';\nimport { requireNothing } from './require-nothing.validator';\nimport { InValidator } from './validator';\nimport { InValidationMessages } from './validator.impl';\n\n/**\n * Creates input validator that validates using all listed validators.\n *\n * @category Validation\n * @param validators  Validators to validate the input with.\n *\n * @returns Validator that requires all the given `validators`. Or just the given validator if it is the only one given.\n */\nexport function requireAll<Value>(...validators: InValidator<Value>[]): InValidator<Value> {\n\n  const numValidators = validators.length;\n\n  if (numValidators === 1) {\n    return validators[0];\n  }\n  if (!numValidators) {\n    return requireNothing;\n  }\n\n  return (control: InControl<Value>) => {\n\n    const messages = new InValidationMessages(control);\n\n    validators.forEach(validator => messages.from(validator));\n\n    return messages;\n  };\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/input-aspects\n */\nimport { flatMapIt, itsEach, mapIt, overEntries } from '@proc7ts/a-iterable';\nimport { nextArgs, NextCall } from '@proc7ts/call-thru';\nimport {\n  afterEach,\n  AfterEvent,\n  AfterEvent__symbol,\n  afterSupplied,\n  EventKeeper,\n  EventReceiver,\n  EventSupply,\n  nextAfterEvent,\n  OnEventCallChain,\n} from '@proc7ts/fun-events';\nimport { InAspect, InAspect__symbol } from '../aspect';\nimport { inAspectSameOrBuild } from '../aspect.impl';\nimport { InContainer } from '../containers';\nimport { InControl } from '../control';\nimport { requireAll } from './require-all.validator';\nimport { InValidator } from './validator';\nimport { InValidationMessages } from './validator.impl';\n\n/**\n * @internal\n */\nconst InValidation__aspect: InAspect<InValidation<any>, 'validation'> = {\n  applyTo<Value>(control: InControl<Value>) {\n    return inAspectSameOrBuild<Value, InValidation<Value>, 'validation'>(\n        control,\n        InValidation,\n        <V>(ctrl: InControl<V>, origin?: InControl<any>): InValidation<any> => {\n\n          const validation = new InControlValidation<V>(ctrl);\n\n          if (origin) {\n\n            const from = origin.aspect(InValidation);\n\n            validation.by(from.read().keepThru(result => nextArgs(...result.messages())));\n          }\n\n          return validation;\n        },\n    );\n  },\n};\n\n/**\n * Validation aspect of the input.\n *\n * Reports validation messages sent by registered validators. To register validator call a `InValidation.by()` method.\n *\n * Implements an `EventKeeper` interface by sending validation result whenever validation messages reported.\n *\n * A validation aspect of converted control reports all messages from original control in addition to its own.\n *\n * A validation aspect of input controls container reports all messages from nested controls in addition to its own.\n *\n * @category Aspect\n * @typeparam Value  Input value type.\n */\nexport abstract class InValidation<Value> implements EventKeeper<[InValidation.Result]> {\n\n  /**\n   * Input validation aspect.\n   */\n  static get [InAspect__symbol](): InAspect<InValidation<any>, 'validation'> {\n    return InValidation__aspect;\n  }\n\n  /**\n   * Builds an `AfterEvent` keeper of input validation result.\n   *\n   * An `[AfterEvent__symbol]` property is an alias of this one.\n   *\n   * @return `AfterEvent` keeper of validation result keeper.\n   */\n  abstract read(): AfterEvent<[InValidation.Result]>;\n\n  /**\n   * Starts sending validation result and updates to the given `receiver`\n   *\n   * @param receiver  Target validation result receiver.\n   *\n   * @returns Validation results supply.\n   */\n  abstract read(receiver: EventReceiver<[InValidation.Result]>): EventSupply;\n\n  [AfterEvent__symbol](): AfterEvent<[InValidation.Result]> {\n    return this.read();\n  }\n\n  /**\n   * Validates the input using the given validators.\n   *\n   * Messages sent by each registered validator are handled independently. This means that every time the event received\n   * from validator, it replaces the list of validation messages reported previously by the same validator. But it never\n   * affects messages received from other validators.\n   *\n   * @param validators  Input validators to use.\n   *\n   * @returns Validators supply. Removes validators and their messages once cut off.\n   */\n  abstract by(...validators: InValidator<Value>[]): EventSupply;\n\n}\n\nexport namespace InValidation {\n\n  /**\n   * Input validation messages.\n   *\n   * This is a map of key/value pairs, where the key is a message code, while the value is arbitrary. Message codes\n   * are ignored when their values are falsy (i.e. `!message[code] === true`).\n   *\n   * Some message codes are treated specially by convenience.\n   */\n  export type Message = {\n    readonly [code in Extract<keyof GenericMessage, string>]?: any;\n  };\n\n  /**\n   * Generic input validation messages.\n   */\n  export interface GenericMessage {\n\n    readonly [code: string]: any;\n\n    /**\n     * Missing input.\n     */\n    readonly missing?: any;\n\n    /**\n     * The message with this code would be reported by `requireNeeded()` validator despite there are messages with\n     * `missing` code.\n     */\n    readonly despiteMissing?: any;\n\n    /**\n     * Incomplete input, except missing one.\n     */\n    readonly incomplete?: any;\n\n    /**\n     * The message with this code would be reported by `requireNeeded()` validator despite there are messages with\n     * `incomplete` code.\n     */\n    readonly despiteIncomplete?: any;\n\n    /**\n     * Invalid input, except missing or incomplete one.\n     */\n    readonly invalid?: any;\n\n    /**\n     * Submit failure.\n     *\n     * This is set by input submit aspect.\n     */\n    readonly submit?: any;\n\n  }\n\n  /**\n   * Input validation result.\n   *\n   * Combines messages sent by all registered validators.\n   *\n   * Implements `Iterable` interface by iterating over all validation messages.\n   */\n  export interface Result extends Iterable<Message> {\n\n    /**\n     * Whether validation succeed.\n     *\n     * This is `true` when there is no validation messages, or `false` otherwise.\n     */\n    readonly ok: boolean;\n\n    /**\n     * Returns messages with the given code.\n     *\n     * @param code  Target code. All messages reported when absent.\n     *\n     * @returns An array of matching messages. Possibly empty.\n     */\n    messages(code?: string): readonly Message[];\n\n    /**\n     * Checks whether there are errors with the given code.\n     *\n     * @param code  Target code. Any message matches when absent.\n     *\n     * @returns `true` if there is at least one message with the given code, or `false` otherwise.\n     */\n    has(code?: string): boolean;\n\n    /**\n     * Checks whether there are errors without the given codes.\n     *\n     * @param codes  Excluded codes. Any message matches when empty.\n     *\n     * @returns `true` is there is at least one message without any of the given codes, or `false` otherwise.\n     */\n    hasBut(...codes: string[]): boolean;\n\n    [Symbol.iterator](): IterableIterator<Message>;\n\n  }\n\n  /**\n   * Successful input validation result.\n   */\n  export interface Ok extends Result {\n\n    readonly ok: true;\n\n  }\n\n  /**\n   * Unsuccessful input validation result.\n   */\n  export interface Errors extends Result {\n\n    readonly ok: false;\n\n  }\n\n}\n\n/**\n * @internal\n */\nconst noInValidationErrors: InValidation.Result = {\n  get ok() {\n    return true;\n  },\n  messages() {\n    return [];\n  },\n  has() {\n    return false;\n  },\n  hasBut() {\n    return false;\n  },\n  [Symbol.iterator]() {\n    return [][Symbol.iterator]();\n  },\n};\n\n/**\n * @internal\n */\nclass InValidationErrors implements InValidation.Result {\n\n  private readonly _all: InValidation.Message[];\n  private readonly _byCode = new Map<string, InValidation.Message[]>();\n\n  constructor(messages: InValidation.Message[]) {\n    this._all = [];\n    itsEach(\n        messages,\n        message => {\n\n          let nonEmpty = false;\n\n          itsEach(overEntries(message), ([code, codePresent]) => {\n            if (codePresent) {\n              nonEmpty = true;\n\n              const prev = this._byCode.get(code);\n\n              if (prev) {\n                prev.push(message);\n              } else {\n                this._byCode.set(code, [message]);\n              }\n            }\n          });\n\n          // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n          if (nonEmpty) {\n            this._all.push(message);\n          }\n        },\n    );\n  }\n\n  get ok(): boolean {\n    return !this._all.length;\n  }\n\n  messages(code?: string): InValidation.Message[] {\n    return code == null ? this._all : this._byCode.get(code) || [];\n  }\n\n  has(code?: string): boolean {\n    return code == null || this._byCode.has(code);\n  }\n\n  hasBut(...codes: string[]): boolean {\n    return this._all.some(\n        message => codes.every(code => !message[code]),\n    );\n  }\n\n  [Symbol.iterator](): IterableIterator<InValidation.Message> {\n    return this._all[Symbol.iterator]();\n  }\n\n}\n\n/**\n * Returns successful input validation result.\n *\n * @category Validation\n * @returns Successful input validation result.\n */\nexport function inValidationResult(): InValidation.Ok;\n\n/**\n * Creates input validation result out of validation messages.\n *\n * @param messages  Input validation messages.\n *\n * @returns New input validation result containing the given `messages`.\n */\nexport function inValidationResult(...messages: InValidation.Message[]): InValidation.Result;\n\nexport function inValidationResult(...messages: InValidation.Message[]): InValidation.Result {\n  return messages.length ? new InValidationErrors(messages) : noInValidationErrors;\n}\n\n/**\n * @internal\n */\nclass InControlValidation<Value> extends InValidation<Value> {\n\n  readonly _messages: InValidationMessages<Value>;\n\n  constructor(control: InControl<Value>) {\n    super();\n    this._messages = new InValidationMessages(control);\n\n    const container = control.aspect(InContainer);\n\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (container) {\n      this._messages.from(nestedInValidationMessages(container));\n    }\n\n  }\n\n  by(...validators: InValidator<Value>[]): EventSupply {\n    return this._messages.from(requireAll(...validators));\n  }\n\n  read(): AfterEvent<[InValidation.Result]>;\n  read(receiver: EventReceiver<[InValidation.Result]>): EventSupply;\n  read(receiver?: EventReceiver<[InValidation.Result]>): AfterEvent<[InValidation.Result]> | EventSupply {\n    return (this.read = afterSupplied(this._messages).keepThru(inValidationResult).F)(receiver);\n  }\n\n}\n\n/**\n * @internal\n */\nfunction nestedInValidationMessages(container: InContainer<any>): EventKeeper<InValidation.Message[]> {\n  return container.controls.read().keepThru(\n      nestedInValidations,\n      combineInValidationResults,\n  );\n}\n\n/**\n * @internal\n */\nfunction nestedInValidations(\n    controls: InContainer.Snapshot,\n): NextCall<OnEventCallChain, [InValidation.Result][]> {\n  return nextAfterEvent(afterEach(...mapIt(controls, control => control.aspect(InValidation))));\n}\n\n/**\n * @internal\n */\nfunction combineInValidationResults(\n    ...results: [InValidation.Result][]\n): NextCall<OnEventCallChain, InValidation.Message[]> {\n  return nextArgs<InValidation.Message[]>(\n      ...flatMapIt(mapIt(results, result => result[0])),\n  );\n}\n\ndeclare module '../aspect' {\n\n  export namespace InAspect.Application {\n\n    export interface Map<OfInstance, OfValue> {\n\n      /**\n       * Input validation aspect application type.\n       */\n      validation(): InValidation<OfValue>;\n\n    }\n\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/input-aspects\n */\nimport { itsEach, mapIt } from '@proc7ts/a-iterable';\nimport {\n  afterAll,\n  afterEach,\n  AfterEvent,\n  AfterEvent__symbol,\n  afterThe,\n  EventKeeper,\n  EventReceiver,\n  EventSupply,\n  eventSupplyOf,\n  nextAfterEvent,\n  trackValue,\n  ValueTracker,\n} from '@proc7ts/fun-events';\nimport { InAspect, InAspect__symbol } from '../../aspect';\nimport { inAspectSameOrBuild } from '../../aspect.impl';\nimport { InContainer } from '../../containers';\nimport { InControl } from '../../control';\nimport { InElement } from '../../element.control';\nimport { InFocus } from './focus.aspect';\n\n/**\n * @internal\n */\nconst InStatus__aspect: InAspect<InStatus> = {\n\n  applyTo<Value>(control: InControl<Value>): InAspect.Applied<Value, InStatus> {\n    return inAspectSameOrBuild(control, InStatus, ctrl => {\n\n      const container = ctrl.aspect(InContainer);\n\n      return container != null ? new InContainerStatus(container) : new InControlStatus(ctrl);\n    });\n  },\n\n};\n\n/**\n * Aggregate status aspect of user input.\n *\n * Collects and reports input status flags. Like whether the input ever had focus or being altered.\n *\n * Supports input elements and containers. For the rest of input controls always sends default status flags.\n *\n * Implements `EventKeeper` interface by sending collected status flags to receivers.\n *\n * @category Aspect\n */\nexport abstract class InStatus implements EventKeeper<[InStatus.Flags]> {\n\n  static get [InAspect__symbol](): InAspect<InStatus> {\n    return InStatus__aspect;\n  }\n\n  /**\n   * Builds `AfterEvent` keeper of input status flags.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   *\n   * @returns `AfterEvent` keeper of input status flags.\n   */\n  abstract read(): AfterEvent<[InStatus.Flags]>;\n\n  /**\n   * Starts sending input status flags and updates to the given `receiver`\n   *\n   * @param receiver  Target receiver of input status flags.\n   *\n   * @returns Input status flags supply.\n   */\n  abstract read(receiver: EventReceiver<[InStatus.Flags]>): EventSupply;\n\n  [AfterEvent__symbol](): AfterEvent<[InStatus.Flags]> {\n    return this.read();\n  }\n\n  /**\n   * Marks the input as touched.\n   *\n   * For container invokes this method for each of the nested controls.\n   *\n   * @param touched  Whether to mark the input as touched or not. `true` by default. When `false` the input would be\n   * marked as non-edited too. Setting to `false` affects only edited flag when input has focus.\n   *\n   * @returns `this` aspect instance.\n   */\n  abstract markTouched(touched?: boolean): this;\n\n  /**\n   * Marks the input as edited by user.\n   *\n   * For container invokes this method for each of the nested controls.\n   *\n   * @param edited  Whether to mark the input as edited by user. `true` by default, in which case the input will be\n   * marked as touched as well.\n   *\n   * @returns `this` aspect instance.\n   */\n  abstract markEdited(edited?: boolean): this;\n\n}\n\nexport namespace InStatus {\n\n  /**\n   * A flags representing aggregated input status.\n   */\n  export interface Flags {\n\n    /**\n     * Whether the input has focus currently.\n     */\n    readonly hasFocus: boolean;\n\n    /**\n     * Whether the input had focus already.\n     *\n     * This flag can be set using `InStatus.markTouched()`.\n     */\n    readonly touched: boolean;\n\n    /**\n     * Whether the input has been edited by user.\n     *\n     * This flag can be set using `InStatus.markEdited()`.\n     */\n    readonly edited: boolean;\n\n  }\n\n}\n\n/**\n * @internal\n */\nconst defaultInStatusFlags: InStatus.Flags = {\n  hasFocus: false,\n  touched: false,\n  edited: false,\n};\n\n/**\n * @internal\n */\nclass InControlStatus extends InStatus {\n\n  private readonly _flags = trackValue<InStatus.Flags>(defaultInStatusFlags);\n\n  constructor(control: InControl<any>) {\n    super();\n    eventSupplyOf(this._flags).needs(control);\n    this._flags.by(elementInStatusFlags(this._flags, control));\n  }\n\n  read(): AfterEvent<[InStatus.Flags]>;\n  read(receiver: EventReceiver<[InStatus.Flags]>): EventSupply;\n  read(receiver?: EventReceiver<[InStatus.Flags]>): AfterEvent<[InStatus.Flags]> | EventSupply {\n    return (this.read = this._flags.read().F)(receiver);\n  }\n\n  markTouched(touched = true): this {\n\n    const flags = this._flags.it;\n\n    if (!touched) {\n      if (flags.touched) {\n        // Try to reset touched.\n        // Still touched if in focus. Not edited anyway.\n        this._flags.it = { ...flags, touched: flags.hasFocus, edited: false };\n      }\n    } else if (!flags.touched) {\n      // Do not modify if already touched.\n      this._flags.it = { ...flags, touched };\n    }\n\n    return this;\n  }\n\n  markEdited(edited = true): this {\n\n    const flags = this._flags.it;\n\n    if (edited) {\n      if (!flags.edited) {\n        // Touched if edited\n        this._flags.it = { ...flags, touched: true, edited };\n      }\n    } else if (flags.edited) {\n      // Assume not edited\n      this._flags.it = { ...flags, edited };\n    }\n\n    return this;\n  }\n\n}\n\n/**\n * @internal\n */\nfunction elementInStatusFlags(\n    origin: ValueTracker<InStatus.Flags>,\n    control: InControl<any>,\n): AfterEvent<[InStatus.Flags]> {\n\n  const element = control.aspect(InElement);\n  const focus = control.aspect(InFocus);\n\n  return afterAll({\n    hasFocus: focus || afterThe(false),\n    edited: element ? element.input().keepThru(({ event }) => !!event) : afterThe(false),\n  }).keepThru(\n      ({ hasFocus: [hasFocus], edited: [edited] }) => updateInStatusFlags(origin.it, hasFocus, edited),\n  );\n}\n\n/**\n * @internal\n */\nfunction updateInStatusFlags(flags: InStatus.Flags, hasFocus: boolean, edited: boolean): InStatus.Flags {\n  if (hasFocus) {\n    flags = { ...flags, hasFocus, touched: true };\n  } else {\n    flags = { ...flags, hasFocus };\n  }\n  if (edited) {\n    flags = { ...flags, edited, touched: true };\n  }\n  return flags;\n}\n\n/**\n * @internal\n */\nclass InContainerStatus extends InStatus {\n\n  constructor(private readonly _container: InContainer<any>) {\n    super();\n  }\n\n  read(): AfterEvent<[InStatus.Flags]>;\n  read(receiver: EventReceiver<[InStatus.Flags]>): EventSupply;\n  read(receiver?: EventReceiver<[InStatus.Flags]>): AfterEvent<[InStatus.Flags]> | EventSupply {\n    return (this.read = containerInStatusFlags(this._container).F)(receiver);\n  }\n\n  markEdited(edited?: boolean): this {\n    this._container.controls.read().once(\n        snapshot => itsEach(\n            snapshot,\n            control => control.aspect(InStatus).markEdited(edited),\n        ),\n    );\n    return this;\n  }\n\n  markTouched(touched?: boolean): this {\n    this._container.controls.read().once(\n        snapshot => itsEach(\n            snapshot,\n            control => control.aspect(InStatus).markTouched(touched),\n        ),\n    );\n    return this;\n  }\n\n}\n\n/**\n * @internal\n */\nfunction containerInStatusFlags(container: InContainer<any>): AfterEvent<[InStatus.Flags]> {\n  return container.controls.read().tillOff(container).keepThru_(\n      (snapshot: InContainer.Snapshot) => nextAfterEvent(afterEach(...inControlStatuses(snapshot))),\n      combineInStatusFlags,\n  );\n}\n\n/**\n * @internal\n */\nfunction inControlStatuses(snapshot: InContainer.Snapshot): Iterable<InStatus> {\n  return mapIt(snapshot, c => c.aspect(InStatus));\n}\n\n/**\n * @internal\n */\nfunction combineInStatusFlags(...flags: [InStatus.Flags][]): InStatus.Flags {\n\n  const result: { -readonly [K in keyof InStatus.Flags]: InStatus.Flags[K] } = {\n    hasFocus: false,\n    touched: false,\n    edited: false,\n  };\n\n  itsEach(\n      flags,\n      (([{ hasFocus, touched, edited }]) => {\n            if (touched) {\n              result.touched = true;\n            }\n            if (hasFocus) {\n              result.hasFocus = result.touched = true;\n            }\n            if (edited) {\n              result.edited = result.touched = true;\n            }\n          }\n      ),\n  );\n\n  return result;\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/input-aspects\n */\nimport { filterIt, itsEach, ObjectEntry, overEntries } from '@proc7ts/a-iterable';\nimport { noop } from '@proc7ts/call-thru';\nimport { DeltaSet } from '@proc7ts/delta-set';\nimport {\n  afterEach,\n  AfterEvent,\n  AfterEvent__symbol,\n  afterEventBy,\n  afterSupplied,\n  EventKeeper,\n  EventNotifier,\n  EventReceiver,\n  eventSupply,\n  EventSupply,\n  eventSupplyOf,\n  isEventKeeper,\n  nextAfterEvent,\n  trackValue,\n  ValueTracker,\n} from '@proc7ts/fun-events';\nimport { css__naming, isQualifiedName, QualifiedName } from '@proc7ts/namespace-aliaser';\nimport { RenderSchedule } from '@proc7ts/render-scheduler';\nimport { InAspect, InAspect__symbol } from '../../aspect';\nimport { InNamespaceAliaser, InRenderScheduler } from '../../aspects';\nimport { InControl } from '../../control';\nimport { InStyledElement } from './styled-element.aspect';\n\n/**\n * @internal\n */\nconst InCssClasses__aspect: InAspect<InCssClasses> = {\n\n  applyTo(control: InControl<any>): InAspect.Applied<any, InCssClasses> {\n    return {\n      instance: new InControlCssClasses(control),\n      convertTo: noop,\n    };\n  },\n\n};\n\n/**\n * An aspect of the user input representing CSS classes to apply to styled element.\n *\n * Implements an `EventKeeper` interface by reporting all CSS classes applied to styled element.\n *\n * @category Aspect\n */\nexport abstract class InCssClasses implements EventKeeper<[InCssClasses.Map]> {\n\n  static get [InAspect__symbol](): InAspect<InCssClasses> {\n    return InCssClasses__aspect;\n  }\n\n  /**\n   * Builds an `AfterEvent` keeper of CSS classes to be applied to styled element.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   *\n   * @returns `AfterEvent` keeper of CSS classes map.\n   */\n  abstract read(): AfterEvent<[InCssClasses.Map]>;\n\n  /**\n   * Starts sending CSS classes for styled element and updates to the given `receiver`.\n   *\n   * @param receiver  Target receiver of CSS classes map.\n   *\n   * @returns CSS classes supply.\n   */\n  abstract read(receiver: EventReceiver<[InCssClasses.Map]>): EventSupply;\n\n  [AfterEvent__symbol](): AfterEvent<[InCssClasses.Map]> {\n    return this.read();\n  }\n\n  /**\n   * Builds an `AfterEvent` keeper of added and removed CSS classes.\n   *\n   * Sends current CSS classes as added ones on receiver registration.\n   *\n   * @returns `AfterEvent` keeper of added and removed classes.\n   */\n  abstract track(): AfterEvent<[readonly string[], readonly string[]]>;\n\n  /**\n   * Starts sending current, added and removed CSS classes to the given `receiver`\n   *\n   * Sends current CSS classes as added ones on receiver registration.\n   *\n   * @param receiver  Target receiver of added and removed CSS classes.\n   *\n   * @returns CSS classes supply.\n   */\n  abstract track(receiver: EventReceiver<[readonly string[], readonly string[]]>): EventSupply;\n\n  /**\n   * Appends CSS classes from the given `source` to styled element.\n   *\n   * @param source  A source of CSS class names.\n   *\n   * @returns CSS class names supply. Removes `source` CSS classes from styled element once cut off.\n   */\n  abstract add(source: InCssClasses.Source): EventSupply;\n\n  /**\n   * Converts arbitrary CSS classes source to their {@link InCssClasses.Spec specifiers}.\n   *\n   * @param source  A source of CSS classes names.\n   *\n   * @returns An `AfterEvent` keeper of CSS class name specifiers.\n   */\n  abstract specs(source: InCssClasses.Source): AfterEvent<InCssClasses.Spec[]>;\n\n  /**\n   * Resolves arbitrary CSS classes source to {@link InCssClasses.Map map of class names}.\n   *\n   * @param source  A source of CSS classes names.\n   *\n   * @returns An `AfterEvent` keeper of CSS class names map.\n   */\n  abstract resolve(source: InCssClasses.Source): AfterEvent<[InCssClasses.Map]>;\n\n  /**\n   * Applies CSS classes to the given styled element.\n   *\n   * @param element  Target element to apply CSS classes to.\n   * @param schedule  DOM render schedule to add CSS class updates to. A new schedule is constructed by\n   * {@link InRenderScheduler input render scheduler} by default.\n   *\n   * @returns CSS classes supply that stops their application and removes already applied ones once cut off.\n   */\n  abstract applyTo(element: InStyledElement, schedule?: RenderSchedule): EventSupply;\n\n  /**\n   * Removes all CSS class sources and stops applying CSS classes to styled elements.\n   *\n   * @param reason  An optional reason.\n   *\n   * @returns `this` instance.\n   */\n  abstract done(reason?: any): this;\n\n}\n\nexport namespace InCssClasses {\n\n  /**\n   * A source of CSS class names for styled element.\n   *\n   * This is either an event keeper of CSS class names, or a function returning one and accepting target input\n   * control as the only parameter.\n   */\n  export type Source =\n      | EventKeeper<Spec[]>\n      | ((this: void, control: InControl<any>) => EventKeeper<Spec[]>);\n\n  /**\n   * A specifier of CSS classes for styled element.\n   *\n   * This is either a single (potentially qualified) class name, or a {@link Map map of class names}.\n   *\n   * Qualified names are converted to simple ones by [[InNamespaceAliaser]] aspect.\n   */\n  export type Spec =\n      | QualifiedName\n      | Map;\n\n  /**\n   * A map of CSS class names for styled element.\n   *\n   * The keys of this map are class names to apply.\n   * - When the value is `true` corresponding class name will be added.\n   * - When the value is `false` corresponding class name will not be added.\n   * - The `undefined` value is ignored.\n   */\n  export type Map = {\n    readonly [name in string]?: boolean;\n  };\n\n}\n\n/**\n * @internal\n */\nconst UnsubscribeReason__symbol = (/*#__PURE__*/ Symbol('reason'));\n\n/**\n * @internal\n */\ninterface UnsubscribeReason {\n  readonly [UnsubscribeReason__symbol]?: any;\n}\n\n/**\n * @internal\n */\nfunction isUnsubscribeReason(reason: any): reason is UnsubscribeReason {\n  return reason && typeof reason === 'object' && UnsubscribeReason__symbol in reason;\n}\n\n/**\n * @internal\n */\nclass InControlCssClasses extends InCssClasses {\n\n  private readonly _sources: ValueTracker<[Map<AfterEvent<[InCssClasses.Map]>, EventSupply>]> = trackValue([new Map()]);\n  private _schedule?: RenderSchedule;\n\n  constructor(private readonly _control: InControl<any>) {\n    super();\n\n    const element = _control.aspect(InStyledElement);\n\n    if (element) {\n      this.applyTo(element, this.schedule);\n    }\n\n    eventSupplyOf(_control).whenOff(reason => this.done(reason));\n  }\n\n  get schedule(): RenderSchedule {\n    return this._schedule || (this._schedule = controlSchedule(\n        this._control,\n        this._control.aspect(InStyledElement)!,\n    ));\n  }\n\n  read(): AfterEvent<[InCssClasses.Map]>;\n  read(receiver: EventReceiver<[InCssClasses.Map]>): EventSupply;\n  read(receiver?: EventReceiver<[InCssClasses.Map]>): AfterEvent<[InCssClasses.Map]> | EventSupply {\n    return (this.read = this._sources.read().tillOff(this._control).keepThru_(\n        ([sources]) => nextAfterEvent(afterEach(...sources.keys())),\n        (...classes) => {\n\n          const result: { [name: string]: boolean } = {};\n\n          classes.forEach(([map]) => mergeInCssClassesMap(map, result));\n\n          return result;\n        },\n    ).F)(receiver);\n  }\n\n  track(): AfterEvent<[readonly string[], readonly string[]]>;\n  track(receiver: EventReceiver<[readonly string[], readonly string[]]>): EventSupply;\n  track(\n      receiver?: EventReceiver<[readonly string[], readonly string[]]>,\n  ): AfterEvent<[readonly string[], readonly string[]]> | EventSupply {\n    return (this.track = afterEventBy<[readonly string[], readonly string[]]>(receiver => {\n      receiver.supply.needs(this._control);\n\n      const classes = new DeltaSet<string>();\n      const emitter = new EventNotifier<[readonly string[], readonly string[]]>();\n      let classesSent = false;\n      const sendClasses = (): void => {\n        classesSent = true;\n        classes.redelta(\n            (add, remove) => emitter.send(add, remove),\n        ).undelta();\n      };\n\n      emitter.on(receiver);\n\n      return this.read(map => {\n\n        const remove = new Set(classes);\n        const add: string[] = [];\n\n        itsEach(\n            filterIt<ObjectEntry<InCssClasses.Map>>(\n                overEntries<InCssClasses.Map>(map),\n                ([, flag]) => !!flag,\n            ),\n            ([name]) => {\n              if (!remove.delete(name)) {\n                add.push(name);\n              }\n            },\n        );\n\n        if (!classesSent || add.length || remove.size) {\n          classes.delta(add, remove);\n          sendClasses();\n        }\n      });\n    }).F)(receiver);\n  }\n\n  specs(source: InCssClasses.Source): AfterEvent<InCssClasses.Spec[]> {\n    return afterSupplied(isEventKeeper(source) ? source : source(this._control));\n  }\n\n  resolve(source: InCssClasses.Source): AfterEvent<[InCssClasses.Map]> {\n\n    const nsAlias = this._control.aspect(InNamespaceAliaser);\n\n    return this.specs(source).keepThru(\n        (...names) => {\n\n          const result: { [name: string]: boolean } = {};\n\n          names.forEach(name => {\n            if (isQualifiedName(name)) {\n              result[css__naming.name(name, nsAlias)] = true;\n            } else {\n              mergeInCssClassesMap(name, result);\n            }\n          });\n\n          return result;\n        },\n    );\n  }\n\n  add(source: InCssClasses.Source): EventSupply {\n\n    const inSupply = eventSupplyOf(this._control);\n\n    if (inSupply.isOff) {\n      return inSupply;\n    }\n\n    const classesSupply = eventSupply();\n    const src = afterEventBy<[InCssClasses.Map]>(receiver => {\n\n      const supply = this.resolve(source).to({\n        receive(context, ...event) {\n          receiver.receive(context, ...event);\n        },\n      });\n\n      receiver.supply.whenOff(reason => {\n        classesSupply.off({ [UnsubscribeReason__symbol]: reason });\n      });\n      classesSupply.needs(supply).whenOff(reason => {\n        if (isUnsubscribeReason(reason)) {\n          supply.off(reason[UnsubscribeReason__symbol]);\n        }\n      });\n    }).share();\n\n    const [sources] = this._sources.it;\n\n    sources.set(src, classesSupply);\n    classesSupply.whenOff(reason => {\n      if (!isUnsubscribeReason(reason)) {\n        sources.delete(src);\n        this._sources.it = [sources];\n      }\n    });\n\n    this._sources.it = [sources];\n\n    return classesSupply.needs(inSupply);\n  }\n\n  applyTo(\n      element: Element,\n      schedule: RenderSchedule = controlSchedule(this._control, element),\n  ): EventSupply {\n\n    const { classList } = element;\n    const classes = new DeltaSet<string>();\n    const updateClasses = (): void => {\n      classes.redelta((add, remove) => {\n        classList.remove(...remove);\n        classList.add(...add);\n      }).undelta();\n    };\n\n    return this.track((add, remove) => {\n      classes.delta(add, remove);\n      schedule(updateClasses);\n    }).whenOff(() => {\n      if (classes.size) {\n        classes.clear();\n        schedule(updateClasses);\n      }\n    });\n  }\n\n  done(reason?: any): this {\n    itsEach(\n        this._sources.it[0].values(),\n        supply => supply.off(reason),\n    );\n    this._sources.done(reason);\n    return this;\n  }\n\n}\n\n/**\n * @internal\n */\nfunction mergeInCssClassesMap(map: InCssClasses.Map, result: { [name: string]: boolean }): void {\n  itsEach(\n      overEntries(map),\n      ([name, flag]) => {\n        if (flag != null) {\n          result[name] = flag;\n        }\n      },\n  );\n}\n\n/**\n * @internal\n */\nfunction controlSchedule(control: InControl<any>, node: Node | undefined): RenderSchedule {\n  return control.aspect(InRenderScheduler)({ node });\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/input-aspects\n */\nimport { nextArgs } from '@proc7ts/call-thru';\nimport { InputAspects__NS } from '../../aspects';\nimport { InValidation } from '../../validation';\nimport { InCssClasses } from './css-classes.aspect';\n\n/**\n * @internal\n */\nconst defaultInCssErrorMarks: InCssClasses.Spec[] = [['has-error', InputAspects__NS]];\n\n/**\n * @internal\n */\nfunction defaultInCssHasError(errors: InValidation.Result): boolean {\n  return !errors.ok;\n}\n\n/**\n * Builds a source of error marker CSS classes.\n *\n * Applies error marker class(es) when the given error message codes present in\n * {@link InValidation.Result validation result}.\n *\n * @category Style\n * @param mark  Error mark. Specifies CSS class(es) to apply when requested error present.\n * A class with `has-error` name in {@link InputAspects__NS input\n * aspects namespace} is used by default.\n * @param when  {@link InValidation.Message Validation message} code(s) to expect.\n * {@link InValidation.Result.ok Any} error matches by default.\n *\n * @returns A source of CSS class names to apply.\n */\nexport function inCssError(\n    {\n      mark,\n      when,\n    }: {\n      mark?: InCssClasses.Spec | InCssClasses.Spec[];\n      when?: string | string[];\n    } = {},\n): InCssClasses.Source {\n\n  let hasError: (errors: InValidation.Result) => boolean;\n\n  if (!when) {\n    hasError = defaultInCssHasError;\n  } else if (Array.isArray(when)) {\n    hasError = when.length ? errors => when.every(code => errors.has(code)) : defaultInCssHasError;\n  } else {\n    hasError = errors => errors.has(when);\n  }\n\n  let marks: InCssClasses.Spec[];\n\n  if (!mark) {\n    marks = defaultInCssErrorMarks;\n  } else if (Array.isArray(mark)) {\n    marks = mark.length ? mark : defaultInCssErrorMarks;\n  } else {\n    marks = [mark];\n  }\n\n  return control => control.aspect(InValidation).read().keepThru(\n      errors => hasError(errors) ? nextArgs(...marks) : nextArgs(),\n  );\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/input-aspects\n */\nimport { nextArgs } from '@proc7ts/call-thru';\nimport { afterAll } from '@proc7ts/fun-events';\nimport { NamespaceDef, QualifiedName } from '@proc7ts/namespace-aliaser';\nimport { InputAspects__NS } from '../../aspects';\nimport { InControl } from '../../control';\nimport { InMode } from '../../data';\nimport { InValidation } from '../../validation';\nimport { InStatus } from '../focus';\nimport { InCssClasses } from './css-classes.aspect';\n\n/**\n * Builds a source of informative CSS classes.\n *\n * Generates the following CSS classes:\n * - `disabled` when input control is disabled (i.e. has no data).\n * - `readonly` when input control is read-only,\n * - `invalid` when input control validation failed,\n * - `missing` when there are validation messages with `missing` code,\n * - `incomplete` when there are validation messages with `incomplete`,\n * - `hasFocus` when input control has input focus,\n * - `touched` when input control is touched (i.e. had focus already),\n * - `edited` when input control is edited by user.\n *\n * These names are qualified with the given (or {@link InputAspects__NS default}) namespace.\n *\n * @category Style\n * @param ns  A definition of namespace to qualify CSS class names with. The {@link InputAspects__NS default namespace}\n * will be used when omitted.\n *\n * @returns A source of CSS class names to apply.\n */\nexport function inCssInfo(\n    {\n      ns = InputAspects__NS,\n    }: {\n      ns?: NamespaceDef;\n    } = {},\n): InCssClasses.Source {\n  return (control: InControl<any>) => {\n\n    const cls = (name: string) => [name, ns] as const;\n\n    return afterAll({\n      md: control.aspect(InMode),\n      vl: control.aspect(InValidation),\n      st: control.aspect(InStatus),\n    }).keepThru(\n        ({ md: [mode], vl: [valid], st: [{ hasFocus, touched, edited }] }) => {\n\n          const names: QualifiedName[] = [];\n\n          if (!InMode.hasData(mode)) {\n            names.push(cls('disabled'));\n          }\n          if (mode === 'ro' || mode === '-ro') {\n            names.push(cls('readonly'));\n          }\n          if (!valid.ok) {\n            names.push(cls('invalid'));\n          }\n          if (valid.has('missing')) {\n            names.push(cls('missing'));\n          }\n          if (valid.has('incomplete')) {\n            names.push(cls('incomplete'));\n          }\n          if (hasFocus) {\n            names.push(cls('has-focus'));\n          }\n          if (touched) {\n            names.push(cls('touched'));\n          }\n          if (edited) {\n            names.push(cls('edited'));\n          }\n\n          return nextArgs(...names);\n        },\n    );\n  };\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic/input\n */\nimport { SingleContextUpKey, SingleContextUpRef } from '@proc7ts/context-values/updatable';\nimport { eventSupply, EventSupply } from '@proc7ts/fun-events';\nimport { InControl } from '@proc7ts/input-aspects';\nimport { ComponentContext } from '@wesib/wesib';\nimport { HierarchyContext } from '../hierarchy';\n\n/**\n * A user input originated from control.\n *\n * It is meant to be present in root {@link HierarchyContext hierarchy context}. Nested components may access it from\n * their hierarchy contexts to participate in user input.\n *\n * An [[inputFromControl]] function can be used to initiate user input.\n *\n * @typeparam Value  Input value type.\n */\nexport interface InputFromControl<Value = any> {\n\n  /**\n   * Root component context the input is initiated for.\n   */\n  readonly root: ComponentContext;\n\n  /**\n   * User input control.\n   */\n  readonly control: InControl<Value>;\n\n}\n\n/**\n * No user input originated from control.\n */\nexport interface NoInputFromControl {\n  control?: undefined;\n}\n\n/**\n * A key of hierarchy context value containing a user input originated from control. Potentially\n * {@link NoInputFromControl absent}.\n */\nexport const InputFromControl: SingleContextUpRef<InputFromControl | NoInputFromControl> = (\n    /*#__PURE__*/ new SingleContextUpKey<InputFromControl | NoInputFromControl>(\n        'input-from-control',\n        {\n          byDefault: () => ({}),\n        },\n    )\n);\n\n/**\n * Initiates user input from the given control for the given root component.\n *\n * Constructs an [[InputFromControl]] instance and makes it available in `root` component's hierarchy.\n *\n * @typeparam Value  Input value type.\n * @param root  Root component context to initiate user input for.\n * @param control  User input control.\n *\n * @returns User input supply. The user input would be stopped once this supply is cut off.\n */\nexport function inputFromControl<Value>(\n    root: ComponentContext,\n    control: InControl<Value>,\n): EventSupply {\n\n  const off = root.get(HierarchyContext).provide({\n    a: InputFromControl,\n    by: () => ({\n      root,\n      control,\n    }),\n  });\n\n  return eventSupply(off)\n      .needs(root)\n      .needs(control);\n}\n","import { RefStypRule, StypColor, StypLength, StypLengthPt, StypProperties, StypRGB } from '@proc7ts/style-producer';\n\nexport interface ThemeSettings {\n  $color: StypColor;\n  $bgColor: StypColor;\n  $fontFace: string;\n  $fontSize: StypLengthPt;\n  $lineHeight: number;\n  $fontWeight: string;\n  $linkFontWeight: string;\n  $layoutBreakpoint: StypLength;\n}\n\nexport const ThemeSettings: RefStypRule<ThemeSettings> = RefStypRule.by(\n    { $: 'settings' },\n    {\n      $color: new StypRGB({ r: 161, g: 185, b: 142 }),\n      $bgColor: new StypRGB({ r: 40, g: 43, b: 36 }),\n      $fontFace: `'Exo 2', sans-serif`,\n      $fontSize: StypLengthPt.of(1, 'em'),\n      $lineHeight: 1.2,\n      $fontWeight: '400',\n      $linkFontWeight: '600',\n      $layoutBreakpoint: StypLength.of(576, 'px'),\n    },\n);\n\nexport function mediaStyle({ $layoutBreakpoint }: ThemeSettings): StypProperties {\n  return {\n    '@media:sm': `(max-width: ${$layoutBreakpoint})`,\n  };\n}\n","import { StypProperties, stypRules, StypRules } from '@proc7ts/style-producer';\nimport { Theme } from '@wesib/generic/styp';\nimport { ThemeSettings } from './theme-settings';\n\nexport function LinkStyle(theme: Theme): StypRules {\n\n  const settings = theme.ref(ThemeSettings).read();\n  const { root: { rules } } = theme;\n\n  return stypRules(\n      rules.add({ e: 'a' }, settings.keepThru(linkStyle)),\n      rules.add({ e: 'a', s: ':visited' }, settings.keepThru(linkStyle)),\n      rules.add({ e: 'a', s: ':hover' }, { textDecoration: 'underline' }),\n      rules.add({ e: 'a', s: ':active' }, { textDecoration: 'underline dotted' }),\n      rules.add({ e: 'a', s: ':focus' }, { textDecoration: 'underline dotted' }),\n  );\n}\n\nfunction linkStyle(\n    {\n      $color,\n      $linkFontWeight,\n    }: ThemeSettings,\n): StypProperties {\n  return {\n    color: $color,\n    fontWeight: $linkFontWeight,\n    textDecoration: 'none',\n  };\n}\n","import { StypProperties, stypRules, StypRules } from '@proc7ts/style-producer';\nimport { Theme } from '@wesib/generic/styp';\nimport { LinkStyle } from './link.style';\nimport { mediaStyle, ThemeSettings } from './theme-settings';\n\nexport function DefaultStyle(theme: Theme): StypRules {\n\n  const settings = theme.ref(ThemeSettings).read();\n\n  return stypRules(\n      theme.root\n          .add(settings.keepThru(defaultStyle))\n          .add(settings.keepThru(mediaStyle)),\n      theme.style(LinkStyle),\n  );\n}\n\nfunction defaultStyle(\n    {\n      $color,\n      $fontFace,\n      $fontSize,\n      $lineHeight,\n      $fontWeight,\n    }: ThemeSettings,\n): StypProperties {\n  return {\n    color: $color,\n    font: `normal ${$fontWeight} ${$fontSize}/${$lineHeight} ${$fontFace}`,\n  };\n}\n","import { StypProperties, stypRules, StypRules } from '@proc7ts/style-producer';\nimport { Theme } from '@wesib/generic/styp';\nimport { DefaultStyle } from './default.style';\nimport { ThemeSettings } from './theme-settings';\n\nexport function BodyStyle(theme: Theme): StypRules {\n\n  const settings = theme.ref(ThemeSettings).read();\n  const { root: { rules } } = theme;\n\n  return stypRules(\n      rules.add(\n          { e: 'html' },\n          {\n            height: '100%',\n            margin: 0,\n            padding: 0,\n          },\n      ),\n      rules.add(\n          { e: 'body' },\n          settings.keepThru(bodyStyle),\n      ),\n      theme.style(DefaultStyle),\n  );\n}\n\nfunction bodyStyle(\n    {\n      $bgColor,\n    }: ThemeSettings,\n): StypProperties {\n  return {\n    backgroundColor: $bgColor,\n    height: '100%',\n    margin: 0,\n    padding: 0,\n  };\n}\n","import { RefStypRule, StypColor, StypLength, StypLengthPt, StypMapper, StypRuleRefs } from '@proc7ts/style-producer';\nimport { ThemeSettings } from '../theme';\n\nexport interface FormThemeSettings {\n  $color: StypColor;\n  $bgColor: StypColor;\n  $roBgColor: StypColor;\n  $fontFace: string;\n  $fontSize: StypLengthPt;\n  $errorFontSize: StypLengthPt;\n  $lineHeight: number;\n  $fontWeight: string;\n  $borderColor: StypColor;\n  $marginV: StypLengthPt;\n  $marginH: StypLengthPt;\n  $paddingV: StypLengthPt;\n  $paddingH: StypLengthPt;\n  $borderW: StypLength;\n}\n\nexport const FormThemeSettings: RefStypRule<FormThemeSettings> = RefStypRule.by(\n    { $: 'settings:form' },\n    root => StypRuleRefs.by<{ global: ThemeSettings }>(\n        {\n          global: ThemeSettings,\n        },\n        root,\n    ).read().keepThru(formMappings),\n);\n\nfunction formMappings(\n    {\n      global: {\n        $color,\n        $bgColor,\n        $fontFace,\n        $fontSize,\n        $lineHeight,\n        $fontWeight,\n      },\n    }: {\n      global: ThemeSettings;\n    },\n): StypMapper.Mappings<FormThemeSettings> {\n  return {\n    $color,\n    $bgColor: $bgColor.hsl.set(({ l }) => ({ l: l * 0.8 })),\n    $roBgColor: $bgColor.hsl.set(({ l }) => ({ l: l * 0.94 })),\n    $fontFace,\n    $fontSize,\n    $errorFontSize: $fontSize.mul(0.8),\n    $lineHeight,\n    $fontWeight,\n    $borderColor: $bgColor,\n    $marginV: $fontSize.div(4),\n    $marginH: $fontSize.div(4),\n    $paddingV: $fontSize.div(2),\n    $paddingH: $fontSize,\n    $borderW: StypLength.of(1, 'px'),\n  };\n}\n","import { AfterEvent } from '@proc7ts/fun-events';\nimport { InCssClasses, inCssError, inCssInfo, InputAspects__NS, InStyledElement } from '@proc7ts/input-aspects';\nimport { QualifiedName } from '@proc7ts/namespace-aliaser';\nimport { StypLengthPt, stypRules, StypRules } from '@proc7ts/style-producer';\nimport { ConvertInput } from '@wesib/generic/input';\nimport { ProduceStyle, Theme } from '@wesib/generic/styp';\nimport { Attributes, Component, ComponentContext, trackAttribute } from '@wesib/wesib';\nimport { Examples__NS } from '../examples.ns';\nimport { FormThemeSettings } from './form.theme-settings';\n\n@Component(\n    ['in-error', Examples__NS],\n    Attributes('code'),\n    ConvertInput(\n        ({ control: { control }, aspects, context }) => {\n\n          const codes: AfterEvent<[string[]]> = trackAttribute(context, 'code')\n              .read()\n              .keepThru_(\n                  code => code ? code.trim().split(/\\s+/) : [],\n              );\n\n          return codes.keepThru(\n              when => control.convert(\n                  InStyledElement.to(context.element),\n                  aspects,\n              ).setup(\n                  InCssClasses,\n                  cssClasses => {\n                    cssClasses.add(inCssInfo());\n                    cssClasses.add(inCssError({ when }));\n                  },\n              ),\n          );\n        },\n    ),\n)\nexport class InErrorComponent {\n\n  constructor(private readonly _context: ComponentContext) {\n  }\n\n  @ProduceStyle()\n  style(): StypRules {\n    return this._context.get(Theme).style(InErrorStyle);\n  }\n\n}\n\nconst InError__qualifier = 'bex:in-error';\nconst hasError__cssClass: QualifiedName = ['has-error', InputAspects__NS];\n\nfunction InErrorStyle(theme: Theme): StypRules {\n\n  const settings = theme.ref(FormThemeSettings).read();\n  const { root: { rules } } = theme;\n  const borderW = StypLengthPt.of(4, 'px');\n\n  return stypRules(\n      rules.add(\n          { u: [':', 'host'], $: InError__qualifier },\n          settings.keepThru(({ $color, $errorFontSize }) => ({\n            display: 'none',\n            fontSize: $errorFontSize,\n            padding: $errorFontSize.div(2),\n            borderLeft: `${borderW} dotted ${$color}`,\n            paddingLeft: $errorFontSize.sub(borderW),\n          })),\n      ),\n      rules.add(\n          {\n            u: [\n              ':',\n              'host',\n              {\n                c: [hasError__cssClass, ['touched', InputAspects__NS]],\n                u: [':', 'not', { c: ['has-focus', InputAspects__NS] }],\n              },\n            ],\n            $: InError__qualifier,\n          },\n          {\n            display: 'block',\n          },\n      ),\n      rules.add(\n          {\n            u: [\n              ':',\n              'host',\n              {\n                c: hasError__cssClass,\n                u: [\n                  [':', 'not', { u: ['code', '~=', 'missing'] }],\n                  [':', 'not', { u: ['code', '~=', 'incomplete'] }],\n                ],\n              },\n            ],\n            $: InError__qualifier,\n          },\n          {\n            display: 'block',\n          },\n      ),\n  );\n}\n","import { StypProperties } from '@proc7ts/style-producer';\nimport { IncludePage } from '@wesib/generic';\nimport { Component } from '@wesib/wesib';\nimport { Examples__NS } from '../examples.ns';\nimport { ThemeSettings } from '../theme';\n\n@Component(\n    ['main', Examples__NS],\n    IncludePage({\n      onResponse({ response, range }) {\n        if (!response.ok) {\n          range.deleteContents();\n          if (response.ok == null) {\n            range.insertNode(document.createTextNode('Loading...'));\n          } else {\n            range.insertNode(document.createTextNode(`Error. ${response.error}`));\n          }\n        }\n      },\n    }),\n)\nexport class MainComponent {\n}\n\nexport function mainStyle(\n    {\n      $fontSize,\n    }: ThemeSettings,\n): StypProperties {\n  return {\n    flex: '1 1 auto',\n    padding: 0,\n    margin: `0 0 0 ${$fontSize.div(2)}`,\n  };\n}\n","import { StypColor, StypLengthPt, StypProperties, stypRules, StypRules } from '@proc7ts/style-producer';\nimport { ActivateNavLink, HandleNavLinks } from '@wesib/generic';\nimport { ProduceStyle, Theme } from '@wesib/generic/styp';\nimport { Component, ComponentContext, Wesib__NS } from '@wesib/wesib';\nimport { Examples__NS } from '../examples.ns';\nimport { ThemeSettings } from '../theme';\n\n@Component(\n    ['nav', Examples__NS],\n    HandleNavLinks(),\n    ActivateNavLink(),\n)\nexport class NavComponent {\n\n  private readonly _theme: Theme;\n\n  constructor(context: ComponentContext) {\n    this._theme = context.get(Theme);\n  }\n\n  @ProduceStyle()\n  style(): StypRules {\n    return this._theme.style(NavStyle);\n  }\n\n}\n\nconst Nav__qualifier = 'bex:nav';\n\nfunction NavStyle(theme: Theme): StypRules {\n\n  const settings = theme.ref(ThemeSettings).read();\n  const { root: { rules } } = theme;\n\n  return stypRules(\n      rules.add(\n          { u: [':', 'host'], $: Nav__qualifier },\n          settings.keepThru(navStyle),\n      ),\n      rules.add(\n          { u: [':', 'host'], $: Nav__qualifier },\n          settings.keepThru(sts => ({\n            flex: '0 1 200px',\n            height: '100%',\n            background: navLinkBackground(sts),\n          })),\n      ),\n      rules.add(\n          { u: [':', 'host'], $: [Nav__qualifier, '@media:sm'] },\n          {\n            flex: '0 1 100%',\n          },\n      ),\n      rules.add(\n          [{ u: [':', 'host'], $: Nav__qualifier }, { e: 'a', $: Nav__qualifier }],\n          settings.keepThru(navLinkStyle),\n      ),\n      rules.add(\n          [{ u: [':', 'host'], $: Nav__qualifier }, { e: 'a', c: ['active', Wesib__NS], $: Nav__qualifier }],\n          settings.keepThru(activeNavLinkStyle),\n      ),\n  );\n}\n\nfunction navStyle(\n    {\n      $fontSize,\n    }: ThemeSettings,\n): StypProperties {\n  return {\n    padding: 0,\n    margin: `0 ${$fontSize.div(2)} 0 0`,\n  };\n}\n\nexport function navLinkBackground({ $bgColor }: ThemeSettings): StypColor {\n  return $bgColor.hsl.set(({ l }) => ({ l: l * 0.8 }));\n}\n\nfunction navLinkStyle(\n    settings: ThemeSettings,\n): StypProperties {\n\n  const { $fontSize } = settings;\n\n  return {\n    display: 'block',\n    margin: 0,\n    padding: `${$fontSize.div(2)} ${$fontSize}`,\n    border: 0,\n    outline: 0,\n    background: navLinkBackground(settings),\n  };\n}\n\nfunction activeNavLinkStyle(\n    {\n      $fontSize,\n      $color,\n      $bgColor,\n    }: ThemeSettings,\n): StypProperties {\n\n  const borderW = StypLengthPt.of(4, 'px');\n\n  return {\n    background: $bgColor,\n    borderLeft: `${borderW} solid ${$color}`,\n    paddingLeft: $fontSize.sub(borderW),\n  };\n}\n","import { QualifiedName } from '@proc7ts/namespace-aliaser';\nimport { stypRules, StypRules } from '@proc7ts/style-producer';\nimport { ProduceStyle, Theme } from '@wesib/generic/styp';\nimport { BootstrapContext, Component, ComponentContext } from '@wesib/wesib';\nimport { Examples__NS } from '../examples.ns';\nimport { mediaStyle, ThemeSettings } from '../theme';\nimport { MainComponent, mainStyle } from './main.component';\nimport { NavComponent } from './nav.component';\n\n@Component({\n  name: ['container', Examples__NS],\n  feature: {\n    needs: [\n      MainComponent,\n      NavComponent,\n    ],\n  },\n})\nexport class ContainerComponent {\n\n  constructor(private readonly _context: ComponentContext) {\n  }\n\n  @ProduceStyle()\n  async style(): Promise<StypRules> {\n\n    const { elementDef: { name: mainName } } = await this._context.get(BootstrapContext).whenDefined(MainComponent);\n\n    return this._context.get(Theme).style(ContainerStyle(mainName!));\n  }\n\n}\n\nconst Container__qualifier = 'bex:container';\n\nfunction ContainerStyle(mainName: QualifiedName): (theme: Theme) => StypRules {\n  return theme => {\n\n    const settings = theme.ref(ThemeSettings).read();\n    const { root: { rules } } = theme;\n\n    return stypRules(\n        rules.add(\n            { u: [':', 'host'], $: Container__qualifier },\n            {\n              height: '100%',\n              display: 'flex',\n              flexFlow: 'row wrap',\n              alignItems: 'stretch',\n              alignContent: 'flex-start',\n            },\n        ).add(\n            settings.keepThru(mediaStyle),\n        ),\n        rules.add(\n            { u: [':', 'host'], $: [Container__qualifier, '@media:sm'] },\n            {\n              height: 'auto',\n            },\n        ),\n        rules.add(\n            [{ u: [':', 'host'], $: Container__qualifier }, { e: mainName, $: Container__qualifier }],\n            settings.keepThru(mainStyle),\n        ),\n    );\n  };\n}\n","import { InputAspects__NS } from '@proc7ts/input-aspects';\nimport { mixStypColors, StypProperties, stypRules, StypRules } from '@proc7ts/style-producer';\nimport { Theme } from '@wesib/generic/styp';\nimport { FormThemeSettings } from './form.theme-settings';\n\nexport function InputStyle(theme: Theme): StypRules {\n\n  const formSettings = theme.ref(FormThemeSettings).read();\n  const { root: { rules } } = theme;\n\n  return stypRules(\n      rules.add({ e: 'input' }, formSettings.thru(inStyle)),\n      rules.add({ e: 'input', s: '[readonly]' }, formSettings.thru(readonlyInStyle)),\n      rules.add({ e: 'input', s: '[disabled]' }, formSettings.thru(readonlyInStyle)),\n      rules.add({ e: 'input', s: ':focus' }, formSettings.thru(focusedInStyle)),\n      rules.add(\n          {\n            e: 'input',\n            c: [\n              ['invalid', InputAspects__NS],\n              ['touched', InputAspects__NS],\n            ],\n          },\n          formSettings.keepThru(invalidInStyle),\n      ),\n      rules.add(\n          {\n            e: 'input',\n            c: [\n              ['missing', InputAspects__NS],\n              ['touched', InputAspects__NS],\n            ],\n          },\n          {\n            outlineStyle: 'dotted',\n          },\n      ),\n      rules.add(\n          {\n            e: 'input',\n            c: [\n              ['incomplete', InputAspects__NS],\n              ['touched', InputAspects__NS],\n            ],\n          },\n          {\n            outlineStyle: 'dotted',\n          },\n      ),\n  );\n}\n\nexport function inStyle(\n    {\n      $color,\n      $fontFace,\n      $fontSize,\n      $lineHeight,\n      $fontWeight,\n      $marginV,\n      $marginH,\n      $paddingV,\n      $paddingH,\n      $bgColor,\n      $borderColor,\n      $borderW,\n    }: FormThemeSettings,\n): StypProperties {\n  return {\n    color: $color,\n    font: `normal ${$fontWeight} ${$fontSize}/${$lineHeight} ${$fontFace}`,\n    padding: `${$paddingV} ${$paddingH}`,\n    margin: `${$marginV} ${$marginH}`,\n    backgroundColor: $bgColor,\n    border: '0 none',\n    outline: `${$borderW} solid ${$borderColor}`,\n    boxShadow: 'inset 1px 1px 2px -2px black',\n    boxSizing: 'border-box',\n    width: '100%',\n  };\n}\n\nexport function readonlyInStyle(\n    {\n      $roBgColor,\n    }: FormThemeSettings,\n): StypProperties {\n  return {\n    backgroundColor: $roBgColor,\n  };\n}\n\nfunction focusedInStyle(\n    {\n      $color,\n      $borderColor,\n    }: FormThemeSettings,\n): StypProperties {\n  return {\n    outlineColor: mixStypColors($borderColor, $color, 0.5),\n  };\n}\n\nfunction invalidInStyle(\n    {\n      $color,\n      $borderW,\n      $borderColor,\n    }: FormThemeSettings,\n): StypProperties {\n  return {\n    outline: `${$borderW.mul(2)} dashed ${mixStypColors($borderColor, $color, 0.25)}`,\n  };\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ComponentContext, ComponentProperty, ComponentPropertyDecorator } from '../../component';\nimport { ComponentClass } from '../../component/definition';\nimport { AttributeDef } from './attribute-def';\nimport { AttributeDescriptor } from './attribute-descriptor';\nimport { parseAttributeDescriptor } from './attribute-descriptor.impl';\nimport { AttributesSupport } from './attributes-support.feature';\n\n/**\n * Creates a decorator for component's property that accesses custom element's attribute.\n *\n * The decorated property accesses corresponding attribute on read, and updates it on setting. `null` value corresponds\n * to absent attribute. Setting to `null` removes corresponding attribute.\n *\n * This decorator automatically enables [[AttributesSupport]] feature.\n *\n * @category Feature\n * @typeparam T  A type of decorated component class.\n * @param def  Attribute definition or just an attribute name (either _camelCase_ or _dash-style_).\n *\n * @return Component property decorator.\n */\nexport function Attribute<T extends ComponentClass>(\n    def?: AttributeDef<InstanceType<T>> | string,\n): ComponentPropertyDecorator<string | null, T> {\n  return ComponentProperty(({ type, key }) => {\n\n    const descriptor = parseAttributeDescriptor(type.prototype, key, def);\n    const { name } = descriptor;\n\n    return {\n      componentDef: {\n        feature: {\n          needs: AttributesSupport,\n        },\n        setup(setup) {\n          setup.perDefinition({ a: AttributeDescriptor, is: descriptor });\n        },\n      },\n      get(component: InstanceType<T>): string | null {\n        return ComponentContext.of(component).element.getAttribute(name);\n      },\n      set(component: InstanceType<T>, newValue: string | null) {\n\n        const { element }: { element: Element } = ComponentContext.of(component);\n\n        if (newValue != null) {\n          element.setAttribute(name, newValue);\n        } else {\n          element.removeAttribute(name);\n        }\n      },\n    };\n  });\n}\n","import { ComponentClass } from '../../component/definition';\nimport { AttributeDef } from './attribute-def';\nimport { AttributeChangedCallback, AttributeDescriptor } from './attribute-descriptor';\nimport { attributeStateUpdate } from './attribute-state-update.impl';\nimport { property2attributeName } from './property2attribute-name';\n\n/**\n * @internal\n */\nexport function parseAttributeDescriptor<T extends ComponentClass>(\n    target: InstanceType<T>,\n    propertyKey: string | symbol,\n    opts?: AttributeDef<InstanceType<T>> | string,\n): AttributeDescriptor<InstanceType<T>> {\n\n  let name: string;\n  let change: AttributeChangedCallback<InstanceType<T>>;\n\n  if (typeof opts === 'string') {\n    name = property2attributeName(opts);\n    change = attributeStateUpdate(name);\n  } else {\n    if (opts && opts.name) {\n      name = property2attributeName(opts.name);\n    } else if (typeof propertyKey !== 'string') {\n      throw new TypeError(\n          'Attribute name is required as property key is not a string: '\n          + `${target.constructor.name}.prototype.${String(propertyKey)}`,\n      );\n    } else {\n      name = property2attributeName(propertyKey);\n    }\n\n    change = attributeStateUpdate(name, opts && opts.updateState);\n  }\n\n  return { name, change };\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { RenderExecution } from '@proc7ts/render-scheduler';\nimport { ComponentProperty, ComponentPropertyDecorator } from '../../component';\nimport { ComponentClass } from '../../component/definition';\nimport { StateSupport } from '../state';\nimport { ElementRenderCtl } from './element-render-ctl';\nimport { ElementRenderer } from './element-renderer';\nimport { RenderDef } from './render-def';\n\n/**\n * Component property decorator that declares a rendering method for the component.\n *\n * The decorated method call will be scheduled by [[DefaultRenderScheduler]] once component state updated.\n *\n * The decorated method should have no arguments. It may return either nothing, or a function. In the latter case the\n * returned function will be called immediately to render the element. It may, in turn, return a renderer function,\n * and so on.\n *\n * This decorator automatically enables [[StateSupport]] feature.\n *\n * Enables rendering with {@link ElementRenderCtl.renderBy element render control}.\n *\n * @category Feature\n * @typeparam T  A type of decorated component class.\n * @param def  Non-mandatory render definition.\n *\n * @returns Component method decorator.\n */\nexport function Render<T extends ComponentClass>(\n    def?: RenderDef,\n): ComponentPropertyDecorator<(execution: RenderExecution) => ElementRenderer | void, T> {\n  return ComponentProperty(({ get }) => ({\n    componentDef: {\n      feature: {\n        needs: StateSupport,\n      },\n      define(defContext) {\n        defContext.whenComponent(context => {\n          context.whenReady(() => {\n\n            const { component } = context;\n            const renderer = get(component).bind(component);\n\n            context.get(ElementRenderCtl).renderBy(renderer, def);\n          });\n        });\n      },\n    },\n  }));\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { Class } from '../../common';\nimport { Component, ComponentContext, ComponentDecorator, ContentRoot } from '../../component';\nimport { ComponentClass } from '../../component/definition';\nimport { ShadowContentRoot } from './shadow-content-root';\nimport { ShadowDomSupport } from './shadow-dom-support.feature';\nimport { ShadowRootBuilder } from './shadow-root-builder';\n\n/**\n * @internal\n */\nconst defaultShadowContentDef: ShadowContentDef = { mode: 'open' };\n\n/**\n * Shadow content root definition.\n *\n * This is a readonly component shadow root initialization options.\n *\n * @category Feature\n */\nexport type ShadowContentDef = Readonly<ShadowRootInit>;\n\n/**\n * Creates a component decorator that attaches shadow root to decorated component instance.\n *\n * The returned component decorator enables [[ShadowDomSupport]] feature and attaches shadow content root to the\n * component.\n *\n * @category Feature\n * @typeparam T  A type of decorated component class.\n * @param def  Shadow content root definition. Uses `mode: 'open'` by default.\n *\n * @returns New component decorator.\n */\nexport function AttachShadow<T extends ComponentClass = Class>(\n    def: ShadowContentDef = defaultShadowContentDef,\n): ComponentDecorator<T> {\n  return Component({\n    setup(setup) {\n      setup.perComponent(\n          {\n            a: ShadowContentRoot,\n            by(ctx: ComponentContext<InstanceType<T>>) {\n              return ctx.get(ShadowRootBuilder)(ctx, def);\n            },\n          },\n      );\n      setup.perComponent({ // Content root is an alias of shadow root when present.\n        a: ContentRoot,\n        by(context: ComponentContext<InstanceType<T>>) {\n          return context.get(ShadowContentRoot, { or: null });\n        },\n      });\n    },\n    feature: { needs: ShadowDomSupport },\n  });\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/input-aspects\n */\nimport { InConverter } from '../converter';\nimport { InElement } from '../element.control';\nimport { AbstractInElement } from './abstract-element.control';\n\n/**\n * Textual input control.\n *\n * @category Control\n */\nexport type InText = InElement<string, InText.Element>;\n\nexport namespace InText {\n\n  /**\n   * Text input element.\n   *\n   * Either `<input>`, `<textarea>`, or `<select>`.\n   */\n  export type Element = HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement;\n\n}\n\n/**\n * Creates control for the given textual input element.\n *\n * Note that this won't work for files, checkboxes, or radio buttons.\n *\n * For `<select multiple>` this would only reflect the first option. Consider to use `inSelect()` for multi-selects.\n *\n * @category Control\n * @param element  Target text input element.\n * @param aspects  Input aspects applied by default. These are aspect converters to constructed control\n * from the {@link inValueOf same-valued one}.\n *\n * @return New textual input control instance.\n */\nexport function inText(\n    element: InText.Element,\n    {\n      aspects,\n    }: {\n      readonly aspects?: InConverter.Aspect<string> | readonly InConverter.Aspect<string>[];\n    } = {},\n): InText {\n  return new AbstractInElement(\n      element,\n      {\n        get(): string {\n          return this.element.value;\n        },\n        set(value) {\n          this.element.value = value;\n        },\n        aspects,\n      },\n  );\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/input-aspects\n */\nimport { nextArgs } from '@proc7ts/call-thru';\nimport { EventKeeper } from '@proc7ts/fun-events';\nimport { InControl } from '../control';\nimport { InValidation } from './validation.aspect';\nimport { InValidator } from './validator';\n\n/**\n * Creates input validator that requires value to present.\n *\n * Reports empty (falsy) values with `missing` message code.\n *\n * @category Validation\n */\nexport function requirePresent(): InValidator<any>;\n\n/**\n * Input validator that requires value to present.\n *\n * Reports empty (falsy) values with `missing` message code.\n */\nexport function requirePresent(control: InControl<any>): EventKeeper<InValidation.Message[]>;\n\nexport function requirePresent(\n    control?: InControl<any>,\n): InValidator<any> | EventKeeper<InValidation.Message[]> {\n  return control\n      ? control.read().keepThru(value => value ? nextArgs() : { missing: 'missing' })\n      : requirePresent;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic/input\n */\nimport { nextArg, nextArgs, NextCall } from '@proc7ts/call-thru';\nimport {\n  afterAll,\n  EventKeeper,\n  EventSupply,\n  eventSupplyOf,\n  nextAfterEvent,\n  OnEventCallChain,\n} from '@proc7ts/fun-events';\nimport { InControl, InConverter } from '@proc7ts/input-aspects';\nimport { Class, Component, ComponentClass, ComponentContext, ComponentDecorator, StateSupport } from '@wesib/wesib';\nimport { HierarchyContext } from '../hierarchy';\nimport { DefaultInAspects } from './default-in-aspects';\nimport { inputFromControl, InputFromControl, NoInputFromControl } from './input-from-control';\n\n/**\n * Constructs component decorator that converts input control from {@link HierarchyContext.up enclosing component}\n * and uses it as an {@link InputFromControl origin of user input} in decorated component.\n *\n * Enables `StateSupport` feature.\n *\n * @param convert  Input control converter definition.\n *\n * @returns New component decorator.\n */\nexport function ConvertInput<T extends ComponentClass = Class>(\n    convert: ConvertInputDef<InstanceType<T>>,\n): ComponentDecorator<T> {\n  return Component({\n    feature: {\n      needs: StateSupport,\n    },\n    define(defContext) {\n      defContext.whenComponent(context => {\n\n        const { up } = context.get(HierarchyContext);\n\n        afterAll({\n          parent: up().keepThru_(\n              upper => upper ? nextAfterEvent(upper.get(InputFromControl)) : nextArg<NoInputFromControl>({}),\n          ),\n          aspects: context.get(DefaultInAspects),\n        }).keepThru_(\n            ({\n              parent: [control],\n              aspects: [aspects],\n            }): NextCall<OnEventCallChain, [InControl<any>?, EventSupply?]> => {\n              if (control.control) {\n\n                const converted = convert({ control, context, aspects });\n\n                if (converted) {\n                  return converted instanceof InControl\n                      ? nextArgs(converted)\n                      : nextAfterEvent(converted);\n                }\n              }\n\n              return nextArgs();\n            },\n        ).consume(\n            (control?: InControl<any> | null, supply?: EventSupply) => {\n              if (!control) {\n                return;\n              }\n\n              const usageSupply = inputFromControl(context, control);\n\n              (supply || eventSupplyOf(control)).needs(usageSupply);\n\n              return usageSupply;\n            },\n        );\n      });\n    },\n  });\n}\n\n/**\n * Converter definition of enclosing component's user input control.\n *\n * The returned converted control keeper may send an event supply as a second parameter. This supply will be cut off\n * once the input from converted control is no longer needed. Otherwise the control's input supply will be cut off\n * instead, and control would become unusable after that.\n *\n * Configures {@link ConvertInput @ConvertInput} component decorator.\n */\nexport type ConvertInputDef<T extends object = any> =\n/**\n * @param control  Enclosing component's user input to convert.\n * @param context  Decorated component context.\n * @param aspects  Default input aspect converter. This is a value of [[DefaultInAspects]].\n *\n * @returns Either input control, its keeper, or nothing.\n */\n    (\n        this: void,\n        {\n          control,\n          context,\n          aspects,\n        }: {\n          control: InputFromControl;\n          context: ComponentContext<T>;\n          aspects: InConverter.Aspect<any, any>;\n        },\n    ) => InControl<any> | EventKeeper<[InControl<any>?, EventSupply?]> | null | undefined;\n","/**\n * @packageDocumentation\n * @module @proc7ts/call-thru\n */\nimport { CallChain } from '../call-chain';\nimport { nextCall, NextCall } from '../next-call';\n\n/**\n * A special [[NextCall]] indicating the rest of the steps are skipped.\n *\n * @typeparam Result  Call chain result type.\n */\nexport type NextSkip<Result = undefined> = NextCall<CallChain, never, Result>;\n\n/**\n * Builds a next call that skips the rest of the chain.\n *\n * This has the same effect as {@link nextReturn `nextReturn(undefined)`}.\n */\nexport const nextSkip: NextSkip = (/*#__PURE__*/ nextCall(chain => chain.skip()));\n","/**\n * @packageDocumentation\n * @module @proc7ts/context-values\n */\nimport { ContextRef } from './context-ref';\nimport { ContextSeeder } from './context-seeder';\nimport { ContextValues } from './context-values';\n\n/**\n * A symbol of the property containing a [[ContextKey]] instance.\n */\nexport const ContextKey__symbol = /*#__PURE__*/ Symbol('context-key');\n\n/**\n * Context value key.\n *\n * Every key should be an unique instance of this class.\n *\n * Multiple source values pay be provided per per value key. They all grouped into single seed.\n * The value is grown from this seed by [[ContextKey.grow]] method.\n *\n * @typeparam Value  Context value type.\n * @typeparam Src  Source value type.\n * @typeparam Seed  Value seed type.\n */\nexport abstract class ContextKey<Value, Src = Value, Seed = unknown> implements ContextRef<Value, Src> {\n\n  /**\n   * Human-readable key name.\n   *\n   * This is not necessarily unique.\n   */\n  readonly name: string;\n\n  /**\n   * A key of context value holding a seed of the value associated with this key.\n   *\n   * Different context value keys may have the same [[seedKey]] to grow them from the same seed.\n   */\n  abstract readonly seedKey: ContextSeedKey<Src, Seed>;\n\n  /**\n   * Constructs context value key.\n   *\n   * @param name  Human-readable key name.\n   */\n  protected constructor(name: string) {\n    this.name = name;\n  }\n\n  /**\n   * Always the key itself.\n   *\n   * This is to use this context value key both as a context value request and its definition target.\n   */\n  get [ContextKey__symbol](): this {\n    return this;\n  }\n\n  /**\n   * Grows context value out of its seed.\n   *\n   * @typeparam Ctx  Context type.\n   * @param opts  Context value growth options.\n   *\n   * @returns Single context value, or `undefined` if there is no default value.\n   */\n  abstract grow<Ctx extends ContextValues>(opts: ContextValueOpts<Ctx, Value, Src, Seed>): Value | null | undefined;\n\n  toString(): string {\n    return `ContextKey(${this.name})`;\n  }\n\n}\n\n/**\n * Context value growth options.\n *\n * An instance of these options is passed to [[ContextKey.grow]] method to provide the necessary value growth context.\n *\n * @typeparam Ctx  Context type.\n * @typeparam Value  Context value type.\n * @typeparam Src  Source value type.\n * @typeparam Seed  Value seed type.\n */\nexport interface ContextValueOpts<Ctx extends ContextValues, Value, Src, Seed> {\n\n  /**\n   * Target context.\n   */\n  readonly context: Ctx;\n\n  /**\n   * Context value seeder.\n   */\n  readonly seeder: ContextSeeder<Ctx, Src, Seed>;\n\n  /**\n   * Context value seed.\n   */\n  readonly seed: Seed;\n\n  /**\n   * A fallback value to use if there is no value associated with the given key.\n   *\n   * Can be `null` or `undefined`.\n   */\n  readonly or?: Value | null;\n\n  /**\n   * Handles missing context value.\n   *\n   * It can be called to prefer a fallback value over the default one specified in the value key.\n   *\n   * @param defaultProvider  Default value provider. It is called unless a fallback value is specified.\n   * If it returns a non-null/non-undefined value, then the returned value will be associated with the context key.\n   */\n  byDefault(defaultProvider: () => Value | null | undefined): Value | null | undefined;\n\n}\n\n/**\n * A provider of default value of context key.\n *\n * This is typically passed as `byDefault` option to context value key constructor.\n *\n * @typeparam Ctx  Context type.\n * @typeparam Value  Context value type.\n * @typeparam Key  Context key type.\n */\nexport type ContextKeyDefault<Value, Key extends ContextKey<any, any, any>> =\n/**\n * @param context  Target context.\n * @param key  Context value key the default value is provided for.\n *\n * @return Either constructed value, or `null`/`undefined` if unknown.\n */\n    (this: void, context: ContextValues, key: Key) => Value | null | undefined;\n\n/**\n * A key of context value holding a seed of context value.\n *\n * @typeparam Src  Source value type.\n * @typeparam Seed  Value seed type.\n */\nexport abstract class ContextSeedKey<Src, Seed> extends ContextKey<Seed, Src, Seed> {\n\n  /**\n   * Constructs context value sources key.\n   *\n   * @param key  A key of context value having its sources associated with this key.\n   */\n  constructor(key: ContextKey<any, Src>) {\n    super(`${key.name}:seed`);\n  }\n\n  /**\n   * Always refers to itself.\n   */\n  get seedKey(): this {\n    return this;\n  }\n\n  /**\n   * Creates a seeder for values associated with this key.\n   *\n   * @typeparam Ctx  Context type.\n   *\n   * @returns New value seeder instance.\n   */\n  abstract seeder<Ctx extends ContextValues>(): ContextSeeder<Ctx, Src, Seed>;\n\n  grow<Ctx extends ContextValues>(opts: ContextValueOpts<Ctx, Seed, Src, Seed>): Seed | null | undefined {\n\n    const { seeder, seed } = opts;\n\n    return seeder.isEmpty(seed) ? opts.byDefault(() => seed) : seed;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/context-values\n */\nimport { ContextKey } from './context-key';\n\n/**\n * An error indicating the absence of context value with the given key.\n */\nexport class ContextKeyError extends Error {\n\n  /**\n   * A missing value key.\n   */\n  readonly key: ContextKey<any, any, any>;\n\n  /**\n   * Constructs an invalid context key error.\n   *\n   * @param key  Missing value key.\n   * @param message  Arbitrary error message.\n   */\n  constructor(key: ContextKey<any, any, any>, message = `There is no value with key ${key}`) {\n    super(message);\n    this.key = key;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/context-values\n */\nimport { ContextRequest } from './context-ref';\n\n/**\n * The values available from context.\n *\n * The values are available by their keys.\n */\nexport abstract class ContextValues {\n\n  /**\n   * Returns a value associated with the given key.\n   *\n   * @typeparam Value  A type of associated value.\n   * @param request  Context value request with target key.\n   * @param opts  Context value request options.\n   *\n   * @returns Associated value or `null` when there is no associated value.\n   */\n  abstract get<Value>(request: ContextRequest<Value>, opts: ContextRequest.OrNull<Value>): Value | null;\n\n  /**\n   * Returns a value associated with the given key.\n   *\n   * @typeparam Value  A type of associated value.\n   * @param request  Context value request with target key.\n   * @param opts  Context value request options.\n   *\n   * @returns Associated value or `undefined` when there is no associated value.\n   */\n  abstract get<Value>(request: ContextRequest<Value>, opts: ContextRequest.OrUndefined<Value>): Value | undefined;\n\n  /**\n   * Returns a value associated with the given key.\n   *\n   * @typeparam Value  A type of associated value.\n   * @param request  Context value request with target key.\n   * @param opts  Context value request options.\n   *\n   * @returns Associated value. Or the default one when there is no associated value. Or key default when there is\n   * neither.\n   *\n   * @throws Error  If there is no value associated with the given key, the default value is not provided,\n   * and the key has no default value.\n   */\n  abstract get<Value>(request: ContextRequest<Value>, opts?: ContextRequest.OrFallback<Value>): Value;\n\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/context-values\n */\nimport { noop } from '@proc7ts/call-thru';\nimport { ContextKey, ContextKey__symbol, ContextSeedKey, ContextValueOpts } from './context-key';\nimport { ContextKeyError } from './context-key-error';\nimport { ContextRef, ContextRequest } from './context-ref';\nimport { ContextSeeder, ContextSeeds } from './context-seeder';\nimport { contextValueSpec, ContextValueSpec } from './context-value-spec';\nimport { ContextValues } from './context-values';\n\n/**\n * @internal\n */\ntype SeedFactory<Ctx extends ContextValues, Seed> = (this: void, context: Ctx) => Seed;\n\n/**\n * @internal\n */\ntype Seeding<Ctx extends ContextValues, Src, Seed> = [ContextSeeder<Ctx, Src, Seed>, SeedFactory<Ctx, Seed>];\n\n/**\n * A registry of context value providers.\n *\n * @typeparam Ctx  Context type.\n */\nexport class ContextRegistry<Ctx extends ContextValues = ContextValues> {\n\n  /** @internal */\n  private readonly _initial: ContextSeeds<Ctx>;\n\n  /** @internal */\n  private readonly _seeds = new Map<ContextSeedKey<any, any>, Seeding<Ctx, any, any>>();\n\n  /** @internal */\n  private _nonCachedValues?: ContextValues;\n\n  /**\n   * Constructs a registry for context value providers.\n   *\n   * It can be chained with another registry by providing an initially known source of known context values.\n   *\n   * @param initial  An optional source of initially known context values. This can be either a function, or\n   * `ContextValues` instance.\n   */\n  constructor(initial?: ContextSeeds<Ctx> | ContextValues) {\n    if (initial == null) {\n      this._initial = noop;\n    } else if (typeof initial === 'function') {\n      this._initial = initial;\n    } else {\n      this._initial = seedKey => initial.get(seedKey);\n    }\n  }\n\n  /**\n   * Provides context value.\n   *\n   * @typeparam Deps  Dependencies tuple type.\n   * @typeparam Src  Source value type.\n   * @typeparam Seed  Value seed type.\n   * @param spec  Context value specifier.\n   *\n   * @returns A function that removes the given context value specifier when called.\n   */\n  provide<Deps extends any[], Src, Seed>(spec: ContextValueSpec<Ctx, any, Deps, Src, Seed>): () => void {\n\n    const { a: { [ContextKey__symbol]: { seedKey } }, by } = contextValueSpec(spec);\n    const [seeder] = this._seeding<Src, Seed>(seedKey);\n\n    return seeder.provide(by);\n  }\n\n  /**\n   * @internal\n   */\n  private _seeding<Src, Seed>(seedKey: ContextSeedKey<Src, Seed>): Seeding<Ctx, Src, Seed> {\n\n    const found: Seeding<Ctx, Src, Seed> | undefined = this._seeds.get(seedKey);\n\n    if (found) {\n      return found;\n    }\n\n    const seeder: ContextSeeder<Ctx, Src, Seed> = seedKey.seeder();\n    const factory: SeedFactory<Ctx, Seed> = context => seeder.seed(context, this._initial(seedKey, context));\n    const seeding: Seeding<Ctx, Src, Seed> = [seeder, factory];\n\n    this._seeds.set(seedKey, seeding);\n\n    return seeding;\n  }\n\n  /**\n   * Creates a seed for the given key in target context.\n   *\n   * @param context  Target context.\n   * @param key  Context value seed key.\n   *\n   * @returns New context value seed.\n   */\n  seed<Src, Seed>(context: Ctx, key: ContextSeedKey<Src, Seed>): Seed {\n\n    const [, factory] = this._seeding(key);\n\n    return factory(context);\n  }\n\n  /**\n   * Builds context seeds provider that binds seeds to target `context`.\n   *\n   * @param context  Target value context.\n   * @param cache  Whether to cache context values. When `false` the value providers may be called multiple times.\n   *\n   * @returns A provider of context value seeds bound to the given `context`.\n   */\n  seedIn(context: Ctx, cache?: boolean): <Src, Seed>(this: void, key: ContextSeedKey<Src, Seed>) => Seed | undefined {\n    return this.newValues(cache).get.bind(context);\n  }\n\n  /**\n   * Creates new context values instance consulting this registry for value providers.\n   *\n   * @param cache  Whether to cache context values. When `false` the value providers may be called multiple times.\n   *\n   * @returns New context values instance which methods expect `this` instance to be a context the values provided for.\n   */\n  newValues(cache = true): ContextValues & ThisType<Ctx> {\n    if (!cache && this._nonCachedValues) {\n      return this._nonCachedValues;\n    }\n\n    const values = new Map<ContextKey<any>, any>();\n    const registry = this;\n\n    class Values extends ContextValues {\n\n      get<Value, Src>(\n          this: Ctx,\n          { [ContextKey__symbol]: key }: ContextRef<Value, Src>,\n          opts?: ContextRequest.Opts<Value>,\n      ): Value | null | undefined {\n\n        const context = this;\n        const cached: Value | undefined = values.get(key);\n\n        if (cached != null) {\n          return cached;\n        }\n\n        const [constructed, defaultUsed] = growValue(context, key, opts);\n\n        if (cache && !defaultUsed) {\n          values.set(key, constructed);\n        }\n\n        return constructed;\n      }\n\n    }\n\n    if (!cache) {\n      return this._nonCachedValues = new Values();\n    }\n\n    return new Values();\n\n    function growValue<Value, Src, Seed>(\n        context: Ctx,\n        key: ContextKey<Value, Src, Seed>,\n        opts: ContextRequest.Opts<Value> | undefined,\n    ): [Value | null | undefined, boolean] {\n\n      const [seeder, seed] = findSeed<Src, Seed>(context, key);\n      let defaultUsed = false;\n\n      const valueOpts: {\n        -readonly [K in keyof ContextValueOpts<Ctx, Value, Src, Seed>]: ContextValueOpts<Ctx, Value, Src, Seed>[K];\n      } = {\n        context,\n        seeder,\n        seed,\n        byDefault: (opts && 'or' in opts)\n            ? () => {\n              defaultUsed = true;\n              return opts.or;\n            }\n            : defaultProvider => {\n\n              const defaultValue = defaultProvider();\n\n              if (defaultValue == null) {\n                throw new ContextKeyError(key);\n              }\n\n              return defaultValue;\n            },\n      };\n\n      if (opts && 'or' in opts) {\n        valueOpts.or = opts.or;\n      }\n\n      return [\n        key.grow(valueOpts),\n        defaultUsed,\n      ];\n    }\n\n    function findSeed<Src, Seed>(\n        context: Ctx,\n        key: ContextKey<any, Src, Seed>,\n    ): [ContextSeeder<Ctx, Src, Seed>, Seed] {\n\n      const { seedKey } = key;\n      const [seeder, factory] = registry._seeding(seedKey);\n\n      if (seedKey !== key as any) {\n        // This is not a seed key\n        // Retrieve the seed by seed key\n        return [seeder, context.get(seedKey)];\n      }\n\n      return [seeder, factory(context)];\n    }\n  }\n\n  /**\n   * Appends values provided by another value registry to the ones provided by this one.\n   *\n   * @param other  Another context value registry.\n   *\n   * @return New context value registry which values provided by both registries.\n   */\n  append(other: ContextRegistry<Ctx>): ContextRegistry<Ctx> {\n    return new ContextRegistry(<Src, Seed>(key: ContextSeedKey<Src, Seed>, context: Ctx) => {\n\n      const [seeder, factory] = this._seeding(key);\n\n      return seeder.combine(factory(context), other.seed(context, key), context);\n    });\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/context-values\n */\nimport { valuesProvider } from '@proc7ts/call-thru';\nimport { ContextKey, ContextKeyDefault, ContextSeedKey, ContextValueOpts } from './context-key';\nimport { ContextRef } from './context-ref';\nimport { ContextValues } from './context-values';\nimport { IterativeContextKey } from './iterative-context-key';\n\n/**\n * Multiple context value reference.\n *\n * Represents context value as read-only array of source values.\n *\n * @typeparam Src  Value source type and context value item type.\n */\nexport type MultiContextRef<Src> = ContextRef<readonly Src[], Src>;\n\n/**\n * Multiple context values key.\n *\n * Represents context value as read-only array of source values.\n *\n * Associated with empty array by default.\n *\n * @typeparam Src  Value source type and context value item type.\n */\nexport class MultiContextKey<Src>\n    extends IterativeContextKey<readonly Src[], Src>\n    implements MultiContextRef<Src> {\n\n  /**\n   * A provider of context value used when there is no value associated with this key.\n   */\n  readonly byDefault: ContextKeyDefault<readonly Src[], ContextKey<readonly Src[], Src>>;\n\n  /**\n   * Constructs multiple context values key.\n   *\n   * @param name  Human-readable key name.\n   * @param seedKey  Value seed key. A new one will be constructed when omitted.\n   * @param byDefault  Optional default value provider. If unspecified then the default value is empty array.\n   */\n  constructor(\n      name: string,\n      {\n        seedKey,\n        byDefault = valuesProvider(),\n      }: {\n        seedKey?: ContextSeedKey<Src, Iterable<Src>>;\n        byDefault?: ContextKeyDefault<readonly Src[], ContextKey<readonly Src[], Src>>;\n      } = {},\n  ) {\n    super(name, seedKey);\n    this.byDefault = byDefault;\n  }\n\n  grow<Ctx extends ContextValues>(\n      opts: ContextValueOpts<Ctx, readonly Src[], Src, Iterable<Src>>,\n  ): readonly Src[] | null | undefined {\n\n    const result = Array.from(opts.seed);\n\n    if (result.length) {\n      return result;\n    }\n\n    return opts.byDefault(() => {\n\n      const defaultSources = this.byDefault(opts.context, this);\n\n      if (defaultSources) {\n        return Array.from(defaultSources);\n      }\n\n      return;\n    });\n  }\n\n}\n\n","/**\n * @packageDocumentation\n * @module @proc7ts/context-values\n */\nimport { noop } from '@proc7ts/call-thru';\nimport { ContextKey, ContextKeyDefault, ContextSeedKey, ContextValueOpts } from './context-key';\nimport { ContextRef } from './context-ref';\nimport { ContextValues } from './context-values';\nimport { SimpleContextKey } from './simple-context-key';\n\n/**\n * Single context value reference.\n *\n * @typeparam Value  Context value type.\n */\nexport type SingleContextRef<Value> = ContextRef<Value, Value>;\n\n/**\n * Single context value key.\n *\n * Treats the last source value as context one and ignores the rest of them.\n *\n * @typeparam Value  Context value type.\n */\nexport class SingleContextKey<Value>\n    extends SimpleContextKey<Value>\n    implements SingleContextRef<Value> {\n\n  /**\n   * A provider of context value used when there is no value associated with this key.\n   */\n  readonly byDefault: ContextKeyDefault<Value, ContextKey<Value>>;\n\n  /**\n   * Constructs single context value key.\n   *\n   * @param name  Human-readable key name.\n   * @param seedKey  Value seed key. A new one will be constructed when omitted.\n   * @param byDefault  Optional default value provider. If unspecified or `undefined` the key has no default\n   * value.\n   */\n  constructor(\n      name: string,\n      {\n        seedKey,\n        byDefault = noop,\n      }: {\n        seedKey?: ContextSeedKey<Value, SimpleContextKey.Seed<Value>>;\n        byDefault?: ContextKeyDefault<Value, ContextKey<Value>>;\n      } = {},\n  ) {\n    super(name, seedKey);\n    this.byDefault = byDefault;\n  }\n\n  grow<Ctx extends ContextValues>(\n      opts: ContextValueOpts<Ctx, Value, Value, SimpleContextKey.Seed<Value>>,\n  ): Value | null | undefined {\n\n    const value = opts.seed();\n\n    if (value != null) {\n      return value;\n    }\n\n    return opts.byDefault(() => this.byDefault(opts.context, this));\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/fun-events\n */\nimport { receiveByEach } from './event-notifier.impl';\nimport { eventReceiver, EventReceiver } from './event-receiver';\nimport { eventSupply, EventSupply, EventSupply__symbol, eventSupplyOf, EventSupplyPeer } from './event-supply';\n\n/**\n * Event notifier can be used to register event receivers and send events to them.\n *\n * It does not implement an [[EventSender]] interface though. Use an [[EventEmitter]] if you need one.\n *\n * Manages a list of registered event receivers, and removes them from the list once their supplies\n * are {@link EventSupply.off cut off}.\n *\n * @category Core\n * @typeparam E  An event type. This is a list of event receiver parameter types.\n */\nexport class EventNotifier<E extends any[]> implements EventSupplyPeer {\n\n  /**\n   * @internal\n   */\n  private _rcs?: Set<EventReceiver.Generic<E>>;\n\n  readonly [EventSupply__symbol]: EventSupply;\n\n  /**\n   * Sends the given `event` to all registered receivers.\n   *\n   * @param event  An event to send represented by function call arguments.\n   */\n  readonly send: (this: this, ...event: E) => void;\n\n  constructor() {\n\n    const rcs = this._rcs = new Set<EventReceiver.Generic<E>>();\n\n    this.send = receiveByEach(rcs);\n    this[EventSupply__symbol] = eventSupply(() => {\n      rcs.clear();\n      delete this._rcs;\n    });\n  }\n\n  /**\n   * The number of currently registered event receivers.\n   */\n  get size(): number {\n    return this._rcs ? this._rcs.size : 0;\n  }\n\n  /**\n   * Registers an event receiver.\n   *\n   * Receivers registered with this method will receive the {@link send emitted} events.\n   *\n   * The `[OnEvent__symbol]` method is an alias of this one.\n   *\n   * @param receiver  A receiver of events to register.\n   *\n   * @returns A supply of events to the given `receiver`.\n   */\n  on(receiver: EventReceiver<E>): EventSupply {\n\n    const generic = eventReceiver(receiver);\n    const supply = generic.supply.needs(this);\n    const { _rcs } = this;\n\n    if (_rcs && !supply.isOff) {\n      _rcs.add(generic);\n      supply.whenOff(() => _rcs.delete(generic));\n    }\n\n    return supply;\n  }\n\n  /**\n   * Removes all registered event receivers and cuts off corresponding event supplies.\n   *\n   * After this method call they won't receive any events. While new receivers would be cut off immediately upon\n   * registration.\n   *\n   * @param reason  A reason to stop sending events.\n   *\n   * @returns `this` instance.\n   */\n  done(reason?: any): this {\n    eventSupplyOf(this).off(reason);\n    return this;\n  }\n\n}\n","import { EventReceiver, eventSupply } from '../base';\nimport { OnEvent } from '../on-event';\nimport { once } from './once';\n\nexport function then<E extends any[], TResult1 = E[0], TResult2 = never>(\n    onSource: OnEvent<E>,\n    onEvent?: ((...value: E) => TResult1 | PromiseLike<TResult1>) | undefined | null,\n    onCutOff?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null,\n): Promise<TResult1 | TResult2> {\n  return new Promise((resolve, reject) => {\n    once(onSource)({\n      supply: onCutOff\n          ? eventSupply(reason => {\n            try {\n              resolve(onCutOff(reason));\n            } catch (e) {\n              reject(e);\n            }\n          })\n          : eventSupply(reject),\n      receive: onEvent\n          ? (_ctx, ...event) => {\n            try {\n              resolve(onEvent(...event));\n            } catch (e) {\n              reject(e);\n            }\n          }\n          : ((_ctx: EventReceiver.Context<E>, event: E[0]) => resolve(event)) as any,\n    });\n  });\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/fun-events\n */\nimport { EventNotifier, EventReceiver, EventSender, EventSupply, OnEvent__symbol } from '../base';\nimport { OnEvent, onEventBy } from '../on-event';\n\n/**\n * Event emitter is a handy implementation of [[OnEvent]] sender.\n *\n * Extends [[EventNotifier]] by making its [[EventNotifier.on]] method implement an [[OnEvent]] interface.\n *\n * @category Core\n * @typeparam E  An event type. This is a list of event receiver parameter types.\n */\nexport class EventEmitter<E extends any[]> extends EventNotifier<E> implements EventSender<E> {\n\n  /**\n   * Returns an [[OnEvent]] sender.\n   */\n  on(): OnEvent<E>;\n  on(receiver: EventReceiver<E>): EventSupply;\n  on(receiver?: EventReceiver<E>): OnEvent<E> | EventSupply {\n    return (this.on = onEventBy<E>(receiver => super.on(receiver)).F)(receiver);\n  }\n\n  [OnEvent__symbol](): OnEvent<E> {\n    return this.on();\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/fun-events\n */\nimport { neverReceive } from '../base/impl';\nimport { OnEvent, onEventBy } from '../on-event';\n\n/**\n * An [[OnEvent]] sender that never sends any events.\n *\n * @category Core\n */\nexport const onNever: OnEvent<any> = (/*#__PURE__*/ onEventBy(neverReceive));\n","/**\n * @packageDocumentation\n * @module @proc7ts/fun-events\n */\nimport { noop } from '@proc7ts/call-thru';\nimport { EventSender, eventSupply, EventSupply, OnEvent__symbol } from '../base';\nimport { onEventBy } from '../on-event';\nimport { EventEmitter } from '../senders';\nimport { OnStateUpdate } from './on-state-update';\nimport { statePath, StatePath } from './state-path';\nimport { StateUpdateReceiver } from './state-update-receiver';\n\nclass PathEntry {\n\n  readonly emitter = new EventEmitter<[StatePath, any, any]>();\n  private readonly _nested = new Map<PropertyKey, PathEntry>();\n\n  constructor(private readonly _drop: () => void) {\n    this.emitter.on((path, newValue, oldValue) => {\n      path = statePath(path);\n\n      const key = path[0];\n      const nested = this._nested.get(key);\n\n      if (nested) {\n        nested.emitter.send(path.slice(1), newValue, oldValue);\n      }\n    });\n  }\n\n  on(receiver: StateUpdateReceiver): EventSupply {\n\n    const supply = this.emitter.on(receiver);\n\n    return eventSupply(reason => {\n      supply.off(reason);\n      this._dropIfEmpty();\n    }).needs(supply);\n  }\n\n  nest(key: PropertyKey): PathEntry;\n\n  nest(key: PropertyKey, dontCreateMissing: true): PathEntry | undefined;\n\n  nest(key: PropertyKey, dontCreateMissing?: true): PathEntry | undefined;\n\n  nest(key: PropertyKey, dontCreateMissing?: true): PathEntry | undefined {\n\n    const found = this._nested.get(key);\n\n    if (found || dontCreateMissing) {\n      return found;\n    }\n\n    const created = new PathEntry(() => this._remove(key));\n\n    this._nested.set(key, created);\n\n    return created;\n  }\n\n  done(reason?: any): void {\n    for (const nested of this._nested.values()) {\n      nested.done(reason);\n    }\n    this.emitter.done(reason);\n  }\n\n  private _remove(key: PropertyKey): void {\n    this._nested.delete(key);\n    this._dropIfEmpty();\n  }\n\n  private _dropIfEmpty(): void {\n    if (!this._nested.size && this.emitter.size <= 1) {\n      this._drop();\n    }\n  }\n\n}\n\nclass Trackers {\n\n  private readonly _root = new PathEntry(noop);\n\n  on(path: StatePath.Normalized, receiver: StateUpdateReceiver): EventSupply {\n    return this._entry(path).on(receiver);\n  }\n\n  send<V>(path: StatePath.Normalized, newValue: V, oldValue: V): void {\n    this._root.emitter.send(path, newValue, oldValue);\n  }\n\n  done(path: StatePath.Normalized, reason?: any): void {\n\n    const entry = this._entry(path, true);\n\n    if (entry) {\n      entry.done(reason);\n    }\n  }\n\n  private _entry(path: StatePath.Normalized): PathEntry;\n\n  private _entry(path: StatePath.Normalized, dontCreateMissing: true): PathEntry | undefined;\n\n  private _entry(path: StatePath.Normalized, dontCreateMissing?: true): PathEntry | undefined {\n\n    let entry = this._root;\n\n    for (const key of path) {\n\n      const nested = entry.nest(key, dontCreateMissing);\n\n      if (!nested) {\n        return;\n      }\n\n      entry = nested;\n    }\n\n    return entry;\n  }\n\n}\n\nclass SubStateTracker implements StateTracker {\n\n  readonly update: <V>(\n      this: void,\n      path: StatePath,\n      newValue: V,\n      oldValue: V,\n  ) => void = (<V>(path: StatePath, newValue: V, oldValue: V) => {\n    this._trackers.send([...this._path, ...statePath(path)], newValue, oldValue);\n  });\n\n  constructor(private readonly _trackers: Trackers, private readonly _path: StatePath.Normalized) {\n  }\n\n  get _tracker(): this {\n    return this;\n  }\n\n  onUpdate(): OnStateUpdate;\n  onUpdate(receiver: StateUpdateReceiver): EventSupply;\n  onUpdate(receiver?: StateUpdateReceiver): OnStateUpdate | EventSupply {\n    return (this.onUpdate = onEventBy<[StatePath, any, any]>(\n        receiver => this._trackers.on(this._path, receiver),\n    ).F as OnStateUpdate.Fn)(receiver);\n  }\n\n  [OnEvent__symbol](): OnStateUpdate {\n    return this.onUpdate();\n  }\n\n  track(path: StatePath): SubStateTracker {\n    path = statePath(path);\n    if (!path.length) {\n      return this; // Path to itself.\n    }\n    return new SubStateTracker(this._trackers, [...this._path, ...path]);\n  }\n\n  done(reason?: any): void {\n    this._trackers.done(this._path, reason);\n  }\n\n}\n\n/**\n * State changes tracker.\n *\n * A state is a tree-like structure of sub-states (nodes) available under [[StatePath]].\n *\n * When node modified a [[StateTracker.update]] should be called. Then all state update receivers registered by\n * [[StateTracker.onUpdate]] will receive this update.\n *\n * @category State Tracking\n */\nexport class StateTracker implements EventSender<[StatePath, any, any]> {\n\n  /**\n   * @internal\n   */\n  readonly _tracker: SubStateTracker = new SubStateTracker(new Trackers(), []);\n\n  /**\n   * Builds a {@link OnStateUpdate state updates sender}.\n   *\n   * A state update will be sent to it whenever an `update()` function is called.\n   *\n   * The `[OnEvent__symbol]` property is an alias of this one.\n   *\n   * @returns State updates sender.\n   */\n  onUpdate(): OnStateUpdate;\n\n  /**\n   * Registers a receiver of state updates.\n   *\n   * @param receiver State updates receiver to register.\n   *\n   * @returns A supply of state updates.\n   */\n  onUpdate(receiver: StateUpdateReceiver): EventSupply;\n\n  onUpdate(receiver?: StateUpdateReceiver): OnStateUpdate | EventSupply {\n    return (this.onUpdate = this._tracker.onUpdate().F)(receiver);\n  }\n\n  [OnEvent__symbol](): OnStateUpdate {\n    return this.onUpdate();\n  }\n\n  // noinspection JSCommentMatchesSignature\n  /**\n   * Updates the component state.\n   *\n   * All receivers registered with [[onUpdate]] will receive this update.\n   *\n   * @typeparam V  A type of changed value.\n   * @param key  Changed value key.\n   * @param newValue  New value.\n   * @param oldValue  Previous value.\n   */\n  get update(): <V>(\n      this: void,\n      path: StatePath,\n      newValue: V,\n      oldValue: V,\n  ) => void {\n    return this._tracker.update;\n  }\n\n  /**\n   * Starts tracking of partial state under the given path.\n   *\n   * @param path  A path to state part.\n   *\n   * @return New partial state tracker.\n   */\n  track(path: StatePath): StateTracker {\n\n    const subTracker = this._tracker.track(path);\n\n    return subTracker === this._tracker ? this : subTracker;\n  }\n\n  /**\n   * Unregisters updates receivers and cuts off their supplies.\n   *\n   * After this method call the updates receivers of this partial state and all nested states won't receive any updates.\n   *\n   * @param reason  An optional reason to stop tracking.\n   */\n  done(reason?: any): void {\n    this._tracker.done(reason);\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/fun-events\n */\nimport { AfterEvent, afterEventBy } from '../after-event';\nimport {\n  AfterEvent__symbol,\n  EventKeeper,\n  EventReceiver,\n  EventSender,\n  EventSupplier,\n  EventSupply,\n  EventSupply__symbol,\n  eventSupplyOf,\n  EventSupplyPeer,\n  isEventKeeper,\n  noEventSupply,\n  OnEvent__symbol,\n} from '../base';\nimport { OnEvent } from '../on-event';\nimport { onSupplied } from '../senders';\n\n/**\n * Value accessor and changes tracker.\n *\n * Implements an [[EventSender]] interface by sending value changes to registered receivers as a pair of new and old\n * values.\n *\n * Implements an [[EventKeeper]] interface by sending current value and its updates.\n *\n * @category Value Tracking\n * @typeparam T  Tracked value type.\n */\nexport abstract class ValueTracker<T = any> implements EventSender<[T, T]>, EventKeeper<[T]>, EventSupplyPeer {\n\n  /**\n   * @internal\n   */\n  private _by = noEventSupply();\n\n  /**\n   * Returns [[OnEvent]] sender of value changes.\n   *\n   * The `[OnEvent__symbol]` property is an alias of this one.\n   *\n   * @returns Value changes sender.\n   */\n  abstract on(): OnEvent<[T, T]>;\n\n  /**\n   * Registers a receiver of value changes.\n   *\n   * The new value is sent as first argument, and the old value as a second one.\n   *\n   * @param receiver  A receiver to register.\n   *\n   * @returns A supply of value changes.\n   */\n  abstract on(receiver: EventReceiver<[T, T]>): EventSupply;\n\n  /**\n   * Builds an [[AfterEvent]] keeper of current value.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   *\n   * @returns Current value keeper.\n   */\n  read(): AfterEvent<[T]>;\n\n  /**\n   * Registers a receiver of current values.\n   *\n   * @param receiver  A receiver to register.\n   *\n   * @returns A supply of current value.\n   */\n  read(receiver: EventReceiver<[T]>): EventSupply;\n\n  read(receiver?: EventReceiver<[T]>): AfterEvent<[T]> | EventSupply {\n    return (this.read = afterEventBy<[T]>(\n        receiver => this.on(receiveNewValue(receiver)),\n        () => [this.it],\n    ).F)(receiver);\n  }\n\n  [OnEvent__symbol](): OnEvent<[T, T]> {\n    return this.on();\n  }\n\n  [AfterEvent__symbol](): AfterEvent<[T]> {\n    return this.read();\n  }\n\n  /**\n   * An event supply of this value tracker.\n   */\n  abstract readonly [EventSupply__symbol]: EventSupply;\n\n  /**\n   * The tracked value.\n   */\n  abstract it: T;\n\n  /**\n   * Updates the tracked value by the given value `supplier`.\n   *\n   * If the value is already updated by another supplier, then unbinds from the old one first.\n   *\n   * Call the [[ValueTracker.byNone]] method to unbind the tracked value from the `source`.\n   *\n   * Note that explicitly updating the value would override the value received from the `source`.\n   *\n   * @param supplier  The source value sender or keeper.\n   *\n   * @returns `this` instance.\n   */\n  by(supplier: EventSupplier<[T]>): this;\n\n  /**\n   * Updates the tracked value by value suppliers extracted from events sent by the given `supplier`.\n   *\n   * If the value is already updated by another value supplier, then unbinds from the old one first.\n   *\n   * Call the [[ValueTracker.byNone]] method to unbind the tracked value from the `source`.\n   *\n   * Note that explicitly updating the value would override the value received from the `source`.\n   *\n   * @typeparam S  Source value type.\n   * @param supplier  The event supplier to extract value suppliers from.\n   * @param extract  A function extracting value supplier from event received from `supplier`.\n   * May return `undefined` to suspend receiving values.\n   *\n   * @returns `this` instance.\n   */\n  by<S extends any[]>(\n      supplier: EventSupplier<S>,\n      extract: (this: void, ...event: S) => EventSupplier<[T]> | undefined,\n  ): this;\n\n  by<S extends any[]>(\n      supplier: EventSupplier<S> | EventSupplier<[T]>,\n      extract?: (this: void, ...event: S) => EventSupplier<[T]> | undefined,\n  ): this {\n\n    const acceptValuesFrom = (sender: EventSupplier<[T]>): EventSupply => {\n\n      const onValue = isEventKeeper(sender) ? sender[AfterEvent__symbol]() : sender[OnEvent__symbol]();\n\n      return onValue.to(value => this.it = value);\n    };\n\n    this.byNone();\n    if (!extract) {\n\n      const sender = supplier as EventSupplier<[T]>;\n\n      this._by = acceptValuesFrom(sender);\n    } else {\n\n      const container = supplier as EventSupplier<S>;\n\n      this._by = onSupplied(container).consume((...event: S) => {\n\n        const sender = extract(...event);\n\n        if (sender) {\n          return acceptValuesFrom(sender);\n        }\n\n        return;\n      });\n    }\n\n    this._by.whenOff(() => this._by = noEventSupply());\n\n    return this;\n  }\n\n  /**\n   * Unbinds the tracked value from any value supplier this tracker is {@link ValueTracker.by updated by}.\n   *\n   * If the tracker is not bound then does nothing.\n   *\n   * @param reason  Arbitrary reason of unbinding the value.\n   *\n   * @returns `this` instance.\n   */\n  byNone(reason?: any): this {\n    this._by.off(reason);\n    return this;\n  }\n\n  /**\n   * Removes all registered event receivers and cuts off corresponding event supplies.\n   *\n   * After this method call they won't receive events.\n\n   * @param reason  A reason to stop sending events.\n   *\n   * @returns `this` instance.\n   */\n  done(reason?: any): this {\n    eventSupplyOf(this).off(reason);\n    return this;\n  }\n\n}\n\n/**\n * @internal\n */\nfunction receiveNewValue<T, N extends T>(\n    valueReceiver: EventReceiver.Generic<[T]>,\n): EventReceiver.Generic<[N, T]> {\n  return {\n    supply: valueReceiver.supply,\n    receive(context, newValue) {\n      valueReceiver.receive(\n          {\n            onRecurrent(recurrentReceiver) {\n              context.onRecurrent(recurrentValue => recurrentReceiver(recurrentValue));\n            },\n          },\n          newValue,\n      );\n    },\n  };\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/fun-events\n */\nimport {\n  EventKeeper,\n  EventReceiver,\n  EventSender,\n  EventSupplier,\n  eventSupply,\n  EventSupply,\n  EventSupply__symbol,\n  eventSupplyOf,\n  isEventKeeper,\n} from '../base';\nimport { afterSupplied } from '../keepers';\nimport { OnEvent } from '../on-event';\nimport { EventEmitter, onSupplied } from '../senders';\nimport { ValueTracker } from './value-tracker';\n\n/**\n * Synchronizes tracked values with each other.\n *\n * Any change to any of the added tracked values would update all the others.\n *\n * @category Value Tracking\n */\nexport class ValueSync<T> extends ValueTracker<T> {\n\n  /**\n   * @internal\n   */\n  private readonly _on = new EventEmitter<[T, T]>();\n\n  /**\n   * @internal\n   */\n  private _it: T;\n\n  constructor(initial: T) {\n    super();\n    this._it = initial;\n  }\n\n  on(): OnEvent<[T, T]>;\n  on(receiver: EventReceiver<[T, T]>): EventSupply;\n  on(receiver?: EventReceiver<[T, T]>): OnEvent<[T, T]> | EventSupply {\n    return (this.on = this._on.on().F)(receiver);\n  }\n\n  get [EventSupply__symbol](): EventSupply {\n    return eventSupplyOf(this._on);\n  }\n\n  get it(): T {\n    return this._it;\n  }\n\n  set it(value: T) {\n\n    const old = this.it;\n\n    if (old !== value) {\n      this._it = value;\n      this._on.send(value, old);\n    }\n  }\n\n  /**\n   * Synchronizes the tracked value with the others.\n   *\n   * Applies the value from this sync to the given tracker first.\n   *\n   * @param tracker  A value tracker to keep in sync.\n   *\n   * @returns An event supply. {@link EventSupply.off Cut it off} to break synchronization.\n   */\n  sync(tracker: ValueTracker<T>): EventSupply;\n\n  /**\n   * Synchronizes the tracked value with the others in the given direction.\n   *\n   * @param direction  If set to `\"in\"` the value from the given tracker takes precedence over the one in [[ValueSync]].\n   * Otherwise the value from the sync is applied to the given tracker first.\n   * @param tracker  A value tracker to keep in sync.\n   *\n   * @returns An event supply. {@link EventSupply.off Cut it off} to break synchronization.\n   */\n  sync(direction: 'in' | 'out', tracker: ValueTracker<T>): EventSupply;\n\n  /**\n   * Synchronizes the tracked value with the ones extracted from the events sent by the given `supplier`.\n   *\n   * Once next value tracker extracted the previous one becomes out of sync.\n   *\n   * Applies the value from this sync to extracted trackers.\n   *\n   * @param supplier  The event supplier to extract value trackers from.\n   * @param extract  A function extracting the value tracker to keep in sync from the event received from `supplier`.\n   * May return `undefined` to just break the sync with previous tracker.\n   *\n   * @returns An event supply. {@link EventSupply.off Cut it off} to break synchronization.\n   */\n  sync<U extends any[]>(\n      supplier: EventSupplier<U>,\n      extract: (this: void, ...event: U) => ValueTracker<T> | undefined,\n  ): EventSupply;\n\n  /**\n   * Synchronizes the tracked value with the ones extracted from the events sent by the given `supplier`\n   * in the given direction.\n   *\n   * Once next value tracker extracted the previous one becomes out of sync.\n   *\n   * @param direction  If set to `\"in\"` the value from extracted tracker takes precedence over the one in\n   * [[ValueSync]]. Otherwise the value from the sync is applied to extracted trackers first.\n   * @param supplier  The event supplier to extract value trackers from.\n   * @param extract  A function extracting the value tracker to keep in sync from the event received from `supplier`.\n   * May return `undefined` to just break the sync with previous tracker.\n   *\n   * @returns An event supply. {@link EventSupply.off Cut it off} to break synchronization.\n   */\n  sync<U extends any[]>(\n      direction: 'in' | 'out',\n      supplier: EventSupplier<U>,\n      extract: (this: void, ...event: U) => ValueTracker<T> | undefined,\n  ): EventSupply;\n\n  sync<U extends any[]>(\n      first: 'in' | 'out' | ValueTracker<T> | EventSupplier<U>,\n      second?: ValueTracker<T>\n          | EventSender<U>\n          | EventKeeper<U>\n          | ((this: void, ...event: U) => ValueTracker<T> | undefined),\n      third?: (this: void, ...event: U) => ValueTracker<T> | undefined,\n  ): EventSupply {\n\n    let syncWithTracker = (tracker: ValueTracker<T>): EventSupply => syncTrackers(this, tracker);\n    let source: ValueTracker<T> | EventSupplier<U>;\n    let extract: ((this: void, ...event: U) => ValueTracker<T> | undefined) | undefined;\n\n    if (typeof first === 'string') {\n      if (first === 'in') {\n        syncWithTracker = tracker => syncTrackers(tracker, this);\n      }\n      source = second as ValueTracker<T> | EventSender<U> | EventKeeper<U>;\n      extract = third;\n    } else {\n      source = first;\n      extract = second as (this: void, ...event: U) => ValueTracker<T> | undefined;\n    }\n\n    const extractTracker = extract;\n\n    if (!extractTracker) {\n      return syncWithTracker(source as ValueTracker<T>);\n    }\n\n    const supplier = source as EventSupplier<U>;\n\n    return (isEventKeeper(supplier) ? afterSupplied(supplier) : onSupplied(supplier)).consume((...event) => {\n\n      const tracker = extractTracker(...event);\n\n      return tracker && syncWithTracker(tracker);\n    });\n\n    function syncTrackers(tracker1: ValueTracker<T>, tracker2: ValueTracker<T>): EventSupply {\n\n      const supply1 = tracker1.read(value => {\n        tracker2.it = value;\n      });\n      const supply2 = tracker2.on(value => {\n        tracker1.it = value;\n      });\n\n      return eventSupply(reason => {\n        supply2.off(reason);\n        supply1.off(reason);\n      }).needs(supply1).needs(supply2);\n    }\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/namespace-aliaser\n */\nimport { Naming } from './naming';\n\n/**\n * @internal\n */\nclass DefaultNaming extends Naming {\n\n  applyAlias(name: string, alias: string): string {\n    return `${alias}-${name}`;\n  }\n\n}\n\n/**\n * Default naming schema.\n *\n * Prefixes a name with namespace alias separating them by dash.\n *\n * The result looks like `<alias>-<name>`.\n */\nexport const default__naming: Naming = (/*#__PURE__*/ new DefaultNaming());\n\n/**\n * HTML elements naming schema.\n *\n * Prefixes a name with namespace alias separating them by dash.\n *\n * The result looks like `<alias>-<name>`.\n */\nexport const html__naming: Naming = (/*#__PURE__*/ new DefaultNaming());\n\n/**\n * @internal\n */\nclass XmlNaming extends Naming {\n\n  applyAlias(name: string, alias: string): string {\n    return `${alias}:${name}`;\n  }\n\n}\n\n/**\n * XML elements naming schema.\n *\n * Prefixes a name with namespace alias separating them by colon.\n *\n * The result looks like `<alias>:<name>`.\n */\nexport const xml__naming: Naming = (/*#__PURE__*/ new XmlNaming());\n\n/**\n * Element identifiers naming schema.\n *\n * Prefixes a name with namespace alias separating them by colon.\n *\n * The result looks like `<alias>:<name>`.\n */\nexport const id__naming: Naming = (/*#__PURE__*/ new XmlNaming());\n\n/**\n * @internal\n */\nclass CssNaming extends Naming {\n\n  applyAlias(name: string, alias: string): string {\n    return `${name}@${alias}`;\n  }\n\n}\n\n/**\n * CSS classes naming scheme.\n *\n * Appends namespace alias as a name suffix separated by `@` sign.\n *\n * The result looks like `<name>@<alias>`.\n */\nexport const css__naming: Naming = (/*#__PURE__*/ new CssNaming());\n","/**\n * @packageDocumentation\n * @module @proc7ts/namespace-aliaser\n */\nimport { QualifiedName } from './name';\nimport { NamespaceDef } from './namespace';\nimport { NamespaceAliaser } from './namespace-aliaser';\n\n/**\n * Naming schema is responsible for applying namespace aliases to simple names. E.g. by appending alias as prefix or\n * suffix of the name.\n */\nexport abstract class Naming {\n\n  /**\n   * Applies the given namespace `alias` to the given local `name`.\n   *\n   * @param name Local name to apply namespace alias to.\n   * @param alias Namespace alias to apply.\n   * @param namespace Aliased namespace definition.\n   *\n   * @returns A string containing the `name` with `alias` applied to it.\n   */\n  abstract applyAlias(name: string, alias: string, namespace: NamespaceDef): string;\n\n  /**\n   * Converts the given qualified `name` into simple one accordingly to this naming schema.\n   *\n   * @param name Qualified name to convert.\n   * @param nsAlias Namespace aliaser to use.\n   */\n  name(name: QualifiedName, nsAlias: NamespaceAliaser): string {\n    if (typeof name === 'string') {\n      return name;\n    }\n\n    const [local, ns] = name;\n\n    return ns.name(nsAlias(ns), local, this);\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/namespace-aliaser\n */\nimport { Naming } from './naming';\nimport { default__naming } from './namings';\n\n/**\n * Namespace definition.\n *\n * Namespaces are identified by their URLs.\n */\nexport class NamespaceDef {\n\n  /**\n   * Unique namespace URL.\n   */\n  readonly url: string;\n\n  /**\n   * Preferred namespace aliases.\n   */\n  readonly aliases: readonly string[];\n\n  /**\n   * The most preferred namespace alias.\n   *\n   * By default this is the first preferred alias, or `ns` if there is no preferred aliases.\n   */\n  get alias(): string {\n    return this.aliases[0] || 'ns';\n  }\n\n  /**\n   * Constructs new namespace definition.\n   *\n   * @param url  Unique namespace URL.\n   * @param aliases  Preferred namespace aliases. It is expected that each alias is an ASCII letter followed by\n   * any number of ASCII letters, digits, `-`, or `_` signs. Aliases starting with `xml` are reserved. Empty alias\n   * is reserved for [default namespace][[DEFAULT__NS]].\n   */\n  constructor(url: string, ...aliases: string[]) {\n    this.url = url;\n    this.aliases = aliases;\n  }\n\n  /**\n   * Converts a local `name` belonging to this namespace to simple one according to the given `naming` schema.\n   *\n   * Calls [[Naming.applyAlias]] by default.\n   *\n   * @param alias  Namespace alias to apply to the name.\n   * @param name  A name to convert.\n   * @param naming  Naming schema to use. {@link default__naming default naming schema} is used when omitted.\n   *\n   * @returns A simple name with this namespace alias applied.\n   */\n  name(alias: string, name: string, naming: Naming = default__naming): string {\n    return naming.applyAlias(name, alias, this);\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/fun-events/dom\n */\nimport { noop } from '@proc7ts/call-thru';\nimport { EventReceiver, eventSupply, EventSupply, EventSupply__symbol, eventSupplyOf, EventSupplyPeer } from '../base';\nimport { OnDomEvent, onDomEventBy } from './on-dom-event';\n\nconst domEventContext: EventReceiver.Context<any> = {\n  onRecurrent: noop,\n};\n\n/**\n * DOM event dispatcher can be used to register event listeners of particular event types and dispatch events.\n *\n * @category DOM\n */\nexport class DomEventDispatcher implements EventSupplyPeer {\n\n  readonly [EventSupply__symbol]: EventSupply = eventSupply();\n\n  /**\n   * @internal\n   */\n  private readonly _target: EventTarget;\n\n  /**\n   * Constructs DOM event dispatcher for the given event target.\n   *\n   * @param target  Event target to construct event dispatcher for.\n   */\n  constructor(target: EventTarget) {\n    this._target = target;\n  }\n\n  /**\n   * Returns a sender of DOM events of the given `type`.\n   *\n   * The returned DOM event sender calls an `EventTarget.addEventListener()` to register listeners.\n   * But, in contrast, it allows to register the same listener many times.\n   *\n   * The {@link EventSupply event supply} returned upon event listener registration unregisters it with\n   * `EventTarget.removeEventListener()` once {@link EventSupply.off cut off}.\n   *\n   * @typeparam E  Supported DOM event type.\n   * @param type  DOM event type name.\n   *\n   * @returns [[OnDomEvent]] sender of DOM events of the given `type`.\n   */\n  on<E extends Event>(type: string): OnDomEvent<E> {\n    return onDomEventBy<E>((listener, opts) => {\n\n      const { supply } = listener;\n\n      supply.needs(eventSupplyOf(this));\n\n      if (!supply.isOff) {\n\n        // Create unique DOM listener instance\n        const domListener: EventListener = event => listener.receive(domEventContext, event as E);\n\n        this._target.addEventListener(type, domListener, opts);\n        listener.supply.whenOff(() => this._target.removeEventListener(type, domListener));\n      }\n    });\n  }\n\n  /**\n   * Dispatches the given DOM event to event target.\n   *\n   * Calls `EventTarget.dispatchEvent()` method.\n   *\n   * @param event  An event to dispatch.\n   *\n   * @returns `true` if either event's `cancelable` attribute value is `false` or its `preventDefault()` method was not\n   * invoked, or `false` otherwise. Also returns `false` after [[done]] method called.\n   */\n  dispatch(event: Event): boolean {\n    return !eventSupplyOf(this).isOff && this._target.dispatchEvent(event);\n  }\n\n  /**\n   * Removes all registered event listeners and rejects new listeners registration and event dispatching.\n   *\n   * @param reason  A reason to unregister event listeners.\n   *\n   * @returns `this` instance.\n   */\n  done(reason?: any): this {\n    eventSupplyOf(this).off(reason);\n    return this;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/context-values/updatable\n */\nimport { noop } from '@proc7ts/call-thru';\nimport { AfterEvent, afterThe, EventKeeper, nextAfterEvent } from '@proc7ts/fun-events';\nimport { ContextKeyDefault, ContextSeedKey, ContextValueOpts } from '../context-key';\nimport { ContextKeyError } from '../context-key-error';\nimport { ContextValues } from '../context-values';\nimport { ContextUpKey, ContextUpRef } from './context-up-key';\n\n/**\n * A reference to updatable context function value.\n *\n * @typeparam Args  Function arguments tuple type.\n * @typeparam Ret  Function return value type.\n */\nexport type FnContextRef<Args extends any[], Ret = void> =\n    ContextUpRef<(this: void, ...args: Args) => Ret, (this: void, ...args: Args) => Ret>;\n\n/**\n * A key of updatable context function value.\n *\n * The value associated with this key is a function that delegates to the last provided function. The target function\n * may be updated.\n *\n * The value is always present. But if the function to delegate is not provided, and no default/fallback function\n * provided, an attempt to call the delegate would throw an [[ContextKeyError]].\n *\n * It is an error to provide a `null` or `undefined` {@link ContextRequest.Opts.or fallback value} when requesting\n * an associated value. Use an `afterThe()` result as a fallback instead.\n *\n * @typeparam Args  Function arguments tuple type.\n * @typeparam Ret  Function return value type.\n */\nexport class FnContextKey<Args extends any[], Ret = void>\n    extends ContextUpKey<(this: void, ...args: Args) => Ret, (this: void, ...args: Args) => Ret>\n    implements FnContextRef<Args, Ret> {\n\n  /**\n   * Constructs a function that will be called unless fallback provided.\n   */\n  readonly byDefault: (this: void, context: ContextValues, key: FnContextKey<Args, Ret>) =>\n      (this: void, ...args: Args) => Ret;\n\n  readonly upKey: ContextUpKey.UpKey<(this: void, ...args: Args) => Ret, (this: void, ...args: Args) => Ret>;\n\n  /**\n   * Constructs updatable context function key.\n   *\n   * @param name  Human-readable key name.\n   * @param seedKey  Value seed key. A new one will be constructed when omitted.\n   * @param byDefault  Constructs a default function to call. If unspecified then the default function would raise\n   * an error.\n   */\n  constructor(\n      name: string,\n      {\n        seedKey,\n        byDefault = noop,\n      }: {\n        seedKey?: ContextSeedKey<\n            ((this: void, ...args: Args) => Ret) | EventKeeper<((this: void, ...args: Args) => Ret)[]>,\n            AfterEvent<((this: void, ...args: Args) => Ret)[]>>;\n        byDefault?: ContextKeyDefault<(this: void, ...args: Args) => Ret, FnContextKey<Args, Ret>>;\n      } = {},\n  ) {\n    super(name, seedKey);\n    this.byDefault = (context, key) => byDefault(context, key) || (() => { throw new ContextKeyError(this); });\n    this.upKey = this.createUpKey(\n        opts => opts.seed.keepThru(\n            (...fns) => {\n              if (fns.length) {\n                return fns[fns.length - 1];\n              }\n\n              const defaultProvider = (): AfterEvent<[(this: void, ...args: Args) => Ret]> => afterThe(this.byDefault(\n                  opts.context,\n                  this,\n              ));\n\n              return nextAfterEvent(opts.byDefault(defaultProvider) || defaultProvider());\n            },\n        ),\n    );\n  }\n\n  grow<Ctx extends ContextValues>(\n      opts: ContextValueOpts<\n          Ctx,\n          (this: void, ...args: Args) => Ret,\n          EventKeeper<((this: void, ...args: Args) => Ret)[]> | ((this: void, ...args: Args) => Ret),\n          AfterEvent<((this: void, ...args: Args) => Ret)[]>>,\n  ): (this: void, ...args: Args) => Ret {\n\n    let delegated!: (this: void, ...args: Args) => Ret;\n\n    opts.context.get(\n        this.upKey,\n        'or' in opts ? { or: opts.or != null ? afterThe(opts.or) : opts.or } : undefined,\n    )!.to(fn => delegated = fn);\n\n    return (...args) => delegated(...args);\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/context-values/updatable\n */\nimport { nextArg, noop } from '@proc7ts/call-thru';\nimport { AfterEvent, afterEventBy, afterThe, EventKeeper, nextAfterEvent } from '@proc7ts/fun-events';\nimport { ContextKeyDefault, ContextSeedKey, ContextValueOpts } from '../context-key';\nimport { ContextKeyError } from '../context-key-error';\nimport { ContextValues } from '../context-values';\nimport { ContextUpKey, ContextUpRef } from './context-up-key';\n\n/**\n * Single updatable context value reference.\n *\n * @typeparam Value  Context value type.\n */\nexport type SingleContextUpRef<Value> = ContextUpRef<AfterEvent<[Value]>, Value>;\n\n/**\n * Single updatable context value key.\n *\n * The associated value is an `AfterEvent` keeper of the last source value. It is always present,\n * but signals an [[ContextKeyError]] error on attempt to receive an absent value.\n *\n * It is an error to provide a `null` or `undefined` {@link ContextRequest.Opts.or fallback value} when requesting\n * an associated value. Use an `afterThe()` result as a fallback instead.\n *\n * @typeparam Value  Context value type.\n */\nexport class SingleContextUpKey<Value>\n    extends ContextUpKey<AfterEvent<[Value]>, Value>\n    implements SingleContextUpRef<Value> {\n\n  /**\n   * A provider of context value used when there is no value associated with this key.\n   */\n  readonly byDefault: ContextKeyDefault<Value, ContextUpKey<AfterEvent<[Value]>, Value>>;\n\n  get upKey(): this {\n    return this;\n  }\n\n  /**\n   * Constructs single updatable context value key.\n   *\n   * @param name  Human-readable key name.\n   * @param seedKey  Value seed key. A new one will be constructed when omitted.\n   * @param byDefault  Optional default value provider. If unspecified or `undefined` the key has no default\n   * value.\n   */\n  constructor(\n      name: string,\n      {\n        seedKey,\n        byDefault = noop,\n      }: {\n        seedKey?: ContextSeedKey<Value | EventKeeper<Value[]>, AfterEvent<Value[]>>;\n        byDefault?: ContextKeyDefault<Value, ContextUpKey<AfterEvent<[Value]>, Value>>;\n      } = {},\n  ) {\n    super(name, seedKey);\n    this.byDefault = byDefault;\n  }\n\n  grow<Ctx extends ContextValues>(\n      opts: ContextValueOpts<Ctx, AfterEvent<[Value]>, EventKeeper<Value[]> | Value, AfterEvent<Value[]>>,\n  ): AfterEvent<[Value]> {\n    return opts.seed.keepThru((...sources: Value[]) => {\n      if (sources.length) {\n        // Sources present. Take the last one.\n        return nextArg(sources[sources.length - 1]);\n      }\n\n      // Sources absent. Attempt to detect the backup value.\n      const backup = opts.byDefault(() => {\n\n        const defaultValue = this.byDefault(opts.context, this);\n\n        return defaultValue && afterThe(defaultValue);\n      });\n\n      if (backup != null) {\n        return nextAfterEvent(backup); // Backup value found.\n      }\n\n      // Backup value is absent. Construct an error response.\n      return nextAfterEvent(afterEventBy<[Value]>(() => {\n        throw new ContextKeyError(this);\n      }));\n    });\n  }\n\n}\n\n","/**\n * @packageDocumentation\n * @module @proc7ts/render-scheduler\n */\nimport { RenderShot } from './render-shot';\n\n/**\n * A queue of scheduled render shots.\n *\n * Utilized by render scheduler in order to collect render shots and schedule their execution.\n *\n * The default implementation may be constructed using [[RenderQueue.by]] function.\n */\nexport interface RenderQueue {\n\n  /**\n   * Adds a render shot to this queue.\n   *\n   * @param shot  Scheduled render shot to add.\n   */\n  add(shot: RenderShot): void;\n\n  /**\n   * Adds a render shot to the head of this queue.\n   *\n   * @param shot  Scheduled render shot to add.\n   */\n  post(shot: RenderShot): void;\n\n  /**\n   * Retrieves the first added render shot and removes it from the queue.\n   *\n   * @returns  Either pulled out render shot, or `undefined` when there is no more render shots.\n   */\n  pull(): RenderShot | undefined;\n\n  /**\n   * Schedules queued render shots execution.\n   *\n   * @param task  A function that performs render shots execution task.\n   */\n  schedule(task: (this: void) => void): void;\n\n  /**\n   * Resets the queue for the next execution.\n   *\n   * @returns  Another (empty) queue that will collect scheduled render shots from now on.\n   */\n  reset(): RenderQueue;\n\n}\n\nexport const RenderQueue = {\n\n  /**\n   * Builds the default implementation of render queue.\n   *\n   * @param schedule  Schedules queued render shots execution. This is an implementation of [[RenderQueue.schedule]]\n   * method.\n   * @param replace  Called right after [[RenderQueue.reset]] method in order to inform on the queue that will collect\n   * scheduled render shots from now.\n   *\n   * @returns New render queue.\n   */\n  by(\n      this: void,\n      {\n        schedule,\n        replace = () => {/* do not replace */},\n      }: {\n        schedule(this: RenderQueue, task: (this: void) => void): void;\n        replace?(this: void, replacement: RenderQueue): void;\n      },\n  ): RenderQueue {\n\n    const shots: RenderShot[] = [];\n\n    return {\n      schedule,\n      add(shot) {\n        shots.push(shot);\n      },\n      post(shot) {\n        shots.unshift(shot);\n      },\n      pull() {\n        return shots.shift();\n      },\n      reset() {\n\n        const next = RenderQueue.by({ schedule, replace });\n\n        replace(next);\n\n        return next;\n      },\n    };\n  },\n\n};\n","/**\n * @packageDocumentation\n * @module @proc7ts/render-scheduler\n */\nimport { customRenderScheduler } from './custom-render-scheduler';\nimport { RenderQueue } from './render-queue';\nimport { RenderScheduler } from './render-scheduler';\n\n/**\n * @internal\n */\nconst animationRenderQueues = (/*#__PURE__*/ new WeakMap<Window, RenderQueue>());\n\n/**\n * A render scheduler that executes scheduled render shots within animation frame.\n *\n * Utilizes [requestAnimationFrame()] function for that.\n *\n * The render shots scheduled by different schedules created for the same window are all executed in the same animation\n * frame. The {@link RenderExecution.postpone postponed} render shots are executed only after all scheduled ones\n * complete.\n *\n * [requestAnimationFrame()]: https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame\n */\nexport const animationRenderScheduler: RenderScheduler = (/*#__PURE__*/ customRenderScheduler({\n  newQueue({ window }) {\n\n    const existing = animationRenderQueues.get(window);\n\n    if (existing) {\n      return existing;\n    }\n\n    const newQueue = RenderQueue.by({\n      schedule: task => window.requestAnimationFrame(task),\n      replace: replacement => animationRenderQueues.set(window, replacement),\n    });\n\n    animationRenderQueues.set(window, newQueue);\n\n    return newQueue;\n  },\n}));\n","import { RenderSchedule, RenderScheduleConfig, RenderScheduleOptions } from './render-schedule';\nimport { RenderScheduler } from './render-scheduler';\nimport { RenderExecution, RenderShot } from './render-shot';\n\n/**\n * Render scheduler that executes render shots immediately.\n *\n * @param options\n */\nexport const immediateRenderScheduler: RenderScheduler = (options?: RenderScheduleOptions): RenderSchedule => {\n\n  const config = RenderScheduleConfig.by(options);\n\n  return (shot: RenderShot) => {\n\n    const postponed: RenderShot[] = [];\n    const execution: RenderExecution = {\n      get config() {\n        return config;\n      },\n      postpone(shot) {\n        postponed.push(shot);\n      },\n    };\n\n    execute(shot);\n    for (; ;) {\n\n      const last = postponed.pop();\n\n      if (!last) {\n        break;\n      }\n\n      execute(last);\n    }\n\n    function execute(shot: RenderShot): void {\n      try {\n        shot(execution);\n      } catch (e) {\n        config.error(e);\n      }\n    }\n  };\n};\n","import { SingleContextKey } from '@proc7ts/context-values';\nimport { BootstrapContext } from './bootstrap-context';\n\n/**\n * @internal\n */\nexport const BootstrapContext__key = (/*#__PURE__*/ new SingleContextKey<BootstrapContext>('bootstrap-context'));\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKey__symbol, ContextValues } from '@proc7ts/context-values';\nimport { EventReceiver, EventSupply, OnEvent } from '@proc7ts/fun-events';\nimport { Class } from '../common';\nimport { ComponentClass, DefinitionContext } from '../component/definition';\nimport { FeatureRef } from '../feature';\nimport { BootstrapContext__key } from './bootstrap-context.key.impl';\n\n/**\n * Components bootstrap context.\n *\n * An instance of this class is passed to [[FeatureDef.Options.init]] method so that the feature can configure itself.\n *\n * Extends `BootstrapValues` interface. The values could be {@link BootstrapSetup.provide pre-configured} in feature\n * definitions.\n *\n * @category Core\n */\nexport abstract class BootstrapContext extends ContextValues {\n\n  /**\n   * A key of bootstrap context value containing the bootstrap context itself.\n   */\n  static get [ContextKey__symbol](): ContextKey<BootstrapContext> {\n    return BootstrapContext__key;\n  }\n\n  /**\n   * Builds an `OnEvent` sender of bootstrap readiness event.\n   *\n   * The registered receiver will be notified once bootstrap is complete.\n   *\n   * If bootstrap is complete already, the receiver will be notified immediately.\n   *\n   * @returns `OnEvent` sender of ready bootstrap context.\n   */\n  abstract whenReady(): OnEvent<[BootstrapContext]>;\n\n  /**\n   * Registers a `receiver` of bootstrap readiness event.\n   *\n   * The registered receiver will be notified once bootstrap is complete.\n   *\n   * If bootstrap is complete already, the receiver will be notified immediately.\n   *\n   * @param receiver  Target receiver of reay bootstrap context.\n   *\n   * @returns Bootstrap readiness event supply.\n   */\n  abstract whenReady(receiver: EventReceiver<[BootstrapContext]>): EventSupply;\n\n  /**\n   * Allows to wait for component definition.\n   *\n   * This corresponds to `window.customElements.whenDefined()` method.\n   *\n   * @param componentType  Component class constructor.\n   *\n   * @return An `OnEvent` sender of definition context sent when the given `componentType` is registered.\n   */\n  abstract whenDefined<C extends object>(componentType: ComponentClass<C>): OnEvent<[DefinitionContext<C>]>;\n\n  /**\n   * Allows to loads the given `feature`.\n   *\n   * @param feature  The feature to load.\n   *\n   * @returns  Loaded feature reference.\n   */\n  abstract load(feature: Class): FeatureRef;\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { itsEach, itsFirst } from '@proc7ts/a-iterable';\nimport { isArray } from './types.impl';\n\n/**\n * @category Utility\n */\nexport class ArraySet<T> implements Iterable<T> {\n\n  readonly items: Set<T>;\n\n  constructor(value?: T | readonly T[]) {\n    this.items = value == null ? new Set() : isArray(value) ? new Set(value) : new Set([value]);\n  }\n\n  get value(): T | T[] | undefined {\n    return this.items.size < 2 ? itsFirst(this.items) : Array.from(this.items);\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.items[Symbol.iterator]();\n  }\n\n  add(...items: readonly T[]): this {\n    return this.addAll(items);\n  }\n\n  addAll(items: Iterable<T>): this {\n    itsEach(items, item => this.items.add(item));\n    return this;\n  }\n\n  get size(): number {\n    return this.items.size;\n  }\n\n  merge(items: readonly T[] | T | undefined): this {\n    if (isArray(items)) {\n      this.addAll(items);\n    } else if (items != null) {\n      this.items.add(items);\n    }\n    return this;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { flatMapIt, mapIt } from '@proc7ts/a-iterable';\nimport { Class, superClassOf } from './classes';\n\n/**\n * @category Utility\n */\nexport abstract class MetaAccessor<M, S = M> {\n\n  readonly symbol: symbol;\n\n  protected constructor(symbol: symbol) {\n    this.symbol = symbol;\n  }\n\n  own(type: Class): M | undefined {\n    // eslint-disable-next-line no-prototype-builtins\n    return type.hasOwnProperty(this.symbol) ? (type as any)[this.symbol] : undefined;\n  }\n\n  of(type: Class): M | undefined {\n\n    const ownDef: M | undefined = this.own(type);\n    const superType = superClassOf(type);\n    const superDef = superType && this.of(superType);\n\n    return ownDef ? (superDef ? this.merge([superDef, ownDef]) : ownDef) : superDef;\n  }\n\n  define<C extends Class>(type: C, sources: Iterable<S>): C {\n\n    const prevMeta = this.own(type);\n    const updates = mapIt(sources, source => this.meta(source, type));\n    const newMeta: M = this.merge(prevMeta ? flatMapIt([[prevMeta], updates]) : updates);\n\n    Object.defineProperty(\n        type,\n        this.symbol,\n        {\n          configurable: true,\n          value: newMeta,\n        },\n    );\n\n    return type;\n  }\n\n  abstract merge(metas: Iterable<M>): M;\n\n  protected abstract meta(source: S, type: Class): M;\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\n/**\n * @category Utility\n */\nexport class PromiseResolver<T = void> {\n\n  readonly promise: Promise<T>;\n  private _resolve!: (value: T) => void;\n  private _reject!: (error: any) => void;\n\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n    });\n  }\n\n  resolve(value: T): void {\n    this._resolve(value);\n  }\n\n  reject(error: any): void {\n    this._reject(error);\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { itsReduction } from '@proc7ts/a-iterable';\nimport { BootstrapSetup } from '../boot';\nimport { ArraySet, Class, mergeFunctions, MetaAccessor } from '../common';\nimport { FeatureContext } from './feature-context';\n\n/**\n * A key of a property holding a feature definition within its class constructor.\n *\n * @category Core\n */\nexport const FeatureDef__symbol = (/*#__PURE__*/ Symbol('feature-def'));\n\n/**\n * Feature definition.\n *\n * This can be one of:\n * - feature definition options object,\n * - feature definition holder, or\n * - feature definition factory.\n *\n * @category Core\n */\nexport type FeatureDef =\n    | FeatureDef.Options\n    | FeatureDef.Holder\n    | FeatureDef.Factory;\n\nexport namespace FeatureDef {\n\n  /**\n   * Feature definition options.\n   */\n  export interface Options {\n\n    readonly [FeatureDef__symbol]?: undefined;\n\n    /**\n     * Features this one requires.\n     */\n    readonly needs?: Class | readonly Class[];\n\n    /**\n     * Features this one provides.\n     *\n     * The feature always provides itself.\n     */\n    readonly has?: Class | readonly Class[];\n\n    /**\n     * Sets up bootstrap.\n     *\n     * This method is called before bootstrap context created.\n     *\n     * @param setup  Bootstrap setup.\n     */\n    setup?(setup: BootstrapSetup): void;\n\n    /**\n     * Bootstraps this feature by calling the given bootstrap context constructed.\n     *\n     * @param context  Feature initialization context.\n     */\n    init?(context: FeatureContext): void;\n\n  }\n\n  /**\n   * Feature definition holder.\n   */\n  export interface Holder {\n\n    /**\n     * The feature definition this holder contains.\n     */\n    readonly [FeatureDef__symbol]: FeatureDef;\n\n  }\n\n  /**\n   * Feature definition factory.\n   */\n  export interface Factory {\n\n    /**\n     * Builds feature definition.\n     *\n     * @param featureType  A feature class constructor to build definition for.\n     *\n     * @returns Built feature definition.\n     */\n    [FeatureDef__symbol](featureType: Class): FeatureDef;\n\n  }\n\n}\n\n/**\n * @internal\n */\nclass FeatureMeta extends MetaAccessor<FeatureDef.Options, FeatureDef> {\n\n  constructor() {\n    super(FeatureDef__symbol);\n  }\n\n  merge(defs: Iterable<FeatureDef.Options>): FeatureDef.Options {\n    return itsReduction<FeatureDef.Options, FeatureDef.Options>(\n        defs,\n        (prev, def) => ({\n          needs: new ArraySet(prev.needs).merge(def.needs).value,\n          has: new ArraySet(prev.has).merge(def.has).value,\n          setup: mergeFunctions<[BootstrapSetup], void, Class>(prev.setup, def.setup),\n          init: mergeFunctions<[FeatureContext], void, Class>(prev.init, def.init),\n        }),\n        {},\n    );\n  }\n\n  meta(source: FeatureDef, type: Class): FeatureDef.Options {\n\n    const def = source[FeatureDef__symbol];\n\n    return def == null\n        ? source as FeatureDef.Options\n        : this.meta(\n            typeof def === 'function' ? (source as FeatureDef.Factory)[FeatureDef__symbol](type) : def,\n            type,\n        );\n  }\n\n}\n\n/**\n * @internal\n */\nconst featureMeta = (/*#__PURE__*/ new FeatureMeta());\n\n/**\n * @internal\n */\nconst noFeatureDef: FeatureDef.Factory = {\n  [FeatureDef__symbol]() {\n    return {};\n  },\n};\n\n/**\n * @category Core\n */\nexport const FeatureDef = {\n\n  /**\n   * Extracts feature definition options from its type.\n   *\n   * @param featureType  Target feature class constructor.\n   *\n   * @returns Feature definition options. May be empty when there is no feature definition found in the given\n   * `featureType`.\n   */\n  of(this: void, featureType: Class): FeatureDef.Options {\n    return featureMeta.of(featureType) || {};\n  },\n\n  /**\n   * Builds feature definition options for the given feature class.\n   *\n   * @param featureType  Target feature class constructor.\n   * @param def  A feature definition.\n   *\n   * @returns Feature definition options.\n   */\n  for(this: void, featureType: Class, def: FeatureDef): FeatureDef.Options {\n    return featureMeta.meta(def, featureType);\n  },\n\n  /**\n   * Merges multiple feature definition options.\n   *\n   * @param defs  Feature definition options to merge.\n   *\n   * @returns Merged feature definition options.\n   */\n  merge(this: void, ...defs: readonly FeatureDef.Options[]): FeatureDef.Options {\n    return featureMeta.merge(defs);\n  },\n\n  /**\n   * Merges multiple feature definitions.\n   *\n   * @param defs  Feature definitions to merge.\n   *\n   * @returns Merged feature definition.\n   */\n  all(this: void, ...defs: readonly FeatureDef[]): FeatureDef {\n    return itsReduction<FeatureDef, FeatureDef.Factory>(\n        defs,\n        (prev, def) => ({\n          [FeatureDef__symbol](featureType: Class) {\n            return FeatureDef.merge(\n                FeatureDef.for(featureType, prev),\n                FeatureDef.for(featureType, def),\n            );\n          },\n        }),\n        noFeatureDef,\n    );\n  },\n\n  /**\n   * Defines a feature.\n   *\n   * Either creates new or extends an existing feature definition and stores it under `[FeatureDef__symbol]` key.\n   *\n   * @typeparam T  Feature type.\n   * @param featureType  Feature class constructor.\n   * @param defs  Feature definitions.\n   *\n   * @returns The `type` instance.\n   */\n  define<T extends Class>(this: void, featureType: T, ...defs: readonly FeatureDef[]): T {\n    return featureMeta.define(featureType, defs);\n  },\n\n};\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKey__symbol, ContextValueSpec, SingleContextKey } from '@proc7ts/context-values';\nimport { EventReceiver, EventSupply, OnEvent } from '@proc7ts/fun-events';\nimport { BootstrapContext, BootstrapSetup } from '../boot';\nimport { Class } from '../common';\nimport { ComponentContext } from '../component';\nimport { ComponentClass, DefinitionContext, DefinitionSetup } from '../component/definition';\nimport { FeatureRef } from './feature-ref';\n\n/**\n * @internal\n */\nconst FeatureContext__key = (/*#__PURE__*/ new SingleContextKey<FeatureContext>('feature-context'));\n\n/**\n * Feature initialization context.\n *\n * @category Core\n */\nexport abstract class FeatureContext extends BootstrapContext implements BootstrapSetup {\n\n  /**\n   * A key of feature context value containing the feature context itself.\n   */\n  static get [ContextKey__symbol](): ContextKey<FeatureContext> {\n    return FeatureContext__key;\n  }\n\n  /**\n   * Feature class this context is created for.\n   */\n  abstract readonly feature: Class;\n\n  /**\n   * Builds an `OnEvent` sender of feature readiness event.\n   *\n   * The registered receiver will be notified once bootstrap is complete and the feature is loaded.\n   *\n   * If the above conditions satisfied already, the receiver will be notified immediately.\n   *\n   * @returns `OnEvent` sender of ready feature context.\n   */\n  abstract whenReady(): OnEvent<[FeatureContext]>;\n\n  /**\n   * Registers a receiver of feature readiness event.\n   *\n   * The registered receiver will be notified once bootstrap is complete and the feature is loaded.\n   *\n   * If the above conditions satisfied already, the receiver will be notified immediately.\n   *\n   * @param receiver  Target receiver of ready feature context.\n   *\n   * @returns Feature readiness event supply.\n   */\n  abstract whenReady(receiver: EventReceiver<[FeatureContext]>): EventSupply;\n\n  /**\n   * Builds an `OnEvent` sender of component definition events.\n   *\n   * The registered receiver will be notified when new component class is defined, but before its custom element class\n   * constructed.\n   *\n   * @returns `OnEvent` sender of component definition contexts.\n   */\n  abstract onDefinition(): OnEvent<[DefinitionContext]>;\n\n  /**\n   * Starts sending component definition events to the given `receiver`.\n   *\n   * The receiver will be notified when new component class is defined, but before its custom element class\n   * constructed.\n   *\n   * @param receiver  Target receiver of component definition contexts.\n   *\n   * @returns Component definition events supply.\n   */\n  abstract onDefinition(receiver: EventReceiver<[DefinitionContext]>): EventSupply;\n\n  /**\n   * Builds an `OnEvent` sender of component construction events.\n   *\n   * The registered receiver will be notified right before component is constructed.\n   *\n   * @returns `OnEvent` sender of constructed component contexts.\n   */\n  abstract onComponent(): OnEvent<[ComponentContext]>;\n\n  /**\n   * Starts sending component construction events to the given `receiver`.\n   *\n   * @param receiver  Target receiver of constructed component contexts.\n   *\n   * @returns Component construction events supply.\n   */\n  abstract onComponent(receiver: EventReceiver<[ComponentContext]>): EventSupply;\n\n  /**\n   * Provides bootstrap context value.\n   *\n   * Note that this happens when bootstrap context already exists. To provide a value before bootstrap context created\n   * a [[BootstrapSetup.provide]] method can be used.\n   *\n   * @typeparam Deps  Dependencies tuple type.\n   * @typeparam Src  Source value type.\n   * @typeparam Seed  Value seed type.\n   * @param spec  Context value specifier.\n   *\n   * @returns A function that removes the given context value specifier when called.\n   */\n  abstract provide<Deps extends any[], Src, Seed>(\n      spec: ContextValueSpec<BootstrapContext, any, Deps, Src, Seed>,\n  ): () => void;\n\n  abstract perDefinition<Deps extends any[], Src, Seed>(\n      spec: ContextValueSpec<DefinitionContext, any, Deps, Src, Seed>,\n  ): () => void;\n\n  abstract perComponent<Deps extends any[], Src, Seed>(\n      spec: ContextValueSpec<ComponentContext, any, Deps, Src, Seed>,\n  ): () => void;\n\n  abstract setupDefinition<T extends object>(componentType: ComponentClass<T>): OnEvent<[DefinitionSetup]>;\n\n  /**\n   * Defines a component.\n   *\n   * Creates a custom element according to component definition, and registers it with custom elements registry.\n   *\n   * Note that custom element definition will happen only when all features configuration complete.\n   *\n   * @typeparam T  A type of component.\n   * @param componentType  Component class constructor.\n   *\n   * @return Custom element class constructor registered as custom element.\n   *\n   * @throws TypeError  If `componentType` does not contain a component definition.\n   */\n  abstract define<T extends object>(componentType: ComponentClass<T>): void;\n\n  whenDefined<C extends object>(componentType: ComponentClass<C>): OnEvent<[DefinitionContext<C>]> {\n    return this.get(BootstrapContext).whenDefined(componentType);\n  }\n\n  load(feature: Class): FeatureRef {\n    return this.get(BootstrapContext).load(feature);\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { Class } from '../common';\n\n/**\n * Feature need.\n *\n * Indicates why one feature needs another one. The reason can be one of:\n *\n * - `needs` when feature {@link FeatureDef.Options.needs depends} on another one, or\n * - `has` when feature {@link FeatureDef.Options.has provides} another one.\n *\n * @category Core\n */\nexport type FeatureNeed = [Class, 'needs' | 'has', Class];\n\n/**\n * An error in feature needs. I.e. circular dependency.\n *\n * @category Core\n */\nexport class FeatureNeedsError extends Error {\n\n  /**\n   * Feature needs causing this error.\n   */\n  readonly needs: readonly FeatureNeed[];\n\n  /**\n   * Constructs feature needs error.\n   *\n   * @param needs  Feature needs causing the error.\n   */\n  constructor(needs: readonly FeatureNeed[]) {\n    super(\n        'Circular feature needs: ' + needs.reduce(\n        (\n            prev,\n            [feature, reason, need],\n        ) => (prev ? prev : feature.name) + ` ${reason} ${need.name}`,\n        '',\n        ),\n    );\n    this.needs = needs;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { AfterEvent, AfterEvent__symbol, EventKeeper, EventReceiver, EventSupply } from '@proc7ts/fun-events';\nimport { FeatureStatus } from './feature-status';\n\n/**\n * Dynamically loaded feature reference.\n *\n * It is returned from [[BootstrapContext.load]] and can be used to read feature load status and unload it.\n *\n * Implements an `EventKeeper` interface by sending a feature load status updates.\n *\n * @category Core\n */\nexport abstract class FeatureRef implements EventKeeper<[FeatureStatus]> {\n\n  /**\n   * A promise resolved when feature is unloaded.\n   *\n   * This happens after all feature references dismissed.\n   */\n  abstract readonly down: Promise<void>;\n\n  /**\n   * Builds an `AfterEvent` keeper of feature load status.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   *\n   * @returns `AfterEvent` sender of feature load status.\n   */\n  abstract read(): AfterEvent<[FeatureStatus]>;\n\n  /**\n   * Starts sending feature load status and updates to the given `receiver`.\n   *\n   * @param receiver  Target receiver of feature load status.\n   *\n   * @returns Feature load status supply.\n   */\n  abstract read(receiver: EventReceiver<[FeatureStatus]>): EventSupply;\n\n  [AfterEvent__symbol](): AfterEvent<[FeatureStatus]> {\n    return this.read();\n  }\n\n  /**\n   * Dismisses feature reference.\n   *\n   * When all feature references dismissed, then unloads the feature. This removes everything set up by the\n   * feature via [[BootstrapSetup]] and [[DefinitionSetup]].\n   *\n   * @param reason  Arbitrary reason of feature reference dismiss. This will be reported by load status supplies\n   * as their cut off reason.\n   *\n   * @returns A promise resolved when feature is unloaded. This happens only after all feature references dismissed.\n   */\n  abstract dismiss(reason?: any): Promise<void>;\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { itsReduction } from '@proc7ts/a-iterable';\nimport { isQualifiedName, QualifiedName } from '@proc7ts/namespace-aliaser';\nimport { mergeFunctions, MetaAccessor } from '../common';\nimport { FeatureDef, FeatureDef__symbol } from '../feature';\nimport { ComponentClass, DefinitionContext, DefinitionSetup, ElementDef } from './definition';\n\n/**\n * A key of a property holding a component definition within its class constructor.\n *\n * @category Core\n */\nexport const ComponentDef__symbol = (/*#__PURE__*/ Symbol('component-def'));\n\n/**\n * Component definition.\n *\n * A custom element class will be created for each registered component in accordance to this definition.\n *\n * This can be one of:\n * - custom element name (possibly qualified),\n * - component definition options,\n * - component definition holder,\n * - component definition factory,\n * - feature definition holder, or\n * - feature definition factory.\n *\n * @category Core\n * @typeparam T  A type of component.\n */\nexport type ComponentDef<T extends object = any> =\n    | QualifiedName\n    | ComponentDef.Options<T>\n    | ComponentDef.Holder<T>\n    | ComponentDef.Factory<T>\n    | FeatureDef.Holder\n    | FeatureDef.Factory;\n\nexport namespace ComponentDef {\n\n  /**\n   * Component definition options.\n   */\n  export interface Options<T extends object = any> {\n\n    readonly [ComponentDef__symbol]?: undefined;\n\n    /**\n     * Custom element name.\n     *\n     * The name may belong to some namespace to avoid naming conflicts. I.e. it can be either a string, or\n     * name/namespace tuple.\n     *\n     * When omitted an anonymous component will be registered. Such component is not bound to custom element, but it\n     * still can be mounted.\n     */\n    readonly name?: QualifiedName;\n\n    /**\n     * Existing element to extend by custom one.\n     */\n    readonly extend?: ElementDef.Extend;\n\n    /**\n     * Additional feature definition options.\n     */\n    readonly feature?: FeatureDef.Options;\n\n    /**\n     * Sets up component definition.\n     *\n     * This method is called before component definition context constructed.\n     *\n     * @param setup  Component definition setup.\n     */\n    setup?(setup: DefinitionSetup<T>): void;\n\n    /**\n     * Defines this component by calling the given component definition context methods.\n     *\n     * This function is called before the custom element is defined.\n     *\n     * @param context  Component definition context.\n     */\n    define?(context: DefinitionContext<T>): void;\n\n  }\n\n  /**\n   * Component definition holder.\n   *\n   * @typeparam T  A type of component.\n   */\n  export interface Holder<T extends object = any> {\n\n    /**\n     * The component definition this holder contains.\n     */\n    readonly [ComponentDef__symbol]: ComponentDef<T>;\n\n  }\n\n  /**\n   * Component definition factory.\n   *\n   * @typeparam T  A type of component.\n   */\n  export interface Factory<T extends object = any> {\n\n    /**\n     * Builds component definition.\n     *\n     * @param componentType  A component class constructor to build definition for.\n     *\n     * @returns Built component definition.\n     */\n    [ComponentDef__symbol](componentType: ComponentClass<T>): ComponentDef<T>;\n\n  }\n\n}\n\n/**\n * @internal\n */\nclass ComponentMeta extends MetaAccessor<ComponentDef.Options, ComponentDef> {\n\n  constructor() {\n    super(ComponentDef__symbol);\n  }\n\n  merge<T extends object>(defs: Iterable<ComponentDef.Options<T>>): ComponentDef.Options<T> {\n    return itsReduction<ComponentDef.Options<T>, ComponentDef.Options<T>>(\n        defs,\n        (prev, def) => ({\n          ...prev,\n          ...def,\n          setup: mergeFunctions(prev.setup, def.setup),\n          define: mergeFunctions(prev.define, def.define),\n          feature: prev.feature\n              ? def.feature ? FeatureDef.merge(prev.feature, def.feature) : prev.feature\n              : def.feature,\n        }),\n        {},\n    );\n  }\n\n  meta<T extends object>(source: ComponentDef<T>, componentType: ComponentClass<T>): ComponentDef.Options<T> {\n\n    const def = (source as any)[ComponentDef__symbol];\n\n    if (def != null) {\n      return this.meta(\n          typeof def === 'function' ? (source as ComponentDef.Factory<T>)[ComponentDef__symbol](componentType) : def,\n          componentType,\n      );\n    }\n    if ((source as any)[FeatureDef__symbol] != null) {\n      return {\n        feature: FeatureDef.for(componentType, source as FeatureDef),\n      };\n    }\n    if (isQualifiedName(source)) {\n      return { name: source };\n    }\n\n    return source as ComponentDef.Options;\n  }\n\n}\n\n/**\n * @internal\n */\nconst componentMeta = (/*#__PURE__*/ new ComponentMeta());\n\n/**\n * @internal\n */\nconst noComponentDef: ComponentDef.Factory = {\n  [ComponentDef__symbol]() {\n    return {};\n  },\n};\n\n/**\n * @category Core\n */\nexport const ComponentDef = {\n\n  /**\n   * Extracts component definition options from its type.\n   *\n   * @typeparam T  A type of component.\n   * @param componentType  Target component class constructor.\n   *\n   * @returns Component definition options. May be empty if there is not definition attached to component type.\n   */\n  of<T extends object>(this: void, componentType: ComponentClass<T>): ComponentDef.Options<T> {\n    return componentMeta.of(componentType) as ComponentDef.Options<T> || {};\n  },\n\n  /**\n   * Builds component definition options for the given component class.\n   *\n   * @param componentType  Target component class constructor.\n   * @param source  A source of component definition.\n   *\n   * @returns Component definition.\n   */\n  for<T extends object>(\n      this: void,\n      componentType: ComponentClass<T>,\n      source: ComponentDef<T>,\n  ): ComponentDef.Options<T> {\n    return componentMeta.meta(source, componentType);\n  },\n\n  /**\n   * Merges multiple component definition options.\n   *\n   * @typeparam T  A type of component.\n   * @param defs  Component definition options to merge.\n   *\n   * @returns Merged component definition options.\n   */\n  merge<T extends object>(this: void, ...defs: ComponentDef.Options<T>[]): ComponentDef.Options<T> {\n    return componentMeta.merge(defs);\n  },\n\n  /**\n   * Merges multiple component definitions.\n   *\n   * @typeparam T  A type of component.\n   * @param defs  Component definitions to merge.\n   *\n   * @returns Merged component definition.\n   */\n  all<T extends object>(this: void, ...defs: ComponentDef<T>[]): ComponentDef<T> {\n    return itsReduction<ComponentDef<T>, ComponentDef.Factory<T>>(\n        defs,\n        (prev, def) => ({\n          [ComponentDef__symbol](componentType: ComponentClass<T>) {\n            return ComponentDef.merge(\n                ComponentDef.for(componentType, prev),\n                ComponentDef.for(componentType, def),\n            );\n          },\n        }),\n        noComponentDef,\n    );\n  },\n\n  /**\n   * Defines a component.\n   *\n   * Either assigns new or extends existing component definition and stores it under [[ComponentDef__symbol]] key.\n   *\n   * Each component can be passed directly to [[bootstrapComponents]] function or added as a requirement\n   * of another feature.\n   *\n   * @typeparam T  A type of component.\n   * @param componentType  Component class constructor.\n   * @param defs  Component definitions.\n   *\n   * @returns The `type` instance.\n   */\n  define<T extends ComponentClass>(\n      this: void,\n      componentType: T,\n      ...defs: ComponentDef<InstanceType<T>>[]\n  ): T {\n    return componentMeta.define(componentType, defs);\n  },\n\n};\n","import { SingleContextKey } from '@proc7ts/context-values';\nimport { ComponentContext } from './component-context';\n\n/**\n * @internal\n */\nexport const ComponentContext__key = (/*#__PURE__*/ new SingleContextKey<ComponentContext>('component-context'));\n","import { SingleContextKey } from '@proc7ts/context-values';\nimport { eventSupplyOf } from '@proc7ts/fun-events';\nimport { DomEventDispatcher, OnDomEvent } from '@proc7ts/fun-events/dom';\nimport { ComponentContext__key } from './component-context.key.impl';\nimport { ComponentEventDispatcher } from './component-event';\n\n/**\n * @internal\n */\nexport const ComponentEventDispatcher__key = (/*#__PURE__*/ new SingleContextKey<ComponentEventDispatcher>(\n    'component-event-dispatcher',\n    {\n      byDefault(values) {\n\n        const context = values.get(ComponentContext__key);\n        const dispatcher = new DomEventDispatcher(context.element);\n\n        eventSupplyOf(dispatcher).needs(context);\n\n        return {\n          dispatch(event: Event): boolean {\n            return dispatcher.dispatch(event);\n          },\n          on<E extends Event>(type: string): OnDomEvent<E> {\n            return dispatcher.on(type);\n          },\n        };\n      },\n    },\n));\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { SingleContextKey, SingleContextRef } from '@proc7ts/context-values';\nimport { ComponentContext__key } from './component-context.key.impl';\n\n/**\n * Component content root node.\n *\n * @category Core\n */\nexport type ContentRoot = any;\n\n/**\n * A key of component context value containing a component root element.\n *\n * This is an element itself by default. But can be overridden e.g. by {@link AttachShadow @AttachShadow} decorator.\n *\n * @category Core\n */\nexport const ContentRoot: SingleContextRef<ContentRoot> = (/*#__PURE__*/ new SingleContextKey<ContentRoot>(\n    'content-root',\n    {\n      byDefault(ctx) {\n        return ctx.get(ComponentContext__key).element;\n      },\n    },\n));\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { noop, valueProvider } from '@proc7ts/call-thru';\nimport { FnContextKey, FnContextRef } from '@proc7ts/context-values/updatable';\nimport { StatePath } from '@proc7ts/fun-events';\n\n/**\n * Component state updater function.\n *\n * @category Core\n */\nexport type StateUpdater =\n/**\n * @typeparam V  Updated value type\n * @param path  Updated state node path.\n * @param newValue  New value.\n * @param oldValue  Replaced value.\n */\n    <V>(this: void, path: StatePath, newValue: V, oldValue: V) => void;\n\n/**\n * A key of component context value containing a component state updates receiver function.\n *\n * Features are calling this function by default when component state changes, e.g. attribute value or DOM property\n * modified.\n *\n * Note that this value is not provided, unless the `StateSupport` feature is enabled.\n *\n * @category Core\n */\nexport const StateUpdater: FnContextRef<Parameters<StateUpdater>> = (/*#__PURE__*/ new FnContextKey(\n    'state-updater',\n    {\n      byDefault: valueProvider(noop),\n    },\n));\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { SingleContextRef } from '@proc7ts/context-values';\nimport { OnDomEvent } from '@proc7ts/fun-events/dom';\nimport { ComponentContext } from './component-context';\nimport { ComponentEventDispatcher__key } from './component-event.key.impl';\n\n/**\n * Component event.\n *\n * Events of this type are thrown by various services to inform on component status changes.\n *\n * It is illegal to dispatch such events for elements not bound to components. It is reasonable to dispatch events\n * using [[ComponentEventDispatcher]] available in component context.\n *\n * The following event types supported:\n * - `wesib:component` is dispatched when component is bound to element. I.e. when HTML element is upgraded to custom\n *   one defined by component, or component is mounted to element. The event is dispatched when component is connected\n *   for the first time. I.e. when element is added to the document.\n *   This event bubbles and is not cancelable.\n *\n * @category Core\n * @event ComponentEvent#wesib:component\n */\nexport class ComponentEvent extends Event {\n\n  /**\n   * Target component context.\n   */\n  get context(): ComponentContext {\n    return ComponentContext.of(this.target);\n  }\n\n}\n\n/**\n * Component event dispatcher is used to listen for and dispatch component events.\n *\n * It is available in bootstrap context context.\n *\n * By default treats a component element as event target.\n *\n * @category Core\n */\nexport interface ComponentEventDispatcher {\n\n  /**\n   * Dispatches the DOM event for the given component.\n   *\n   * @param event  An event to dispatch.\n   *\n   * @returns `true` if either event's `cancelable` attribute value is `false` or its `preventDefault()` method was not\n   * invoked, or `false` otherwise.\n   */\n  dispatch(event: Event): boolean;\n\n  /**\n   * Returns an `OnDomEvent` sender of DOM events of the given type.\n   *\n   * @param type  An event type to listen for.\n   *\n   * @returns A producer of DOM event events of the given type.\n   */\n  on<E extends Event>(type: string): OnDomEvent<E>;\n\n}\n\n/**\n * A key of component context value containing component event dispatcher.\n *\n * @category Core\n */\nexport const ComponentEventDispatcher: SingleContextRef<ComponentEventDispatcher> = ComponentEventDispatcher__key;\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ComponentContext } from './component-context';\n\n/**\n * A mount of the component to an element.\n *\n * This is constructed when a component is mounted to arbitrary element by [[DefinitionContext.mountTo]] method.\n *\n * Mounted components do not maintain their connection state automatically. It is a calling code responsibility to set\n * their connection state by updating [[ComponentMount.connected]] property. E.g. by calling a\n * [[ComponentMount.checkConnected]] method. An [[ElementObserver]] and [[AutoConnectSupport]] feature could be used to\n * do it automatically.\n *\n * @category Core\n * @typeparam T  A type of component.\n */\nexport abstract class ComponentMount<T extends object = any> {\n\n  /**\n   * Mounted component context.\n   */\n  abstract readonly context: ComponentContext<T>;\n\n  /**\n   * Component connection state.\n   *\n   * The initial state is set by [[checkConnected]] method.\n   */\n  abstract readonly connected: boolean;\n\n  /**\n   * Mounted component.\n   */\n  get component(): T {\n    return this.context.component;\n  }\n\n  /**\n   * An element the component is mounted to.\n   */\n  get element(): any {\n    return this.context.element;\n  }\n\n  /**\n   * Forcibly connects mounted component element to the document.\n   */\n  abstract connect(): void;\n\n  /**\n   * Checks whether the mounted component element is actually connected to its owning document.\n   *\n   * Updates the `connected` property and returns its value.\n   *\n   * When component is disconnected after it has been connected, the component is {@link ComponentContext.destroy\n   * destroyed}.\n   *\n   * @returns `true` if the component element is connected, or `false` otherwise.\n   */\n  abstract checkConnected(): boolean;\n\n}\n","import {\n  ContextKey,\n  ContextKey__symbol,\n  ContextRegistry,\n  ContextValues,\n  SingleContextKey,\n} from '@proc7ts/context-values';\nimport { BootstrapContext } from '../bootstrap-context';\n\nconst BootstrapContextRegistry__key = (\n    /*#__PURE__*/ new SingleContextKey<BootstrapContextRegistry>('bootstrap-context-registry')\n);\n\n/**\n * @internal\n */\nexport class BootstrapContextRegistry extends ContextRegistry<BootstrapContext> {\n\n  static get [ContextKey__symbol](): ContextKey<BootstrapContextRegistry> {\n    return BootstrapContextRegistry__key;\n  }\n\n  readonly values: ContextValues;\n\n  static create(): BootstrapContextRegistry {\n    return new BootstrapContextRegistry();\n  }\n\n  private constructor() {\n    super();\n    this.provide({ a: BootstrapContextRegistry, is: this });\n    this.values = this.newValues();\n  }\n\n}\n","import { ContextKey, ContextKey__symbol, ContextRegistry, SingleContextKey } from '@proc7ts/context-values';\nimport { ComponentContext } from '../../component';\nimport { bootstrapDefault } from '../bootstrap-default';\n\nconst ComponentContextRegistry__key = (/*#__PURE__*/ new SingleContextKey<ComponentContextRegistry>(\n    'component-context-registry',\n    {\n      byDefault: bootstrapDefault(() => new ComponentContextRegistry()),\n    },\n));\n\n/**\n * @internal\n */\nexport class ComponentContextRegistry extends ContextRegistry<ComponentContext> {\n\n  static get [ContextKey__symbol](): ContextKey<ComponentContextRegistry> {\n    return ComponentContextRegistry__key;\n  }\n\n}\n","import { ContextKey, ContextKey__symbol, ContextRegistry, SingleContextKey } from '@proc7ts/context-values';\nimport { DefinitionContext } from '../../component/definition';\nimport { bootstrapDefault } from '../bootstrap-default';\n\nconst DefinitionContextRegistry__key = (/*#__PURE__*/ new SingleContextKey<DefinitionContextRegistry>(\n    'definition-context-registry',\n    {\n      byDefault: bootstrapDefault(context => new DefinitionContextRegistry(context)),\n    },\n));\n\n/**\n * @internal\n */\nexport class DefinitionContextRegistry extends ContextRegistry<DefinitionContext> {\n\n  static get [ContextKey__symbol](): ContextKey<DefinitionContextRegistry> {\n    return DefinitionContextRegistry__key;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { SingleContextKey, SingleContextRef } from '@proc7ts/context-values';\n\n/**\n * A window the components bootstrap is performed against.\n *\n * @category Core\n */\nexport type BootstrapWindow = Window & typeof globalThis;\n\n/**\n * A key of bootstrap context value containing a window instance the bootstrap is performed against.\n *\n * Target value defaults to current window.\n *\n * @category Core\n */\nexport const BootstrapWindow: SingleContextRef<BootstrapWindow> = (/*#__PURE__*/ new SingleContextKey(\n    'window',\n    {\n      byDefault() {\n        return window;\n      },\n    },\n));\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { SingleContextKey, SingleContextRef } from '@proc7ts/context-values';\nimport { BootstrapWindow } from './bootstrap-window';\n\n/**\n * A window (e.g. DOM) element all bootstrapped components belong to.\n *\n * @category Core\n */\nexport type BootstrapRoot = any;\n\n/**\n * A key of bootstrap context value containing a bootstrap root.\n *\n * Target value defaults to document body of [[BootstrapWindow]].\n *\n * @category Core\n */\nexport const BootstrapRoot: SingleContextRef<BootstrapRoot> = (/*#__PURE__*/ new SingleContextKey(\n    'bootstrap-root',\n    {\n      byDefault(ctx) {\n        return ctx.get(BootstrapWindow).document.body;\n      },\n    },\n));\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { SingleContextKey, SingleContextRef } from '@proc7ts/context-values';\nimport { NamespaceAliaser } from '@proc7ts/namespace-aliaser';\n\n/**\n * Namespace aliaser used by default.\n *\n * Maps namespaces to their unique aliases.\n *\n * @category Core\n */\nexport type DefaultNamespaceAliaser = NamespaceAliaser;\n\n/**\n * A key of bootstrap context value containing the default namespace aliaser.\n *\n * @category Core\n */\nexport const DefaultNamespaceAliaser: SingleContextRef<DefaultNamespaceAliaser> = (\n    /*#__PURE__*/ new SingleContextKey<DefaultNamespaceAliaser>('default-namespace-aliaser')\n);\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { filterIt, itsEach, overArray } from '@proc7ts/a-iterable';\nimport { FnContextKey } from '@proc7ts/context-values/updatable';\nimport { isElement } from '../../common';\nimport { ComponentContext__symbol, ComponentMount } from '../../component';\nimport { bootstrapDefault } from '../bootstrap-default';\nimport { ElementAdapter } from './element-adapter';\n\n/**\n * Element mutations observer.\n *\n * It is a `MutationObserver` implementation that:\n * - always observes target's children,\n * - applies {@link ElementAdapter element adapter} to added elements,\n * - tracks mounted components {@link ComponentMount.connected connection state}.\n *\n * A function constructing element observer instance could be obtained from bootstrap context.\n *\n * @category Core\n */\nexport interface ElementObserver extends MutationObserver {\n\n  /**\n   * Configures the observer callback to begin receiving notifications of changes to the DOM that match the given\n   * options.\n   * To stop the MutationObserver (so that none of its callbacks will be triggered any longer), call\n   * [[disconnect]].\n   *\n   * @param target  A DOM node within the DOM tree to watch for changes, and to be the root of a subtree of nodes\n   * to be watched.\n   * @param options  An options that describe what DOM mutations should be reported to the observer's callback.\n   */\n  observe(target: Node, options?: ElementObserverInit): void;\n\n}\n\n/**\n * A key of bootstrap context value containing a function constructing a new [[ElementObserver]] instance.\n *\n * @category Core\n */\nexport const ElementObserver: FnContextKey<[MutationCallback], ElementObserver> = (/*#__PURE__*/ new FnContextKey(\n    'element-observer',\n    {\n      byDefault: bootstrapDefault(bsContext => {\n\n        const adapter = bsContext.get(ElementAdapter);\n        class DefaultElementObserver extends MutationObserver implements ElementObserver {\n\n          constructor(callback: MutationCallback) {\n            super(mutations => {\n              mutations.forEach(mutation => {\n                itsEach(\n                    overArray(mutation.removedNodes),\n                    node => mountOf(node)?.checkConnected(),\n                );\n                itsEach(\n                    filterIt(\n                        overArray(mutation.addedNodes),\n                        isElement,\n                    ),\n                    element => adapter(element)?.mount?.checkConnected(),\n                );\n              });\n              callback(mutations, this);\n            });\n          }\n\n          observe(target: Node, options?: ElementObserverInit): void {\n            super.observe(target, { ...options, childList: true });\n          }\n\n        }\n\n        return callback => new DefaultElementObserver(callback);\n      }),\n    },\n));\n\n/**\n * Element observer initialization options.\n *\n * @category Core\n */\nexport interface ElementObserverInit extends MutationObserverInit {\n\n  /**\n   * Whether mutations to target's children are to be observed.\n   *\n   * Always `true`.\n   */\n  childList?: true;\n\n}\n\n/**\n * @internal\n */\nfunction mountOf(node: any): ComponentMount | undefined {\n  return node[ComponentContext__symbol]?.mount;\n}\n","import { SingleContextKey } from '@proc7ts/context-values';\nimport { DefinitionContext } from './definition-context';\n\n/**\n * @internal\n */\nexport const DefinitionContext__key = (/*#__PURE__*/ new SingleContextKey<DefinitionContext>('definition-context'));\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { SingleContextKey, SingleContextRef } from '@proc7ts/context-values';\nimport { QualifiedName } from '@proc7ts/namespace-aliaser';\nimport { BootstrapWindow } from '../../boot/globals';\nimport { Class } from '../../common';\nimport { ComponentDef } from '../component-def';\nimport { DefinitionContext__key } from './definition.context.key.impl';\n\n/**\n * Custom element definition meta.\n *\n * @category Core\n */\nexport interface ElementDef {\n\n  /**\n   * Custom element name.\n   *\n   * The name may belong to some namespace to avoid naming conflicts. I.e. it can be either a string, or\n   * name/namespace tuple.\n   *\n   * When omitted an anonymous component will be registered. Such component is not bound to custom element, but it\n   * still can be mounted.\n   */\n  readonly name?: QualifiedName;\n\n  /**\n   * Existing element to extend by custom one.\n   */\n  readonly extend: ElementDef.Extend;\n\n}\n\n/**\n * A key of definition context value containing a custom element definition.\n *\n * Target value defaults to `HTMLElement` from the window provided under `[BootstrapWindow.key]`,\n * unless `ComponentDef.extend.type` is specified.\n */\nexport const ElementDef: SingleContextRef<ElementDef> = (/*#__PURE__*/ new SingleContextKey<ElementDef>(\n    'element-def',\n    {\n      byDefault(values) {\n\n        const componentType = values.get(DefinitionContext__key).componentType;\n        const { name, extend } = ComponentDef.of(componentType);\n\n        const elementExtend: ElementDef.Extend = {\n          get type() {\n            return extend && extend.type || values.get(BootstrapWindow).HTMLElement;\n          },\n          get name() {\n            return extend && extend.name;\n          },\n        };\n\n        return {\n          get name() {\n            return name;\n          },\n          get extend() {\n            return elementExtend;\n          },\n        };\n      },\n    },\n));\n\n/**\n * @category Core\n */\nexport namespace ElementDef {\n\n  /**\n   * The definition of element to extend by custom one.\n   */\n  export interface Extend {\n\n    /**\n     * The class constructor of element to extend.\n     */\n    readonly type: Class;\n\n    /**\n     * The name of element to extend.\n     *\n     * This is to support `as` attribute of standard HTML element. Note that this is not supported by polyfills.\n     */\n    readonly name?: string;\n\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKey__symbol, ContextValues, ContextValueSpec } from '@proc7ts/context-values';\nimport { EventReceiver, EventSupply, OnEvent } from '@proc7ts/fun-events';\nimport { Class } from '../../common';\nimport { ComponentContext } from '../component-context';\nimport { ComponentMount } from '../component-mount';\nimport { ComponentClass } from './component-class';\nimport { DefinitionContext__key } from './definition.context.key.impl';\nimport { ElementDef } from './element-def';\n\n/**\n * Component definition context.\n *\n * Extends `ContextValues` interface. The values are provided by corresponding providers registered with\n * [[BootstrapSetup.perDefinition]] and [[DefinitionSetup.perDefinition]] methods. All [[BootstrapContext]] values\n * are available too.\n *\n * @category Core\n * @typeparam T  A type of component.\n */\nexport abstract class DefinitionContext<T extends object = any> extends ContextValues {\n\n  /**\n   * A key of definition context value containing the definition context itself.\n   */\n  static get [ContextKey__symbol](): ContextKey<DefinitionContext> {\n    return DefinitionContext__key;\n  }\n\n  /**\n   * Component class constructor.\n   */\n  abstract readonly componentType: ComponentClass<T>;\n\n  /**\n   * Custom element class constructor.\n   *\n   * It is an error accessing this property before the element class is created, e.g. from inside of\n   * `DefinitionListener` or `ComponentDef.define()` function. In these cases you may wish to add a `whenReady()`\n   * callback.\n   */\n  abstract readonly elementType: Class;\n\n  /**\n   * Custom element definition.\n   */\n  get elementDef(): ElementDef {\n    return this.get(ElementDef);\n  }\n\n  /**\n   * Builds an `OnEvent` sender of component definition context upon its readiness.\n   *\n   * The custom element class is not constructed until component definition is complete.\n   * The registered receiver will be notified when the custom element class is constructed.\n   *\n   * If the custom element class is constructed already, the receiver will be notified immediately.\n   *\n   * @returns `OnEvent` sender of this component definition context upon its readiness.\n   */\n  abstract whenReady(): OnEvent<[this]>;\n\n  /**\n   * Registers a receiver of component definition readiness event.\n   *\n   * The custom element class is not constructed until component definition is complete.\n   * The registered receiver will be notified when the custom element class is constructed.\n   *\n   * If the custom element class is constructed already, the receiver will be notified immediately.\n   *\n   * @param receiver  Target receiver of this component definition context upon its readiness.\n   *\n   * @returns Component definition readiness event supply.\n   */\n  abstract whenReady(receiver: EventReceiver<[this]>): EventSupply;\n\n  /**\n   * Mounts a component to arbitrary element.\n   *\n   * This method creates a component, but instead of creating a custom element for, it mounts it to the target\n   * `element`.\n   *\n   * It is up to the features to update the target element. They can use a `ComponentContext.mount` property to check\n   * whether the component is mounted or is constructed in standard way.\n   *\n   * The constructed component will be in disconnected state. To update its connection state either update a\n   * `ComponentMount.connected` property, or use a `connectTo()` method.\n   *\n   * @param element  Target element to mount new component to.\n   *\n   * @returns New component mount.\n   *\n   * @throws Error If target element is already bound to some component.\n   */\n  abstract mountTo(element: any): ComponentMount<T>;\n\n  /**\n   * Connects a component to arbitrary element.\n   *\n   * This method does the same as `mountTo()`, but also marks the mounted component as connected.\n   *\n   * @param element  Target element to mount new component to.\n   *\n   * @returns New component mount.\n   *\n   * @throws Error If target element is already bound to some component.\n   */\n  connectTo(element: any): ComponentMount<T> {\n\n    const mount = this.mountTo(element);\n\n    mount.connect();\n\n    return mount;\n  }\n\n  /**\n   * Builds an `OnEvent` sender of component context upon its instantiation.\n   *\n   * If component instantiated after the receiver is registered, that receiver would receive an instantiated component's\n   * context immediately.\n   *\n   * If component already exists when the receiver is registered, that receiver would receive instantiated component's\n   * context only when/if component is {@link ComponentContext.whenConnected connected}. This is to prevent resource\n   * leaks on destroyed components.\n   *\n   * @returns `OnEvent` sender of instantiated component context.\n   */\n  abstract whenComponent(): OnEvent<[ComponentContext<T>]>;\n\n  /**\n   * Starts sending component instantiation events to the given `receiver`.\n   *\n   * If component instantiated after the receiver is registered, that receiver would receive an instantiated component's\n   * context immediately.\n   *\n   * If component already exists when the receiver is registered, that receiver would receive instantiated component's\n   * context only when/if component is {@link ComponentContext.whenConnected connected}. This is to prevent resource\n   * leaks on destroyed components.\n   *\n   * @param receiver  Target receiver of instantiate component contexts.\n   *\n   * @returns Component instantiation events supply.\n   */\n  abstract whenComponent(receiver: EventReceiver<[ComponentContext<T>]>): EventSupply;\n\n  /**\n   * Provides a value available in the context of each component of the defined component type.\n   *\n   * @typeparam Deps  A type of dependencies.\n   * @typeparam Src  The type of context value sources.\n   * @typeparam Seed  Value seed type.\n   * @param spec  Component context value specifier.\n   *\n   * @returns A function that removes the given context value specifier when called.\n   */\n  abstract perComponent<Deps extends any[], Src, Seed>(\n      spec: ContextValueSpec<ComponentContext<T>, any, Deps, Src, Seed>,\n  ): () => void;\n\n}\n","import { ComponentMount } from '../../component';\nimport { ComponentContext$ } from './component-context.impl';\n\nclass ComponentMount$<T extends object> extends ComponentMount<T> {\n\n  constructor(readonly context: ComponentContext$<T>) {\n    super();\n  }\n\n  get connected(): boolean {\n    return this.context.connected;\n  }\n\n  connect(): void {\n    this.context._connect();\n  }\n\n  checkConnected(): boolean {\n\n    const el: Element = this.context.element;\n    const doc = el.ownerDocument;\n    const connected = doc != null && doc.contains(el);\n\n    if (connected !== this.connected) {\n      if (connected) {\n        this.connect();\n      } else {\n        this.context.destroy();\n      }\n    }\n\n    return connected;\n  }\n\n}\n\n/**\n * @internal\n */\nexport class MountComponentContext$<T extends object> extends ComponentContext$<T> {\n\n  readonly mount: ComponentMount<T> = new ComponentMount$<T>(this);\n\n}\n","import { Class } from '../../common';\nimport { ComponentContext__symbol } from '../../component';\nimport { ElementDef } from '../../component/definition';\nimport { ComponentContext$ } from './component-context.impl';\nimport { DefinitionContext$ } from './definition-context.impl';\n\nclass CustomComponentContext$<T extends object> extends ComponentContext$<T> {\n\n  get mount(): undefined {\n    return;\n  }\n\n}\n\n/**\n * @internal\n */\nexport function customElementType<T extends object>(\n    definitionContext: DefinitionContext$<T>,\n): Class {\n\n  const elementDef = definitionContext.get(ElementDef);\n\n  class CustomElement$ extends elementDef.extend.type {\n\n    // Component context reference\n    [ComponentContext__symbol]: CustomComponentContext$<T>;\n\n    constructor() {\n      super();\n\n      const context = new CustomComponentContext$(definitionContext, this);\n\n      context._createComponent();\n      context._created();\n    }\n\n    connectedCallback(): void {\n      super.connectedCallback?.();\n      this[ComponentContext__symbol]._connect();\n    }\n\n    disconnectedCallback(): void {\n      this[ComponentContext__symbol].destroy();\n      super.disconnectedCallback?.();\n    }\n\n  }\n\n  return CustomElement$;\n}\n","import { AfterEvent, EventEmitter, OnEvent, onEventBy, trackValue } from '@proc7ts/fun-events';\nimport { ComponentContext } from '../../component';\n\nexport class WhenComponent<T extends object> {\n\n  readonly onCreated: OnEvent<[ComponentContext<T>]>;\n  readonly readNotifier: AfterEvent<[ComponentNotifier<T>]>;\n\n  constructor() {\n\n    const currentRev = trackValue(0);\n    const created = new EventEmitter<[ComponentContext<T>, number]>();\n\n    this.onCreated = onEventBy(receiver => {\n\n      const receiverRev = currentRev.it + 1;\n\n      created.on({\n        supply: receiver.supply,\n        receive: (eventContext, componentContext, notifiedRev) => {\n          if (notifiedRev < receiverRev) {\n            // Notify only receivers added after the last notification\n            receiver.receive(\n                {\n                  onRecurrent(recurrentReceiver) {\n                    eventContext.onRecurrent(recurrentContext => recurrentReceiver(recurrentContext));\n                  },\n                },\n                componentContext,\n            );\n          }\n        },\n      });\n\n      ++currentRev.it;\n    });\n    this.readNotifier = currentRev.read().keepThru_(\n        rev => (context, notifiedRev) => {\n          created.send(context, notifiedRev);\n          return rev;\n        },\n    );\n  }\n\n}\n\nexport type ComponentNotifier<T extends object> = (\n    this: void,\n    context: ComponentContext<T>,\n    notifiedRev: number,\n) => number;\n","import { nextArgs, nextSkip, valueProvider } from '@proc7ts/call-thru';\nimport { ContextValues, ContextValueSpec } from '@proc7ts/context-values';\nimport { EventReceiver, EventSupply, OnEvent, trackValue } from '@proc7ts/fun-events';\nimport { Class } from '../../common';\nimport { ComponentContext, ComponentContext__symbol, ComponentDef, ComponentMount } from '../../component';\nimport { ComponentClass, DefinitionContext, DefinitionSetup } from '../../component/definition';\nimport { BootstrapContext } from '../bootstrap-context';\nimport { ComponentContextRegistry } from './component-context-registry.impl';\nimport { MountComponentContext$ } from './component-mount.impl';\nimport { customElementType } from './custom-element.impl';\nimport { DefinitionContextRegistry } from './definition-context-registry.impl';\nimport { DefinitionContext__symbol } from './definition-context.symbol.impl';\nimport { ElementBuilder } from './element-builder.impl';\nimport { postDefSetup } from './post-def-setup.impl';\nimport { WhenComponent } from './when-component.impl';\n\n/**\n * @internal\n */\nexport class DefinitionContext$<T extends object> extends DefinitionContext<T> {\n\n  readonly get: ContextValues['get'];\n  private readonly _def: ComponentDef.Options<T>;\n  readonly _whenComponent = new WhenComponent<T>();\n  private readonly _ready = trackValue(false);\n  private readonly _whenReady: OnEvent<[]> = this._ready.read().thru(ready => ready ? nextArgs() : nextSkip());\n  private readonly _perTypeRegistry: ComponentContextRegistry;\n\n  constructor(\n      readonly _bsContext: BootstrapContext,\n      readonly _elementBuilder: ElementBuilder,\n      readonly componentType: ComponentClass<T>,\n  ) {\n    super();\n    this._def = ComponentDef.of(componentType);\n\n    const definitionContextRegistry = new DefinitionContextRegistry(\n        _bsContext.get(DefinitionContextRegistry).seedIn(this),\n    );\n\n    definitionContextRegistry.provide({ a: DefinitionContext, is: this });\n    this.get = definitionContextRegistry.newValues().get;\n    this._perTypeRegistry = new ComponentContextRegistry(definitionContextRegistry.seedIn(this));\n\n    const whenReady$ = this.whenReady().F;\n    const whenComponent$ = this.whenComponent().F;\n\n    const definitionSetup: DefinitionSetup<T> = {\n      get componentType() {\n        return componentType;\n      },\n      get whenReady() {\n        return whenReady$;\n      },\n      get whenComponent() {\n        return whenComponent$;\n      },\n      perDefinition: spec => definitionContextRegistry.provide(spec),\n      perComponent: spec => this._perTypeRegistry.provide(spec),\n    };\n\n    this._def.setup?.(definitionSetup);\n    postDefSetup(componentType).setup(definitionSetup);\n  }\n\n  get elementType(): Class {\n    return this._elementType();\n  }\n\n  whenReady(): OnEvent<[this]>;\n  whenReady(receiver: EventReceiver<[this]>): EventSupply;\n  whenReady(receiver?: EventReceiver<[this]>): EventSupply | OnEvent<[this]> {\n    return (this.whenReady = (this._whenReady.thru_(valueProvider(this)).once() as OnEvent<[this]>).F)(receiver);\n  }\n\n  mountTo(element: any): ComponentMount<T> {\n    if (element[ComponentContext__symbol]) {\n      throw new Error(`Element ${element} already bound to component`);\n    }\n\n    const context = new MountComponentContext$(this, element);\n\n    context._createComponent();\n\n    const { mount } = context;\n\n    mount.checkConnected();\n    context._created();\n    context.settle();\n\n    return mount;\n  }\n\n  whenComponent(): OnEvent<[ComponentContext<T>]>;\n  whenComponent(receiver: EventReceiver<[ComponentContext<T>]>): EventSupply;\n  whenComponent(receiver?: EventReceiver<[ComponentContext<T>]>): OnEvent<[ComponentContext<T>]> | EventSupply {\n    return (this.whenComponent = this._whenComponent.onCreated.F)(receiver);\n  }\n\n  perComponent<Deps extends any[], Src, Seed>(\n      spec: ContextValueSpec<ComponentContext<T>, any, Deps, Src, Seed>,\n  ): () => void {\n    return this._perTypeRegistry.provide(spec);\n  }\n\n  _newComponentRegistry(): ComponentContextRegistry {\n    return this._bsContext.get(ComponentContextRegistry).append(this._perTypeRegistry);\n  }\n\n  _elementType(): Class {\n    throw new Error('Custom element class is not constructed yet. Consider to use a `whenReady()` callback');\n  }\n\n  _define(): void {\n    this._def.define?.(this);\n    this._elementBuilder.definitions.send(this);\n    this._elementType = valueProvider(customElementType(this));\n    (this.componentType as any)[DefinitionContext__symbol] = this;\n    this._ready.it = true;\n  }\n\n}\n","import { itsEach, overArray } from '@proc7ts/a-iterable';\nimport { noop, valueProvider } from '@proc7ts/call-thru';\nimport { EventSupply, eventSupply } from '@proc7ts/fun-events';\n\n/**\n * @internal\n */\nexport interface Unloader {\n  readonly supply: EventSupply;\n  add(adder: () => () => void): () => void;\n}\n\nconst doNotAdd = valueProvider(noop);\n\n/**\n * @internal\n */\nexport function newUnloader(): Unloader {\n\n  const unloads: (() => void)[] = [];\n  let add = (adder: () => () => void): () => void => {\n\n    const unload = adder();\n\n    unloads.push(unload);\n\n    return unload;\n  };\n  const supply = eventSupply(() => {\n    add = doNotAdd;\n    itsEach(\n        overArray(unloads).reverse(),\n        unload => unload(),\n    );\n    unloads.length = 0;\n  });\n\n  return {\n    supply,\n    add(adder) {\n      return add(adder);\n    },\n  };\n}\n","import { ElementBuilder } from '../../boot/impl';\nimport { ComponentClass, CustomElements } from '../../component/definition';\nimport { FeatureContext } from '../feature-context';\n\n/**\n * @internal\n */\nexport class ComponentRegistry {\n\n  private _definitionQueue: (() => void)[] = [];\n\n  constructor(private readonly _context: FeatureContext) {\n    _context.whenReady(() => {\n      this._definitionQueue.forEach(definition => definition());\n      delete this._definitionQueue;\n    });\n  }\n\n  get customElements(): CustomElements {\n    return this._context.get(CustomElements);\n  }\n\n  define<T extends object>(componentType: ComponentClass<T>): void {\n    this._definitionQueue.push(() => {\n\n      const elementBuilder = this._context.get(ElementBuilder);\n      const defContext = elementBuilder.buildElement(componentType);\n\n      this.customElements.define(componentType, defContext.elementType);\n    });\n  }\n\n}\n","import { nextArg, nextSkip } from '@proc7ts/call-thru';\nimport { ContextRegistry, ContextValueSpec } from '@proc7ts/context-values';\nimport { afterAll, EventReceiver, EventSupply, OnEvent, trackValue } from '@proc7ts/fun-events';\nimport { BootstrapContext } from '../../boot';\nimport {\n  BootstrapContextRegistry,\n  ComponentContextRegistry,\n  DefinitionContextRegistry,\n  ElementBuilder,\n  newUnloader,\n  onPostDefSetup,\n} from '../../boot/impl';\nimport { Class } from '../../common';\nimport { ComponentContext } from '../../component';\nimport { ComponentClass, DefinitionContext, DefinitionSetup } from '../../component/definition';\nimport { FeatureContext } from '../feature-context';\nimport { ComponentRegistry } from './component-registry.impl';\nimport { FeatureLoader } from './feature-loader.impl';\n\n/**\n * @internal\n */\nexport class FeatureContext$ extends FeatureContext {\n\n  readonly _unloader = newUnloader();\n  readonly get: FeatureContext['get'];\n  private readonly _componentRegistry: ComponentRegistry;\n\n  constructor(\n      private readonly _bsContext: BootstrapContext,\n      private readonly _loader: FeatureLoader,\n  ) {\n    super();\n\n    const registry = new ContextRegistry<FeatureContext>(_bsContext);\n\n    registry.provide({ a: FeatureContext, is: this });\n    this.get = registry.newValues().get;\n    this._componentRegistry = new ComponentRegistry(this);\n  }\n\n  get feature(): Class {\n    return this._loader.request.feature;\n  }\n\n  whenReady(): OnEvent<[FeatureContext]>;\n  whenReady(receiver: EventReceiver<[FeatureContext]>): EventSupply;\n  whenReady(receiver?: EventReceiver<[FeatureContext]>): OnEvent<[FeatureContext]> | EventSupply {\n    return (this.whenReady = afterAll({\n      st: this._loader.state,\n      bs: trackValue<BootstrapContext>().by(this._bsContext.whenReady()),\n    }).thru(\n        ({\n          st: [ready],\n          bs: [bs],\n        }) => bs && ready ? nextArg(this) : nextSkip(),\n    ).once().F)(receiver);\n  }\n\n  onDefinition(): OnEvent<[DefinitionContext]>;\n  onDefinition(receiver: EventReceiver<[DefinitionContext]>): EventSupply;\n  onDefinition(receiver?: EventReceiver<[DefinitionContext]>): OnEvent<[DefinitionContext]> | EventSupply {\n    return (this.onDefinition = this._bsContext.get(ElementBuilder).definitions.on()\n        .tillOff(this._unloader.supply).F)(receiver);\n  }\n\n  onComponent(): OnEvent<[ComponentContext]>;\n  onComponent(receiver: EventReceiver<[ComponentContext]>): EventSupply;\n  onComponent(receiver?: EventReceiver<[ComponentContext]>): EventSupply | OnEvent<[ComponentContext]> {\n    return (this.onComponent = this._bsContext.get(ElementBuilder).components.on()\n        .tillOff(this._unloader.supply).F)(receiver);\n  }\n\n  provide<Deps extends any[], Src, Seed>(\n      spec: ContextValueSpec<BootstrapContext, any, Deps, Src, Seed>,\n  ): () => void {\n    return this._unloader.add(() => this._bsContext.get(BootstrapContextRegistry).provide(spec));\n  }\n\n  perDefinition<Deps extends any[], Src, Seed>(\n      spec: ContextValueSpec<DefinitionContext, any, Deps, Src, Seed>,\n  ): () => void {\n    return this._unloader.add(() => this._bsContext.get(DefinitionContextRegistry).provide(spec));\n  }\n\n  perComponent<Deps extends any[], Src, Seed>(\n      spec: ContextValueSpec<ComponentContext, any, Deps, Src, Seed>,\n  ): () => void {\n    return this._unloader.add(() => this._bsContext.get(ComponentContextRegistry).provide(spec));\n  }\n\n  setupDefinition<T extends object>(componentType: ComponentClass<T>): OnEvent<[DefinitionSetup]> {\n    return onPostDefSetup(componentType, this._unloader);\n  }\n\n  define<T extends object>(componentType: ComponentClass<T>): void {\n    this._componentRegistry.define(componentType);\n  }\n\n}\n","import { ArraySet, Class, mergeFunctions } from '../../common';\nimport { ComponentDef, ComponentDef__symbol } from '../../component';\nimport { FeatureDef } from '../feature-def';\nimport { FeatureNeedsError } from '../feature-needs-error';\nimport { FeatureKey } from './feature-loader.impl';\nimport { FeatureRequester } from './feature-requester.impl';\n\n/**\n * @internal\n */\nexport type FeatureClause = [FeatureRequest, 'is' | 'needs' | 'has', Class];\n\n/**\n * @internal\n */\nexport type FeatureNeedClause = [FeatureRequest, 'needs' | 'has', Class];\n\n/**\n * @internal\n */\nexport class FeatureRequest {\n\n  readonly def: FeatureDef.Options;\n  private _uses = 0;\n\n  constructor(\n      private readonly _requester: FeatureRequester,\n      readonly feature: Class,\n      private _revoke: () => void,\n  ) {\n    this.def = featureDef(feature);\n  }\n\n  request(clauses: readonly FeatureNeedClause[]): this {\n\n    const requester = this._requester;\n    const { registry } = requester;\n    const isClause: FeatureClause = [this, 'is', this.feature];\n\n    this._revokeBy(registry.provide({\n      a: FeatureKey.of(this.feature),\n      is: isClause,\n    }));\n\n    for (const feature of new ArraySet(this.def.has)) {\n\n      const clause: FeatureNeedClause = [this, 'has', feature];\n\n      this._revokeBy(registry.provide({ a: FeatureKey.of(feature), is: clause }));\n\n      // Request the provided feature _after_ provider\n      const request = requester.request(feature, [...clauses, clause]);\n\n      this._revokeBy(() => request.unuse());\n    }\n\n    for (const feature of new ArraySet(this.def.needs)) {\n\n      const clause: FeatureNeedClause = [this, 'needs', feature];\n\n      const request = requester.request(feature, [...clauses, clause]);\n\n      this._revokeBy(() => request.unuse());\n      this._revokeBy(registry.provide({ a: FeatureKey.of(feature), is: clause }));\n    }\n\n    this._uses = 1;\n\n    return this;\n  }\n\n  reuse(clauses: readonly FeatureNeedClause[]): this {\n    if (!this._uses) {\n      throw new FeatureNeedsError(clauses.map(([{ feature }, reason, need]) => [feature, reason, need]));\n    }\n\n    ++this._uses;\n\n    return this;\n  }\n\n  unuse(): void {\n    if (!--this._uses) {\n      this._revoke();\n    }\n  }\n\n  private _revokeBy(revoke: () => void): void {\n    this._revoke = mergeFunctions(revoke, this._revoke);\n  }\n\n}\n\nfunction featureDef(featureType: Class): FeatureDef.Options {\n\n  let def = FeatureDef.of(featureType);\n\n  if (ComponentDef__symbol in featureType) {\n    def = FeatureDef.merge(\n        def,\n        {\n          init(context) {\n            context.define(featureType);\n          },\n        },\n    );\n\n    const { feature } = ComponentDef.of(featureType);\n\n    if (feature) {\n      def = FeatureDef.merge(def, feature);\n    }\n\n  }\n\n  return def;\n}\n\n","import { ContextKey, ContextKey__symbol, SingleContextKey } from '@proc7ts/context-values';\nimport { BootstrapContext, bootstrapDefault } from '../../boot';\nimport { BootstrapContextRegistry } from '../../boot/impl';\nimport { Class } from '../../common';\nimport { FeatureNeedClause, FeatureRequest } from './feature-request.impl';\n\nconst FeatureRequester__key = (/*#__PURE__*/ new SingleContextKey<FeatureRequester>(\n    'feature-requester',\n    {\n      byDefault: bootstrapDefault(context => new FeatureRequester(context)),\n    },\n));\n\n/**\n * @internal\n */\nexport class FeatureRequester {\n\n  static get [ContextKey__symbol](): ContextKey<FeatureRequester> {\n    return FeatureRequester__key;\n  }\n\n  readonly registry: BootstrapContextRegistry;\n  private readonly _map = new Map<Class, FeatureRequest>();\n\n  constructor(context: BootstrapContext) {\n    this.registry = context.get(BootstrapContextRegistry);\n  }\n\n  request(feature: Class, clauses: readonly FeatureNeedClause[] = []): FeatureRequest {\n\n    const existing = this._map.get(feature);\n\n    if (existing) {\n      return existing.reuse(clauses);\n    }\n\n    const request = new FeatureRequest(this, feature, () => this._map.delete(feature));\n\n    this._map.set(feature, request);\n\n    return request.request(clauses);\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { MultiContextKey, MultiContextRef } from '@proc7ts/context-values';\n\n/**\n * Custom element attribute change callback signature.\n *\n * This function is called whenever a new attribute value assigned.\n *\n * @category Feature\n * @typeparam T  A type of component.\n */\nexport type AttributeChangedCallback<T extends object> =\n/**\n * @param component  Component instance.\n * @param newValue  New attribute value, or `null` when attribute removed.\n * @param oldValue  Previous attribute value, or `null` if attribute did not exist.\n */\n    (this: void, component: T, newValue: string | null, oldValue: string | null) => void;\n\n/**\n * Custom element attribute descriptor.\n *\n * Descriptors are to be registered in component's definition context in order to make them available to component.\n * The {@link Attribute @Attribute}, {@link Attributes @Attributes}, and {@link AttributeChanged @AttributeChanged}\n * decorators are doing so.\n *\n * @category Feature\n */\nexport interface AttributeDescriptor<T extends object = any> {\n\n  /**\n   * Attribute name.\n   */\n  readonly name: string;\n\n  /**\n   * Attribute change callback that will be called each time attribute value changes.\n   */\n  readonly change: AttributeChangedCallback<T>;\n\n}\n\n/**\n * A key of component definition context value containing attribute descriptors.\n *\n * @category Feature\n */\nexport const AttributeDescriptor: MultiContextRef<AttributeDescriptor> = (\n    /*#__PURE__*/ new MultiContextKey<AttributeDescriptor>('attribute-descriptor')\n);\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { FeatureDef, FeatureDef__symbol } from '../feature-def';\nimport { AttributeRegistry } from './attribute-registry.impl';\n\n/**\n * @internal\n */\nconst AttributesSupport__feature: FeatureDef = {\n  setup(setup) {\n    setup.perDefinition({ as: AttributeRegistry });\n    setup.onDefinition(definitionContext => {\n      // Define element prototype attributes\n      definitionContext.whenReady(\n          ({ elementType }) => definitionContext.get(AttributeRegistry).define(elementType),\n      );\n    });\n    setup.onComponent(componentContext => {\n\n      const mount = componentContext.mount;\n\n      if (mount) {\n        // Mount element attributes\n        componentContext.get(AttributeRegistry).mount(mount);\n      }\n    });\n  },\n};\n\n/**\n * A feature adding attributes to custom elements.\n *\n * This feature is enabled automatically whenever an `@Attribute`, `@Attributes`, or `@AttributeChanged` decorator\n * applied to component.\n *\n * @category Feature\n */\nexport class AttributesSupport {\n\n  static get [FeatureDef__symbol](): FeatureDef {\n    return AttributesSupport__feature;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKey__symbol, SingleContextKey } from '@proc7ts/context-values';\nimport { StateTracker } from '@proc7ts/fun-events';\n\n/**\n * @internal\n */\nconst ComponentState__key = (/*#__PURE__*/ new SingleContextKey<ComponentState>('component-state'));\n\n/**\n * Component state tracker.\n *\n * @category Feature\n */\nexport class ComponentState extends StateTracker {\n\n  static get [ContextKey__symbol](): ContextKey<ComponentState> {\n    return ComponentState__key;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { eventSupplyOf } from '@proc7ts/fun-events';\nimport { ComponentContext, StateUpdater } from '../../component';\nimport { FeatureDef, FeatureDef__symbol } from '../feature-def';\nimport { ComponentState } from './component-state';\n\n/**\n * @internal\n */\nconst StateSupport__feature: FeatureDef = {\n  setup(setup) {\n    setup.perComponent({\n      a: ComponentState,\n      by(context: ComponentContext) {\n\n        const state = new ComponentState();\n\n        eventSupplyOf(context).whenOff(reason => state.done(reason));\n\n        return state;\n      },\n    });\n    setup.perComponent({\n      a: StateUpdater,\n      by(state: ComponentState) {\n        return state.update;\n      },\n      with: [ComponentState],\n    });\n  },\n};\n\n/**\n * Component state support feature.\n *\n * When enabled, it registers the following component context values:\n *\n * - [[StateUpdater]] that allows to update the component state, and\n * - [[ComponentState]] that allows to track component state changes.\n *\n * Other features would use this to notify when the state changes. E.g. [[DomPropertiesSupport]]\n * and [[AttributesSupport]] features issue state updates when needed.\n *\n * @category Feature\n */\nexport class StateSupport {\n\n  static get [FeatureDef__symbol](): FeatureDef {\n    return StateSupport__feature;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { nextArgs } from '@proc7ts/call-thru';\nimport {\n  EventReceiver,\n  EventSupply,\n  eventSupply,\n  EventSupply__symbol,\n  eventSupplyOf,\n  OnEvent,\n  StatePath,\n  ValueTracker,\n} from '@proc7ts/fun-events';\nimport { ComponentContext } from '../../component';\nimport { ComponentState } from '../state';\nimport { attributePathTo } from './attribute-path';\n\nclass AttributeTracker extends ValueTracker<string | null> {\n\n  readonly [EventSupply__symbol] = eventSupply();\n\n  constructor(\n      private readonly _context: ComponentContext,\n      private readonly _name: string,\n      private readonly _path: StatePath,\n  ) {\n    super();\n  }\n\n  get it(): string | null {\n    return this._context.element.getAttribute(this._name);\n  }\n\n  set it(value: string | null) {\n    if (!eventSupplyOf(this).isOff) {\n      if (value == null) {\n        this._context.element.removeAttribute(this._name);\n      } else {\n        this._context.element.setAttribute(this._name, value);\n      }\n    }\n  }\n\n  on(): OnEvent<[string | null, string | null]>;\n  on(receiver: EventReceiver<[string | null, string | null]>): EventSupply;\n  on(\n      receiver?: EventReceiver<[string | null, string | null]>,\n  ): OnEvent<[string | null, string | null]> | EventSupply {\n    return (this.on = this._context.get(ComponentState).track(this._path).onUpdate().thru(\n        (_path, newValue, oldValue) => nextArgs(newValue, oldValue),\n    ).tillOff(this).F)(receiver);\n  }\n\n}\n\n/**\n * Creates a tracker of custom element's attribute value.\n *\n * Requires [[AttributesSupport]] feature to be enabled and attribute to be defined. E.g. with {@link Attribute\n * @Attribute}, {@link AttributeChanged @AttributeChanged}, or {@link Attributes @Attributes} decorator.\n *\n * @category Feature\n * @param context  Target component context.\n * @param name  Attribute name.\n * @param path  Custom attribute state path.\n *\n * @returns New attribute value tracker.\n */\nexport function trackAttribute(\n    context: ComponentContext,\n    name: string,\n    path: StatePath = attributePathTo(name),\n): ValueTracker<string | null> {\n  return new AttributeTracker(context, name, path);\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\n/**\n * A path to sub-state containing DOM properties.\n *\n * Thus a property state path is always something like `[DomPropertyPath__root, 'property-name']`.\n *\n * @category Feature\n */\nexport const DomPropertyPath__root = (/*#__PURE__*/ Symbol('dom-property'));\n\n/**\n * A path to the named DOM property state.\n *\n * @category Feature\n */\nexport type DomPropertyPath<K extends PropertyKey = PropertyKey> = readonly [keyof DomPropertyPath__rootKeys, K];\n\n/**\n * Constructs a named DOM property state path.\n *\n * @category Feature\n * @param key  Target property key.\n *\n * @return DOM property state path.\n */\nexport function domPropertyPathTo<K extends PropertyKey = PropertyKey>(key: K): DomPropertyPath<K> {\n  return [DomPropertyPath__root, key];\n}\n\n/**\n * @category Feature\n */\n// eslint-disable-next-line @typescript-eslint/class-name-casing\nexport interface DomPropertyPath__rootKeys {\n  [DomPropertyPath__root]: true;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { StatePath } from '@proc7ts/fun-events';\n\n/**\n * Element rendering definition.\n *\n * @category Feature\n */\nexport interface RenderDef {\n\n  /**\n   * When to start the rendering.\n   *\n   * One of:\n   * - `settled` (the default) - start rendering when component is {@link ComponentContext.settled settled}.\n   * - `connected` - start rendering when component's element is {@link ComponentContext.connected connected}\n   *   to document.\n   */\n  readonly when?: 'settled' | 'connected';\n\n  /**\n   * A path to component state part the renderer should track.\n   *\n   * The rendering would trigger only when the target state part is updated. This can be useful e.g. when component has\n   * multiple independent sub-views.\n   *\n   * The full component state is tracked when this property is omitted.\n   */\n  readonly path?: StatePath;\n\n  /**\n   * Reports rendering error. E.g. a render shot execution failure.\n   *\n   * @param messages  Error messages to report.\n   */\n  error?(...messages: any[]): void;\n\n}\n\n/**\n * @category Feature\n */\nexport const RenderDef = {\n\n  /**\n   * Merges two element rendering definitions.\n   *\n   * @param base  Base definition to extend.\n   * @param extension  Definition extension.\n   *\n   * @return `base` element rendering definition with options overridden by `extension`.\n   */\n  merge(this: void, base: RenderDef, extension: RenderDef): RenderDef {\n\n    const { path = base.path, error } = extension;\n\n    return {\n      path,\n      error: error ? error.bind(extension) : base.error && base.error.bind(base),\n    };\n  },\n\n};\n","import { noop } from '@proc7ts/call-thru';\nimport { EventSupply } from '@proc7ts/fun-events';\nimport { immediateRenderScheduler, RenderExecution } from '@proc7ts/render-scheduler';\nimport { DefaultRenderScheduler } from '../../boot/globals';\nimport { ComponentContext } from '../../component';\nimport { ComponentState } from '../state';\nimport { ElementRenderCtl } from './element-render-ctl';\nimport { ElementRenderer } from './element-renderer';\nimport { RenderDef } from './render-def';\n\n/**\n * @internal\n */\nconst enum RenderStatus {\n  Cancelled = -1,\n  Complete = 0,\n  Pending = 1,\n  Scheduled = 2,\n}\n\n/**\n * @internal\n */\nexport class ElementRenderCtl$ implements ElementRenderCtl {\n\n  private readonly _renders = new Set<() => void>();\n\n  constructor(private readonly _context: ComponentContext) {\n  }\n\n  renderBy(\n      renderer: ElementRenderer,\n      def: RenderDef = {},\n  ): EventSupply {\n\n    const { when, path = [] } = def;\n    const stateTracker = this._context.get(ComponentState).track(path);\n    const schedule = this._context.get(DefaultRenderScheduler)({\n      ...RenderDef.merge(def, { path }),\n      node: this._context.element,\n    });\n    const whenConnected = when === 'connected';\n    let status = RenderStatus.Pending;\n    const startRendering = (): 0 | void => status /* there is an update to render */ && scheduleRenderer();\n    const onUpdate = whenConnected\n        ? () => this._context.connected && scheduleRenderer()\n        : () => this._context.settled && scheduleRenderer();\n    const supply = stateTracker.onUpdate(onUpdate)\n        .needs(this._context)\n        .whenOff(cancelRenderer);\n\n    (whenConnected ? this._context.whenConnected() : this._context.whenSettled()).to(startRendering);\n\n    const immediateSchedule = immediateRenderScheduler();\n\n    this._renders.add(renderNow);\n\n    return supply.whenOff(() => this._renders.delete(renderNow));\n\n    function scheduleRenderer(): void {\n      status = RenderStatus.Scheduled;\n      schedule(renderElement);\n    }\n\n    function renderNow(): void {\n      immediateSchedule(renderElement);\n    }\n\n    function cancelRenderer(): void {\n      if (status === RenderStatus.Scheduled) { // Scheduled, but not rendered yet\n        schedule(noop);\n      }\n      status = RenderStatus.Cancelled;\n    }\n\n    function renderElement(execution: RenderExecution): void {\n      if (status > RenderStatus.Complete) { // Prevent excessive rendering\n        status = RenderStatus.Complete;\n        for (; ;) {\n\n          const newRenderer = renderer(execution);\n\n          if (newRenderer === renderer || typeof newRenderer !== 'function') {\n            break;\n          }\n\n          renderer = newRenderer;\n        }\n      }\n    }\n  }\n\n  renderNow(): void {\n    this._renders.forEach(render => render());\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextRef, SingleContextKey } from '@proc7ts/context-values';\nimport { EventSupply } from '@proc7ts/fun-events';\nimport { ComponentContext } from '../../component';\nimport { ElementRenderCtl$ } from './element-render-ctl.impl';\nimport { ElementRenderer } from './element-renderer';\nimport { RenderDef } from './render-def';\n\n/**\n * A render control of component's element.\n *\n * Controls rendering by {@link ElementRenderer element renderers}.\n *\n * Available in component context. Requires {@link StateSupport state support} to be enabled.\n *\n * @category Feature\n */\nexport interface ElementRenderCtl {\n\n  /**\n   * Enables component element rendering by the given `renderer`.\n   *\n   * A `renderer` call will be scheduled by [[DefaultRenderScheduler]] once component state updated.\n   *\n   * @param renderer  Element renderer function.\n   * @param def  Optional element rendering definition.\n   *\n   * @returns Render shots supply. Element `renderer` will stop rendering once this supply is cut off.\n   */\n  renderBy(\n      renderer: ElementRenderer,\n      def?: RenderDef,\n  ): EventSupply;\n\n  /**\n   * Executes scheduled element render shots immediately.\n   *\n   * Uses `immediateRenderScheduler` for that.\n   *\n   * Does not execute element renderers that are not scheduled. I.e. if no corresponding state updates happened.\n   */\n  renderNow(): void;\n\n}\n\n/**\n * A key of component context value containing {@link ElementRenderCtl element render control}.\n *\n * @category Feature\n */\nexport const ElementRenderCtl: ContextRef<ElementRenderCtl> = (\n    /*#__PURE__*/ new SingleContextKey<ElementRenderCtl>(\n        'element-render-ctl',\n        {\n          byDefault(values) {\n            return new ElementRenderCtl$(values.get(ComponentContext));\n          },\n        },\n    )\n);\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { SingleContextKey, SingleContextRef } from '@proc7ts/context-values';\n\n/**\n * Component shadow content root.\n *\n * @category Feature\n */\nexport type ShadowContentRoot = ShadowRoot;\n\n/**\n * A key of component context value containing a shadow content root instance.\n *\n * This is only available when the component is decorated with {@link AttachShadow @AttachShadow} decorator.\n *\n * @category Feature\n */\nexport const ShadowContentRoot: SingleContextRef<ShadowContentRoot> = (\n    /*#__PURE__*/ new SingleContextKey<ShadowContentRoot>('shadow-content-root')\n);\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\n/**\n * An event related to element's shadow DOM.\n *\n * The following event types supported:\n * - `wesib:shadowAttached` is dispatched when a shadow root is attached to element.\n *   In particular, it is dispatched for components decorated with {@link AttachShadow @AttachShadow}.\n *   The event is dispatched when component is connected for the first time. I.e. when element is added to the document.\n *   This event bubbles and is not cancelable.\n *\n * @category Feature\n */\nexport class ShadowDomEvent extends Event {\n\n  /**\n   * Shadow root this event relates to.\n   */\n  get shadowRoot(): ShadowRoot {\n    return (this.target as Element).shadowRoot as ShadowRoot;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { FnContextKey, FnContextRef } from '@proc7ts/context-values/updatable';\nimport { ComponentContext } from '../../component';\nimport { ShadowContentDef } from './attach-shadow.decorator';\n\n/**\n * Shadow root builder function type.\n *\n * An instance of this function is available in component context and is used by {@link AttachShadow @AttachShadow}\n * decorator to attach shadow root to decorated component's custom element.\n *\n * By default, if shadow root already exists for the component's element, it uses it.\n *\n * Dispatches a `wesib:shadowAttached` event for the found or attached shadow root.\n *\n * @category Feature\n */\nexport type ShadowRootBuilder =\n/**\n * @param context  Target component context.\n * @param init  Shadow root initialization options.\n *\n * @returns A shadow root instance for target component, or `null`/`undefined` if one can not be attached.\n */\n    (context: ComponentContext, init: ShadowContentDef) => ShadowRoot | null | undefined;\n\n/**\n * A key of component context value containing a shadow root builder instance.\n *\n * @category Feature\n */\nexport const ShadowRootBuilder: FnContextRef<Parameters<ShadowRootBuilder>, ReturnType<ShadowRootBuilder>> = (\n    /*#__PURE__*/ new FnContextKey<Parameters<ShadowRootBuilder>, ReturnType<ShadowRootBuilder>>(\n        'shadow-root-builder',\n    )\n);\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { NamespaceDef } from '@proc7ts/namespace-aliaser';\n\n/**\n * Default Wesib namespace definition.\n *\n * @category Core\n */\nexport const Wesib__NS: NamespaceDef = (/*#__PURE__*/ new NamespaceDef(\n    'https://wesib.github.io/ns',\n    'b',\n    'wesib',\n));\n","/**\n * @internal\n */\nexport const parseNone = (): false => false;\n","/**\n * @packageDocumentation\n * @module @proc7ts/http-header-value\n */\nimport { HthvParser, newHthvParser } from './hthv-parser';\n\n/**\n * Parses HTTP header value.\n *\n * Splits the value onto {@link HthvItem items}.\n *\n * Parser is configured with default {@link HthvParserConfig config}.\n *\n * Does not recognize comments.\n *\n * Handles date/time values in [IMF-fixdate] format only.\n *\n * Treats illegal characters as ASCII letters.\n *\n * [IMF-fixdate]: https://tools.ietf.org/html/rfc7231#section-7.1.1.1\n *\n * @param value  HTTP header value to parse.\n *\n * @returns An array of comma- or space- separated value items.\n */\nexport const hthvParse: HthvParser = (/*#__PURE__*/ newHthvParser());\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { ContextUpRef } from '@proc7ts/context-values/updatable';\nimport { EventSender, OnEvent } from '@proc7ts/fun-events';\nimport { FetchAgentKey } from './fetch-agent-key.impl';\n\n/**\n * HTTP fetch agent signature.\n *\n * The agent can be used to alter [[HttpFetch]] processing. For that it should be registered in appropriate context.\n *\n * All registered agents are organized into chain. The first agent in chain is called by [[HttpFetch]].\n */\nexport type HttpFetchAgent =\n/**\n * @param next  Either calls the next agent in chain, or actually fetches the data if this agent is the last one.\n * Accepts an optional `Request` parameter. The original request will be used instead when omitted.\n * @param request  HTTP request.\n *\n * @returns An `EventSender` of response object(s). It is returned either to preceding agent in chain, or as a result of\n * [[HttpFetch]] call.\n */\n    (\n        this: void,\n        next: (this: void, request?: Request) => OnEvent<[Response]>,\n        request: Request,\n    ) => EventSender<[Response]>;\n\nexport namespace HttpFetchAgent {\n\n  /**\n   * Combined HTTP fetch agent signature.\n   *\n   * This is what is available under [[HttpFetchAgent]] key.\n   */\n  export type Combined =\n  /**\n   * @param next  Either calls the next agent in chain, or actually fetches the data if this agent is the last one.\n   * Accepts `Request` parameter.\n   * @param request  HTTP request.\n   *\n   * @returns An `OnEvent` registrar of response object(s) receivers. It is returned as a result of [[HttpFetch]] call.\n   */\n      (\n          this: void,\n          next: (this: void, request: Request) => OnEvent<[Response]>,\n          request: Request,\n      ) => OnEvent<[Response]>;\n\n}\n\n/**\n * A key of context value containing an [[HttpFetchAgent]] instance.\n *\n * The agent returned combines all registered agents into one. If no agent registered it just performs the fetch.\n */\nexport const HttpFetchAgent: ContextUpRef<HttpFetchAgent.Combined, HttpFetchAgent> = (\n    /*#__PURE__*/ new FetchAgentKey<[Response]>('http-fetch-agent')\n);\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { FnContextKey, FnContextRef } from '@proc7ts/context-values/updatable';\nimport { OnEvent } from '@proc7ts/fun-events';\nimport { bootstrapDefault } from '@wesib/wesib';\nimport { newHttpFetch } from './http-fetch.impl';\n\n/**\n * HTTP fetch function signature.\n *\n * This is a function that wraps browser's\n * [fetch()](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch) function and provides\n * additional functionality. E.g. request interception.\n *\n * This function returns an `OnEvent` sender instead of a `Promise`. This allows to report multiple responses.\n * E.g. when the resource refresh requested and delivered. The request is sent whenever a receiver is registered\n * in this sender. When the fetch completes the response supply is cut off, and callbacks registered with its\n * `whenOff()` method are notified. When fetch fails for whatever reason, this reason is passed to these callbacks.\n * The fetch can be aborted by cutting off the response supply. I.e. by calling its `off()` method.\n *\n * An instance of [[HttpFetch]] is available from bootstrap context.\n */\nexport type HttpFetch =\n/**\n * @param input  The resource to fetch. This can either an URL string, or a `Request` object.\n * @param init  Custom settings to apply to the request.\n *\n * @returns An `OnEvent` sender of responses.\n */\n    (this: void, input: RequestInfo, init?: RequestInit) => OnEvent<[Response]>;\n\n/**\n * A key of bootstrap context value containing an [[HttpFetch]] instance.\n */\nexport const HttpFetch: FnContextRef<Parameters<HttpFetch>, ReturnType<HttpFetch>> = (\n    /*#__PURE__*/ new FnContextKey<Parameters<HttpFetch>, ReturnType<HttpFetch>>(\n        'http-fetch',\n        {\n          byDefault: bootstrapDefault(newHttpFetch),\n        },\n    )\n);\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { noop } from '@proc7ts/call-thru';\nimport {\n  ContextKey,\n  ContextKey__symbol,\n  ContextRegistry,\n  ContextValues,\n  ContextValueSpec,\n  SingleContextKey,\n} from '@proc7ts/context-values';\nimport {\n  AfterEvent,\n  afterEventBy,\n  EventKeeper,\n  EventReceiver,\n  EventSupply,\n  eventSupply,\n  EventSupply__symbol,\n  eventSupplyOf,\n  EventSupplyPeer,\n  trackValue,\n  ValueTracker,\n} from '@proc7ts/fun-events';\nimport { BootstrapContext, ComponentContext } from '@wesib/wesib';\nimport { newHierarchyRegistry } from './hierarchy-registry.impl';\nimport { findParentContext, HierarchyRoot, HierarchyUpdates } from './hierarchy-updates.impl';\n\n/**\n * @internal\n */\nconst HierarchyContext__key = (/*#__PURE__*/ new SingleContextKey<HierarchyContext>(\n    'hierarchy-context',\n    {\n      byDefault: context => new HierarchyContext$(context.get(ComponentContext)),\n    },\n));\n\n/**\n * Component's hierarchy context.\n *\n * Passes provided values to hierarchy contexts of nested components.\n *\n * Available as component context value.\n *\n * @typeparam T  A type of component.\n */\nexport abstract class HierarchyContext<T extends object = any> extends ContextValues implements EventSupplyPeer {\n\n  /**\n   * A key of component context value containing its hierarchy context instance.\n   */\n  static get [ContextKey__symbol](): ContextKey<HierarchyContext> {\n    return HierarchyContext__key;\n  }\n\n  /**\n   * Component context.\n   */\n  abstract readonly context: ComponentContext<T>;\n\n  get [EventSupply__symbol](): EventSupply {\n    return eventSupplyOf(this.context);\n  }\n\n  /**\n   * Builds an `AfterEvent` keeper of enclosing component's hierarchy context.\n   *\n   * May send `undefined` when component is outside of hierarchy. E.g. when it is disconnected.\n   *\n   * @returns An `AfterEvent` of enclosing hierarcy context.\n   */\n  abstract up(): AfterEvent<[HierarchyContext?]>;\n\n  /**\n   * Starts sending enclosing component's hierarchy context and updates to the given `receiver`\n   *\n   * May send `undefined` when component is outside of hierarchy. E.g. when it is disconnected.\n   *\n   * @param receiver  Target receiver of enclosing hierarchy context.\n   *\n   * @returns Enclosing hierarchy context supply.\n   */\n  abstract up(receiver: EventReceiver<[HierarchyContext?]>): EventSupply;\n\n  /**\n   * Assigns enclosing component to use by default.\n   *\n   * The provided component will be treated as enclosing one until component element connected. After that the real\n   * enclosing component will be used instead.\n   *\n   * @param enclosing  Enclosing component's context to assign, or nothing to remove one.\n   *\n   * @returns `this` instance.\n   */\n  abstract inside(enclosing?: ComponentContext): this;\n\n  /**\n   * Provides hierarchy context value.\n   *\n   * The provided value will be available in context itself, as well as in all nested hierarchy contexts.\n   *\n   * Note that the provided value key has to `ContextUpKey`.\n   *\n   * @typeparam Deps  Dependencies tuple type.\n   * @typeparam Src  Source value type.\n   * @typeparam Seed  Value seed type.\n   * @param spec  Context value specifier.\n   *\n   * @returns A function that removes the given context value specifier when called.\n   */\n  abstract provide<Deps extends any[], Src, Seed>(\n      spec: ContextValueSpec<HierarchyContext<T>, any, Deps, Src | EventKeeper<Src[]>, Seed>,\n  ): () => void;\n\n}\n\nclass HierarchyContext$<T extends object> extends HierarchyContext<T> {\n\n  private readonly _parent: ValueTracker<HierarchyContext | undefined>;\n  private readonly _registry: ContextRegistry<HierarchyContext<T>>;\n  readonly get: HierarchyContext<T>['get'];\n\n  constructor(readonly context: ComponentContext<T>) {\n    super();\n\n    const parent = this._parent = trackValue<HierarchyContext>();\n\n    context.whenConnected(noop).cuts(parent);\n\n    const registry = this._registry = newHierarchyRegistry<T>(this.up());\n\n    this.get = registry.newValues().get;\n  }\n\n  provide<Deps extends any[], Src, Seed>(\n      spec: ContextValueSpec<HierarchyContext<T>, any, Deps, Src | EventKeeper<Src[]>, Seed>,\n  ): () => void {\n\n    const off = this._registry.provide(spec);\n\n    eventSupplyOf(this).whenOff(off);\n\n    return off;\n  }\n\n  up(): AfterEvent<[HierarchyContext?]>;\n  up(receiver: EventReceiver<[HierarchyContext?]>): EventSupply;\n  up(receiver?: EventReceiver<[HierarchyContext?]>): AfterEvent<[HierarchyContext?]> | EventSupply {\n    return (this.up = afterEventBy<[HierarchyContext?]>(\n        receiver => {\n\n          const { supply } = receiver;\n\n          supply.needs(this);\n\n          const parentHierarchy = trackValue<HierarchyContext>();\n\n          parentHierarchy.by(this._parent);\n          supply.cuts(parentHierarchy);\n\n          const rootSupply = eventSupply().needs(supply);\n          const parentSupply = eventSupply().needs(supply);\n          const updateParent = (): void => {\n\n            const parent = findParentContext(this.context);\n\n            if (parent) {\n\n              const [parentCtx, immediate] = parent;\n\n              parentHierarchy.it = parentCtx.get(HierarchyContext);\n              rootSupply.off();\n              if (immediate) {\n                parentSupply.off();\n              }\n            } else {\n              parentHierarchy.it = undefined;\n            }\n          };\n\n          this.context.get(BootstrapContext).get(HierarchyRoot).read({\n            supply: rootSupply,\n            receive: () => this.context.connected && updateParent(),\n          });\n          parentHierarchy.read().tillOff(parentSupply).consume(\n              newParent => newParent && newParent.context.get(HierarchyUpdates).on.to(updateParent),\n          );\n          parentHierarchy.read(receiver);\n          this.context.whenConnected({\n            supply: eventSupply().needs(supply),\n            receive: updateParent,\n          });\n        },\n    ).share().F)(receiver);\n  }\n\n  inside(enclosing?: ComponentContext): this {\n    this._parent.it = enclosing && enclosing.get(HierarchyContext);\n    return this;\n  }\n\n}\n","import { nextArgs } from '@proc7ts/call-thru';\nimport { ContextRegistry } from '@proc7ts/context-values';\nimport { AfterEvent, nextAfterEvent } from '@proc7ts/fun-events';\nimport { HierarchyContext } from './hierarchy-context';\n\n/**\n * @internal\n */\nexport function newHierarchyRegistry<T extends object>(\n    up: AfterEvent<[HierarchyContext?]>,\n): ContextRegistry<HierarchyContext<T>> {\n  return new ContextRegistry(\n      key => up.keepThru(\n          upper => upper ? nextAfterEvent(upper.get(key as any)) : nextArgs(),\n      ) as any,\n  );\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { SingleContextKey, SingleContextRef } from '@proc7ts/context-values';\nimport { ValueTracker } from '@proc7ts/fun-events';\nimport { ComponentClass, ComponentContext } from '@wesib/wesib';\nimport { ElementNodeList } from './element-node-list';\n\n/**\n * Arbitrary element node within component tree. Either bound to some component or not.\n */\nexport type ElementNode =\n    | RawElementNode\n    | ComponentNode;\n\n/**\n * Component tree node representing arbitrary element.\n *\n * This is a base interface of all element node implementations.\n */\nexport interface ComponentTreeNode {\n\n  /**\n   * The element itself.\n   */\n  readonly element: any;\n\n  /**\n   * A context of component bound to this element, if any.\n   */\n  readonly context?: ComponentContext<any>;\n\n  /**\n   * Parent element node, or `null` if element has no parent.\n   */\n  readonly parent: ElementNode | null;\n\n  /**\n   * Selects component nodes matching the given selector.\n   *\n   * @param selector  Simple CSS selector of nested components.\n   * @param mode  Component nodes pick mode.\n   *\n   * @returns Dynamically updatable list of matching component nodes.\n   */\n  select(\n      selector: string,\n      mode?: ComponentPickMode,\n  ): ElementNodeList<ComponentNode>;\n\n  /**\n   * Selects component nodes of the given type.\n   *\n   * @param componentType  Nested component type with custom element name.\n   * @param mode  Component nodes pick mode.\n   *\n   * @returns Dynamically updatable list of matching component nodes.\n   */\n  select<T extends object>(\n      componentType: ComponentClass<T>,\n      mode?: ComponentPickMode,\n  ): ElementNodeList<ComponentNode<T>>;\n\n  /**\n   * Selects element nodes matching the given selector.\n   *\n   * @param selector  Simple CSS selector of nested elements. E.g. CSS class selector.\n   * @param mode  A mode of node picking from component tree.\n   *\n   * @returns Dynamically updatable list of matching element nodes.\n   */\n  select(\n      selector: string,\n      mode: ElementPickMode,\n  ): ElementNodeList;\n\n  /**\n   * Tracks element attribute.\n   *\n   * `null` attribute value corresponds to its absence. Setting it to `null` removes attribute.\n   *\n   * @param name  Target attribute name.\n   *\n   * @returns Target attribute's value tracker.\n   */\n  attribute(name: string): ValueTracker<string | null>;\n\n  /**\n   * Tracks element element property.\n   *\n   * The changes are tracked with `StateTracker`. So it is expected that the target property notifies on its changes\n   * with state updater. E.g. when it is defined by `@DomProperty` decorator.\n   *\n   * @param key  Target property key.\n   *\n   * @returns Target property's value tracker.\n   */\n  property<V>(key: PropertyKey): ValueTracker<V>;\n\n}\n\n/**\n * Element node representing raw element not bound to any component.\n */\nexport interface RawElementNode extends ComponentTreeNode {\n\n  readonly context?: undefined;\n\n}\n\n/**\n * Element node representing an element bound to some component.\n */\nexport interface ComponentNode<T extends object = any> extends ComponentTreeNode {\n\n  readonly context: ComponentContext<T>;\n\n}\n\n/**\n * A key of component context value containing a component node instance.\n */\nexport const ComponentNode: SingleContextRef<ComponentNode> = (\n    /*#__PURE__*/ new SingleContextKey<ComponentNode>('component-node')\n);\n\n/**\n * A mode of node picking from component tree.\n */\nexport interface ElementPickMode {\n\n  /**\n   * Set to `true` to select arbitrary nodes. Otherwise - select only component nodes.\n   */\n  all?: boolean;\n\n  /**\n   * Set to `true` to select from entire subtree. Otherwise - select from element child nodes only.\n   */\n  deep?: boolean;\n\n}\n\n/**\n * A mode that picks component nodes from component tree.\n */\nexport interface ComponentPickMode extends ElementPickMode {\n\n  all?: false;\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport {\n  AfterEvent,\n  AfterEvent__symbol,\n  EventKeeper,\n  EventReceiver,\n  EventSender,\n  EventSupply,\n  OnEvent,\n  OnEvent__symbol,\n} from '@proc7ts/fun-events';\nimport { ElementNode } from './element-node';\n\n/**\n * Dynamically updatable list of selected element nodes.\n *\n * It is an iterable of nodes.\n *\n * Implements an `EventSender` interface by sending added and removed nodes arrays.\n *\n * Implements an `EventKeeper` interface by sending updated node list.\n */\nexport abstract class ElementNodeList<N extends ElementNode = ElementNode>\n    implements Iterable<N>, EventSender<[N[], N[]]>, EventKeeper<[ElementNodeList<N>]> {\n\n  /**\n   * Builds an `OnEvent` sender of this list changes.\n   *\n   * The `[OnEvent__symbol]` property is an alias of this one.\n   *\n   * @returns An `OnEvent` sender of added an removed node arrays.\n   */\n  abstract onUpdate(): OnEvent<[N[], N[]]>;\n\n  /**\n   * Starts sending this list changes to the given `receiver`\n   *\n   * @param receiver  Target receiver of added an removed node arrays.\n   *\n   * @returns List changes supply.\n   */\n  abstract onUpdate(receiver: EventReceiver<[N[], N[]]>): EventSupply;\n\n  abstract [Symbol.iterator](): Iterator<N>;\n\n  [OnEvent__symbol](): OnEvent<[N[], N[]]> {\n    return this.onUpdate();\n  }\n\n  /**\n   * Builds an `AfterEvent` keeper of current node list.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   *\n   * @returns An `AfterEvent` keeper of this list.\n   */\n  abstract read(): AfterEvent<[ElementNodeList<N>]>;\n\n  /**\n   * Starts sending current node list and updates to the given `receiver`.\n   *\n   * @param receiver  Target receiver of this node list.\n   *\n   * @returns Node list supply.\n   */\n  abstract read(receiver: EventReceiver<[ElementNodeList<N>]>): EventSupply;\n\n  [AfterEvent__symbol](): AfterEvent<[ElementNodeList<N>]> {\n    return this.read();\n  }\n\n  /**\n   * Builds an `AfterEvent` keeper of tracked list changes.\n   *\n   * Sends current nodes immediately upon receiver registration as added ones.\n   *\n   * @returns An `AfterEvent` sender of arrays of added and removed nodes.\n   */\n  abstract track(): AfterEvent<[readonly N[], readonly N[]]>;\n\n  /**\n   * Starts sending tracked list changes to the given `receiver`.\n   *\n   * Sends current nodes immediately upon receiver registration as added ones.\n   *\n   * @param receiver  Target receiver of arrays of added and removed nodes.\n   *\n   * @returns Tracked list changes supply.\n   */\n  abstract track(receiver: EventReceiver<[readonly N[], readonly N[]]>): EventSupply;\n\n  /**\n   * Builds an `AfterEvent` keeper of the first node in this list.\n   *\n   * @returns `AfterEvent` keeper of either the first node, or `undefined` when the list is empty.\n   */\n  abstract first(): AfterEvent<[N?]>;\n\n  /**\n   * Starts sending the first node of this list and updates to the given `receiver`.\n   *\n   * @param receiver  Target receiver of either the first node, or `undefined` when the list is empty.\n   *\n   * @returns The first node supply.\n   */\n  abstract first(receiver: EventReceiver<[N?]>): EventSupply;\n\n}\n","import {\n  EventEmitter,\n  eventReceiver,\n  EventReceiver,\n  eventSupply,\n  EventSupply,\n  EventSupply__symbol,\n  eventSupplyOf,\n  noEventSupply,\n  OnEvent,\n  onEventBy,\n  ValueTracker,\n} from '@proc7ts/fun-events';\nimport { BootstrapContext, BootstrapWindow } from '@wesib/wesib';\n\n/**\n * @internal\n */\nclass AttributesObserver {\n\n  private readonly _emitters = new Map<string, EventEmitter<[string | null, string | null]>>();\n  private _observer?: MutationObserver;\n\n  constructor(private readonly _bs: BootstrapContext, readonly element: Element) {\n  }\n\n  private get observer(): MutationObserver {\n    if (this._observer) {\n      return this._observer;\n    }\n\n    const Observer: typeof MutationObserver = (this._bs.get(BootstrapWindow) as any).MutationObserver;\n\n    return this._observer = new Observer(mutations => this._update(mutations));\n  }\n\n  observe(name: string, receiver: EventReceiver<[string | null, string | null]>): EventSupply {\n\n    const self = this;\n    const observer = this.observer;\n    const emitter = this._emitter(name);\n    const rcv = eventReceiver(receiver);\n    const supply = emitter.on({\n      supply: eventSupply(() => {\n        this._emitters.delete(name);\n        observer.disconnect();\n        if (this._emitters.size) {\n          reconnect();\n        } else {\n          this._observer = undefined;\n        }\n      }).needs(rcv.supply),\n      receive: (ctx, newValue, oldValue) => rcv.receive(ctx, newValue, oldValue),\n    });\n\n    observer.disconnect();\n    reconnect();\n\n    return supply;\n\n    function reconnect(): void {\n      self._update(observer.takeRecords());\n      observer.observe(self.element, {\n        attributes: true,\n        attributeOldValue: true,\n        attributeFilter: Array.from(self._emitters.keys()),\n      });\n    }\n  }\n\n  private _update(mutations: MutationRecord[]): void {\n    mutations.forEach(mutation => {\n\n      const attributeName = mutation.attributeName as string;\n      const emitter = this._emitters.get(attributeName);\n\n      if (emitter) {\n        emitter.send(this.element.getAttribute(attributeName) as string, mutation.oldValue);\n      }\n    });\n  }\n\n  private _emitter(name: string): EventEmitter<[string | null, string | null]> {\n\n    const emitter = new EventEmitter<[string | null, string | null]>();\n\n    this._emitters.set(name, emitter);\n\n    return emitter;\n  }\n\n}\n\n/**\n * @internal\n */\nclass AttributeTracker extends ValueTracker<string | null> {\n\n  private readonly _updates = new EventEmitter<[string | null, string | null]>();\n\n  constructor(\n      private readonly _observer: AttributesObserver,\n      private readonly _name: string,\n  ) {\n    super();\n  }\n\n  get [EventSupply__symbol](): EventSupply {\n    return eventSupplyOf(this._updates);\n  }\n\n  get it(): string | null {\n    return this._observer.element.getAttribute(this._name);\n  }\n\n  set it(value: string | null) {\n    if (value != null) {\n      this._observer.element.setAttribute(this._name, value);\n    } else {\n      this._observer.element.removeAttribute(this._name);\n    }\n  }\n\n  on(): OnEvent<[string | null, string | null]>;\n  on(receiver: EventReceiver<[string | null, string | null]>): EventSupply;\n  on(receiver?: EventReceiver<[string | null, string | null]>): OnEvent<[string | null, string | null]> | EventSupply {\n\n    let observeSupply = noEventSupply();\n\n    return (this.on = onEventBy(receiver => {\n      if (!this._updates.size) {\n        observeSupply = this._observer.observe(\n            this._name,\n            (newValue, oldValue) => this._updates.send(newValue, oldValue),\n        );\n      }\n      receiver.supply.needs(observeSupply);\n      this._updates.on(receiver).whenOff(reason => {\n        if (!this._updates.size) {\n          observeSupply.off(reason);\n        }\n      });\n    }).F)(receiver);\n  }\n\n}\n\n/**\n * @internal\n */\nexport class NodeAttributes {\n\n  private readonly _attrs = new Map<string, AttributeTracker>();\n  private readonly _observer: AttributesObserver;\n\n  constructor(bs: BootstrapContext, element: any) {\n    this._observer = new AttributesObserver(bs, element);\n  }\n\n  get(name: string): ValueTracker<string | null> {\n\n    const existing = this._attrs.get(name);\n\n    if (existing) {\n      return existing;\n    }\n\n    const created = new AttributeTracker(this._observer, name);\n\n    this._attrs.set(name, created);\n\n    return created;\n  }\n\n}\n","import {\n  EventEmitter,\n  EventReceiver,\n  EventSupply,\n  EventSupply__symbol,\n  eventSupplyOf,\n  OnEvent,\n  ValueTracker,\n} from '@proc7ts/fun-events';\nimport { ComponentContext, ComponentState, domPropertyPathTo } from '@wesib/wesib';\n\n/**\n * @internal\n */\nclass PropertyTracker<T> extends ValueTracker<T> {\n\n  private readonly _updates = new EventEmitter<[T, T]>();\n\n  constructor(\n      private readonly _element: any,\n      private readonly _key: PropertyKey,\n  ) {\n    super();\n  }\n\n  get [EventSupply__symbol](): EventSupply {\n    return eventSupplyOf(this._updates);\n  }\n\n  get it(): T {\n    return this._element[this._key];\n  }\n\n  set it(value: T) {\n    this._element[this._key] = value;\n  }\n\n  on(): OnEvent<[T, T]>;\n  on(receiver: EventReceiver<[T, T]>): EventSupply;\n  on(receiver?: EventReceiver<[T, T]>): OnEvent<[T, T]> | EventSupply {\n    return (this.on = this._updates.on().F)(receiver);\n  }\n\n  bind(context: ComponentContext): void {\n\n    const propertyState = context.get(ComponentState).track(domPropertyPathTo(this._key));\n\n    propertyState.onUpdate().to({\n      supply: eventSupplyOf(this),\n      receive: (_ctx, _path, newValue: any, oldValue: any) => this._updates.send(newValue, oldValue),\n    });\n  }\n\n}\n\n/**\n * @internal\n */\nexport class NodeProperties {\n\n  private readonly _props = new Map<PropertyKey, PropertyTracker<any>>();\n  private _context?: ComponentContext<any>;\n\n  constructor(private readonly _element: any) {\n  }\n\n  bind(context: ComponentContext): void {\n    this._context = context;\n    this._props.forEach(prop => prop.bind(context));\n  }\n\n  get<T>(key: PropertyKey): ValueTracker<T> {\n\n    const existing = this._props.get(key);\n\n    if (existing) {\n      return existing;\n    }\n\n    const created = new PropertyTracker<any>(this._element, key);\n\n    if (this._context) {\n      created.bind(this._context);\n    }\n    this._props.set(key, created);\n\n    return created;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { BootstrapContext, ComponentContext, FeatureDef, FeatureDef__symbol, StateSupport } from '@wesib/wesib';\nimport { ComponentNode } from './element-node';\nimport { elementNodeOf } from './element-node.impl';\n\n/**\n * @internal\n */\nconst ComponentTreeSupport__feature: FeatureDef = {\n  needs: StateSupport,\n  setup(setup) {\n    setup.perComponent({\n      a: ComponentNode,\n      by(context: ComponentContext) {\n        return elementNodeOf(context.get(BootstrapContext), context.element) as ComponentNode;\n      },\n    });\n  },\n};\n\n/**\n * Component tree support feature.\n *\n * Provides a [[ComponentNode]] instance for each component.\n */\nexport class ComponentTreeSupport {\n\n  static get [FeatureDef__symbol](): FeatureDef {\n    return ComponentTreeSupport__feature;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { Page } from './page';\nimport { PageParamContext } from './page-param-context';\n\n/**\n * A key of {@link PageParam.Ref page parameter request} property containing requested page parameter.\n */\nexport const PageParam__symbol = (/*#__PURE__*/ Symbol('page-param'));\n\n/**\n * Page navigation parameter.\n *\n * Can applied before navigation happened (i.e. to [[LeavePageEvent]]). Then it will be available to the target page\n * both before and after navigation.\n *\n * @typeparam T  Parameter value type.\n * @typeparam I  Parameter input type.\n */\nexport abstract class PageParam<T, I> implements PageParam.Ref<T, I> {\n\n  get [PageParam__symbol](): this {\n    return this;\n  }\n\n  /**\n   * Creates page parameter handle.\n   *\n   * This method is called when {@link Page.put assigning new page parameter}. It is called at most once per request,\n   * unless this parameter is assigned already. A {@link PageParam.Handle.put} method will be called instead\n   * in the latter case.\n   *\n   * @param page  A page to assign navigation parameter to.\n   * @param input  Parameter input used to construct its initial value.\n   * @param context  Page parameter context.\n   *\n   * @returns New page parameter value handle.\n   */\n  abstract create(page: Page, input: I, context: PageParamContext): PageParam.Handle<T, I>;\n\n  /**\n   * Creates default page parameter handle.\n   *\n   * This method is called when {@link Page.get requesting page parameter} which value is not present in the page.\n   * The value handle returned is assigned to the page.\n   *\n   * Returns nothing by default.\n   *\n   * @param _page  A page to assign navigation parameter to.\n   * @param _context  Page parameter context.\n   *\n   * @returns New page parameter value handle or nothing if there is no default value.\n   */\n  byDefault(_page: Page, _context: PageParamContext): PageParam.Handle<T, I> | undefined {\n    return;\n  }\n\n}\n\nexport namespace PageParam {\n\n  /**\n   * Page navigation parameter reference.\n   *\n   * @typeparam T  Parameter value type.\n   * @typeparam I  Parameter input type.\n   */\n  export interface Ref<T, I> {\n\n    /**\n     * Referred page navigation parameter instance.\n     */\n    readonly [PageParam__symbol]: PageParam<T, I>;\n\n  }\n\n  /**\n   * Page navigation parameter that has default value.\n   *\n   * @typeparam T  Parameter value type.\n   * @typeparam I  Parameter input type.\n   */\n  export interface WithDefaults<T, I> extends PageParam<T, I> {\n\n    byDefault(page: Page, context: PageParamContext): PageParam.Handle<T, I>;\n\n  }\n\n  export namespace WithDefaults {\n\n    /**\n     * A reference to page navigation parameter that has default value.\n     *\n     * @typeparam T  Parameter value type.\n     * @typeparam I  Parameter input type.\n     */\n    export interface Ref<T, I> {\n\n      /**\n       * Referred page navigation parameter instance.\n       */\n      readonly [PageParam__symbol]: WithDefaults<T, I>;\n\n    }\n\n  }\n\n  /**\n   * Page navigation parameter value handle.\n   *\n   * Holds and maintains parameter value.\n   *\n   * Created by {@link PageParam.create} method.\n   *\n   * @typeparam T  Parameter value type.\n   * @typeparam I  Parameter input type.\n   */\n  export interface Handle<T, I> {\n\n    /**\n     * Returns current parameter value.\n     *\n     * @returns Parameter value.\n     */\n    get(): T;\n\n    /**\n     * Puts page parameter value.\n     *\n     * This method is called when {@link Page.put re-assigning page parameter}. It is called when page parameter\n     * is assigned already and can be used to update it. The update logic is up to the implementation.\n     *\n     * @param input  Parameter input to use when updating its value.\n     */\n    put(input: I): void;\n\n    /**\n     * Transfers parameter to target page.\n     *\n     * This is called right before [[LeavePageEvent]] is fired for each parameter handle of current page.\n     *\n     * @param to  A page to transfer parameter to.\n     * @param when  When the transfer happens. Either `pretend`, `pre-open`, `pre-replace`, `open`, or `return`.\n     * `return` is used when return to page generated by another app version. E.g. from the page that has been\n     * reloaded.\n     *\n     * @returns New parameter handle instance for target page, or `undefined` if nothing to transfer.\n     */\n    transfer?(to: Page, when: 'pretend' | 'pre-open' | 'pre-replace' | 'enter' | 'return'): Handle<T, I> | undefined;\n\n    /**\n     * This method is called when the page this parameter created for is entered.\n     *\n     * @param page  Entered page.\n     * @param when  When the page is entered. Either `init`, `open`, `replace`, `enter`, or `return`.\n     */\n    enter?(page: Page, when: 'init' | 'open' | 'replace' | 'enter' | 'return'): void;\n\n    /**\n     * This method is called when the page this parameter created for is left.\n     */\n    leave?(): void;\n\n    /**\n     * This method is called when page navigation aborted and target page won't be reached.\n     *\n     * The handle won't be accessed after this method call.\n     *\n     * @param at  The page the browser remains at.\n     */\n    stay?(at: Page): void;\n\n    /**\n     * This method is called when the page this parameter is created for is removed from navigation history.\n     *\n     * The handle won't be accessed after this method call.\n     */\n    forget?(): void;\n\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { ContextKey, ContextKey__symbol, SingleContextKey } from '@proc7ts/context-values';\nimport {\n  AfterEvent,\n  AfterEvent__symbol,\n  EventKeeper,\n  EventReceiver,\n  EventSender,\n  EventSupply,\n  OnEvent,\n  OnEvent__symbol,\n} from '@proc7ts/fun-events';\nimport { DomEventListener, OnDomEvent } from '@proc7ts/fun-events/dom';\nimport { EnterPageEvent, LeavePageEvent, NavigationEvent, StayOnPageEvent } from './navigation.event';\nimport { Page } from './page';\nimport { PageParam } from './page-param';\n\n/**\n * @internal\n */\nconst Navigation__key = (/*#__PURE__*/ new SingleContextKey<Navigation>('navigation'));\n\n/**\n * Browser navigation service.\n *\n * Expected to be used as a [History] and [Location] APIs replacement.\n *\n * Fires additional navigation events the browser does not support natively.\n *\n * Implements an `EventSender` interface by sending {@link NavigationEvent navigation events} to registered receivers.\n *\n * Implements an `EventKeeper` interface by sending current {@link Page page} to registered receivers.\n *\n * Available as bootstrap context value when [[NavigationSupport]] feature is enabled.\n *\n * [History]: https://developer.mozilla.org/en-US/docs/Web/API/History\n * [Location]: https://developer.mozilla.org/en-US/docs/Web/API/Location\n */\nexport abstract class Navigation implements EventSender<[NavigationEvent]>, EventKeeper<[Page]> {\n\n  static get [ContextKey__symbol](): ContextKey<Navigation> {\n    return Navigation__key;\n  }\n\n  /**\n   * Current page.\n   */\n  abstract readonly page: Page;\n\n  /**\n   * The number of element in navigation history.\n   */\n  abstract readonly length: number;\n\n  /**\n   * Build an `OnDomEvent` sender of {@link EnterPageEvent enter page events}.\n   *\n   * @returns An `OnDomEvent` sender of {@link EnterPageEvent enter page events}.\n   */\n  abstract onEnter(): OnDomEvent<EnterPageEvent>;\n\n  /**\n   * Starts sending {@link EnterPageEvent enter page events} to the given `listener`.\n   *\n   * @param listener  Target listener of {@link EnterPageEvent enter page events}.\n   *\n   * @returns {@link EnterPageEvent Enter page events} supply.\n   */\n  abstract onEnter(listener: DomEventListener<EnterPageEvent>): EventSupply;\n\n  /**\n   * Builds an `OnDomEvent` sender of {@link LeavePageEvent leave page events}.\n   *\n   * The registered listener may cancel navigation by calling `preventDefault()` method of received event.\n   *\n   * @returns `OnDomEvent` sender of {@link LeavePageEvent leave page events}.\n   */\n  abstract onLeave(): OnDomEvent<LeavePageEvent>;\n\n  /**\n   * Starts sending {@link LeavePageEvent leave page events} to the given `listener`.\n   *\n   * The registered listener may cancel navigation by calling `preventDefault()` method of received event.\n   *\n   * @param listener  Target listener of {@link LeavePageEvent leave page events}.\n   *\n   * @returns {@link LeavePageEvent Leave page events} supply.\n   */\n  abstract onLeave(listener: DomEventListener<LeavePageEvent>): EventSupply;\n\n  /**\n   * Builds an `OnDomEvent` {@link StayOnPageEvent stay on page events}.\n   *\n   * The registered listener is informed when navigation has been cancelled by one of leave page event receivers,\n   * navigation failed due to e.g. invalid URL, or when another navigation request initiated before the page left.\n   *\n   * @returns `OnDomEvent` sender of {@link StayOnPageEvent stay on page events}.\n   */\n  abstract onStay(): OnDomEvent<StayOnPageEvent>;\n\n  /**\n   * Starts sending {@link StayOnPageEvent stay on page events} to the given `listener`.\n   *\n   * @param listener  Target listener of {@link StayOnPageEvent stay on page events}.\n   *\n   * @returns {@link StayOnPageEvent Stay on page events} supply.\n   */\n  abstract onStay(listener: DomEventListener<StayOnPageEvent>): EventSupply;\n\n  /**\n   * Builds an `OnEvent` sender of {@link NavigationEvent navigation events}.\n   *\n   * The `[OnEvent__symbol]` property is an alias of this one.\n   *\n   * @returns `OnEvent` sender of {@link NavigationEvent navigation events}.\n   */\n  abstract on(): OnEvent<[NavigationEvent]>;\n\n  /**\n   * Starts sending of {@link NavigationEvent navigation events} to the given `receiver`.\n   *\n   * @param receiver  Target receiver of {@link NavigationEvent navigation events}.\n   *\n   * @returns {@link NavigationEvent Navigation events} supply.\n   */\n  abstract on(receiver: EventReceiver<[NavigationEvent]>): EventSupply;\n\n  [OnEvent__symbol](): OnEvent<[NavigationEvent]> {\n    return this.on();\n  }\n\n  /**\n   * Builds an `AfterEvent` keeper of {@link page current page}.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   *\n   * @returns An `AfterEvent` keeper of {@link page current page}.\n   */\n  abstract read(): AfterEvent<[Page]>;\n\n  /**\n   * Starts sending {@link page current page} and updates to the given `receiver.\n   *\n   * @param receiver  Target receiver of {@link page current page}.\n   *\n   * @returns {@link page Current page} supply.\n   */\n  abstract read(receiver: EventReceiver<[Page]>): EventSupply;\n\n  [AfterEvent__symbol](): AfterEvent<[Page]> {\n    return this.read();\n  }\n\n  /**\n   * Goes to the previous page in navigation history.\n   *\n   * Calling this method is the same as calling `go(-1)`.\n   */\n  back(): void {\n    this.go(-1);\n  }\n\n  /**\n   * Goes to the next page in navigation history.\n   *\n   * Calling this method is the same as calling `go(1)`.\n   */\n  forward(): void {\n    this.go(1);\n  }\n\n  /**\n   * Loads a page from navigation history, identified by its relative location to the current page.\n   *\n   * For example `-1` navigates to previous page, while `1` navigates to the next one. If you specify an out-of-bounds\n   * value (for instance, specifying -1 when there are no previously-visited pages in navigation history), this method\n   * silently has no effect.\n   *\n   * @param delta  Relative location in navigation history to navigate to. The absent value or value of `0` reloads\n   * the current page.\n   */\n  abstract go(delta?: number): void;\n\n  /**\n   * Reloads current page.\n   *\n   * Calling this method is the same as calling `go()`.\n   */\n  reload(): void {\n    this.go();\n  }\n\n  /**\n   * Opens a page by navigating to the given `target`.\n   *\n   * Appends an entry to navigation history.\n   *\n   * @param target  Either navigation target or URL to navigate to.\n   * @fires PreNavigateEvent#wesib:preNavigate  On window object prior to actually navigate.\n   * Then navigates to the `target`, unless the event cancelled.\n   * @fires NavigateEvent@wesib:navigate  On window object when navigation succeed.\n   *\n   * @returns A promise resolved to navigated page, or to `null` otherwise.\n   */\n  abstract open(target: Navigation.Target | string | URL): Promise<Page | null>;\n\n  /**\n   * Replaces current navigation history entry with the given `target`.\n   *\n   * @param target  Either navigation target or URL to replace current history entry with.\n   * @fires PreNavigateEvent#wesib:preNavigate  On window object prior to actually update the history.\n   * Then navigates to the `target`, unless the event cancelled.\n   * @fires NavigateEvent@wesib:navigate  On window object when history updated.\n   *\n   * @returns A promise resolved to navigated page, or to `null` otherwise.\n   */\n  abstract replace(target: Navigation.Target | string | URL): Promise<Page | null>;\n\n  /**\n   * Replaces current page URL with the given one.\n   *\n   * Does not alter current page state, and does not trigger any events.\n   *\n   * @param url  An URL to replace the the current one with.\n   *\n   * @returns Current page with updated URL.\n   */\n  abstract update(url: string | URL): Page;\n\n  /**\n   * Creates parameterized navigation instance and assigns a page parameter to apply to target page.\n   *\n   * @typeparam T  Parameter value type.\n   * @typeparam I  Parameter input type.\n   * @param ref  A reference to page navigation parameter to apply.\n   * @param input  Parameter input to use when constructing its value.\n   *\n   * @returns New parameterized navigation instance.\n   */\n  abstract with<T, I>(ref: PageParam.Ref<T, I>, input: I): Navigation.Parameterized;\n\n}\n\nexport namespace Navigation {\n\n  /**\n   * Parameterized navigation.\n   *\n   * Allows to assign target page parameters prior to navigating to it.\n   */\n  export interface Parameterized {\n\n    /**\n     * Applies parameter to navigation target page.\n     *\n     * @typeparam T  Parameter value type.\n     * @typeparam I  Parameter input type.\n     * @param ref  A reference to page navigation parameter to apply.\n     * @param input  Parameter input to use when constructing its value.\n     *\n     * @returns New parameterized navigation instance.\n     */\n    with<T, I>(ref: PageParam.Ref<T, I>, input: I): Parameterized;\n\n    /**\n     * Opens a page by navigating to the given `target` with provided page parameters.\n     *\n     * Appends an entry to navigation history.\n     *\n     * @param target  Either navigation target or URL to navigate to. Navigates to current page URL when omitted.\n     * @fires PreNavigateEvent#wesib:preNavigate  On window object prior to actually navigate.\n     * Then navigates to the `target`, unless the event cancelled.\n     * @fires NavigateEvent@wesib:navigate  On window object when navigation succeed.\n     *\n     * @returns A promise resolved to navigated page, or to `null` otherwise.\n     */\n    open(target?: Navigation.Target | string | URL): Promise<Page | null>;\n\n    /**\n     * Replaces the most recent entry in navigation history with the given `target` and provided page parameters.\n     *\n     * @param target  Either navigation target or URL to replace the latest history entry with. Navigates to current\n     * page URL when omitted.\n     * @fires PreNavigateEvent#wesib:preNavigate  On window object prior to actually update the history.\n     * Then navigates to the `target`, unless the event cancelled.\n     * @fires NavigateEvent@wesib:navigate  On window object when history updated.\n     *\n     * @returns A promise resolved to navigated page, or to `null` otherwise.\n     */\n    replace(target?: Navigation.Target | string | URL): Promise<Page | null>;\n\n    /**\n     * Pretends navigation.\n     *\n     * Prepares navigation and parameters, but does not actually navigate. Instead it calls the provided callback\n     * function.\n     *\n     * This is useful e.g. to build target URL or evaluate target page parameter.\n     *\n     * @param target  Either navigation target or URL to pretend navigation to.\n     * @param callback A callback function receiving two pages as parameters: the page to leave, and the page to open.\n     * The latter one is valid only inside callback, as its parameters will be cleaned up right after callback returns.\n     * The value returned from callback is then returned from this method call. It may be used to collect some data\n     * from target page.\n     *\n     * @returns Either the value returned by callback, or `undefined` when navigation failed.\n     */\n    pretend<T>(\n        target: Navigation.Target | string | URL,\n        callback: (this: void, from: Page, to: Page) => T,\n    ): T | undefined;\n\n    /**\n     * Pretends navigation to the same page.\n     *\n     * Prepares navigation and parameters, but does not actually navigate. Instead it calls the provided callback\n     * function.\n     *\n     * This is useful e.g. to build target URL or evaluate target page parameter.\n     *\n     * @param callback A callback function receiving two pages as parameters: the page to leave, and the page to open.\n     * The latter one is valid only inside callback, as its parameters will be cleaned up right after callback returns.\n     * The value returned from callback is then returned from this method call. It may be used to collect some data\n     * from target page.\n     *\n     * @returns Either the value returned by callback, or `undefined` when navigation failed.\n     */\n    pretend<T>(\n        callback: (this: void, from: Page, to: Page) => T,\n    ): T | undefined;\n\n    /**\n     * Pretends navigation and builds navigation target.\n     *\n     * Prepares navigation and parameters, but does not actually navigate. Instead it calls the provided callback\n     * function.\n     *\n     * This is useful e.g. to build target URL or evaluate target page parameter.\n     *\n     * @param target  Either navigation target or URL to pretend navigation to. Prepends navigation to current page\n     * when omitted.\n     *\n     * @returns Either Navigation target with URL value, or `undefined` when navigation failed.\n     */\n    pretend(\n        target?: Navigation.Target | string | URL,\n    ): URLTarget | undefined;\n\n  }\n\n  /**\n   * Navigation target.\n   *\n   * This is passed to [[Navigation.open]] and [[Navigation.replace]] methods.\n   */\n  export interface Target {\n\n    /**\n     * An URL to update the browser location string to.\n     */\n    readonly url?: string | URL;\n\n    /**\n     * Opaque data to apply to session history. I.e. either push or replace.\n     */\n    readonly data?: any;\n\n    /**\n     * New window title.\n     */\n    readonly title?: string;\n\n  }\n\n  /**\n   * Navigation target with URL value.\n   */\n  export interface URLTarget extends Target {\n\n    readonly url: URL;\n\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { ContextValues } from '@proc7ts/context-values';\n\n/**\n * Page parameter context.\n *\n * Provides values available in bootstrap context.\n */\nexport abstract class PageParamContext extends ContextValues {\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { Navigation } from './navigation';\nimport { Page } from './page';\n\n/**\n * Navigation event.\n */\nexport type NavigationEvent = LeavePageEvent | EnterPageEvent | StayOnPageEvent;\n\n/**\n * Navigation event type.\n */\nexport const enum NavigationEventType {\n\n  /**\n   * {@link EnterPageEvent Enter page event} type.\n   */\n  EnterPage = 'wesib:enterPage',\n\n  /**\n   * {@link LeavePageEvent Leave page event} type.\n   */\n  LeavePage = 'wesib:leavePage',\n\n  /**\n   * {@link StayOnPageEvent Stay on page event} type.\n   */\n  StayOnPage = 'wesib:stayOnPage',\n\n}\n\n/**\n * An event fired when navigation target reached by entering destination page.\n *\n * @event EnterPageEvent#wesib:enterPage\n */\nexport class EnterPageEvent extends Event {\n\n  /**\n   * When navigation event occurred.\n   *\n   * Can be one of:\n   * - `open` when opening a new page,\n   * - `replace` when replacing navigation history entry,\n   * - `enter` when entering new page by user action (e.g. hashchange event),\n   * - `return` when navigated to previously visited entry in navigation history.\n   */\n  readonly when: 'open' | 'replace' | 'enter' | 'return';\n\n  /**\n   * Entered page.\n   */\n  readonly to: Page;\n\n  /**\n   * Constructs enter page event.\n   *\n   * @param type  Event type.\n   * @param init  Initialization options.\n   */\n  constructor(type: string, init: EnterPageEventInit) {\n    super(type, { ...init, cancelable: false });\n    this.when = init.when;\n    this.to = init.to;\n  }\n\n}\n\n/**\n * {@link EnterPageEvent Enter page event} initialization options.\n */\nexport interface EnterPageEventInit extends Omit<EventInit, 'cancelable'> {\n\n  /**\n   * When navigation event occurred.\n   *\n   * Can be one of:\n   * - `open` when opening a new page,\n   * - `replace` when replacing navigation history entry,\n   * - `enter` when entering new page by user action (e.g. hashchange event),\n   * - `return` when navigated to previously visited entry in navigation history.\n   */\n  readonly when: 'open' | 'replace' | 'enter' | 'return';\n\n  /**\n   * Entered page.\n   */\n  readonly to: Page;\n\n}\n\n/**\n * An event fired right before leaving the page in order to navigate to another one.\n *\n * This event can be cancelled in order to prevent actual navigation or history update. The navigation is also\n * cancelled when another navigation initiated by one of the handlers of this event.\n *\n * @event LeavePageEvent#wesib:leavePage\n */\nexport class LeavePageEvent extends Event {\n\n  /**\n   * When navigation event occurred. Either `pre-open` when leaving a page to open a new one, or `pre-replace` when\n   * leaving a page to replace it with another history entry.\n   */\n  readonly when: 'pre-open' | 'pre-replace';\n\n  /**\n   * The page to leave.\n   */\n  readonly from: Page;\n\n  /**\n   * Navigation target page.\n   */\n  readonly to: Page;\n\n  /**\n   * Constructs leave page event.\n   *\n   * @param type  Event type.\n   * @param init  Initialization options.\n   */\n  constructor(type: string, init: LeavePageEventInit) {\n    super(type, { ...init, cancelable: true });\n    this.when = init.when;\n    this.from = init.from;\n    this.to = init.to;\n  }\n\n}\n\n/**\n * {@link LeavePageEvent Leave page event} initialization options.\n */\nexport interface LeavePageEventInit extends Omit<EventInit, 'cancelable'> {\n\n  /**\n   * When navigation event occurred. Either `pre-open` when leaving a page to open a new one, or `pre-replace` when\n   * leaving a page to replace it with another history entry.\n   */\n  readonly when: 'pre-open' | 'pre-replace';\n\n  /**\n   * The page to leave.\n   */\n  readonly from: Page;\n\n  /**\n   * Navigation target page.\n   */\n  readonly to: Page;\n\n}\n\n/**\n * An event fired when navigation cancelled or failed.\n *\n * @event StayOnPageEvent#wesib:stayOnPage\n */\nexport class StayOnPageEvent extends Event {\n\n  /**\n   * When navigation event occurred. Always `stay`.\n   */\n  get when(): 'stay' {\n    return 'stay';\n  }\n\n  /**\n   * The page to stay at.\n   */\n  readonly from: Page;\n\n  /**\n   * Navigation target.\n   */\n  readonly to: Navigation.URLTarget;\n\n  /**\n   * A reason of navigation failure. This is set when navigation failed due to some error.\n   */\n  readonly reason?: any;\n\n  /**\n   * Constructs stay on page event.\n   *\n   * @param type  Event type.\n   * @param init  Initialization options.\n   */\n  constructor(type: string, init: StayOnPageEventInit) {\n    super(type, { ...init, cancelable: true });\n    this.from = init.from;\n    this.to = init.to;\n    this.reason = init.reason;\n  }\n\n}\n\n/**\n * {@link StayOnPageEvent Stay on page event} initialization options.\n */\nexport interface StayOnPageEventInit extends Omit<EventInit, 'cancelable'> {\n\n  /**\n   * The page to stay at.\n   */\n  readonly from: Page;\n\n  /**\n   * Navigation target.\n   */\n  readonly to: Navigation.URLTarget;\n\n  /**\n   * A reason of navigation failure. This is set when navigation failed due to some error.\n   */\n  readonly reason?: any;\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { FeatureDef, FeatureDef__symbol } from '@wesib/wesib';\nimport { Navigation } from './navigation';\nimport { createNavigation } from './navigation.impl';\n\n/**\n * @internal\n */\nconst NavigationSupport__feature: FeatureDef = {\n  setup(setup) {\n    setup.provide({ a: Navigation, by: createNavigation });\n  },\n};\n\n/**\n * Browser navigation support feature.\n *\n * Makes [[Navigation]] available in bootstrap context.\n */\nexport class NavigationSupport {\n\n  static get [FeatureDef__symbol](): FeatureDef {\n    return NavigationSupport__feature;\n  }\n\n}\n","import { flatMapIt, itsEach, itsIterator } from '@proc7ts/a-iterable';\nimport { noop } from '@proc7ts/call-thru';\nimport {\n  EventEmitter,\n  eventReceiver,\n  EventReceiver,\n  eventSupply,\n  EventSupply,\n  noEventSupply,\n  OnEvent,\n  onEventBy,\n} from '@proc7ts/fun-events';\nimport { Navigation } from '../navigation';\nimport { Page } from '../page';\nimport { PageParam } from '../page-param';\nimport { PageFragmentRequest, PageLoadRequest } from './page-load-request';\nimport { PageLoadResponse } from './page-load-response';\nimport { PageLoader } from './page-loader.impl';\n\n/**\n * @internal\n */\nexport interface PageLoadReq extends PageLoadRequest {\n\n  readonly receiver: EventReceiver.Generic<[PageLoadResponse]>;\n\n}\n\nclass PageLoadAbortError extends Error {}\n\nclass PageLoadRequestsParam$ extends PageParam<PageLoadRequests, PageLoadRequests> {\n\n  create(\n      _page: Page,\n      requests: PageLoadRequests,\n  ): PageParam.Handle<PageLoadRequests, PageLoadRequests> {\n    return {\n      get() {\n        return requests;\n      },\n      put: noop,\n    };\n  }\n\n}\n\n/**\n * @internal\n */\nexport const PageLoadRequestsParam: PageParam<PageLoadRequests, PageLoadRequests> = new PageLoadRequestsParam$();\n\n/**\n * @internal\n */\nexport class PageLoadRequests implements Iterable<PageLoadReq> {\n\n  private readonly _map = new Map<EventSupply, PageLoadReq[]>();\n\n  constructor(\n      private readonly _navigation: Navigation,\n      private readonly _loader: PageLoader,\n  ) {}\n\n  get fragments(): readonly PageFragmentRequest[] {\n\n    const result: PageFragmentRequest[] = [];\n\n    for (const request of this) {\n      if (!request.fragment) {\n        return [];\n      }\n      result.push(request.fragment);\n    }\n\n    return result;\n  }\n\n  [Symbol.iterator](): Iterator<PageLoadReq> {\n    return itsIterator(flatMapIt(this._map.values()));\n  }\n\n  handle(): PageParam.Handle<void, PageLoadRequest> {\n\n    const self = this;\n    const pageSupply = eventSupply();\n    let loadSupply = noEventSupply();\n\n    return {\n      get() {/* void */},\n      put(request: PageLoadRequest): void {\n        self._add(request);\n      },\n      transfer(to: Page, when) {\n        if (when === 'pretend') {\n          return;\n        }\n\n        const transferred = self._transfer();\n\n        to.put(PageLoadRequestsParam, transferred);\n\n        return transferred.handle();\n      },\n      enter(page: Page, when: 'init' | 'open' | 'replace' | 'return'): void {\n        if (when === 'init') {\n          // The page is loaded already. No need to fetch it.\n          return;\n        }\n\n        loadSupply = eventSupply().needs(pageSupply);\n\n        const onLoad = onEventBy<[PageLoadResponse]>(responseReceiver => {\n\n          const emitter = new EventEmitter<[PageLoadResponse]>();\n          const supply = emitter.on(responseReceiver);\n\n          self._loader(page)\n              .tillOff(loadSupply)\n              .to(response => emitter.send(response))\n              .whenOff(error => {\n                if (error !== undefined && !(error instanceof PageLoadAbortError)) {\n                  // Report current page load error as failed load response\n                  emitter.send({\n                    ok: false as const,\n                    page,\n                    error,\n                  });\n                }\n              });\n\n          return supply;\n        }).share();\n\n        itsEach(\n            self,\n            ({ fragment, receiver }) => onFragment(onLoad, fragment).to({\n              supply: eventSupply().needs(receiver.supply),\n              receive(context, response): void {\n                receiver.receive(context, response);\n              },\n            }),\n        );\n      },\n      leave(): void {\n        loadSupply.off(new PageLoadAbortError('page left'));\n      },\n      stay() {\n        pageSupply.off(new PageLoadAbortError('navigation cancelled'));\n      },\n      forget() {\n        pageSupply.off(new PageLoadAbortError('page forgotten'));\n      },\n    };\n\n  }\n\n  private _add(request: PageLoadRequest): void {\n\n    const req = { ...request, receiver: eventReceiver(request.receiver) };\n    const { supply } = req.receiver;\n    const list = this._map.get(supply);\n\n    if (list) {\n      list.push(req);\n    } else {\n      this._map.set(supply, [req]);\n      supply.whenOff(() => this._map.delete(supply));\n    }\n  }\n\n  private _transfer(): PageLoadRequests {\n\n    const transferred = new PageLoadRequests(this._navigation, this._loader);\n\n    for (const [supply, list] of this._map.entries()) {\n      transferred._map.set(supply, Array.from(list));\n    }\n\n    return transferred;\n  }\n\n}\n\nfunction onFragment(\n    onLoad: OnEvent<[PageLoadResponse]>,\n    fragment?: PageFragmentRequest,\n): OnEvent<[PageLoadResponse]> {\n  return fragment\n      ? onLoad.thru_(\n          response => response.ok\n              ? {\n                ...response,\n                fragment: (\n                    fragment.tag != null\n                        ? response.document.getElementsByTagName(fragment.tag)[0]\n                        : response.document.getElementById(fragment.id)\n                ) || undefined,\n              }\n              : response,\n      )\n      : onLoad;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { ContextUpRef } from '@proc7ts/context-values/updatable';\nimport { EventSender, OnEvent } from '@proc7ts/fun-events';\nimport { FetchAgentKey } from '../../fetch/fetch-agent-key.impl';\nimport { PageLoadResponse } from './page-load-response';\n\n/**\n * Page load agent signature.\n *\n * The agent can be used to alter loaded page document processing. For that it should be registered in appropriate\n * context.\n *\n * All registered agents are organized into chain. The first agent in chain is called by page loader.\n */\nexport type PageLoadAgent =\n/**\n * @param next  Either calls the next agent in chain, or actually loads page document if this agent is the last one.\n * Accepts an optional `Request` parameter. The original request will be used instead when omitted.\n * @param request  HTTP request.\n *\n * @returns An `EventSender` of page load response. It is returned either to preceding agent in chain, or as a loaded\n * document.\n */\n    (\n        this: void,\n        next: (this: void, request?: Request) => OnEvent<[PageLoadResponse]>,\n        request: Request,\n    ) => EventSender<[PageLoadResponse]>;\n\nexport namespace PageLoadAgent {\n\n  /**\n   * Combined page load agent signature.\n   *\n   * This is what is available under [[PageLoadAgent]] key.\n   */\n  export type Combined =\n  /**\n   * @param next  Either calls the next agent in chain, or actually loads page document if this agent is the last one.\n   * Accepts `Request` parameter.\n   * @param request  HTTP request.\n   *\n   * @returns An `OnEvent` registrar of loaded document.\n   */\n      (\n          this: void,\n          next: (this: void, request: Request) => OnEvent<[PageLoadResponse]>,\n          request: Request,\n      ) => OnEvent<[PageLoadResponse]>;\n\n}\n\n/**\n * A key of context value containing an [[PageLoadAgent]] instance.\n *\n * The agent returned combines all registered agents into one. If no agent registered it just performs the fetch.\n */\nexport const PageLoadAgent: ContextUpRef<PageLoadAgent.Combined, PageLoadAgent> = (\n    /*#__PURE__*/ new FetchAgentKey<[PageLoadResponse]>('page-load-agent')\n);\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { noop, valueProvider } from '@proc7ts/call-thru';\nimport { ContextUpRef, FnContextKey } from '@proc7ts/context-values/updatable';\n\n/**\n * A signature of page load URL modifier function.\n *\n * All such functions registered in bootstrap context are called in order of their registration with current page URL.\n * They are able to modify it, e.g. by applying additional URL search parameters. The modified URL is used then to load\n * the page.\n */\nexport type PageLoadURLModifier =\n/**\n * @param url  An URL of page to load.\n */\n    (this: void, url: URL) => void;\n\n/**\n * A key of bootstrap context value containing a page load URL modifier.\n *\n * Does not modify URL by default.\n */\nexport const PageLoadURLModifier: ContextUpRef<PageLoadURLModifier, PageLoadURLModifier> = (\n    /*#__PURE__*/ new FnContextKey('page-load-url', { byDefault: valueProvider(noop) })\n);\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { Navigation } from '../navigation';\nimport { Page } from '../page';\nimport { PageParam } from '../page-param';\nimport { PageParamContext } from '../page-param-context';\nimport { cachingPageLoader } from './caching-page-loader.impl';\nimport { PageLoadRequest } from './page-load-request';\nimport { PageLoadRequests, PageLoadRequestsParam } from './page-load-requests.impl';\nimport { PageLoader } from './page-loader.impl';\n\n/**\n * @internal\n */\nclass PageLoadParam$ extends PageParam<void, PageLoadRequest> {\n\n  create(page: Page, request: PageLoadRequest, context: PageParamContext): PageParam.Handle<void, PageLoadRequest> {\n\n    const requests = new PageLoadRequests(context.get(Navigation), cachingPageLoader(context.get(PageLoader)));\n    const handle = requests.handle();\n\n    page.put(PageLoadRequestsParam, requests);\n    handle.put(request);\n\n    return handle;\n  }\n\n}\n\n/**\n * Page load parameter.\n *\n * Accepts a {@link PageLoadRequest page load request} as input.\n *\n * A page load is initiated whenever a page with new address is {@link Navigation.onEnter entered}.\n *\n * Page load won't be initiated if:\n * - page load parameter is not {@link Page.put} added,\n * - all added {@link PageLoadRequest.receiver response receiver}s supplies are cut off, or\n * - the entered page address is the the same one as previous one, except the hash,\n */\nexport const PageLoadParam: PageParam<void, PageLoadRequest> = (/*#__PURE__*/ new PageLoadParam$());\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { FeatureDef, FeatureDef__symbol } from '@wesib/wesib';\nimport { NavigationSupport } from '../navigation-support.feature';\nimport { PageCacheBuster } from './page-cache-buster.impl';\nimport { PageLoadAgent } from './page-load-agent';\nimport { PageLoadURLModifier } from './page-load-url-modifier';\nimport { pageScriptsAgent } from './page-scripts-agent.impl';\nimport { pageStyleAgent } from './page-style-agent.impl';\nimport { pageTitleAgent } from './page-title-agent.impl';\n\n/**\n * @internal\n */\nconst PageLoadSupport__feature: FeatureDef = {\n  needs: NavigationSupport,\n  setup(setup) {\n    setup.provide({\n      a: PageLoadURLModifier,\n      by: (buster: PageCacheBuster) => buster.urlModifier,\n      with: [PageCacheBuster],\n    });\n    setup.provide({\n      a: PageLoadAgent,\n      by: (buster: PageCacheBuster) => buster.agent,\n      with: [PageCacheBuster],\n    });\n    setup.provide({ a: PageLoadAgent, by: pageScriptsAgent });\n    setup.provide({ a: PageLoadAgent, by: pageStyleAgent });\n    setup.provide({ a: PageLoadAgent, by: pageTitleAgent });\n  },\n};\n\n/**\n * Page load support feature.\n *\n * Enables default {@link PageLoadAgent page load agents}:\n * 1. Page cache busting agent.\n *    If `<meta name=\"wesib-app-rev\">` tag is present in initial page, then sends this tag's content with each page load\n *    request as `__wesib_app_rev__` search parameter. If the loaded page contains the same named meta tag with\n *    different content, then reloads the page.\n *    This serves both as cache busting technique, and as server-side application updates handler.\n * 2. Scripts agent.\n *    Includes external scripts from loaded page into main document.\n * 3. Style agent.\n *    Replaces external styles of main document styles with the ones from loaded page.\n *    Unless loaded page has no external styles.\n * 4. Title agent.\n *    Applies loaded page title to bootstrap window. If there is one.\n */\nexport class PageLoadSupport {\n\n  static get [FeatureDef__symbol](): FeatureDef {\n    return PageLoadSupport__feature;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/style-producer\n */\nimport { itsEach, overKeys } from '@proc7ts/a-iterable';\nimport { StypProperties } from '../rule';\nimport { StypValue } from './value';\n\n/**\n * A type of function that maps CSS properties to something else.\n *\n * @category CSS Value\n * @typeparam R  A type of mapped properties. This is a mapping result type.\n */\nexport type StypMapper<R> =\n/**\n * @param from  CSS properties to map.\n *\n * @returns Mapping result.\n */\n    (this: void, from: StypProperties) => R;\n\nexport namespace StypMapper {\n\n  /**\n   * CSS property mapping.\n   *\n   * It is used to recognize raw property value and convert it to the one of the given type.\n   *\n   * It is one of:\n   * - Default property value. Replaces the source property value, unless the the have the same type.\n   * - A mapping function. Replaces the source property value with the result of this function call.\n   * - An object containing mapping method called `by()`. Replaces the source property value with the result of this\n   *   method call.\n   *\n   * @typeparam R  A type of mapped properties. This is an object containing mapped properties.\n   * @typeparam K  Type of mapped properties keys.\n   */\n  export type Mapping<R, K extends keyof R> =\n      | MappingFunction<R, K>\n      | MappingObject<R, K>\n      | R[K];\n\n  /**\n   * CSS property mapping function.\n   *\n   * @typeparam R  A type of mapped properties. This is a mapping result type.\n   * @typeparam K  Type of mapped properties keys.\n   */\n  export type MappingFunction<R, K extends keyof R> =\n  /**\n   * @param source  A raw property value that should be converted.\n   * @param mapped  An object granting access to other mapped properties.\n   * @param key  A key of converted property.\n   *\n   * @returns Mapped property value.\n   */\n      (this: void, source: StypValue, mapped: Mapped<R>, key: K) => R[K];\n\n  /**\n   * CSS property mapping object.\n   *\n   * @typeparam R  A type of mapped properties. This is a mapping result type.\n   * @typeparam K  Type of mapped properties keys.\n   */\n  export interface MappingObject<R, K extends keyof R> {\n\n    /**\n     * Maps CSS property value.\n     *\n     * @param source  A raw property value that should be converted.\n     * @param mapped  An object granting access to other mapped properties.\n     * @param key  A key of converted property.\n     *\n     * @returns Mapped property value.\n     */\n    by(source: StypValue, mapped: Mapped<R>, key: K): R[K];\n\n  }\n\n  /**\n   * Grants access to mapped values.\n   *\n   * Passed as a second argument to mapping function.\n   *\n   * @typeparam R  A type of mapped properties. This is a mapping result type.\n   */\n  export interface Mapped<R> {\n\n    /**\n     * Original properties to convert.\n     */\n    from: StypProperties;\n\n    /**\n     * Maps the property with the given type accordingly to mapping instruction.\n     *\n     * The mapping is performed at most once per property.\n     *\n     * @param key  Mapped property key.\n     *\n     * @returns Mapped property value.\n     */\n    get<K extends keyof R>(key: K): R[K];\n\n  }\n\n  /**\n   * Mappings of CSS properties.\n   *\n   * Contains mappings for each mapped CSS property with that property name as a key.\n   *\n   * @typeparam R  A type of mapped properties. This is a mapping result type.\n   */\n  export type Mappings<R> = { readonly [key in keyof R]: Mapping<R, key>; };\n\n}\n\nexport const StypMapper = {\n\n  /**\n   * Maps CSS properties accordingly to the given `mappings`.\n   *\n   * @typeparam R  A type of mapped properties. This is a mapping result type.\n   *\n   * @param mappings  Mappings of CSS properties.\n   * @param from  Raw CSS properties to map.\n   *\n   * @returns Mapped properties.\n   */\n  map<R>(mappings: StypMapper.Mappings<R>, from: StypProperties): R {\n\n    const result: { [key in keyof R]: R[key] } = {} as any;\n    const mapped = {\n      from,\n      get<K extends keyof R>(key: K): R[K] {\n        if (key in result) {\n          return result[key];\n        }\n\n        const mapper = mappingBy<R, K>(mappings[key]);\n        const mappedValue = mapper(from[key as string], this, key);\n\n        result[key] = mappedValue;\n\n        return mappedValue;\n      },\n    };\n\n    itsEach(overKeys(mappings), key => mapped.get(key));\n\n    return result;\n  },\n\n  /**\n   * Creates CSS properties mapper function.\n   *\n   * @typeparam R  A type of mapped properties. This is a mapping result type.\n   * @param mappings  Mappings of CSS properties.\n   *\n   * @returns A function that maps CSS properties accordingly to the given `mappings`.\n   */\n  by<R>(mappings: StypMapper.Mappings<R>): StypMapper<R> {\n    return StypMapper.map.bind<void, StypMapper.Mappings<R>, [StypProperties], R>(undefined, mappings);\n  },\n\n};\n\n/**\n * @internal\n */\nfunction mappingBy<R, K extends keyof R>(\n    mapping: StypMapper.Mapping<R, K> | undefined,\n): StypMapper.MappingFunction<R, K> {\n  switch (typeof mapping) {\n  case 'function':\n    return mapping as StypMapper.MappingFunction<R, K>;\n  case 'object':\n    return (mapping as StypMapper.MappingObject<R, K>).by.bind(mapping);\n  }\n\n  const type = typeof mapping;\n\n  return (from: StypValue): R[K] => typeof from === type ? from as any : mapping;\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/style-producer\n */\nimport { StypValue, StypValueStruct } from '../value';\nimport { StypZero } from './zero';\n\n/**\n * Structured numeric CSS property value.\n *\n * This represents either dimension, zero value, or a `calc()` CSS function call.\n *\n * @category CSS Value\n * @typeparam Unit  Allowed unit type.\n * @typeparam Zero  A type of zero value. [[StypZero]] by default.\n */\nexport type StypNumeric<Unit extends string, Zero extends StypZero<Unit> | StypDimension<Unit> = StypZero<Unit>> =\n    | StypDimension<Unit>\n    | StypCalc<Unit>\n    | Zero;\n\n/**\n * Base implementation of structured numeric CSS property value.\n *\n * @category CSS Value\n * @typeparam Self  A type of itself.\n * @typeparam Unit  Allowed unit type.\n */\nexport abstract class StypNumericStruct<Self extends StypNumericStruct<Self, Unit>, Unit extends string>\n    extends StypValueStruct<Self> {\n\n  /**\n   * A type of structured numeric CSS property value.\n   */\n  abstract type: 'dimension' | 'calc' | 0;\n\n  readonly dim: StypDimension.Kind<Unit>;\n\n  constructor(opts: StypDimension.Opts<Unit>) {\n    super(opts);\n    this.dim = opts.dim;\n  }\n\n  /**\n   * Tries to converts this numeric value to another dimension.\n   *\n   * Does not actually construct a value in another dimension, as long as dimension unit supported by both dimensions.\n   *\n   * @typeparam U  A unit type allowed in target dimension.\n   * @param dim  Target dimension.\n   *\n   * @returns Either a value in dimension compatible with `dim`, or `undefined` if this value's unit is not supported\n   * by `dim`.\n   */\n  abstract toDim<U extends string>(dim: StypDimension.Kind<U>): StypNumeric<U> | undefined;\n\n  abstract add(addendum: StypNumeric<Unit>): StypNumeric<Unit>;\n\n  abstract add(addendum: number, unit: Unit): StypNumeric<Unit>;\n\n  abstract sub(subtrahend: StypNumeric<Unit>): StypNumeric<Unit>;\n\n  abstract sub(subtrahend: number, unit: Unit): StypNumeric<Unit>;\n\n  abstract mul(multiplier: number): StypNumeric<Unit>;\n\n  abstract div(divisor: number): StypNumeric<Unit>;\n\n  abstract negate(): StypNumeric<Unit>;\n\n  by(source: StypValue): StypNumeric<Unit> {\n    return this.dim.by(source) || this as StypNumeric<Unit>;\n  }\n\n  /**\n   * Returns a textual representation of this value to be used within CSS `calc()` function.\n   *\n   * @returns CSS value text without `!important` or `calc()`.\n   */\n  abstract toFormula(): string;\n\n  toString(): string {\n    return this.toFormula();\n  }\n\n}\n\n/**\n * Structured [dimension](https://developer.mozilla.org/en-US/docs/Web/CSS/dimension) value with unit.\n *\n * @category CSS Value\n * @typeparam Unit  Allowed units type.\n */\nexport interface StypDimension<Unit extends string>\n    extends StypValueStruct<StypDimension<Unit>>, StypNumericStruct<StypDimension<Unit>, Unit> {\n\n  readonly type: 'dimension';\n\n  readonly dim: StypDimension.Kind<Unit>;\n\n  /**\n   * Dimension value.\n   */\n  readonly val: number;\n\n  /**\n   * Dimension unit.\n   */\n  readonly unit: Unit;\n\n  add(addendum: StypNumeric<Unit>): StypNumeric<Unit>;\n\n  add(addendum: number, unit?: Unit): StypNumeric<Unit>;\n\n  sub(subtrahend: StypNumeric<Unit>): StypNumeric<Unit>;\n\n  sub(subtrahend: number, unit?: Unit): StypNumeric<Unit>;\n\n  by(source: StypValue): StypNumeric<Unit>;\n\n}\n\nexport namespace StypDimension {\n\n  /**\n   * A kind of dimensions. E.g. angle, length, percentage, etc.\n   *\n   * It is perfectly fine to use dimensions interchangeably as long as dimension units are compatible.\n   *\n   * @typeparam Unit  Allowed units type.\n   */\n  export interface Kind<Unit extends string> {\n\n    /**\n     * A similar kind of dimensions supporting all units this one supports and, in addition, supporting percents (`%`).\n     *\n     * `undefined` if there is no such dimension kind. Refers itself if supports percents.\n     */\n    readonly pt?: Kind<Unit | '%'>;\n\n    /**\n     * A similar kind of dimensions supporting all units this one supports, except percents (`%`).\n     *\n     * `undefined` if there is no such dimension kind. Refers itself if does not support percents.\n     */\n    readonly noPt: Kind<Exclude<Unit, '%'>>;\n\n    /**\n     * Zero value of this kind.\n     *\n     * Typically, this is unit-less [[StypZero]]. But some dimensions require units.\n     */\n    readonly zero: StypDimension<Unit> | StypZero<Unit>;\n\n    /**\n     * Constructs dimension value.\n     *\n     * @param val  Numeric dimension value.\n     * @param unit  Dimension unit.\n     *\n     * @returns Constructed dimension value. Either [[StypDimension]] instance, or [[StypZero]] if `val` is `0` and\n     * this dimension kind supports unitless zero.\n     */\n    of(val: number, unit: Unit): StypDimension<Unit> | StypZero<Unit>;\n\n    /**\n     * Maps the given CSS property value to the one compatible with this dimension kind. Defaults to `undefined`\n     * if mapping is not possible.\n     *\n     * This method allows to use a dimension kind as {@link StypMapper.Mapping CSS property mapping}.\n     *\n     * Any scalar or non-numeric value is mapped to `undefined`. A numeric value is converted to this dimension by\n     * [[StypNumericStruct.toDim]] method.\n     *\n     * @param source  A raw property value that should be converted.\n     *\n     * @returns Mapped property value or `undefined`.\n     */\n    by(source: StypValue): StypNumeric<Unit, StypDimension<Unit> | StypZero<Unit>> | undefined;\n\n  }\n\n  export namespace Kind {\n\n    /**\n     * A kind of dimension with unit-less zero. E.g. angle or length.\n     *\n     * @typeparam Unit  Allowed units type.\n     */\n    export interface UnitlessZero<Unit extends string> extends Kind<Unit> {\n\n      readonly pt?: UnitlessZero<Unit | '%'>;\n\n      readonly noPt: UnitlessZero<Exclude<Unit, '%'>>;\n\n      /**\n       * Zero value of this kind without unit.\n       */\n      readonly zero: StypZero<Unit>;\n\n      /**\n       * Constructs dimension value.\n       *\n       * @param val  Numeric dimension value.\n       * @param unit  Dimension unit.\n       *\n       * @returns Constructed dimension value. Either [[StypDimension]] instance, or [[StypZero]] if `val` is `0`.\n       */\n      of(val: number, unit: Unit): StypDimension<Unit> | StypZero<Unit>;\n\n      by(source: StypValue): StypNumeric<Unit> | undefined;\n\n    }\n\n    /**\n     * A kind of dimension which zero value has unit. E.g. frequency or resolution.\n     *\n     * @typeparam Unit  Allowed units type.\n     */\n    export interface UnitZero<Unit extends string> extends Kind<Unit> {\n\n      readonly pt?: UnitZero<Unit | '%'>;\n\n      readonly noPt: UnitZero<Exclude<Unit, '%'>>;\n\n      /**\n       * Zero value of this kind that has unit.\n       */\n      readonly zero: StypDimension<Unit>;\n\n      /**\n       * Constructs dimension value.\n       *\n       * @param val  Numeric dimension value.\n       * @param unit  Dimension unit.\n       *\n       * @returns Constructed dimension value as a [[StypDimension]] instance.\n       */\n      of(val: number, unit: Unit): StypDimension<Unit>;\n\n      by(source: StypValue): StypNumeric<Unit, StypDimension<Unit>> | undefined;\n\n    }\n\n  }\n\n  /**\n   * Construction options of dimensions.\n   *\n   * @typeparam Unit  Allowed units type.\n   */\n  export interface Opts<Unit extends string> extends StypValue.Opts {\n\n    /**\n     * A kind of dimension.\n     */\n    dim: Kind<Unit>;\n\n  }\n\n}\n\n/**\n * CSS `calc()` function call representation.\n *\n * This is either a {@link StypAddSub addition/subtraction}, or {@link StypMulDiv multiplication/division}.\n *\n * @category CSS Value\n * @typeparam Unit  Allowed unit type.\n */\nexport type StypCalc<Unit extends string> = StypAddSub<Unit> | StypMulDiv<Unit>;\n\n/**\n * CSS `calc()` function call representation containing either addition or subtraction.\n *\n * @category CSS Value\n * @typeparam Unit  Allowed unit type.\n */\nexport interface StypAddSub<Unit extends string> extends StypNumericStruct<StypAddSub<Unit>, Unit> {\n\n  readonly type: 'calc';\n\n  /**\n   * Left operand.\n   */\n  readonly left: StypNumeric<Unit>;\n\n  /**\n   * Operator.\n   */\n  readonly op: '+' | '-';\n\n  /**\n   * Right operand.\n   */\n  readonly right: StypNumeric<Unit>;\n\n}\n\n/**\n * CSS `calc()` function call representation containing either multiplication or division.\n *\n * @category CSS Value\n * @typeparam Unit  Allowed unit type.\n */\nexport interface StypMulDiv<Unit extends string> extends StypNumericStruct<StypMulDiv<Unit>, Unit> {\n\n  readonly type: 'calc';\n\n  /**\n   * Left operand.\n   */\n  readonly left: StypNumeric<Unit>;\n\n  /**\n   * Operator.\n   */\n  readonly op: '*' | '/';\n\n  /**\n   * Right operand.\n   */\n  readonly right: number;\n\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/style-producer\n */\nimport { StypDimension, StypNumeric } from '../numeric';\nimport { unitlessZeroDimensionKind } from '../numeric/dimension-kind.impl';\n\n/**\n * Structured [length](https://developer.mozilla.org/en-US/docs/Web/CSS/length) property value.\n *\n * Can be constructed using `StypLength.of()` function.\n *\n * @category CSS Value\n */\nexport type StypLength = StypNumeric<StypLength.Unit>;\n\nexport namespace StypLength {\n\n  /**\n   * Supported length units, excluding percent.\n   */\n  export type Unit = 'cap' | 'ch' | 'em' | 'ex' | 'ic' | 'lh' | 'rem' | 'rlh'\n      | 'vh' | 'vw' | 'vi' | 'vb' | 'vmin' | 'vmax'\n      | 'px' | 'cm' | 'mm' | 'Q' | 'in' | 'pc' | 'pt';\n\n}\n\nexport const StypLength: StypDimension.Kind.UnitlessZero<StypLength.Unit> = (/*#__PURE__*/ unitlessZeroDimensionKind({\n  pt() {\n    return StypLengthPt;// eslint-disable-line @typescript-eslint/no-use-before-define\n  },\n  noPt() {\n    return StypLength;\n  },\n}));\n\n/**\n * Structured [length-percentage](https://developer.mozilla.org/en-US/docs/Web/CSS/length-percentage) CSS property\n * value.\n *\n * Can be constructed using `StypLengthPt.of()` function.\n *\n * @category CSS Value\n */\nexport type StypLengthPt = StypNumeric<StypLengthPt.Unit>;\n\nexport namespace StypLengthPt {\n\n  /**\n   * Supported length units, including percent.\n   */\n  export type Unit = StypLength.Unit | '%';\n\n}\n\nexport const StypLengthPt: StypDimension.Kind.UnitlessZero<StypLengthPt.Unit> = (\n    /*#__PURE__*/ unitlessZeroDimensionKind({\n      pt() {\n        return StypLengthPt;\n      },\n      noPt() {\n        return StypLength;\n      },\n    })\n);\n","/**\n * @packageDocumentation\n * @module @proc7ts/style-producer\n */\nimport cssesc from 'cssesc';\nimport { stypSplitPriority } from './priority';\nimport { StypValue, StypValueStruct } from './value';\n\n/**\n * Structured [URL](https://developer.mozilla.org/en-US/docs/Web/CSS/url) CSS property value.\n *\n * @category CSS Value\n */\nexport class StypURL extends StypValueStruct<StypURL> {\n\n  /**\n   * Target URL.\n   */\n  readonly url: string;\n\n  /**\n   * `url` value type.\n   */\n  get type(): 'url' {\n    return 'url';\n  }\n\n  /**\n   * Maps the given CSS property value to URL. Defaults to `undefined` if mapping is not possible.\n   *\n   * This method allows to use a [[StypURL]] class as [CSS property mapping][[StypMapper.Mapping]].\n   *\n   * Strings are treated as URLs (without `url()` functional syntax). `!important` suffix is respected.\n   *\n   * @param source  A raw property value that should be converted.\n   *\n   * @returns Mapped property value or `undefined`.\n   */\n  static by(source: StypValue): StypURL | undefined {\n    switch (typeof source) {\n      case 'string': {\n\n        const [url, priority] = stypSplitPriority(source);\n\n        return new StypURL(url, { priority });\n      }\n      case 'object':\n        if (source.type === 'url') {\n          return source;\n        }\n    }\n    return;\n  }\n\n  /**\n   * Constructs URL value.\n   *\n   * @param url  Target URL.\n   * @param opts  Construction options.\n   */\n  constructor(url: string, opts?: StypValue.Opts) {\n    super(opts);\n    this.url = url;\n  }\n\n  by(source: StypValue): StypURL {\n    return StypURL.by(source) || this;\n  }\n\n  prioritize(priority: number): StypURL {\n    return priority === this.priority ? this : new StypURL(this.url, { priority });\n  }\n\n  is(other: StypValue): boolean {\n    return typeof other === 'object'\n        && other.type === 'url'\n        && other.url === this.url\n        && other.priority === this.priority;\n  }\n\n  toString(): string {\n    return `url('${cssesc(this.url)}')`;\n  }\n\n}\n","/**\n * @internal\n */\nexport const FIRST_RENDER_ORDER = -0xffff;\n","/**\n * @packageDocumentation\n * @module @proc7ts/style-producer\n */\nimport { filterIt, itsEmpty, itsReduction, mapIt, overArray } from '@proc7ts/a-iterable';\nimport { isPresent } from '@proc7ts/call-thru';\nimport { NamespaceDef } from '@proc7ts/namespace-aliaser';\nimport { StypProperties } from '../../rule';\nimport { StypSelector } from '../../selector';\nimport { isCombinator } from '../../selector/selector.impl';\nimport { StypURL } from '../../value';\nimport { StypRenderer } from '../renderer';\nimport { StyleProducer } from '../style-producer';\nimport { stypRenderGlobals } from './globals.renderer';\nimport { FIRST_RENDER_ORDER } from './renderer.impl';\n\n/**\n * CSS stylesheet renderer of global XML namespace definitions.\n *\n * Renders `@namespace` declarations for CSS selectors containing namespace definitions.\n *\n * Enabled by default in [[produceStyle]] function.\n *\n * @category Rendering\n */\nexport const stypRenderXmlNs: StypRenderer = {\n\n  order: FIRST_RENDER_ORDER,\n\n  needs: stypRenderGlobals,\n\n  render(producer: StyleProducer, properties: StypProperties) {\n\n    const xmlNsDefs = extractXmlNsDefs(producer.selector);\n\n    producer.render(itsEmpty(xmlNsDefs) ? properties : declareNss());\n\n    function declareNss(): StypProperties {\n      return itsReduction(xmlNsDefs, declareNs, { ...properties });\n    }\n\n    function declareNs(result: StypProperties.Mutable, ns: NamespaceDef): StypProperties.Mutable {\n\n      const alias = producer.nsAlias(ns);\n\n      result[`@namespace:${alias}`] = new StypURL(ns.url);\n\n      return result;\n    }\n  },\n\n};\n\n/**\n * @internal\n */\nfunction extractXmlNsDefs(selector: StypSelector.Normalized): Iterable<NamespaceDef> {\n  return filterIt<NamespaceDef | null, NamespaceDef>(\n      mapIt(\n          overArray(selector),\n          part => !isCombinator(part) && part.ns && typeof part.ns !== 'string' ? part.ns : null,\n      ),\n      isPresent,\n  );\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/style-producer\n */\nimport { RenderScheduler } from '@proc7ts/render-scheduler';\nimport { StypPriority } from '../../value';\nimport { StypFormat, StypFormatConfig } from '../format';\nimport { StypWriter } from '../writer';\nimport { removeStyleElement, stypRenderScheduler } from './format.impl';\n\n/**\n * @internal\n */\nclass StypStyleObjectWriter implements StypWriter.Style {\n\n  constructor(private readonly _target: CSSStyleRule) {\n  }\n\n  get isGroup(): false {\n    return false;\n  }\n\n  set(name: string, value: string, priority: number): void {\n    this._target.style.setProperty(name, value, priority >= StypPriority.Important ? 'important' : null);\n  }\n\n  replace(css: string): void {\n    this._target.style.cssText = css;\n  }\n\n}\n\n/**\n * @internal\n */\nclass StypGroupObjectWriter implements StypWriter.Group {\n\n  constructor(readonly _target: CSSStyleSheet | CSSGroupingRule) {\n  }\n\n  get isGroup(): true {\n    return true;\n  }\n\n  addGroup(name: string, params: string, index?: number): StypWriter.Group {\n    return new StypGroupObjectWriter(\n        this._add(\n            `${name} ${params}{}`,\n            index,\n        ) as CSSGroupingRule,\n    );\n  }\n\n  addStyle(selector: string, index?: number): StypWriter.Style {\n    return new StypStyleObjectWriter(this._add(`${selector}{}`, index) as CSSStyleRule);\n  }\n\n  protected _add(\n      ruleText: string,\n      index = this._target.cssRules.length,\n  ): CSSRule {\n\n    const idx = this._target.insertRule(ruleText, index);\n\n    return this._target.cssRules[idx];\n  }\n\n}\n\n/**\n * @internal\n */\nclass StypSheetObjectWriter extends StypGroupObjectWriter implements StypWriter.Sheet {\n\n  constructor(private readonly _element: HTMLStyleElement) {\n    super(_element.sheet as CSSStyleSheet);\n  }\n\n  addGlobal(name: string, value: string, index?: number): void {\n    this._add(`${name} ${value};`, index);\n  }\n\n  clear(): void {\n\n    const { cssRules } = this._target;\n\n    while (cssRules.length) {\n      this._target.deleteRule(cssRules.length - 1);\n    }\n  }\n\n  remove(): void {\n    removeStyleElement(this._element);\n  }\n\n  done(): void {\n    /* do nothing */\n  }\n\n}\n\n/**\n * Configuration of {@link stypObjectFormat CSS object model production format}.\n *\n * @category Rendering\n */\nexport interface StypObjectFormatConfig extends StypFormatConfig {\n\n  /**\n   * Parent DOM node to add stylesheets to.\n   *\n   * `document.head` by default.\n   *\n   * This node has to be attached to document.\n   */\n  readonly parent?: Node;\n\n  /**\n   * DOM rendering operations scheduler.\n   *\n   * Creates a render schedule per rule.\n   *\n   * Uses `newRenderSchedule` for [[parent]] node by default.\n   */\n  readonly scheduler?: RenderScheduler;\n\n}\n\n/**\n * Builds CSS object model production format.\n *\n * The sheet writer creates a `<style>` element inside the `parent` node per CSS rule and builds its style sheet\n * with CSS object model methods.\n *\n * @category Rendering\n * @param config  Object format configuration.\n *\n * @returns CSS production format.\n */\nexport function stypObjectFormat(\n    config: StypObjectFormatConfig = {},\n): StypFormat {\n\n  const { parent = document.head } = config;\n\n  return {\n    ...config,\n    scheduler: stypRenderScheduler(parent, config.scheduler),\n    addSheet() {\n\n      const element = document.createElement('style');\n\n      element.setAttribute('type', 'text/css');\n      element.append(document.createTextNode(''));\n\n      parent.appendChild(element);\n\n      return new StypSheetObjectWriter(element);\n    },\n  };\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/style-producer\n */\nimport {\n  AfterEvent,\n  AfterEvent__symbol,\n  EventKeeper,\n  EventReceiver,\n  EventSupply,\n  OnEvent,\n  OnEvent__symbol,\n} from '@proc7ts/fun-events';\nimport { StypQuery, StypRuleKey, StypSelector } from '../selector';\nimport { StypProperties } from './properties';\nimport { StypRules } from './rules';\n\n/**\n * CSS rule.\n *\n * Represents CSS selector and corresponding CSS properties.\n *\n * @category CSS Rule\n */\nexport abstract class StypRule implements EventKeeper<[StypProperties]> {\n\n  /**\n   * A reference to the root CSS rule.\n   */\n  abstract readonly root: StypRule;\n\n  /**\n   * A reference to outer CSS rule.\n   *\n   * The outer rule is the one for enclosing element.\n   * I.e. for the rule with selector is `a b+c` the parent one is `a b`, while the outer one is `a`.\n   *\n   * This is `null` for the root rule and may be `null` for the rule removed from hierarchy.\n   */\n  abstract readonly outer: StypRule | null;\n\n  /**\n   * CSS selector of this rule.\n   */\n  abstract readonly selector: StypSelector.Normalized;\n\n  /**\n   * A key of this rule in the enclosing one.\n   */\n  abstract readonly key: StypRuleKey;\n\n  /**\n   * Whether this rule's properties are empty.\n   *\n   * This is `true` when the rule properties are constant and empty.\n   *\n   * Empty CSS rules returned from `rule()` method when there is no matching rule found.\n   */\n  abstract readonly empty: boolean;\n\n  /**\n   * Dynamic list of all CSS rules in hierarchy starting from this one.\n   */\n  abstract readonly rules: StypRuleHierarchy;\n\n  /**\n   * Build `AfterEvent` keeper of CSS properties of this rule.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   *\n   * @returns `AfterEvent` keeper of CSS properties map.\n   */\n  abstract read(): AfterEvent<[StypProperties]>;\n\n  /**\n   * Starts sending CSS properties of this rule and their updates to the given `receiver`.\n   *\n   * @param receiver  Target receiver of CSS properties map.\n   *\n   * @returns CSS properties supply.\n   */\n  abstract read(receiver: EventReceiver<[StypProperties]>): EventSupply;\n\n  [AfterEvent__symbol](): AfterEvent<[StypProperties]> {\n    return this.read();\n  }\n\n  /**\n   * Sets CSS properties of this rule.\n   *\n   * @param properties  CSS properties specifier. Or nothing to clear them.\n   *\n   * @returns `this` rule instance.\n   */\n  abstract set(properties?: StypProperties.Spec): this;\n\n  /**\n   * Appends CSS properties to this rule.\n   *\n   * @param properties  CSS properties specifier.\n   *\n   * @returns `this` rule instance.\n   */\n  add(properties: StypProperties.Spec): this {\n    return this.rules.add([], properties) as this;\n  }\n\n  /**\n   * Clears CSS properties of this rule.\n   *\n   * Calling this method is the same as calling `set()` without properties.\n   *\n   * @returns `this` rule instance.\n   */\n  clear(): this {\n    return this.set();\n  }\n\n  /**\n   * Removes this rule from hierarchy along with all nested rules.\n   *\n   * @param reason  Optional removal reason.\n   *\n   * @returns `this` (just removed) rule instance.\n   */\n  abstract remove(reason?: any): this;\n\n}\n\n/**\n * Dynamically updated list of CSS rules.\n *\n * This is an iterable of rules, an EventSender` of their updates, and an `EventKeeper` of itself.\n *\n * @category CSS Rule\n */\nexport abstract class StypRuleList implements StypRules, EventKeeper<[StypRuleList]> {\n\n  /**\n   * Builds an `AfterEvent` keeper of rule list.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   *\n   * @returns `AfterEvent` keeper of this rule list.\n   */\n  abstract read(): AfterEvent<[StypRuleList]>;\n\n  /**\n   * Starts sending rule list and updates to the given `receiver`.\n   *\n   * @param receiver  Target receiver of this rule list.\n   *\n   * @returns Rule list supply.\n   */\n  abstract read(receiver: EventReceiver<[StypRuleList]>): EventSupply;\n\n  [AfterEvent__symbol](): AfterEvent<[StypRuleList]> {\n    return this.read();\n  }\n\n  /**\n   * Builds an `OnEvent` sender of this rule list updates.\n   *\n   * The list updates receiver accepts two arguments:\n   * - An array of added rules\n   * - An array of removed rules.\n   *\n   * The `[OnEvent__symbol]` property is an alias of this one.\n   *\n   * @returns `OnEvent` sender of rule list updates.\n   */\n  abstract onUpdate(): OnEvent<[StypRule[], StypRule[]]>;\n\n  /**\n   * Starts sending updates to this rule list to the given `receiver`.\n   *\n   * @param receiver  Target receiver of updates to this rule list.\n   *\n   * @returns Rule list updates supply.\n   */\n  abstract onUpdate(receiver: EventReceiver<[StypRule[], StypRule[]]>): EventSupply;\n\n  [OnEvent__symbol](): OnEvent<[StypRule[], StypRule[]]> {\n    return this.onUpdate();\n  }\n\n  abstract [Symbol.iterator](): IterableIterator<StypRule>;\n\n  /**\n   * Grabs rules from this list matching the given `query`.\n   *\n   * @param query  CSS rule query to match.\n   *\n   * @returns Dynamic list of rules in this list matching the given query.\n   */\n  abstract grab(query: StypQuery): StypRuleList;\n\n}\n\n/**\n * Dynamic list of all CSS rules in hierarchy starting from its root.\n *\n * @category CSS Rule\n */\nexport abstract class StypRuleHierarchy extends StypRuleList {\n\n  /**\n   * Dynamic list containing only root CSS rule.\n   *\n   * This list never changes actually.\n   */\n  abstract readonly self: StypRuleList;\n\n  /**\n   * Dynamic list of all CSS rules directly nested within the root one.\n   */\n  abstract readonly nested: StypRuleList;\n\n  /**\n   * Appends CSS properties to nested rule.\n   *\n   * Creates target rule if necessary.\n   *\n   * @param selector  Target rule selector.\n   * @param properties  Optional CSS properties specifier.\n   *\n   * @returns Modified CSS rule.\n   */\n  abstract add(selector: StypSelector, properties?: StypProperties.Spec): StypRule;\n\n  /**\n   * Returns nested CSS rule matching the given `selector`.\n   *\n   * @param selector  Target rule selector.\n   *\n   * @returns Either matching CSS rule, or `undefined` if not found.\n   */\n  abstract get(selector: StypSelector): StypRule | undefined;\n\n  /**\n   * Watches for CSS rule properties.\n   *\n   * The properties are empty when the watched rule does not exist.\n   *\n   * @param selector  CSS selector of watched rule.\n   *\n   * @returns An `AfterEvent` registrar of CSS properties receiver.\n   */\n  abstract watch(selector: StypSelector): AfterEvent<[StypProperties]>;\n\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/style-producer\n */\nimport { StypSelector } from '../selector';\nimport { StypProperties } from './properties';\nimport { stypPropertiesBySpec } from './properties.impl';\nimport { StypRule } from './rule';\nimport { StypRule$ as StypRule_ } from './rule.impl';\n\n/**\n * @internal\n */\nconst rootSelector: StypSelector.Normalized = [];\n\n/**\n * Constructs root CSS rule representing global CSS declarations.\n *\n * All other rules are nested within single root.\n *\n * The root CSS rule selector is empty.\n *\n * @category CSS Rule\n * @param properties  Initial CSS rule properties specifier.\n *\n * @returns New root CSS rule.\n */\nexport function stypRoot(properties?: StypProperties.Spec): StypRule {\n  return new StypRule_(undefined, rootSelector, [], properties ? r => stypPropertiesBySpec(r, properties) : undefined);\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic/styp\n */\nimport { SingleContextKey, SingleContextRef } from '@proc7ts/context-values';\nimport { EventSupply } from '@proc7ts/fun-events';\nimport { StypFormat, StypRules } from '@proc7ts/style-producer';\n\n/**\n * Component style producer signature.\n */\nexport type ComponentStyleProducer =\n/**\n * @param rules  CSS rules to produce stylesheets for. This can be e.g. a `StypRule.rules` to render all rules,\n * or a result of `StypRuleList.grab()` method call to render only matching ones.\n * @param format  Style production format.\n *\n * @returns Styles supply. Once cut off (i.e. its `off()` method is called) the produced stylesheets are removed.\n */\n    (\n        rules: StypRules,\n        format: StypFormat,\n    ) => EventSupply;\n\n/**\n * A key of bootstrap, definition, or component context value containing a component style producer.\n */\nexport const ComponentStyleProducer: SingleContextRef<ComponentStyleProducer> = (\n    /*#__PURE__*/ new SingleContextKey<ComponentStyleProducer>('component-style-producer')\n);\n","/**\n * @packageDocumentation\n * @module @wesib/generic/styp\n */\nimport { MultiContextKey, MultiContextRef } from '@proc7ts/context-values';\nimport { StypRenderer } from '@proc7ts/style-producer';\n\n/**\n * A CSS renderer that will be enabled by default by {@link ComponentStypFormat component style production format}.\n */\nexport type ComponentStypRenderer = StypRenderer;\n\n/**\n * A key of component context value containing component CSS renderers.\n */\nexport const ComponentStypRenderer: MultiContextRef<ComponentStypRenderer> = (\n    /*#__PURE__*/ new MultiContextKey<ComponentStypRenderer>('component-styp-renderer')\n);\n","/**\n * @packageDocumentation\n * @module @wesib/generic/styp\n */\nimport { StypFormat, stypObjectFormat, StypObjectFormatConfig } from '@proc7ts/style-producer';\nimport { ComponentContext } from '@wesib/wesib';\nimport { componentStypDomFormatConfig } from './component-styp-dom.format';\nimport { ComponentStypFormat, ComponentStypFormatConfig } from './component-styp-format';\n\n/**\n * Component's CSS object model production format.\n *\n * Renders CSS when component's element connected to document.\n *\n * This format is used by default.\n */\nexport class ComponentStypObjectFormat extends ComponentStypFormat {\n\n  /**\n   * Constructs CSS object model production format.\n   *\n   * @param context  Target component context.\n   */\n  constructor(readonly context: ComponentContext) {\n    super();\n  }\n\n  format(config?: ComponentStypFormatConfig & StypObjectFormatConfig): StypFormat {\n    return stypObjectFormat(this.config(config));\n  }\n\n  /**\n   * Builds configuration of CSS object model production format.\n   *\n   * This method is called by {@link format} one.\n   *\n   * @param config  Original component style production format configuration.\n   *\n   * @returns Configuration of CSS object model production format.\n   */\n  config(config?: ComponentStypFormatConfig & StypObjectFormatConfig): StypObjectFormatConfig {\n    return componentStypDomFormatConfig(this, config, { when: 'connected' });\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic/styp\n */\nimport { produceBasicStyle } from '@proc7ts/style-producer';\nimport { FeatureDef, FeatureDef__symbol, StateSupport } from '@wesib/wesib';\nimport { ComponentStyleProducer } from './component-style-producer';\nimport { ComponentStypFormat } from './component-styp-format';\nimport { ComponentStypObjectFormat } from './component-styp-object.format';\n\n/**\n * @internal\n */\nconst BasicStyleProducerSupport__feature: FeatureDef = {\n  needs: StateSupport,\n  setup(setup) {\n    setup.provide({ a: ComponentStyleProducer, is: produceBasicStyle });\n    setup.perComponent({\n      a: ComponentStypFormat,\n      as: ComponentStypObjectFormat,\n    });\n  },\n};\n\n/**\n * Basic style producer support feature.\n *\n * Depends on [style-producer].\n *\n * Unlike [[StyleProducerSupport]] feature this one does not enable default CSS renderers.\n *\n * It is enabled automatically by {@link ProduceStyle @ProduceStyle} decorator.\n *\n * [style-producer]: https://www.npmjs.com/package/style-producer\n */\nexport class BasicStyleProducerSupport {\n\n  static get [FeatureDef__symbol](): FeatureDef {\n    return BasicStyleProducerSupport__feature;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic/styp\n */\nimport { produceStyle } from '@proc7ts/style-producer';\nimport { FeatureDef, FeatureDef__symbol, StateSupport } from '@wesib/wesib';\nimport { BasicStyleProducerSupport } from './basic-style-producer-support.feature';\nimport { ComponentStyleProducer } from './component-style-producer';\nimport { ComponentStypFormat } from './component-styp-format';\nimport { ComponentStypObjectFormat } from './component-styp-object.format';\n\n/**\n * @internal\n */\nconst StyleProducerSupport__feature: FeatureDef = {\n  has: BasicStyleProducerSupport,\n  needs: StateSupport,\n  setup(setup) {\n    setup.provide({ a: ComponentStyleProducer, is: produceStyle });\n    setup.perComponent({\n      a: ComponentStypFormat,\n      as: ComponentStypObjectFormat,\n    });\n  },\n};\n\n/**\n * Style producer support feature.\n *\n * Depends on [style-producer].\n *\n * This is an implementation of [[BasicStyleProducerSupport]] feature that enables default CSS renderers.\n *\n * It is _not_ enabled automatically by {@link ProduceStyle @ProduceStyle} decorator.\n *\n * [style-producer]: https://www.npmjs.com/package/style-producer\n */\nexport class StyleProducerSupport {\n\n  static get [FeatureDef__symbol](): FeatureDef {\n    return StyleProducerSupport__feature;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic/styp\n */\nimport { ContextKey, ContextKey__symbol, SingleContextKey } from '@proc7ts/context-values';\nimport { RefStypRule, StypProperties, StypRule, StypRuleRef, StypRules } from '@proc7ts/style-producer';\nimport { ThemeStyle } from './theme-style';\n\n/**\n * @internal\n */\nconst Theme__key = new SingleContextKey<Theme>('theme');\n\n/**\n * A hierarchy of CSS rules within single root.\n *\n * A component may use it to extract styling information.\n *\n * Current theme is available in bootstrap, definition, or component context. By default, only one theme is declared\n * per bootstrap. But this can be overridden.\n */\nexport abstract class Theme {\n\n  /**\n   * A key of bootstrap, definition, or component context value containing current theme instance.\n   */\n  static get [ContextKey__symbol](): ContextKey<Theme> {\n    return Theme__key;\n  }\n\n  /**\n   * Root CSS rule.\n   *\n   * All theme styling is represented as rules within this root.\n   */\n  abstract readonly root: StypRule;\n\n  /**\n   * Obtains CSS rule reference by its `referrer`.\n   *\n   * This is a helper method that resolves the given `referrer` against the `root` CSS rule of this theme.\n   *\n   * @param referrer  Target CSS rule referrer.\n   *\n   * @returns CSS rule reference.\n   */\n  ref<T extends StypProperties<T>>(referrer: RefStypRule<T>): StypRuleRef<T> {\n    return referrer(this.root);\n  }\n\n  /**\n   * Obtains a styling for the given theme styles.\n   *\n   * This method requests the registered {@link ThemeStyle theme styles} for CSS rules they provide.\n   * If some of the styles are not registered then uses the given style as provider.\n   *\n   * @param styles  The styles to obtain styling information for.\n   *\n   * @returns Dynamically updated CSS rule set containing the requested styling.\n   */\n  abstract style(...styles: ThemeStyle.Provider[]): StypRules;\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic/styp\n */\nimport { ContextKey, ContextKey__symbol, SingleContextKey } from '@proc7ts/context-values';\nimport { Theme } from './theme';\n\n/**\n * @internal\n */\nconst ThemeFactory__key = new SingleContextKey<ThemeFactory>('theme-factory');\n\nexport abstract class ThemeFactory {\n\n  static get [ContextKey__symbol](): ContextKey<ThemeFactory> {\n    return ThemeFactory__key;\n  }\n\n  abstract newTheme(): Theme;\n\n}\n","import { lazyStypRules, stypRoot, StypRule, StypRules } from '@proc7ts/style-producer';\nimport { Theme as Theme_ } from './theme';\nimport { ThemeStyle } from './theme-style';\n\n/**\n * @internal\n */\nexport class Theme extends Theme_ {\n\n  readonly root: StypRule = stypRoot();\n  private readonly _rules = new Map<ThemeStyle.Provider, StypRules>();\n\n  constructor(private readonly _styles: ThemeStyle.ById) {\n    super();\n  }\n\n  style(...styles: ThemeStyle.Provider[]): StypRules {\n\n    const theme = this;\n\n    return lazyStypRules(...styles.reduce<StypRules[]>(addStyleRules, []));\n\n    function addStyleRules(target: StypRules[], style: ThemeStyle.Provider): StypRules[] {\n\n      const existing = theme._rules.get(style);\n\n      if (existing) {\n        target.push(existing);\n      } else {\n\n        const constructed = theme._styles(style)(theme);\n\n        theme._rules.set(style, constructed);\n        target.push(constructed);\n      }\n\n      return target;\n    }\n  }\n\n}\n","import { ThemeFactory as ThemeFactory_ } from './theme-factory';\nimport { ThemeStyle } from './theme-style';\nimport { Theme } from './theme.impl';\n\n/**\n * @internal\n */\nexport class ThemeFactory extends ThemeFactory_ {\n\n  constructor(private readonly _styles: ThemeStyle.ById) {\n    super();\n  }\n\n  newTheme(): Theme {\n    return new Theme(this._styles);\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic/styp\n */\nimport { FeatureDef, FeatureDef__symbol } from '@wesib/wesib';\nimport { BasicStyleProducerSupport } from '../styp';\nimport { Theme } from './theme';\nimport { ThemeFactory } from './theme-factory';\nimport { ThemeFactory as ThemeFactory_ } from './theme-factory.impl';\nimport { ThemeStyle } from './theme-style';\n\n/**\n * @internal\n */\nconst ThemeSupport__feature: FeatureDef = {\n  needs: BasicStyleProducerSupport,\n  setup(setup) {\n    setup.provide({ a: ThemeFactory, as: ThemeFactory_, with: [ThemeStyle] });\n    setup.provide({\n      a: Theme,\n      by(factory: ThemeFactory) {\n        return factory.newTheme();\n      },\n      with: [ThemeFactory],\n    });\n  },\n};\n\n/**\n * Theme support feature.\n *\n * This needs to be enabled in order [[Theme]] and [[ThemeFactory]] to be available.\n */\nexport class ThemeSupport {\n\n  static get [FeatureDef__symbol](): FeatureDef {\n    return ThemeSupport__feature;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/input-aspects\n */\nimport { InControl } from './control';\n\n/**\n * Some aspect of the user input. Such as input focus or validity.\n *\n * An aspect is applied to input control first. This creates an aspect instance bound to that control. All\n * aspect-related operations are performed by that instance.\n *\n * @category Aspect\n * @typeparam Instance  Aspect instance type.\n * @typeparam Kind  Aspect application kind.\n */\nexport interface InAspect<Instance, Kind extends InAspect.Application.Kind = 'default'> {\n\n  /**\n   * Applies this aspect to the given input `control`.\n   *\n   * This method is called at most once per control when requested aspect is not applied to the control yet.\n   *\n   * @typeparam Value  Input value type.\n   * @param control  Input control to apply aspect to.\n   *\n   * @returns An aspect applied to the given `control`.\n   */\n  applyTo<Value>(control: InControl<Value>): InAspect.Applied<Value, Instance>;\n\n}\n\n/**\n * A symbol of aspect key property containing a reference to aspect.\n *\n * @category Aspect\n */\nexport const InAspect__symbol = (/*#__PURE__*/ Symbol('in-aspect'));\n\nexport namespace InAspect {\n\n  /**\n   * A key of the aspect of user input.\n   *\n   * It is passed to `InControl.aspect()` method in order to apply target aspect to that control.\n   *\n   * This interface is typically implemented by aspect instance class object. I.e. by its static methods.\n   *\n   * @typeparam Instance  Aspect instance type.\n   * @typeparam Kind  Aspect application kind.\n   */\n  export interface Key<Instance, Kind extends Application.Kind = 'default'> {\n\n    /**\n     * A referenced aspect of user input.\n     */\n    [InAspect__symbol]: InAspect<Instance, Kind>;\n\n  }\n\n  /**\n   * An input aspect applied to control.\n   *\n   * This is what returned from `InAspect.applyTo()` method. Contains aspect instance and its manipulation methods.\n   *\n   * @typeparam Value  Input value type.\n   * @typeparam Instance  Aspect instance type.\n   * @typeparam ConvertedInstance  A type of aspect instance applied to converted control.\n   * The same as `Instance` by default.\n   */\n  export interface Applied<Value, Instance, ConvertedInstance extends Instance = Instance> {\n\n    /**\n     * Input aspect instance.\n     */\n    readonly instance: Instance;\n\n    /**\n     * Converts an aspect to another value type.\n     *\n     * This method is called by input control created by [[InControl.convert]] method.\n     *\n     * @typeparam To  Converted input value type.\n     * @param target  Target input control.\n     *\n     * @returns The same aspect applied to `target` control, or `undefined` if aspect can not be converted.\n     */\n    convertTo<To>(target: InControl<To>): Applied<To, ConvertedInstance> | undefined;\n\n    /**\n     * Converts an aspect to the same value type.\n     *\n     * When defined, this method is called instead of [[convertTo]] when converting aspect for converted control\n     * with the same value. I.e. when {@link InConverter.Aspect aspect-only converters} used for conversion.\n     *\n     * @param target  Target input control.\n     *\n     * @returns The same aspect applied to `target` control, or `undefined` if aspect can not be converted.\n     */\n    attachTo?(target: InControl<Value>): Applied<Value, Instance> | undefined;\n\n  }\n\n  export namespace Application {\n\n    /**\n     * A kind of input aspect application.\n     *\n     * This is a key of `InAspect.Application.Map` type.\n     */\n    export type Kind = keyof Map<unknown, unknown>;\n\n    /**\n     * A type of input aspect application result of the given application kind and input value type.\n     *\n     * @typeparam OfInstance  Aspect instance type.\n     * @typeparam OfValue  Input value type.\n     * @typeparam OfKind  Aspect application kind.\n     */\n    export type Result<OfInstance, OfValue, OfKind extends Kind> =\n        Applied<OfValue, Instance<OfInstance, OfValue, OfKind>>;\n\n    /**\n     * A type of applied aspect instance of the given application kind and input value type.\n     *\n     * @typeparam OfInstance  Aspect instance type.\n     * @typeparam OfValue  Input value type.\n     * @typeparam OfKind  Aspect application kind.\n     */\n    export type Instance<OfInstance, OfValue, OfKind extends Kind> =\n        ReturnType<Map<OfInstance, OfValue>[OfKind]>;\n\n    /**\n     * A map implementing application result detection algorithms.\n     *\n     * Each method name here is a kind of aspect application, while the return value of this method is an aspect\n     * instance type.\n     *\n     * @typeparam OfInstance  Aspect instance type.\n     * @typeparam OfValue  Input value type.\n     */\n    export interface Map<OfInstance, OfValue> {\n\n      /**\n       * Default aspect application type. Just an aspect instance type.\n       */\n      default(): OfInstance;\n\n    }\n\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/input-aspects\n */\nimport { NamespaceAliaser, NamespaceDef, newNamespaceAliaser } from '@proc7ts/namespace-aliaser';\nimport { InAspect, InAspect__symbol } from '../aspect';\nimport { inAspectValue } from '../aspect.impl';\nimport { InConverter } from '../converter';\n\n/**\n * Namespace aliaser aspect.\n *\n * Used by other aspect to generate unique names.\n *\n * Creates new namespace aliaser and reuses it across converted controls unless overridden e.g. by\n * [[InNamespaceAliaser.to]] converter.\n *\n * @category Aspect\n */\nexport type InNamespaceAliaser = NamespaceAliaser;\n\n/**\n * Default input-aspects namespace definition.\n *\n * @category Aspect\n */\nexport const InputAspects__NS: NamespaceDef = (/*#__PURE__*/ new NamespaceDef(\n    'https://surol.github.io/input-aspects/ns',\n    'inasp',\n    'input-aspects',\n));\n\n/**\n * @internal\n */\nconst InNamespaceAliaser__aspect: InAspect<InNamespaceAliaser> = {\n\n  applyTo() {\n    return inAspectValue(newNamespaceAliaser());\n  },\n\n};\n\n/**\n * @category Aspect\n */\nexport const InNamespaceAliaser = {\n\n  get [InAspect__symbol](): InAspect<InNamespaceAliaser> {\n    return InNamespaceAliaser__aspect;\n  },\n\n  /**\n   * Creates input control aspect converter that assigns the given namespace aliaser to converted control.\n   *\n   * @param nsAlias  Target namespace aliaser.\n   *\n   * @returns Input control aspect converter.\n   */\n  to<Value>(nsAlias: InNamespaceAliaser): InConverter.Aspect<any, Value> {\n    return {\n      applyAspect<Instance, Kind extends InAspect.Application.Kind>(\n          aspect: InAspect<any, any>,\n      ): InAspect.Applied<any, InAspect.Application.Instance<Instance, Value, Kind>> | undefined {\n        return aspect === InNamespaceAliaser__aspect\n            ? inAspectValue(nsAlias) as InAspect.Application.Result<Instance, Value, Kind>\n            : undefined;\n      },\n    };\n  },\n\n};\n","/**\n * @packageDocumentation\n * @module @proc7ts/input-aspects\n */\nimport { newRenderSchedule, RenderScheduler } from '@proc7ts/render-scheduler';\nimport { InAspect, InAspect__symbol } from '../aspect';\nimport { inAspectValue } from '../aspect.impl';\nimport { InConverter } from '../converter';\n\n/**\n * Input elements render scheduler.\n *\n * It is used e.g. to schedule CSS updates. The control values and attributes are updated instantly.\n *\n * Uses the default render scheduler unless overridden e.g. by [[InRenderScheduler.to]] converter.\n *\n * @category Aspect\n */\nexport type InRenderScheduler = RenderScheduler;\n\n/**\n * @internal\n */\nconst InRenderScheduler__aspect: InAspect<InRenderScheduler> = {\n\n  applyTo() {\n    return inAspectValue(newRenderSchedule);\n  },\n\n};\n\n/**\n * @category Aspect\n */\nexport const InRenderScheduler = {\n\n  get [InAspect__symbol](): InAspect<InRenderScheduler> {\n    return InRenderScheduler__aspect;\n  },\n\n  /**\n   * Creates input control aspect converter that assigns the given render scheduler to converted control.\n   *\n   * @param scheduler  Target DOM render scheduler.\n   *\n   * @returns Input control aspect converter.\n   */\n  to<Value>(scheduler: InRenderScheduler): InConverter.Aspect<any, Value> {\n    return {\n      applyAspect<Instance, Kind extends InAspect.Application.Kind>(\n          aspect: InAspect<any, any>,\n      ): InAspect.Applied<any, InAspect.Application.Instance<Instance, Value, Kind>> | undefined {\n        return aspect === InRenderScheduler__aspect\n            ? inAspectValue(scheduler) as InAspect.Application.Result<Instance, Value, Kind>\n            : undefined;\n      },\n    };\n  },\n\n};\n","/**\n * @packageDocumentation\n * @module @proc7ts/input-aspects\n */\nimport { EventReceiver, EventSupply, eventSupply, EventSupply__symbol, OnEvent } from '@proc7ts/fun-events';\nimport { InControl } from '../control';\n\n/**\n * @internal\n */\nclass InSameValueControl<Value> extends InControl<Value> {\n\n  private _supply?: EventSupply;\n\n  constructor(private readonly _control: InControl<Value>) {\n    super();\n  }\n\n  get [EventSupply__symbol](): EventSupply {\n    return this._supply || (this._supply = eventSupply().needs(this._control));\n  }\n\n  get it(): Value {\n    return this._control.it;\n  }\n\n  set it(value: Value) {\n    this._control.it = value;\n  }\n\n  on(): OnEvent<[Value, Value]>;\n  on(receiver: EventReceiver<[Value, Value]>): EventSupply;\n  on(receiver?: EventReceiver<[Value, Value]>): OnEvent<[Value, Value]> | EventSupply {\n    return (this.on = this._control.on().F)(receiver);\n  }\n\n}\n\n/**\n * Constructs input control with the same value as another one.\n *\n * The constructed control does not inherit any aspects from original one.\n *\n * @category Control\n * @param control  Original control containing the value.\n *\n * @returns New input control that accesses the value of original `control`.\n */\nexport function inValueOf<Value>(control: InControl<Value>): InControl<Value> {\n  return new InSameValueControl(control);\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/input-aspects\n */\nimport {\n  AfterEvent,\n  AfterEvent__symbol,\n  EventKeeper,\n  EventReceiver,\n  EventSender,\n  EventSupply,\n  OnEvent,\n  OnEvent__symbol,\n} from '@proc7ts/fun-events';\nimport { InAspect, InAspect__symbol } from '../aspect';\nimport { inAspectSameOrNull } from '../aspect.impl';\nimport { InControl } from '../control';\nimport { AbstractInControl } from '../controls';\n\n/**\n * @internal\n */\nconst InContainer__aspect: InAspect<InContainer<any> | null, 'container'> = {\n  applyTo(control) {\n    return inAspectSameOrNull(control, InContainer);\n  },\n};\n\n/**\n * An input control containing other controls.\n *\n * Container is available as an aspect of itself and converted controls with the same value.\n *\n * @category Control\n * @typeparam Value  Input value type.\n */\nexport abstract class InContainer<Value> extends AbstractInControl<Value> {\n\n  static get [InAspect__symbol](): InAspect<InContainer<any> | null, 'container'> {\n    return InContainer__aspect;\n  }\n\n  /**\n   * Controls of this input container.\n   */\n  abstract readonly controls: InContainerControls;\n\n  protected _applyAspect<Instance, Kind extends InAspect.Application.Kind>(\n      aspect: InAspect<Instance, Kind>,\n  ): InAspect.Application.Result<Instance, Value, Kind> | undefined {\n    return aspect === InContainer__aspect as InAspect<any>\n        ? inAspectSameOrNull(this, InContainer, this) as InAspect.Application.Result<Instance, Value, Kind>\n        : super._applyAspect(aspect);\n  }\n\n}\n\nexport namespace InContainer {\n\n  /**\n   * Input controls container entry.\n   *\n   * This is a tuple containing control key and control itself.\n   *\n   * Container implementations may apply limitations on the type of keys and input values they support.\n   *\n   * @typeparam L  Input container layout interface.\n   */\n  export type Entry = readonly [PropertyKey, InControl<any>];\n\n  /**\n   * A snapshot of input controls within container.\n   *\n   * Extends an `Iterable` interface by iterating over all nested controls.\n   */\n  export interface Snapshot extends Iterable<InControl<any>> {\n\n    [Symbol.iterator](): IterableIterator<InControl<any>>;\n\n    /**\n     * Iterates over nested control entries.\n     *\n     * @returns An iterable iterator over entries.\n     */\n    entries(): IterableIterator<InContainer.Entry>;\n\n  }\n\n}\n\n/**\n * Controls of input container.\n *\n * Allows to track container contents. I.e. nested controls, their additions and removal.\n *\n * Implements `EventSender` interface by sending arrays of added and removed control entries.\n *\n * Implements `EventKeeper` interface by sending container contents instance each time it is changed.\n *\n * @category Control\n */\nexport abstract class InContainerControls\n     implements EventSender<[InContainer.Entry[], InContainer.Entry[]]>, EventKeeper<[InContainer.Snapshot]> {\n\n  /**\n   * Builds an `OnEvent` sender of container updates.\n   *\n   * Sends two arrays on each container update: the first one contains added control entries, while the second one\n   * contains removed control entries.\n   *\n   * The `[OnEvent__symbol]` property is an alias of this one.\n   *\n   * @returns Container updates sender.\n   */\n  abstract on(): OnEvent<[InContainer.Entry[], InContainer.Entry[]]>;\n\n  /**\n   * Starts sending container updates to the given receiver.\n   *\n   * Sends two arrays on each container update: the first one contains added control entries, while the second one\n   * contains removed control entries.\n   *\n   * @param receiver  Target container updates receiver.\n   *\n   * @returns Container updates supply.\n   */\n  abstract on(receiver: EventReceiver<[InContainer.Entry[], InContainer.Entry[]]>): EventSupply;\n\n  [OnEvent__symbol](): OnEvent<[InContainer.Entry[], InContainer.Entry[]]> {\n    return this.on();\n  }\n\n  /**\n   * Builds an `AfterEvent` keeper of input container contents.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   *\n   * @returns Container contents snapshot keeper.\n   */\n  abstract read(): AfterEvent<[InContainer.Snapshot]>;\n\n  /**\n   * Starts sending container contents and updates to the given `receiver`\n   *\n   * @param receiver  Target receiver of container snapshot updates.\n   *\n   * @returns Container contents supply.\n   */\n  abstract read(receiver: EventReceiver<[InContainer.Snapshot]>): EventSupply;\n\n  [AfterEvent__symbol](): AfterEvent<[InContainer.Snapshot]> {\n    return this.read();\n  }\n\n}\n\ndeclare module '../aspect' {\n\n  export namespace InAspect.Application {\n\n    export interface Map<OfInstance, OfValue> {\n\n      /**\n       * Input controls container application type.\n       */\n      container(): InContainer<OfValue> | null;\n\n    }\n\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/input-aspects\n */\nimport { InAspect } from '../aspect';\nimport { InControl } from '../control';\nimport { InConverter, intoConvertedAspects } from '../converter';\nimport { inValueOf } from './value-of.control';\n\n/**\n * Abstract input control implementation.\n *\n * Allows to define default input aspects.\n *\n * @category Control\n */\nexport abstract class AbstractInControl<Value> extends InControl<Value> {\n\n  /**\n   * @internal\n   */\n  private readonly _aspectConversion: InConverter.Aspect.Conversion<Value>;\n\n  /**\n   * Constructs input control.\n   *\n   * @param aspects  Input aspects applied by default. These are aspect converters to constructed control\n   * from the {@link inValueOf same-valued one}.\n   */\n  protected constructor(\n      {\n        aspects,\n      }: {\n        readonly aspects?: InConverter.Aspect<Value> | readonly InConverter.Aspect<Value>[];\n      },\n  ) {\n    super();\n    this._aspectConversion = intoConvertedAspects(aspects)(inValueOf(this), this);\n  }\n\n  protected _applyAspect<Instance, Kind extends InAspect.Application.Kind>(\n      aspect: InAspect<Instance, Kind>,\n  ): InAspect.Application.Result<Instance, Value, Kind> | undefined {\n    return this._aspectConversion.applyAspect(aspect) || super._applyAspect(aspect);\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/input-aspects\n */\nimport {\n  AfterEvent,\n  AfterEvent__symbol,\n  afterSent,\n  EventEmitter,\n  EventKeeper,\n  EventReceiver,\n  EventSender,\n  eventSupply,\n  EventSupply,\n  eventSupplyOf,\n  OnEvent,\n  OnEvent__symbol,\n} from '@proc7ts/fun-events';\nimport { InAspect, InAspect__symbol } from '../aspect';\nimport { inAspectValue } from '../aspect.impl';\nimport { InControl } from '../control';\nimport { InContainer } from './container.control';\n\n/**\n * @internal\n */\nconst InParents__aspect: InAspect<InParents> = {\n  applyTo(control): InAspect.Applied<any, InParents> {\n    return inAspectValue(new InControlParents(control));\n  },\n};\n\n/**\n * Parents of input control.\n *\n * Reflects all containers the control belongs to. Note that component may belong to multiple containers. Or even\n * to the same container multiple times.\n *\n * Implements `EventSender` interface by sending arrays of parent entries the control is added to and removed from.\n *\n * Implements `EventKeeper` interface by sending a snapshot of all parents each time it is updated.\n *\n * @category Aspect\n */\nexport abstract class InParents\n    implements EventKeeper<[Iterable<InParents.Entry>]>, EventSender<[InParents.Entry[], InParents.Entry[]]> {\n\n  static get [InAspect__symbol](): InAspect<InParents> {\n    return InParents__aspect;\n  }\n\n  /**\n   * Builds an `OnEvent` sender of parent updates.\n   *\n   * Sends two arrays on each parents update: the first one contains added parent entries, while the second one\n   * contains removed parent entries.\n   *\n   * The `[OnEvent__symbol]` property is an alias of this one.\n   *\n   * @returns `OnEvent` sender of parent updates.\n   */\n  abstract on(): OnEvent<[InParents.Entry[], InParents.Entry[]]>;\n\n  /**\n   * Starts sending parent updates to the given `receiver`.\n   *\n   * Sends two arrays on each parents update: the first one contains added parent entries, while the second one\n   * contains removed parent entries.\n   *\n   * @param receiver  Target parent updates receiver.\n   *\n   * @returns Parent updates supply.\n   */\n  abstract on(receiver: EventReceiver<[InParents.Entry[], InParents.Entry[]]>): EventSupply;\n\n  [OnEvent__symbol](): OnEvent<[InParents.Entry[], InParents.Entry[]]> {\n    return this.on();\n  }\n\n  /**\n   * Builds an `AfterEvent` keeper of control parents.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   *\n   * @returns `AfterEvent` keeper of control parents.\n   */\n  abstract read(): AfterEvent<[InParents.All]>;\n\n  /**\n   * Starts sending control parents and updates to the given `receiver`\n   *\n   * @param receiver  Target control parents receiver.\n   *\n   * @returns Control parents supply.\n   */\n  abstract read(receiver: EventReceiver<[InParents.All]>): EventSupply;\n\n  [AfterEvent__symbol](): AfterEvent<[InParents.All]> {\n    return this.read();\n  }\n\n  /**\n   * Adds the input control to the given parent container under the given key.\n   *\n   * @param entry  Parent container entry.\n   *\n   * @returns A parent container supply. Removes the control from the parent container once cut off.\n   */\n  abstract add(entry: InParents.Entry): EventSupply;\n\n}\n\nexport namespace InParents {\n\n  /**\n   * Parent container entry of input control.\n   */\n  export interface Entry {\n\n    /**\n     * Parent container.\n     */\n    readonly parent: InContainer<any>;\n\n  }\n\n  /**\n   * All control parents as iterable instance.\n   */\n  export interface All extends Iterable<Entry> {\n\n    [Symbol.iterator](): IterableIterator<Entry>;\n\n  }\n\n}\n\n/**\n * @internal\n */\nclass InControlParents extends InParents {\n\n  private readonly _map = new Map<InParents.Entry, EventSupply>();\n  private readonly _on = new EventEmitter<[InParents.Entry[], InParents.Entry[]]>();\n\n  constructor(private readonly _control: InControl<any>) {\n    super();\n    eventSupplyOf(this._on).needs(this._control);\n  }\n\n  add(entry: InParents.Entry): EventSupply {\n\n    const existingSupply = this._map.get(entry);\n\n    if (existingSupply) {\n      // Parent entry already added. Doing nothing\n      return existingSupply;\n    }\n\n    // Adding new entry\n    const supply = eventSupply(() => {\n      this._map.delete(entry);\n      this._on.send([], [entry]);\n    });\n\n    this._map.set(entry, supply);\n    this._on.send([entry], []);\n\n    return supply\n        .needs(this._control)\n        .needs(entry.parent);\n  }\n\n  on(): OnEvent<[InParents.Entry[], InParents.Entry[]]>;\n  on(receiver: EventReceiver<[InParents.Entry[], InParents.Entry[]]>): EventSupply;\n  on(\n      receiver?: EventReceiver<[InParents.Entry[], InParents.Entry[]]>,\n  ): OnEvent<[InParents.Entry[], InParents.Entry[]]> | EventSupply {\n    return (this.on = this._on.on().F)(receiver);\n  }\n\n  read(): AfterEvent<[InParents.All]>;\n  read(receiver: EventReceiver<[InParents.All]>): EventSupply;\n  read(receiver?: EventReceiver<[InParents.All]>): AfterEvent<[InParents.All]> | EventSupply {\n\n    const allParents = (): IterableIterator<InParents.Entry> => this._map.keys();\n\n    return (this.read = afterSent<[InParents.All]>(\n        this.on().thru(allParents),\n        () => [allParents()],\n    ).F)(receiver);\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/input-aspects\n */\nimport { AfterEvent, EventReceiver, EventSupply } from '@proc7ts/fun-events';\nimport { DomEventDispatcher } from '@proc7ts/fun-events/dom';\nimport { InAspect, InAspect__symbol } from './aspect';\nimport { inAspectSameOrNull } from './aspect.impl';\nimport { AbstractInControl } from './controls';\n\n/**\n * @internal\n */\nconst InElement__aspect: InAspect<InElement<any> | null, 'element'> = {\n  applyTo(control) {\n    return inAspectSameOrNull(control, InElement);\n  },\n};\n\n/**\n * HTML input element control.\n *\n * It is also available as aspect of itself and converted controls with the same value.\n *\n * @category Control\n * @typeparam Value  Input value type.\n * @typeparam Elt  A type of input HTML element.\n */\nexport abstract class InElement<Value, Elt = HTMLElement> extends AbstractInControl<Value> {\n\n  /**\n   * HTML input element this control is based on.\n   */\n  abstract readonly element: Elt;\n\n  /**\n   * DOM event dispatcher of this element.\n   */\n  abstract readonly events: DomEventDispatcher;\n\n  static get [InAspect__symbol](): InAspect<InElement<any> | null, 'element'> {\n    return InElement__aspect;\n  }\n\n  /**\n   * Builds an `AfterEvent` keeper of user input.\n   *\n   * @returns `AfterEvent` keeper of user input.\n   */\n  abstract input(): AfterEvent<[InElement.Input<Value>]>;\n\n  /**\n   * Starts sending user input and updates to the given `receiver`.\n   *\n   * @param receiver  Target user input receiver.\n   *\n   * @returns User input supply.\n   */\n  abstract input(receiver: EventReceiver<[InElement.Input<Value>]>): EventSupply;\n\n  protected _applyAspect<Instance, Kind extends InAspect.Application.Kind>(\n      aspect: InAspect<Instance, Kind>,\n  ): InAspect.Application.Result<Instance, Value, Kind> | undefined {\n    return aspect as InAspect<any, any> === InElement__aspect\n        ? inAspectSameOrNull(\n            this,\n            InElement,\n            this as InElement<Value, any>,\n        ) as InAspect.Application.Result<Instance, Value, Kind>\n        : super._applyAspect(aspect);\n  }\n\n}\n\nexport namespace InElement {\n\n  /**\n   * User input.\n   *\n   * @typeparam Value  Input value type.\n   */\n  export interface Input<Value> {\n\n    /**\n     * The value user entered.\n     */\n    value: Value;\n\n    /**\n     * An event caused the value to be applied.\n     *\n     * The value has been applied programmatically if missing.\n     */\n    event?: Event;\n\n  }\n\n}\n\ndeclare module './aspect' {\n\n  export namespace InAspect.Application {\n\n    export interface Map<OfInstance, OfValue> {\n\n      /**\n       * Input element application type.\n       */\n      element(): InElement<OfValue> | null;\n\n    }\n\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/input-aspects\n */\nimport { nextArgs } from '@proc7ts/call-thru';\nimport { afterAll, AfterEvent } from '@proc7ts/fun-events';\nimport { InAspect, InAspect__symbol } from '../aspect';\nimport { inAspectSameOrBuild } from '../aspect.impl';\nimport { InControl } from '../control';\nimport { InMode } from './mode.aspect';\n\n/**\n * A data aspect of the input.\n *\n * Represents input control data that will be submitted.\n *\n * Input data is typically the same as control value with respect to {@link InMode input mode}. I.e. when input mode is\n * `off` the data is `undefined`.\n *\n * An aspect interface is an `AfterEvent` keeper of input data.\n *\n * @category Aspect\n * @typeparam Value  Input value type.\n */\nexport type InData<Value> = AfterEvent<[InData.DataType<Value>?]>;\n\n/**\n * @internal\n */\nconst InData__aspect: Aspect = {\n\n  applyTo<Value>(control: InControl<Value>): Applied<Value> {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    return inAspectSameOrBuild(control, InData, <V>(ctrl: InControl<V>) => afterAll({\n      value: ctrl,\n      mode: ctrl.aspect(InMode),\n    }).keepThru(\n        ({ value: [value], mode: [mode] }) => InMode.hasData(mode)\n            ? nextArgs(value as any)\n            : nextArgs(),\n    ));\n  },\n\n};\n\n/**\n * Input data aspect.\n */\ninterface Aspect extends InAspect<InData<any>, 'data'> {\n\n  applyTo<Value>(control: InControl<Value>): Applied<Value>;\n\n}\n\n/**\n * An input data aspect applied to control.\n */\ninterface Applied<Value> extends InAspect.Applied<Value, InData<Value>, InData<any>> {\n\n  convertTo<To>(target: InControl<To>): Applied<To> | undefined;\n\n}\n\nexport const InData = {\n\n  get [InAspect__symbol](): InAspect<InData<any>, 'data'> {\n    return InData__aspect;\n  },\n\n};\n\n/**\n * @category Aspect\n */\nexport namespace InData {\n\n  /**\n   * Input data type.\n   *\n   * This is either a partial value (for the object), or the value itself (for everything else).\n   *\n   * @typeparam Value  Input value type.\n   */\n  export type DataType<Value> =\n      | (Value extends object ? { [K in keyof Value]?: DataType<Value[K]> } : Value)\n      | undefined;\n\n}\n\ndeclare module '../aspect' {\n\n  export namespace InAspect.Application {\n\n    export interface Map<OfInstance, OfValue> {\n\n      /**\n       * Input data aspect application type.\n       */\n      data(): InData<OfValue>;\n\n    }\n\n  }\n\n}\n","import { flatMapIt, itsEach } from '@proc7ts/a-iterable';\nimport { asis, noop, valuesProvider } from '@proc7ts/call-thru';\nimport {\n  AfterEvent,\n  AfterEvent__symbol,\n  afterEventBy,\n  afterSupplied,\n  EventEmitter,\n  EventKeeper,\n  EventSupply,\n  eventSupply,\n} from '@proc7ts/fun-events';\nimport { InControl } from '../control';\nimport { InValidation } from './validation.aspect';\nimport { inValidator, InValidator } from './validator';\n\nconst dontRemove = {};\n\n/**\n * @internal\n */\nexport class InValidationMessages<Value> implements EventKeeper<InValidation.Message[]> {\n\n  readonly _messages: AfterEvent<InValidation.Message[]>;\n  readonly from: (this: void, validator: InValidator<Value>) => EventSupply;\n\n  constructor(control: InControl<Value>) {\n\n    const emitter = new EventEmitter<InValidation.Message[]>();\n    const validators = new Map<AfterEvent<InValidation.Message[]>, EventSupply>();\n    const validatorMessages = new Map<InValidator<Value>, InValidation.Message[]>();\n    // Sends validation messages\n    let send: () => void = noop;\n    // Validates using the given validator\n    let validate: (validator: AfterEvent<InValidation.Message[]>, validatorSupply: EventSupply) => void = noop;\n\n    this._messages = afterEventBy(receiver => {\n\n      // Validation messages supply\n      const resultSupply = afterSupplied(emitter, valuesProvider()).to(receiver).whenOff(() => {\n        send = noop; // Disable message sending\n        validate = noop; // Disable validation\n      });\n\n      // Enable validation using the given validator\n      validate = (validator: AfterEvent<InValidation.Message[]>, validatorSupply: EventSupply) => {\n\n        const supply = validator.to(\n            (...messages) => {\n              if (messages.length) {\n                // Replace messages reported by validator.\n                validatorMessages.set(validator, messages);\n              } else if (!validatorMessages.delete(validator)) {\n                // Nothing removed. No need to send messages\n                return;\n              }\n              send(); // Send all messages.\n            },\n        )\n            .needs(validatorSupply)\n            .whenOff(reason => {\n              if (reason !== dontRemove) {\n                validatorSupply.off(reason);\n              }\n              if (validatorMessages.delete(validator)) {\n                // Send all messages only if the removed validator reported some messages earlier\n                send();\n              }\n            });\n\n        resultSupply.whenOff(() => supply.off(dontRemove));\n      };\n\n      // Enable each validator\n      itsEach(validators.entries(), ([validator, validatorSupply]) => validate(validator, validatorSupply));\n\n      // Enable message sending\n      send = () => {\n        emitter.send(...allMessages());\n      };\n\n      // Send messages if present already\n      if (validatorMessages.size) {\n        send();\n      }\n    }).share().tillOff(control);\n\n    this.from = validator => {\n\n      const source = inValidator(validator)(control);\n      const validatorSupply = eventSupply(() => {\n        validators.delete(source);\n      });\n\n      validators.set(source, validatorSupply);\n      validate(source, validatorSupply); // Start validation using validator\n\n      return validatorSupply.needs(control);\n    };\n\n    function allMessages(): Iterable<InValidation.Message> {\n      return flatMapIt(validatorMessages.values(), asis);\n    }\n  }\n\n  [AfterEvent__symbol](): AfterEvent<InValidation.Message[]> {\n    return this._messages;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/input-aspects\n */\nimport { asis, nextArgs, nextSkip } from '@proc7ts/call-thru';\nimport {\n  AfterEvent,\n  afterSent,\n  EventEmitter,\n  EventReceiver,\n  EventSupply,\n  EventSupply__symbol,\n  eventSupplyOf,\n  OnEvent,\n} from '@proc7ts/fun-events';\nimport { DomEventDispatcher } from '@proc7ts/fun-events/dom';\nimport { InConverter } from '../converter';\nimport { InElement } from '../element.control';\n\n/**\n * Abstract implementation of {@link InElement input HTML element control}.\n *\n * @category Control\n * @typeparam Value  Input value type.\n * @typeparam Elt  A type of input HTML element.\n */\nexport class AbstractInElement<Value, Elt extends HTMLElement> extends InElement<Value, Elt> {\n\n  readonly events: DomEventDispatcher;\n  private readonly _get: (this: AbstractInElement<Value, Elt>) => Value;\n  private readonly _set: (this: AbstractInElement<Value, Elt>, value: Value) => void;\n  private readonly _input: EventEmitter<[InElement.Input<Value>, Value]> = new EventEmitter();\n  private _value: Value;\n  private _update: (value: Value, oldValue: Value) => void;\n\n  /**\n   * Constructs HTML input element control.\n   *\n   * @param element  HTML input element the constructed control is based on.\n   * @param aspects  Input aspects applied by default. These are aspect converters to constructed control\n   * from the {@link inValueOf same-valued one}.\n   * @param get  Input value getter.\n   * @param set  Input value setter.\n   */\n  constructor(\n      readonly element: Elt,\n      {\n        aspects,\n        get,\n        set,\n      }: {\n        readonly aspects?: InConverter.Aspect<Value> | readonly InConverter.Aspect<Value>[];\n        readonly get: (this: AbstractInElement<Value, Elt>) => Value;\n        readonly set: (this: AbstractInElement<Value, Elt>, value: Value) => void;\n      },\n  ) {\n    super({ aspects });\n\n    const self = this;\n\n    this._get = get;\n    this._set = set;\n    this._value = this.it;\n\n    const doUpdate = this._update = (value: Value, oldValue: Value): void => update({ value }, oldValue);\n\n    this.events = new DomEventDispatcher(element);\n    eventSupplyOf(this.events).needs(this);\n    this.listenForInput(input => update(input, this._value));\n\n    function update(input: InElement.Input<Value>, oldValue: Value): void {\n      for (;;) {\n        self._value = input.value;\n\n        // Corrections are value updates performed by update event receivers\n        // The last correction is recorded and sent later, when all receivers receive current update\n        let correction: [InElement.Input<Value>, Value] | undefined;\n\n        // Record corrections\n        self._update = (newValue: Value, old: Value) => {\n          // Corrections retain the event instance\n          correction = [{ ...input, value: newValue }, old];\n        };\n        try {\n          self._input.send(input, oldValue);\n        } finally {\n          self._update = doUpdate;\n        }\n\n        if (!correction) {\n          break; // No more corrections\n        }\n\n        // Apply last correction\n        // noinspection JSUnusedAssignment\n        [input, oldValue] = correction;\n      }\n    }\n  }\n\n  get [EventSupply__symbol](): EventSupply {\n    return eventSupplyOf(this._input);\n  }\n\n  get it(): Value {\n    return this._get();\n  }\n\n  set it(value: Value) {\n\n    const oldValue = this.it;\n\n    if (value !== oldValue) {\n      this._set(value);\n      this._update(this._get(), oldValue);\n    }\n  }\n\n  input(): AfterEvent<[InElement.Input<Value>]>;\n  input(receiver: EventReceiver<[InElement.Input<Value>]>): EventSupply;\n  input(receiver?: EventReceiver<[InElement.Input<Value>]>): AfterEvent<[InElement.Input<Value>]> | EventSupply {\n    return (this.input = afterSent<[InElement.Input<Value>]>(\n        this._input.on().thru(asis), // remove the second parameter\n        () => [{ value: this.it }],\n    ).F)(receiver);\n  }\n\n  on(): OnEvent<[Value, Value]>;\n  on(receiver: EventReceiver<[Value, Value]>): EventSupply;\n  on(receiver?: EventReceiver<[Value, Value]>): OnEvent<[Value, Value]> | EventSupply {\n    return (this.on = this._input.on().thru(\n        ({ value: newValue }, oldValue) => newValue === oldValue ? nextSkip() : nextArgs(newValue, oldValue),\n    ).F)(receiver);\n  }\n\n  /**\n   * Enables reaction to input input.\n   *\n   * By default listens for `input` and `change` events.\n   *\n   * @param update  Updates current value by user input and sends update event. This function is to be called by\n   * input event listeners.\n   */\n  protected listenForInput(update: (input: InElement.Input<Value>) => void): void {\n\n    const onInput = (event: Event): void => update({ value: this.it, event });\n\n    this.events.on('input').to(onInput);\n    this.events.on('change').to(onInput);\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/input-aspects\n */\nimport { noop } from '@proc7ts/call-thru';\nimport {\n  EventReceiver,\n  EventSupply,\n  EventSupply__symbol,\n  eventSupplyOf,\n  OnEvent,\n  trackValue,\n  ValueTracker,\n} from '@proc7ts/fun-events';\nimport { InAspect, InAspect__symbol } from '../../aspect';\nimport { inAspectSameOrBuild } from '../../aspect.impl';\nimport { InControl } from '../../control';\nimport { InElement } from '../../element.control';\n\n/**\n * @internal\n */\nconst InFocus__aspect: InAspect<InFocus | null> = {\n\n  applyTo<Value>(control: InControl<Value>): InAspect.Applied<Value, InFocus | null> {\n    return inAspectSameOrBuild(control, InFocus, ctrl => {\n\n      const element = ctrl.aspect(InElement);\n\n      return element && new InControlFocus(element);\n    });\n  },\n\n};\n\n/**\n * Input focus aspect.\n *\n * This is a value tracker of element focus flag. Or `null` when [[InElement]] aspect is absent.\n *\n * @category Aspect\n */\nexport abstract class InFocus extends ValueTracker<boolean> {\n\n  static get [InAspect__symbol](): InAspect<InFocus | null> {\n    return InFocus__aspect;\n  }\n\n}\n\n/**\n * @internal\n */\nclass InControlFocus extends InFocus {\n\n  private readonly _it: ValueTracker<boolean>;\n\n  constructor(inElement: InElement<any>) {\n    super();\n\n    const { element, events } = inElement;\n    const owner: DocumentOrShadowRoot | null = element.getRootNode\n        ? element.getRootNode() as any\n        : element.ownerDocument;\n\n    this._it = trackValue(!!owner && owner.activeElement === element);\n    eventSupplyOf(this).needs(inElement);\n\n    events.on('focus').to(() => this._it.it = true);\n    events.on('blur').to(() => this._it.it = false);\n    this.on({\n      receive(ctx, newValue) {\n        ctx.onRecurrent(noop);\n        if (newValue) {\n          element.focus();\n        } else {\n          element.blur();\n        }\n      },\n    });\n  }\n\n  get [EventSupply__symbol](): EventSupply {\n    return eventSupplyOf(this._it);\n  }\n\n  get it(): boolean {\n    return this._it.it;\n  }\n\n  set it(value: boolean) {\n    this._it.it = value;\n  }\n\n  on(): OnEvent<[boolean, boolean]>;\n  on(receiver: EventReceiver<[boolean, boolean]>): EventSupply;\n  on(receiver?: EventReceiver<[boolean, boolean]>): OnEvent<[boolean, boolean]> | EventSupply {\n    return (this.on = this._it.on().F)(receiver);\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @proc7ts/input-aspects\n */\nimport { InAspect, InAspect__symbol } from '../../aspect';\nimport { inAspectNull, inAspectValue } from '../../aspect.impl';\nimport { InControl } from '../../control';\nimport { InConverter } from '../../converter';\nimport { InElement } from '../../element.control';\n\n/**\n * An input aspect representing DOM element to apply styles to.\n *\n * This is a HTML element for input element control, and `null` for everything else by default.\n *\n * @category Aspect\n */\nexport type InStyledElement = Element;\n\n/**\n * @internal\n */\nconst InStyledElement__aspect: InAspect<InStyledElement | null> = {\n\n  applyTo(control: InControl<any>): InAspect.Applied<any, InStyledElement | null> {\n\n    const element = control.aspect(InElement);\n\n    return element ? inAspectValue(element.element) : inAspectNull;\n  },\n\n};\n\n/**\n * @category Aspect\n */\nexport const InStyledElement = {\n\n  get [InAspect__symbol]() {\n    return InStyledElement__aspect;\n  },\n\n  /**\n   * Creates input control aspect converter that assigns the given styled element to converted control.\n   *\n   * This is useful for controls without elements (such as input groups), or can be used to apply CSS classes to input\n   * element wrappers (such as `form-group` in Bootstrap).\n   *\n   * @param element  A DOM element to apply styles to. Styles won't be applied when `null` or undefined.\n   *\n   * @returns Input control aspect converter.\n   */\n  to<Value>(element: InStyledElement | null = null): InConverter.Aspect<any, Value> {\n    return {\n      applyAspect<Instance, Kind extends InAspect.Application.Kind>(\n          aspect: InAspect<any, any>,\n      ): InAspect.Applied<any, InAspect.Application.Instance<Instance, Value, Kind>> | undefined {\n        return aspect === InStyledElement__aspect\n            ? inAspectValue(element) as InAspect.Application.Result<Instance, Value, Kind>\n            : undefined;\n      },\n    };\n  },\n\n};\n","/**\n * @packageDocumentation\n * @module @wesib/generic/input\n */\nimport { ContextValueOpts, ContextValues } from '@proc7ts/context-values';\nimport { ContextUpKey, ContextUpRef } from '@proc7ts/context-values/updatable';\nimport { AfterEvent, EventKeeper } from '@proc7ts/fun-events';\nimport { InConverter, InNamespaceAliaser, InRenderScheduler, intoConvertedBy } from '@proc7ts/input-aspects';\nimport { DefaultNamespaceAliaser, ElementRenderScheduler } from '@wesib/wesib';\n\n/**\n * Default input aspects.\n *\n * This is an `AfterEvent` keeper of aspect converter meant to be applied to controls.\n *\n * As a bare minimum it assigns the following aspects to converted controls:\n * - `InRenderScheduler` set to `ElementRenderScheduler`,\n * - `InNamespaceAliaser` set to `DefaultNamespaceAliaser.\n *\n * More input aspect converters may be registered in context. They may override the default ones.\n */\nexport type DefaultInAspects = AfterEvent<[InConverter.Aspect<any, any>]>;\n\n/**\n * @internal\n */\nclass DefaultInAspectsKey\n    extends ContextUpKey<AfterEvent<[InConverter.Aspect<any, any>]>, InConverter.Aspect<any, any>> {\n\n  get upKey(): this {\n    return this;\n  }\n\n  constructor() {\n    super('default-in-aspects');\n  }\n\n  grow<Ctx extends ContextValues>(\n      opts: ContextValueOpts<\n          Ctx,\n          AfterEvent<[InConverter.Aspect<any, any>]>,\n          EventKeeper<InConverter.Aspect<any, any>[]> | InConverter.Aspect<any, any>,\n          AfterEvent<InConverter.Aspect<any, any>[]>>,\n  ): AfterEvent<[InConverter.Aspect.Factory<any, any>]> {\n\n    const nsAlias = opts.context.get(DefaultNamespaceAliaser);\n    const scheduler = opts.context.get(ElementRenderScheduler);\n\n    return opts.seed.keepThru(\n        (...fns) => intoConvertedBy(\n            ...fns,\n            InRenderScheduler.to(scheduler),\n            InNamespaceAliaser.to(nsAlias),\n        ),\n    );\n  }\n\n}\n\n/**\n * A key of component context containing default input aspects.\n */\nexport const DefaultInAspects: ContextUpRef<DefaultInAspects, InConverter.Aspect<any, any>> = (\n    /*#__PURE__*/ new DefaultInAspectsKey()\n);\n","import { NamespaceDef } from '@proc7ts/namespace-aliaser';\n\nexport const Examples__NS = new NamespaceDef(\n    'https://wesib.github.io/examples',\n    'bex',\n    'wesib-examples',\n);\n","import { ComponentTreeSupport } from '@wesib/generic';\nimport { ThemeSupport } from '@wesib/generic/styp';\nimport { Feature } from '@wesib/wesib';\nimport { InErrorComponent } from './in-error.component';\n\n@Feature({\n  needs: [\n    ComponentTreeSupport,\n    InErrorComponent,\n    ThemeSupport,\n  ],\n})\nexport class InputSupport {\n}\n","import { ComponentTreeSupport, PageLoadSupport } from '@wesib/generic';\nimport { StyleProducerSupport, ThemeSupport } from '@wesib/generic/styp';\nimport { Feature } from '@wesib/wesib';\nimport { ContainerComponent } from './container.component';\n\n@Feature({\n  needs: [\n    ContainerComponent,\n    ComponentTreeSupport,\n    PageLoadSupport,\n    StyleProducerSupport,\n    ThemeSupport,\n  ],\n})\nexport class LayoutSupportFeature {\n}\n","import { produceBasicStyle, stypDomFormat } from '@proc7ts/style-producer';\nimport { ComponentStypDomFormat, ComponentStypFormat, Theme, ThemeSupport } from '@wesib/generic/styp';\nimport { Feature } from '@wesib/wesib';\nimport { BodyStyle } from './body.style';\n\n@Feature({\n  needs: ThemeSupport,\n  setup(setup) {\n    setup.perComponent({ a: ComponentStypFormat, as: ComponentStypDomFormat });\n  },\n  init(context) {\n    context.whenReady(() => {\n      produceBasicStyle(context.get(Theme).style(BodyStyle), stypDomFormat());\n    });\n  },\n})\nexport class BodyStyleSupport {}\n\n","import { Feature } from '@wesib/wesib';\nimport { InputSupport } from './input/input-support.feature';\nimport { LayoutSupportFeature } from './layout';\nimport { BodyStyleSupport } from './theme/body-style-support.feature';\n\n@Feature({\n  needs: [\n    BodyStyleSupport,\n    InputSupport,\n    LayoutSupportFeature,\n  ],\n})\nexport class AppFeature {}\n","import { bootstrapComponents } from '@wesib/wesib';\nimport { AppFeature } from './app.feature';\n\nexport * from './app.feature';\nexport * from './examples.ns';\nexport * from './input';\nexport * from './theme';\n\nexport const examplesContext = bootstrapComponents(AppFeature);\n"],"names":["asis","value","noop","isPresent","valueProvider","lazyValue","provider","get","valuesProvider","values","nextCall","callNext","result","NextCall__symbol","chain","fn","isNextCall","target","nextArg","arg","pass","nextArgs","args","call","nextEach","elements","element","itsIterator","iterable","Symbol","iterator","itsIterable","makeIt","iterate","reverse","reversible","itsEach","action","itsEmpty","next","done","itsFirst","itsReduction","reducer","initialValue","reduced","filterIt","source","test","flatMapIt","convert","mapIt","overArray","array","i","length","len","reverseArray","overNone","noneIterable","overKeys","Reflect","ownKeys","overEntries","keys","mapToEntries","_keys","key","contextValueSpec","spec","byProvider","withDeps","a","by","deps","with","context","map","dep","isConstant","is","viaAlias","via","ctx","asInstance","selfInstance","Object","as","toAsInstance","Type","DepType","TypeError","iterativeSeed","providers","bind","undefined","combineSimpleSeeds","seeds","seed","isEventKeeper","AfterEvent__symbol","eventSupplyOf","peer","EventSupply__symbol","eventSupply","off","EventSupply","eventReceiver","receiver","generic","supply","receive","_context","event","this","isOff","whenOff","receiveByEach","receivers","send","sendNonRecurrent","actualReceivers","received","recurrent","push","processEvent","shift","recurrentReceivers","idx","onRecurrent","recurrentReceiver","recurrentEvent","isEventSender","OnEvent__symbol","noEventSupply","noSupply","sendEventsTo","once","onSource","to","share","sharedSupply","initialEvents","shared","EventNotifier","size","_ctx","needs","on","reason","dispatch","forEach","thru","passes","chains","index","chainSupply","lastPass","existing","prevSupply","entry","handleResult","skip","onEvent","sender","callResult","parentSupply","nextChain","firstChain","tillOff","required","dependentSupply","cuts","neverReceive","onEventBy","register","OnEvent","noEvent","Error","afterEventBy","fallback","AfterEvent","afterSent","afterSupplied","supplier","afterAll","sources","afterEach","registerReceiver","latestEvent","afterThe","nextAfterEvent","keeper","onSupplied","onAny","suppliers","remained","removeSupplier","onNever","onAsync","from","sourceSupply","numInProcess","thru_","numSent","numReceived","lastIndex","promise","Promise","resolve","then","onAnyAsync","toSend","splice","onPromise","e","alwaysReceiveValue","catch","statePath","path","Array","isArray","trackValue","initial","TrackedValue","isQualifiedName","NamespaceDef","isNameAndNamespace","compareNames","first","second","compareStrings","url","firstName","firstUrl","newNamespaceAliaser","aliasesByNs","Map","nsNumPerAlias","ns","found","mostPreferred","alias","nsNumRegistered","aliases","preferred","ids","set","generated","onDomEventBy","OnDomEvent","upSrcKeepers","providersTracker","read","keepThru","prov","toUpSrcKeeper","flatUpSources","src","_typeof","isUpSrcKeeper","nodeWindow","node","ownerDocument","defaultView","customRenderScheduler","options","scheduleOptions","config","RenderScheduleConfig","queueRef","RenderQ","newQueue","ref","enqueued","shot","lastQueue","executed","nextQueue","activeQueue","queue","nextEnqueued","add","execution","postpone","postponed","error","schedule","newRenderSchedule","defaultRenderScheduler","bootstrapDefault","provide","bootstrapContext","BootstrapContext","superClassOf","type","satisfying","prototype","getPrototypeOf","superType","constructor","decoratePropertyAccessor","propertyKey","desc","updateDescriptor","isField","updatedDesc","writable","isPropertyAccessorDescriptor","value__symbol","accessorDesc","newValue","toPropertyAccessorDescriptor","fieldKey","String","configurable","enumerable","fieldAccessorDescriptor","defineProperty","mergeFunctions","merge","_f","s","apply","isElement","nodeType","Node","ELEMENT_NODE","Feature","defs","FeatureDef","define","Component","decorator","ComponentDef","def","ComponentDef__symbol","all","updateComponentState","oldValue","StateUpdater","ComponentProperty","decorateWith","AnonymousComponentProperty__symbol","readable","component","componentDef","By","proto","descriptor","getValue","setValue","notReadableAccessor","notWritableAccessor","updated","With","access","As","Bind","binder","accessor__symbol","accessor","postDefSetup","componentType","hasOwnProperty","PostDefSetup__symbol","tracker","emitter","EventEmitter","setup","nextSkip","superPostDefSetup","it","toDefaultRenderScheduler","scheduler","window","BootstrapWindow","defaultElementAdapter","ComponentContext__symbol","definitionContextOf","DefinitionContext__symbol","createCustomElements","bsContext","customElements","nsAlias","DefaultNamespaceAliaser","componentTypeOrName","elementType","html__naming","name","elementDef","extend","extends","componentResolver","whenDefined","CustomElements","ComponentResolver__symbol","PromiseResolver","componentDestroyed","newElementBuilder","definitions","components","buildElement","definitionContext","DefinitionContext$","_define","preferredFeatureClause","clauses","clause","loadFeature","origin","stageId","loadFeatureDeps","keepThru_","request","feature","FeatureKey","of","loader","stage","ownLoader","FeatureLoader","ownSource","rcv","unload","lastLoader","ArraySet","presentFeatureDeps","bootstrapFeature","initBootstrap","bootstrapContextRegistry","WhenDefined__symbol","whenReady","_this75","F","whenDown","status","FeatureRequester","info","ready","_this76","ldr","down","init","unuse","FeatureRef","complete","attributePathTo","AttributePath__root","attributeStateUpdate","updateState","update","updateAttributeState","ComponentContext","property2attributeName","c","substring","toLowerCase","observedAttributes","attrs","alreadyObserved","addAll","items","attributeChangedCallback","prevCallback","attrChanged","Attributes","AttributesSupport","item","perDefinition","AttributeDescriptor","change","entries","newElementRenderScheduler","ElementRenderShot__root","scheduleSeq","renderCtl","ElementRenderCtl","state","ComponentState","opts","recentShot","renderer","renderBy","RenderDef","prevShot","attachShadow","shadowRoot","shadowRootOf","whenConnected","dispatchEvent","ShadowDomEvent","bubbles","hthvItem","$","n","t","v","x","p","pl","addParam","param","prev","angleBracketsParser","input","out","delimiterOf","nextInItem","d","parseDateTime","datePattern","quotedStringParser","unquoted","itemParser","named","tagged","extra","parseQuotedString","parseAngleBrackets","parseExtra","parseNone","tag","extraItem","nextInComment","spacesParser","start","paramParser","skipSpaces","parseItem","buildParserConfig","delimit","delimitConfig","defaultDelimit","newHthvParser","parserConfig","defaultParserConfig","parseItemDelimit","itemDelimitParser","parseParam","parseComment","comments","commentParserOpts","commentParser","commentParserConfig","headerValue","hthvQuote","string","escaped","quote","delimiter","defaultFetchAgent","combineFetchAgents","agents","fetch","agentIdx","agentRequest","agent","nextRequest","newHttpFetch","HttpFetchAgent","Request","responseEmitter","abortController","AbortController","signal","HttpFetchAborted","abort","response","customSignal","DomEventDispatcher","aborted","findParentContext","root","BootstrapRoot","immediate","parent","parentNode","elementNodeList","selectorOrType","nodeOf","selector","deep","updates","WATCH_DEEP","cache","Set","overNodes","overNodeSubtree","selected","refresh","added","addEventListener","has","observer","ElementObserver","onUpdate","firstReceiver","observe","disconnect","clear","_this82","track","initialEmitter","_this83","list","ElementNodeList","sel","querySelectorAll","children","matches","select","mutations","removed","mutation","removedNodes","removeNode","addedNodes","addNode","delete","nodes","childNodes","elementNodeOf","optional","ElementNode__symbol","ElementNode$","getHashURL","URL","hash","defaultNavigationAgent","_when","_from","extractNavData","data","NAV_DATA_KEY","createNavigation","document","history","dispatcher","navHistory","NavHistory","NavigationAgent","nav","nextEntry","popState","EnterPageEvent","when","page","hashChange","listener","onEnter","onLeave","onStay","delta","go","navigate","toURL","withParam","applyParams","put","open","replace","pretend","targetOrCallback","callback","navTarget","navTargetOf","fromEntry","toEntry","newEntry","applyAgent","stay","Navigation","baseURI","whenLeave","doNavigate","prepared","prepare","leavePage","LeavePageEvent","StayOnPageEvent","transfer","navigated","title","ActivateNavLink","pick","ComponentTreeSupport","NavigationSupport","defContext","whenComponent","activate","activateNavLink","weigh","navLinkWeight","navigation","componentNode","ComponentNode","active","consume","weights","selectActiveNavLinks","newActive","activeLink","maxWeight","weight","defaultNavLinkWeight","href","getAttribute","calcNavLinkWeight","linkURL","pageURL","linkDir","navLinkPath2dir","pageDir","searchParamWeight","navLinkSearchParamsWeight","pathname","startsWith","endsWith","linkParams","searchParams","pageParams","_value","isIgnoredSearchParam","pageValues","getAll","every","linkValue","ElementRenderScheduler","defaultActiveNavLinkClass","activeClass","css__naming","lastSupply","NavLinkRenderSchedule__symbol","makeActive","classList","remove","assignClass","HandleNavLinks","handle","defaultHandleNavLinks","events","eventType","defaultNavLinkHref","getHref","preventDefault","importNode","beforeOrImport","before","importContent","importNodeContent","doc","elementClone","createElement","tagName","getAttributeNames","attr","setAttribute","insertBefore","nodeClone","cachingPageLoader","tracked","pageUrl","sup","onLoad","trackSupply","resp","num","requested","newPageLoader","httpFetch","HttpFetch","modifyURL","PageLoadURLModifier","PageLoadAgent","parser","DOMParser","mode","credentials","headers","Headers","Accept","fetchRequest","fragments","PageLoadRequestsParam","header","fragment","id","requestPageFragments","text","batch","ok","parsePageDocument","parseFromString","hthvParse","head","base","querySelector","newBase","appendChild","appRev","pageScriptsAgent","allScripts","externalScripts","scripts","script","pageStyleAgent","newStyles","oldStyles","oldStylesByHref","firstOldStyle","link","newStyle","oldStyle","nextSibling","style","removeChild","pageTitleAgent","getElementsByTagName","textContent","IncludePage","onResponse","contentKey","defaultPageContentKey","PageLoadSupport","StateSupport","lastPageURL","detectFragment","range","createRange","selectNodeContents","contentRoot","PageLoadParam","newPageURL","deleteContents","createDocumentFragment","insertNode","handleResponse","cssescId","cssesc","isIdentifier","isReadonlyArray","isNotEmptyArray","stypValuesEqual","intCoord","max","coord","Math","round","min","hueToRgb","q","newT","mixStypColors","color1","color2","w","rgba1","rgb","rgba2","aDiff","w1","w2","StypRGB","r","g","b","stypSplitPriority","priority","IMPORTANT_CSS_SUFFIX","trim","stypDimension","val","unit","StypDimension","dim","zero","prioritize","stypAddSub","left","op","right","StypAddSub","stypMul","StypMulDiv","stypDiv","unitlessZeroDimensionKind","pt","noPt","dimension","StypDimension_","isStypNumeric","toDim","ZeroByPriority","usual","noStypPropertiesSpec","noStypProperties","stypPropertiesBySpec","rule","preventDuplicates","propertiesKeeper","senderOrProperties","propertiesMap","properties","stored","propertyEntries","sentry","propertiesEqual","$$css","mergeStypProperties","addendum","priorityOf","addValue","addValues","isCombinator","normalizeStypSelector","normalizeKey","combinator","normalized","prevCombinator","part","normalizeStypSelectorPart","classes","filter","sort","normalizeClasses","u","subs","isSubSelectorsArray","normalizeSubSelector","normalizeSubSelectors","isPseudoSubSelector","normalizeQualifiers","sub","prefix","params","qualifiers","exposeQualifier","qualifier","noQualifiers","lastExposed","eqIdx","indexOf","exposed","split","stypRuleKeyAndTail","noKeyAndTail","slice","classesMatch","query","qClass","find","mClass","namesEqual","stypSelector","stypRuleKeyText","formatStypSelector","ruleKeyTextOpts","defaultFormat","qualify","format","reduce","formatItem","hasProperties","id__naming","className","subFormat","attrName","attrOp","attrVal","attrFlag","quotes","wrap","formatSubSelector","xmlNs","qualifyElement","buildAtSelector","names","customQuery","addQuery","onlyAtProperties","isAtEntry","extractPartAtSelectors","atSelectors","restQualifies","addAtSelector","colonIdx","atSelector","prevQuery","renderImport","sheet","IMPORT_PREFIX","StypURL","css","addGlobal","renderDefaultNamespace","renderNamespacePrefix","NS_PREFIX","stypRenderProperties","producer","addStyle","notCustomProperty","k","hyphenateStyleName","render","writer","stypRenderText","rendererFactory","create","isRendererFactory","order","rendererSpec","compareRenderers","firstOrder","secondOrder","stypRenderScheduler","removeStyleElement","stypTextFormat","pretty","defaultPrettyPrint","immediateRenderScheduler","onSheet","formatter","StypTextFormatter$","compactStypTextFormatter","idSeq","addSheet","StypSheetTextWriter","stypDomFormat","textFormat","produceBasicStyle","rules","rootSelector","selectorFormat","factories","addRenderers","renderers","addRenderer","factory","stypRenderFactories","renderSupply","renderRule","trackRules","styleProducer","production","_selector","isGroup","selectorText","stypSelectorText","specs","renderAt","nextRenderer","nextIndex","nextProducer","rendererForRule","reader","ruleSelector","lastSheet","produceStyle","stypRenderAtRules","stypRenderXmlNs","stypRenderGlobals","grabRules","stypQuery","Rules","stypSelectorMatches","allRules","iterateAllRules","nested","extendRule","targetSelector","sendUpdate","tail","_spec","oldSpec","empty","extendSpec","keyText","_rule","newNested","StypRule$","_add","mappingsKeeper","mappings","flattenProperties","stypRules","rulesByList","rulesFromSource","noStypRules","_rules","rulesByValue","evalRules","lazyStypRules","lazyRulesFromSource","ruleSet","reportExistingRules","lazyRules","StypRuleList","StypRule","self","resolution","asyncRules","assignElementId","contextValues","aliaser","ElementDef","local","uniqueClassSeq","qualified","ElementIdClass__NS","extractHostSelector","restParts","host","extendHostSelector","rest","componentStypDomFormatConfig","defaultStypRenderScheduler","ProduceStyle","BasicStyleProducerSupport","ComponentStypFormat","produce","combineStyles","theme","deltaSetDeltaReceiver","inAspectSameOrBuild","control","aspectKey","build","instance","convertTo","attachTo","aspect","inAspectSameOrNull","inAspectValue","intoConvertedBy","valueOrAspectConverter","noopInConverter","converter","inConverter","converters","aspectConverters","conversion","applyAspect","acf","cv","isInAspectConversion","intoConvertedAspects","aspects","noopInConversion","isAspectKey","InAspect__symbol","parentsInMode","parents","parentList","parentModes","InMode","mergeInModes","modes","inModeValue","ro","controlEntryToGroupEntry","readInGroupData","controls","cs","model","hasData","csData","InData","controlsData","controlData","requireNothing","_requireNothing","inValidator","validator","messages","validate","simpleInValidator","requireAll","validators","numValidators","InValidationMessages","inValidationResult","InValidationErrors","noInValidationErrors","nestedInValidations","InValidation","combineInValidationResults","results","elementInStatusFlags","InElement","hasFocus","InFocus","edited","flags","touched","updateInStatusFlags","containerInStatusFlags","container","snapshot","InStatus","inControlStatuses","combineInStatusFlags","isUnsubscribeReason","UnsubscribeReason__symbol","mergeInCssClassesMap","flag","controlSchedule","InRenderScheduler","defaultInCssHasError","errors","inCssInfo","InputAspects__NS","cls","md","vl","st","valid","inputFromControl","HierarchyContext","InputFromControl","mediaStyle","$layoutBreakpoint","LinkStyle","settings","ThemeSettings","linkStyle","textDecoration","color","$color","fontWeight","$linkFontWeight","DefaultStyle","defaultStyle","$fontFace","$fontSize","$lineHeight","$fontWeight","font","BodyStyle","height","margin","padding","bodyStyle","backgroundColor","$bgColor","formMappings","global","hsl","l","$roBgColor","$errorFontSize","mul","$borderColor","$marginV","div","$marginH","$paddingV","$paddingH","$borderW","StypLength","InErrorStyle","FormThemeSettings","borderW","StypLengthPt","InError__qualifier","display","fontSize","borderLeft","paddingLeft","hasError__cssClass","mainStyle","flex","NavStyle","Nav__qualifier","navStyle","sts","background","navLinkBackground","navLinkStyle","Wesib__NS","activeNavLinkStyle","border","outline","ContainerStyle","mainName","Container__qualifier","flexFlow","alignItems","alignContent","inStyle","boxShadow","boxSizing","width","readonlyInStyle","focusedInStyle","outlineColor","invalidInStyle","parseAttributeDescriptor","removeAttribute","defaultShadowContentDef","perComponent","ShadowContentRoot","ShadowRootBuilder","ContentRoot","or","ShadowDomSupport","InGroupControl","AbstractInElement","requirePresent","missing","formSettings","outlineStyle","ContextKey__symbol","ContextSeedKey","seeder","isEmpty","byDefault","ContextKey","ContextKeyError","message","ContextValues","ContextRegistry","_initial","seedKey","_seeding","_seeds","seeding","_this2","newValues","_nonCachedValues","registry","Values","cached","growValue","constructed","defaultUsed","findSeed","valueOpts","defaultProvider","defaultValue","grow","other","_this3","combine","IterativeContextSeeder","_providers","_this4","IterativeSeedKey","MultiContextKey","defaultSources","_this7","IterativeContextKey","SimpleContextSeeder","unshift","_this8","lastIndexOf","makeSeed","SimpleSeedKey","SingleContextKey","_this11","_off","_this12","_whenOff","another","_this13","rcs","_rcs","_this14","_or","dest","reported","_on","_this16","_last","_rcn","onCutOff","reject","consumerSupply","PathEntry","_drop","_this18","_nested","_this19","_dropIfEmpty","dontCreateMissing","created","_this20","_remove","Trackers","_entry","_root","nest","SubStateTracker","_trackers","_path","_this21","_this22","StateTracker","_tracker","subTracker","_it","ValueTracker","_this23","valueReceiver","recurrentValue","extract","acceptValuesFrom","_this24","byNone","_by","third","syncWithTracker","syncTrackers","_this27","extractTracker","tracker1","tracker2","supply1","supply2","old","default__naming","DefaultNaming","Naming","naming","applyAlias","capture","_this28","instead","_this29","just","_this30","stopPropagation","last","_this31","stopImmediatePropagation","passive","_this32","domEventContext","_target","_this33","domListener","removeEventListener","ContextUpSeeder","_this34","concat","ContextSeedUpKey","ContextUpKeyUpKey","_key","FnContextKey","upKey","_this37","createUpKey","arguments","delegated","ContextUpKey","SingleContextUpKey","backup","_this39","win","console","RenderQ__symbol","doSchedule","_this40","reset","suspend","exec","post","resume","pull","_this41","scheduled","RenderQueue","shots","animationRenderQueues","WeakMap","execute","pop","task","requestAnimationFrame","replacement","BootstrapContext__key","_this42","MetaAccessor","symbol","ownDef","own","superDef","prevMeta","_this43","meta","newMeta","_this44","_resolve","_reject","FeatureDef__symbol","featureMeta","noFeatureDef","featureType","for","FeatureContext__key","FeatureContext","load","FeatureNeedsError","need","componentMeta","noComponentDef","ComponentContext__key","ComponentEventDispatcher__key","ComponentEvent","Event","ComponentMount","BootstrapContextRegistry__key","BootstrapContextRegistry","_this47","ComponentContextRegistry__key","ComponentContextRegistry","DefinitionContextRegistry__key","DefinitionContextRegistry","body","DefaultRenderScheduler","_this48","ElementAdapter","_this49","adapters","combined","adapter","DefaultElementObserver","mount","mountOf","checkConnected","childList","MutationObserver","CustomElements__key","DefinitionContext__key","elementExtend","HTMLElement","DefinitionContext","mountTo","connect","ComponentContext$","_definitionContext","_newComponentRegistry","_status","_this52","whenSettled","_this53","_this54","_component","_whenComponent","lastRev","readNotifier","notifier","_this55","_","_elementBuilder","prevContext","newComponent","_this56","ComponentMount$","_connect","el","connected","contains","destroy","MountComponentContext$","CustomComponentContext$","WhenComponent","currentRev","onCreated","receiverRev","eventContext","componentContext","notifiedRev","recurrentContext","rev","_bsContext","_this60","_ready","_def","definitionContextRegistry","seedIn","_perTypeRegistry","whenReady$","whenComponent$","definitionSetup","_whenReady","_createComponent","_created","settle","append","_elementType","ElementBuilder","doNotAdd","ComponentRegistry","_this61","_definitionQueue","definition","_this62","FeatureContext$","_loader","unloads","adder","_componentRegistry","bs","_this64","onDefinition","_unloader","onComponent","_this65","_this66","_this67","unloader","onPostDefSetup","FeatureKey__symbol","_this68","_down","_stage","SetupFeatureStage","lastStage","prevStage","stop","after","perDep","InitFeatureStage","FeatureStage","_stop","_this69","ActiveFeatureStage","FeatureRequest","_requester","_revoke","featureDef","requester","isClause","_revokeBy","_this72","_uses","revoke","FeatureRequester__key","_map","reuse","_this73","AttributeRegistry__key","AttributeRegistry","attributeFilter","records","record","attributeName","attributes","attributeOldValue","_attrs","AttributesSupport__feature","ComponentState__key","StateSupport__feature","AttributeTracker","_name","DomPropertyPath__root","extension","ElementRenderCtl$","stateTracker","startRendering","scheduleRenderer","_this78","settled","cancelRenderer","immediateSchedule","_renders","renderNow","renderElement","newRenderer","ShadowDomSupport__feature","FetchAgentKey","_this79","HierarchyRoot","HierarchyUpdates","issue","HierarchyUpdates__key","hierarchyRoot","HierarchyContext__key","HierarchyContext$","_this80","_parent","up","_registry","upper","_this81","parentHierarchy","rootSupply","updateParent","parentCtx","newParent","enclosing","subtree","AttributesObserver","_bs","_emitter","_this84","_emitters","reconnect","_observer","_update","takeRecords","_this85","Observer","_this86","observeSupply","_this88","_updates","NodeAttributes","PropertyTracker","_element","_this90","NodeProperties","_props","prop","_bind","_this91","selectNodes","ComponentTreeSupport__feature","PageParam__symbol","PageParam","_page","_this92","combinedAgent","agentTo","nextURL","nextTitle","nextData","visited","current","Navigation__key","PageParamContext","NavHistory__key","_document","_location","location","_history","_uid","btoa","random","_entries","enter","_this93","replaceState","_historyState","PageEntry","_lastId","pushState","_enter","_forget","leave","_this94","_changeHash","uid","pageId","existingEntry","oldEntry","forget","_params","newHandle","_newContext","_init","transferred","at","_this96","cancelable","NavigationSupport__feature","PageLoadAbortError","requests","PageLoadRequests","_navigation","pageSupply","loadSupply","_transfer","responseReceiver","getElementById","onFragment","req","_this100","PageLoader","PageCacheBuster__key","PageCacheBuster","urlModifier","newRev","reload","PageLoadSupport__feature","buster","coords","StypColor","StypHSL","h","StypColorStruct","StypValueStruct","hueAsFraction","StypMapper","mapped","mappedValue","mapping","mappingBy","mapper","thisDim","subtrahend","multiplier","divisor","StypNumericStruct","toFormula","negate","StypCalcBase","Zero","_byPriority","important","AtRulesRenderer","outer","extracted","extractAtSelectors","restSelector","addGroup","FIRST_RENDER_ORDER","rootRule","importIndex","nsIndex","importDelta","xmlNsDefs","declareNs","indent","nv","eol","pre","_config","StypStyleTextWriter","f","nf","substr","afterBody","AbstractStypGroupTextWriter","StypGroupTextWriter","toString","StypStyleObjectWriter","setProperty","cssText","StypSheetObjectWriter","cssRules","deleteRule","StypGroupObjectWriter","ruleText","insertRule","StypRuleHierarchy","_list","ruleMatches","_buildList","_filterArray","_this112","_ruleSet","AllRules","_added","_get","propertiesSupply","_this114","_this115","NestedRules","_all","_byKey","_this117","builder","_this119","_outer","outerSelector","stypOuterSelector","StypRuleRef$","ms","ps","watch","_mappings","_properties","RefStypRule","StypRuleRefs","refs","fromAll","referrers","ComponentStyleProducer","ComponentStypRenderer","ElementIdClass","ComponentStypFormat__symbol","ComponentStypDomFormat","newProducer","componentSupply","_this121","hostSelector","shadowRenderer","noShadowRenderer","ComponentStypObjectFormat","createTextNode","stypObjectFormat","BasicStyleProducerSupport__feature","StyleProducerSupport__feature","StyleProducerSupport","Theme__key","Theme","referrer","ThemeFactory__key","ThemeFactory","ThemeStyle","isId","prevProvider","hasId","byId","_styles","StypRule_","styles","addStyleRules","Theme_","ThemeFactory_","ThemeSupport__feature","newTheme","ThemeSupport","DeltaSet","_removed","_this126","_this127","inAspectNull","InNamespaceAliaser__aspect","applyTo","InNamespaceAliaser","InRenderScheduler__aspect","InControl","_aspect","aspectKeyOrSetup","aspectSetup","and","InConverted","_aspects","applied","_applyAspect","_supply","backward","convertAspect","_this129","prevValue","prevRev","InSameValueControl","_control","InContainer__aspect","InContainer","AbstractInControl","_aspectConversion","InContainerControls","InParents__aspect","InControlParents","_this132","existingSupply","_this133","allParents","_this134","InParents","InElement__aspect","InMode__aspect","ctrl","InControlMode","OwnModeTracker","initialInMode","DerivedInModes","_this136","_this137","_this138","derive","InParentsAspect","applyInMode","derived","_derived","lastUpdate","InData__aspect","InGroup__aspect","InGroup","InGroupControls","inControlReplacedReason","InGroupSnapshot","InGroupMap","_controls","replaced","modify","_this139","_shot","_this140","InGroupControlControls","_group","withValues","_this142","keyOrControls","newControl","group","_this143","newModel","applyControlsToModel","_model","_this144","dontRemove","validatorMessages","_messages","resultSupply","validatorSupply","InValidation__aspect","validation","InControlValidation","hasBut","nonEmpty","code","_this145","_byCode","codes","some","nestedInValidationMessages","_set","_this147","doUpdate","correction","_input","listenForInput","_this148","onInput","_this149","InFocus__aspect","InControlFocus","inElement","owner","getRootNode","activeElement","_this150","focus","blur","InStatus__aspect","InContainerStatus","InControlStatus","defaultInStatusFlags","_this151","_flags","_container","markEdited","markTouched","InStyledElement__aspect","InStyledElement","InCssClasses__aspect","InControlCssClasses","InCssClasses","_this153","_sources","_this154","classesSent","redelta","undelta","inSupply","classesSupply","_this155","updateClasses","_schedule","defaultInCssErrorMarks","DefaultInAspects","fns","Examples__NS","InErrorComponent","__decorate","trackAttribute","cssClasses","hasError","marks","mark","inCssError","converted","usageSupply","InputSupport","MainComponent","NavComponent","_theme","ContainerComponent","LayoutSupportFeature","BodyStyleSupport","AppFeature","features","bootstrapComponents"],"mappings":"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"}