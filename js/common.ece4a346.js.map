{"version":3,"file":"common.ece4a346.js","sources":["../../../../proc7ts/primitives/src/array/array-of-elements.ts","../../../../proc7ts/primitives/src/value/are-the-same.ts","../../../../proc7ts/primitives/src/value/value-providers.ts","../../../../proc7ts/primitives/src/value/lazy-value.ts","../../../../proc7ts/primitives/src/value/value-recipe.ts","../../../../proc7ts/primitives/src/array/arrays-are-equal.ts","../../../../proc7ts/primitives/src/array/element-or-array.ts","../../../../proc7ts/primitives/src/array/set-of-elements.ts","../../../../proc7ts/primitives/src/class/super-class-of.ts","../../../../proc7ts/primitives/src/fn/asis.ts","../../../../proc7ts/primitives/src/fn/count-args.ts","../../../../proc7ts/primitives/src/fn/merge-functions.ts","../../../../proc7ts/primitives/src/fn/noop.ts","../../../../proc7ts/primitives/src/type/presence.ts","../../../../proc7ts/push-iterator/src/push-iterable.ts","../../../../proc7ts/push-iterator/src/base/is-push-iterable.ts","../../../../proc7ts/push-iterator/src/base/iterator-of.ts","../../../../proc7ts/push-iterator/src/base/make-push-iterable.ts","../../../../proc7ts/push-iterator/src/base/push-iterated.ts","../../../../proc7ts/push-iterator/src/base/make-push-iterator.ts","../../../../proc7ts/push-iterator/src/base/push-head.ts","../../../../proc7ts/push-iterator/src/base/iterate-over-indexed.impl.ts","../../../../proc7ts/push-iterator/src/base/iterate-over-array.impl.ts","../../../../proc7ts/push-iterator/src/construction/over-array.ts","../../../../proc7ts/push-iterator/src/consumption/its-iterated.ts","../../../../proc7ts/push-iterator/src/consumption/its-each.ts","../../../../proc7ts/push-iterator/src/consumption/its-elements.ts","../../../../proc7ts/push-iterator/src/consumption/its-empty.ts","../../../../proc7ts/push-iterator/src/consumption/its-every.ts","../../../../proc7ts/push-iterator/src/consumption/its-first.ts","../../../../proc7ts/push-iterator/src/base/raw-iterator.impl.ts","../../../../proc7ts/push-iterator/src/consumption/its-head.ts","../../../../proc7ts/push-iterator/src/consumption/its-iterator.ts","../../../../proc7ts/push-iterator/src/consumption/its-reduction.ts","../../../../proc7ts/push-iterator/src/construction/over-none.ts","../../../../proc7ts/push-iterator/src/construction/over-iterator.ts","../../../../proc7ts/push-iterator/src/construction/over-elements-of.ts","../../../../proc7ts/push-iterator/src/construction/over-iterable.ts","../../../../proc7ts/push-iterator/src/construction/over-one.ts","../../../../proc7ts/push-iterator/src/objects/over-keys.ts","../../../../proc7ts/push-iterator/src/transformation/filter-array.ts","../../../../proc7ts/push-iterator/src/transformation/iterate-over-filtered-indexed.impl.ts","../../../../proc7ts/push-iterator/src/transformation/filter-it.ts","../../../../proc7ts/push-iterator/src/transformation/flat-map-array.ts","../../../../proc7ts/push-iterator/src/transformation/iterate-over-flattened-indexed.impl.ts","../../../../proc7ts/push-iterator/src/transformation/flat-map-it.ts","../../../../proc7ts/push-iterator/src/transformation/map-it.ts","../../../../proc7ts/push-iterator/src/transformation/value-it.ts","../../../../proc7ts/push-iterator/src/objects/over-entries.ts","../../../../proc7ts/supply/src/impl/unexpected-abort.ts","../../../../proc7ts/supply/src/impl/off.ts","../../../../proc7ts/supply/src/impl/state.ts","../../../../proc7ts/supply/src/supply.ts","../../../../proc7ts/supply/src/always-supply.ts","../../../../proc7ts/supply/src/never-supply.ts","../../../../proc7ts/context-values/src/context-key-error.ts","../../../../proc7ts/context-values/src/key/context-key.ts","../../../../proc7ts/context-values/src/key/context-seed-key.ts","../../../../proc7ts/context-values/src/context-values.ts","../../../../proc7ts/context-values/src/conventional/contextual.ts","../../../../proc7ts/context-values/src/singleton/iterative-context-key.ts","../../../../proc7ts/context-values/src/singleton/multi-context-key.ts","../../../../proc7ts/context-values/src/singleton/simple-context-key.ts","../../../../proc7ts/context-values/src/singleton/single-context-key.ts","../../../../proc7ts/context-values/src/conventional/context-supply.ts","../../../../proc7ts/context-values/src/registry/context-builder.ts","../../../../proc7ts/context-values/src/registry/context-seeders.impl.ts","../../../../proc7ts/context-values/src/registry/context-value-spec.ts","../../../../proc7ts/context-values/src/registry/context-values.impl.ts","../../../../proc7ts/context-values/src/registry/context-registry.ts","../../../../frontmeans/namespace-aliaser/src/naming.ts","../../../../frontmeans/namespace-aliaser/src/namings.ts","../../../../frontmeans/namespace-aliaser/src/namespace-def.ts","../../../../frontmeans/namespace-aliaser/src/name.ts","../../../../frontmeans/namespace-aliaser/src/namespace-aliaser.ts","../../../../proc7ts/fun-events/src/base/event-keeper.ts","../../../../proc7ts/fun-events/src/base/event-receiver.ts","../../../../proc7ts/fun-events/src/base/event-notifier.impl.ts","../../../../proc7ts/fun-events/src/base/event-notifier.ts","../../../../proc7ts/fun-events/src/base/event-sender.ts","../../../../proc7ts/fun-events/src/base/no-events-error.ts","../../../../proc7ts/fun-events/src/base/send-events-to.ts","../../../../proc7ts/fun-events/src/impl/after-event.no-fallback.ts","../../../../proc7ts/fun-events/src/impl/dig-events.ts","../../../../proc7ts/fun-events/src/impl/on-event.do.ts","../../../../proc7ts/fun-events/src/impl/on-event.supplier.ts","../../../../proc7ts/fun-events/src/impl/once-event.ts","../../../../proc7ts/fun-events/src/impl/on-event.then.ts","../../../../proc7ts/fun-events/src/impl/share-events.ts","../../../../proc7ts/fun-events/src/impl/supply-events.ts","../../../../proc7ts/fun-events/src/impl/translate-events.ts","../../../../proc7ts/fun-events/src/base/impl/never-receive.ts","../../../../proc7ts/fun-events/src/on-event.ts","../../../../proc7ts/fun-events/src/after-event.ts","../../../../proc7ts/fun-events/src/keepers/after-all.ts","../../../../proc7ts/fun-events/src/keepers/after-each.ts","../../../../proc7ts/fun-events/src/keepers/after-sent.ts","../../../../proc7ts/fun-events/src/keepers/after-supplied.ts","../../../../proc7ts/fun-events/src/keepers/after-the.ts","../../../../proc7ts/fun-events/src/keepers/after-value.ts","../../../../proc7ts/fun-events/src/processors/consume-events.ts","../../../../proc7ts/fun-events/src/processors/share-after.ts","../../../../proc7ts/fun-events/src/processors/deduplicate-after.ts","../../../../proc7ts/fun-events/src/processors/dig-after.ts","../../../../proc7ts/fun-events/src/senders/event-emitter.ts","../../../../proc7ts/fun-events/src/senders/on-never.ts","../../../../proc7ts/fun-events/src/senders/on-supplied.ts","../../../../proc7ts/fun-events/src/senders/on-any.ts","../../../../proc7ts/fun-events/src/senders/on-promise.ts","../../../../proc7ts/fun-events/src/base/impl/always-receive-value.ts","../../../../proc7ts/fun-events/src/processors/share-on.ts","../../../../proc7ts/fun-events/src/processors/dig-on.ts","../../../../proc7ts/fun-events/src/processors/translate-on.ts","../../../../proc7ts/fun-events/src/processors/map-after.ts","../../../../proc7ts/fun-events/src/processors/map-on.ts","../../../../proc7ts/fun-events/src/processors/once-after.ts","../../../../proc7ts/fun-events/src/processors/once-on.ts","../../../../proc7ts/fun-events/src/processors/supply-on.ts","../../../../proc7ts/fun-events/src/processors/resolve-on-ordered.ts","../../../../proc7ts/fun-events/src/processors/resolve-on.ts","../../../../proc7ts/fun-events/src/processors/supply-after.ts","../../../../proc7ts/fun-events/src/processors/translate-after.ts","../../../../proc7ts/fun-events/src/processors/value-on.ts","../../../../proc7ts/fun-events/src/state/state-path.ts","../../../../proc7ts/fun-events/src/state/state-tracker.ts","../../../../proc7ts/fun-events/src/value/value-tracker.ts","../../../../proc7ts/fun-events/src/value/track-value.ts","../../../../proc7ts/fun-events/src/value/value-sync.ts","../../../../proc7ts/workbench/src/work-done-error.ts","../../../../proc7ts/workbench/src/workload.ts","../../../../proc7ts/workbench/src/stages/ordered-tasks.impl.ts","../../../../proc7ts/workbench/src/stages/work-ordering.impl.ts","../../../../proc7ts/workbench/src/stages/work-stage.ts","../../../../proc7ts/workbench/src/workbench.impl.ts","../../../../proc7ts/workbench/src/workbench.ts","../../../../proc7ts/context-values/src/updatable/context-destroyed.ts","../../../../proc7ts/context-values/src/updatable/context-up-key.ts","../../../../proc7ts/context-values/src/updatable/conventional/apply-context-after.ts","../../../../proc7ts/context-values/src/updatable/fn-context-key.ts","../../../../proc7ts/context-values/src/updatable/modules/context-module-dependency-error.ts","../../../../proc7ts/context-values/src/updatable/modules/context-module-usage.impl.ts","../../../../proc7ts/context-values/src/updatable/modules/context-module-key.impl.ts","../../../../proc7ts/context-values/src/updatable/modules/context-module.impl.ts","../../../../proc7ts/context-values/src/updatable/modules/context-module.ts","../../../../frontmeans/dom-events/src/on-dom-event.ts","../../../../frontmeans/dom-events/src/dom-event-dispatcher.ts","../../../../frontmeans/dom-primitives/src/node-document.ts","../../../../frontmeans/dom-primitives/src/node-types.ts","../../../../frontmeans/dom-primitives/src/node-host.ts","../../../../frontmeans/render-scheduler/src/render-schedule.ts","../../../../frontmeans/render-scheduler/src/custom-render-scheduler.ts","../../../../frontmeans/render-scheduler/src/render-queue.ts","../../../../frontmeans/render-scheduler/src/animation-render-scheduler.ts","../../../../frontmeans/render-scheduler/src/immediate-render-scheduler.ts","../../../../frontmeans/render-scheduler/src/queued-render-scheduler.ts","../../../../frontmeans/render-scheduler/src/render-scheduler.ts","../../../../frontmeans/drek/src/placement.status.impl.ts","../../../../frontmeans/drek/src/placement.ts","../../../../frontmeans/drek/src/context.ts","../../../../frontmeans/drek/src/context.impl.ts","../../../../frontmeans/drek/src/context.of-document.impl.ts","../../../../frontmeans/drek/src/context-of.ts","../../../../frontmeans/drek/src/common/css-classes.ts","../../../../frontmeans/httongue/src/escape-css.ts","../../../../frontmeans/httongue/src/escape-css-val.ts","../../../../frontmeans/httongue/src/hyphenate.impl.ts","../../../../frontmeans/httongue/src/hyphenate.ts","../../../wesib/src/boot/bootstrap-context.key.impl.ts","../../../wesib/src/boot/bootstrap-context.ts","../../../wesib/src/boot/bootstrap-default.ts","../../../wesib/src/common/decorators.ts","../../../../proc7ts/primitives/src/reflection/property-accessor-descriptor.ts","../../../../proc7ts/primitives/src/reflection/field-accessor-descriptor.ts","../../../wesib/src/common/meta-accessor.ts","../../../wesib/src/feature/init-method.impl.ts","../../../wesib/src/feature/feature-def.ts","../../../wesib/src/feature/feature.decorator.ts","../../../wesib/src/feature/feature-context.ts","../../../wesib/src/feature/loader/bootstrap-workbench.impl.ts","../../../wesib/src/component/component-def.ts","../../../wesib/src/component/component.decorator.ts","../../../wesib/src/component/component-context.key.impl.ts","../../../wesib/src/component/component-event-dispatcher.key.impl.ts","../../../wesib/src/component/content-root.ts","../../../wesib/src/component/state-updater.ts","../../../wesib/src/component/component-context.ts","../../../wesib/src/component/component-property.decorator.ts","../../../wesib/src/component/component-slot.ts","../../../wesib/src/boot/impl/bootstrap-context-registry.impl.ts","../../../wesib/src/boot/impl/component-context-registry.impl.ts","../../../wesib/src/boot/impl/definition-context-registry.impl.ts","../../../wesib/src/boot/impl/post-def-setup.impl.ts","../../../wesib/src/boot/globals/bootstrap-window.ts","../../../wesib/src/boot/globals/default-namespace-aliaser.ts","../../../wesib/src/boot/globals/default-render-scheduler.ts","../../../wesib/src/boot/globals/default-render-kit.ts","../../../wesib/src/boot/impl/definition-context.symbol.impl.ts","../../../wesib/src/component/definition/custom-elements.ts","../../../../proc7ts/primitives/src/promises/promise-resolver.ts","../../../wesib/src/component/definition/definition.context.key.impl.ts","../../../wesib/src/component/definition/element-def.ts","../../../wesib/src/component/definition/definition-context.ts","../../../wesib/src/component/definition/component.impl.ts","../../../wesib/src/boot/impl/component-status.impl.ts","../../../../proc7ts/fun-events/src/processors/filter-on.ts","../../../wesib/src/boot/impl/component-context.impl.ts","../../../wesib/src/boot/impl/custom-element.impl.ts","../../../wesib/src/boot/impl/when-component.impl.ts","../../../wesib/src/boot/impl/definition-context.impl.ts","../../../wesib/src/boot/impl/element-builder.impl.ts","../../../wesib/src/feature/loader/component-registry.impl.ts","../../../wesib/src/feature/loader/feature-context.impl.ts","../../../wesib/src/feature/loader/feature-module.impl.ts","../../../wesib/src/boot/impl/when-defined.impl.ts","../../../wesib/src/feature/attributes/attribute-path.ts","../../../wesib/src/feature/attributes/attribute-state-update.impl.ts","../../../wesib/src/feature/attributes/attribute-registry.ts","../../../wesib/src/feature/attributes/attribute.decorator.ts","../../../wesib/src/feature/attributes/attribute-descriptor.impl.ts","../../../wesib/src/feature/state/component-state.ts","../../../wesib/src/feature/attributes/track-attribute.ts","../../../wesib/src/feature/render/render-def.ts","../../../wesib/src/feature/render/element-render-ctl.impl.ts","../../../wesib/src/feature/render/element-render-ctl.ts","../../../wesib/src/feature/render/element-render-scheduler.ts","../../../wesib/src/feature/render/render.decorator.ts","../../../wesib/src/feature/shadow-dom/shadow-content-root.ts","../../../wesib/src/feature/shadow-dom/shadow-root-builder.ts","../../../wesib/src/feature/shadow-dom/attach-shadow.decorator.ts","../../../wesib/src/wesib.ns.ts","../../../../proc7ts/delta-set/src/delta-set.ts","../../../../frontmeans/input-aspects/src/applied-aspect.ts","../../../../frontmeans/input-aspects/src/aspect.ts","../../../../frontmeans/input-aspects/src/aspects/namespace-aliaser.aspect.ts","../../../../frontmeans/input-aspects/src/aspects/render-scheduler.aspect.ts","../../../../frontmeans/input-aspects/src/aspects/role.aspect.ts","../../../../frontmeans/input-aspects/src/aspect.impl.ts","../../../../frontmeans/input-aspects/src/noop-converter.impl.ts","../../../../frontmeans/input-aspects/src/converter.ts","../../../../frontmeans/input-aspects/src/builder.impl.ts","../../../../frontmeans/input-aspects/src/builder.ts","../../../../frontmeans/input-aspects/src/control.impl.ts","../../../../frontmeans/input-aspects/src/control.ts","../../../../frontmeans/input-aspects/src/containers/container.control.ts","../../../../frontmeans/input-aspects/src/containers/parents.aspect.ts","../../../../frontmeans/input-aspects/src/element.control.ts","../../../../frontmeans/input-aspects/src/data/mode.aspect.ts","../../../../frontmeans/input-aspects/src/data/data.aspect.ts","../../../../frontmeans/input-aspects/src/containers/group.control.ts","../../../../frontmeans/input-aspects/src/validation/require-nothing.validator.ts","../../../../frontmeans/input-aspects/src/validation/validator.impl.ts","../../../../frontmeans/input-aspects/src/validation/validator.ts","../../../../frontmeans/input-aspects/src/validation/validation.aspect.ts","../../../../frontmeans/input-aspects/src/validation/require-all.validator.ts","../../../../frontmeans/input-aspects/src/validation/require-present.validator.ts","../../../../frontmeans/input-aspects/src/submit.aspect.ts","../../../../frontmeans/input-aspects/src/elements/abstract-element.control.ts","../../../../frontmeans/input-aspects/src/elements/text.control.ts","../../../../frontmeans/input-aspects/src/elements/focus/focus.aspect.ts","../../../../frontmeans/input-aspects/src/elements/focus/status.aspect.ts","../../../../frontmeans/input-aspects/src/elements/forms/form-element.control.ts","../../../../frontmeans/input-aspects/src/data/modes/mode-by-form.ts","../../../../frontmeans/input-aspects/src/elements/style/styled-element.aspect.ts","../../../../frontmeans/input-aspects/src/elements/style/css-classes.aspect.ts","../../../../frontmeans/input-aspects/src/elements/style/css-error.ts","../../../../frontmeans/input-aspects/src/elements/style/css-info.ts","../../../../hatsy/http-header-value/src/impl/hthv-item.ts","../../../../hatsy/http-header-value/src/parser/add-param.ts","../../../../hatsy/http-header-value/src/parser/parse-none.ts","../../../../hatsy/http-header-value/src/parser/date-time-parser.ts","../../../../hatsy/http-header-value/src/parser/next-in-item.ts","../../../../hatsy/http-header-value/src/parser/item-parser.ts","../../../../hatsy/http-header-value/src/parser/angle-brackets-parser.ts","../../../../hatsy/http-header-value/src/parser/quoted-string-parser.ts","../../../../hatsy/http-header-value/src/parser/next-in-comment.ts","../../../../hatsy/http-header-value/src/parser/spaces-parser.ts","../../../../hatsy/http-header-value/src/parser/param-parser.ts","../../../../hatsy/http-header-value/src/parser/parser-config.ts","../../../../hatsy/http-header-value/src/hthv-parser.ts","../../../../hatsy/http-header-value/src/parser/item-delimit-parser.ts","../../../../hatsy/http-header-value/src/parser/comment-parser.ts","../../../../hatsy/http-header-value/src/hthv-parse.ts","../../../../hatsy/http-header-value/src/hthv-quote.ts","../../../generic/src/fetch/fetch-agent-key.impl.ts","../../../generic/src/fetch/http-fetch-agent.ts","../../../generic/src/fetch/http-fetch.impl.ts","../../../generic/src/fetch/http-fetch.ts","../../../generic/src/navigation/hash-url/hash-url.ts","../../../generic/src/navigation/page-param.ts","../../../generic/src/navigation/navigation-agent.ts","../../../generic/src/navigation/page-param-context.ts","../../../generic/src/navigation/nav-history.impl.ts","../../../generic/src/navigation/navigation.event.ts","../../../generic/src/navigation/navigation.ts","../../../generic/src/navigation/nav-links/nav-element.ts","../../../../frontmeans/drek/src/common/derive-context.ts","../../../generic/src/navigation/nav-links/nav-menu.ts","../../../generic/src/util/import-node.ts","../../../generic/src/navigation/page-load/caching-page-loader.impl.ts","../../../generic/src/navigation/page-load/page-load-requests.impl.ts","../../../generic/src/navigation/page-load/page-load-agent.ts","../../../generic/src/navigation/page-load/page-load-url-modifier.ts","../../../generic/src/navigation/page-load/page-loader.impl.ts","../../../generic/src/navigation/page-load/page-load-param.ts","../../../generic/src/navigation/page-load/page-cache-buster.impl.ts","../../../generic/src/navigation/page-load/page-scripts-agent.impl.ts","../../../generic/src/navigation/page-load/page-style-agent.impl.ts","../../../generic/src/navigation/page-load/page-title-agent.impl.ts","../../../generic/src/navigation/page-load/page-load-support.feature.ts","../../../generic/src/navigation/page-load/include-page.decorator.ts","../../../generic/src/shares/share-ref.ts","../../../generic/src/shares/share-registry.impl.ts","../../../generic/src/shares/share-key.impl.ts","../../../generic/src/shares/share.impl.ts","../../../generic/src/shares/shared-value.ts","../../../generic/src/shares/shared-value.impl.ts","../../../../proc7ts/context-values/src/conventional/apply-context-to.ts","../../../generic/src/shares/share.ts","../../../generic/src/shares/share-locator.ts","../../../generic/src/shares/shareable.ts","../../../generic/src/shares/share-accessor.impl.ts","../../../generic/src/shares/shared.decorator.ts","../../../generic/src/shares/target-share.ts","../../../generic/src/forms/default.preset.impl.ts","../../../generic/src/forms/form-preset.ts","../../../generic/src/forms/form-unit.ts","../../../generic/src/forms/field.ts","../../../generic/src/forms/field.share.ts","../../../generic/src/forms/form.share.ts","../../../generic/src/forms/adjacent-field.ts","../../../generic/src/forms/field.impl.ts","../../../generic/src/forms/field-name.definer.ts","../../../generic/src/forms/form.ts","../../../generic/src/forms/form-scope.ts","../../../generic/src/forms/presets/abstract-form-preset.ts","../../../generic/src/forms/scoped-form-config.ts","../../../generic/src/forms/shared-field.decorator.ts","../../../generic/src/forms/shared-form-unit.decorator.ts","../../../../frontmeans/style-producer/src/internal/types.ts","../../../../frontmeans/style-producer/src/value/value.ts","../../../../frontmeans/style-producer/src/value/color/color.ts","../../../../frontmeans/style-producer/src/value/color/mix.ts","../../../../frontmeans/style-producer/src/value/numeric/numeric.ts","../../../../frontmeans/style-producer/src/value/mapper.ts","../../../../frontmeans/style-producer/src/value/priority.ts","../../../../frontmeans/style-producer/src/internal/css.ts","../../../../frontmeans/style-producer/src/value/numeric/numeric.impl.ts","../../../../frontmeans/style-producer/src/value/numeric/zero.impl.ts","../../../../frontmeans/style-producer/src/value/numeric/dimension-kind.impl.ts","../../../../frontmeans/style-producer/src/value/unit/length.ts","../../../../frontmeans/style-producer/src/value/url.ts","../../../../frontmeans/style-producer/src/rule/properties.impl.ts","../../../../frontmeans/style-producer/src/selector/selector.impl.ts","../../../../frontmeans/style-producer/src/selector/query.ts","../../../../frontmeans/style-producer/src/selector/selector-constructor.ts","../../../../frontmeans/style-producer/src/selector/selector-text.impl.ts","../../../../frontmeans/style-producer/src/producer/renderers/at-rules.renderer.ts","../../../../frontmeans/style-producer/src/producer/renderers/renderer.impl.ts","../../../../frontmeans/style-producer/src/producer/renderers/globals.renderer.ts","../../../../frontmeans/style-producer/src/producer/renderers/properties.renderer.ts","../../../../frontmeans/style-producer/src/producer/renderers/text.renderer.ts","../../../../frontmeans/style-producer/src/producer/renderers/xml-ns.renderer.ts","../../../../frontmeans/style-producer/src/producer/formats/format.impl.ts","../../../../frontmeans/style-producer/src/producer/formats/text.format.ts","../../../../frontmeans/style-producer/src/producer/formats/dom.format.ts","../../../../frontmeans/style-producer/src/producer/formats/object.format.ts","../../../../frontmeans/style-producer/src/producer/produce-basic-style.ts","../../../../frontmeans/style-producer/src/selector/selector-text.ts","../../../../frontmeans/style-producer/src/producer/renderers/default-renderers.impl.ts","../../../../frontmeans/style-producer/src/producer/produce-style.ts","../../../../frontmeans/style-producer/src/rule/rule.ts","../../../../frontmeans/style-producer/src/rule/rules.impl.ts","../../../../frontmeans/style-producer/src/rule/rule.impl.ts","../../../../frontmeans/style-producer/src/rule/root.ts","../../../../frontmeans/style-producer/src/rule/rule-ref.ts","../../../../frontmeans/style-producer/src/rule/rule-refs.ts","../../../../frontmeans/style-producer/src/rule/rules.ts","../../../generic/src/styp/component-style-producer.ts","../../../generic/src/styp/component-styp-dom.format-config.ts","../../../generic/src/styp/component-styp-renderer.ts","../../../generic/src/styp/element-id-class.impl.ts","../../../generic/src/styp/component-styp-format.ts","../../../generic/src/styp/component-styp-dom.format.ts","../../../generic/src/styp/produce-style.decorator.ts","../../../generic/src/styp/style-producer-support.feature.ts","../../../generic/src/theme/theme-style.ts","../../../generic/src/theme/theme.ts","../../src/common/examples.ns.ts","../../src/common/theme/theme-settings.ts","../../src/common/theme/link.style.ts","../../src/common/theme/default.style.ts","../../src/common/theme/body.style.ts","../../src/common/forms/form.theme-settings.ts","../../src/common/forms/field-error.component.ts","../../src/common/forms/forms-support.feature.ts","../../../generic/src/forms/presets/form-mode.preset.ts","../../../../frontmeans/input-aspects/src/data/modes/mode-by-validity.ts","../../../generic/src/forms/presets/form-css.preset.ts","../../src/common/layout/main.component.ts","../../src/common/layout/nav.component.ts","../../../../proc7ts/push-iterator/src/transformation/map-indexed.ts","../../../generic/src/navigation/nav-links/nav-anchor.ts","../../src/common/layout/container.component.ts","../../src/common/layout/layout-support.feature.ts","../../src/common/theme/body-style-support.feature.ts","../../src/common/app.feature.ts","../../src/common/forms/form.style.ts","../../src/common/index.ts","../../../wesib/src/boot/bootstrap/bootstrap-components.ts"],"sourcesContent":["/**\n * Checks whether the given value is an array.\n *\n * @param value - Either element, array of elements, `null`, or `undefined`.\n *\n * @returns `true` if the given `value` is an array, or `false` otherwise.\n */\nexport function isArrayOfElements<T>(value: T | T[] | null | undefined): value is T[];\n\n/**\n * Checks whether the given value is a readonly array.\n *\n * @param value - Either element, readonly array of elements, `null`, or `undefined`.\n *\n * @returns `true` if the given `value` is an array, or `false` otherwise.\n */\nexport function isArrayOfElements<T>(value: T | readonly T[] | null | undefined): value is readonly T[];\n\nexport function isArrayOfElements<T>(value: T | readonly T[] | null | undefined): value is T[] {\n  return Array.isArray(value);\n}\n\n/**\n * Converts element or array of elements to array of elements.\n *\n * @param value - Either element, array of elements, `null`, or `undefined`.\n *\n * @returns The `value` itself if it is an array, empty array if `value` is `null` or `undefined`, or an array\n * containing only `value` otherwise.\n */\nexport function arrayOfElements<T>(value: T | T[] | null | undefined): T[];\n\n/**\n * Converts element or readonly array of elements to readonly array of elements.\n *\n * @param value - Either element, readonly array of elements, `null`, or `undefined`.\n *\n * @returns The `value` itself if it is an array, empty array if the `value` is `null` or `undefined`, or an array\n * containing only `value` otherwise.\n */\nexport function arrayOfElements<T>(value: T | readonly T[] | null | undefined): readonly T[];\n\nexport function arrayOfElements<T>(value: T | T[] | null | undefined): T[] {\n  return (/*#__INLINE__*/ isArrayOfElements(value)) ? value : value != null ? [value] : [];\n}\n","/**\n * Checks whether two values are the same. I.e. strictly equal to each other.\n *\n * @typeParam T - A type of values.\n * @param first - First value to compare.\n * @param second - Second value to compare.\n *\n * @returns `true` if `first === second`, or `false` otherwise.\n */\nexport function areTheSame<T>(first: T, second: T): boolean {\n  return first === second;\n}\n","/**\n * Creates a provider of the only argument.\n *\n * @param value - A value to return.\n *\n * @returns A function that returns `value`.\n */\nexport function valueProvider<T>(value: T): (this: void) => T {\n  return (): T => value;\n}\n\n/**\n * Creates a provider of arguments tuple.\n *\n * The returned tuple should never be modified as it is not cloned.\n *\n * @param values - Values to return.\n *\n * @returns A function that returns `values` tuple.\n */\nexport function valuesProvider<T extends readonly any[]>(...values: T): (this: void) => T {\n  return (): T => values;\n}\n\n/**\n * Creates a provider of cloned arguments tuple.\n *\n * The returned tuple can be modified as it is cloned before the return.\n *\n * @param values - Values to return.\n *\n * @returns A function that returns a clone of `values` tuple.\n */\nexport function valuesCloner<T extends any[]>(...values: T): (this: void) => T {\n  return (): T => values.slice() as T;\n}\n","import { valueProvider } from './value-providers';\n\n/**\n * Creates a provider of lazily evaluated value.\n *\n * The returned function evaluates the value first time it is called. Then it just returns previously evaluated value.\n *\n * @param provider - A no-arg function evaluating the value.\n *\n * @returns A function that returns the value evaluated by `provider`.\n */\nexport function lazyValue<T>(provider: (this: void) => T): (this: void) => T {\n\n  let get = (): T => {\n    get = lazyValue$recurrent; // Prevent recurrent evaluation\n\n    const value = provider();\n\n    get = valueProvider(value);\n\n    return value;\n  };\n\n  return (): T => get();\n}\n\nfunction lazyValue$recurrent(): never {\n  throw new TypeError('Recurrent evaluation');\n}\n","import { valueProvider } from './value-providers';\n\n/**\n * A recipe of value evaluation.\n *\n * This is either a value as-is, or its {@link ValueRecipe.Evaluator evaluator} function.\n *\n * @typeParam TValue - Evaluated value type. This can not be a function.\n * @typeParam TArgs - A type of parameters tuple required for value evaluation.\n */\nexport type ValueRecipe<TValue, TArgs extends any[] = []> =\n    | TValue\n    | ValueRecipe.Evaluator<TValue, TArgs>;\n\nexport namespace ValueRecipe {\n\n  /**\n   * Value evaluator signature.\n   *\n   * @typeParam TValue - Evaluated value type. This can not be a function.\n   * @typeParam TArgs - A type of parameters tuple required for value evaluation.\n   */\n  export type Evaluator<TValue, TArgs extends any[] = []> =\n  /**\n   * @param args - Parameters required for value evaluation.\n   *\n   * @returns Evaluated value.\n   */\n      (this: void, ...args: TArgs) => TValue;\n\n}\n\n/**\n * @internal\n */\nfunction isValueEvaluator<TValue, TArgs extends any[]>(\n    value: ValueRecipe<TValue, TArgs>,\n): value is ValueRecipe.Evaluator<TValue, TArgs> {\n  return typeof value === 'function';\n}\n\n/**\n * Evaluates a value by its recipe.\n *\n * @typeParam TValue - Evaluated value type. This can not be a function.\n * @typeParam TArgs - A type of parameters tuple required for value evaluation.\n * @param recipe - Value evaluation recipe.\n * @param args - Parameters required for value evaluation.\n *\n * @returns Either the value itself, or the one evaluated by the given evaluator recipe.\n */\nexport function valueByRecipe<TValue, TArgs extends any[]>(\n    recipe: ValueRecipe<TValue, TArgs>,\n    ...args: TArgs\n): TValue {\n  return (/*#__INLINE__*/ isValueEvaluator(recipe)) ? recipe(...args) : recipe;\n}\n\n/**\n * Converts a value recipe to its {@link ValueRecipe.Evaluator evaluator} function.\n *\n * @typeParam TValue - Evaluated value type. This can not be a function.\n * @typeParam TArgs - A type of parameters tuple required for value evaluation.\n * @param recipe - Value recipe to convert.\n *\n * @returns Either evaluator itself, or the one evaluating to the given value.\n */\nexport function valueRecipe<TValue, TArgs extends any[]>(\n    recipe: ValueRecipe<TValue, TArgs>,\n): ValueRecipe.Evaluator<TValue, TArgs> {\n  return (/*#__INLINE__*/ isValueEvaluator(recipe)) ? recipe : valueProvider(recipe);\n}\n","import { areTheSame } from '../value';\n\n/**\n * Checks whether two arrays are equal.\n *\n * @typeParam T - Array elements type.\n * @param first - First array to compare.\n * @param second - Second array to compare.\n * @param length - The maximum number of elements to compare. Defaults to array length. Negative value means `0`.\n *\n * @returns `true` if up to `length` corresponding array elements are strictly equal to each other.\n */\nexport function arraysAreEqual<T>(\n    first: ArrayLike<T>,\n    second: ArrayLike<T>,\n    length?: number | null,\n): boolean;\n\n/**\n * Checks whether two array ranges are equal.\n *\n * @typeParam T - Array elements type.\n * @param first - First array to compare.\n * @param second - Second array to compare. Negative or absent value means `0`.\n * @param from - The first element index to compare. Negative value means `0`. Absent value means array length.\n * @param to - The number one more than the last element index to compare.\n *\n * @returns `true` if all corresponding elements in corresponding array ranges are strictly equal to each other.\n */\nexport function arraysAreEqual<T>(\n    first: ArrayLike<T>,\n    second: ArrayLike<T>,\n    from: number | null | undefined,\n    to: number | null,\n): boolean;\n\n/**\n * Checks whether two arrays are equal by comparing corresponding elements with the given comparator function.\n *\n * @typeParam T - Array elements type.\n * @param first - First array to compare.\n * @param elementsAreEqual - Array elements comparator. Accepts elements to compare and their index as arguments.\n * Returns `true` if elements are equal, or `false` otherwise.\n * @param second - Second array to compare.\n * @param length - The maximum number of elements to compare. Defaults to array length.\n *\n * @returns `true` if `elementsAreEqual` comparator returned `true` for up to `length` corresponding array element\n * pairs.\n */\nexport function arraysAreEqual<T>(\n    first: ArrayLike<T>,\n    second: ArrayLike<T>,\n    elementsAreEqual: (this: void, first: T, second: T, index: number) => boolean,\n    length?: number | null,\n): boolean;\n\n/**\n * Checks whether two array ranges are equal by comparing corresponding elements with the given comparator function.\n *\n * @typeParam T - Array elements type.\n * @param first - First array to compare.\n * @param elementsAreEqual - Array elements comparator. Accepts elements to compare and their index as arguments.\n * Returns `true` if elements are equal, or `false` otherwise.\n * @param second - Second array to compare.\n * @param from - The first element index to compare. Negative value means `0`. Absent value means array length.\n * @param to - The number one more than the last element index to compare.\n *\n * @returns `true` if `elementsAreEqual` comparator returned `true` for up to `length` corresponding array element\n * pairs.\n */\nexport function arraysAreEqual<T>(\n    first: ArrayLike<T>,\n    second: ArrayLike<T>,\n    elementsAreEqual: (this: void, first: T, second: T, index: number) => boolean,\n    from: number | null | undefined,\n    to: number | null,\n): boolean;\n\nexport function arraysAreEqual<T>(\n    first: ArrayLike<T>,\n    second: ArrayLike<T>,\n    compareOrFromOrLength?: ((this: void, first: T, second: T, index: number) => boolean) | number | null,\n    fromOrLength?: number | null,\n    to?: number | null,\n): boolean {\n  return typeof compareOrFromOrLength === 'function'\n      ? arrayElementsAreEqual(\n          first,\n          second,\n          compareOrFromOrLength,\n          fromOrLength,\n          to,\n      )\n      : arrayElementsAreEqual(\n          first,\n          second,\n          areTheSame,\n          compareOrFromOrLength,\n          fromOrLength,\n      );\n}\n\nfunction arrayElementsAreEqual<T>(\n    first: ArrayLike<T>,\n    second: ArrayLike<T>,\n    elementsAreEqual: (this: void, first: T, second: T, index: number) => boolean,\n    fromOrLength?: number | null,\n    to?: number | null,\n): boolean {\n\n  let start: number;\n  let end: number;\n\n  if (to !== undefined) {\n    start = fromOrLength ? Math.max(fromOrLength, 0) : 0;\n    end = to != null ? to : Math.max(first.length, second.length);\n  } else if (fromOrLength != null) {\n    start = 0;\n    end = fromOrLength;\n  } else {\n    start = 0;\n    end = Math.max(first.length, second.length);\n  }\n\n  if ((first.length <= end || second.length <= end) && first.length !== second.length) {\n    return false;\n  }\n\n  for (let i = start; i < end; ++i) {\n    if (!elementsAreEqual(first[i], second[i], i)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","/**\n * Builds element or array of the given elements.\n *\n * @param source - A source of elements as their iterable or array-like container.\n *\n * @returns The only element of the `source`, an array of all elements of non-empty source, or `undefined` if the\n * `source` is empty.\n */\nexport function elementOrArray<T>(source: Iterable<T> | ArrayLike<T>): T | T[] | undefined {\n\n  const array = Array.from(source);\n  const { length } = array;\n\n  if (length) {\n    return length === 1 ? array[0] : array;\n  }\n\n  return;\n}\n","import { isArrayOfElements } from './array-of-elements';\n\n/**\n * Builds a set of the given element or array of elements.\n *\n * @param elements Either element, readonly array of elements, `null`, or `undefined`.\n *\n * @returns A new set containing all of the given elements, or empty set if `elements` is `null` or `undefined`.\n */\nexport function setOfElements<T>(elements: T | readonly T[] | null | undefined): Set<T> {\n  return (/*#__INLINE__*/ isArrayOfElements(elements))\n      ? new Set(elements)\n      : (elements != null ? new Set([elements]) : new Set());\n}\n\n/**\n * Adds element of array of elements to the given set.\n *\n * Adds to the set a single element, all `elements` of the given array, or nothing when `elements` is `null`\n * or `undefined`.\n *\n * @param set - Target set to add elements to.\n * @param elements - Element(s) to add to the `set`. Either element, readonly array of elements, `null`, or `undefined`.\n *\n * @returns The target `set`.\n */\nexport function extendSetOfElements<T>(set: Set<T>, elements: T | readonly T[] | null | undefined): Set<T> {\n  if (/*#__INLINE__*/ isArrayOfElements(elements)) {\n    elements.forEach(element => set.add(element));\n  } else if (elements != null) {\n    set.add(elements);\n  }\n  return set;\n}\n","import type { Class } from './class';\n\n/**\n * Detects a super class of the given class optionally satisfying the given criteria.\n *\n * Traverses all class ancestors until reaches the one satisfying the given criteria, or stops when there is no more\n * ancestors.\n *\n * @param type - The class constructor to find super class of.\n * @param satisfying - The criteria of super class matching. It is a function accepting a super class constructor\n * as the only parameter and returning `true` if the given super class matches, or `false` otherwise. Always returns\n * `true` by default.\n *\n * @return A super class `satisfying` the given criteria, or `undefined` if there is no such super class, or there is no\n * super class at all (e.g. when `Object` is passed in).\n */\nexport function superClassOf(type: Class, satisfying: (type: Class) => boolean = () => true): Class | undefined {\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const prototype: object = Object.getPrototypeOf(type.prototype);\n\n  if (prototype == null) {\n    return;\n  }\n\n  const superType = prototype.constructor as Class;\n\n  if (satisfying(superType)) {\n    return superType;\n  }\n\n  return superClassOf(superType, satisfying);\n}\n","/**\n * A function that returns its argument as is.\n *\n * @param value - A value to return.\n *\n * @returns `value`.\n */\nexport function asis<T>(value: T): T {\n  return value;\n}\n","/**\n * Counts meaningful arguments passed to function.\n *\n * Ignores trailing `undefined` values.\n *\n * @param args - Function call arguments tuple.\n *\n * @returns The number of arguments, except for the trailing `undefined` values.\n */\nexport function countArgs(args: ArrayLike<unknown>): number {\n\n  let len = args.length;\n\n  while (len > 0) {\n\n    const idx = len - 1;\n\n    if (args[idx] !== undefined) {\n      break;\n    }\n\n    len = idx;\n  }\n\n  return len;\n}\n","/**\n * Merges two functions by calling one after another.\n *\n * Optionally merges function call results.\n *\n * @typeParam TArgs - Function parameter types as tuple.\n * @typeParam TReturn - A type of function result.\n * @typeParam TThis - A type if `this` object expected by function.\n * @param first - The first function to call.\n * @param second - The second function to call.\n * @param merge - Optional function call results merger. Accepts two function results as arguments and returns the final\n * result. When omitted the first function call result is ignored and the second function's call result is returned.\n *\n * @return A function that calls both of the given ones and merges their results. If one of the functions is absent,\n * then just returns another one. If both are absent, then returns `undefined`.\n */\nexport function mergeFunctions<TArgs extends any[], TReturn, TThis>(\n    first: (this: TThis, ...args: TArgs) => TReturn,\n    second: ((this: TThis, ...args: TArgs) => TReturn) | undefined,\n    merge: (first: TReturn, second: TReturn) => TReturn,\n): (this: TThis, ...args: TArgs) => TReturn;\n\nexport function mergeFunctions<TArgs extends any[], TReturn, TThis>(\n    first: ((this: TThis, ...args: TArgs) => TReturn) | undefined,\n    second: (this: TThis, ...args: TArgs) => TReturn,\n    merge?: (first: TReturn, second: TReturn) => TReturn,\n): (this: TThis, ...args: TArgs) => TReturn;\n\nexport function mergeFunctions<TArgs extends any[], TReturn, TThis>(\n    first: ((this: TThis, ...args: TArgs) => TReturn) | undefined,\n    second: ((this: TThis, ...args: TArgs) => TReturn) | undefined,\n    merge?: (first: TReturn, second: TReturn) => TReturn,\n): ((this: TThis, ...args: TArgs) => TReturn) | undefined;\n\nexport function mergeFunctions<TArgs extends any[], TReturn, TThis>(\n    first: ((this: TThis, ...args: TArgs) => TReturn) | undefined,\n    second: ((this: TThis, ...args: TArgs) => TReturn) | undefined,\n    merge: (first: TReturn, second: TReturn) => TReturn = (_f, s) => s,\n): ((this: TThis, ...args: TArgs) => TReturn) | undefined {\n  if (!first) {\n    return second;\n  }\n  if (!second) {\n    return first;\n  }\n  return function (this: TThis, ...args: TArgs): TReturn {\n    return merge(\n        first.apply(this, args),\n        second.apply(this, args),\n    );\n  };\n}\n","/**\n * A function that does nothing.\n *\n * @returns `undefined`.\n */\nexport function noop(): undefined {\n  return;\n}\n","/**\n * A function that checks whether the given value is present.\n *\n * @param value - A value to check.\n *\n * @returns `true` when the given `value` is not `null` or `undefined`, or `false` otherwise.\n */\nexport function isPresent<T>(value: T | undefined | null): value is T {\n  return value != null;\n}\n\n/**\n * A function that checks whether the given value is not present.\n *\n * This is a direct opposite to `isPresent()`.\n *\n * @param value - A value to check.\n *\n * @returns `true` when the given `value` is `null` or `undefined`, or `false` otherwise.\n */\nexport function isNotPresent<T>(value: T | undefined | null): value is T {\n  return value == null;\n}\n\n/**\n * A function that checks whether the given value is defined.\n *\n * @param value - A value to check.\n *\n * @returns `true` when the given `value` is not `undefined`, or `false` otherwise.\n */\nexport function isDefined<T>(value: T | undefined): value is T {\n  return value !== undefined;\n}\n\n/**\n * A function that checks whether the given value is undefined.\n *\n * This is a direct opposite to `isDefined()`.\n *\n * @param value - A value to check.\n *\n * @returns `true` when the given `value` is `undefined`, or `false` otherwise.\n */\nexport function isUndefined<T>(value: T | undefined): value is T {\n  return value === undefined;\n}\n","import type { PushIterator } from './push-iterator';\n\n/**\n * A key of {@link PushIterable} iteration method.\n */\nexport const PushIterator__symbol = (/*#__PURE__*/ Symbol('push-iterator'));\n\n/**\n * An iterable implementing push iteration protocol.\n *\n * @typeParam T - Iterated elements type.\n */\nexport interface PushIterable<T> extends Iterable<T> {\n\n  /**\n   * Creates a {@link PushIterator | push iterator} over elements of this iterable.\n   *\n   * @returns New push iterator instance.\n   */\n  [Symbol.iterator](): PushIterator<T>;\n\n  /**\n   * Iterates over elements of this push iterable.\n   *\n   * Calls `accept` method for each iterated element until there are elements to iterate, or `accept` returned either\n   * `true` or `false`.\n   *\n   * Calling this method with `accept` parameter is a faster alternative to creating a push iterator and iterating with\n   * it.\n   *\n   * Calling this method without arguments is the same as calling `[Symbol.iterator]()` one.\n   *\n   * @param accept - A function to push iterated elements to. Accepts iterated element as its only parameter. May return\n   * `true` to suspend iteration, or `false` to stop it.\n   *\n   * @returns A push iterator instance to continue iteration with. If `accept` returned `false` then further iteration\n   * won't be possible with returned iterator.\n   */\n  [PushIterator__symbol](accept?: PushIterator.Acceptor<T>): PushIterator<T>;\n\n}\n\nexport namespace PushIterable {\n\n  /**\n   * A signature of function conforming to push iteration protocol.\n   *\n   * Used as `PushIterable[PushIterator__symbol]` method implementation when passed to {@link makePushIterable}\n   * function.\n   *\n   * @typeParam T - Iterated elements type.\n   */\n  export type Iterate<T> =\n  /**\n   * @param accept - A function to push iterated elements to. Accepts iterated element as its only parameter. May return\n   * `true` to suspend iteration, or `false` to stop it.\n   *\n   * @returns A push iterator instance to continue iteration with. If `accept` returned `false` then further iteration\n   * won't be possible with returned iterator.\n   */\n      (this: void, accept?: PushIterator.Acceptor<T>) => PushIterator<T>;\n\n}\n","import type { PushIterable } from '../push-iterable';\nimport { PushIterator__symbol } from '../push-iterable';\nimport type { PushIterator } from '../push-iterator';\n\n/**\n * Checks whether the given iterable conforms to {@link PushIterable | push iteration protocol}.\n *\n * @typeParam T - Iterated elements type.\n * @param iterable - An iterable to check.\n *\n * @returns `true` if the given `iterable` has a {@link PushIterator__symbol [PushIterator__symbol]} property,\n * or `false` otherwise.\n */\nexport function isPushIterable<T>(iterable: Iterable<T>): iterable is PushIterable<T>;\n\n/**\n * Checks whether the given iterator conforms to {@link PushIterable | push iteration protocol}.\n *\n * @typeParam T - Iterated elements type.\n * @param iterator - An iterator to check.\n *\n * @returns `true` if the given `iterator` has a {@link PushIterator__symbol | [PushIterator__symbol]} property,\n * or `false` otherwise.\n */\nexport function isPushIterable<T>(iterator: Iterator<T>): iterator is PushIterator<T>;\n\nexport function isPushIterable<T>(iterable: Iterable<T> | Iterator<T>): iterable is PushIterator<T> {\n  return !!(iterable as Partial<PushIterable<T>>)[PushIterator__symbol];\n}\n","import type { PushIterable } from '../push-iterable';\nimport type { PushIterator } from '../push-iterator';\n\n/**\n * Creates a push iterator over elements of the given push `iterable`.\n *\n * Calls `iterable[Symbol.iterator]()` and returns its result.\n *\n * @typeParam T - Iterated elements type.\n * @param iterable - A push iterable to construct iterator of.\n *\n * @returns Push iterator.\n */\nexport function iteratorOf<T>(iterable: PushIterable<T>): PushIterator<T>;\n\n/**\n * Creates an iterable iterator over elements of the given `iterable` supporting iterable iteration.\n *\n * Calls `iterable[Symbol.iterator]()` and returns its result.\n *\n * @typeParam T - Iterated elements type.\n * @param iterable - A push iterable to construct iterator of.\n *\n * @returns Iterable iterator.\n */\nexport function iteratorOf<T>(iterable: { [Symbol.iterator](): IterableIterator<T> }): IterableIterator<T>;\n\n/**\n * Creates iterator over elements of the given `iterable`.\n *\n * Calls `iterable[Symbol.iterator]()` and returns its result.\n *\n * @typeParam T - Iterated elements type.\n * @param iterable - An iterable to construct iterator of.\n *\n * @returns Either push or raw iterator.\n */\nexport function iteratorOf<T>(iterable: Iterable<T>): Iterator<T>;\n\nexport function iteratorOf<T>(iterable: Iterable<T>): Iterator<T> {\n  return iterable[Symbol.iterator]();\n}\n","import { PushIterable, PushIterator__symbol } from '../push-iterable';\nimport type { PushIterator } from '../push-iterator';\n\n/**\n * Creates a push iterable implementation.\n *\n * @typeParam T - Iterated elements type.\n * @param iterate - A function iterating over iterable elements conforming to {@link PushIterable.Iterate} requirements.\n *\n * @returns New push iterable instance performing iteration by `forNext` function.\n */\nexport function makePushIterable<T>(iterate: PushIterable.Iterate<T>): PushIterable<T> {\n  return {\n    [Symbol.iterator]: PushIterable$iterator,\n    [PushIterator__symbol]: iterate,\n  };\n}\n\n/**\n * @internal\n */\nfunction PushIterable$iterator<T>(this: PushIterable<T>): PushIterator<T> {\n  return this[PushIterator__symbol]();\n}\n","import { PushIterable, PushIterator__symbol } from '../push-iterable';\nimport type { PushIterator } from '../push-iterator';\n\n/**\n * Iterates over elements of the given push iterable.\n *\n * Calls `accept` method for each iterated element until there are elements to iterate, or `accept` returned either\n * `true` or `false`.\n *\n * Calling this function is the same as calling `!iterable[PushIterator__symbol](accept).isOver()`.\n *\n * @typeParam T - Iterated elements type.\n * @param iterable - A push iterable to iterate elements of.\n * @param accept - A function to push iterated elements to. Accepts iterated element as its only parameter. May return\n * `true` to suspend iteration, or `false` to stop it.\n *\n * @returns `true` if there are more elements to iterate, or `false` otherwise. The former is possible only when\n * iteration suspended, i.e. `accept` returned `true`.\n */\nexport function pushIterated<T>(iterable: PushIterable<T>, accept: PushIterator.Acceptor<T>): boolean {\n  return !iterable[PushIterator__symbol](accept).isOver();\n}\n","import { PushIterable, PushIterator__symbol } from '../push-iterable';\nimport type { PushIterator } from '../push-iterator';\nimport { pushIterated } from './push-iterated';\n\n/**\n * Creates a push iterator implementation.\n *\n * @typeParam T - Iterated elements type.\n * @param forNext - A function iterating over elements conforming to push iteration protocol.\n *\n * @returns New push iterator instance performing iteration by `forNext` function.\n */\nexport function makePushIterator<T>(forNext: PushIterator.Pusher<T>): PushIterator<T> {\n\n  let over = false;\n  let iterate = (accept?: PushIterator.Acceptor<T>): void => {\n    if (accept && !forNext(accept)) {\n      over = true;\n      iterate = PushIterator$dontIterate;\n    }\n  };\n\n  return {\n    [Symbol.iterator]: PushIterator$iterator,\n    [PushIterator__symbol](accept) {\n      iterate(accept);\n      return this;\n    },\n    next: PushIterator$next,\n    isOver: () => over,\n  };\n}\n\n/**\n * @internal\n */\nexport function PushIterator$iterator<T>(this: T): T {\n  return this;\n}\n\n/**\n * @internal\n */\nexport function PushIterator$next<T>(this: PushIterator<T>): IteratorResult<T> {\n  for (; ;) {\n\n    let result: IteratorYieldResult<T> | undefined;\n    const over = !pushIterated(\n        this,\n        value => {\n          result = { value };\n          return true;\n        },\n    );\n\n    if (result) {\n      return result;\n    }\n    if (over) {\n      return { done: true } as IteratorReturnResult<T>;\n    }\n  }\n}\n\n/**\n * @internal\n */\nexport function PushIterator$noNext<T>(): IteratorReturnResult<T> {\n  return { done: true } as IteratorReturnResult<T>;\n}\n\n/**\n * @internal\n */\nexport function PushIterator$dontIterate<T>(\n    _accept?: PushIterator.Acceptor<T>, // unused parameter to prevent deoptimization\n): void {\n  /* do not iterate */\n}\n\n/**\n * @internal\n */\nexport const emptyPushIterator: PushIterator<any> & PushIterable<any> = {\n  [Symbol.iterator]: PushIterator$iterator,\n  [PushIterator__symbol](\n      _accept, // unused parameter to prevent deoptimization\n  ) {\n    return this;\n  },\n  next: () => ({ done: true } as IteratorReturnResult<unknown>),\n  isOver: () => true,\n};\n","import { PushIterable, PushIterator__symbol } from '../push-iterable';\nimport type { PushIterator } from '../push-iterator';\n\n/**\n * Iterates over the head elements of the given push iterable.\n *\n * Calls `accept` method for each iterated element until there are elements to iterate, or `accept` returned either\n * `true` or `false`.\n *\n * Calling this function is the same as calling `iterable[PushIterator__symbol](accept)`.\n *\n * @typeParam T - Iterated elements type.\n * @param iterable - A push iterable to iterate elements of.\n * @param accept - A function to push iterated elements to. Accepts iterated element as its only parameter. May return\n * `true` to suspend iteration, or `false` to stop it.\n *\n * @returns A push iterator instance representing the tail of the given iterable. This iterator can be used to continue\n * iteration with, unless `accept` returned `false`. In the latter case the further iteration won't be possible.\n */\nexport function pushHead<T>(iterable: PushIterable<T>, accept: PushIterator.Acceptor<T>): PushIterator<T> {\n  return iterable[PushIterator__symbol](accept);\n}\n","import type { IndexedItemList } from '../construction';\nimport { PushIterable, PushIterator__symbol } from '../push-iterable';\nimport type { PushIterator } from '../push-iterator';\nimport {\n  emptyPushIterator,\n  PushIterator$dontIterate,\n  PushIterator$iterator,\n  PushIterator$noNext,\n} from './make-push-iterator';\n\n/**\n * @internal\n */\nexport interface IndexedElements {\n\n  readonly length: number;\n\n}\n\n/**\n * @internal\n */\nexport function indexedItemOf<T>(indexed: IndexedItemList<T>, index: number): T {\n  return indexed.item(index) as T; // The index is always valid.\n}\n\n/**\n * @internal\n */\nexport function iterateOverIndexed<TIndexed extends IndexedElements, T>(\n    indexed: TIndexed,\n    elementOf: (indexed: TIndexed, index: number) => T,\n): PushIterable.Iterate<T> {\n  return accept => {\n\n    let i = 0;\n    const forNext = (accept: PushIterator.Acceptor<T>): boolean => {\n      if (i >= indexed.length) {\n        return false;\n      }\n      for (; ;) {\n\n        const goOn = accept(elementOf(indexed, i++));\n\n        if (i >= indexed.length || goOn === false) {\n          return false;\n        }\n        if (goOn === true) {\n          return true;\n        }\n      }\n    };\n\n    if (accept && !forNext(accept)) {\n      return emptyPushIterator;\n    }\n\n    let over = false;\n    let iterate = (accept?: PushIterator.Acceptor<T>): void => {\n      if (accept && !forNext(accept)) {\n        over = true;\n        iterate = PushIterator$dontIterate;\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        next = PushIterator$noNext;\n      }\n    };\n    let next = (): IteratorResult<T> => {\n      if (i < indexed.length) {\n        return { value: elementOf(indexed, i++) };\n      }\n\n      over = true;\n      iterate = PushIterator$dontIterate;\n      next = PushIterator$noNext;\n\n      return { done: true } as IteratorReturnResult<T>;\n    };\n\n    return {\n      [Symbol.iterator]: PushIterator$iterator,\n      [PushIterator__symbol](accept) {\n        iterate(accept);\n        return this;\n      },\n      next: () => next(),\n      isOver: () => over,\n    };\n\n  };\n}\n","import type { PushIterable } from '../push-iterable';\nimport { iterateOverIndexed } from './iterate-over-indexed.impl';\n\n/**\n * @internal\n */\nexport function arrayElementOf<T>(array: ArrayLike<T>, index: number): T {\n  return array[index];\n}\n\n/**\n * @internal\n */\nexport function iterateOverArray<T>(array: ArrayLike<T>): PushIterable.Iterate<T> {\n  return iterateOverIndexed<ArrayLike<T>, T>(array, arrayElementOf);\n}\n","import { makePushIterable } from '../base';\nimport { iterateOverArray } from '../base/iterate-over-array.impl';\nimport type { PushIterable } from '../push-iterable';\n\n/**\n * Creates a {@link PushIterable | push iterable} over elements of array-like structure.\n *\n * @typeParam T - Array elements type.\n * @param array - An array-like structure. E.g. `Array`, DOM `NodeList`, etc.\n *\n * @returns New push iterable over array elements.\n */\nexport function overArray<T>(array: ArrayLike<T>): PushIterable<T> {\n  return makePushIterable<T>(iterateOverArray(array));\n}\n","import { isPushIterable, iteratorOf, pushIterated } from '../base';\nimport type { PushIterator } from '../push-iterator';\n\n/**\n * Iterates over elements of the given iterable.\n *\n * Calls `accept` method for each iterated element until there are elements to iterate, or `accept` returned either\n * `true` or `false`.\n *\n * In contrast to {@link pushIterated} function, this one accepts any iterable instance.\n *\n * @typeParam T - Iterated elements type.\n * @param iterable - An iterable to iterate elements of.\n * @param accept - A function to push iterated elements to. Accepts iterated element as its only parameter. May return\n * `true` to suspend iteration, or `false` to stop it.\n *\n * @returns `true` if there are more elements to iterate, or `false` otherwise. The former is possible only when\n * iteration suspended, i.e. `accept` returned `true`.\n */\nexport function itsIterated<T>(iterable: Iterable<T>, accept: PushIterator.Acceptor<T>): boolean {\n  if (isPushIterable(iterable)) {\n    return pushIterated(iterable, accept);\n  }\n\n  const it = iteratorOf(iterable);\n\n  if (isPushIterable(it)) {\n    return pushIterated(it, accept);\n  }\n\n  for (; ;) {\n\n    const next = it.next();\n\n    if (next.done) {\n      return false;\n    }\n\n    const status = accept(next.value);\n\n    if (typeof status === 'boolean') {\n      return status;\n    }\n  }\n}\n","import { itsIterated } from './its-iterated';\n\n/**\n * Performs the given `action` for each element of the given `iterable`.\n *\n * @typeParam T - Iterated elements type.\n * @param iterable - An iterable of elements to perform actions on.\n * @param action - An action to perform on each iterable element. This is a function accepting an element as its only\n * parameter.\n */\nexport function itsEach<T>(iterable: Iterable<T>, action: (this: void, element: T) => void): void {\n  itsIterated(iterable, element => { action(element); });\n}\n","import { isPushIterable, iteratorOf, pushIterated } from '../base';\nimport type { PushIterable } from '../push-iterable';\n\n/**\n * @internal\n */\nconst itsElements$defaultConverter = <T, TConv>(element: T): TConv => element as unknown as TConv;\n\n/**\n * Creates a new, shallow-copied array instance containing elements of the `source` iterable.\n *\n * Calling this function result to the same result as calling `Array.from(source)`, except it is optimized for\n * {@link PushIterable push iterables}.\n *\n * @typeParam T - Iterated elements type.\n * @param source - A source iterable to copy elements from.\n *\n * @returns New array of `source` elements.\n */\nexport function itsElements<T>(source: Iterable<T>): T[];\n\n/**\n * Creates a new, shallow-copied array instance containing elements of the `source` iterable converted by the given\n * converter function.\n *\n * Calling this function result to the same result as calling `Array.from(source, convert)`, except it is optimized for\n * {@link PushIterable push iterables}.\n *\n * @typeParam T - Iterated elements type.\n * @typeParam TConv - Resulting array elements type.\n * @param source - A source iterable to convert elements from.\n * @param convert - A function that produces an element of result array, taking element of `source` iterable as the only\n * parameter.\n *\n * @returns New array of elements converted from `source` ones.\n */\nexport function itsElements<T, TConv>(source: Iterable<T>, convert: (this: void, element: T) => TConv): TConv[];\n\nexport function itsElements<T, TConv>(\n    source: Iterable<T>,\n    convert: (this: void, element: T) => TConv = itsElements$defaultConverter,\n): TConv[] {\n  if (isPushIterable(source)) {\n    return pushedElements(source, convert);\n  }\n\n  const it = iteratorOf(source);\n\n  return isPushIterable(it) ? pushedElements(it, convert) : Array.from(source, convert);\n}\n\n/**\n * @internal\n */\nfunction pushedElements<T, TConv>(\n    it: PushIterable<T>,\n    convert: (this: void, element: T) => TConv,\n): TConv[] {\n\n  const result: TConv[] = [];\n\n  pushIterated(it, element => { result.push(convert(element)); });\n\n  return result;\n}\n","import { isPushIterable, iteratorOf, pushIterated } from '../base';\nimport type { PushIterable } from '../push-iterable';\n\n/**\n * Checks whether the given `iterable` is empty.\n *\n * @param iterable - An iterable or push iterable to check for elements.\n *\n * @returns `true` if the given iterable contains at least one element, or `false` otherwise.\n */\nexport function itsEmpty(iterable: Iterable<unknown>): boolean {\n  if (isPushIterable(iterable)) {\n    return pushedEmpty(iterable);\n  }\n\n  const it = iteratorOf(iterable);\n\n  return isPushIterable(it) ? pushedEmpty(it) : !!it.next().done;\n}\n\n/**\n * @internal\n */\nfunction pushedEmpty(it: PushIterable<unknown>): boolean {\n\n  let isEmpty = true;\n\n  pushIterated(it, _element /* Unused parameter to prevent deoptimization */ => isEmpty = false);\n\n  return isEmpty;\n}\n","import { itsIterated } from './its-iterated';\n\n/**\n * Tests whether all elements of the given `iterable` pass the test implemented by the provided function.\n *\n * @typeParam T - Iterated elements type.\n * @param iterable - An iterable to test elements of.\n * @param test - A predicate function to test each element. Returns `true` to continue tests, or `false` to stop it\n * and return `false` from the method call. It accepts the tested element as the only parameter.\n *\n * @returns `true` if the `test` function returned a truthy value for every element, or `false` otherwise.\n * Returns `true` for empty iterable.\n */\nexport function itsEvery<T>(\n    iterable: Iterable<T>,\n    test: (this: void, element: T) => boolean,\n): boolean {\n\n  let allMatch = true;\n\n  itsIterated(\n      iterable,\n      element => {\n        allMatch = !!test(element);\n        if (!allMatch) {\n          return false;\n        }\n        return;\n      },\n  );\n\n  return allMatch;\n}\n","import { isPushIterable, iteratorOf, pushIterated } from '../base';\nimport type { PushIterable } from '../push-iterable';\n\n/**\n * Extracts the first element of the given `iterable`, if any.\n *\n * @typeParam T - Iterated elements type.\n * @param iterable - An iterable to extract element from.\n *\n * @returns Either the first element, or `undefined` if the given `iterable` is empty.\n */\nexport function itsFirst<T>(iterable: Iterable<T>): T | undefined {\n  if (isPushIterable(iterable)) {\n    return pushedFirst(iterable);\n  }\n\n  const it = iteratorOf(iterable);\n\n  return isPushIterable(it) ? pushedFirst(it) : rawFirst(it);\n}\n\n/**\n * @internal\n */\nfunction pushedFirst<T>(it: PushIterable<T>): T | undefined {\n\n  let first: T | undefined;\n\n  pushIterated(\n      it,\n      element => {\n        first = element;\n        return false;\n      },\n  );\n\n  return first;\n}\n\n/**\n * @internal\n */\nfunction rawFirst<T>(it: Iterator<T>): T | undefined {\n\n  const result = it.next();\n\n  return result.done ? undefined : result.value;\n}\n","import { PushIterator__symbol } from '../push-iterable';\nimport type { PushIterator } from '../push-iterator';\nimport { PushIterator$dontIterate, PushIterator$iterator, PushIterator$noNext } from './make-push-iterator';\n\n/**\n * @internal\n */\nexport function toPushIterator<T>(it: Iterator<T>, forNext: PushIterator.Pusher<T>): PushIterator<T> {\n\n  let over = false;\n  let iterate = (accept?: PushIterator.Acceptor<T>): void => {\n    if ((over = !!accept && !forNext(accept))) {\n      iterate = PushIterator$dontIterate;\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      next = PushIterator$noNext;\n    }\n  };\n  let next = (): IteratorResult<T> => {\n\n    const res = it.next();\n\n    if (res.done) {\n      over = true;\n      iterate = PushIterator$dontIterate;\n      next = PushIterator$noNext;\n    }\n\n    return res;\n  };\n\n  return {\n    [Symbol.iterator]: PushIterator$iterator,\n    [PushIterator__symbol](accept) {\n      iterate(accept);\n      return this;\n    },\n    next() {\n      return next();\n    },\n    isOver: () => over,\n  };\n}\n\n/**\n * @internal\n */\nexport function rawIteratorPusher<T>(it: Iterator<T>): PushIterator.Pusher<T> {\n  return accept => {\n    for (; ;) {\n\n      const res = it.next();\n\n      if (res.done) {\n        return false;\n      }\n\n      const status = accept(res.value);\n\n      if (typeof status === 'boolean') {\n        return status;\n      }\n    }\n  };\n}\n","import { isPushIterable, iteratorOf, pushHead } from '../base';\nimport { iterateOverArray } from '../base/iterate-over-array.impl';\nimport { emptyPushIterator } from '../base/make-push-iterator';\nimport { rawIteratorPusher, toPushIterator } from '../base/raw-iterator.impl';\nimport type { PushIterator } from '../push-iterator';\n\n/**\n * Iterates over elements of the given iterable.\n *\n * Calls `accept` method for each iterated element until there are elements to iterate, or `accept` returned either\n * `true` or `false`.\n *\n * In contrast to {@link pushHead} function, this one accepts any iterable instance.\n *\n * @typeParam T - Iterated elements type.\n * @param iterable - An iterable to iterate elements of.\n * @param accept - A function to push iterated elements to. Accepts iterated element as its only parameter. May return\n * `true` to suspend iteration, or `false` to stop it.\n *\n * @returns A push iterator instance representing the tail of the given iterable. This iterator can be used to continue\n * iteration with, unless `accept` returned `false`. In the latter case the further iteration won't be possible.\n */\nexport function itsHead<T>(iterable: Iterable<T>, accept: PushIterator.Acceptor<T>): PushIterator<T> {\n  if (isPushIterable(iterable)) {\n    return pushHead(iterable, accept);\n  }\n  if (Array.isArray(iterable)) {\n    return arrayHead(iterable, accept);\n  }\n  return rawIterableHead(iterable, accept);\n}\n\n/**\n * @internal\n */\nfunction arrayHead<T>(array: ArrayLike<T>, accept: PushIterator.Acceptor<T>): PushIterator<T> {\n  return array.length ? iterateOverArray(array)(accept) : emptyPushIterator;\n}\n\n/**\n * @internal\n */\nfunction rawIterableHead<T>(\n    iterable: Iterable<T>,\n    accept: PushIterator.Acceptor<T>,\n): PushIterator<T> {\n\n  const it = iteratorOf(iterable);\n\n  if (isPushIterable(it)) {\n    return pushHead(it, accept);\n  }\n\n  const forEach = rawIteratorPusher(it);\n\n  return forEach(accept) ? toPushIterator(it, forEach) : emptyPushIterator;\n}\n\n","import { isPushIterable, iteratorOf } from '../base';\nimport { rawIteratorPusher, toPushIterator } from '../base/raw-iterator.impl';\nimport type { PushIterator } from '../push-iterator';\n\n/**\n * Starts iteration over the given `iterable`.\n *\n * @typeParam T - Iterated elements type.\n * @param iterable - An iterable or push iterable to iterate over.\n *\n * @returns A push iterator iterating over the given iterable.\n */\nexport function itsIterator<T>(iterable: Iterable<T>): PushIterator<T> {\n\n  const it = iteratorOf(iterable);\n\n  return isPushIterable(it) ? it : toPushIterator(it, rawIteratorPusher(it));\n}\n","import { itsIterated } from './its-iterated';\n\n/**\n * Applies a function against an accumulator and each element of the given `iterable` to reduce elements to a single\n * value.\n *\n * @typeParam T - Iterated elements type.\n * @typeParam TResult - A type of reduced value.\n * @param iterable - An iterable to reduce values of.\n * @param reducer - A function to apply the value returned from the previous `reducer` call and to each element.\n * @param initialValue - Initial value passed to the first `reducer` call.\n *\n * @returns Reduced value returned from the last `reducer` call, or `initialValue` if there is no elements in the given\n * `iterable`.\n */\nexport function itsReduction<T, TResult>(\n    iterable: Iterable<T>,\n    reducer: (this: void, prev: TResult, element: T) => TResult,\n    initialValue: TResult,\n): TResult {\n\n  let reduced = initialValue;\n\n  itsIterated(iterable, element => { reduced = reducer(reduced, element); });\n\n  return reduced;\n}\n","import { emptyPushIterator } from '../base/make-push-iterator';\nimport type { PushIterable } from '../push-iterable';\nimport type { PushIterator } from '../push-iterator';\n\n/**\n * Returns a {@link PushIterator | push iterable iterator} without elements.\n *\n * @typeParam T - Iterated elements type.\n *\n * @returns Empty push iterable and push iterator instance.\n */\nexport function overNone<T>(): PushIterable<T> & PushIterator<T> {\n  return emptyPushIterator;\n}\n","import { isPushIterable, makePushIterable } from '../base';\nimport { rawIteratorPusher, toPushIterator } from '../base/raw-iterator.impl';\nimport type { PushIterable } from '../push-iterable';\nimport { PushIterator__symbol } from '../push-iterable';\nimport { overNone } from './over-none';\n\n/**\n * Creates a {@link PushIterable | push iterable} over elements of iterator created by the given function.\n *\n * @typeParam T - Iterated elements type.\n * @param iterate - A function creating new iterator.\n *\n * @returns New push iterable over elements of created iterator.\n */\nexport function overIterator<T>(iterate: (this: void) => Iterator<T>): PushIterable<T> {\n  return makePushIterable(iterateOverRawIterator(iterate));\n}\n\n/**\n * @internal\n */\nfunction iterateOverRawIterator<T>(iterate: (this: void) => Iterator<T>): PushIterable.Iterate<T> {\n  return accept => {\n\n    const it = iterate();\n\n    if (isPushIterable(it)) {\n      return it[PushIterator__symbol](accept);\n    }\n\n    const forNext = rawIteratorPusher(it);\n\n    return accept && !forNext(accept) ? overNone() : toPushIterator(it, forNext);\n  };\n}\n","import { makePushIterable, makePushIterator } from '../base';\nimport { itsHead } from '../consumption';\nimport type { PushIterable } from '../push-iterable';\nimport type { PushIterator } from '../push-iterator';\nimport { overIterable } from './over-iterable';\nimport { overNone } from './over-none';\n\n/**\n * Creates a {@link PushIterable | push iterable} over elements of other iterables.\n *\n * @typeParam T - Iterated elements type.\n * @param sources - Source iterables to iterate over elements of.\n *\n * @returns New push iterable over elements of the given `sources`.\n */\nexport function overElementsOf<T>(...sources: readonly Iterable<T>[]): PushIterable<T> {\n  return sources.length > 1\n      ? makePushIterable(iterateOverSubElements(sources))\n      : (sources.length\n          ? overIterable(sources[0])\n          : overNone());\n}\n\n/**\n * @internal\n */\nfunction iterateOverSubElements<T>(sources: readonly Iterable<T>[]): PushIterable.Iterate<T> {\n  return accept => {\n\n    let i = 0;\n    let src: Iterable<T> = sources[0];\n\n    const forNext = (accept: PushIterator.Acceptor<T>): boolean => {\n      for (; ;) {\n\n        // eslint-disable-next-line @typescript-eslint/no-invalid-void-type\n        let status: boolean | void;\n        const srcTail = itsHead(src, element => status = accept(element));\n\n        if (srcTail.isOver()) {\n          if (++i >= sources.length) {\n            return false;\n          }\n\n          src = sources[i];\n        } else {\n          src = srcTail;\n        }\n\n        if (typeof status === 'boolean') {\n          return status;\n        }\n      }\n    };\n\n    return accept && !forNext(accept) ? overNone() : makePushIterator(forNext);\n  };\n}\n","import { iteratorOf } from '../base';\nimport type { PushIterable } from '../push-iterable';\nimport { overArray } from './over-array';\nimport { overIterator } from './over-iterator';\n\n/**\n * Creates a {@link PushIterable | push iterable} over elements of the given raw iterable.\n *\n * @typeParam T - Iterated elements type.\n * @param iterable - An iterable to iterate over elements of.\n *\n * @returns New push iterable over elements of the given `iterable`.\n */\nexport function overIterable<T>(iterable: Iterable<T>): PushIterable<T> {\n  return Array.isArray(iterable)\n      ? overArray<T>(iterable)\n      : overIterator(() => iteratorOf(iterable));\n}\n","import { makePushIterable } from '../base';\nimport { PushIterator$iterator } from '../base/make-push-iterator';\nimport type { PushIterable } from '../push-iterable';\nimport { PushIterator__symbol } from '../push-iterable';\nimport { overNone } from './over-none';\n\n/**\n * Creates a {@link PushIterable | push iterable} over one value.\n *\n * @typeParam T - Iterated element value type.\n * @param value - A value to iterate over.\n *\n * @returns New push iterable over the given value.\n */\nexport function overOne<T>(value: T): PushIterable<T> {\n  return makePushIterable(iterateOverOneValue(value));\n}\n\n/**\n * @internal\n */\nfunction iterateOverOneValue<T>(value: T): PushIterable.Iterate<T> {\n  return accept => {\n    if (accept) {\n      accept(value);\n      return overNone();\n    }\n\n    let over = false;\n\n    return {\n      [Symbol.iterator]: PushIterator$iterator,\n      [PushIterator__symbol](accept) {\n        if (over) {\n          return overNone();\n        }\n        if (accept) {\n          over = true;\n          accept(value);\n          return overNone();\n        }\n        return this;\n      },\n      next() {\n        if (over) {\n          return { done: over } as IteratorReturnResult<undefined>;\n        }\n\n        over = true;\n\n        return { value };\n      },\n      isOver: () => over,\n    };\n\n  };\n}\n","import { overArray } from '../construction';\nimport type { PushIterable } from '../push-iterable';\n\n/**\n * Creates a {@link PushIterable | push iterable} over keys of the given object.\n *\n * A list of keys is constructed using `Reflect.ownKeys()`.\n *\n * @typeParam TObj - Source object type.\n * @param source - An object to select keys from.\n *\n * @returns New push iterable over own object keys retrieved by `Reflect.ownKeys()`.\n */\nexport function overKeys<TObj extends object>(source: TObj): PushIterable<keyof TObj> {\n  return overArray(Reflect.ownKeys(source) as (keyof TObj)[]);\n}\n","import { makePushIterable } from '../base';\nimport { arrayElementOf } from '../base/iterate-over-array.impl';\nimport type { PushIterable } from '../push-iterable';\nimport { iterateOverFilteredIndexed } from './iterate-over-filtered-indexed.impl';\n\n/**\n * Creates a {@link PushIterable push iterable} with all `array` elements extending the given type.\n *\n * @typeParam T - A type of array elements.\n * @typeParam TTarget - Target type.\n * @param array - A source array.\n * @param test - A predicate function to test that element extends the type `TTarget`. Returns `true` to keep the\n * element, or `false` otherwise. It accepts the tested element as the only parameter.\n *\n * @returns New push iterable with the elements that pass the test. If no elements passed the test, an empty iterable\n * will be returned.\n */\nexport function filterArray<T, TTarget extends T>(\n    array: ArrayLike<T>,\n    test: (this: void, element: T) => element is TTarget,\n): PushIterable<TTarget>;\n\n/**\n * Creates a {@link PushIterable | push iterable} with all `array` elements that pass the test implemented by\n * the provided function.\n *\n * @typeParam T - A type of array elements.\n * @param array - A source array.\n * @param test - A predicate function to test each element. Returns `true` to keep the element, or `false` otherwise.\n * It accepts the tested element as the only parameter.\n *\n * @returns New push iterable with the elements that pass the test. If no elements passed the test, an empty iterable\n * will be returned.\n */\nexport function filterArray<T>(\n    array: ArrayLike<T>,\n    test: (this: void, element: T) => boolean,\n): PushIterable<T>;\n\nexport function filterArray<T>(\n    array: ArrayLike<T>,\n    test: (this: void, element: T) => boolean,\n): PushIterable<T> {\n  return makePushIterable(iterateOverFilteredIndexed(array, arrayElementOf, test));\n}\n","import type { IndexedElements } from '../base/iterate-over-indexed.impl';\nimport { PushIterator$dontIterate, PushIterator$iterator, PushIterator$noNext } from '../base/make-push-iterator';\nimport { overNone } from '../construction';\nimport { PushIterable, PushIterator__symbol } from '../push-iterable';\nimport type { PushIterator } from '../push-iterator';\n\n/**\n * @internal\n */\nexport function iterateOverFilteredIndexed<TIndexed extends IndexedElements, T>(\n    indexed: TIndexed,\n    elementOf: (indexed: TIndexed, index: number) => T,\n    test: (this: void, element: T) => boolean,\n): PushIterable.Iterate<T> {\n  return accept => {\n\n    let i = 0;\n    const forNext = (accept: PushIterator.Acceptor<T>): boolean => {\n      for (; ;) {\n        if (i >= indexed.length) {\n          return false;\n        }\n\n        const value = elementOf(indexed, i++);\n\n        if (test(value)) {\n\n          const status = accept(value);\n\n          if (typeof status === 'boolean') {\n            return status;\n          }\n        }\n      }\n    };\n\n    if (accept && !forNext(accept)) {\n      return overNone();\n    }\n\n    let over = false;\n    let iterate = (accept?: PushIterator.Acceptor<T>): void => {\n      if (accept && !forNext(accept)) {\n        over = true;\n        iterate = PushIterator$dontIterate;\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        next = PushIterator$noNext;\n      }\n    };\n    let next = (): IteratorResult<T> => {\n      for (; ;) {\n        if (i >= indexed.length) {\n          over = true;\n          iterate = PushIterator$dontIterate;\n          next = PushIterator$noNext;\n          return { done: true } as IteratorReturnResult<T>;\n        }\n\n        const value = elementOf(indexed, i++);\n\n        if (test(value)) {\n          return { value };\n        }\n      }\n    };\n\n    return {\n      [Symbol.iterator]: PushIterator$iterator,\n      [PushIterator__symbol](accept) {\n        iterate(accept);\n        return this;\n      },\n      next: () => next(),\n      isOver: () => over,\n    };\n  };\n}\n","import { isPushIterable, iteratorOf, makePushIterable, makePushIterator, pushHead } from '../base';\nimport { overNone } from '../construction';\nimport type { PushIterable } from '../push-iterable';\nimport type { PushIterator } from '../push-iterator';\n\n/**\n * Creates a {@link PushIterable | push iterable} with all `source` iterable elements extending the given type.\n *\n * @typeParam T - A type of source elements.\n * @typeParam TTarget - Target type.\n * @param source - A source iterable.\n * @param test - A predicate function to test that element extends the type `TTarget`. Returns `true` to keep the\n * element, or`false` otherwise. It accepts the tested element as the only parameter.\n *\n * @returns New push iterable with the elements that pass the test. If no elements passed the test, an empty iterable\n * will be returned.\n */\nexport function filterIt<T, TTarget extends T>(\n    source: Iterable<T>,\n    test: (this: void, element: T) => element is TTarget,\n): PushIterable<TTarget>;\n\n/**\n * Creates a {@link PushIterable | push iterable} with all `source` iterable elements that pass the test implemented by\n * the provided function.\n *\n * @typeParam T - A type of source elements.\n * @param source - A source iterable.\n * @param test - A predicate function to test each element. Returns `true` to keep the element, or `false` otherwise.\n * It accepts the tested element as the only parameter.\n *\n * @returns New push iterable with the elements that pass the test. If no elements passed the test, an empty iterable\n * will be returned.\n */\nexport function filterIt<T>(\n    source: Iterable<T>,\n    test: (this: void, element: T) => boolean,\n): PushIterable<T>;\n\nexport function filterIt<T>(\n    source: Iterable<T>,\n    test: (this: void, element: T) => boolean,\n): PushIterable<T> {\n  return makePushIterable(accept => {\n\n    const forNext = isPushIterable(source) ? filterPusher(source, test) : filterRawPusher(source, test);\n\n    return accept && !forNext(accept) ? overNone() : makePushIterator(forNext);\n  });\n}\n\n/**\n * @internal\n */\nfunction filterPusher<T>(\n    source: PushIterable<T>,\n    test: (this: void, element: T) => boolean,\n): PushIterator.Pusher<T> {\n  return accept => {\n\n    const tail = pushHead(\n        source,\n        element => {\n          if (test(element)) {\n            return accept(element);\n          }\n          return;\n        },\n    );\n\n    source = tail;\n\n    return !tail.isOver();\n  };\n}\n\n/**\n * @internal\n */\nfunction filterRawPusher<T>(\n    source: Iterable<T>,\n    test: (this: void, element: T) => boolean,\n): PushIterator.Pusher<T> {\n\n  const it = iteratorOf(source);\n\n  if (isPushIterable(it)) {\n    return filterPusher(it, test);\n  }\n\n  return accept => {\n    for (; ;) {\n\n      const next = it.next();\n\n      if (next.done) {\n        return false;\n      }\n\n      const value = next.value;\n\n      if (test(value)) {\n\n        const status = accept(value);\n\n        if (typeof status === 'boolean') {\n          return status;\n        }\n      }\n    }\n  };\n}\n","import { makePushIterable } from '../base';\nimport type { PushIterable } from '../push-iterable';\nimport { iterateOverFlattenedIndexed } from './iterate-over-flattened-indexed.impl';\n\n/**\n * Flattens the source `array` of iterables into new {@link PushIterable | push iterable}.\n *\n * Calling this function is the same as calling `flatMapArray(source, element => element)`.\n *\n * @typeParam T - A type of converted elements.\n * @param array - A source array-like instance of iterables.\n *\n * @returns New push iterable with each element of `array` being flattened.\n */\nexport function flatMapArray<T>(array: ArrayLike<Iterable<T>>): PushIterable<T>;\n\n/**\n * First maps each element of the source `array` using a mapping function, then flattens the result into new\n * {@link PushIterable | push iterable}.\n *\n * @typeParam TSrc - A type of array elements.\n * @typeParam TConv - A type of converted elements.\n * @param array - A source array-like instance of elements to convert.\n * @param convert - A function that produces new iterable, taking array element as the only parameter.\n *\n * @returns New push iterable with each element being the flattened result of the `convert` function call.\n */\nexport function flatMapArray<TSrc, TConv>(\n    array: ArrayLike<TSrc>,\n    convert: (this: void, element: TSrc) => Iterable<TConv>,\n): PushIterable<TConv>;\n\nexport function flatMapArray<TSrc, TConv>(\n    array: ArrayLike<TSrc>,\n    convert?: (this: void, element: TSrc) => Iterable<TConv>,\n): PushIterable<TConv> {\n  return makePushIterable(iterateOverFlattenedIndexed<ArrayLike<TSrc>, TConv>(\n      array,\n      convert\n          ? (array, index) => convert(array[index])\n          : flatMapArray$defaultElementOf,\n  ));\n}\n\n/**\n * @internal\n */\nfunction flatMapArray$defaultElementOf<TSrc, TConv>(\n    array: ArrayLike<TSrc>,\n    index: number,\n): Iterable<TConv> {\n  return array[index] as unknown as Iterable<TConv>;\n}\n\n","import { makePushIterator } from '../base';\nimport type { IndexedElements } from '../base/iterate-over-indexed.impl';\nimport { overNone } from '../construction';\nimport { itsHead } from '../consumption';\nimport type { PushIterable } from '../push-iterable';\nimport type { PushIterator } from '../push-iterator';\n\n/**\n * @internal\n */\nexport function iterateOverFlattenedIndexed<TIndexed extends IndexedElements, T>(\n    indexed: TIndexed,\n    elementsOf: (indexed: TIndexed, index: number) => Iterable<T>,\n): PushIterable.Iterate<T> {\n  return accept => {\n\n    let i = 0;\n    let subs: Iterable<T> | undefined;\n\n    const forNext = (accept: PushIterator.Acceptor<T>): boolean => {\n      if (i >= indexed.length) {\n        return false;\n      }\n      if (!subs) {\n        subs = elementsOf(indexed, i);\n      }\n\n      for (; ;) {\n\n        let status: boolean | void;\n        const subsTail: PushIterator<T> = itsHead<T>(subs, element => status = accept(element));\n\n        if (subsTail.isOver()) {\n          if (++i >= indexed.length) {\n            return false;\n          }\n          subs = elementsOf(indexed, i);\n        } else {\n          subs = subsTail;\n        }\n\n        if (typeof status === 'boolean') {\n          return status;\n        }\n      }\n    };\n\n    return accept && !forNext(accept) ? overNone() : makePushIterator(forNext);\n  };\n}\n","import { isPushIterable, iteratorOf, makePushIterable, makePushIterator, pushHead } from '../base';\nimport { overNone } from '../construction';\nimport { itsHead } from '../consumption';\nimport type { PushIterable } from '../push-iterable';\nimport type { PushIterator } from '../push-iterator';\n\n/**\n * Flattens the source iterable of iterables into new {@link PushIterable | push iterable}.\n *\n * Calling this function is the same as calling `flatMapIt(source, element => element)`.\n *\n * @typeParam T - A type of converted elements.\n * @param source - A source iterable of iterables.\n *\n * @returns New push iterable with each element of `source` being flattened.\n */\nexport function flatMapIt<T>(source: Iterable<Iterable<T>>): PushIterable<T>;\n\n/**\n * First maps each element of the `source` iterable using a mapping function, then flattens the result into new\n * {@link PushIterable | push iterable}.\n *\n * @typeParam TSrc - A type of source elements.\n * @typeParam TConv - A type of converted elements.\n * @param source - A source iterable of elements to convert.\n * @param convert - A function that produces new iterable, taking the source element as the only parameter.\n *\n * @returns New push iterable with each element being the flattened result of the `convert` function call.\n */\nexport function flatMapIt<TSrc, TConv>(\n    source: Iterable<TSrc>,\n    convert: (this: void, element: TSrc) => Iterable<TConv>,\n): PushIterable<TConv>;\n\nexport function flatMapIt<TSrc, TConv>(\n    source: Iterable<TSrc>,\n    convert: (this: void, element: TSrc) => Iterable<TConv> = flatMapIt$defaultConverter,\n): PushIterable<TConv> {\n  return makePushIterable(accept => {\n\n    const forNext = isPushIterable(source) ? flatMapPusher(source, convert) : flatMapRawPusher(source, convert);\n\n    return accept && !forNext(accept) ? overNone() : makePushIterator(forNext);\n  });\n}\n\n/**\n * @internal\n */\nfunction flatMapPusher<TSrc, TConv>(\n    source: PushIterable<TSrc>,\n    convert: (this: void, element: TSrc) => Iterable<TConv>,\n): PushIterator.Pusher<TConv> {\n\n  let subs: Iterable<TConv> | undefined;\n  let lastSrc = false;\n\n  return accept => {\n    for (; ;) {\n      while (!subs) {\n\n        const sourceTail = pushHead(source, src => {\n          subs = convert(src);\n          return true;\n        });\n\n        source = sourceTail;\n\n        if (sourceTail.isOver()) {\n          if (!subs) {\n            return false;\n          }\n          lastSrc = true;\n        }\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-invalid-void-type\n      let status: boolean | void;\n      const subsTail: PushIterator<TConv> = itsHead(subs, element => status = accept(element));\n\n      if (subsTail.isOver()) {\n        subs = undefined;\n        if (lastSrc) {\n          return false;\n        }\n      } else {\n        subs = subsTail;\n      }\n\n      if (typeof status === 'boolean') {\n        return status;\n      }\n    }\n  };\n}\n\n/**\n * @internal\n */\nfunction flatMapRawPusher<TSrc, TConv>(\n    source: Iterable<TSrc>,\n    convert: (this: void, element: TSrc) => Iterable<TConv>,\n): PushIterator.Pusher<TConv> {\n\n  const it = iteratorOf(source);\n\n  if (isPushIterable(it)) {\n    return flatMapPusher(it, convert);\n  }\n\n  let subs: Iterable<TConv> | undefined;\n\n  return accept => {\n    for (; ;) {\n      if (!subs) {\n\n        const next = it.next();\n\n        if (next.done) {\n          return false;\n        }\n\n        subs = convert(next.value);\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-invalid-void-type\n      let status: boolean | void;\n      const subsTail: PushIterator<TConv> = itsHead(subs, element => status = accept(element));\n\n      subs = subsTail.isOver() ? undefined : subsTail;\n      if (typeof status === 'boolean') {\n        return status;\n      }\n    }\n  };\n}\n\n/**\n * @internal\n */\nfunction flatMapIt$defaultConverter<T, TConv>(\n    element: T,\n): Iterable<TConv> {\n  return element as unknown as Iterable<TConv>;\n}\n\n","import { isPushIterable, iteratorOf, makePushIterable, makePushIterator, pushHead } from '../base';\nimport { overNone } from '../construction';\nimport type { PushIterable } from '../push-iterable';\nimport type { PushIterator } from '../push-iterator';\n\n/**\n * Creates a {@link PushIterable | push iterable} with the results of calling a provided function on every element\n * of the `source` iterable.\n *\n * @typeParam TSrc - A type of source elements.\n * @typeParam TConv - A type of converted elements.\n * @param source - A source iterable.\n * @param convert - A function that produces an element of the new iterable, taking the source element as the only\n * parameter.\n *\n * @returns New push iterable of transformed elements.\n */\nexport function mapIt<TSrc, TConv>(\n    source: Iterable<TSrc>,\n    convert: (this: void, element: TSrc) => TConv,\n): PushIterable<TConv> {\n  return makePushIterable(accept => {\n\n    const forNext = isPushIterable(source) ? mapPusher(source, convert) : mapRawPusher(source, convert);\n\n    return accept && !forNext(accept) ? overNone() : makePushIterator(forNext);\n  });\n}\n\n/**\n * @internal\n */\nfunction mapPusher<TSrc, TConv>(\n    source: PushIterable<TSrc>,\n    convert: (this: void, element: TSrc) => TConv,\n): PushIterator.Pusher<TConv> {\n  return accept => {\n\n    const tail = pushHead(source, element => accept(convert(element)));\n\n    source = tail;\n\n    return !tail.isOver();\n  };\n}\n\n/**\n * @internal\n */\nfunction mapRawPusher<TSrc, TConv>(\n    source: Iterable<TSrc>,\n    convert: (this: void, element: TSrc) => TConv,\n): PushIterator.Pusher<TConv> {\n\n  const it = iteratorOf(source);\n\n  if (isPushIterable(it)) {\n    return mapPusher(it, convert);\n  }\n\n  return accept => {\n    for (; ;) {\n\n      const next = it.next();\n\n      if (next.done) {\n        return false;\n      }\n\n      const status = accept(convert(next.value));\n\n      if (typeof status === 'boolean') {\n        return status;\n      }\n    }\n  };\n}\n","import { isPushIterable, iteratorOf, makePushIterable, makePushIterator, pushHead } from '../base';\nimport { overNone } from '../construction';\nimport type { PushIterable } from '../push-iterable';\nimport type { PushIterator } from '../push-iterator';\n\n/**\n * Creates a {@link PushIterable | push iterable} with the values of elements of the `source` iterable.\n *\n * Element value is the result of provided function call, except `false`, `null`, and `undefined` which are filtered\n * out.\n *\n * This can be used as a more effective {@link mapIt} / {@link filterIt} combination.\n *\n * @typeParam T - A type of source elements.\n * @typeParam TValue - A type of source element values.\n * @param source - A source iterable.\n * @param valueOf - A function that values elements, taking the source element as the only parameter, and returning\n * either its value, or `false`/`null`/`undefined` to filter it out.\n *\n * @returns New push iterable with the element values.\n */\nexport function valueIt<T, TValue>(\n    source: Iterable<T>,\n    valueOf: (this: void, element: T) => TValue | false | null | undefined,\n): PushIterable<TValue> {\n  return makePushIterable(accept => {\n\n    const forNext = isPushIterable(source) ? valuePusher(source, valueOf) : valueRawPusher(source, valueOf);\n\n    return accept && !forNext(accept) ? overNone() : makePushIterator(forNext);\n  });\n}\n\n/**\n * @internal\n */\nfunction valuePusher<T, TValue>(\n    source: PushIterable<T>,\n    valueOf: (this: void, element: T) => TValue | false | null | undefined,\n): PushIterator.Pusher<TValue> {\n  return accept => {\n\n    const tail = pushHead(\n        source,\n        element => {\n\n          const value = valueOf(element);\n\n          if (value != null && value !== false) {\n            return accept(value);\n          }\n          return;\n        },\n    );\n\n    source = tail;\n\n    return !tail.isOver();\n  };\n}\n\n/**\n * @internal\n */\nfunction valueRawPusher<T, TValue>(\n    source: Iterable<T>,\n    valueOf: (this: void, element: T) => TValue | false | null | undefined,\n): PushIterator.Pusher<TValue> {\n\n  const it = iteratorOf(source);\n\n  if (isPushIterable(it)) {\n    return valuePusher(it, valueOf);\n  }\n\n  return accept => {\n    for (; ;) {\n\n      const next = it.next();\n\n      if (next.done) {\n        return false;\n      }\n\n      const value = valueOf(next.value);\n\n      if (value != null && value !== false) {\n\n        const status = accept(value);\n\n        if (typeof status === 'boolean') {\n          return status;\n        }\n      }\n    }\n  };\n}\n","import type { PushIterable } from '../push-iterable';\nimport { mapIt } from '../transformation';\nimport type { ObjectEntry } from './object-entry';\nimport { overKeys } from './over-keys';\n\n/**\n * Creates a {@link PushIterable | push iterable} over the property key/value entries of the given object.\n *\n * A list of keys is constructed using `Reflect.ownKeys()`.\n *\n * @typeParam TObj - Object type.\n *\n * @param source - An object to select keys and values from.\n *\n * @returns New push iterable of object property entries.\n */\nexport function overEntries<TObj extends object>(source: TObj): PushIterable<ObjectEntry<TObj>> {\n  return mapIt(\n      overKeys(source),\n      key => [key, source[key]],\n  );\n}\n","/**\n * @internal\n */\nexport let Supply$unexpectedAbort: (reason: unknown) => void = Supply$unexpectedAbort$byDefault;\n\n/**\n * @internal\n */\nexport function Supply$unexpectedAbort$handle(handler = Supply$unexpectedAbort$byDefault): void {\n  Supply$unexpectedAbort = handler;\n}\n\nfunction Supply$unexpectedAbort$byDefault(reason: unknown): void {\n  console.error('Supply aborted unexpectedly.', reason);\n}\n","import { Supply$unexpectedAbort } from './unexpected-abort';\n\nlet Supply$off = false;\nlet Supply$off$unexpected$reasons: Set<unknown> | undefined;\n\n/**\n * @internal\n */\nexport function Supply$off$start(): boolean {\n\n  const prevOff = Supply$off;\n\n  Supply$off = true;\n\n  return prevOff;\n}\n\n/**\n * @internal\n */\nexport function Supply$off$unexpected(reason: unknown): void {\n  if (reason !== undefined) {\n    if (!Supply$off$unexpected$reasons) {\n      Supply$off$unexpected$reasons = new Set<unknown>();\n    }\n    Supply$off$unexpected$reasons.add(reason);\n  }\n}\n\n/**\n * @internal\n */\nexport function Supply$off$end(prevOff: boolean): void {\n  Supply$off = prevOff;\n  if (!prevOff) {\n\n    const reasons = Supply$off$unexpected$reasons;\n\n    if (reasons) {\n      Supply$off$unexpected$reasons = undefined;\n      for (const reason of reasons) {\n        Supply$unexpectedAbort(reason);\n      }\n    }\n  }\n}\n","import type { Supply } from '../supply';\nimport { Supply$off$end, Supply$off$start, Supply$off$unexpected } from './off';\n\n/**\n * @internal\n */\nexport const SupplyState__symbol = (/*#__PURE__*/ Symbol('SupplyState'));\n\n/**\n * @internal\n */\nexport interface SupplyState {\n\n  readonly isOff: boolean;\n\n  off(supply: Supply, reason?: unknown): void;\n\n  whenOff(supply: Supply, callback: (reason?: unknown) => void): void;\n\n}\n\nconst SupplyState$done: SupplyState = {\n  isOff: true,\n  off: SupplyState$done$off,\n  whenOff(_supply: Supply, callback: (reason?: unknown) => void) {\n    callback();\n  },\n};\n\nfunction SupplyState$off(reason: unknown): SupplyState {\n  if (reason === undefined) {\n    return SupplyState$done;\n  }\n\n  return {\n    isOff: true,\n    off: SupplyState$done$off,\n    whenOff(_supply: Supply, callback: (reason?: unknown) => void) {\n      callback(reason);\n    },\n  };\n}\n\nfunction SupplyState$done$off(_supply: Supply, _reason?: unknown): void {\n  /* no off */\n}\n\n/**\n * @internal\n */\nexport const SupplyState$noCallback: SupplyState = {\n  isOff: false,\n  off(supply: Supply, reason?: unknown): void {\n\n    const prevOff = Supply$off$start();\n\n    try {\n      supply[SupplyState__symbol] = SupplyState$off(reason);\n      Supply$off$unexpected(reason);\n    } finally {\n      Supply$off$end(prevOff);\n    }\n  },\n  whenOff(supply: Supply, callback: (reason?: unknown) => void): void {\n    supply[SupplyState__symbol] = SupplyState$withCallback(callback);\n  },\n};\n\n/**\n * @internal\n */\nexport function SupplyState$withCallback(off: (this: void, reason?: unknown) => void): SupplyState {\n  return {\n    isOff: false,\n    off(supply: Supply, reason?: unknown): void {\n\n      const prevOff = Supply$off$start();\n\n      try {\n        supply[SupplyState__symbol] = SupplyState$off(reason);\n        off(reason);\n      } finally {\n        Supply$off$end(prevOff);\n      }\n    },\n    whenOff(_supply: Supply, callback: (reason?: unknown) => void): void {\n\n      const prev = off;\n\n      off = reason => {\n        prev(reason);\n        callback(reason);\n      };\n    },\n  };\n}\n","import type { SupplyState } from './impl';\nimport {\n  Supply$unexpectedAbort$handle,\n  SupplyState$noCallback,\n  SupplyState$withCallback,\n  SupplyState__symbol,\n} from './impl';\nimport type { SupplyPeer } from './supply-peer';\n\n/**\n * Supply handle.\n *\n * Represents a supply of something.\n *\n * The supply can be {@link off cut off}, and can {@link whenOff inform} on cutting off.\n */\nexport class Supply implements SupplyPeer {\n\n  /**\n   * Assigns unexpected abort handler.\n   *\n   * When a supply {@link off aborted}, and there is no {@link whenOff cut off callback} registered, the given handler\n   * will be called with the abort reason.\n   *\n   * By default, the unexpected abort reason will be logged to console.\n   *\n   * @param handler - A handler to call on unexpected abort, or `undefined` to reset to default one.\n   */\n  static onUnexpectedAbort(handler?: (this: void, reason: unknown) => void): void {\n    Supply$unexpectedAbort$handle(handler);\n  }\n\n  /**\n   * @internal\n   */\n  [SupplyState__symbol]: SupplyState;\n\n  /**\n   * Constructs new supply instance.\n   *\n   * @param off - A function to call when the supply is {@link Supply.off cut off}. Accepts optional cut off reason\n   * as its only parameter. No-op by default.\n   */\n  constructor(off?: (this: void, reason?: unknown) => void) {\n    this[SupplyState__symbol] = off ? SupplyState$withCallback(off) : SupplyState$noCallback;\n  }\n\n  /**\n   * `this` supply instance.\n   */\n  get supply(): this {\n    return this;\n  }\n\n  /**\n   * Whether this supply is {@link off cut off} already.\n   *\n   * `true` means nothing would be supplied any more.\n   */\n  get isOff(): boolean {\n    return this[SupplyState__symbol].isOff;\n  }\n\n  /**\n   * Cuts off this supply.\n   *\n   * After this method call nothing would be supplied any more.\n   *\n   * Calling this method for the second time has no effect.\n   *\n   * @param reason - An optional reason why the supply is cut off. It will be reported to {@link whenOff} callbacks.\n   * By convenience, an absent reason means the supply is done successfully.\n   *\n   * @returns The cut off supply instance.\n   */\n  off(reason?: unknown): Supply {\n    this[SupplyState__symbol].off(this, reason);\n    return this;\n  }\n\n  /**\n   * Registers a callback function that will be called as soon as this supply is {@link off cut off}. This callback\n   * will be called immediately if {@link isOff} is `true`.\n   *\n   * @param callback - A callback function accepting optional cut off reason as its only parameter.\n   * By convenience an `undefined` reason means the supply is done successfully.\n   *\n   * @returns `this` instance.\n   */\n  whenOff(callback: (this: void, reason?: unknown) => void): this {\n    this[SupplyState__symbol].whenOff(this, callback);\n    return this;\n  }\n\n  /**\n   * Builds a promise that will be resolved once this supply is {@link off done}.\n   *\n   * @returns A promise that will be successfully resolved once this supply is cut off without a reason, or rejected\n   * once this supply is cut off with any reason except `undefined`.\n   */\n  whenDone(): Promise<void> {\n    return new Promise((resolve, reject) => this.whenOff(\n        reason => reason === undefined ? resolve() : reject(reason),\n    ));\n  }\n\n  /**\n   * Makes another supply depend on this one.\n   *\n   * Once this supply is {@link off cut off}, `another` one will be cut off with the same reason.\n   *\n   * Calling this method has the same effect as calling `another.supply.needs(this)`.\n   *\n   * @param another - A supply peer to make dependent on this one.\n   *\n   * @returns `this` instance.\n   */\n  cuts(another: SupplyPeer): this {\n    another.supply.needs(this);\n    return this;\n  }\n\n  /**\n   * Makes this supply depend on another one.\n   *\n   * Once `another` supply is {@link off cut off}, this one will be cut off with the same reason.\n   *\n   * @param another - A supply peer to make this one depend on.\n   *\n   * @returns `this` instance.\n   */\n  needs(another: SupplyPeer): this {\n    another.supply.whenOff(reason => this.off(reason));\n    return this;\n  }\n\n  /**\n   * Makes this and another supply depend on each other.\n   *\n   * Calling this method is the same as calling `.needs(another).cuts(another)`.\n   *\n   * @param another - A supply peer to make this one to mutually depend on.\n   *\n   * @returns `this` instance.\n   */\n  as(another: SupplyPeer): this {\n    return this.needs(another).cuts(another);\n  }\n\n}\n","import { Supply } from './supply';\nimport type { SupplyPeer } from './supply-peer';\n\n/**\n * @internal\n */\nclass AlwaysSupply extends Supply {\n\n  get isOff(): false {\n    return false;\n  }\n\n  off(_reason?: unknown): Supply {\n    return this;\n  }\n\n  whenOff(_callback: (this: void, reason?: unknown) => void): this {\n    return this;\n  }\n\n  cuts(_another: SupplyPeer): this {\n    return this;\n  }\n\n  needs(_another: SupplyPeer): this {\n    return this;\n  }\n\n}\n\n/**\n * @internal\n */\nconst alwaysSupply$ = (/*#__PURE__*/ new AlwaysSupply());\n\n/**\n * Builds an always-supply instance.\n *\n * The {@link Supply.off} method of the returned supply does nothing.\n *\n * @returns A supply instance that can not be cut off.\n */\nexport function alwaysSupply(): Supply {\n  return alwaysSupply$;\n}\n\n/**\n * Checks whether the given supply is an {@link AlwaysSupply | always-supply} instance.\n *\n * @param supply - A supply to check.\n *\n * @returns `true` is the given `supply` can not be cut off, or `false` otherwise.\n */\nexport function isAlwaysSupply(supply: Supply): boolean {\n  return supply === alwaysSupply$;\n}\n","import { Supply } from './supply';\nimport type { SupplyPeer } from './supply-peer';\n\n/**\n * @internal\n */\nclass NeverSupply extends Supply {\n\n  get isOff(): true {\n    return true;\n  }\n\n  off(): this {\n    return this;\n  }\n\n  whenOff(callback: (reason?: any) => void): this {\n    callback();\n    return this;\n  }\n\n  cuts(another: SupplyPeer): this {\n    another.supply.off();\n    return this;\n  }\n\n  needs(_another: SupplyPeer): this {\n    return this;\n  }\n\n}\n\n/**\n * @internal\n */\nconst neverSupply$ = (/*#__PURE__*/ new NeverSupply());\n\n/**\n * Builds a never-supply instance.\n *\n * @returns A supply instance that is already cut off without any particular reason.\n */\nexport function neverSupply(): Supply {\n  return neverSupply$;\n}\n","import type { ContextKey } from './key';\n\n/**\n * An error indicating the absence of context value with the given key.\n */\nexport class ContextKeyError extends Error {\n\n  /**\n   * A missing value key.\n   */\n  readonly key: ContextKey<any, any, any>;\n\n  /**\n   * Constructs an invalid context key error.\n   *\n   * @param key - Missing value key.\n   * @param message - Arbitrary error message.\n   */\n  constructor(key: ContextKey<any, any, any>, message = `There is no value with key ${key}`) {\n    super(message);\n    this.key = key;\n  }\n\n}\n","import type { ContextRef } from '../context-ref';\nimport type { ContextSeedKey } from './context-seed-key';\nimport type { ContextValueSlot } from './context-value-slot';\n\n/**\n * A symbol of the property containing a {@link ContextKey} instance.\n */\nexport const ContextKey__symbol = (/*#__PURE__*/ Symbol('ContextKey'));\n\n/**\n * Context value key.\n *\n * Every key should be an unique instance of this class.\n *\n * Multiple source values pay be provided per per value key. They all grouped into single seed.\n * The value is grown from this seed by {@link ContextKey.grow} method.\n *\n * @typeParam TValue - Context value type.\n * @typeParam TSrc - Source value type.\n * @typeParam TSeed - Value seed type.\n */\nexport abstract class ContextKey<TValue, TSrc = TValue, TSeed = unknown> implements ContextRef<TValue, TSrc> {\n\n  /**\n   * Human-readable key name.\n   *\n   * This is not necessarily unique.\n   */\n  readonly name: string;\n\n  /**\n   * A key of context value holding a seed of the value associated with this key.\n   *\n   * Different context value keys may have the same {@link seedKey} to grow them from the same seed.\n   */\n  abstract readonly seedKey: ContextSeedKey<TSrc, TSeed>;\n\n  /**\n   * Constructs context value key.\n   *\n   * @param name - Human-readable key name.\n   */\n  protected constructor(name: string) {\n    this.name = name;\n  }\n\n  /**\n   * Always the key itself.\n   *\n   * This is to use this context value key both as a context value request and its definition target.\n   */\n  get [ContextKey__symbol](): this {\n    return this;\n  }\n\n  /**\n   * Grows context value out of its seed.\n   *\n   * @param slot - Context value slot to insert the value to.\n   */\n  abstract grow(slot: ContextValueSlot<TValue, TSrc, TSeed>): void;\n\n  toString(): string {\n    return `ContextKey(${this.name})`;\n  }\n\n}\n","import type { ContextValues } from '../context-values';\nimport { ContextKey } from './context-key';\nimport type { ContextSeeder } from './context-seeder';\nimport type { ContextValueSlot } from './context-value-slot';\n\n/**\n * A key of context value holding a seed of context value.\n *\n * @typeParam TSrc - Source value type.\n * @typeParam TSeed - Value seed type.\n */\nexport abstract class ContextSeedKey<TSrc, TSeed> extends ContextKey<TSeed, TSrc, TSeed> {\n\n  /**\n   * Constructs context value sources key.\n   *\n   * @param key - A key of context value having its sources associated with this key.\n   */\n  constructor(key: ContextKey<unknown, TSrc>) {\n    super(`${key.name}:seed`);\n  }\n\n  /**\n   * Always refers to itself.\n   */\n  get seedKey(): this {\n    return this;\n  }\n\n  /**\n   * Creates a seeder for values associated with this key.\n   *\n   * @typeParam TCtx - Context type.\n   *\n   * @returns New value seeder instance.\n   */\n  abstract seeder<TCtx extends ContextValues>(): ContextSeeder<TCtx, TSrc, TSeed>;\n\n  grow(opts: ContextValueSlot<TSeed, TSrc, TSeed>): void {\n\n    const { seeder, seed } = opts;\n\n    if (!seeder.isEmpty(seed)) {\n      opts.insert(seed);\n    } else if (!opts.hasFallback) {\n      opts.insert(seed);\n    }\n  }\n\n}\n","import type { ContextRequest } from './context-request';\nimport type { ContextSupply } from './conventional';\n\n/**\n * The values available from context.\n *\n * The values are available by their keys.\n */\nexport abstract class ContextValues {\n\n  /**\n   * Returns a value associated with the given key.\n   *\n   * @typeParam TValue - A type of associated value.\n   * @param request - Context value request with target key.\n   * @param opts - Context value request options.\n   *\n   * @returns Associated value or `null` when there is no associated value.\n   */\n  abstract get<TValue>(request: ContextRequest<TValue>, opts: ContextRequest.OrNull<TValue>): TValue | null;\n\n  /**\n   * Returns a value associated with the given key.\n   *\n   * @typeParam TValue - A type of associated value.\n   * @param request - Context value request with target key.\n   * @param opts - Context value request options.\n   *\n   * @returns Associated value or `undefined` when there is no associated value.\n   */\n  abstract get<TValue>(request: ContextRequest<TValue>, opts: ContextRequest.OrUndefined<TValue>): TValue | undefined;\n\n  /**\n   * Returns a value associated with the given key.\n   *\n   * @typeParam TValue - A type of associated value.\n   * @param request - Context value request with target key.\n   * @param opts - Context value request options.\n   *\n   * @returns Associated value. Or the default one when there is no associated value. Or key default when there is\n   * neither.\n   *\n   * @throws Error  If there is no value associated with the given key, the default value is not provided,\n   * and the key has no default value.\n   */\n  abstract get<TValue>(request: ContextRequest<TValue>, opts?: ContextRequest.OrFallback<TValue>): TValue;\n\n}\n\nexport interface ContextValues {\n\n  /**\n   * Context values supply.\n   *\n   * When provided, this value is available under {@link ContextSupply} key, unless overridden.\n   */\n  readonly supply?: ContextSupply;\n\n}\n","import type { ContextValues } from '../context-values';\n\n/**\n * A key of {@link Contextual contextual value reference} method resolving a contextual instance.\n */\nexport const Contextual__symbol = (/*#__PURE__*/ Symbol('Contextual'));\n\n/**\n * Contextual value reference.\n *\n * @typeParam T - Referred contextual instance type.\n * @typeParam TCtx - Supported context type.\n */\nexport interface Contextual<T, TCtx extends ContextValues = ContextValues> {\n\n  /**\n   * Resolves a contextual instance for the target context.\n   *\n   * @param context - Target context.\n   *\n   * @returns Either contextual instance, or `null`/`undefined` when not resolved.\n   */\n  [Contextual__symbol](context: TCtx): T | null | undefined;\n\n}\n\nexport namespace Contextual {\n\n  /**\n   * Mandatory contextual value reference.\n   *\n   * Always resolves to some value.\n   *\n   * @typeParam T - Referred contextual instance type.\n   * @typeParam TCtx - Supported context type.\n   */\n  export interface Mandatory<T, TCtx extends ContextValues = ContextValues> {\n\n    /**\n     * Resolves a contextual instance for the target context.\n     *\n     * @param context - Target context.\n     *\n     * @returns Contextual instance.\n     */\n    [Contextual__symbol](context: TCtx): T;\n\n  }\n\n}\n\n/**\n * Checks whether the given value is a {@link Contextual.Mandatory mandatory contextual reference}.\n *\n * @typeParam T - Expected referred contextual instance type.\n * @typeParam TCtx - Expected context type.\n * @typeParam TOther - Another type the value may have.\n * @param value - A value to check.\n *\n * @returns `true` if the given `value` has a {@link Contextual__symbol} method that always returns some value,\n * or `false` otherwise.\n */\nexport function isContextual<T, TCtx extends ContextValues = ContextValues, TOther = unknown>(\n    value: Contextual.Mandatory<T, TCtx> | TOther,\n): value is Contextual.Mandatory<T, TCtx>;\n\n/**\n * Checks whether the given value is a {@link Contextual contextual reference}.\n *\n * @typeParam T - Expected referred contextual instance type.\n * @typeParam TCtx - Expected context type.\n * @typeParam TOther - Another type the value may have.\n * @param value - A value to check.\n *\n * @returns `true` if the given `value` has a {@link Contextual__symbol} method, or `false` otherwise.\n */\nexport function isContextual<T, TCtx extends ContextValues = ContextValues, TOther = unknown>(\n    value: Contextual<T, TCtx> | TOther,\n): value is Contextual<T, TCtx>;\n\nexport function isContextual<T, TCtx extends ContextValues = ContextValues, TOther = unknown>(\n    value: Contextual<T, TCtx> | TOther,\n): value is Contextual<T, TCtx> {\n  return !!value\n      && (typeof value === 'object' || typeof value === 'function')\n      && typeof (value as Partial<Contextual<T, TCtx>>)[Contextual__symbol] === 'function';\n}\n","import { lazyValue } from '@proc7ts/primitives';\nimport {\n  itsElements,\n  itsEmpty,\n  overElementsOf,\n  overIterator,\n  overNone,\n  PushIterable,\n  valueIt,\n} from '@proc7ts/push-iterator';\nimport { Supply } from '@proc7ts/supply';\nimport type { ContextValues } from '../context-values';\nimport type { ContextSeeder } from '../key';\nimport { ContextKey, ContextSeedKey } from '../key';\nimport type { ContextValueProvider } from '../registry';\n\n/**\n * @internal\n */\nclass IterativeContextSeeder<TCtx extends ContextValues, TSrc>\n    implements ContextSeeder<TCtx, TSrc, PushIterable<TSrc>> {\n\n  private readonly _providers = new Map<Supply, ContextValueProvider<TSrc, TCtx>>();\n\n  provide(provider: ContextValueProvider<TSrc, TCtx>): Supply {\n\n    const supply = new Supply();\n\n    this._providers.set(supply, provider);\n\n    return supply.whenOff(() => this._providers.delete(supply));\n  }\n\n  seed(context: TCtx, initial: Iterable<TSrc> = overNone()): PushIterable<TSrc> {\n    return overElementsOf(\n        initial,\n        iterativeSeed(context, this._providers),\n    );\n  }\n\n  isEmpty(seed: Iterable<TSrc>): boolean {\n    return itsEmpty(seed);\n  }\n\n  combine(first: Iterable<TSrc>, second: Iterable<TSrc>): PushIterable<TSrc> {\n    return overElementsOf(first, second);\n  }\n\n}\n\n/**\n * @internal\n */\nclass IterativeSeedKey<TSrc> extends ContextSeedKey<TSrc, PushIterable<TSrc>> {\n\n  seeder<TCtx extends ContextValues>(): IterativeContextSeeder<TCtx, TSrc> {\n    return new IterativeContextSeeder();\n  }\n\n}\n\n/**\n * Iterative context value key implementation.\n *\n * Collects value sources as iterable instance.\n *\n * A context value associated with this key is never changes once constructed.\n *\n * @typeParam TValue - Context value type.\n * @typeParam TSrc - Source value type.\n */\nexport abstract class IterativeContextKey<TValue, TSrc = TValue> extends ContextKey<TValue, TSrc, Iterable<TSrc>> {\n\n  readonly seedKey: ContextSeedKey<TSrc, Iterable<TSrc>>;\n\n  /**\n   * Constructs iterative context value key.\n   *\n   * @param name - Human-readable key name.\n   * @param seedKey - Value seed key. A new one will be constructed when omitted.\n   */\n  constructor(\n      name: string,\n      {\n        seedKey,\n      }: {\n        seedKey?: ContextSeedKey<TSrc, Iterable<TSrc>>;\n      } = {},\n  ) {\n    super(name);\n    this.seedKey = seedKey || new IterativeSeedKey(this);\n  }\n\n}\n\n/**\n * @internal\n */\nfunction iterativeSeed<TCtx extends ContextValues, TSrc>(\n    context: TCtx,\n    providers: Map<Supply, ContextValueProvider<TSrc, TCtx>>,\n): PushIterable<TSrc> {\n\n  // Lazily evaluated providers\n  const lazyProviders = itsElements(\n      overIterator(() => providers.values()),\n      provider => lazyValue(provider.bind(undefined, context)),\n  );\n\n  return valueIt(lazyProviders, provider => provider());\n}\n","import { valuesProvider } from '@proc7ts/primitives';\nimport { itsElements } from '@proc7ts/push-iterator';\nimport type { ContextRef } from '../context-ref';\nimport type { ContextKey, ContextKeyDefault, ContextSeedKey, ContextValueSlot } from '../key';\nimport { IterativeContextKey } from './iterative-context-key';\n\n/**\n * Multiple context value reference.\n *\n * Represents context value as read-only array of source values.\n *\n * @typeParam TSrc - TValue source type and context value item type.\n */\nexport type MultiContextRef<TSrc> = ContextRef<readonly TSrc[], TSrc>;\n\n/**\n * Multiple context values key.\n *\n * Represents context value as read-only array of source values.\n *\n * Associated with empty array by default.\n *\n * @typeParam TSrc - TValue source type and context value item type.\n */\nexport class MultiContextKey<TSrc>\n    extends IterativeContextKey<readonly TSrc[], TSrc>\n    implements MultiContextRef<TSrc> {\n\n  /**\n   * A provider of context value used when there is no value associated with this key.\n   */\n  readonly byDefault: ContextKeyDefault<readonly TSrc[], ContextKey<readonly TSrc[], TSrc>>;\n\n  /**\n   * Constructs multiple context values key.\n   *\n   * @param name - Human-readable key name.\n   * @param seedKey - Value seed key. A new one will be constructed when omitted.\n   * @param byDefault - Optional default value provider. If unspecified then the default value is empty array.\n   */\n  constructor(\n      name: string,\n      {\n        seedKey,\n        byDefault = valuesProvider(),\n      }: {\n        seedKey?: ContextSeedKey<TSrc, Iterable<TSrc>>;\n        byDefault?: ContextKeyDefault<readonly TSrc[], ContextKey<readonly TSrc[], TSrc>>;\n      } = {},\n  ) {\n    super(name, seedKey);\n    this.byDefault = byDefault;\n  }\n\n  grow(\n      slot: ContextValueSlot<readonly TSrc[], TSrc, Iterable<TSrc>>,\n  ): void {\n\n    const result = itsElements(slot.seed);\n\n    if (result.length) {\n      slot.insert(result);\n    } else if (!slot.hasFallback) {\n\n      const defaultSources = this.byDefault(slot.context, this);\n\n      if (defaultSources) {\n        slot.insert(Array.from(defaultSources));\n      }\n    }\n  }\n\n}\n\n","import { lazyValue, noop } from '@proc7ts/primitives';\nimport { Supply } from '@proc7ts/supply';\nimport type { ContextValues } from '../context-values';\nimport type { ContextSeeder } from '../key';\nimport { ContextKey, ContextSeedKey } from '../key';\nimport type { ContextValueProvider } from '../registry';\n\n/**\n * @internal\n */\nclass SimpleContextSeeder<TCtx extends ContextValues, TSrc>\n    implements ContextSeeder<TCtx, TSrc, SimpleContextKey.Seed<TSrc>> {\n\n  private readonly _providers: (readonly [ContextValueProvider<TSrc, TCtx>])[] = [];\n\n  provide(provider: ContextValueProvider<TSrc, TCtx>): Supply {\n\n    // Ensure the same provider may be registered multiple times\n    const entry: readonly [ContextValueProvider<TSrc, TCtx>] = [provider];\n\n    this._providers.unshift(entry);\n\n    return new Supply(() => this._providers.splice(this._providers.lastIndexOf(entry), 1));\n  }\n\n  seed(context: TCtx, initial?: SimpleContextKey.Seed<TSrc>): SimpleContextKey.Seed<TSrc> {\n\n    const { length } = this._providers;\n\n    if (!length) {\n      return initial || noop;\n    }\n\n    const makeSeed = (\n        [provider]: readonly [ContextValueProvider<TSrc, TCtx>],\n    ): SimpleContextKey.Seed<TSrc> => lazyValue(\n        provider.bind(undefined, context),\n    );\n\n    if (!initial && length === 1) {\n      return makeSeed(this._providers[0]);\n    }\n\n    const seeds: SimpleContextKey.Seed<TSrc>[] = this._providers.map(makeSeed);\n\n    if (initial) {\n      seeds.push(initial);\n    }\n\n    return combineSimpleSeeds(seeds);\n  }\n\n  isEmpty(seed: SimpleContextKey.Seed<TSrc>): boolean {\n    return seed() == null;\n  }\n\n  combine(\n      first: SimpleContextKey.Seed<TSrc>,\n      second: SimpleContextKey.Seed<TSrc>,\n  ): SimpleContextKey.Seed<TSrc> {\n    if (first === noop) {\n      return second;\n    }\n    if (second === noop) {\n      return first;\n    }\n    return combineSimpleSeeds([second, first]);\n  }\n\n}\n\n/**\n * @internal\n */\nfunction combineSimpleSeeds<TSrc>(\n    seeds: readonly SimpleContextKey.Seed<TSrc>[],\n): SimpleContextKey.Seed<TSrc> {\n  return lazyValue(() => {\n    for (const seed of seeds) {\n\n      const value = seed();\n\n      if (value != null) {\n        return value;\n      }\n    }\n    return;\n  });\n}\n\n/**\n * @internal\n */\nclass SimpleSeedKey<TSrc> extends ContextSeedKey<TSrc, SimpleContextKey.Seed<TSrc>> {\n\n  seeder<TCtx extends ContextValues>(): SimpleContextSeeder<TCtx, TSrc> {\n    return new SimpleContextSeeder();\n  }\n\n}\n\n/**\n * Simple context value key implementation.\n *\n * Collects the most recent source value.\n *\n * A context value associated with this key is never changes once constructed.\n *\n * @typeParam TValue - Context value type.\n * @typeParam TSrc - Source value type.\n */\nexport abstract class SimpleContextKey<TValue, TSrc = TValue>\n    extends ContextKey<TValue, TSrc, SimpleContextKey.Seed<TSrc>> {\n\n  readonly seedKey: ContextSeedKey<TSrc, SimpleContextKey.Seed<TSrc>>;\n\n  /**\n   * Constructs simple context value key.\n   *\n   * @param name - Human-readable key name.\n   * @param seedKey - Value seed key. A new one will be constructed when omitted.\n   */\n  constructor(\n      name: string,\n      {\n        seedKey,\n      }: {\n        seedKey?: ContextSeedKey<TSrc, SimpleContextKey.Seed<TSrc>>;\n      } = {},\n  ) {\n    super(name);\n    this.seedKey = seedKey || new SimpleSeedKey(this);\n  }\n\n}\n\nexport namespace SimpleContextKey {\n\n  /**\n   * A seed of {@link SimpleContextKey simple context key}.\n   *\n   * @typeParam TSrc - Source vale type.\n   */\n  export type Seed<TSrc> =\n  /**\n   * @returns Either source value, or `null`/`undefined` when absent.\n   */\n      (this: void) => TSrc | null | undefined;\n\n}\n","import { noop } from '@proc7ts/primitives';\nimport type { ContextRef } from '../context-ref';\nimport type { ContextKey, ContextKeyDefault, ContextSeedKey, ContextValueSlot } from '../key';\nimport { SimpleContextKey } from './simple-context-key';\n\n/**\n * Single context value reference.\n *\n * @typeParam TValue - Context value type.\n */\nexport type SingleContextRef<TValue> = ContextRef<TValue, TValue>;\n\n/**\n * Single context value key.\n *\n * Treats the last source value as context one and ignores the rest of them.\n *\n * @typeParam TValue - Context value type.\n */\nexport class SingleContextKey<TValue>\n    extends SimpleContextKey<TValue>\n    implements SingleContextRef<TValue> {\n\n  /**\n   * A provider of context value used when there is no value associated with this key.\n   */\n  readonly byDefault: ContextKeyDefault<TValue, ContextKey<TValue>>;\n\n  /**\n   * Constructs single context value key.\n   *\n   * @param name - Human-readable key name.\n   * @param seedKey - Value seed key. A new one will be constructed when omitted.\n   * @param byDefault - Optional default value provider. If unspecified or `undefined` the key has no default\n   * value.\n   */\n  constructor(\n      name: string,\n      {\n        seedKey,\n        byDefault = noop,\n      }: {\n        seedKey?: ContextSeedKey<TValue, SimpleContextKey.Seed<TValue>>;\n        byDefault?: ContextKeyDefault<TValue, ContextKey<TValue>>;\n      } = {},\n  ) {\n    super(name, { seedKey });\n    this.byDefault = byDefault;\n  }\n\n  grow(\n      slot: ContextValueSlot<TValue, TValue, SimpleContextKey.Seed<TValue>>,\n  ): void {\n\n    const value = slot.seed();\n\n    if (value != null) {\n      slot.insert(value);\n    } else if (!slot.hasFallback) {\n      slot.insert(this.byDefault(slot.context, this));\n    }\n  }\n\n}\n","import { alwaysSupply, Supply } from '@proc7ts/supply';\nimport type { ContextRef } from '../context-ref';\nimport type { ContextValueSlot } from '../key';\nimport { SimpleContextKey } from '../singleton';\n\n/**\n * Context values supply.\n *\n * It is used to signal when context is no longer used (e.g. destroyed).\n *\n * A context value provider can (and probably should) destroy the provided value in such case.\n */\nexport type ContextSupply = Supply;\n\n/**\n * @internal\n */\nclass ContextSupplyKey extends SimpleContextKey<ContextSupply> {\n\n  constructor() {\n    super('context-supply');\n  }\n\n  grow(\n      slot: ContextValueSlot<ContextSupply, ContextSupply, SimpleContextKey.Seed<ContextSupply>>,\n  ): void {\n    slot.insert(\n        slot.seed()\n        || slot.context.supply\n        || (slot.hasFallback ? slot.or : alwaysSupply()),\n    );\n  }\n\n}\n\n/**\n * A key of context value containing a {@link ContextSupply context values supply}.\n *\n * It is guaranteed to present.\n *\n * Predefined to the supply of the context if the latter implements `SupplyPeer` interface. Defaults to supply-always\n * otherwise.\n */\nexport const ContextSupply: ContextRef<ContextSupply> = (/*#__PURE__*/ new ContextSupplyKey());\n","import type { Supply } from '@proc7ts/supply';\nimport type { ContextValues } from '../context-values';\nimport type { ContextRegistry } from './context-registry';\n\n/**\n * A key of {@link ContextBuilder context builder} method that provides context values.\n */\nexport const ContextBuilder__symbol = (/*#__PURE__*/ Symbol('ContextBuilder'));\n\n/**\n * Context builder.\n *\n * Able to provide arbitrary context values.\n *\n * @typeParam TCtx - Supported context type.\n */\nexport interface ContextBuilder<TCtx extends ContextValues = ContextValues> {\n\n  /**\n   * Provides context values with the given registry.\n   *\n   * @param registry - A context registry to provide values with.\n   *\n   * @returns A supply instance that removes the added context value providers once cut off.\n   */\n  [ContextBuilder__symbol](registry: ContextRegistry<TCtx>): Supply;\n\n}\n","import type { ContextValues } from '../context-values';\nimport type { ContextKey, ContextSeeder, ContextSeedKey } from '../key';\nimport type { ContextSeeds } from './context-seeds';\n\n/**\n * @internal\n */\nexport type SeedIssuer<TCtx extends ContextValues, TSrc, TSeed> = readonly [\n  seeder: ContextSeeder<TCtx, TSrc, TSeed>,\n  factory: (this: void, context: TCtx) => TSeed,\n];\n\n/**\n * @internal\n */\nexport class ContextSeeders<TCtx extends ContextValues> {\n\n  private readonly _issuers = new Map<ContextSeedKey<any, any>, SeedIssuer<TCtx, any, any>>();\n\n  constructor(private readonly _initial: ContextSeeds<TCtx>) {\n  }\n\n  issuer<TSrc, TSeed>(seedKey: ContextSeedKey<TSrc, TSeed>): SeedIssuer<TCtx, TSrc, TSeed> {\n\n    const found: SeedIssuer<TCtx, TSrc, TSeed> | undefined = this._issuers.get(seedKey);\n\n    if (found) {\n      return found;\n    }\n\n    const seeder: ContextSeeder<TCtx, TSrc, TSeed> = seedKey.seeder();\n    const issuer: SeedIssuer<TCtx, TSrc, TSeed> = [\n      seeder,\n      context => seeder.seed(context, this._initial(seedKey, context)),\n    ];\n\n    this._issuers.set(seedKey, issuer);\n\n    return issuer;\n  }\n\n  newSeed<TSrc, TSeed>(\n      context: TCtx,\n      key: ContextKey<any, TSrc, TSeed>,\n  ): readonly [seeder: ContextSeeder<TCtx, TSrc, TSeed>, seed: TSeed] {\n\n    const { seedKey } = key;\n    const [seeder, factory] = this.issuer(seedKey);\n\n    if (seedKey !== key as any) {\n      // This is not a seed key\n      // Retrieve the seed by seed key\n      return [seeder, context.get(seedKey)];\n    }\n\n    return [seeder, factory(context)];\n  }\n\n}\n","import { valueProvider } from '@proc7ts/primitives';\nimport type { ContextRequest } from '../context-request';\nimport type { ContextValues } from '../context-values';\nimport type { ContextBuilder } from './context-builder';\nimport type { ContextTarget } from './context-target';\nimport type { ContextValueProvider } from './context-value-provider';\n\n/**\n * Context value specifier.\n *\n * Either explicit one, or a {@link ContextBuilder context builder}.\n *\n * @typeParam TCtx - Context type.\n * @typeParam TValue - Context value type.\n * @typeParam TSrc - Source value type.\n * @typeParam TDeps - Dependencies tuple type.\n */\nexport type ContextValueSpec<\n    TCtx extends ContextValues,\n    TValue,\n    TSrc = TValue,\n    TDeps extends any[] = unknown[]> =\n    | ContextValueSpec.Explicit<TCtx, TValue, TSrc, TDeps>\n    | ContextBuilder<TCtx>;\n\nexport namespace ContextValueSpec {\n\n  /**\n   * Explicit context value specifier.\n   *\n   * @typeParam TCtx - Context type.\n   * @typeParam TValue - Context value type.\n   * @typeParam TSrc - Source value type.\n   * @typeParam TDeps - Dependencies tuple type.\n   */\n  export type Explicit<\n      TCtx extends ContextValues,\n      TValue,\n      TSrc = TValue,\n      TDeps extends any[] = unknown[]> =\n      | ContextValueSpec.IsConstant<TSrc>\n      | ContextValueSpec.ViaAlias<TSrc>\n      | ContextValueSpec.ByProvider<TCtx, TSrc>\n      | ContextValueSpec.ByProviderWithDeps<TSrc, TDeps>\n      | ContextValueSpec.AsInstance<TCtx, TSrc>\n      | ContextValueSpec.SelfInstance<TCtx, TSrc>\n      | ContextValueSpec.AsInstanceWithDeps<TSrc, TDeps>\n      | ContextValueSpec.SelfInstanceWithDeps<TSrc, TDeps>;\n\n  /**\n   * A specifier defining a context value is constant.\n   *\n   * @typeParam TSrc - Source value type.\n   */\n  export interface IsConstant<TSrc> {\n\n    /**\n     * Target value to define.\n     */\n    a: ContextTarget<TSrc>;\n\n    /**\n     * Constant context value.\n     */\n    is: TSrc;\n\n  }\n\n  /**\n   * A specifier defining a context value via another one (alias).\n   *\n   * @typeParam TSrc - Source value type.\n   */\n  export interface ViaAlias<TSrc> {\n\n    /**\n     * Target value to define.\n     */\n    a: ContextTarget<TSrc>;\n\n    /**\n     * Context value request for the another value that will be used instead as provided one.\n     */\n    via: ContextRequest<TSrc>;\n\n  }\n\n  /**\n   * A specifier of context value defined by provider function.\n   *\n   * @typeParam TCtx - Context type.\n   * @typeParam TSrc - Source value type.\n   */\n  export interface ByProvider<TCtx extends ContextValues, TSrc> {\n\n    /**\n     * Target value to define.\n     */\n    a: ContextTarget<TSrc>;\n\n    /**\n     * Context value provider.\n     */\n    by: ContextValueProvider<TSrc, TCtx>;\n\n  }\n\n  /**\n   * A specifier of context value defined by provider function depending on other context values.\n   *\n   * @typeParam TSrc - Source value type.\n   * @typeParam TDeps - Dependencies tuple type.\n   */\n  export interface ByProviderWithDeps<TSrc, TDeps extends any[]> {\n\n    /**\n     * Target value to define.\n     */\n    a: ContextTarget<TSrc>;\n\n    /**\n     * Context value provider function.\n     */\n    by: (this: void, ...args: TDeps) => TSrc | null | undefined;\n\n    /**\n     * Context value requests for corresponding value provider function arguments.\n     */\n    with: DepsRequests<TDeps>;\n\n  }\n\n  /**\n   * A specifier of context value defined as instance of some class.\n   *\n   * @typeParam TCtx - Context type.\n   * @typeParam TSrc - Source value type.\n   */\n  export interface AsInstance<TCtx extends ContextValues, TSrc> {\n\n    /**\n     * Target value to define.\n     */\n    a: ContextTarget<TSrc>;\n\n    /**\n     * Context value class constructor.\n     */\n    as: new (context: TCtx) => TSrc;\n\n  }\n\n  /**\n   * A specifier of context value defined as instance of the same class as value.\n   *\n   * @typeParam TCtx - Context type.\n   * @typeParam TSrc - Source value type.\n   */\n  export interface SelfInstance<TCtx extends ContextValues, TSrc> {\n\n    /**\n     * Target value to define as its class constructor.\n     */\n    as: ContextTarget<TSrc> & (new (context: TCtx) => TSrc);\n\n  }\n\n  /**\n   * A specifier of context value defined as instance of some class with constructor depending on other context values.\n   *\n   * @typeParam TDeps - Dependencies tuple type.\n   * @typeParam TSrc - Source value type.\n   */\n  export interface AsInstanceWithDeps<TSrc, TDeps extends any[]> {\n\n    /**\n     * Target value to define.\n     */\n    a: ContextTarget<TSrc>;\n\n    /**\n     * Context value class constructor.\n     */\n    as: new (...args: TDeps) => TSrc;\n\n    /**\n     * Context value requests for corresponding constructor arguments.\n     */\n    with: DepsRequests<TDeps>;\n\n  }\n\n  /**\n   * A specifier of context value defined as instance of the same class as value with constructor depending on other\n   * context values.\n   *\n   * @typeParam TSrc - Source value type.\n   * @typeParam TDeps - Dependencies tuple type.\n   */\n  export interface SelfInstanceWithDeps<TSrc, TDeps extends any[]> {\n\n    /**\n     * Target value to define as its class constructor.\n     */\n    as: ContextTarget<TSrc> & (new (...args: TDeps) => TSrc);\n\n    /**\n     * Context value requests for corresponding constructor arguments.\n     */\n    with: DepsRequests<TDeps>;\n\n  }\n\n  /**\n   * Dependencies requests.\n   *\n   * This is a tuple of context value requests, each of which corresponds to dependency.\n   *\n   * @typeParam TDeps - Dependencies tuple type.\n   */\n  export type DepsRequests<TDeps extends any[]> = {\n    [K in keyof TDeps]: ContextRequest<TDeps[K]>;\n  };\n\n}\n\n/**\n * Constructs a specifier of context value defined by provider out of arbitrary one.\n *\n * @typeParam TCtx - Context type.\n * @typeParam TValue - Context value type.\n * @typeParam TSrc - Source value type.\n * @typeParam TDeps - Dependencies tuple type.\n * @param spec - Explicit context value specifier to convert.\n *\n * @returns A specifier of context value defined by provider function.\n *\n * @throws TypeError  On malformed context value specifier.\n */\nexport function contextValueSpec<TCtx extends ContextValues, TValue, TSrc, TDeps extends any[]>(\n    spec: ContextValueSpec.Explicit<TCtx, TValue, TSrc, TDeps>,\n): ContextValueSpec.ByProvider<TCtx, TSrc> {\n  if (isValueSpecByProvider(spec)) {\n    if (!isValueSpecWithDeps<TCtx, TSrc, TDeps>(spec)) {\n      return spec;\n    }\n\n    const { a, by, with: deps } = spec;\n\n    return {\n      a,\n      by(this: void, context: TCtx) {\n        return by(...deps.map(<T>(dep: ContextRequest<T>) => context.get(dep)) as TDeps);\n      },\n    };\n  }\n  if (isConstantValueSpec<TSrc>(spec)) {\n\n    const { a, is: value } = spec;\n\n    return {\n      a,\n      by: valueProvider(value),\n    };\n  }\n  if (isValueSpecViaAlias(spec)) {\n\n    const { a, via } = spec;\n\n    return {\n      a,\n      by(ctx: TCtx) {\n        return ctx.get(via);\n      },\n    };\n  }\n  if (isValueSpecAsInstance<TCtx, TSrc, TDeps>(spec)) {\n    if (isSelfInstanceValueSpec<TCtx, TSrc, TDeps>(spec)) {\n      spec = toAsInstance(spec);\n    }\n    if (!isValueSpecWithDeps<TCtx, TSrc, TDeps>(spec)) {\n\n      const { as: Type } = spec;\n\n      return {\n        a: spec.a,\n        by(ctx: TCtx) {\n          return new Type(ctx);\n        },\n      };\n    }\n\n    const { as: DepType, with: deps } = spec;\n\n    return {\n      a: spec.a,\n      by(this: void, context: TCtx) {\n        return new DepType(...deps.map(<T>(dep: ContextRequest<T>) => context.get(dep)) as TDeps);\n      },\n    };\n  }\n\n  throw new TypeError(`Malformed context value specifier: ${JSON.stringify(spec)}`);\n}\n\n/**\n * @internal\n */\nfunction isValueSpecByProvider<TCtx extends ContextValues, TSrc, TDeps extends any[]>(\n    spec: ContextValueSpec<TCtx, unknown, TSrc, TDeps>,\n): spec is\n    | ContextValueSpec.ByProvider<TCtx, TSrc>\n    | ContextValueSpec.ByProviderWithDeps<TSrc, TDeps> {\n  return 'by' in spec;\n}\n\n/**\n * @internal\n */\nfunction isValueSpecAsInstance<TCtx extends ContextValues, TSrc, TDeps extends any[]>(\n    spec: ContextValueSpec<TCtx, unknown, TSrc, TDeps>,\n): spec is\n    | ContextValueSpec.AsInstance<TCtx, TSrc>\n    | ContextValueSpec.AsInstanceWithDeps<TSrc, TDeps> {\n  return 'as' in spec;\n}\n\n/**\n * @internal\n */\nfunction isSelfInstanceValueSpec<TCtx extends ContextValues, TSrc, TDeps extends any[]>(\n    spec: ContextValueSpec<TCtx, unknown, TSrc, TDeps>,\n): spec is\n    | ContextValueSpec.SelfInstance<TCtx, TSrc>\n    | ContextValueSpec.SelfInstanceWithDeps<TSrc, TDeps> {\n  return !('a' in spec);\n}\n\n/**\n * @internal\n */\nfunction toAsInstance<TCtx extends ContextValues, TSrc, TDeps extends any[]>(\n    spec: ContextValueSpec.SelfInstance<TCtx, TSrc> | ContextValueSpec.SelfInstanceWithDeps<TSrc, TDeps>,\n): ContextValueSpec.AsInstance<TCtx, TSrc> | ContextValueSpec.AsInstanceWithDeps<TSrc, TDeps> {\n  return {\n    ...spec,\n    a: spec.as,\n  } as ContextValueSpec.AsInstance<TCtx, TSrc> | ContextValueSpec.AsInstanceWithDeps<TSrc, TDeps>;\n}\n\n/**\n * @internal\n */\nfunction isConstantValueSpec<TSrc>(\n    spec: ContextValueSpec<any, unknown, TSrc, any>,\n): spec is ContextValueSpec.IsConstant<TSrc> {\n  return 'is' in spec;\n}\n\n/**\n * @internal\n */\nfunction isValueSpecViaAlias<TSrc>(\n    spec: ContextValueSpec<any, unknown, TSrc, any>,\n): spec is ContextValueSpec.ViaAlias<TSrc> {\n  return 'via' in spec;\n}\n\n/**\n * @internal\n */\nfunction isValueSpecWithDeps<TCtx extends ContextValues, TSrc, TDeps extends any[]>(\n    spec: ContextValueSpec.ByProvider<TCtx, TSrc> | ContextValueSpec.ByProviderWithDeps<TSrc, TDeps>,\n): spec is ContextValueSpec.ByProviderWithDeps<TSrc, TDeps>;\n\n/**\n * @internal\n */\nfunction isValueSpecWithDeps<TCtx extends ContextValues, TSrc, TDeps extends any[]>(\n    spec: ContextValueSpec.AsInstance<TCtx, TSrc> | ContextValueSpec.AsInstanceWithDeps<TSrc, TDeps>,\n): spec is ContextValueSpec.AsInstanceWithDeps<TSrc, TDeps>;\n\n/**\n * @internal\n */\nfunction isValueSpecWithDeps<TCtx extends ContextValues, TSrc, TDeps extends any[]>(\n    spec: ContextValueSpec<TCtx, unknown, TSrc, TDeps>,\n): boolean {\n  return 'with' in spec;\n}\n","import { noop } from '@proc7ts/primitives';\nimport { ContextKeyError } from '../context-key-error';\nimport type { ContextRef } from '../context-ref';\nimport type { ContextRequest } from '../context-request';\nimport { ContextValues } from '../context-values';\nimport type { ContextSeeder, ContextValueSetup, ContextValueSlot } from '../key';\nimport { ContextKey, ContextKey__symbol } from '../key';\nimport type { ContextRegistry } from './context-registry';\nimport type { ContextSeeders } from './context-seeders.impl';\n\n/**\n * @internal\n */\nexport function newContextValues<TCtx extends ContextValues>(\n    registry: ContextRegistry<TCtx>,\n    seeders: ContextSeeders<TCtx>,\n): ContextValues {\n\n  const values = new Map<ContextKey<any>, any>();\n\n  class ContextValues$ extends ContextValues {\n\n    get<TValue, TSrc>(\n        this: TCtx,\n        { [ContextKey__symbol]: key }: ContextRef<TValue, TSrc>,\n        opts?: ContextRequest.Opts<TValue>,\n    ): TValue | null | undefined {\n\n      const cached = values.get(key);\n\n      if (cached != null) {\n        return cached;\n      }\n\n      const [constructed, setup] = new ContextValueSlot$(seeders, this, key, opts)._grow();\n\n      if (setup) {\n        values.set(key, constructed);\n        setup({\n          key,\n          context: this,\n          registry: registry as ContextRegistry<any>,\n        });\n      }\n\n      return constructed;\n    }\n\n  }\n\n  return new ContextValues$();\n}\n\n/**\n * @internal\n */\nclass ContextValueSlot$<TCtx extends ContextValues, TValue, TSrc, TSeed>\n    implements ContextValueSlot.Base<TValue, TSrc, TSeed> {\n\n  readonly hasFallback: boolean;\n  readonly seeder: ContextSeeder<TCtx, TSrc, TSeed>;\n  readonly seed: TSeed;\n  private _constructed: TValue | null | undefined = null;\n  private _setup: ContextValueSetup<TValue, TSrc, TSeed> = noop;\n\n  constructor(\n      seeders: ContextSeeders<TCtx>,\n      readonly context: TCtx,\n      readonly key: ContextKey<TValue, TSrc, TSeed>,\n      private readonly _opts: ContextRequest.Opts<TValue> = {},\n  ) {\n\n    const [seeder, seed] = seeders.newSeed<TSrc, TSeed>(context, key);\n\n    this.seeder = seeder;\n    this.seed = seed;\n    this.hasFallback = 'or' in _opts; // Fallback _may_ have `undefined` value.\n  }\n\n  get or(): TValue | null | undefined {\n    return this._opts.or; // Access here, as fallback value accessor may be implemented as getter.\n  }\n\n  insert(value: TValue | null | undefined): void {\n    this._constructed = value;\n  }\n\n  fillBy(grow: (this: void, slot: ContextValueSlot<TValue, TSrc, TSeed>) => void): TValue | null | undefined {\n    grow(this as ContextValueSlot<TValue, TSrc, TSeed>);\n    return this._constructed;\n  }\n\n  setup(setup: ContextValueSetup<TValue, TSrc, TSeed>): void {\n\n    const prevSetup = this._setup;\n\n    this._setup = opts => {\n      prevSetup(opts);\n      setup(opts);\n    };\n  }\n\n  _grow(): readonly [value: TValue | null | undefined, setup?: ContextValueSetup<TValue, TSrc, TSeed>] {\n    this.key.grow(this as ContextValueSlot<TValue, TSrc, TSeed>);\n\n    if (this._constructed != null) {\n      return [this._constructed, this._setup];\n    }\n    if (!this.hasFallback) {\n      throw new ContextKeyError(this.key);\n    }\n\n    return [this.or];\n  }\n\n}\n","import { noop } from '@proc7ts/primitives';\nimport type { Supply } from '@proc7ts/supply';\nimport type { ContextValues } from '../context-values';\nimport type { ContextSeedKey } from '../key';\nimport { ContextKey__symbol } from '../key';\nimport { ContextBuilder, ContextBuilder__symbol } from './context-builder';\nimport { ContextSeeders } from './context-seeders.impl';\nimport type { ContextSeeds } from './context-seeds';\nimport { ContextValueSpec, contextValueSpec } from './context-value-spec';\nimport { newContextValues } from './context-values.impl';\n\n/**\n * A registry of context value providers.\n *\n * @typeParam TCtx - Context type.\n */\nexport class ContextRegistry<TCtx extends ContextValues = ContextValues> {\n\n  /** @internal */\n  private readonly _seeders: ContextSeeders<TCtx>;\n\n  /**\n   * Constructs a registry for context value providers.\n   *\n   * It can be chained with another registry by providing an initially known source of known context values.\n   *\n   * @param initial - An optional source of initially known context values. This can be either a function, or\n   * `ContextValues` instance.\n   */\n  constructor(initial?: ContextSeeds<TCtx> | ContextValues) {\n    this._seeders = new ContextSeeders<TCtx>(\n        initial\n            ? (typeof initial === 'function' ? initial : (seedKey => initial.get(seedKey)))\n            : noop,\n    );\n  }\n\n  /**\n   * Provides context value.\n   *\n   * @typeParam TSrc - Source value type.\n   * @typeParam TDeps - Dependencies tuple type.\n   * @param spec - Context value specifier.\n   *\n   * @returns Provider supply instance that removes just added context value provider once cut off.\n   */\n  provide<TSrc, TDeps extends any[]>(spec: ContextValueSpec<TCtx, unknown, TSrc, TDeps>): Supply {\n    if (isContextBuilder(spec)) {\n      return spec[ContextBuilder__symbol](this);\n    }\n\n    const { a: { [ContextKey__symbol]: { seedKey } }, by } = contextValueSpec(spec);\n    const [seeder] = this._seeders.issuer(seedKey);\n\n    return seeder.provide(by);\n  }\n\n  /**\n   * Creates a seed for the given key in target context.\n   *\n   * @param context - Target context.\n   * @param key - Context value seed key.\n   *\n   * @returns New context value seed.\n   */\n  seed<TSrc, TSeed>(context: TCtx, key: ContextSeedKey<TSrc, TSeed>): TSeed {\n\n    const [, factory] = this._seeders.issuer(key);\n\n    return factory(context);\n  }\n\n  /**\n   * Builds context seeds provider originated from this registry.\n   *\n   * @returns Mandatory context seeds provider.\n   */\n  seeds(): ContextSeeds.Mandatory<TCtx> {\n    return (seedKey, context) => this.seed(context, seedKey);\n  }\n\n  /**\n   * Builds context seeds provider that binds seeds to target `context`.\n   *\n   * @param context - Target value context.\n   *\n   * @returns A provider of context value seeds bound to the given `context`.\n   */\n  seedIn(context: TCtx): ContextSeeds.Headless {\n    return this.newValues().get.bind(context);\n  }\n\n  /**\n   * Creates new context values instance consulting this registry for value providers.\n   *\n   * @returns New context values instance which methods expect `this` instance to be a context the values provided for.\n   */\n  newValues(): ContextValues {\n    return newContextValues(this, this._seeders);\n  }\n\n  /**\n   * Appends values provided by another value registry to the ones provided by this one.\n   *\n   * @param other - Another context value registry or context seeds provider.\n   *\n   * @return New context value registry which values provided by both registries.\n   */\n  append(other: ContextRegistry<TCtx> | ContextSeeds<TCtx>): ContextRegistry<TCtx> {\n\n    const otherSeeds: ContextSeeds<TCtx> = typeof other === 'function' ? other : other.seeds();\n\n    return new ContextRegistry(<TSrc, TSeed>(key: ContextSeedKey<TSrc, TSeed>, context: TCtx) => {\n\n      const second = otherSeeds(key, context);\n      const [seeder, factory] = this._seeders.issuer(key);\n      const first = factory(context);\n\n      return second ? seeder.combine(first, second, context) : first;\n    });\n  }\n\n}\n\n/**\n * @internal\n */\nfunction isContextBuilder<TCtx extends ContextValues, TValue, TSrc, TDeps extends any[]>(\n    spec: ContextValueSpec<TCtx, TValue, TSrc, TDeps>,\n): spec is ContextBuilder<TCtx> {\n  return typeof (spec as Partial<ContextBuilder<TCtx>>)[ContextBuilder__symbol] === 'function';\n}\n","import type { QualifiedName } from './name';\nimport type { NamespaceAliaser } from './namespace-aliaser';\nimport type { NamespaceDef } from './namespace-def';\n\n/**\n * Naming schema is responsible for applying namespace aliases to simple names. E.g. by appending alias as prefix or\n * suffix of the name.\n */\nexport abstract class Naming {\n\n  /**\n   * Applies the given namespace `alias` to the given local `name`.\n   *\n   * @param name Local name to apply namespace alias to.\n   * @param alias Namespace alias to apply.\n   * @param namespace Aliased namespace definition.\n   *\n   * @returns A string containing the `name` with `alias` applied to it.\n   */\n  abstract applyAlias(name: string, alias: string, namespace: NamespaceDef): string;\n\n  /**\n   * Converts the given qualified `name` into simple one accordingly to this naming schema.\n   *\n   * @param name Qualified name to convert.\n   * @param nsAlias Namespace aliaser to use.\n   */\n  name(name: QualifiedName, nsAlias: NamespaceAliaser): string {\n    if (typeof name === 'string') {\n      return name;\n    }\n\n    const [local, ns] = name;\n\n    return ns.name(nsAlias(ns), local, this);\n  }\n\n}\n","import { Naming } from './naming';\n\n/**\n * @internal\n */\nclass DefaultNaming extends Naming {\n\n  applyAlias(name: string, alias: string): string {\n    return `${alias}-${name}`;\n  }\n\n}\n\n/**\n * Default naming schema.\n *\n * Prefixes a name with namespace alias separating them by dash.\n *\n * The result looks like `<alias>-<name>`.\n */\nexport const default__naming: Naming = (/*#__PURE__*/ new DefaultNaming());\n\n/**\n * HTML elements naming schema.\n *\n * Prefixes a name with namespace alias separating them by dash.\n *\n * The result looks like `<alias>-<name>`.\n */\nexport const html__naming: Naming = (/*#__PURE__*/ new DefaultNaming());\n\n/**\n * @internal\n */\nclass XmlNaming extends Naming {\n\n  applyAlias(name: string, alias: string): string {\n    return `${alias}:${name}`;\n  }\n\n}\n\n/**\n * XML elements naming schema.\n *\n * Prefixes a name with namespace alias separating them by colon.\n *\n * The result looks like `<alias>:<name>`.\n */\nexport const xml__naming: Naming = (/*#__PURE__*/ new XmlNaming());\n\n/**\n * Element identifiers naming schema.\n *\n * Prefixes a name with namespace alias separating them by colon.\n *\n * The result looks like `<alias>:<name>`.\n */\nexport const id__naming: Naming = (/*#__PURE__*/ new XmlNaming());\n\n/**\n * @internal\n */\nclass CssNaming extends Naming {\n\n  applyAlias(name: string, alias: string): string {\n    return `${name}@${alias}`;\n  }\n\n}\n\n/**\n * CSS classes naming scheme.\n *\n * Appends namespace alias as a name suffix separated by `@` sign.\n *\n * The result looks like `<name>@<alias>`.\n */\nexport const css__naming: Naming = (/*#__PURE__*/ new CssNaming());\n","import type { Naming } from './naming';\nimport { default__naming } from './namings';\n\n/**\n * Namespace definition.\n *\n * Namespaces are identified by their URLs.\n */\nexport class NamespaceDef {\n\n  /**\n   * Unique namespace URL.\n   */\n  readonly url: string;\n\n  /**\n   * Preferred namespace aliases.\n   */\n  readonly aliases: readonly string[];\n\n  /**\n   * The most preferred namespace alias.\n   *\n   * By default this is the first preferred alias, or `ns` if there is no preferred aliases.\n   */\n  get alias(): string {\n    return this.aliases[0] || 'ns';\n  }\n\n  /**\n   * Constructs new namespace definition.\n   *\n   * @param url - Unique namespace URL.\n   * @param aliases - Preferred namespace aliases. It is expected that each alias is an ASCII letter followed by\n   * any number of ASCII letters, digits, `-`, or `_` signs. Aliases starting with `xml` are reserved. Empty alias\n   * is reserved for {@link DEFAULT__NS default namespace}.\n   */\n  constructor(url: string, ...aliases: string[]) {\n    this.url = url;\n    this.aliases = aliases;\n  }\n\n  /**\n   * Converts a local `name` belonging to this namespace to simple one according to the given `naming` schema.\n   *\n   * Calls {@link Naming.applyAlias} by default.\n   *\n   * @param alias - Namespace alias to apply to the name.\n   * @param name - A name to convert.\n   * @param naming - Naming schema to use. {@link default__naming default naming schema} is used when omitted.\n   *\n   * @returns A simple name with this namespace alias applied.\n   */\n  name(alias: string, name: string, naming: Naming = default__naming): string {\n    return naming.applyAlias(name, alias, this);\n  }\n\n}\n","import { DEFAULT__NS } from './default.ns';\nimport { NamespaceDef } from './namespace-def';\n\n/**\n * A name qualified with namespace.\n *\n * This can be either:\n * - a simple name string, which means a name in default namespace, or\n * - a name+namespace tuple.\n */\nexport type QualifiedName = string | NameAndNamespace;\n\n/**\n * A local name and namespace tuple.\n *\n * Consists of a local name string and namespace definition this name belongs to.\n */\nexport type NameAndNamespace = readonly [string, NamespaceDef];\n\n/**\n * Checks whether the given `value` is a name+namespace tuple.\n *\n * @param value - A value to check.\n *\n * @returns `true` if the given `value` is an array consisting of exactly two elements, where the first element is a\n * non-empty string, and the second element is an instance of {@link NamespaceDef}. Or `false` otherwise.\n */\nexport function isNameAndNamespace(value: unknown): value is NameAndNamespace {\n  return Array.isArray(value)\n      && value.length === 2\n      && typeof value[0] === 'string'\n      && value[1] instanceof NamespaceDef;\n}\n\n/**\n * Checks whether the given `value` is a qualified name.\n *\n * @param value - A value to check.\n *\n * @returns `true` if the given `value` is a non-empty string or an array consisting of exactly two elements,\n * where the first element is a non-empty string, and the second element is an instance of {@link NamespaceDef}.\n * Or `false` otherwise.\n */\nexport function isQualifiedName(value: unknown): value is QualifiedName {\n  return typeof value === 'string' || isNameAndNamespace(value);\n}\n\n/**\n * Detects a namespace of the given qualified `name`\n *\n * @param name - Qualified name to detect a namespace of.\n *\n * @returns A namespace if the given `name` has it, or {@link DEFAULT__NS default namespace} otherwise.\n */\nexport function namespaceOf(name: QualifiedName): NamespaceDef {\n  return typeof name !== 'string' ? name[1] : DEFAULT__NS;\n}\n\n/**\n * Converts the given qualified `name` to local name and namespace tuple.\n *\n * @param name - Qualified name to convert.\n *\n * @returns The `name` itself if it has a namespace, or a tuple consisting of `name` and\n * {@link DEFAULT__NS default namespace} otherwise.\n */\nexport function nameAndNamespace(name: QualifiedName): NameAndNamespace {\n  return typeof name !== 'string' ? name : [name, DEFAULT__NS];\n}\n\n/**\n * Checks whether two qualified names are equal to each other.\n *\n * @param first - First qualified name to compare.\n * @param second - Second qualified name to compare.\n *\n * @returns `true` if both names are equal, or `false` otherwise.\n */\nexport function namesEqual(first: QualifiedName, second: QualifiedName): boolean {\n  if (typeof first === 'string') {\n    return typeof second === 'string' ? first === second : !second[1].url && second[0] === first;\n  }\n\n  const [firstName, { url: firstUrl }] = first;\n\n  if (typeof second === 'string') {\n    return !firstUrl && firstName === second;\n  }\n\n  return firstName === second[0] && firstUrl === second[1].url;\n}\n\n/**\n * Compares two qualified names.\n *\n * Names in default namespace considered less than other names. Namespaces are compared by their URLs.\n *\n * @param first - First qualified name to compare.\n * @param second - Second qualified name to compare.\n *\n * @returns `-1` if the `first` name is less than the `second` one, `0` if they are equal, or `1` if the `first` name\n * is greater than the `second` one.\n */\nexport function compareNames(first: QualifiedName, second: QualifiedName): -1 | 0 | 1 {\n  if (typeof first === 'string') {\n    if (typeof second === 'string') {\n      return compareStrings(first, second);\n    }\n    if (!second[1].url) {\n      return compareStrings(first, second[0]);\n    }\n    return -1;\n  }\n\n  const [firstName, { url: firstUrl }] = first;\n\n  if (typeof second === 'string') {\n    if (!firstUrl) {\n      return compareStrings(firstName, second);\n    }\n    return 1;\n  }\n\n  return compareStrings(firstUrl, second[1].url) || compareStrings(firstName, second[0]);\n}\n\n/**\n * @internal\n */\nfunction compareStrings(first: string, second: string): -1 | 0 | 1 {\n  return first < second ? -1 : first > second ? 1 : 0;\n}\n","import type { NamespaceDef } from './namespace-def';\n\n/**\n * Namespace aliaser function interface.\n *\n * Maps namespaces to their unique aliases.\n */\nexport type NamespaceAliaser =\n/**\n * @param ns - A definition of namespace to find alias for.\n *\n * @returns Namespace alias.\n */\n    (ns: NamespaceDef) => string;\n\n/**\n * Creates a namespace aliaser.\n *\n * The returned function tries to find a registered alias for the given namespace. If not found then tries to use one\n * of its preferred aliases. If all of them are reserved already for another namespaces, generates a new unique alias.\n *\n * @returns New instance of namespace aliaser.\n */\nexport function newNamespaceAliaser(): NamespaceAliaser {\n\n  const aliasesByNs = new Map<string, string>();\n  const nsNumPerAlias = new Map<string, number>();\n\n  return function nsAlias(ns: NamespaceDef): string {\n\n    const found = aliasesByNs.get(ns.url);\n\n    if (found) {\n      return found;\n    }\n\n    const mostPreferred = ns.alias;\n    let nsNumRegistered = 0;\n\n    for (const preferred of [mostPreferred, ...ns.aliases]) {\n\n      const ids = nsNumPerAlias.get(preferred);\n\n      if (!ids) {\n        aliasesByNs.set(ns.url, preferred);\n        nsNumPerAlias.set(preferred, 1);\n        return preferred;\n      }\n      if (!nsNumRegistered) {\n        // Use the first one\n        nsNumRegistered = ids;\n      }\n    }\n\n    const generated = `${mostPreferred}${++nsNumRegistered}`;\n\n    aliasesByNs.set(ns.url, generated);\n    nsNumPerAlias.set(mostPreferred, nsNumRegistered);\n\n    return generated;\n  };\n}\n","import { AfterEvent } from '../after-event';\n\n/**\n * A key of {@link EventKeeper} method returning its {@link AfterEvent} instance.\n *\n * @category Core\n */\nexport const AfterEvent__symbol = (/*#__PURE__*/ Symbol('after-event'));\n\n/**\n * An event supplier that keeps the last event sent.\n *\n * The registered event receiver would receive the kept event immediately upon registration, and all upcoming events\n * after that.\n *\n * @category Core\n * @typeParam TEvent - An event type. This is a list of event receiver parameter types.\n */\nexport interface EventKeeper<TEvent extends any[]> {\n\n  /**\n   * Returns an {@link AfterEvent} instance of this event keeper.\n   *\n   * @returns {@link AfterEvent} instance registering event receivers sent by this keeper.\n   */\n  [AfterEvent__symbol](): AfterEvent<TEvent>;\n\n}\n\n/**\n * @category Core\n */\nexport namespace EventKeeper {\n\n  /**\n   * A type of events sent by the given event keeper.\n   *\n   * @typeParam TKeeper - Target event keeper.\n   */\n  export type Event<TKeeper extends EventKeeper<any>> = TKeeper extends EventKeeper<infer TEvent> ? TEvent : never;\n\n}\n\n/**\n * Checks whether the given value implements an {@link EventKeeper} interface.\n *\n * @category Core\n * @typeParam TEvent - Expected event type.\n * @typeParam TOther - Another type the value may have.\n * @param value - A value to check.\n *\n * @returns `true` if the `value` contains an {@link AfterEvent__symbol} method, or `false` otherwise.\n */\nexport function isEventKeeper<TEvent extends any[], TOther = unknown>(\n    value: EventKeeper<TEvent> | TOther,\n): value is EventKeeper<TEvent> {\n  return !!value\n      && (typeof value === 'object' || typeof value === 'function')\n      && typeof (value as Partial<EventKeeper<TEvent>>)[AfterEvent__symbol] === 'function';\n}\n","import { Supply } from '@proc7ts/supply';\n\n/**\n * Event receiver is called on each event sent by {@link EventSender} when registered.\n *\n * A receiver may be represented either by {@link EventReceiver.Function function}, or by\n * {@link EventReceiver.Object object}. The former is a simplest form. The latter allows control all aspects of event\n * processing.\n *\n * To register an event receiver just call the event sender's `[OnEvent__symbol]` or event keeper's\n * `[AfterEvent__symbol]` method with this event receiver as argument.\n *\n * A _recurrent event_ is an event sent from inside event receiver and targeted the same receiver. Recurrent event\n * processing is scheduled until after the current event processing finishes. To handle recurrent events in a specific\n * way the event receiver may utilize an {@link EventReceiver.Context event processing context} available as\n * a first parameter of {@link EventReceiver.Object.receive} method.\n *\n * @category Core\n * @typeParam TEvent - An event type. This is a tuple of event receiver parameter types.\n */\nexport type EventReceiver<TEvent extends any[]> = EventReceiver.Function<TEvent> | EventReceiver.Object<TEvent>;\n\n/**\n * @category Core\n */\nexport namespace EventReceiver {\n\n  /**\n   * Event receiver function signature.\n   *\n   * It never receives event processing context.\n   *\n   * @typeParam TEvent - An event type. This is a tuple of event receiver parameter types.\n   */\n  export type Function<TEvent extends any[]> =\n  /**\n   * @param event - An event represented by function call arguments.\n   */\n      (this: void, ...event: TEvent) => void;\n\n  /**\n   * Event receiver object.\n   *\n   * @typeParam TEvent - An event type. This is a tuple of event receiver parameter types.\n   */\n  export interface Object<TEvent extends any[]> {\n\n    /**\n     * Event supply to this receiver.\n     *\n     * Events will be supplied to this receiver until this supply is {@link Supply.off cut off}.\n     *\n     * When omitted a new supply will be created per receiver registration within event supplier.\n     */\n    readonly supply?: Supply;\n\n    /**\n     * Receives an event.\n     *\n     * @param context - An event processing context.\n     * @param event - An event represented as the rest of arguments.\n     */\n    receive(context: Context<TEvent>, ...event: TEvent): void;\n\n  }\n\n  /**\n   * The most generic event receiver form.\n   *\n   * Any event receiver may be converted to generic form by {@link eventReceiver} function.\n   *\n   * In contrast to {@link EventReceiver.Object} this one always has a supply.\n   *\n   * @typeParam TEvent - An event type. This is a tuple of event receiver parameter types.\n   */\n  export interface Generic<TEvent extends any[]> extends Object<TEvent> {\n\n    /**\n     * Event supply to this receiver.\n     *\n     * Events will be supplied to this receiver until this supply is {@link Supply.off cut off}.\n     */\n    readonly supply: Supply;\n\n    /**\n     * Receives an event.\n     *\n     * This method does not require a `this` context. So it is possible to deconstruct the event receiver like this:\n     * ```typescript\n     * const { supply, receive } = eventReceiver(receiver);\n     * ```\n     *\n     * @param context - An event processing context.\n     * @param event - An event represented as the rest of arguments.\n     */\n    receive(this: void, context: Context<TEvent>, ...event: TEvent): void;\n\n  }\n\n  /**\n   * Event processing context.\n   *\n   * It is passed to {@link EventReceiver.Object} receivers.\n   *\n   * @typeParam TEvent - An event type. This is a tuple of event receiver parameter types.\n   */\n  export interface Context<TEvent extends any[]> {\n\n    /**\n     * Schedules the given event receiver to be called to process recurrent event(s).\n     *\n     * If called during event processing the recurrent events will be sent to the given `receiver` after current event\n     * processed instead of original one.\n     *\n     * If called multiple times the latest `receiver` will be used.\n     *\n     * If not called the recurrent events will be sent to original event receiver.\n     *\n     * > This method should be called __before__ the recurrent event issued. Otherwise it may happen that recurrent\n     * > event will be ignored in some situations. E.g. when it is issued during receiver registration.\n     *\n     * @param receiver - Recurrent events receiver function.\n     */\n    onRecurrent(receiver: EventReceiver.Function<TEvent>): void;\n\n  }\n\n}\n\n/**\n * Converts arbitrary event receiver to generic form.\n *\n * The returned event receiver would never send events to original receiver after event supply is cut off.\n *\n * @category Core\n * @typeParam TEvent - An event type. This is a tuple of event receiver parameter types.\n * @param receiver - An event receiver to convert.\n *\n * @returns Event `receiver` in most generic form.\n */\nexport function eventReceiver<TEvent extends any[]>(receiver: EventReceiver<TEvent>): EventReceiver.Generic<TEvent> {\n\n  let supply: Supply;\n  let receive: (context: EventReceiver.Context<TEvent>, ...event: TEvent) => void;\n\n  if (typeof receiver === 'function') {\n    supply = new Supply();\n    receive = (_context, ...event) => receiver(...event);\n  } else {\n    supply = receiver.supply || new Supply();\n    receive = (context, ...event) => {\n      if (!supply.isOff) {\n        // Supply cut off callback may be called before the receiver disabled.\n        // Such callback may send an event that should not be received.\n        receiver.receive(context, ...event);\n      }\n    };\n  }\n\n  // Disable receiver when event supply is cut off. But see the comment above.\n  // For function receiver this callback is always the first one.\n  supply.whenOff(() => receive = EventReceiver$doDonReceive);\n\n  return {\n    supply,\n    receive: (context, ...event) => receive(context, ...event),\n  };\n}\n\nfunction EventReceiver$doDonReceive<TEvent extends any[]>(\n    _context: EventReceiver.Context<TEvent>,\n    ..._event: TEvent\n): void {\n  // Do not receive event.\n}\n","import { eventReceiver, EventReceiver } from './event-receiver';\n\n/**\n * Creates an event receiver function that dispatches events to each of the given event receivers.\n *\n * @internal\n * @param receivers - An iterable of event receivers to dispatch event to.\n *\n * @returns An event receiver function that does not utilize event processing context an thus can be called directly.\n */\nexport function receiveByEach<TEvent extends any[]>(\n    receivers: Iterable<EventReceiver.Generic<TEvent>>,\n): (this: void, ...event: TEvent) => void {\n\n  let send: (this: void, event: TEvent) => void = sendNonRecurrent;\n\n  return (...event) => send(event);\n\n  function sendNonRecurrent(event: TEvent): void {\n\n    let actualReceivers = receivers;\n    const received: TEvent[] = [];\n\n    send = (recurrent: TEvent) => received.push(recurrent);\n\n    try {\n      for (; ;) {\n        actualReceivers = processEvent(actualReceivers, event);\n\n        const recurrent = received.shift();\n\n        if (!recurrent) {\n          break;\n        }\n\n        event = recurrent;\n      }\n    } finally {\n      send = sendNonRecurrent;\n    }\n  }\n}\n\n/**\n * @internal\n */\nfunction processEvent<TEvent extends any[]>(\n    receivers: Iterable<EventReceiver.Generic<TEvent>>,\n    event: TEvent,\n): EventReceiver.Generic<TEvent>[] {\n\n  const recurrentReceivers: EventReceiver.Generic<TEvent>[] = [];\n\n  for (const receiver of receivers) {\n\n    const idx = recurrentReceivers.length;\n\n    recurrentReceivers.push(receiver);\n\n    const context: EventReceiver.Context<TEvent> = {\n      onRecurrent(recurrentReceiver) {\n        recurrentReceivers[idx] = eventReceiver({\n          supply: receiver.supply,\n          receive(_context, ...recurrentEvent) {\n            recurrentReceiver(...recurrentEvent);\n          },\n        });\n      },\n    };\n\n    receiver.receive(context, ...event);\n  }\n\n  return recurrentReceivers;\n}\n","import { Supply, SupplyPeer } from '@proc7ts/supply';\nimport { receiveByEach } from './event-notifier.impl';\nimport { eventReceiver, EventReceiver } from './event-receiver';\n\n/**\n * Event notifier can be used to register event receivers and send events to them.\n *\n * It does not implement an {@link EventSender} interface though. Use an {@link EventEmitter} if you need one.\n *\n * Manages a list of registered event receivers, and removes them from the list once their supplies\n * are {@link Supply.off cut off}.\n *\n * @category Core\n * @typeParam TEvent - An event type. This is a list of event receiver parameter types.\n */\nexport class EventNotifier<TEvent extends any[]> implements SupplyPeer {\n\n  /**\n   * @internal\n   */\n  private _rcs?: Set<EventReceiver.Generic<TEvent>>;\n\n  readonly supply: Supply;\n\n  /**\n   * Sends the given `event` to all registered receivers.\n   *\n   * @param event - An event to send represented by function call arguments.\n   */\n  readonly send: (this: this, ...event: TEvent) => void;\n\n  constructor() {\n\n    const rcs = this._rcs = new Set<EventReceiver.Generic<TEvent>>();\n\n    this.send = receiveByEach(rcs);\n    this.supply = new Supply(() => {\n      rcs.clear();\n      delete this._rcs;\n    });\n  }\n\n  /**\n   * The number of currently registered event receivers.\n   */\n  get size(): number {\n    return this._rcs ? this._rcs.size : 0;\n  }\n\n  /**\n   * Registers an event receiver.\n   *\n   * Receivers registered with this method will receive the {@link send emitted} events.\n   *\n   * @param receiver - A receiver of events to register.\n   *\n   * @returns A supply of events to the given `receiver`.\n   */\n  on(receiver: EventReceiver<TEvent>): Supply {\n\n    const generic = eventReceiver(receiver);\n    const supply = generic.supply.needs(this);\n    const receivers = this._rcs;\n\n    if (receivers && !supply.isOff) {\n      receivers.add(generic);\n      supply.whenOff(() => receivers.delete(generic));\n    }\n\n    return supply;\n  }\n\n}\n","import { OnEvent } from '../on-event';\n\n/**\n * A key of {@link EventSender} method returning its {@link OnEvent} instance.\n *\n * @category Core\n */\nexport const OnEvent__symbol = (/*#__PURE__*/ Symbol('on-event'));\n\n/**\n * A sender of events.\n *\n * Contains an {@link OnEvent} instance registering event receivers.\n *\n * @category Core\n * @typeParam TEvent - An event type. This is a tuple of event receiver parameter types.\n */\nexport interface EventSender<TEvent extends any[]> {\n\n  /**\n   * Returns an {@link OnEvent} instance of this event sender.\n   *\n   * @returns {@link OnEvent} instance registering event receivers sent by this sender.\n   */\n  [OnEvent__symbol](): OnEvent<TEvent>;\n\n}\n\n/**\n * @category Core\n */\nexport namespace EventSender {\n\n  /**\n   * A type of events sent by the given event sender.\n   *\n   * @typeParam TSender - Target event sender.\n   */\n  export type Event<TSender extends EventSender<any>> = TSender extends EventSender<infer TEvent> ? TEvent : never;\n\n}\n\n/**\n * Checks whether the given value implements an {@link EventSender} interface.\n *\n * @category Core\n * @typeParam TEvent - Expected event type.\n * @typeParam TOther - Another type the value may have.\n * @param value - A value to check.\n *\n * @returns `true` if the `value` contains an {@link OnEvent__symbol} method, or `false` otherwise.\n */\nexport function isEventSender<TEvent extends any[], TOther = unknown>(\n    value: EventSender<TEvent> | TOther,\n): value is EventSender<TEvent> {\n  return !!value\n      && (typeof value === 'object' || typeof value === 'function')\n      && typeof (value as Partial<EventSender<TEvent>>)[OnEvent__symbol] === 'function';\n}\n","/**\n * An error indicating a failure to receive an expected event.\n *\n * This happens e.g. when receiver registered in {@link EventKeeper event keeper}, but the latter has no events to send.\n * This may happen when no fallback passed to {@link afterEventBy} function, while the given supplier did not send\n * any events.\n *\n * @category Core\n */\nexport class NoEventsError extends TypeError {\n\n  /**\n   * Constructs an error.\n   *\n   * @param message - Error message.\n   */\n  constructor(message = 'No events to send') {\n    super(message);\n  }\n\n}\n","import { noop } from '@proc7ts/primitives';\nimport { receiveByEach } from './event-notifier.impl';\nimport { eventReceiver, EventReceiver } from './event-receiver';\n\n/**\n * Creates an event sender targeted specific receiver.\n *\n * @category Core\n * @typeParam TEvent - An event type. This is a list of event receiver parameter types.\n *\n * @param receiver - Target event receiver.\n *\n * @returns A function accepting events and sending them to target `receiver`.\n */\nexport function sendEventsTo<TEvent extends any[]>(\n    receiver: EventReceiver<TEvent>,\n): (this: void, ...event: TEvent) => void {\n\n  const generic = eventReceiver(receiver);\n  let send: (...event: TEvent) => void = receiveByEach([generic]);\n\n  generic.supply.whenOff(() => send = noop);\n\n  return (...event) => send(...event);\n}\n","import { NoEventsError } from '../base';\n\n/**\n * @internal\n */\nexport function AfterEvent$noFallback(): never {\n  throw new NoEventsError();\n}\n","import { neverSupply, Supply } from '@proc7ts/supply';\nimport { EventReceiver } from '../base';\nimport { OnEvent } from '../on-event';\n\n/**\n * @internal\n */\nexport function digEvents<\n    TInEvent extends any[],\n    TOutEvent extends any[],\n    >(\n    input: OnEvent<TInEvent>,\n    extract: (this: void, ...event: TInEvent) => OnEvent<TOutEvent> | void | undefined,\n): (receiver: EventReceiver.Generic<TOutEvent>) => void {\n  return ({ supply, receive }: EventReceiver.Generic<TOutEvent>) => {\n\n    let nestedSupply = neverSupply();\n\n    input({\n\n      supply,\n\n      receive: (_context, ...event: TInEvent) => {\n\n        const prevSupply = nestedSupply;\n        const extracted = extract(...event);\n\n        nestedSupply = extracted\n            ? extracted({\n\n              supply: new Supply(reason => {\n                if (reason !== digEvents) {\n                  supply.off(reason);\n                }\n              }).needs(supply),\n\n              receive,\n\n            })\n            : neverSupply();\n        prevSupply.off(digEvents);\n      },\n    });\n  };\n}\n","import { OnEvent } from '../on-event';\n\n/**\n * @internal\n */\nexport function OnEvent$do<TEvent extends any[]>(\n    this: OnEvent<TEvent>,\n    ...processors: ((this: void, arg: any) => any)[]\n): any {\n  return processors.reduce((arg, action) => action(arg), this);\n}\n","import { OnEvent } from '../on-event';\n\n/**\n * @internal\n */\nexport function OnEvent$supplier<T extends OnEvent<any>>(this: T): T {\n  return this;\n}\n","import { EventReceiver } from '../base';\nimport { OnEvent } from '../on-event';\n\n/**\n * @internal\n */\nexport function onceEvent<TEvent extends any[]>(\n    supplier: OnEvent<TEvent>,\n): (receiver: EventReceiver.Generic<TEvent>) => void {\n  return ({ supply, receive }: EventReceiver.Generic<TEvent>): void => {\n    supplier({\n      supply,\n      receive: (context, ...event) => {\n        receive(context, ...event);\n        supply.off();\n      },\n    });\n  };\n}\n","import { Supply } from '@proc7ts/supply';\nimport { EventReceiver } from '../base';\nimport { OnEvent } from '../on-event';\nimport { onceEvent } from './once-event';\n\n/**\n * @internal\n */\nexport function OnEvent$then<TEvent extends any[], TResult1 = TEvent[0], TResult2 = never>(\n    this: OnEvent<TEvent>,\n    onEvent?: ((...value: TEvent) => TResult1 | PromiseLike<TResult1>) | undefined | null,\n    onCutOff?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null,\n): Promise<TResult1 | TResult2> {\n  return new Promise((resolve, reject) => {\n    onceEvent(this)({\n      supply: onCutOff\n          ? new Supply(reason => {\n            try {\n              resolve(onCutOff(reason));\n            } catch (e) {\n              reject(e);\n            }\n          })\n          : new Supply(reject),\n      receive: onEvent\n          ? (_ctx, ...event): void => {\n            try {\n              resolve(onEvent(...event));\n            } catch (e) {\n              reject(e);\n            }\n          }\n          : ((_ctx, event: TEvent[0]) => resolve(event)) as (\n              _ctx: EventReceiver.Context<TEvent>,\n              ...event: TEvent[]\n          ) => void,\n    });\n  });\n}\n","import { Supply } from '@proc7ts/supply';\nimport { EventNotifier, EventReceiver, sendEventsTo } from '../base';\nimport { OnEvent } from '../on-event';\n\n/**\n * @internal\n */\nexport function shareEvents<TEvent extends any[]>(\n    supplier: OnEvent<TEvent>,\n): (receiver: EventReceiver.Generic<TEvent>) => void {\n\n  const sharer = new EventSharer<TEvent>(supplier);\n\n  return sharer.on.bind(sharer);\n}\n\nclass EventSharer<TEvent extends any[]> extends EventNotifier<TEvent> {\n\n  private _on: SharedEventDispatcher<TEvent>;\n\n  constructor(readonly supplier: OnEvent<TEvent>) {\n    super();\n    this._on = this._onInit();\n  }\n\n  on(receiver: EventReceiver.Generic<TEvent>): Supply {\n    this._on.on(receiver);\n    return receiver.supply;\n  }\n\n  /**\n   * Initial dispatcher applied when there are no receivers.\n   */\n  private _onInit(): SharedEventDispatcher<TEvent> {\n    return {\n      on: receiver => {\n\n        const initialEvents: TEvent[] = [];\n        const sharedSupply = new Supply(() => this._on = this._onInit());\n        const onFirst = this._on = this._onFirst(sharedSupply, initialEvents);\n\n        try {\n          onFirst.on(receiver);\n          this.supplier({\n            supply: sharedSupply,\n            receive: (_ctx, ...event) => this._on.dispatch(...event),\n          });\n        } finally {\n          if (this._on === onFirst) {\n            this._on = this._onNext(sharedSupply, initialEvents);\n          }\n        }\n      },\n      dispatch: null!, // Initial dispatcher never dispatches events\n    };\n  }\n\n  /**\n   * A dispatcher applied while the first receiver is still registering, but not registered yet.\n   *\n   * Records emitted events to dispatch them to all receivers.\n   */\n  private _onFirst(sharedSupply: Supply, initialEvents: TEvent[]): SharedEventDispatcher<TEvent> {\n    return {\n      on: receiver => this._addReceiver(receiver, sharedSupply, initialEvents),\n      dispatch: (...event) => {\n        // Record initial event.\n        initialEvents.push(event);\n        this.send(...event);\n      },\n    };\n  }\n\n  /**\n   * A dispatcher applied after the first receiver registered.\n   *\n   * Dispatches initial events to new receivers until new event received.\n   */\n  private _onNext(sharedSupply: Supply, initialEvents: TEvent[]): SharedEventDispatcher<TEvent> {\n    return {\n      on: receiver => this._addReceiver(receiver, sharedSupply, initialEvents),\n      dispatch: (...event) => {\n        // An event received after initial ones.\n        // Stop dispatching initial events.\n        initialEvents.length = 0;\n        this.send(...event);\n      },\n    };\n  }\n\n  private _addReceiver(\n      receiver: EventReceiver.Generic<TEvent>,\n      sharedSupply: Supply,\n      initialEvents: TEvent[],\n  ): void {\n    sharedSupply.cuts(receiver);\n\n    super.on(receiver).whenOff(reason => {\n      if (!this.size) {\n        sharedSupply.off(reason);\n      }\n    });\n\n    if (initialEvents.length) {\n      // Dispatch initial events.\n\n      const dispatch = sendEventsTo(receiver);\n\n      initialEvents.forEach(event => dispatch(...event));\n    }\n  }\n\n}\n\ninterface SharedEventDispatcher<TEvent extends any[]> {\n\n  on(this: void, receiver: EventReceiver.Generic<TEvent>): void;\n\n  dispatch(...event: TEvent): void;\n\n}\n\n","import { Supply, SupplyPeer } from '@proc7ts/supply';\nimport { EventReceiver } from '../base';\nimport { OnEvent } from '../on-event';\n\n/**\n * @internal\n */\nexport function supplyEvents<TEvent extends any[]>(\n    supplier: OnEvent<TEvent>,\n    required: SupplyPeer,\n    dependentSupply?: Supply,\n): (receiver: EventReceiver.Generic<TEvent>) => void {\n  return (receiver: EventReceiver.Generic<TEvent>): void => {\n    if (dependentSupply) {\n      supplier({\n        supply: new Supply().needs(required).cuts(dependentSupply),\n        receive: receiver.receive,\n      });\n    } else {\n      receiver.supply.needs(required);\n      supplier(receiver);\n    }\n  };\n}\n","import { EventReceiver, sendEventsTo } from '../base';\nimport { OnEvent } from '../on-event';\n\n/**\n * @internal\n */\nexport function translateEvents<TInEvent extends any[], TOutEvent extends any[]>(\n    supplier: OnEvent<TInEvent>,\n    translate: (this: void, send: (...event: TOutEvent) => void, ...event: TInEvent) => void,\n): (receiver: EventReceiver.Generic<TOutEvent>) => void {\n  return receiver => {\n\n    const dispatch = sendEventsTo(receiver);\n\n    supplier({\n      supply: receiver.supply,\n      receive: (_ctx, ...event: TInEvent) => {\n        translate(dispatch, ...event);\n      },\n    });\n  };\n}\n","import { EventReceiver } from '../event-receiver';\n\n/**\n * @internal\n */\nexport function neverReceiveBecause(reason?: any): (receiver: EventReceiver.Generic<any>) => void {\n  return ({ supply }) => supply.off(reason);\n}\n\n/**\n * @internal\n */\nexport function neverReceive({ supply }: EventReceiver.Generic<any>): void {\n  supply.off();\n}\n","import { Supply } from '@proc7ts/supply';\nimport { eventReceiver, EventReceiver, EventSender, OnEvent__symbol } from './base';\nimport { OnEvent$do, OnEvent$supplier, OnEvent$then } from './impl';\n\n/**\n * Signature of {@link EventSender} implementation able to register event receivers.\n *\n * The registered event receiver starts receiving upcoming events until the returned event supply is cut off.\n *\n * Contains additional event processing methods.\n *\n * May be constructed using {@link onEventBy} function.\n *\n * @category Core\n * @typeParam TEvent - An event type. This is a list of event receiver parameter types.\n */\nexport interface OnEvent<TEvent extends any[]> extends EventSender<TEvent> {\n\n  /**\n   * Starts sending events to the given `receiver`.\n   *\n   * @param receiver - Target receiver of events.\n   *\n   * @returns A supply of events from this sender to the given `receiver`.\n   */\n  (receiver: EventReceiver<TEvent>): Supply;\n\n  [OnEvent__symbol](): this;\n\n  /**\n   * Applies the given processor to events.\n   *\n   * @typeParam TResult - Action result type.\n   * @param processor - An event processor accepting this supplier as its only parameter, and returning application\n   * result.\n   *\n   * @returns Processing result.\n   */\n  do<TResult>(\n      processor: (this: void, supplier: this) => TResult,\n  ): TResult;\n\n  /**\n   * Applies the given processors to events.\n   *\n   * The value returned from each processor application is passed as argument to the next one. The value returned from\n   * the last processor application is the result of this method call.\n   *\n   * @typeParam TResult1 - The first processor application result type.\n   * @typeParam TResult1 - The second processor application result type.\n   * @param processor1 - An event processor accepting this supplier as its only parameter, and returning application\n   * result.\n   * @param processor2 - An event processor accepting the first one's application result as its only parameter, and\n   * returning its own application result.\n   *\n   * @returns The last processor application result.\n   */\n  do<\n      TResult1,\n      TResult2,\n      >(\n      processor1: (this: void, supplier: this) => TResult1,\n      processor2: (this: void, arg: TResult1) => TResult2,\n  ): TResult2;\n\n  do<\n      TResult1,\n      TResult2,\n      TResult3,\n      >(\n      processor1: (this: void, supplier: this) => TResult1,\n      processor2: (this: void, arg: TResult1) => TResult2,\n      processor3: (this: void, arg: TResult2) => TResult3,\n  ): TResult3;\n\n  do<\n      TResult1,\n      TResult2,\n      TResult3,\n      TResult4,\n      >(\n      processor1: (this: void, supplier: this) => TResult1,\n      processor2: (this: void, arg: TResult1) => TResult2,\n      processor3: (this: void, arg: TResult2) => TResult3,\n      processor4: (this: void, arg: TResult3) => TResult4,\n  ): TResult4;\n\n  do<\n      TResult1,\n      TResult2,\n      TResult3,\n      TResult4,\n      TResult5,\n      >(\n      processor1: (this: void, supplier: this) => TResult1,\n      processor2: (this: void, arg: TResult1) => TResult2,\n      processor3: (this: void, arg: TResult2) => TResult3,\n      processor4: (this: void, arg: TResult3) => TResult4,\n      processor5: (this: void, arg: TResult4) => TResult5,\n  ): TResult5;\n\n  do<\n      TResult1,\n      TResult2,\n      TResult3,\n      TResult4,\n      TResult5,\n      TResult6,\n      >(\n      processor1: (this: void, supplier: this) => TResult1,\n      processor2: (this: void, arg: TResult1) => TResult2,\n      processor3: (this: void, arg: TResult2) => TResult3,\n      processor4: (this: void, arg: TResult3) => TResult4,\n      processor5: (this: void, arg: TResult4) => TResult5,\n      processor6: (this: void, arg: TResult5) => TResult6,\n  ): TResult6;\n\n  do<\n      TResult1,\n      TResult2,\n      TResult3,\n      TResult4,\n      TResult5,\n      TResult6,\n      TResult7,\n      >(\n      processor1: (this: void, supplier: this) => TResult1,\n      processor2: (this: void, arg: TResult1) => TResult2,\n      processor3: (this: void, arg: TResult2) => TResult3,\n      processor4: (this: void, arg: TResult3) => TResult4,\n      processor5: (this: void, arg: TResult4) => TResult5,\n      processor6: (this: void, arg: TResult5) => TResult6,\n      processor7: (this: void, arg: TResult6) => TResult7,\n  ): TResult7;\n\n  do<\n      TResult1,\n      TResult2,\n      TResult3,\n      TResult4,\n      TResult5,\n      TResult6,\n      TResult7,\n      TResult8,\n      >(\n      processor1: (this: void, supplier: this) => TResult1,\n      processor2: (this: void, arg: TResult1) => TResult2,\n      processor3: (this: void, arg: TResult2) => TResult3,\n      processor4: (this: void, arg: TResult3) => TResult4,\n      processor5: (this: void, arg: TResult4) => TResult5,\n      processor6: (this: void, arg: TResult5) => TResult6,\n      processor7: (this: void, arg: TResult6) => TResult7,\n      processor8: (this: void, arg: TResult7) => TResult8,\n  ): TResult8;\n\n  do<\n      TResult1,\n      TResult2,\n      TResult3,\n      TResult4,\n      TResult5,\n      TResult6,\n      TResult7,\n      TResult8,\n      TResult9,\n      >(\n      processor1: (this: void, supplier: this) => TResult1,\n      processor2: (this: void, arg: TResult1) => TResult2,\n      processor3: (this: void, arg: TResult2) => TResult3,\n      processor4: (this: void, arg: TResult3) => TResult4,\n      processor5: (this: void, arg: TResult4) => TResult5,\n      processor6: (this: void, arg: TResult5) => TResult6,\n      processor7: (this: void, arg: TResult6) => TResult7,\n      processor8: (this: void, arg: TResult7) => TResult8,\n      processor9: (this: void, arg: TResult8) => TResult9,\n  ): TResult9;\n\n  do<\n      TResult1,\n      TResult2,\n      TResult3,\n      TResult4,\n      TResult5,\n      TResult6,\n      TResult7,\n      TResult8,\n      TResult9,\n      TResult10,\n      >(\n      processor1: (this: void, supplier: this) => TResult1,\n      processor2: (this: void, arg: TResult1) => TResult2,\n      processor3: (this: void, arg: TResult2) => TResult3,\n      processor4: (this: void, arg: TResult3) => TResult4,\n      processor5: (this: void, arg: TResult4) => TResult5,\n      processor6: (this: void, arg: TResult5) => TResult6,\n      processor7: (this: void, arg: TResult6) => TResult7,\n      processor8: (this: void, arg: TResult7) => TResult8,\n      processor9: (this: void, arg: TResult8) => TResult9,\n      processor10: (this: void, arg: TResult9) => TResult10,\n  ): TResult10;\n\n  do<\n      TResult1,\n      TResult2,\n      TResult3,\n      TResult4,\n      TResult5,\n      TResult6,\n      TResult7,\n      TResult8,\n      TResult9,\n      TResult10,\n      TResult11,\n      >(\n      processor1: (this: void, supplier: this) => TResult1,\n      processor2: (this: void, arg: TResult1) => TResult2,\n      processor3: (this: void, arg: TResult2) => TResult3,\n      processor4: (this: void, arg: TResult3) => TResult4,\n      processor5: (this: void, arg: TResult4) => TResult5,\n      processor6: (this: void, arg: TResult5) => TResult6,\n      processor7: (this: void, arg: TResult6) => TResult7,\n      processor8: (this: void, arg: TResult7) => TResult8,\n      processor9: (this: void, arg: TResult8) => TResult9,\n      processor10: (this: void, arg: TResult9) => TResult10,\n      processor11: (this: void, arg: TResult10) => TResult11,\n  ): TResult11;\n\n  do<\n      TResult1,\n      TResult2,\n      TResult3,\n      TResult4,\n      TResult5,\n      TResult6,\n      TResult7,\n      TResult8,\n      TResult9,\n      TResult10,\n      TResult11,\n      TResult12,\n      >(\n      processor1: (this: void, supplier: this) => TResult1,\n      processor2: (this: void, arg: TResult1) => TResult2,\n      processor3: (this: void, arg: TResult2) => TResult3,\n      processor4: (this: void, arg: TResult3) => TResult4,\n      processor5: (this: void, arg: TResult4) => TResult5,\n      processor6: (this: void, arg: TResult5) => TResult6,\n      processor7: (this: void, arg: TResult6) => TResult7,\n      processor8: (this: void, arg: TResult7) => TResult8,\n      processor9: (this: void, arg: TResult8) => TResult9,\n      processor10: (this: void, arg: TResult9) => TResult10,\n      processor11: (this: void, arg: TResult10) => TResult11,\n      processor12: (this: void, arg: TResult11) => TResult12,\n  ): TResult12;\n\n  do<\n      TResult1,\n      TResult2,\n      TResult3,\n      TResult4,\n      TResult5,\n      TResult6,\n      TResult7,\n      TResult8,\n      TResult9,\n      TResult10,\n      TResult11,\n      TResult12,\n      TResult13,\n      >(\n      processor1: (this: void, supplier: this) => TResult1,\n      processor2: (this: void, arg: TResult1) => TResult2,\n      processor3: (this: void, arg: TResult2) => TResult3,\n      processor4: (this: void, arg: TResult3) => TResult4,\n      processor5: (this: void, arg: TResult4) => TResult5,\n      processor6: (this: void, arg: TResult5) => TResult6,\n      processor7: (this: void, arg: TResult6) => TResult7,\n      processor8: (this: void, arg: TResult7) => TResult8,\n      processor9: (this: void, arg: TResult8) => TResult9,\n      processor10: (this: void, arg: TResult9) => TResult10,\n      processor11: (this: void, arg: TResult10) => TResult11,\n      processor12: (this: void, arg: TResult11) => TResult12,\n      processor13: (this: void, arg: TResult12) => TResult13,\n  ): TResult13;\n\n  /**\n   * Attaches callbacks to the next event and/or supply cut off reason.\n   *\n   * This method makes event sender act as promise-like for the first parameter of the next event. Thus it is possible\n   * e.g. to use it in `await` expression.\n   *\n   * @param onEvent - The callback to execute when next event received.\n   * @param onCutOff - The callback to execute when supply is cut off before the next event received.\n   *\n   * @returns A Promise for the next event.\n   */\n  then<TResult1 = TEvent extends [infer F, ...any[]] ? F : undefined, TResult2 = never>(\n      onEvent?: ((...event: TEvent) => TResult1 | PromiseLike<TResult1>) | undefined | null,\n      onCutOff?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null,\n  ): Promise<TResult1 | TResult2>;\n\n}\n\n/**\n * Converts a plain event receiver registration function to {@link OnEvent} sender.\n *\n * @category Core\n * @typeParam TEvent - An event type. This is a list of event receiver parameter types.\n * @param register - Generic event receiver registration function. It will be called on each receiver registration,\n * unless the receiver's {@link EventReceiver.Generic.supply event supply} is cut off already.\n *\n * @returns An {@link OnEvent} sender registering event receivers with the given `register` function.\n */\nexport function onEventBy<TEvent extends any[]>(\n    register: (this: void, receiver: EventReceiver.Generic<TEvent>) => void,\n): OnEvent<TEvent> {\n\n  const onEvent = ((receiver: EventReceiver<TEvent>): Supply => {\n\n    const generic = eventReceiver(receiver);\n    const { supply } = generic;\n\n    if (!supply.isOff) {\n      try {\n        register(generic);\n      } catch (error) {\n        supply.off(error);\n      }\n    }\n\n    return supply;\n  }) as OnEvent<TEvent>;\n\n  onEvent[OnEvent__symbol] = OnEvent$supplier;\n  onEvent.do = OnEvent$do;\n  onEvent.then = OnEvent$then;\n\n  return onEvent;\n}\n\n/**\n * Checks whether the given value is an {@link OnEvent} sender.\n *\n * @category Core\n * @typeParam TEvent - Expected event type.\n * @typeParam TOther - Another type the value may have.\n * @param value - A value to check.\n *\n * @returns `true` if the `value` has been created by {@link onEventBy} function or in compatible way,\n * or `false` otherwise.\n */\nexport function isOnEvent<TEvent extends any[], TOther = unknown>(\n    value: OnEvent<TEvent> | TOther,\n): value is OnEvent<TEvent> {\n  return typeof value === 'function'\n      && (value as Partial<OnEvent<TEvent>>)[OnEvent__symbol] === OnEvent$supplier\n      && (value as Partial<OnEvent<TEvent>>).do === OnEvent$do\n      && (value as Partial<OnEvent<TEvent>>).then === OnEvent$then;\n}\n","import { noop } from '@proc7ts/primitives';\nimport { Supply } from '@proc7ts/supply';\nimport { AfterEvent__symbol, EventKeeper, eventReceiver, EventReceiver, OnEvent__symbol } from './base';\nimport { AfterEvent$noFallback, OnEvent$do, OnEvent$supplier, OnEvent$then } from './impl';\nimport { isOnEvent, OnEvent } from './on-event';\n\n/**\n * Signature of {@link EventKeeper} implementation able to register the receivers of kept and upcoming events.\n *\n * The registered event receiver receives the kept event immediately upon registration, and all upcoming events\n * after that until the returned event supply is cut off.\n *\n * To convert a plain event receiver registration function to {@link AfterEvent} an {@link afterEventBy} function can\n * be used.\n *\n * May be constructed using {@link afterEventBy} function.\n *\n * @category Core\n * @typeParam TEvent - An event type. This is a list of event receiver parameter types.\n */\nexport interface AfterEvent<TEvent extends any[]> extends OnEvent<TEvent>, EventKeeper<TEvent> {\n\n  /**\n   * Starts sending events to the given `receiver`.\n   *\n   * @param receiver - Target receiver of events.\n   *\n   * @returns A supply of events from this keeper to the given `receiver`.\n   */\n  (receiver: EventReceiver<TEvent>): Supply;\n\n  [AfterEvent__symbol](): this;\n\n}\n\n/**\n * Converts a plain event receiver registration function to {@link AfterEvent} keeper with a fallback.\n *\n * The event constructed by `fallback` will be sent to the registered first receiver, unless `register` function sends\n * one.\n *\n * @category Core\n * @typeParam TEvent - An event type. This is a list of event receiver parameter types.\n * @param register - Generic event receiver registration function. It will be called on each receiver registration,\n * unless the receiver's {@link EventReceiver.Generic.supply event supply} is cut off already.\n * @param fallback - A function creating fallback event. When omitted, the initial event is expected to be sent by\n * `register` function. A receiver registration would lead to an error otherwise.\n * @param cleanup - A function that will be called once all registered event supplies cut off.\n *\n * @returns An {@link AfterEvent} keeper registering event receivers with the given `register` function.\n */\nexport function afterEventBy<TEvent extends any[]>(\n    register: (this: void, receiver: EventReceiver.Generic<TEvent>) => void,\n    fallback: (this: void) => TEvent = AfterEvent$noFallback,\n    cleanup: (this: void, reason?: unknown) => void = AfterEvent$noCleanup,\n): AfterEvent<TEvent> {\n\n  let lastEvent: TEvent | undefined;\n  let numReceivers = 0;\n\n  const afterEvent = ((receiver: EventReceiver<TEvent>): Supply => {\n\n    let dest: (context: EventReceiver.Context<TEvent>, ...event: TEvent) => void = noop;\n    const generic = eventReceiver(receiver);\n\n    if (generic.supply.isOff) {\n      return generic.supply;\n    }\n\n    const supply = new Supply(noop).needs(generic);\n    let reported = false;\n\n    ++numReceivers;\n    try {\n      register({\n        supply,\n        receive: (context, ...event: TEvent) => {\n          reported = true;\n          lastEvent = event;\n          dest(context, ...event);\n        },\n      });\n    } catch (error) {\n      supply.off(error);\n    }\n\n    if (!supply.isOff || reported) {\n      if (!lastEvent) {\n        try {\n          lastEvent = fallback();\n        } catch (error) {\n          supply.off(error);\n        }\n      }\n      if (lastEvent) {\n        generic.receive(\n            {\n              onRecurrent(recurrent) {\n                dest = (_context, ...event) => recurrent(...event);\n              },\n            },\n            ...lastEvent,\n        );\n        dest = (context, ...event) => generic.receive(context, ...event);\n      }\n    }\n\n    return supply.whenOff(reason => {\n      if (!--numReceivers) {\n        lastEvent = undefined;\n      }\n      generic.supply.off(reason);\n      if (!numReceivers) {\n        cleanup(reason);\n      }\n    });\n  }) as AfterEvent<TEvent>;\n\n  afterEvent[OnEvent__symbol] = OnEvent$supplier;\n  afterEvent.do = OnEvent$do;\n  afterEvent.then = OnEvent$then;\n  afterEvent[AfterEvent__symbol] = OnEvent$supplier;\n\n  return afterEvent;\n}\n\nfunction AfterEvent$noCleanup(_reason: unknown): void {\n  // No-op `AfterEvent` cleanup\n}\n\n/**\n * Checks whether the given value is an {@link AfterEvent} keeper.\n *\n * @category Core\n * @typeParam TEvent - Expected event type.\n * @typeParam TOther - Another type the value may have.\n * @param value - A value to check.\n *\n * @returns `true` if the `value` has been created by {@link afterEventBy} function or in compatible way,\n * or `false` otherwise.\n */\nexport function isAfterEvent<TEvent extends any[], TOther = unknown>(\n    value: AfterEvent<TEvent> | TOther,\n): value is AfterEvent<TEvent> {\n  return isOnEvent(value) && (value as Partial<AfterEvent<TEvent>>)[AfterEvent__symbol] === OnEvent$supplier;\n}\n","import { noop } from '@proc7ts/primitives';\nimport { Supply } from '@proc7ts/supply';\nimport { AfterEvent, afterEventBy } from '../after-event';\nimport { AfterEvent__symbol, EventKeeper, EventReceiver, sendEventsTo } from '../base';\nimport { onceEvent, shareEvents } from '../impl';\n\n/**\n * Builds an {@link AfterEvent} keeper of events sent by all event keepers in `sources` map.\n *\n * @category Core\n * @typeParam TSrcMap - A type of `sources` map.\n * @param sources - A map of named event keepers the events are originated from.\n *\n * @returns An event keeper sending a map of events received from each source keeper. Each event in this map has the\n * same key as its source keeper in `sources`.\n */\nexport function afterAll<TSrcMap extends { readonly [key: string]: EventKeeper<any> }>(\n    sources: TSrcMap,\n): AfterEvent<[{ readonly [K in keyof TSrcMap]: EventKeeper.Event<TSrcMap[K]> }]> {\n\n  const keys = Object.keys(sources);\n\n  const registerReceiver = (\n      receiver: EventReceiver.Generic<[{ readonly [K in keyof TSrcMap]: EventKeeper.Event<TSrcMap[K]> }]>,\n  ): void => {\n\n    const { supply } = receiver;\n    const dispatch = sendEventsTo(receiver);\n    let send: () => void = noop;\n    const result = {} as { [K in keyof TSrcMap]: EventKeeper.Event<TSrcMap[K]> };\n\n    keys.forEach(<TSrcKey extends keyof TSrcMap>(key: TSrcKey) => {\n      supply.needs(sources[key][AfterEvent__symbol]()((...event: EventKeeper.Event<TSrcMap[TSrcKey]>) => {\n        result[key] = event;\n        send();\n      }).needs(supply));\n    });\n\n    if (!supply.isOff) {\n      send = () => dispatch(result);\n    }\n  };\n\n  const latestEvent = (): [{ readonly [K in keyof TSrcMap]: EventKeeper.Event<TSrcMap[K]> }] => {\n\n    const result = {} as { [K in keyof TSrcMap]: EventKeeper.Event<TSrcMap[K]> };\n\n    keys.forEach(\n        <TSrcKey extends keyof TSrcMap>(key: TSrcKey) => onceEvent(sources[key][AfterEvent__symbol]())({\n          supply: new Supply(),\n          receive: (_ctx, ...event: EventKeeper.Event<TSrcMap[TSrcKey]>) => result[key as keyof TSrcMap] = event,\n        }),\n    );\n\n    return [result];\n  };\n\n  return afterEventBy(shareEvents(afterEventBy(registerReceiver, latestEvent)));\n}\n","import { noop } from '@proc7ts/primitives';\nimport { Supply } from '@proc7ts/supply';\nimport { AfterEvent, afterEventBy } from '../after-event';\nimport { AfterEvent__symbol, EventKeeper, EventReceiver, sendEventsTo } from '../base';\nimport { onceEvent, shareEvents } from '../impl';\n\n/**\n * Builds an {@link AfterEvent} keeper of events sent by each of the `sources`.\n *\n * @category Core\n * @typeParam TEvent - A type of events sent by each source.\n * @param sources - An array of source event keepers.\n *\n * @returns An event keeper sending events received from each source keeper. Each event item is an event tuple\n * originated from source keeper under its index in `sources` array.\n */\nexport function afterEach<TEvent extends any[]>(...sources: EventKeeper<TEvent>[]): AfterEvent<TEvent[]> {\n\n  const registerReceiver = (receiver: EventReceiver.Generic<TEvent[]>): void => {\n\n    const { supply } = receiver;\n    const dispatch = sendEventsTo(receiver);\n    let send: () => void = noop;\n    const result: TEvent[] = [];\n\n    sources.forEach((source, index) => {\n      supply.needs(source[AfterEvent__symbol]()((...event) => {\n        result[index] = event;\n        send();\n      }).needs(supply));\n    });\n\n    if (!supply.isOff) {\n      send = () => dispatch(...result);\n    }\n  };\n\n  const latestEvent = (): TEvent[] => {\n\n    const result: TEvent[] = [];\n\n    sources.forEach(\n        source => onceEvent(source[AfterEvent__symbol]())({\n          supply: new Supply(),\n          receive: (_ctx, ...event) => result.push(event),\n        }),\n    );\n\n    return result;\n  };\n\n  return afterEventBy(shareEvents(afterEventBy(registerReceiver, latestEvent)));\n}\n","import { AfterEvent, afterEventBy } from '../after-event';\nimport { EventSender, OnEvent__symbol } from '../base';\n\n/**\n * Builds an {@link AfterEvent} keeper of events sent by the given `sender`.\n *\n * The event generated by `fallback` will be sent to the registered first receiver, unless `register` function sends\n * one.\n *\n * @category Core\n * @typeParam TEvent - An event type. This is a list of event receiver parameter types.\n * @param sender - An event sender.\n * @param fallback - A function creating fallback event. When omitted, the initial event is expected to be sent by\n * `register` function. A receiver registration would lead to an error otherwise.\n *\n * @returns An {@link AfterEvent} keeper of events either originated from the given `sender`, or `initial` one.\n */\nexport function afterSent<TEvent extends any[]>(\n    sender: EventSender<TEvent>,\n    fallback?: (this: void) => TEvent,\n): AfterEvent<TEvent> {\n  return afterEventBy(receiver => sender[OnEvent__symbol]()(receiver), fallback);\n}\n","import { AfterEvent } from '../after-event';\nimport { AfterEvent__symbol, EventKeeper, EventSupplier, isEventKeeper } from '../base';\nimport { afterSent } from './after-sent';\n\n/**\n * Builds an {@link AfterEvent} keeper of events sent by the given `keeper`.\n *\n * @category Core\n * @typeParam TEvent - An event type. This is a list of event receiver parameter types.\n * @param keeper - A keeper of events.\n *\n * @returns An {@link AfterEvent} keeper of events originated from the given `keeper`.\n */\nexport function afterSupplied<TEvent extends any[]>(keeper: EventKeeper<TEvent>): AfterEvent<TEvent>;\n\n/**\n * Builds an {@link AfterEvent} keeper of events sent by the given `supplier`.\n *\n * The event generated by `fallback` will be sent to the registered first receiver, unless `supplier` sends one.\n *\n * This is a synonym of {@link afterSent}, unless `supplier` is an {@link EventKeeper}.\n *\n * @typeParam TEvent - An event type. This is a list of event receiver parameter types.\n * @param supplier - An event supplier.\n * @param fallback - A function creating fallback event. When omitted, the initial event is expected to be sent by\n * `supplier`. A receiver registration would lead to an error otherwise.\n *\n * @returns An {@link AfterEvent} keeper of events either originated from the given `supplier`, or `initial` one.\n */\nexport function afterSupplied<TEvent extends any[]>(\n    supplier: EventSupplier<TEvent>,\n    fallback?: (this: void) => TEvent,\n): AfterEvent<TEvent>;\n\nexport function afterSupplied<TEvent extends any[]>(\n    supplier: EventSupplier<TEvent>,\n    fallback?: (this: void) => TEvent,\n): AfterEvent<TEvent> {\n  return isEventKeeper(supplier) ? supplier[AfterEvent__symbol]() : afterSent(supplier, fallback);\n}\n","import { noop, valueProvider } from '@proc7ts/primitives';\nimport { AfterEvent, afterEventBy } from '../after-event';\n\n/**\n * Builds an {@link AfterEvent} keeper of the given `event`.\n *\n * @category Core\n * @typeParam TEvent - An event type. This is a list of event receiver parameter types.\n * @param event - An event that will be sent to all receivers upon registration.\n *\n * @returns An {@link AfterEvent} keeper that always sends the given `event`.\n */\nexport function afterThe<TEvent extends any[]>(...event: TEvent): AfterEvent<TEvent> {\n  return afterEventBy(noop, valueProvider(event));\n}\n","import { AfterEvent, isAfterEvent } from '../after-event';\nimport { afterThe } from './after-the';\n\n/**\n * Builds an {@link AfterEvent} keeper of the given `value`.\n *\n * @category Core\n * @typeParam T - Value type.\n * @param value - Either a value that will be sent to all receivers upon registration, or an {@link AfterEvent} keeper\n * of such values.\n *\n * @returns An {@link AfterEvent} keeper that always sends the given `value`, or the `value` itself, when it is already\n * an `AfterEvent` keeper.\n */\nexport function afterValue<T>(value: T | AfterEvent<[T]>): AfterEvent<[T]>;\n\n/**\n * Builds an {@link AfterEvent} keeper of the optional `value`.\n *\n * @category Core\n * @typeParam T - Value type.\n * @param value - Either `undefined`, a value that will be sent to all receivers upon registration, or an\n * {@link AfterEvent} keeper of optional values.\n *\n * @returns An {@link AfterEvent} keeper that always sends the given `value`, or the `value` itself, when it is already\n * an `AfterEvent` keeper.\n */\nexport function afterValue<T>(value: T | AfterEvent<[T?]> | undefined): AfterEvent<[T?]>;\n\nexport function afterValue<T>(value: T | AfterEvent<[T]>): AfterEvent<[T]> {\n  return isAfterEvent(value) ? value : afterThe(value);\n}\n","import { neverSupply, Supply, SupplyPeer } from '@proc7ts/supply';\nimport { OnEvent } from '../on-event';\n\n/**\n * Creates an event processor that consumes incoming events.\n *\n * @category Event Processing\n * @typeParam TEvent - Incoming event type. This is a list of consumer function parameter types.\n * @param consume - A function consuming events. This function may return a {@link SupplyPeer peer of event supply},\n * e.g. when registers a nested event receiver. This supply will be cut off on new event, unless returned again.\n *\n * @returns A function accepting incoming event supplier and returning event supply that will stop consuming events once\n * cut off.\n */\nexport function consumeEvents<TEvent extends any[]>(\n    consume: (this: void, ...event: TEvent) => SupplyPeer | void | undefined,\n): (this: void, input: OnEvent<TEvent>) => Supply {\n  return input => {\n\n    let consumerSupply = neverSupply();\n\n    // Do not use `.cuts()` here as `consumerSupply` is mutable\n    const supply = new Supply(reason => consumerSupply.off(reason));\n\n    input({\n      supply,\n      receive(_ctx, ...event: TEvent) {\n\n        const prevSupply = consumerSupply;\n\n        try {\n          consumerSupply = (consume(...event) || neverSupply()).supply;\n        } finally {\n          if (consumerSupply !== prevSupply) {\n            prevSupply.off();\n          }\n        }\n      },\n    });\n\n    return supply;\n  };\n}\n","import { AfterEvent, afterEventBy } from '../after-event';\nimport { shareEvents } from '../impl';\n\n/**\n * A processor of events incoming from {@link AfterEvent} keeper that shares outgoing events supply among all registered\n * receivers.\n *\n * The created keeper receives events from this one and sends to registered receivers. The shared keeper registers\n * a receiver in this one only once, when first receiver registered. And cuts off original events supply once all\n * event supplies do.\n *\n * @category Event Processing\n * @typeParam TEvent - An event type. This is a list of event receiver parameter types.\n * @param supplier - Event keeper to share events from.\n *\n * @returns An {@link AfterEvent} keeper sharing a common supply of events.\n */\nexport function shareAfter<TEvent extends any[]>(supplier: AfterEvent<TEvent>): AfterEvent<TEvent> {\n  return afterEventBy(shareEvents(supplier));\n}\n","import { arraysAreEqual, asis, countArgs } from '@proc7ts/primitives';\nimport { AfterEvent, afterEventBy } from '../after-event';\nimport { shareAfter } from './share-after';\n\nlet deduplicateAfter$default:// eslint-disable-line @typescript-eslint/naming-convention\n    | ((this: void, input: AfterEvent<any>) => AfterEvent<any>)\n    | undefined;\n\n/**\n * Creates an event processor that ensures the same event incoming from `{@link AfterEvent} keeper is not reported\n * twice.\n *\n * The outgoing events supply is cut off once the incoming events supply do.\n *\n * @category Event Processing\n * @typeParam TEvent - An event type.\n * @param isDuplicate - A function that checks whether the next incoming event is a duplicate of a previously reported\n * one. Accepts a prior and next event tuples as parameters, and returns a truthy value if they are duplicates.\n * By default, treats event tuples as duplicates if corresponding meaningful arguments are strictly equal.\n *\n * @returns Deduplicating processor of events incoming from {@link @AfterEvent} keeper.\n */\nexport function deduplicateAfter<TEvent extends any[]>(\n    isDuplicate?: (this: void, prior: TEvent, next: TEvent) => boolean,\n): (this: void, input: AfterEvent<TEvent>) => AfterEvent<TEvent>;\n\n/**\n * Creates an event processor that similar events incoming from `{@link AfterEvent} keeper are not reported more than\n * once.\n *\n * The outgoing events supply is cut off once the incoming events supply do.\n *\n * @category Event Processing\n * @typeParam TEvent - An event type.\n * @typeParam TCue - An event cue type.\n * @param isSimilar - A function that checks whether the next incoming event is similar to previously reported one.\n * Accepts the prior and next event cues as parameters, and returns a truthy value if those are cues of similar events.\n * @param getCue - A function that accepts an event tuple and returns its cue.\n *\n * @returns Deduplicating processor of events incoming from {@link @AfterEvent} keeper.\n */\nexport function deduplicateAfter<TEvent extends any[], TCue>(\n    isSimilar: (this: void, prior: TCue, next: TCue) => boolean,\n    getCue: (this: void, value: TEvent) => TCue,\n): (this: void, input: AfterEvent<TEvent>) => AfterEvent<TEvent>;\n\nexport function deduplicateAfter<TEvent extends any[], TCue>(\n    isSimilar?: (this: void, prior: TCue, next: TCue) => boolean,\n    getCue?: (this: void, value: TEvent) => TCue,\n): (this: void, input: AfterEvent<TEvent>) => AfterEvent<TEvent> {\n  return isSimilar || getCue\n      ? deduplicateAfter$create(isSimilar, getCue)\n      : (deduplicateAfter$default || (deduplicateAfter$default = deduplicateAfter$create()));\n}\n\nfunction deduplicateAfter$create<TEvent extends any[], TCue>(\n    isSimilar?: (this: void, prior: TCue, next: TCue) => boolean,\n    getCue?: (this: void, value: TEvent) => TCue,\n): (this: void, input: AfterEvent<TEvent>) => AfterEvent<TEvent> {\n\n  const processor = deduplicateAfter_(isSimilar!, getCue!);\n\n  return input => shareAfter(processor(input));\n}\n\nlet deduplicateAfter_$default:// eslint-disable-line @typescript-eslint/naming-convention\n    | ((this: void, input: AfterEvent<any>) => AfterEvent<any>)\n    | undefined;\n\n/**\n * Creates an event processor that ensures the same event incoming from `{@link AfterEvent} keeper is not reported\n * twice, and does not share the outgoing events supply.\n *\n * The outgoing events supply is cut off once the incoming events supply do.\n *\n * @category Event Processing\n * @typeParam TEvent - An event type.\n * @param isDuplicate - A function that checks whether the next incoming event is a duplicate of a previously reported\n * one. Accepts a prior and next event tuples as parameters, and returns a truthy value if they are duplicates.\n * By default, treats event tuples as duplicates if corresponding meaningful arguments are strictly equal.\n *\n * @returns Deduplicating processor of events incoming from {@link @AfterEvent} keeper.\n */\nexport function deduplicateAfter_<TEvent extends any[]>(// eslint-disable-line @typescript-eslint/naming-convention\n    isDuplicate?: (this: void, prior: TEvent, next: TEvent) => boolean,\n): (this: void, input: AfterEvent<TEvent>) => AfterEvent<TEvent>;\n\n/**\n * Creates an event processor that similar events incoming from `{@link AfterEvent} keeper are not reported more than\n * once, and does not share the outgoing events supply.\n *\n * The outgoing events supply is cut off once the incoming events supply do.\n *\n * @category Event Processing\n * @typeParam TEvent - An event type.\n * @typeParam TCue - An event cue type.\n * @param isSimilar - A function that checks whether the next incoming event is similar to previously reported one.\n * Accepts the prior and next event cues as parameters, and returns a truthy value if those are cues of similar events.\n * @param getCue - A function that accepts an event tuple and returns its cue.\n *\n * @returns Deduplicating processor of events incoming from {@link @AfterEvent} keeper.\n */\nexport function deduplicateAfter_<// eslint-disable-line @typescript-eslint/naming-convention\n    TEvent extends any[],\n    TCue>(\n    isSimilar: (this: void, prior: TCue, next: TCue) => boolean,\n    getCue: (this: void, value: TEvent) => TCue,\n): (this: void, input: AfterEvent<TEvent>) => AfterEvent<TEvent>;\n\nexport function deduplicateAfter_<// eslint-disable-line @typescript-eslint/naming-convention\n    TEvent extends any[],\n    TCue>(\n    isSimilar?: (this: void, prior: TCue, next: TCue) => boolean,\n    getCue?: (this: void, value: TEvent) => TCue,\n): (this: void, input: AfterEvent<TEvent>) => AfterEvent<TEvent> {\n  return isSimilar || getCue\n      ? deduplicateAfter_$create(isSimilar, getCue)\n      : (deduplicateAfter_$default || (deduplicateAfter_$default = deduplicateAfter_$create())\n      );\n}\n\nconst deduplicateAfter$noPrior = {/* magic value meaning there is no cue */};\n\nfunction deduplicateAfter_$create<// eslint-disable-line @typescript-eslint/naming-convention\n    TEvent extends any[],\n    TCue\n    >(\n    isSimilar = deduplicateAfter$isDuplicate as (this: void, prior: TCue, next: TCue) => boolean,\n    getCue = asis as (this: void, value: TEvent) => TCue,\n): (this: void, input: AfterEvent<TEvent>) => AfterEvent<TEvent> {\n  return input => {\n\n    let prior: TCue | typeof deduplicateAfter$noPrior = deduplicateAfter$noPrior;\n\n    return afterEventBy(\n        ({ supply, receive }) => input({\n          supply,\n          receive(ctx, ...nextEvent) {\n\n            const next = getCue(nextEvent);\n\n            if (prior === deduplicateAfter$noPrior || !isSimilar(prior as TCue, next)) {\n              prior = next;\n              receive(ctx, ...nextEvent);\n            }\n          },\n        }),\n        undefined,\n        _ => prior = deduplicateAfter$noPrior,\n    );\n  };\n}\n\nfunction deduplicateAfter$isDuplicate<TEvent extends any[]>(prior: TEvent, next: TEvent): boolean {\n  return arraysAreEqual(prior, next, Math.max(countArgs(prior), countArgs(next)));\n}\n","import { AfterEvent, afterEventBy } from '../after-event';\nimport { EventKeeper } from '../base';\nimport { digEvents } from '../impl';\nimport { afterSupplied } from '../keepers';\nimport { OnEvent } from '../on-event';\nimport { shareAfter } from './share-after';\n\n/**\n * Creates an event processor that extracts event keepers from events incoming from `{@link AfterEvent} keeper.\n *\n * The outgoing events supply is cut off once the incoming events supply do.\n *\n * @category Event Processing\n * @typeParam TInEvent - Incoming events type.\n * @typeParam TOutEvent - Extracted events type.\n * @param extract - A function extracting outgoing event keeper from incoming event. May return `undefined` when\n * nothing extracted.\n *\n * @returns New processor of events incoming from {@link @AfterEvent} keeper.\n */\nexport function digAfter<\n    TInEvent extends any[],\n    TOutEvent extends any[],\n    >(\n    extract: (this: void, ...event: TInEvent) => EventKeeper<TOutEvent> | void | undefined,\n): (this: void, input: AfterEvent<TInEvent>) => AfterEvent<TOutEvent>;\n\n/**\n * Creates an event processor that extracts event keepers from events incoming from `{@link OnEvent} sender.\n *\n * The outgoing events supply is cut off once the incoming events supply do.\n *\n * @category Event Processing\n * @typeParam TInEvent - Incoming events type.\n * @typeParam TOutEvent - Extracted events type.\n * @param extract - A function extracting outgoing event keeper from incoming event. May return `undefined` when\n * nothing extracted.\n * @param fallback - A function creating fallback event.\n *\n * @returns New processor of events incoming from {@link @OnEvent} sender.\n */\nexport function digAfter<\n    TInEvent extends any[],\n    TOutEvent extends any[],\n    >(\n    extract: (this: void, ...event: TInEvent) => EventKeeper<TOutEvent> | void | undefined,\n    fallback: (this: void) => TOutEvent,\n): (this: void, input: OnEvent<TInEvent>) => AfterEvent<TOutEvent>;\n\nexport function digAfter<\n    TInEvent extends any[],\n    TOutEvent extends any[],\n    >(\n    extract: (this: void, ...event: TInEvent) => EventKeeper<TOutEvent> | void | undefined,\n    fallback?: (this: void) => TOutEvent,\n): (this: void, input: OnEvent<TInEvent>) => AfterEvent<TOutEvent> {\n\n  const processor = digAfter_(extract, fallback!);\n\n  return input => shareAfter(processor(input));\n}\n\n/**\n * Creates an event processor that extracts event keepers from events incoming from `{@link AfterEvent} keeper,\n * and does not share the outgoing events supply.\n *\n * The outgoing events supply is cut off once the incoming events supply do.\n *\n * @category Event Processing\n * @typeParam TInEvent - Incoming events type.\n * @typeParam TOutEvent - Extracted events type.\n * @param extract - A function extracting outgoing event keeper from incoming event. May return `undefined` when\n * nothing extracted.\n *\n * @returns New processor of events incoming from {@link @AfterEvent} keeper.\n */\nexport function digAfter_<// eslint-disable-line @typescript-eslint/naming-convention\n    TInEvent extends any[],\n    TOutEvent extends any[],\n    >(\n    extract: (this: void, ...event: TInEvent) => EventKeeper<TOutEvent> | void | undefined,\n): (this: void, input: AfterEvent<TInEvent>) => AfterEvent<TOutEvent>;\n\n/**\n * Creates an event processor that extracts event keepers from events incoming from `{@link OnEvent} sender,\n * and does not share the outgoing events supply.\n *\n * The outgoing events supply is cut off once the incoming events supply do.\n *\n * @category Event Processing\n * @typeParam TInEvent - Incoming events type.\n * @typeParam TOutEvent - Extracted events type.\n * @param extract - A function extracting outgoing event keeper from incoming event. May return `undefined` when\n * nothing extracted.\n * @param fallback - A function creating fallback event.\n *\n * @returns New processor of events incoming from {@link @OnEvent} sender.\n */\nexport function digAfter_<// eslint-disable-line @typescript-eslint/naming-convention\n    TInEvent extends any[],\n    TOutEvent extends any[],\n    >(\n    extract: (this: void, ...event: TInEvent) => EventKeeper<TOutEvent> | void | undefined,\n    fallback: (this: void) => TOutEvent,\n): (this: void, input: OnEvent<TInEvent>) => AfterEvent<TOutEvent>;\n\nexport function digAfter_<// eslint-disable-line @typescript-eslint/naming-convention\n    TInEvent extends any[],\n    TOutEvent extends any[],\n    >(\n    extract: (this: void, ...event: TInEvent) => EventKeeper<TOutEvent> | void | undefined,\n    fallback?: (this: void) => TOutEvent,\n): (this: void, input: OnEvent<TInEvent>) => AfterEvent<TOutEvent> {\n\n  const extractKeeper = (...events: TInEvent): AfterEvent<TOutEvent> | void => {\n\n    const extracted = extract(...events);\n\n    return extracted && afterSupplied(extracted);\n  };\n\n  return input => afterEventBy(digEvents(input, extractKeeper), fallback);\n}\n","import { EventNotifier, EventSender, OnEvent__symbol } from '../base';\nimport { OnEvent, onEventBy } from '../on-event';\n\n/**\n * Event emitter is a handy implementation of {@link OnEvent} sender.\n *\n * Extends {@link EventNotifier} by making its {@link EventNotifier.on} method implement an {@link OnEvent} interface.\n *\n * @category Core\n * @typeParam TEvent - An event type. This is a list of event receiver parameter types.\n */\nexport class EventEmitter<TEvent extends any[]> extends EventNotifier<TEvent> implements EventSender<TEvent> {\n\n  /**\n   * {@link OnEvent} sender of {@link send emitted} events.\n   *\n   * The `[OnEvent__symbol]` method is an alias of this one.\n   */\n  readonly on: OnEvent<TEvent> = onEventBy(receiver => super.on(receiver));\n\n  [OnEvent__symbol](): OnEvent<TEvent> {\n    return this.on;\n  }\n\n}\n","import { neverReceive } from '../base/impl';\nimport { OnEvent, onEventBy } from '../on-event';\n\n/**\n * An {@link OnEvent} sender that never sends any events.\n *\n * @category Core\n */\nexport const onNever: OnEvent<any> = (/*#__PURE__*/ onEventBy(neverReceive));\n","import { AfterEvent__symbol, EventSupplier, isEventSender, OnEvent__symbol } from '../base';\nimport { OnEvent } from '../on-event';\n\n/**\n * Builds an {@link OnEvent} sender of events supplied by the given `supplier`.\n *\n * @category Core\n * @typeParam TEvent - An event type. This is a list of event receiver parameter types.\n * @param supplier - An event supplier.\n *\n * @returns An {@link OnEvent} sender of events originated from the given `supplier`.\n */\nexport function onSupplied<TEvent extends any[]>(supplier: EventSupplier<TEvent>): OnEvent<TEvent> {\n  return isEventSender(supplier) ? supplier[OnEvent__symbol]() : supplier[AfterEvent__symbol]();\n}\n","import { Supply } from '@proc7ts/supply';\nimport { EventSupplier } from '../base';\nimport { shareEvents } from '../impl';\nimport { OnEvent, onEventBy } from '../on-event';\nimport { onNever } from './on-never';\nimport { onSupplied } from './on-supplied';\n\n/**\n * Builds an {@link OnEvent} sender of events sent by any of the given `suppliers`.\n *\n * The resulting event supply is cut off as soon as all source supplies do.\n *\n * @category Core\n * @typeParam TEvent - An event type. This is a list of event receiver parameter types.\n * @param suppliers - Original event suppliers.\n *\n * @returns An {@link OnEvent} sender of all supplied events.\n */\nexport function onAny<TEvent extends any[]>(...suppliers: EventSupplier<TEvent>[]): OnEvent<TEvent> {\n  if (!suppliers.length) {\n    return onNever as OnEvent<TEvent>;\n  }\n\n  return onEventBy(shareEvents(onEventBy<TEvent>(({ supply, receive }) => {\n\n    let remained = suppliers.length;\n    const removeSupplier = (reason?: any): void => {\n      if (!--remained) {\n        supply.off(reason);\n      }\n    };\n\n    suppliers.forEach(\n        supplier => onSupplied(supplier)({\n          supply: new Supply(removeSupplier).needs(supply),\n          receive,\n        }),\n    );\n  })));\n}\n","import { EventReceiver } from '../base';\nimport { alwaysReceiveValue, neverReceiveBecause } from '../base/impl';\nimport { OnEvent, onEventBy } from '../on-event';\n\n/**\n * Represents a promise as event sender.\n *\n * When the `promise` resolves successfully the resolved value is sent to registered event receivers. The events\n * supply is {@link Supply.off cut off} immediately after that without any reason specified.\n *\n * When the `promise` is rejected the events supply is {@link Supply.off cut off} with promise rejection reason.\n *\n * @category Core\n * @typeParam T - A type of value the promise is resolved to.\n * @param promise - The promise to represent as event sender.\n *\n * @returns An {@link OnEvent} sender of the given `promise` settlement event.\n */\nexport function onPromise<T>(promise: Promise<T>): OnEvent<[T]> {\n\n  let receive = (receiver: EventReceiver.Generic<[T]>): void => {\n    promise.then(() => receive(receiver), () => receive(receiver));\n  };\n\n  promise.then(value => {\n    receive = alwaysReceiveValue(value);\n  }).catch(e => {\n    receive = neverReceiveBecause(e);\n  });\n\n  return onEventBy(receiver => receive(receiver));\n}\n","import { EventReceiver } from '../event-receiver';\nimport { sendEventsTo } from '../send-events-to';\n\n/**\n * @internal\n */\nexport function alwaysReceiveValue<T>(value: T): (receiver: EventReceiver.Generic<[T]>) => void {\n  return receiver => {\n    try {\n      sendEventsTo(receiver)(value);\n      receiver.supply.off();\n    } catch (e) {\n      receiver.supply.off(e);\n    }\n  };\n}\n","import { shareEvents } from '../impl';\nimport { OnEvent, onEventBy } from '../on-event';\n\n/**\n * A processor of events incoming from {@link OnEvent} sender that shares outgoing events supply among all registered\n * receivers.\n *\n * The created sender receives events from this one and sends to registered receivers. The shared sender registers\n * a receiver in this one only once, when first receiver registered. And cuts off original events supply once all\n * supplies do.\n *\n * @category Event Processing\n * @typeParam TEvent - An event type. This is a list of event receiver parameter types.\n * @param supplier - Event sender to share events from.\n *\n * @returns An {@link OnEvent} sender sharing a common supply of events.\n */\nexport function shareOn<TEvent extends any[]>(supplier: OnEvent<TEvent>): OnEvent<TEvent> {\n  return onEventBy(shareEvents(supplier));\n}\n","import { EventSupplier } from '../base';\nimport { digEvents } from '../impl';\nimport { OnEvent, onEventBy } from '../on-event';\nimport { onSupplied } from '../senders';\nimport { shareOn } from './share-on';\n\n/**\n * Creates an event processor that extracts event senders from incoming events.\n *\n * The outgoing events supply is cut off once the incoming events supply do.\n *\n * @category Event Processing\n * @typeParam TInEvent - Incoming events type.\n * @typeParam TOutEvent - Extracted events type.\n * @param extract - A function extracting outgoing event supplier from incoming event. May return `undefined` when\n * nothing extracted.\n *\n * @returns New event processor.\n */\nexport function digOn<\n    TInEvent extends any[],\n    TOutEvent extends any[],\n    >(\n    extract: (this: void, ...event: TInEvent) => EventSupplier<TOutEvent> | void | undefined,\n): (this: void, input: OnEvent<TInEvent>) => OnEvent<TOutEvent> {\n\n  const processor = digOn_(extract);\n\n  return input => shareOn(processor(input));\n}\n\n/**\n * Creates an event processor that extracts event senders from incoming events, and does not share the outgoing events\n * supply.\n *\n * The outgoing events supply is cut off once the incoming events supply do.\n *\n * @category Event Processing\n * @typeParam TInEvent - Incoming events type.\n * @typeParam TOutEvent - Extracted events type.\n * @param extract - A function extracting outgoing event supplier from incoming event. May return `undefined` when\n * nothing extracted.\n *\n * @returns New event processor.\n */\nexport function digOn_<// eslint-disable-line @typescript-eslint/naming-convention\n    TInEvent extends any[],\n    TOutEvent extends any[],\n    >(\n    extract: (this: void, ...event: TInEvent) => EventSupplier<TOutEvent> | void | undefined,\n): (this: void, input: OnEvent<TInEvent>) => OnEvent<TOutEvent> {\n\n  const extractSender = (...event: TInEvent): OnEvent<TOutEvent> | void => {\n\n    const extracted = extract(...event);\n\n    return extracted && onSupplied(extracted);\n  };\n\n  return input => onEventBy(digEvents(input, extractSender));\n}\n","import { translateEvents } from '../impl';\nimport { OnEvent, onEventBy } from '../on-event';\nimport { shareOn } from './share-on';\n\n/**\n * Creates an event processor that translates events incoming from {@link OnEvent} sender.\n *\n * The translated events expected to be sent by the given `translate` function.\n *\n * @category Event Processing\n * @typeParam TInEvent - Incoming event type.\n * @typeParam TOutEvent - Outgoing translated event type.\n * @param translate - Event translation function. Accepts an outgoing event sender function as first parameter,\n * and incoming event as the rest of them.\n *\n * @returns A mapping function of incoming event sender to another one.\n */\nexport function translateOn<\n    TInEvent extends any[],\n    TOutEvent extends any[],\n    >(\n    translate: (this: void, send: (...event: TOutEvent) => void, ...event: TInEvent) => void,\n): (this: void, input: OnEvent<TInEvent>) => OnEvent<TOutEvent> {\n\n  const mapper = translateOn_(translate);\n\n  return input => shareOn(mapper(input));\n}\n\n/**\n * Creates an event processor that translates events incoming from {@link OnEvent} sender, and does not share the\n * outgoing events supply.\n *\n * The translated events expected to be sent by the given `translate` function.\n *\n * @category Event Processing\n * @typeParam TInEvent - Incoming event type.\n * @typeParam TOutEvent - Outgoing translated event type.\n * @param translate - Event translation function. Accepts an outgoing event sender function as first parameter,\n * and incoming event as the rest of them.\n *\n * @returns A mapping function of incoming event sender to another one.\n */\nexport function translateOn_<// eslint-disable-line @typescript-eslint/naming-convention\n    TInEvent extends any[],\n    TOutEvent extends any[],\n    >(\n    translate: (this: void, send: (...event: TOutEvent) => void, ...event: TInEvent) => void,\n): (this: void, input: OnEvent<TInEvent>) => OnEvent<TOutEvent> {\n  return input => onEventBy(translateEvents(input, translate));\n}\n","import { AfterEvent, afterEventBy } from '../after-event';\nimport { translateEvents } from '../impl';\nimport { OnEvent } from '../on-event';\nimport { shareAfter } from './share-after';\n\n/**\n * Creates an event processor that converts events incoming from {@link AfterEvent} keeper with the given converter\n * function.\n *\n * @category Event Processing\n * @typeParam TEvent - Incoming events type.\n * @typeParam TResult - Outgoing events type.\n * @param convert - A converter function that accepts incoming event as parameters and returns converted outgoing event.\n *\n * @returns New event mapper.\n */\nexport function mapAfter<TEvent extends any[], TResult>(\n    convert: (this: void, ...event: TEvent) => TResult,\n): (this: void, input: AfterEvent<TEvent>) => AfterEvent<[TResult]>;\n\n/**\n * Creates an event processor that converts events incoming from {@link OnEvent} sender with the given converter\n * function and fallback.\n *\n * @category Event Processing\n * @typeParam TEvent - Incoming events type.\n * @typeParam TResult - Outgoing events type.\n * @param convert - A converter function that accepts incoming event as parameters and returns converted outgoing event.\n * @param fallback - A function creating a fallback of outgoing event.\n *\n * @returns New event mapper.\n */\nexport function mapAfter<TEvent extends any[], TResult>(\n    convert: (this: void, ...event: TEvent) => TResult,\n    fallback: (this: void) => TResult,\n): (this: void, input: OnEvent<TEvent>) => AfterEvent<[TResult]>;\n\nexport function mapAfter<TEvent extends any[], TResult>(\n    convert: (this: void, ...event: TEvent) => TResult,\n    fallback?: (this: void) => TResult,\n): (this: void, input: AfterEvent<TEvent>) => AfterEvent<[TResult]> {\n\n  const mapper = mapAfter_(convert, fallback!);\n\n  return input => shareAfter(mapper(input));\n}\n\n/**\n * Creates an event processor that converts events incoming from {@link OnEvent} sender with the given converter\n * function, and does not share the outgoing events supply.\n *\n * @category Event Processing\n * @typeParam TEvent - Incoming events type.\n * @typeParam TResult - Outgoing events type.\n * @param convert - A converter function that accepts incoming event as parameters and returns outgoing event value.\n *\n * @returns New event mapper.\n */\nexport function mapAfter_<TEvent extends any[], TResult>(// eslint-disable-line @typescript-eslint/naming-convention\n    convert: (this: void, ...event: TEvent) => TResult,\n): (this: void, input: AfterEvent<TEvent>) => AfterEvent<[TResult]>;\n\n/**\n * Creates an event processor that converts events incoming from {@link OnEvent} sender with the given converter\n * function and fallback, and does not share the outgoing events supply.\n *\n * @category Event Processing\n * @typeParam TEvent - Incoming events type.\n * @typeParam TResult - Outgoing events type.\n * @param convert - A converter function that accepts incoming event as parameters and returns outgoing event value.\n * @param fallback - A function creating a fallback of outgoing event.\n *\n * @returns New event mapper.\n */\nexport function mapAfter_<TEvent extends any[], TResult>(// eslint-disable-line @typescript-eslint/naming-convention\n    convert: (this: void, ...event: TEvent) => TResult,\n    fallback: (this: void) => TResult,\n): (this: void, input: OnEvent<TEvent>) => AfterEvent<[TResult]>;\n\nexport function mapAfter_<TEvent extends any[], TResult>(// eslint-disable-line @typescript-eslint/naming-convention\n    convert: (this: void, ...event: TEvent) => TResult,\n    fallback?: (this: void) => TResult,\n): (this: void, input: OnEvent<TEvent>) => AfterEvent<[TResult]> {\n  return input => afterEventBy(\n      translateEvents(\n          input,\n          (send, ...event) => send(convert(...event)),\n      ),\n      fallback && (() => [fallback()]),\n  );\n}\n","import { translateEvents } from '../impl';\nimport { OnEvent, onEventBy } from '../on-event';\nimport { shareOn } from './share-on';\n\n/**\n * Creates an event processor that converts events incoming from {@link OnEvent} sender with the given converter\n * function.\n *\n * @category Event Processing\n * @typeParam TEvent - Incoming events type.\n * @typeParam TResult - Outgoing events type.\n * @param convert - A converter function that accepts incoming event as parameters and returns converted outgoing event.\n *\n * @returns New event mapper.\n */\nexport function mapOn<TEvent extends any[], TResult>(\n    convert: (this: void, ...event: TEvent) => TResult,\n): (this: void, input: OnEvent<TEvent>) => OnEvent<[TResult]> {\n\n  const mapper = mapOn_(convert);\n\n  return input => shareOn(mapper(input));\n}\n\n/**\n * Creates an event processor that converts events incoming from {@link OnEvent} sender with the given converter\n * function, and does not share the outgoing events supply.\n *\n * @category Event Processing\n * @typeParam TEvent - Incoming events type.\n * @typeParam TResult - Outgoing events type.\n * @param convert - A converter function that accepts incoming event as parameters and returns outgoing event value.\n *\n * @returns New event mapper.\n */\nexport function mapOn_<TEvent extends any[], TResult>(// eslint-disable-line @typescript-eslint/naming-convention\n    convert: (this: void, ...event: TEvent) => TResult,\n): (this: void, input: OnEvent<TEvent>) => OnEvent<[TResult]> {\n  return input => onEventBy(translateEvents(\n      input,\n      (send, ...event) => send(convert(...event)),\n  ));\n}\n","import { AfterEvent, afterEventBy } from '../after-event';\nimport { onceEvent } from '../impl';\n\n/**\n * A processor of the first event incoming from {@link AfterEvent} keeper.\n *\n * Cuts off the outgoing events supply after sending the first event.\n *\n * @category Event Processing\n * @typeParam TEvent - An event type. This is a list of event receiver parameter types.\n * @param supplier - Event keeper to receive an event from.\n *\n * @returns New keeper of the first event.\n */\nexport function onceAfter<TEvent extends any[]>(supplier: AfterEvent<TEvent>): AfterEvent<TEvent> {\n  return afterEventBy(onceEvent(supplier));\n}\n","import { AfterEvent } from '../after-event';\nimport { onceEvent } from '../impl';\nimport { OnEvent, onEventBy } from '../on-event';\n\n/**\n * A processor of the first event incoming from {@link OnEvent} sender.\n *\n * Cuts off the outgoing event supply after sending the first event.\n *\n * @category Event Processing\n * @typeParam TEvent - An event type. This is a list of event receiver parameter types.\n * @param supplier - Event sender to receive an event from.\n *\n * @returns New sender of the first event.\n */\nexport function onceOn<TEvent extends any[]>(\n    supplier: OnEvent<TEvent>,\n): OnEvent<TEvent> | AfterEvent<TEvent> {\n  return onEventBy(onceEvent(supplier));\n}\n","import { asis } from '@proc7ts/primitives';\nimport { isAlwaysSupply, Supply, SupplyPeer } from '@proc7ts/supply';\nimport { supplyEvents } from '../impl';\nimport { OnEvent, onEventBy } from '../on-event';\n\n/**\n * Creates an event processor that passes events incoming from {@link OnEvent} sender until the `required` supply is\n * cut off.\n *\n * The outgoing events supply will be cut off once incoming event supply does, unless a second supply passed in.\n * In the latter case that supply will be cut off instead.\n *\n * @category Event Processing\n * @typeParam TEvent - An event type. This is a list of event receiver parameter types.\n * @param required - A peer of required event supply. The returned processor does nothing when `alwaysSupply()`\n * specified.\n * @param dependentSupply - The supply to cut off on cutting off the incoming events supply.\n *\n * @returns New event mapper.\n */\nexport function supplyOn<TEvent extends any[]>(\n    required: SupplyPeer,\n    dependentSupply?: Supply,\n): (this: void, input: OnEvent<TEvent>) => OnEvent<TEvent> {\n  return isAlwaysSupply(required.supply)\n      ? asis\n      : (input: OnEvent<TEvent>) => onEventBy(supplyEvents(input, required, dependentSupply));\n}\n","import { Supply } from '@proc7ts/supply';\nimport { sendEventsTo } from '../base';\nimport { OnEvent, onEventBy } from '../on-event';\nimport { mapOn } from './map-on';\nimport { resolveOn } from './resolve-on';\nimport { supplyOn } from './supply-on';\n\n/**\n * A processor that asynchronously resolves incoming events and sends them in the order they are received.\n *\n * Receives events or their promises from the given event sender, and sends them once they are resolved in the same\n * order as they have been received. Mat send events in batches, e.g. when events resolved out of order.\n *\n * The resulting events supply is cut off if some of incoming event promises rejected. In this case the rejection reason\n * is used as a reason to cut off. If incoming events supply is cut off, then the resulting event supply will be cut off\n * too, but only after all incoming events resolved and sent.\n *\n * @category Event Processing\n * @typeParam TEvent - Resolved event type.\n * @param from - A sender of events or promise-like instances resolved to ones.\n *\n * @returns New `OnEvent` sender of resolved events.\n */\nexport function resolveOnOrdered<TEvent>(\n    from: OnEvent<[PromiseLike<TEvent> | TEvent]>,\n): OnEvent<[TEvent, ...TEvent[]]> {\n  return onEventBy(receiver => {\n\n    const { supply } = receiver;\n    const dispatch = sendEventsTo(receiver);\n\n    const sourceSupply = new Supply();\n    let numInProcess = 0;\n    const source = from.do(\n        supplyOn(supply, sourceSupply),\n        mapOn(event => {\n          ++numInProcess;\n          return event;\n        }),\n    );\n    let received: TEvent[] = [];\n    let numSent = 1;\n    let numReceived = 0;\n\n    sourceSupply.whenOff(reason => {\n      if (!numInProcess) {\n        supply.off(reason);\n      }\n    });\n\n    resolveOn(source)({\n      supply,\n      receive(_ctx, event, index) {\n\n        const i = index - numSent;\n\n        received[i] = event;\n        ++numReceived;\n        if (numReceived > i) {\n\n          let toSend: TEvent[];\n\n          if (numReceived === received.length) {\n            // Can send all received events\n            toSend = received;\n            received = [];\n          } else {\n            // Can send events up to `i`\n            toSend = received.splice(0, i + 1);\n          }\n          numSent += toSend.length;\n          numReceived -= toSend.length;\n          numInProcess -= toSend.length;\n\n          dispatch(...(toSend as [TEvent, ...TEvent[]]));\n          if (!numInProcess && sourceSupply.isOff) {\n            supply.needs(sourceSupply);\n          }\n        }\n      },\n    });\n  });\n}\n","import { sendEventsTo } from '../base';\nimport { OnEvent, onEventBy } from '../on-event';\n\n/**\n * A processor that asynchronously resolves incoming events and sends then in the order of their resolution.\n *\n * Receives events or their promises from the given event sender, and sends them once they are resolved. The original\n * order of events is not preserved. Instead each resolved event is sent along with its index in original order.\n *\n * The resulting events supply is cut off immediately once unresolved events supply is cut off, or some of incoming\n * event promises rejected. In the latter case the rejection reason is used as a reason to cut off.\n *\n * @category Event Processing\n * @typeParam T - A type of values the promises resolve to.\n * @param from - A sender of events or promise-like instances resolved to ones.\n *\n * @returns New `OnEvent` sender of resolved events and their indices in original order starting from `1`.\n */\nexport function resolveOn<T>(from: OnEvent<[PromiseLike<T> | T]>): OnEvent<[T, number]> {\n  return onEventBy(receiver => {\n\n    const { supply } = receiver;\n    const dispatch = sendEventsTo(receiver);\n\n    let lastIndex = 0;\n\n    from({\n      supply,\n      receive(_ctx, promise) {\n\n        const index = ++lastIndex;\n\n        Promise.resolve()\n            .then(() => promise)\n            .then(\n                event => dispatch(event, index),\n                reason => supply.off(reason),\n            );\n      },\n    });\n  });\n}\n","import { asis } from '@proc7ts/primitives';\nimport { isAlwaysSupply, Supply, SupplyPeer } from '@proc7ts/supply';\nimport { AfterEvent, afterEventBy } from '../after-event';\nimport { supplyEvents } from '../impl';\n\n/**\n * Creates an event processor that passes events incoming from {@link AfterEvent} keeper until the `required` supply\n * is cut off.\n *\n * The outgoing events supply will be cut off once incoming event supply does, unless a second supply passed in.\n * In the latter case that supply will be cut off instead.\n *\n * @category Event Processing\n * @typeParam TEvent - An event type. This is a list of event receiver parameter types.\n * @param required - A peer of required event supply. The returned processor does nothing when `alwaysSupply()`\n * specified.\n * @param dependentSupply - The supply to cut off on cutting off the incoming events supply.\n *\n * @returns New event mapper.\n */\nexport function supplyAfter<TEvent extends any[]>(\n    required: SupplyPeer,\n    dependentSupply?: Supply,\n): (this: void, input: AfterEvent<TEvent>) => AfterEvent<TEvent> {\n  return isAlwaysSupply(required.supply)\n      ? asis\n      : (input: AfterEvent<TEvent>) => afterEventBy(supplyEvents(\n          input,\n          required,\n          dependentSupply,\n      ));\n}\n","import { AfterEvent, afterEventBy } from '../after-event';\nimport { translateEvents } from '../impl';\nimport { OnEvent } from '../on-event';\nimport { shareAfter } from './share-after';\n\n/**\n * Creates an event processor that translates events incoming from {@link AfterEvent} keeper.\n *\n * The translated events expected to be sent by the given `translate` function.\n *\n * The returned mapper does the same as the one created by {@link translateOn} one, but returns an {@link AfterEvent}\n * keeper instead of {@link OnEvent} sender. This can not be always done without a `fallback`, as not every\n * transformation results to valid {@link EventKeeper}. E.g. when some events filtered out.\n *\n * @category Event Processing\n * @typeParam TInEvent - Incoming event type.\n * @typeParam TOutEvent - Outgoing translated event type.\n * @param translate - Event translation function. Accepts an outgoing event sender function as first parameter,\n * and incoming event as the rest of them.\n *\n * @returns A mapping function of incoming event keeper to another one.\n */\nexport function translateAfter<\n    TInEvent extends any[],\n    TOutEvent extends any[],\n    >(\n    translate: (this: void, send: (...event: TOutEvent) => void, ...event: TInEvent) => void,\n): (this: void, input: AfterEvent<TInEvent>) => AfterEvent<TOutEvent>;\n\n/**\n * Creates an event processor that translates events incoming from {@link OnEvent} sender with fallback.\n *\n * The translated events expected to be sent by the given `translate` function.\n *\n * The returned mapper does the same as the one created by {@link translateOn} one, but returns an {@link AfterEvent}\n * keeper instead of {@link OnEvent} sender. This can not be always done without a `fallback`, as not every\n * transformation results to valid {@link EventKeeper}. E.g. when some events filtered out.\n *\n * @category Event Processing\n * @typeParam TInEvent - Incoming event type.\n * @typeParam TOutEvent - Outgoing translated event type.\n * @param translate - Event translation function. Accepts an outgoing event sender function as first parameter,\n * and incoming event as the rest of them.\n * @param fallback - A function creating outgoing event fallback.\n *\n * @returns A mapping function of incoming event keeper to another one.\n */\nexport function translateAfter<\n    TInEvent extends any[],\n    TOutEvent extends any[],\n    >(\n    translate: (this: void, send: (...event: TOutEvent) => void, ...event: TInEvent) => void,\n    fallback: (this: void) => TOutEvent,\n): (this: void, input: OnEvent<TInEvent>) => AfterEvent<TOutEvent>;\n\nexport function translateAfter<\n    TInEvent extends any[],\n    TOutEvent extends any[],\n    >(\n    translate: (this: void, send: (...event: TOutEvent) => void, ...event: TInEvent) => void,\n    fallback?: (this: void) => TOutEvent,\n): (this: void, input: OnEvent<TInEvent>) => AfterEvent<TOutEvent> {\n\n  const mapper = translateAfter_(translate, fallback!);\n\n  return input => shareAfter(mapper(input));\n}\n\n/**\n * Creates an event processor that translates events incoming from {@link AfterEvent} keeper, and does not share the\n * outgoing events supply.\n *\n * The translated events expected to be sent by the given `translate` function.\n *\n * The returned mapper does the same as the one created by {@link translateOn_} one, but returns an {@link AfterEvent}\n * keeper instead of {@link OnEvent} sender. This can not be always done without a `fallback`, as not every\n * transformation results to valid {@link EventKeeper}. E.g. when some events filtered out.\n *\n * @category Event Processing\n * @typeParam TInEvent - Incoming event type.\n * @typeParam TOutEvent - Outgoing translated event type.\n * @param translate - Event translation function. Accepts an outgoing event sender function as first parameter,\n * and incoming event as the rest of them.\n *\n * @returns A mapping function of incoming event keeper to another one.\n */\nexport function translateAfter_<// eslint-disable-line @typescript-eslint/naming-convention\n    TInEvent extends any[],\n    TOutEvent extends any[],\n    >(\n    translate: (this: void, send: (...event: TOutEvent) => void, ...event: TInEvent) => void,\n): (this: void, input: AfterEvent<TInEvent>) => AfterEvent<TOutEvent>;\n\n/**\n * Creates an event processor that translates events incoming from {@link OnEvent} sender with fallback, and does not\n * share the outgoing events supply.\n *\n * The translated events expected to be sent by the given `translate` function.\n *\n * The returned mapper does the same as the one created by {@link translateOn_} one, but returns an {@link AfterEvent}\n * keeper instead of {@link OnEvent} sender. This can not be always done without a `fallback`, as not every\n * transformation results to valid {@link EventKeeper}. E.g. when some events filtered out.\n *\n * @category Event Processing\n * @typeParam TInEvent - Incoming event type.\n * @typeParam TOutEvent - Outgoing translated event type.\n * @param translate - Event translation function. Accepts an outgoing event sender function as first parameter,\n * and incoming event as the rest of them.\n * @param fallback - A function creating outgoing event fallback.\n *\n * @returns A mapping function of incoming event keeper to another one.\n */\nexport function translateAfter_<// eslint-disable-line @typescript-eslint/naming-convention\n    TInEvent extends any[],\n    TOutEvent extends any[],\n    >(\n    translate: (this: void, send: (...event: TOutEvent) => void, ...event: TInEvent) => void,\n    fallback: (this: void) => TOutEvent,\n): (this: void, input: OnEvent<TInEvent>) => AfterEvent<TOutEvent>;\n\n/**\n * Creates an event processor that translates events incoming from {@link OnEvent} sender with fallback, and does not\n * share the outgoing events supply.\n *\n * The translated events expected to be sent by the given `translate` function.\n *\n * The returned mapper does the same as the one created by {@link translateOn_} one, but returns an {@link AfterEvent}\n * keeper instead of {@link OnEvent} sender. This can not be always done without a `fallback`, as not every\n * transformation results to valid {@link EventKeeper}. E.g. when some events filtered out.\n *\n * @category Event Processing\n * @typeParam TInEvent - Incoming event type.\n * @typeParam TOutEvent - Outgoing translated event type.\n * @param translate - Event translation function. Accepts an outgoing event sender function as first parameter,\n * and incoming event as the rest of them.\n * @param fallback - A function creating fallback event. When omitted, the initial event is expected to be sent by\n * `translate` function. A receiver registration would lead to an error otherwise.\n *\n * @returns A mapping function of incoming event keeper to another one.\n */\nexport function translateAfter_<// eslint-disable-line @typescript-eslint/naming-convention\n    TInEvent extends any[],\n    TOutEvent extends any[],\n    >(\n    translate: (this: void, send: (...event: TOutEvent) => void, ...event: TInEvent) => void,\n    fallback?: (this: void) => TOutEvent,\n): (this: void, input: OnEvent<TInEvent>) => AfterEvent<TOutEvent> {\n  return input => afterEventBy(translateEvents(input, translate), fallback);\n}\n","import { OnEvent } from '../on-event';\nimport { shareOn } from './share-on';\nimport { translateOn_ } from './translate-on';\n\n/**\n * Creates an event processor that sends the values of incoming events.\n *\n * Events are valued by provided `value` function. The `null`, `undefined`, and `false` values are dropped.\n *\n * @category Event Processing\n * @typeParam TEvent - Incoming event type.\n * @typeParam TValue - Event value type.\n * @param valueOf - Event value detector function. Accepts incoming event as parameters and returns either its value,\n * or `false`/`null`/`undefined` to ignore it.\n *\n * @returns New event processor.\n */\nexport function valueOn<TEvent extends any[], TValue>(\n    valueOf: (this: void, ...event: TEvent) => TValue | false | null | undefined,\n): (this: void, input: OnEvent<TEvent>) => OnEvent<[TValue]> {\n\n  const mapper = valueOn_(valueOf);\n\n  return input => shareOn(mapper(input));\n}\n\n/**\n * Creates an event processor that sends the values of incoming events, and does not share the outgoing events supply.\n *\n * @category Event Processing\n * @typeParam TEvent - Incoming event type.\n * @typeParam TValue - Event value type.\n * @param valueOf - Event value detector function. Accepts incoming event as parameters and returns either its value,\n * or `false`/`null`/`undefined` to ignore it.\n *\n * @returns New event processor.\n */\nexport function valueOn_<TEvent extends any[], TValue>(// eslint-disable-line @typescript-eslint/naming-convention\n    valueOf: (this: void, ...event: TEvent) => TValue | false | null | undefined,\n): (this: void, input: OnEvent<TEvent>) => OnEvent<[TValue]> {\n  return translateOn_((send, ...event) => {\n\n    const value = valueOf(...event);\n\n    if (value != null && value !== false) {\n      send(value);\n    }\n  });\n}\n","/**\n * A path to state or its part. E.g. property value.\n *\n * May consist of one or more property keys.\n *\n * An array consisting of the only one property key is the same as this property key.\n *\n * An empty array is a path to the state itself.\n *\n * @category State Tracking\n */\nexport type StatePath = PropertyKey | StatePath.Normalized;\n\n/**\n * @category State Tracking\n */\nexport namespace StatePath {\n\n  /**\n   * Normalized state path.\n   *\n   * This is always an array of property keys.\n   */\n  export type Normalized = readonly PropertyKey[];\n\n}\n\n/**\n * Normalizes a state path consisting of single key.\n *\n * @category State Tracking\n * @typeParam TKey - A type of path key.\n * @param key - A path key.\n *\n * @return Normalized state path.\n */\nexport function statePath<TKey extends PropertyKey>(key: TKey): readonly [TKey];\n\n/**\n * Normalizes arbitrary state path. I.e. converts it to array.\n *\n * @param path - Arbitrary state path.\n *\n * @return Normalized state path.\n */\nexport function statePath(path: StatePath): StatePath.Normalized;\n\nexport function statePath(path: StatePath): StatePath.Normalized {\n  return (Array.isArray(path) ? path : [path]) as StatePath.Normalized;\n}\n","import { noop } from '@proc7ts/primitives';\nimport { Supply } from '@proc7ts/supply';\nimport { EventSender, OnEvent__symbol } from '../base';\nimport { onEventBy } from '../on-event';\nimport { EventEmitter } from '../senders';\nimport { OnStateUpdate } from './on-state-update';\nimport { statePath, StatePath } from './state-path';\nimport { StateUpdateReceiver } from './state-update-receiver';\n\n/**\n * @internal\n */\nclass PathEntry {\n\n  readonly emitter = new EventEmitter<[StatePath.Normalized, any, any]>();\n  private readonly _nested = new Map<PropertyKey, PathEntry>();\n\n  constructor(private readonly _drop: () => void) {\n    this.emitter.on((path, newValue, oldValue) => {\n\n      const key = path[0];\n      const nested = this._nested.get(key);\n\n      if (nested) {\n        nested.emitter.send(path.slice(1), newValue, oldValue);\n      }\n    });\n  }\n\n  on(receiver: StateUpdateReceiver): Supply {\n\n    const supply = this.emitter.on(receiver);\n\n    return new Supply(reason => {\n      supply.off(reason);\n      this._dropIfEmpty();\n    }).needs(supply);\n  }\n\n  nest(key: PropertyKey): PathEntry;\n\n  nest(key: PropertyKey, dontCreateMissing: true): PathEntry | undefined;\n\n  nest(key: PropertyKey, dontCreateMissing?: true): PathEntry | undefined;\n\n  nest(key: PropertyKey, dontCreateMissing?: true): PathEntry | undefined {\n\n    const found = this._nested.get(key);\n\n    if (found || dontCreateMissing) {\n      return found;\n    }\n\n    const created = new PathEntry(() => this._remove(key));\n\n    this._nested.set(key, created);\n\n    return created;\n  }\n\n  done(reason?: unknown): void {\n    for (const nested of this._nested.values()) {\n      nested.done(reason);\n    }\n    this.emitter.supply.off(reason);\n  }\n\n  private _remove(key: PropertyKey): void {\n    this._nested.delete(key);\n    this._dropIfEmpty();\n  }\n\n  private _dropIfEmpty(): void {\n    if (!this._nested.size && this.emitter.size <= 1) {\n      this._drop();\n    }\n  }\n\n}\n\n/**\n * @internal\n */\nclass Trackers {\n\n  private readonly _root = new PathEntry(noop);\n\n  on(path: StatePath.Normalized, receiver: StateUpdateReceiver): Supply {\n    return this._entry(path).on(receiver);\n  }\n\n  send<T>(path: StatePath.Normalized, newValue: T, oldValue: T): void {\n    this._root.emitter.send(path, newValue, oldValue);\n  }\n\n  done(path: StatePath.Normalized, reason?: unknown): void {\n\n    const entry = this._entry(path, true);\n\n    if (entry) {\n      entry.done(reason);\n    }\n  }\n\n  private _entry(path: StatePath.Normalized): PathEntry;\n\n  private _entry(path: StatePath.Normalized, dontCreateMissing: true): PathEntry | undefined;\n\n  private _entry(path: StatePath.Normalized, dontCreateMissing?: true): PathEntry | undefined {\n\n    let entry = this._root;\n\n    for (const key of path) {\n\n      const nested = entry.nest(key, dontCreateMissing);\n\n      if (!nested) {\n        return;\n      }\n\n      entry = nested;\n    }\n\n    return entry;\n  }\n\n}\n\n/**\n * @internal\n */\nclass SubStateTracker implements StateTracker {\n\n  readonly update: <T>(\n      this: void,\n      path: StatePath,\n      newValue: T,\n      oldValue: T,\n  ) => void;\n\n  readonly onUpdate: OnStateUpdate = onEventBy<[StatePath.Normalized, any, any]>(\n      receiver => this._trackers.on(this._path, receiver),\n  );\n\n  constructor(private readonly _trackers: Trackers, private readonly _path: StatePath.Normalized) {\n    this.update = <T>(path: StatePath, newValue: T, oldValue: T) => {\n      this._trackers.send([...this._path, ...statePath(path)], newValue, oldValue);\n    };\n  }\n\n  get _tracker(): this {\n    return this;\n  }\n\n  [OnEvent__symbol](): OnStateUpdate {\n    return this.onUpdate;\n  }\n\n  track(path: StatePath): SubStateTracker {\n    path = statePath(path);\n    if (!path.length) {\n      return this; // Path to itself.\n    }\n    return new SubStateTracker(this._trackers, [...this._path, ...path]);\n  }\n\n  done(reason?: unknown): void {\n    this._trackers.done(this._path, reason);\n  }\n\n}\n\n/**\n * State changes tracker.\n *\n * A state is a tree-like structure of sub-states (nodes) available under {@link StatePath}.\n *\n * When node modified a {@link StateTracker.update} should be called. Then all state update receivers registered by\n * {@link StateTracker.onUpdate} will receive this update.\n *\n * @category State Tracking\n */\nexport class StateTracker implements EventSender<[StatePath.Normalized, any, any]> {\n\n  /**\n   * @internal\n   */\n  readonly _tracker: SubStateTracker = new SubStateTracker(new Trackers(), []);\n\n  /**\n   * {@link OnStateUpdate state updates sender}.\n   *\n   * A state update will be sent to it whenever an `update()` function is called.\n   *\n   * The `[OnEvent__symbol]` property is an alias of this one.\n   *\n   * @returns State updates sender.\n   */\n  get onUpdate(): OnStateUpdate {\n    return this._tracker.onUpdate;\n  }\n\n  [OnEvent__symbol](): OnStateUpdate {\n    return this.onUpdate;\n  }\n\n  // noinspection JSCommentMatchesSignature\n  /**\n   * Updates the component state.\n   *\n   * All receivers registered with {@link onUpdate} will receive this update.\n   *\n   * @typeParam T - A type of changed value.\n   * @param key - Changed value key.\n   * @param newValue - New value.\n   * @param oldValue - Previous value.\n   */\n  get update(): <T>(\n      this: void,\n      path: StatePath,\n      newValue: T,\n      oldValue: T,\n  ) => void {\n    return this._tracker.update;\n  }\n\n  /**\n   * Starts tracking of partial state under the given path.\n   *\n   * @param path - A path to state part.\n   *\n   * @return New partial state tracker.\n   */\n  track(path: StatePath): StateTracker {\n\n    const subTracker = this._tracker.track(path);\n\n    return subTracker === this._tracker ? this : subTracker;\n  }\n\n  /**\n   * Unregisters updates receivers and cuts off their supplies.\n   *\n   * After this method call the updates receivers of this partial state and all nested states won't receive any updates.\n   *\n   * @param reason - An optional reason to stop tracking.\n   */\n  done(reason?: unknown): void {\n    this._tracker.done(reason);\n  }\n\n}\n","import { neverSupply, Supply, SupplyPeer } from '@proc7ts/supply';\nimport { AfterEvent, afterEventBy } from '../after-event';\nimport {\n  AfterEvent__symbol,\n  EventKeeper,\n  EventReceiver,\n  EventSender,\n  EventSupplier,\n  isEventKeeper,\n  OnEvent__symbol,\n} from '../base';\nimport { OnEvent } from '../on-event';\nimport { consumeEvents } from '../processors';\nimport { onSupplied } from '../senders';\n\n/**\n * Value accessor and changes tracker.\n *\n * Implements an {@link EventSender} interface by sending value changes to registered receivers as a pair of new and old\n * values.\n *\n * Implements an {@link EventKeeper} interface by sending current value and its updates.\n *\n * @category Value Tracking\n * @typeParam T - Tracked value type.\n */\nexport abstract class ValueTracker<T> implements EventSender<[T, T]>, EventKeeper<[T]>, SupplyPeer {\n\n  /**\n   * @internal\n   */\n  private _by = neverSupply();\n\n  /**\n   * {@link OnEvent} sender of value changes.\n   *\n   * The `[OnEvent__symbol]` property is an alias of this one.\n   *\n   * @returns Value changes sender.\n   */\n  abstract readonly on: OnEvent<[T, T]>;\n\n  /**\n   * {@link AfterEvent} keeper of current value.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   *\n   * @returns Current value keeper.\n   */\n  readonly read: AfterEvent<[T]> = afterEventBy(\n      receiver => this.on(receiveNewValue(receiver)),\n      () => [this.it],\n  );\n\n  [OnEvent__symbol](): OnEvent<[T, T]> {\n    return this.on;\n  }\n\n  [AfterEvent__symbol](): AfterEvent<[T]> {\n    return this.read;\n  }\n\n  /**\n   * An event supply of this value tracker.\n   */\n  abstract readonly supply: Supply;\n\n  /**\n   * The tracked value.\n   */\n  abstract it: T;\n\n  /**\n   * Updates the tracked value by the given value `supplier`.\n   *\n   * If the value is already updated by another supplier, then unbinds from the old one first.\n   *\n   * Call the {@link ValueTracker.byNone} method to unbind the tracked value from the `source`.\n   *\n   * Note that explicitly updating the value would override the value received from the `source`.\n   *\n   * @param supplier - The source value sender or keeper.\n   *\n   * @returns `this` instance.\n   */\n  by(supplier: EventSupplier<[T]>): this;\n\n  /**\n   * Updates the tracked value by value suppliers extracted from events sent by the given `supplier`.\n   *\n   * If the value is already updated by another value supplier, then unbinds from the old one first.\n   *\n   * Call the {@link ValueTracker.byNone} method to unbind the tracked value from the `source`.\n   *\n   * Note that explicitly updating the value would override the value received from the `source`.\n   *\n   * @typeParam TSrcEvent - Source event type.\n   * @param supplier - The event supplier to extract value suppliers from.\n   * @param extract - A function extracting value supplier from event received from `supplier`.\n   * May return `undefined` to suspend receiving values.\n   *\n   * @returns `this` instance.\n   */\n  by<TSrcEvent extends any[]>(\n      supplier: EventSupplier<TSrcEvent>,\n      extract: (this: void, ...event: TSrcEvent) => EventSupplier<[T]> | undefined,\n  ): this;\n\n  by<TSrcEvent extends any[]>(\n      supplier: EventSupplier<TSrcEvent> | EventSupplier<[T]>,\n      extract?: (this: void, ...event: TSrcEvent) => EventSupplier<[T]> | undefined,\n  ): this {\n\n    const acceptValuesFrom = (sender: EventSupplier<[T]>): Supply => {\n\n      const onValue = isEventKeeper(sender) ? sender[AfterEvent__symbol]() : sender[OnEvent__symbol]();\n\n      return onValue(value => this.it = value);\n    };\n\n    this.byNone();\n    if (!extract) {\n\n      const sender = supplier as EventSupplier<[T]>;\n\n      this._by = acceptValuesFrom(sender);\n    } else {\n\n      const container = supplier as EventSupplier<TSrcEvent>;\n\n      this._by = onSupplied(container).do(consumeEvents((...event) => {\n\n        const sender = extract(...event);\n\n        if (sender) {\n          return acceptValuesFrom(sender);\n        }\n\n        return;\n      }));\n    }\n\n    this._by.whenOff(() => this._by = neverSupply());\n\n    return this;\n  }\n\n  /**\n   * Unbinds the tracked value from any value supplier this tracker is {@link ValueTracker.by updated by}.\n   *\n   * If the tracker is not bound then does nothing.\n   *\n   * @param reason - Arbitrary reason of unbinding the value.\n   *\n   * @returns `this` instance.\n   */\n  byNone(reason?: any): this {\n    this._by.off(reason);\n    return this;\n  }\n\n}\n\n/**\n * @internal\n */\nfunction receiveNewValue<T>(\n    valueReceiver: EventReceiver.Generic<[T]>,\n): EventReceiver.Generic<[T, T]> {\n  return {\n    supply: valueReceiver.supply,\n    receive(context, newValue) {\n      valueReceiver.receive(\n          {\n            onRecurrent(recurrentReceiver) {\n              context.onRecurrent(recurrentValue => recurrentReceiver(recurrentValue));\n            },\n          },\n          newValue,\n      );\n    },\n  };\n}\n","import { Supply } from '@proc7ts/supply';\nimport { EventKeeper } from '../base';\nimport { OnEvent } from '../on-event';\nimport { EventEmitter } from '../senders';\nimport { ValueTracker } from './value-tracker';\n\n/**\n * @internal\n */\nclass TrackedValue<T> extends ValueTracker<T> {\n\n  private readonly _on = new EventEmitter<[T, T]>();\n\n  constructor(private _it: T) {\n    super();\n  }\n\n  get supply(): Supply {\n    return this._on.supply;\n  }\n\n  get on(): OnEvent<[T, T]> {\n    return this._on.on;\n  }\n\n  get it(): T {\n    return this._it;\n  }\n\n  set it(value: T) {\n\n    const oldValue = this._it;\n\n    if (oldValue !== value) {\n      this._it = value;\n      this._on.send(value, oldValue);\n    }\n  }\n\n}\n\n/**\n * Constructs a value which changes can be tracked.\n *\n * @category Value Tracking\n * @param initial - Initial value.\n *\n * @returns Value tracker instance.\n */\nexport function trackValue<T>(initial: T): ValueTracker<T>;\n\n/**\n * Constructs an optional value which changes can be tracked.\n *\n * @param initial - Initial value.\n *\n * @returns Value tracker instance.\n */\nexport function trackValue<T>(initial?: T): ValueTracker<T | undefined>;\n\nexport function trackValue<T>(initial: T): ValueTracker<T> {\n  return new TrackedValue<T>(initial);\n}\n\n/**\n * Constructs a tracked value updated by the given value `supplier`.\n *\n * If the value is already updated by another supplier, then unbinds from the old one first.\n *\n * Call the {@link ValueTracker.byNone} method to unbind the tracked value from the `source`.\n *\n * Note that explicitly updating the value would override the value received from the `source`.\n *\n * @category Value Tracking\n * @param supplier - The source value keeper.\n *\n * @returns `this` instance.\n */\nexport function trackValueBy<T>(supplier: EventKeeper<[T]>): ValueTracker<T>;\n\n/**\n * Constructs a tracked value updated by value keepers extracted from events sent by the given `supplier`.\n *\n * If the value is already updated by another value supplier, then unbinds from the old one first.\n *\n * Call the {@link ValueTracker.byNone} method to unbind the tracked value from the `source`.\n *\n * Note that explicitly updating the value would override the value received from the `source`.\n *\n * @typeParam TSrc - Source value type.\n * @param supplier - The event keeper to extract value keepers from.\n * @param extract - A function extracting value keeper from event received from `supplier`.\n *\n * @returns `this` instance.\n */\nexport function trackValueBy<T, TSrc extends any[]>(\n    supplier: EventKeeper<TSrc>,\n    extract: (this: void, ...event: TSrc) => EventKeeper<[T]>,\n): ValueTracker<T>;\n\nexport function trackValueBy<T, TSrc extends any[]>(\n    supplier: EventKeeper<TSrc> | EventKeeper<[T]>,\n    extract?: (this: void, ...event: TSrc) => EventKeeper<[T]>,\n): ValueTracker<T> {\n  return (trackValue() as ValueTracker<T>).by(\n      supplier as EventKeeper<TSrc>,\n      extract as (this: void, ...event: TSrc) => EventKeeper<[T]>,\n  );\n}\n","import { Supply } from '@proc7ts/supply';\nimport { EventKeeper, EventSender, EventSupplier, isEventKeeper } from '../base';\nimport { afterSupplied } from '../keepers';\nimport { OnEvent } from '../on-event';\nimport { consumeEvents } from '../processors';\nimport { EventEmitter, onSupplied } from '../senders';\nimport { ValueTracker } from './value-tracker';\n\n/**\n * Synchronizes tracked values with each other.\n *\n * Any change to any of the added tracked values would update all the others.\n *\n * @category Value Tracking\n */\nexport class ValueSync<T> extends ValueTracker<T> {\n\n  /**\n   * @internal\n   */\n  private readonly _on = new EventEmitter<[T, T]>();\n\n  /**\n   * @internal\n   */\n  private _it: T;\n\n  constructor(initial: T) {\n    super();\n    this._it = initial;\n  }\n\n  get on(): OnEvent<[T, T]> {\n    return this._on.on;\n  }\n\n  get supply(): Supply {\n    return this._on.supply;\n  }\n\n  get it(): T {\n    return this._it;\n  }\n\n  set it(value: T) {\n\n    const old = this.it;\n\n    if (old !== value) {\n      this._it = value;\n      this._on.send(value, old);\n    }\n  }\n\n  /**\n   * Synchronizes the tracked value with the others.\n   *\n   * Applies the value from this sync to the given tracker first.\n   *\n   * @param tracker - A value tracker to keep in sync.\n   *\n   * @returns An event supply. {@link Supply.off Cut it off} to break synchronization.\n   */\n  sync(tracker: ValueTracker<T>): Supply;\n\n  /**\n   * Synchronizes the tracked value with the others in the given direction.\n   *\n   * @param direction - If set to `\"in\"` the value from the given tracker takes precedence over the one in\n   * {@link ValueSync}. Otherwise the value from the sync is applied to the given tracker first.\n   * @param tracker - A value tracker to keep in sync.\n   *\n   * @returns An event supply. {@link Supply.off Cut it off} to break synchronization.\n   */\n  sync(direction: 'in' | 'out', tracker: ValueTracker<T>): Supply;\n\n  /**\n   * Synchronizes the tracked value with the ones extracted from the events sent by the given `supplier`.\n   *\n   * Once next value tracker extracted the previous one becomes out of sync.\n   *\n   * Applies the value from this sync to extracted trackers.\n   *\n   * @typeParam TSrcEvent - A type of supplied events to extract value trackers from.\n   * @param supplier - The event supplier to extract value trackers from.\n   * @param extract - A function extracting the value tracker to keep in sync from the event received from `supplier`.\n   * May return `undefined` to just break the sync with previous tracker.\n   *\n   * @returns An event supply. {@link Supply.off Cut it off} to break synchronization.\n   */\n  sync<TSrcEvent extends any[]>(\n      supplier: EventSupplier<TSrcEvent>,\n      extract: (this: void, ...event: TSrcEvent) => ValueTracker<T> | undefined,\n  ): Supply;\n\n  /**\n   * Synchronizes the tracked value with the ones extracted from the events sent by the given `supplier`\n   * in the given direction.\n   *\n   * Once next value tracker extracted the previous one becomes out of sync.\n   *\n   * @typeParam TSrcEvent - A type of supplied events to extract value trackers from.\n   * @param direction - If set to `\"in\"` the value from extracted tracker takes precedence over the one in\n   * {@link ValueSync}. Otherwise the value from the sync is applied to extracted trackers first.\n   * @param supplier - The event supplier to extract value trackers from.\n   * @param extract - A function extracting the value tracker to keep in sync from the event received from `supplier`.\n   * May return `undefined` to just break the sync with previous tracker.\n   *\n   * @returns An event supply. {@link Supply.off Cut it off} to break synchronization.\n   */\n  sync<TSrcEvent extends any[]>(\n      direction: 'in' | 'out',\n      supplier: EventSupplier<TSrcEvent>,\n      extract: (this: void, ...event: TSrcEvent) => ValueTracker<T> | undefined,\n  ): Supply;\n\n  sync<TSrcEvent extends any[]>(\n      first: 'in' | 'out' | ValueTracker<T> | EventSupplier<TSrcEvent>,\n      second?: ValueTracker<T>\n          | EventSender<TSrcEvent>\n          | EventKeeper<TSrcEvent>\n          | ((this: void, ...event: TSrcEvent) => ValueTracker<T> | undefined),\n      third?: (this: void, ...event: TSrcEvent) => ValueTracker<T> | undefined,\n  ): Supply {\n\n    let syncWithTracker = (tracker: ValueTracker<T>): Supply => syncTrackers(this, tracker);\n    let source: ValueTracker<T> | EventSupplier<TSrcEvent>;\n    let extract: ((this: void, ...event: TSrcEvent) => ValueTracker<T> | undefined) | undefined;\n\n    if (typeof first === 'string') {\n      if (first === 'in') {\n        syncWithTracker = tracker => syncTrackers(tracker, this);\n      }\n      source = second as ValueTracker<T> | EventSender<TSrcEvent> | EventKeeper<TSrcEvent>;\n      extract = third;\n    } else {\n      source = first;\n      extract = second as (this: void, ...event: TSrcEvent) => ValueTracker<T> | undefined;\n    }\n\n    const extractTracker = extract;\n\n    if (!extractTracker) {\n      return syncWithTracker(source as ValueTracker<T>);\n    }\n\n    const supplier = source as EventSupplier<TSrcEvent>;\n\n    return (isEventKeeper(supplier) ? afterSupplied(supplier) : onSupplied(supplier)).do(consumeEvents(\n        (...event) => {\n\n          const tracker = extractTracker(...event);\n\n          return tracker && syncWithTracker(tracker);\n        },\n    ));\n\n    function syncTrackers(tracker1: ValueTracker<T>, tracker2: ValueTracker<T>): Supply {\n\n      const supply1 = tracker1.read(value => {\n        tracker2.it = value;\n      });\n      const supply2 = tracker2.on(value => {\n        tracker1.it = value;\n      });\n\n      return new Supply(reason => {\n        supply2.off(reason);\n        supply1.off(reason);\n      }).needs(supply1).needs(supply2);\n    }\n  }\n\n}\n","import type { Workload } from './workload';\n\n/**\n * An error indicating the work is already done.\n */\nexport class WorkDoneError<TWork = unknown> extends TypeError {\n\n  /**\n   * Constructs a work done error.\n   *\n   * @param workload - A workload the work is done for.\n   * @param work - The work already done, if any.\n   * @param reason - The reason of work failure, or `undefined` if the work completed successfully.\n   * @param message - Custom error message.\n   */\n  constructor(\n      readonly workload: Workload<TWork>,\n      readonly work: TWork | undefined,\n      readonly reason: unknown,\n      message = workload.workName(work) + (reason !== undefined\n          ? ` already terminated (${reason})`\n          : ' already done'),\n  ) {\n    super(message);\n  }\n\n}\n","import type { Supply, SupplyPeer } from '@proc7ts/supply';\nimport type { Workbench } from './workbench';\n\n/**\n * A workload able to perform a work within a workbench.\n *\n * The work specific to workload is represented by work instances. Such instances are available in {@link Workbench.work\n * workbench} and can be used e.g. to run workload-specific tasks.\n *\n * The same workload instance can be used in different workbenches.\n *\n * @typeParam TWork - A work type performed by this workload.\n */\nexport class Workload<TWork> {\n\n  /**\n   * Human-readable workload name.\n   */\n  readonly name: string;\n\n  /**\n   * Work allocator.\n   */\n  readonly allocator: Workload.Allocator<TWork>;\n\n  /**\n   * Constructs a workload.\n   *\n   * @param name - Human-readable workload name.\n   * @param allocator - A work allocator specific to constructed workload.\n   */\n  constructor(name: string, allocator: Workload.Allocator<TWork>) {\n    this.name = name;\n    this.allocator = allocator;\n  }\n\n  /**\n   * Builds a human-readable name of the work performed by this workload.\n   *\n   * This is used e.g. to construct a default error message for {@link WorkDoneError}.\n   *\n   * @param _work - Target work.\n   *\n   * @returns A string containing work name.\n   */\n  workName(_work?: TWork): string {\n    return `The work of ${this.name}`;\n  }\n\n  toString(): string {\n    return `Workload(${this.name})`;\n  }\n\n}\n\nexport namespace Workload {\n\n  /**\n   * Work allocator.\n   *\n   * Responsible for the work allocation for particular workload.\n   *\n   * @typeParam TWork - A work type performed by target workload.\n   */\n  export interface Allocator<TWork> {\n\n    /**\n     * Starts the work.\n     *\n     * @param allotment - Work allotment.\n     */\n    start(allotment: Allotment<TWork>): TWork;\n\n  }\n\n  /**\n   * Work allotment.\n   *\n   * Provided by workbench to {@link Allocator workload allocator} to allocate the work.\n   *\n   * @typeParam TWork - A work type performed by target workload.\n   */\n  export interface Allotment<TWork> extends SupplyPeer {\n\n    /**\n     * A workbench the work is allocated within.\n     */\n    readonly workbench: Workbench;\n\n    /**\n     * A workload to allocate the work for.\n     */\n    readonly workload: Workload<TWork>;\n\n    /**\n     * The work allotment supply.\n     *\n     * Once cut off the work is disposed. No more tasks would be accepted after that, while pending ones would\n     * fail.\n     */\n    readonly supply: Supply;\n\n    /**\n     * Runs the task as part of the work.\n     *\n     * @typeParam TResult - A type of task result.\n     * @param task - A task to run.\n     *\n     * @returns A promise resolved to task result, or rejected if the work is {@link supply disposed} already.\n     */\n    run<TResult>(task: Workbench.Task<TResult>): Promise<TResult>;\n\n  }\n\n}\n","import type { Workbench } from '../workbench';\nimport type { Workload } from '../workload';\n\n/**\n * @internal\n */\nexport class OrderedTasks {\n\n  private readonly _queues = new Map<Workload<unknown>, TaskQueue>();\n\n  constructor(private readonly _allotment: Workload.Allotment<OrderedTasks>) {\n  }\n\n  runAfter<TResult>(workload: Workload<unknown>, task: Workbench.Task<TResult>): Promise<TResult> {\n\n    let queue = this._queues.get(workload);\n\n    if (!queue) {\n      queue = new TaskQueue(this._allotment);\n      this._queues.set(workload, queue);\n    }\n\n    return queue.enqueue(task);\n  }\n\n}\n\nclass TaskQueue {\n\n  /**\n   * Enqueued tasks.\n   *\n   * The subsequent tasks are waiting for preceding ones. The very first one is always running.\n   */\n  private readonly _tasks: TaskQueueEntry<unknown>[] = [];\n\n  constructor(readonly _allotment: Workload.Allotment<OrderedTasks>) {\n  }\n\n  enqueue<TResult>(task: Workbench.Task<TResult>): Promise<TResult> {\n    return new Promise(resolve => {\n\n      const entry: TaskQueueEntry<TResult> = {\n        task,\n        run: () => {\n          resolve(this._allotment.run(task).finally(() => {\n            // Remove from the queue.\n            this._tasks.shift();\n            // Run next.\n            this._runNext();\n          }));\n        },\n      };\n\n      this._tasks.push(entry);\n\n      if (this._tasks.length === 1) {\n        // The first task is just enqueued.\n        // Run it immediately, as there is nothing to wait for.\n        this._runNext();\n      }\n    });\n  }\n\n  private _runNext(): void {\n\n    const [first] = this._tasks;\n\n    if (first) {\n      first.run();\n    }\n  }\n\n}\n\ninterface TaskQueueEntry<TResult> {\n  readonly task: Workbench.Task<TResult>;\n  run(): void;\n}\n","import { Workload } from '../workload';\nimport { OrderedTasks } from './ordered-tasks.impl';\n\n/**\n * @internal\n */\nexport class WorkOrdering extends Workload<OrderedTasks> {\n\n  static readonly $ = new WorkOrdering();\n\n  private constructor() {\n    super('ordering', {\n      start(allotment: Workload.Allotment<OrderedTasks>): OrderedTasks {\n        return new OrderedTasks(allotment);\n      },\n    });\n  }\n\n}\n","import { noop, valueProvider } from '@proc7ts/primitives';\nimport type { Supply } from '@proc7ts/supply';\nimport { WorkDoneError } from '../work-done-error';\nimport type { Workbench } from '../workbench';\nimport { Workload } from '../workload';\nimport { WorkOrdering } from './work-ordering.impl';\n\nexport class WorkStage extends Workload<WorkStage.Work> {\n\n  constructor(name: string, allocator: WorkStage.Allocator = {}) {\n    super(\n        name,\n        {\n          start(allotment: Workload.Allotment<WorkStage.Work>): WorkStage.Work {\n\n            const { workbench, workload, supply } = allotment;\n            const runner = new WorkStageRunner(allotment, allocator);\n\n            return {\n\n              workbench,\n              stage: workload,\n              supply,\n\n              async run(task) {\n                return await runner.run(this, task);\n              },\n\n            };\n          },\n        },\n    );\n  }\n\n  workName(_work?: WorkStage.Work): string {\n    return `The ${this.name} stage`;\n  }\n\n  toString(): string {\n    return `WorkStage(${this.name})`;\n  }\n\n}\n\nexport namespace WorkStage {\n\n  export interface Allocator {\n\n    readonly after?: WorkStage;\n\n    start?(work: Work): void | PromiseLike<unknown>;\n\n  }\n\n  export interface Work {\n\n    readonly workbench: Workbench;\n\n    readonly stage: WorkStage;\n\n    readonly supply: Supply;\n\n    run<TResult>(task: Workbench.Task<TResult>): Promise<TResult>;\n\n  }\n\n}\n\nclass WorkStageRunner {\n\n  private readonly _whenAllDone: Promise<unknown>;\n  private _whenTaskDone: Promise<unknown> = Promise.resolve();\n  private _end!: (result?: PromiseLike<unknown>) => void;\n\n  constructor(\n      readonly allotment: Workload.Allotment<WorkStage.Work>,\n      readonly allocator: WorkStage.Allocator,\n  ) {\n\n    const { supply } = allotment;\n\n    this._whenAllDone = new Promise<unknown>(resolve => this._end = resolve)\n        .then(() => supply.off())\n        .catch(error => supply.off(error));\n\n    supply.whenOff(reason => {\n      if (reason === undefined) {\n        this._end();\n      } else {\n        this._end(Promise.reject(reason));\n      }\n\n      // Stop accepting new tasks.\n      this.run = (work, _task) => Promise.reject(\n          new WorkDoneError(allotment.workload, work, reason),\n      );\n    });\n  }\n\n  run<TResult>(work: WorkStage.Work, task: Workbench.Task<TResult>): Promise<TResult> {\n\n    const promise = this._start(work).then(() => this.allotment.run(task));\n\n    this._addTask(promise);\n\n    return promise;\n  }\n\n  private _addTask(taskPromise: Promise<unknown>): void {\n\n    const taskDone = this._whenTaskDone = Promise.all([\n      this._whenTaskDone,\n      taskPromise.catch(noop),\n    ]);\n\n    taskDone.finally(() => {\n      if (taskDone === this._whenTaskDone) {\n        this._end(taskDone);\n      }\n    });\n  }\n\n  private _start(work: WorkStage.Work): Promise<unknown> {\n\n    let whenStarted = this._awaitDeps();\n\n    if (this.allocator.start) {\n      whenStarted = whenStarted.then(async () => {\n        await this.allocator.start!(work);\n      });\n    }\n\n    // Start only once!\n    this._start = valueProvider(whenStarted);\n    this._addTask(whenStarted);\n\n    return whenStarted;\n  }\n\n  private _awaitDeps(): Promise<unknown> {\n\n    const deps: Promise<void>[] = [];\n    const addDep = (dep: WorkStage): void => {\n      deps.push(new Promise(resolve => {\n        this.allotment\n            .workbench\n            .work(WorkOrdering.$)\n            .runAfter(\n                dep,\n                () => {\n                  resolve();\n                  return this._whenAllDone;\n                },\n            )\n            .catch(noop);\n      }));\n    };\n\n    const { after } = this.allocator;\n\n    if (after) {\n      addDep(after);\n    }\n    addDep(this.allotment.workload);\n\n    return Promise.all(deps);\n  }\n\n}\n","import { noop } from '@proc7ts/primitives';\nimport { alwaysSupply, Supply, SupplyPeer } from '@proc7ts/supply';\nimport { WorkDoneError } from './work-done-error';\nimport type { Workbench } from './workbench';\nimport type { Workload } from './workload';\n\n/**\n * @internal\n */\nexport const Workbench$impl__symbol = (/*#__PURE__*/ Symbol('Workbench.impl'));\n\n/**\n * @internal\n */\nexport class Workbench$ implements SupplyPeer {\n\n  readonly supply: Supply;\n  private readonly _works = new Map<Workload<unknown>, unknown>();\n  private readonly _run: Required<Workbench.Options>['run'];\n\n  constructor(readonly workbench: Workbench, options: Workbench.Options) {\n\n    const { supply = alwaysSupply(), run } = options;\n\n    this.supply = new Supply(reason => {\n      // Reject new work.\n      this.work = workload => {\n        throw new WorkDoneError(workload, undefined, reason, 'The workbench is stopped');\n      };\n    }).as(supply);\n\n    this._run = run ? run.bind(options) : Workbench$run;\n  }\n\n  work<TWork>(workload: Workload<TWork>): TWork {\n    if (this._works.has(workload)) {\n      return this._works.get(workload) as TWork;\n    }\n\n    let ensureWorking: () => void = noop;\n    const runWorkTask = async <TResult>(\n        work: TWork,\n        task: Workbench.Task<TResult>,\n    ): Promise<TResult> => {\n\n      const result = await this._run(task, work, workload);\n\n      ensureWorking();\n\n      return result;\n    };\n    const supply = new Supply().needs(this.supply);\n\n    let setWork!: (work: TWork) => TWork;\n    let work: TWork | undefined;\n    let runTask: <TResult>(task: Workbench.Task<TResult>) => Promise<TResult>;\n\n    const whenWork = new Promise<TWork>(resolve => {\n      setWork = newWork => {\n        work = newWork;\n\n        this._works.set(workload, newWork);\n        runTask = async task => await runWorkTask(newWork, task);\n\n        resolve(newWork);\n\n        return newWork;\n      };\n    });\n\n    runTask = async task => await runWorkTask(await whenWork, task);\n\n    supply.whenOff(reason => {\n      runTask = ensureWorking = () => {\n        throw new WorkDoneError(workload, work, reason);\n      };\n      this._works.delete(workload);\n    });\n\n    return setWork(workload.allocator.start({\n      workbench: this.workbench,\n      workload,\n      supply,\n      async run<TResult>(task: Workbench.Task<TResult>) {\n        return await runTask(task);\n      },\n    }));\n  }\n\n}\n\nasync function Workbench$run<TResult, TWork>(\n    task: Workbench.Task<TResult>,\n    _work: TWork,\n    _workload: Workload<TWork>,\n): Promise<TResult> {\n  return await task();\n}\n","import type { Supply, SupplyPeer } from '@proc7ts/supply';\nimport { Workbench$, Workbench$impl__symbol } from './workbench.impl';\nimport type { Workload } from './workload';\n\n/**\n * A workbench for coordinated {@link Workload workloads}.\n *\n * Performs a work by running tasks specific to each kind of workload.\n */\nexport class Workbench implements SupplyPeer {\n\n  /**\n   * @internal\n   */\n  private readonly [Workbench$impl__symbol]: Workbench$;\n\n  /**\n   * Constructs a workbench.\n   *\n   * @param options - Constructed workbench options.\n   */\n  constructor(options: Workbench.Options = {}) {\n    this[Workbench$impl__symbol] = new Workbench$(this, options);\n  }\n\n  /**\n   * Workbench supply.\n   *\n   * Once cut off the workbench terminates all current works, and no longer accepts new ones.\n   */\n  get supply(): Supply {\n    return this[Workbench$impl__symbol].supply;\n  }\n\n  /**\n   * Obtains a work of the given workload.\n   *\n   * Caches the work previously obtained work of the same workload, until the work is {@link Workload.Allotment.supply\n   * disposed}. Creates a new work instance after that.\n   *\n   * @typeParam TWork - A work type.\n   * @param workload - Target workload.\n   *\n   * @returns A work instance.\n   */\n  work<TWork>(workload: Workload<TWork>): TWork {\n    return this[Workbench$impl__symbol].work(workload);\n  }\n\n}\n\nexport namespace Workbench {\n\n  /**\n   * A task to run by workbench.\n   *\n   * @typeParam TResult - A type of task result.\n   */\n  export type Task<TResult> =\n  /**\n   * @returns A task result evaluated synchronously, or a promise-like instance resolved to asynchronously evaluated\n   * result.\n   */\n      (this: void) => TResult | PromiseLike<TResult>;\n\n  /**\n   * Workbench construction options.\n   */\n  export interface Options {\n\n    /**\n     * Workbench supply to use.\n     *\n     * Once cut off the workbench terminates all current works, and no longer accepts new ones.\n     *\n     * A new one will be created when omitted.\n     */\n    readonly supply?: Supply;\n\n    /**\n     * Runs the given task.\n     *\n     * The default runner implementation will be used when omitted.\n     *\n     * @typeParam TResult - A type of task result.\n     * @typeParam TWork - A type of the work the task is part of.\n     * @param task - The task to run.\n     * @param work - The work instance the task is part of.\n     * @param workload - The workload the task is part of.\n     */\n    run?<TResult, TWork>(task: Task<TResult>, work: TWork, workload: Workload<TWork>): Promise<TResult>;\n\n  }\n\n}\n","/**\n * Creates a function that throws a context destruction reason.\n *\n * This may be handy when {@link ContextSupply context supply} is cut off.\n *\n * @param reason - Context destruction reason.\n */\nexport function contextDestroyed(reason: unknown = new TypeError('Context destroyed')): () => never {\n  return () => {\n    throw reason;\n  };\n}\n","import {\n  afterEach,\n  AfterEvent,\n  afterThe,\n  digAfter_,\n  EventKeeper,\n  isAfterEvent,\n  supplyAfter,\n  trackValue,\n  translateAfter,\n  ValueTracker,\n} from '@proc7ts/fun-events';\nimport { itsElements, mapIt, overElementsOf, overIterator } from '@proc7ts/push-iterator';\nimport { Supply } from '@proc7ts/supply';\nimport type { ContextRef } from '../context-ref';\nimport type { ContextValues } from '../context-values';\nimport { ContextSupply } from '../conventional';\nimport type { ContextSeeder, ContextValueSlot } from '../key';\nimport { ContextKey, ContextKey__symbol, ContextSeedKey } from '../key';\nimport type { ContextValueProvider } from '../registry';\n\n/**\n * @internal\n */\nconst flatUpSources: <TSrc>(this: void, input: AfterEvent<TSrc[][]>) => AfterEvent<TSrc[]> = (\n    /*#__PURE__*/ translateAfter((send, ...sources) => send(...itsElements(overElementsOf(...sources))))\n);\n\n/**\n * @internal\n */\nclass ContextUpSeeder<TCtx extends ContextValues, TSrc>\n    implements ContextSeeder<TCtx, ContextUpKey.Source<TSrc>, AfterEvent<TSrc[]>> {\n\n  private readonly _providers = trackValue<[Map<Supply, ContextValueProvider<ContextUpKey.Source<TSrc>, TCtx>>]>(\n      [new Map()],\n  );\n\n  provide(provider: ContextValueProvider<ContextUpKey.Source<TSrc>, TCtx>): Supply {\n\n    const [providers] = this._providers.it;\n    const supply = new Supply();\n\n    providers.set(supply, provider);\n    this._providers.it = [providers];\n\n    return supply.whenOff(() => {\n\n      const [providers] = this._providers.it;\n\n      providers.delete(supply);\n\n      this._providers.it = [providers];\n    });\n  }\n\n  seed(context: TCtx, initial: AfterEvent<TSrc[]> = afterThe<TSrc[]>()): AfterEvent<TSrc[]> {\n    return this.combine(initial, upSrcKeepers(context, this._providers));\n  }\n\n  isEmpty(): boolean {\n    return false;\n  }\n\n  combine(first: AfterEvent<TSrc[]>, second: AfterEvent<TSrc[]>): AfterEvent<TSrc[]> {\n    return afterEach(first, second).do(flatUpSources);\n  }\n\n}\n\n/**\n * @internal\n */\nfunction upSrcKeepers<TCtx extends ContextValues, TSrc>(\n    context: TCtx,\n    providersTracker: ValueTracker<[Map<Supply, ContextValueProvider<ContextUpKey.Source<TSrc>, TCtx>>]>,\n): AfterEvent<TSrc[]> {\n  return providersTracker.read.do(\n      digAfter_(\n          ([providers]): AfterEvent<TSrc[][]> => !providers.size\n              ? afterThe()\n              : afterEach(\n                  ...mapIt(\n                      mapIt(\n                          overIterator(() => providers.values()),\n                          prov => prov(context),\n                      ),\n                      toUpSrcKeeper,\n                  ),\n              ),\n      ),\n      flatUpSources,\n  );\n}\n\n/**\n * @internal\n */\nfunction toUpSrcKeeper<TSrc>(src: null | undefined | ContextUpKey.Source<TSrc>): AfterEvent<TSrc[]> {\n  return isAfterEvent(src)\n      ? src\n      : (src != null ? afterThe(src) : afterThe());\n}\n\n/**\n * @internal\n */\nclass ContextSeed$UpKey<TSrc>\n    extends ContextSeedKey<ContextUpKey.Source<TSrc>, AfterEvent<TSrc[]>>\n    implements ContextUpKey.SeedKey<TSrc> {\n\n  get upKey(): this {\n    return this;\n  }\n\n  seeder<TCtx extends ContextValues>(): ContextSeeder<TCtx, ContextUpKey.Source<TSrc>, AfterEvent<TSrc[]>> {\n    return new ContextUpSeeder();\n  }\n\n}\n\n/**\n * Updatable context value reference.\n *\n * @typeParam TValue - Context value type.\n * @typeParam TSrc - Source value type.\n */\nexport interface ContextUpRef<TValue, TSrc> extends ContextRef<TValue, ContextUpKey.Source<TSrc>> {\n\n  readonly [ContextKey__symbol]: ContextUpKey<TValue, TSrc>;\n\n}\n\n/**\n * @internal\n */\nclass ContextUpKey$UpKey<TUpdate extends any[], TSrc>\n    extends ContextKey<AfterEvent<TUpdate>, ContextUpKey.Source<TSrc>, AfterEvent<TSrc[]>>\n    implements ContextUpKey.SimpleUpKey<TUpdate, TSrc> {\n\n  readonly grow: (\n      slot: ContextValueSlot<\n          AfterEvent<TUpdate>,\n          ContextUpKey.Source<TSrc>,\n          AfterEvent<TSrc[]>>,\n  ) => void;\n\n  get seedKey(): ContextSeedKey<ContextUpKey.Source<TSrc>, AfterEvent<TSrc[]>> {\n    return this._key.seedKey;\n  }\n\n  get upKey(): this {\n    return this;\n  }\n\n  constructor(\n      private readonly _key: ContextUpKey<unknown, TSrc>,\n      grow: (\n          slot: ContextValueSlot<\n              AfterEvent<TUpdate>,\n              ContextUpKey.Source<TSrc>,\n              AfterEvent<TSrc[]>>,\n      ) => void,\n  ) {\n    super(_key.name + ':up');\n    this.grow = slot => {\n\n      const value: AfterEvent<TUpdate> | null | undefined = slot.fillBy(grow);\n\n      if (value != null) {\n        slot.insert(value.do(\n            supplyAfter(slot.context.get(ContextSupply)),\n        ));\n      }\n    };\n  }\n\n}\n\n/**\n * Abstract implementation of updatable context value key.\n *\n * Accepts a {@link ContextUpKey.Source} instances as source values.\n *\n * Collects value sources into `AfterEvent` keeper of source values.\n *\n * @typeParam TValue - Context value type.\n * @typeParam TSrc - Source value type.\n */\nexport abstract class ContextUpKey<TValue, TSrc>\n    extends ContextKey<TValue, ContextUpKey.Source<TSrc>, AfterEvent<TSrc[]>>\n    implements ContextUpRef<TValue, TSrc>, ContextUpKey.Base<TValue, TSrc> {\n\n  readonly seedKey: ContextUpKey.SeedKey<TSrc>;\n\n  /**\n   * A key of context value containing an {@link ContextUpKey.Up updates keeper} of this key value.\n   *\n   * It is expected to report any updates to this key's value.\n   *\n   * The value of updates key is constructed by {@link grow} function out of the same seed.\n   */\n  abstract readonly upKey: ContextUpKey.UpKey<TValue, TSrc>;\n\n  /**\n   * Constructs simple context value key.\n   *\n   * @param name - Human-readable key name.\n   * @param seedKey - Value seed key. A new one will be constructed when omitted.\n   */\n  constructor(\n      name: string,\n      {\n        seedKey,\n      }: {\n        seedKey?: ContextUpKey.SeedKey<TSrc>;\n      } = {},\n  ) {\n    super(name);\n    this.seedKey = seedKey || new ContextSeed$UpKey<TSrc>(this);\n  }\n\n  /**\n   * Creates a key of context value containing an `AfterEvent` keeper of updates to the value of this key.\n   *\n   * @typeParam TUpdate - Context value update type.\n   * @param grow - A function that grows an updates keeper of context value out of its seed.\n   *\n   * @returns New updates keeper key.\n   */\n  protected createUpKey<TUpdate extends any[]>(\n      grow: (\n          slot: ContextValueSlot<\n              AfterEvent<TUpdate>,\n              ContextUpKey.Source<TSrc>,\n              AfterEvent<TSrc[]>>,\n      ) => void,\n  ): ContextUpKey.SimpleUpKey<TUpdate, TSrc> {\n    return new ContextUpKey$UpKey(this, grow);\n  }\n\n}\n\nexport namespace ContextUpKey {\n\n  /**\n   * A source value accepted by {@link ContextUpKey updatable context key}.\n   *\n   * Either a single source value, or an `AfterEvent` keeper of source values.\n   *\n   * @typeParam TSrc - Source value type.\n   */\n  export type Source<TSrc> = TSrc | AfterEvent<TSrc[]>;\n\n  /**\n   * A type of context value updates tracker.\n   *\n   * It is the same as a type of original value if the value itself is an event keeper, or an `AfterEvent` keeper\n   * of original value otherwise.\n   *\n   * @typeParam TValue - Original context value type.\n   */\n  export type Up<TValue> = TValue extends EventKeeper<any> ? TValue : AfterEvent<[TValue]>;\n\n  /**\n   * Base interface of updatable context value key.\n   *\n   * @typeParam TValue - Context value type.\n   * @typeParam TSrc - Source value type.\n   */\n  export interface Base<TValue, TSrc> extends ContextKey<TValue, ContextUpKey.Source<TSrc>> {\n\n    /**\n     * A key of context value containing an {@link ContextUpKey.Up updatable value tracker}.\n     *\n     * It is expected to report any updates to this key's value.\n     *\n     * The value of updates key is constructed by {@link grow} function out of the same seed.\n     */\n    readonly upKey: UpKey<TValue, TSrc>;\n\n  }\n\n  /**\n   * A key of context value containing an {@link ContextUpKey.Up updatable value tracker}.\n   *\n   * @typeParam TValue - Context value type.\n   * @typeParam TSrc - Source value type.\n   */\n  export interface UpKey<TValue, TSrc> extends ContextKey<ContextUpKey.Up<TValue>, ContextUpKey.Source<TSrc>> {\n\n    /**\n     * A reference to this key.\n     *\n     * Indicates that this key is updatable too.\n     */\n    readonly upKey: this;\n\n  }\n\n  /**\n   * A key of context value containing an `AfterEvent` keeper of updates of {@link ContextUpKey updatable value}.\n   *\n   * @typeParam TUpdate - Context value update type.\n   * @typeParam TSrc - Source value type.\n   */\n  export interface SimpleUpKey<TUpdate extends any[], TSrc> extends Base<AfterEvent<TUpdate>, TSrc> {\n\n    readonly upKey: this;\n\n  }\n\n  /**\n   * Updatable context value seed key.\n   *\n   * @typeParam TSrc - Source value type.\n   */\n  export interface SeedKey<TSrc> extends ContextSeedKey<ContextUpKey.Source<TSrc>, AfterEvent<TSrc[]>> {\n\n    /**\n     * A key of context value containing an {@link Up updates keeper} of the seed. Always equal to this key.\n     */\n    readonly upKey: this;\n\n  }\n\n}\n","import type { AfterEvent } from '@proc7ts/fun-events';\nimport { shareAfter, translateAfter_ } from '@proc7ts/fun-events';\nimport { isPresent } from '@proc7ts/primitives';\nimport { filterIt, mapIt } from '@proc7ts/push-iterator';\nimport type { ContextValues } from '../../context-values';\nimport type { Contextual } from '../../conventional';\nimport { Contextual__symbol, isContextual } from '../../conventional';\n\n/**\n * Creates an event processor that {@link applyContextTo} applies context to values and their {@link Contextual\n * contextual references} incoming from {@link AfterEvent} keeper.\n *\n * This function is applicable to updatable context value {@link ContextUpKey.Source sources} potentially containing\n * contextual references.\n *\n * @typeParam T - Value type.\n * @typeParam TCtx - Supported context type.\n * @param context - A context to apply.\n *\n * @returns A mapping function of `AfterEvent` keeper of values, their contextual references, or `null`/`undefined`\n * elements to `AfterEvent` keeper of resolved values.\n */\nexport function applyContextAfter<T, TCtx extends ContextValues = ContextValues>(\n    context: TCtx,\n): (this: void, source: AfterEvent<(T | Contextual<T, TCtx> | null | undefined)[]>) => AfterEvent<T[]> {\n\n  const processor = applyContextAfter_<T, TCtx>(context);\n\n  return source => shareAfter(processor(source));\n}\n\n/**\n * Creates an event processor that {@link applyContextTo} applies context to values and their {@link Contextual\n * contextual references} incoming from {@link AfterEvent} keeper, and does not share the outgoing events supply.\n *\n * This function is applicable to updatable context value {@link ContextUpKey.Source sources} potentially containing\n * contextual references to resolve the latter before providing to context.\n *\n * @typeParam T - Value type.\n * @typeParam TCtx - Supported context type.\n * @param context - A context to apply.\n *\n * @returns A mapping function of `AfterEvent` keeper of values, their contextual references, or `null`/`undefined`\n * elements to `AfterEvent` keeper of resolved values.\n */\nexport function applyContextAfter_<// eslint-disable-line @typescript-eslint/naming-convention\n    T,\n    TCtx extends ContextValues = ContextValues>(\n    context: TCtx,\n): (this: void, source: AfterEvent<(T | Contextual<T, TCtx> | null | undefined)[]>) => AfterEvent<T[]> {\n  return translateAfter_((send, ...values) => send(\n      ...filterIt<T | null | undefined, T>(\n          mapIt(\n              values,\n              (value): T | null | undefined => isContextual(value)\n                  ? value[Contextual__symbol](context)\n                  : value,\n          ),\n          isPresent,\n      ),\n  ));\n}\n","import { AfterEvent, afterThe, digAfter } from '@proc7ts/fun-events';\nimport { noop } from '@proc7ts/primitives';\nimport { ContextKeyError } from '../context-key-error';\nimport type { ContextValues } from '../context-values';\nimport type { ContextKeyDefault, ContextValueSlot } from '../key';\nimport { contextDestroyed } from './context-destroyed';\nimport { ContextUpKey, ContextUpRef } from './context-up-key';\n\n/**\n * A reference to updatable context function value.\n *\n * @typeParam TArgs - Function arguments tuple type.\n * @typeParam TRet - Function return value type.\n */\nexport type FnContextRef<TArgs extends any[], TRet = void> =\n    ContextUpRef<(this: void, ...args: TArgs) => TRet, (this: void, ...args: TArgs) => TRet>;\n\n/**\n * A key of updatable context function value.\n *\n * The value associated with this key is a function that delegates to the last provided function. The target function\n * may be updated.\n *\n * The value is always present. But if the function to delegate is not provided, and no default/fallback function\n * provided, an attempt to call the delegate would throw an {@link ContextKeyError}.\n *\n * It is an error to provide a `null` or `undefined` {@link ContextRequest.Opts.or fallback value} when requesting\n * an associated value. Use an `afterThe()` result as a fallback instead.\n *\n * @typeParam TArgs - Function arguments tuple type.\n * @typeParam TRet - Function return value type.\n */\nexport class FnContextKey<TArgs extends any[], TRet = void>\n    extends ContextUpKey<(this: void, ...args: TArgs) => TRet, (this: void, ...args: TArgs) => TRet>\n    implements FnContextRef<TArgs, TRet> {\n\n  /**\n   * Constructs a function that will be called unless fallback provided.\n   */\n  readonly byDefault: (this: void, context: ContextValues, key: FnContextKey<TArgs, TRet>) =>\n      (this: void, ...args: TArgs) => TRet;\n\n  readonly upKey: ContextUpKey.SimpleUpKey<\n      [(this: void, ...args: TArgs) => TRet],\n      (this: void, ...args: TArgs) => TRet>;\n\n  /**\n   * Constructs updatable context function key.\n   *\n   * @param name - Human-readable key name.\n   * @param seedKey - Value seed key. A new one will be constructed when omitted.\n   * @param byDefault - Constructs a default function to call. If unspecified then the default function would raise\n   * an error.\n   */\n  constructor(\n      name: string,\n      {\n        seedKey,\n        byDefault = noop,\n      }: {\n        seedKey?: ContextUpKey.SeedKey<((this: void, ...args: TArgs) => TRet)>;\n        byDefault?: ContextKeyDefault<(this: void, ...args: TArgs) => TRet, FnContextKey<TArgs, TRet>>;\n      } = {},\n  ) {\n    super(name, seedKey);\n    this.byDefault = (context, key) => byDefault(context, key)\n        || (() => {\n          throw new ContextKeyError(this);\n        });\n    this.upKey = this.createUpKey(slot => slot.insert(slot.seed.do(\n        digAfter((...fns): AfterEvent<[(this: void, ...args: TArgs) => TRet]> => {\n          if (fns.length) {\n            return afterThe(fns[fns.length - 1]);\n          }\n\n          if (slot.hasFallback && slot.or) {\n            return slot.or;\n          }\n\n          return afterThe(this.byDefault(slot.context, this));\n        }),\n    )));\n  }\n\n  grow(\n      slot: ContextValueSlot<\n          (this: void, ...args: TArgs) => TRet,\n          ContextUpKey.Source<(this: void, ...args: TArgs) => TRet>,\n          AfterEvent<((this: void, ...args: TArgs) => TRet)[]>>,\n  ): void {\n\n    let delegated: (this: void, ...args: TArgs) => TRet;\n\n    slot.context.get(\n        this.upKey,\n        slot.hasFallback ? { or: slot.or != null ? afterThe(slot.or) : slot.or } : undefined,\n    )!(\n        fn => delegated = fn,\n    ).whenOff(\n        reason => delegated = contextDestroyed(reason),\n    );\n\n    slot.insert((...args) => delegated(...args));\n  }\n\n}\n","import type { ContextModule } from './context-module';\n\n/**\n * An error indicating context module dependency load failure.\n */\nexport class ContextModuleDependencyError extends Error {\n\n  /**\n   * Constructs context module dependency load error.\n   *\n   * @param module - A module failed to load.\n   * @param reasons - An array of dependency/reason pairs caused the load failure.\n   * @param message - An error message.\n   */\n  constructor(\n      readonly module: ContextModule,\n      readonly reasons: readonly (readonly [ContextModule, unknown?])[] = [],\n      readonly message: string = contextModuleDependencyErrorMessage(module, reasons),\n  ) {\n    super(message);\n  }\n\n}\n\n/**\n * @internal\n */\nfunction contextModuleDependencyErrorMessage(\n    module: ContextModule,\n    dependencies: readonly (readonly [ContextModule, unknown?])[],\n): string {\n\n  const reasons = dependencies.reduce(\n      (out, [dep, reason]) => {\n        if (out) {\n          out += ', ';\n        } else {\n          out = ': ';\n        }\n        if (reason !== undefined) {\n          out += `${dep} failed to load (${reason})`;\n        } else {\n          out += `${dep} not loaded`;\n        }\n\n        return out;\n      },\n      '',\n  );\n\n  return `Failed to load ${module}${reasons}`;\n}\n","import {\n  AfterEvent,\n  AfterEvent__symbol,\n  mapAfter_,\n  OnEvent,\n  onEventBy,\n  supplyAfter,\n  trackValue,\n  ValueTracker,\n} from '@proc7ts/fun-events';\nimport { noop, valueProvider } from '@proc7ts/primitives';\nimport { neverSupply, Supply, SupplyPeer } from '@proc7ts/supply';\nimport type { ContextRequest } from '../../context-request';\nimport type { ContextValues } from '../../context-values';\nimport { ContextSupply } from '../../conventional';\nimport type { ContextRegistry } from '../../registry';\nimport type { ContextModule } from './context-module';\n\n/**\n * @internal\n */\nexport class ContextModuleUsage {\n\n  private readonly _impl: ValueTracker<ContextModule | undefined>;\n  private readonly _rev: ValueTracker<ContextModuleRev>;\n  private _useCounter = 0;\n\n  private _setup!: () => void;\n\n  constructor(context: ContextValues, readonly module: ContextModule) {\n    this._impl = trackValue();\n    this._rev = trackValue({\n      status: {\n        module: this.module,\n        provided: false,\n        used: false,\n        settled: false,\n        ready: false,\n      },\n      supply: neverSupply(),\n    });\n\n    const contextSupply = context.get(ContextSupply);\n\n    contextSupply.cuts(this._impl);\n    contextSupply.cuts(this._rev);\n\n    this._impl.read(module => {\n\n      const prevSupply = this._rev.it.supply;\n\n      if (module) {\n        this._load(module);\n      }\n\n      prevSupply.off();\n    });\n  }\n\n  createHandle(): ContextModule.Handle {\n\n    const read: AfterEvent<[ContextModule.Status]> = this._rev.read.do(\n        mapAfter_(({ status }) => status),\n    );\n\n    const handle: ContextModule.Handle = {\n      read,\n      [AfterEvent__symbol]: valueProvider(read),\n      use: (user?: SupplyPeer) => this._use(handle, user),\n    };\n\n    return handle;\n  }\n\n  setup(context: ContextValues, registry: ContextRegistry): void {\n    this._setup = () => {\n\n      const rev = this._rev.it;\n      const { status: { module }, supply } = rev;\n\n      if (module !== this.module) {\n        // Load implementation module instead.\n        // The implementation module expected to be provided already.\n        context.get(module).use(supply).read({\n          supply,\n          receive: (_ctx, { settled, ready, error }) => {\n            this._updateStatus(rev, settled, ready, error);\n          },\n        });\n      } else {\n        loadContextModule(context, registry, rev)\n            .then(({ whenReady }) => {\n              this._updateStatus(rev, true, false);\n              return whenReady;\n            })\n            .then(() => this._updateStatus(rev, true, true))\n            .catch(error => rev.supply.off(error));\n      }\n    };\n  }\n\n  implementBy(impl: AfterEvent<[ContextModule?]>): void {\n    this._impl.by(impl);\n  }\n\n  private _updateStatus(\n      rev: ContextModuleRev,\n      settled: boolean,\n      ready: boolean,\n      error?: unknown,\n  ): void {\n    // Ensure updating the correct revision.\n    if (this._rev.it.supply !== rev.supply) {\n      // If revision changed, then drop the obsolete one.\n      rev.supply.off();\n    } else {\n      this._rev.it = rev = {\n        status: {\n          module: rev.status.module,\n          provided: rev.status.provided,\n          used: true,\n          settled,\n          ready,\n          error,\n        },\n        supply: rev.supply,\n      };\n    }\n  }\n\n  private _load(module: ContextModule): void {\n\n    const supply = new Supply(noop).needs(this._rev).whenOff(error => {\n\n      const rev = this._rev.it;\n\n      if (rev.supply === supply) {\n        this._rev.it = {\n          status: {\n            ...this._rev.it.status,\n            provided: false,\n            settled: false,\n            ready: false,\n            error,\n          },\n          supply,\n        };\n      }\n    });\n\n    const used = !!this._useCounter;\n\n    this._rev.it = {\n      status: {\n        module,\n        provided: true,\n        used,\n        settled: false,\n        ready: false,\n      },\n      supply,\n    };\n\n    if (used) {\n      this._setup();\n    }\n  }\n\n  private _use(handle: ContextModule.Handle, user?: SupplyPeer): ContextModule.Use {\n\n    const supply = new Supply(noop);\n\n    if (user) {\n      supply.needs(user);\n    }\n\n    const read = handle.read.do(supplyAfter(supply));\n    const use: ContextModule.Use = {\n      ...handle,\n      read,\n      whenSettled: ContextModule$Use$when(read, isContextModuleSettled),\n      whenReady: ContextModule$Use$when(read, isContextModuleReady),\n      supply,\n    };\n\n    if (!supply.isOff) {\n      supply.whenOff(error => {\n        if (!--this._useCounter) {\n\n          const rev = this._rev.it;\n\n          this._rev.it = {\n            status: {\n              ...rev.status,\n              used: false,\n              settled: false,\n              ready: false,\n              error,\n            },\n            supply: new Supply(noop).off(error),\n          };\n\n          rev.supply.off(error);\n        }\n      });\n\n      if (!this._useCounter++) {\n        // Mark the module used and set it up.\n\n        const rev = this._rev.it;\n\n        this._rev.it = {\n          status: {\n            ...rev.status,\n            used: true,\n          },\n          supply: rev.supply,\n        };\n\n        this._setup();\n      }\n    }\n\n    return use;\n  }\n\n}\n\n/**\n * @internal\n */\ninterface ContextModuleRev {\n\n  readonly status: ContextModule.Status;\n  readonly supply: Supply;\n\n}\n\n/**\n * @internal\n */\nasync function loadContextModule(\n    context: ContextValues,\n    registry: ContextRegistry,\n    { status: { module }, supply }: ContextModuleRev,\n): Promise<ContextModuleInit> {\n\n  const moduleInit = new ContextModuleInit(module);\n\n  await module.setup({\n\n    module,\n    supply,\n\n    get(request: ContextRequest<any>) {\n      return context.get(request);\n    },\n\n    provide(spec): Supply {\n      return registry.provide(spec).needs(supply);\n    },\n\n    initBy(init: (this: void) => (void | PromiseLike<unknown>)) {\n      moduleInit.initBy(init);\n    },\n\n  });\n\n  return moduleInit;\n}\n\nclass ContextModuleInit {\n\n  readonly whenReady: Promise<unknown>;\n  private _whenDone: Promise<unknown> = Promise.resolve();\n  private _ready!: (result?: PromiseLike<unknown>) => void;\n\n  constructor(private readonly _module: ContextModule) {\n    this.whenReady = new Promise(resolve => this._ready = resolve);\n  }\n\n  initBy(init: (this: void) => void | PromiseLike<unknown>): void {\n\n    const rev: Promise<unknown> = this._whenDone = this._whenDone\n        .then(init)\n        .finally(() => this._done(rev));\n\n  }\n\n  private _done(rev: Promise<unknown>): void {\n    if (this._whenDone === rev) {\n      this._ready(rev);\n      this.initBy = _init => {\n        throw new TypeError(`${this._module} initialized already, and does not accept new initializers`);\n      };\n    }\n  }\n\n}\n\nfunction ContextModule$Use$when(\n    status: AfterEvent<[ContextModule.Status]>,\n    test: (status: ContextModule.Status) => boolean,\n): OnEvent<[ContextModule.Status]> {\n  return onEventBy(receiver => status({\n    supply: receiver.supply,\n    receive: (context, status) => {\n      if (test(status)) {\n        receiver.receive(context, status);\n        receiver.supply.off();\n      } else if (status.error) {\n        receiver.supply.off(status.error);\n      }\n    },\n  }));\n}\n\nfunction isContextModuleSettled({ settled }: ContextModule.Status): boolean {\n  return settled;\n}\n\nfunction isContextModuleReady({ ready }: ContextModule.Status): boolean {\n  return ready;\n}\n","import type { AfterEvent } from '@proc7ts/fun-events';\nimport { mapAfter_ } from '@proc7ts/fun-events';\nimport type { ContextValueSlot } from '../../key';\nimport { ContextUpKey } from '../context-up-key';\nimport type { ContextModule } from './context-module';\nimport { ContextModuleUsage } from './context-module-usage.impl';\n\n/**\n * @internal\n */\nexport class ContextModuleKey extends ContextUpKey<ContextModule.Handle, ContextModule> {\n\n  constructor(name: string, private readonly _module: ContextModule) {\n    super(name);\n  }\n\n  get upKey(): this {\n    return this;\n  }\n\n  grow(\n      slot: ContextValueSlot<\n          ContextModule.Handle,\n          ContextUpKey.Source<ContextModule>,\n          AfterEvent<ContextModule[]>>,\n  ): void {\n\n    const usage = new ContextModuleUsage(slot.context, this._module);\n\n    slot.insert(usage.createHandle());\n    slot.setup(({ context, registry }) => usage.setup(context, registry));\n\n    usage.implementBy(implementContextModule(this._module, slot.seed));\n  }\n\n}\n\n/**\n * @internal\n */\nfunction implementContextModule(\n    module: ContextModule,\n    impls: AfterEvent<[ContextModule]>,\n): AfterEvent<[ContextModule | undefined]> {\n  return impls.do(\n      mapAfter_((...candidates) => {\n\n        let impl: ContextModule | undefined;\n\n        for (let i = candidates.length - 1; i >= 0; --i) {\n          impl = candidates[i];\n          if (impl !== module) {\n            break;\n          }\n        }\n\n        return impl;\n      }),\n  );\n}\n","import type { OnEvent } from '@proc7ts/fun-events';\nimport { isDefined, noop, setOfElements, valueProvider } from '@proc7ts/primitives';\nimport { itsElements, valueIt } from '@proc7ts/push-iterator';\nimport type { Supply } from '@proc7ts/supply';\nimport type { ContextRegistry } from '../../registry';\nimport type { ContextUpKey } from '../context-up-key';\nimport type { ContextModule } from './context-module';\nimport { ContextModuleDependencyError } from './context-module-dependency-error';\nimport { ContextModuleKey } from './context-module-key.impl';\n\n/**\n * @internal\n */\nexport const ContextModule$impl__symbol = (/*#__PURE__*/ Symbol('ContextModule.impl'));\n\n/**\n * @internal\n */\nexport class ContextModule$ {\n\n  readonly key: ContextUpKey<ContextModule.Handle, ContextModule>;\n  readonly has: ReadonlySet<ContextModule>;\n  readonly needs: ReadonlySet<ContextModule>;\n\n  private readonly _setup: (\n      this: void,\n      setup: ContextModule.Setup,\n  ) => void | PromiseLike<unknown>;\n\n  constructor(module: ContextModule, readonly name: string, readonly options: ContextModule.Options) {\n    this.key = new ContextModuleKey(`${name}:module`, module);\n\n    const { needs, has, setup } = options;\n\n    this.has = setOfElements(has).add(module);\n    this.needs = setOfElements(needs);\n    this._setup = setup ? setup.bind(options) : noop;\n  }\n\n  replace(\n      module: ContextModule,\n      registry: ContextRegistry,\n      supply: Supply,\n  ): void {\n    for (const replaced of module.has) {\n      if (replaced !== module) {\n        registry.provide({ a: replaced, is: module }).needs(supply);\n      }\n    }\n  }\n\n  async setup(setup: ContextModule.Setup): Promise<void> {\n\n    const deps = contextModuleDeps(setup);\n\n    // Await for module dependencies to be settled.\n    if (!await loadContextModuleDeps(setup, deps, whenContextModuleSettled)) {\n      return;\n    }\n\n    setup.initBy(async () => {\n      // Initialize module dependencies.\n      await loadContextModuleDeps(setup, deps, whenContextModuleReady);\n    });\n\n    await this._setup(setup);\n  }\n\n}\n\ninterface ContextModuleDep {\n  readonly dep: ContextModule;\n  readonly use: ContextModule.Use;\n}\n\nfunction contextModuleDeps(setup: ContextModule.Setup): readonly ContextModuleDep[] {\n\n  const { module, supply } = setup;\n\n  return itsElements(\n      valueIt(\n          module.needs,\n          dep => dep !== module\n              && setup.provide(dep).needs(supply)\n              && {\n                dep,\n                use: setup.get(dep).use(setup),\n              },\n      ),\n  );\n}\n\nfunction loadContextModuleDeps(\n    setup: ContextModule.Setup,\n    deps: readonly ContextModuleDep[],\n    whenLoaded: (use: ContextModule.Use) => OnEvent<[ContextModule.Status]>,\n): Promise<boolean> {\n\n  const { module, supply } = setup;\n  const notLoaded = valueProvider(false);\n  const whenDone = supply.whenDone().then(notLoaded, notLoaded);\n\n  return Promise.race([\n    whenDone,\n    Promise\n        .all(\n            deps\n                .map(\n                    ({ dep, use }) => whenLoaded(use).then(\n                        noop,\n                        error => [dep, error] as const,\n                    ),\n                ),\n        )\n        .then(\n            (results): true | ContextModuleDependencyError => {\n\n              const failures = results.filter<readonly [ContextModule, unknown]>(isDefined);\n\n              return failures.length\n                  ? new ContextModuleDependencyError(module, failures) // Prevent unhandled promise rejection\n                  : true as const;\n            },\n        ),\n  ]).then(\n      result => {\n        if (typeof result !== 'boolean') {\n          // Fail to load module if at leas one of its dependencies failed.\n          return Promise.reject(result);\n        }\n\n        return result;\n      },\n  );\n}\n\nfunction whenContextModuleSettled(use: ContextModule.Use): OnEvent<[ContextModule.Status]> {\n  return use.whenSettled;\n}\n\nfunction whenContextModuleReady(use: ContextModule.Use): OnEvent<[ContextModule.Status]> {\n  return use.whenReady;\n}\n","import type { AfterEvent, EventKeeper, OnEvent } from '@proc7ts/fun-events';\nimport type { Supply, SupplyPeer } from '@proc7ts/supply';\nimport type { ContextValues } from '../../context-values';\nimport { ContextKey__symbol } from '../../key';\nimport type { ContextRegistry, ContextValueSpec } from '../../registry';\nimport { ContextBuilder, ContextBuilder__symbol } from '../../registry';\nimport type { ContextUpKey, ContextUpRef } from '../context-up-key';\nimport { ContextModule$, ContextModule$impl__symbol } from './context-module.impl';\n\n/**\n * Context module.\n *\n * Modules intended to extend the context dynamically.\n *\n * The module is a context value reference that can be used to provide module instance and access its\n * {@link ContextModule.Handle handle}.\n *\n * Usage example:\n * ```typescript\n * // Construct new module.\n * const myModule = new ContextModule('my module', {\n *   setup(setup) {\n *     // Provide the values\n *     setup.provide({ a: Foo, is: 'foo' });\n *   },\n * });\n *\n * // Load the module\n * const myModuleSupply = contextRegistry.provide(myModule);\n *\n * // Start using the module\n * const myModuleUse = await context.get(myModule).use();\n *\n * // Await for the module to load\n * await myModuleUse.whenReady;\n *\n * // Access the value provided by module.\n * console.log(context.get(Foo));\n *\n * // Stop using the module\n * myModuleUse.supply.off();\n *\n * // Unload the module declaration.\n * myModuleSupply.off();\n * ```\n */\nexport class ContextModule implements ContextUpRef<ContextModule.Handle, ContextModule>, ContextBuilder {\n\n  /**\n   * @internal\n   */\n  private readonly [ContextModule$impl__symbol]: ContextModule$;\n\n  /**\n   * Constructs context module.\n   *\n   * @param name - Human-readable module name.\n   * @param options - Module construction options.\n   */\n  constructor(name: string, options: ContextModule.Options = {}) {\n    this[ContextModule$impl__symbol] = new ContextModule$(this, name, options);\n  }\n\n  /**\n   * A key of context module.\n   */\n  get [ContextKey__symbol](): ContextUpKey<ContextModule.Handle, ContextModule> {\n    return this[ContextModule$impl__symbol].key;\n  }\n\n  /**\n   * Human-readable module name.\n   */\n  get name(): string {\n    return this[ContextModule$impl__symbol].name;\n  }\n\n  /**\n   * The modules this one requires.\n   *\n   * Assigned by {@link ContextModule.Options.needs} option.\n   */\n  get needs(): ReadonlySet<ContextModule> {\n    return this[ContextModule$impl__symbol].needs;\n  }\n\n  /**\n   * The modules this one provides.\n   *\n   * Assigned by {@link ContextModule.Options.has} option.\n   *\n   * Always contains the module itself.\n   */\n  get has(): ReadonlySet<ContextModule> {\n    return this[ContextModule$impl__symbol].has;\n  }\n\n  /**\n   * Provides this module and {@link has module replacements}.\n   */\n  [ContextBuilder__symbol](registry: ContextRegistry): Supply {\n\n    const supply = registry.provide({ a: this, is: this });\n\n    this[ContextModule$impl__symbol].replace(this, registry, supply);\n\n    return supply;\n  }\n\n  /**\n   * Sets up the module.\n   *\n   * This method is called when loading the module. It is used e.g. to provide more values for the context.\n   *\n   * By default:\n   *\n   * 1. Satisfies module {@link needs dependencies} by setting them up.\n   *\n   *    The dependency considered satisfied when it is {@link ContextModule.Status.settled settled}.\n   *\n   * 2. {@link ContextModule.Setup.initBy Initializes} the module by initializing the dependencies.\n   *\n   *    The dependency considered initialized when it is {@link ContextModule.Status.ready ready for use}.\n   *\n   * 3. Performs the module setup by invoking the {@link ContextModule.Options.setup} method.\n   *\n   * @param setup - Context module setup.\n   *\n   * @returns A promise resolved when the module is set up asynchronously.\n   */\n  setup(setup: ContextModule.Setup): Promise<void> {\n    return this[ContextModule$impl__symbol].setup(setup);\n  }\n\n  toString(): string {\n    return `ContextModule(${this.name})`;\n  }\n\n}\n\nexport namespace ContextModule {\n\n  /**\n   * Context module construction options.\n   */\n  export interface Options {\n\n    /**\n     * A module or modules the constructed one requires.\n     *\n     * The listed modules will be loaded prior to loading the constructed one.\n     */\n    readonly needs?: ContextModule | readonly ContextModule[];\n\n    /**\n     * A module or modules the constructed one provides.\n     *\n     * When specified, the constructed module will be loaded _instead_ of the listed ones.\n     *\n     * The module always provides itself.\n     */\n    readonly has?: ContextModule | readonly ContextModule[];\n\n    /**\n     * Sets up constructed module.\n     *\n     * This method is called when loading the module. It is used e.g. to provide more values for the context.\n     *\n     * @param setup - Context module setup.\n     *\n     * @returns Either nothing to set up the module synchronously, or a promise-like instance resolved when the module\n     * is set up asynchronously.\n     */\n    setup?(setup: ContextModule.Setup): void | PromiseLike<unknown>;\n\n  }\n\n  /**\n   * Context module setup.\n   *\n   * Passed to {@link ContextModule.setup module setup method} in order to access and provide the necessary values.\n   *\n   * @typeParam TCtx - Target context type.\n   */\n  export interface Setup extends ContextValues, SupplyPeer {\n\n    /**\n     * The module to set up.\n     */\n    readonly module: ContextModule;\n\n    /**\n     * Module supply.\n     *\n     * This supply will be cut off once the module is unloaded.\n     */\n    readonly supply: Supply;\n\n    /**\n     * Provides context value.\n     *\n     * The value provider will be removed automatically once the module is unloaded.\n     *\n     * @typeParam TSrc - Source value type.\n     * @typeParam TDeps - Dependencies tuple type.\n     * @param spec - Context value specifier.\n     *\n     * @returns Provider supply instance that removes just added context value provider once cut off.\n     */\n    provide<TSrc, TDeps extends any[]>(\n        spec: ContextValueSpec<ContextValues, unknown, TSrc, TDeps>,\n    ): Supply;\n\n    /**\n     * Registers the module initializer.\n     *\n     * The module initializer registration is only valid during its {@link ContextModule.setup setup}.\n     *\n     * The registered initializers executed after successful module {@link ContextModule.setup}. The modules\n     * is considered {@link ContextModule.Status.ready ready for use} only when all registered initializers succeed.\n     *\n     * The registered initializers executed serially. I.e. then next one does not start until the previous one succeeds.\n     *\n     * It is an error calling this method when the module initialized already.\n     *\n     * @param init - The module initialization function, that returns nothing when the module initialization\n     * completed synchronously, or a promise-like instance resolved when the module initialization completed\n     * asynchronously.\n     */\n    initBy(init: (this: void) => void | PromiseLike<unknown>): void;\n\n  }\n\n  /**\n   * A handle of dynamically loaded context module.\n   *\n   * This value is available in {@link ContextValues.get returned from context} under the module instance used as a key.\n   *\n   * Implements an `EventKeeper` interface by sending a {@link ContextModule.Status module load status} updates.\n   */\n  export interface Handle extends EventKeeper<[ContextModule.Status]> {\n\n    /**\n     * An `AfterEvent` keeper of module load status.\n     *\n     * The `[AfterEvent__symbol]` property is an alias of this one.\n     */\n    readonly read: AfterEvent<[ContextModule.Status]>;\n\n    /**\n     * Initiate the module use.\n     *\n     * @param user - Module user. Contains a supply required by {@link Use.supply module use supply}. The module use\n     * stops once the user supply is cut off.\n     *\n     * @returns A module usage instance.\n     */\n    use(user?: SupplyPeer): Use;\n\n  }\n\n  /**\n   * An instance of the module use.\n   *\n   * The module is active while it is in use. I.e. at least one `Use` instance exists and active.\n   *\n   * The use is active util its {@link supply} is cut off.\n   *\n   * The module use instance can be used as its handle too.\n   */\n  export interface Use extends Handle, SupplyPeer {\n\n    /**\n     * An `AfterEvent` keeper of module load status.\n     *\n     * The `[AfterEvent__symbol]` property is an alias of this one.\n     *\n     * Cuts off the supply when context module no longer {@link supply used}.\n     */\n    readonly read: AfterEvent<[ContextModule.Status]>;\n\n    /**\n     * An `OnEvent` sender of the module settlement event.\n     *\n     * Sends the {@link ContextModule.Status loaded module status} when it is {@link ContextModule.Status.settled\n     * settled}, but possibly before it is {@link ContextModule.Status.ready ready}.\n     *\n     * Cuts off the supply when context module {@link ContextModule.Status.error failed to load} or no longer\n     * {@link supply used}.\n     */\n    readonly whenSettled: OnEvent<[ContextModule.Status]>;\n\n    /**\n     * An `OnEvent` sender of the module readiness event.\n     *\n     * Sends the {@link ContextModule.Status loaded module status} when it is {@link ContextModule.Status.ready ready\n     * for use}.\n     *\n     * Cuts off the supply when context module {@link ContextModule.Status.error failed to load} or no longer\n     * {@link supply used}.\n     */\n    readonly whenReady: OnEvent<[ContextModule.Status]>;\n\n    /**\n     * Module use supply.\n     *\n     * The module use stops once this supply is cut off.\n     */\n    readonly supply: Supply;\n\n  }\n\n  /**\n   * Context module load status.\n   *\n   * This status is reported by {@link ContextModule.Handle loaded module handle}.\n   */\n  export interface Status {\n\n    /**\n     * Loaded module.\n     *\n     * Note that it may differ from the one requested to load. E.g. when another module {@link ContextModule.Options.has\n     * provides} it.\n     */\n    readonly module: ContextModule;\n\n    /**\n     * Whether the module implementation is provided.\n     */\n    readonly provided: boolean;\n\n    /**\n     * Whether the module is {@link Handle.use used} at least once.\n     */\n    readonly used: boolean;\n\n    /**\n     * Whether the module is settled.\n     *\n     * The module is settled when its {@link ContextModule.setup set up} is complete.\n     */\n    readonly settled: boolean;\n\n    /**\n     * Whether the module is loaded and ready for use.\n     *\n     * The module is ready when it is {@link settled}, and all of its {@link ContextModule.Setup.initBy initializers}\n     * succeed.\n     */\n    readonly ready: boolean;\n\n    /**\n     * Error occurred while loading the module.\n     */\n    readonly error?: unknown;\n\n  }\n\n}\n","import { eventReceiver, EventReceiver, OnEvent, OnEvent__symbol, onEventBy } from '@proc7ts/fun-events';\nimport { noop } from '@proc7ts/primitives';\nimport type { Supply } from '@proc7ts/supply';\n\n/**\n * DOM event listener.\n *\n * DOM events are never recurrent.\n *\n * May be constructed using {@link onDomEventBy} function.\n *\n * @typeParam TEvent - Supported DOM event type.\n */\nexport type DomEventListener<TEvent extends Event> = EventReceiver<[TEvent]>;\n\n/**\n * Signature of {@link EventSender} implementation able to register DOM event listeners.\n *\n * @typeParam TEvent - Supported DOM event type.\n */\nexport interface OnDomEvent<TEvent extends Event> extends OnEvent<[TEvent]> {\n\n  /**\n   * Starts sending DOM events to the given `listener`.\n   *\n   * @param listener - Target listener of DOM events.\n   * @param opts - DOM event listener options to pass to `EventTarget.addEventListener()`.\n   *\n   * @returns A supply of DOM events from this sender to the given `listener`.\n   */\n  (listener: DomEventListener<TEvent>, opts?: AddEventListenerOptions | boolean): Supply;\n\n}\n\n/**\n * @internal\n * @hidden\n */\nconst OnDomEvent$sample = (/*#__PURE__*/ onEventBy<any>(noop));\n\n/**\n * Converts a plain DOM event listener registration function to {@link OnDomEvent} sender.\n *\n * @typeParam TEvent - Supported DOM event type.\n * @param register - A generic DOM event listener registration function.\n *\n * @returns An {@link OnDomEvent} sender registering event listeners with the given `register` function.\n */\nexport function onDomEventBy<TEvent extends Event>(\n    register: (\n        this: void,\n        listener: EventReceiver.Generic<[TEvent]>,\n        opts?: AddEventListenerOptions | boolean,\n    ) => void,\n): OnDomEvent<TEvent> {\n\n  const onDomEvent = ((listener: DomEventListener<TEvent>, opts?: AddEventListenerOptions | boolean): Supply => {\n\n    const receiver = eventReceiver(listener);\n    const { supply } = receiver;\n\n    if (!supply.isOff) {\n      register(receiver, opts);\n    }\n\n    return supply;\n  }) as OnDomEvent<TEvent>;\n\n  onDomEvent[OnEvent__symbol] = OnDomEvent$sample[OnEvent__symbol];\n  onDomEvent.do = OnDomEvent$sample.do;\n  onDomEvent.then = OnDomEvent$sample.then;\n\n  return onDomEvent;\n}\n","import type { EventReceiver } from '@proc7ts/fun-events';\nimport { noop } from '@proc7ts/primitives';\nimport { Supply, SupplyPeer } from '@proc7ts/supply';\nimport { OnDomEvent, onDomEventBy } from './on-dom-event';\n\n/**\n * @internal\n * @hidden\n */\nconst OnDomEvent$context: EventReceiver.Context<any> = {\n  onRecurrent: noop,\n};\n\n/**\n * DOM event dispatcher can be used to register event listeners of particular event types and dispatch events.\n */\nexport class DomEventDispatcher implements SupplyPeer {\n\n  readonly supply: Supply = new Supply();\n\n  /**\n   * @internal\n   */\n  private readonly _target: EventTarget;\n\n  /**\n   * Constructs DOM event dispatcher for the given event target.\n   *\n   * @param target - Event target to construct event dispatcher for.\n   */\n  constructor(target: EventTarget) {\n    this._target = target;\n  }\n\n  /**\n   * Returns a sender of DOM events of the given `type`.\n   *\n   * The returned DOM event sender calls an `EventTarget.addEventListener()` to register listeners.\n   * But, in contrast, it allows to register the same listener many times.\n   *\n   * The {@link Supply event supply} returned upon event listener registration unregisters it with\n   * `EventTarget.removeEventListener()` once {@link Supply.off cut off}.\n   *\n   * @typeParam TEvent - Supported DOM event type.\n   * @param type - DOM event type name.\n   *\n   * @returns {@link OnDomEvent} sender of DOM events of the given `type`.\n   */\n  on<TEvent extends Event>(type: string): OnDomEvent<TEvent> {\n    return onDomEventBy<TEvent>((listener, opts) => {\n\n      const { supply } = listener;\n\n      supply.needs(this);\n\n      if (!supply.isOff) {\n\n        // Create unique DOM listener instance\n        const domListener: EventListener = event => listener.receive(OnDomEvent$context, event as TEvent);\n\n        this._target.addEventListener(type, domListener, opts);\n        listener.supply.whenOff(() => this._target.removeEventListener(type, domListener));\n      }\n    });\n  }\n\n  /**\n   * Dispatches the given DOM event to event target.\n   *\n   * Calls `EventTarget.dispatchEvent()` method.\n   *\n   * @param event - An event to dispatch.\n   *\n   * @returns `true` if either event's `cancelable` attribute value is `false` or its `preventDefault()` method was not\n   * invoked, or `false` otherwise. Also returns `false` when {@link supply} is cut off.\n   */\n  dispatch(event: Event): boolean {\n    return !this.supply.isOff && this._target.dispatchEvent(event);\n  }\n\n}\n","/**\n * Returns a document of the given DOM node.\n *\n * @param node - Source node.\n *\n * @returns Either an `ownerDocument`, or a node itself if it is a document.\n */\nexport function nodeDocument(node: Node): Document {\n  return node.ownerDocument || (node as Document);\n}\n","/**\n * Checks whether the given DOM node is an [element](https://developer.mozilla.org/en-US/docs/Web/API/Element).\n *\n * @param node - A node to check.\n *\n * @returns `true` for `Element`, or `false` everything else.\n */\nexport function isElementNode(node: Node): node is Element {\n  return node.nodeType === 1/* Node.ELEMENT_NODE */;\n}\n\n/**\n * Checks whether the given DOM node is an [attribute](https://developer.mozilla.org/en-US/docs/Web/API/Attr).\n *\n * @param node - A node to check.\n *\n * @returns `true` for `Attr`, or `false` everything else.\n */\nexport function isAttributeNode(node: Node): node is Attr {\n  return node.nodeType === 2/* Node.ATTRIBUTE_NODE */;\n}\n\n/**\n * Checks whether the given DOM node is a [text](https://developer.mozilla.org/en-US/docs/Web/API/Text).\n *\n * @param node - A node to check.\n *\n * @returns `true` for `Text`, or `false` everything else.\n */\nexport function isTextNode(node: Node): node is Text {\n  return node.nodeType === 3/* Node.TEXT_NODE */;\n}\n\n/**\n * Checks whether the given DOM node is a [CDATA section](https://developer.mozilla.org/en-US/docs/Web/API/CDATASection).\n *\n * @param node - A node to check.\n *\n * @returns `true` for `CDATASection`, or `false` everything else.\n */\nexport function isCDATASectionNode(node: Node): node is CDATASection {\n  return node.nodeType === 4/* Node.CDATA_SECTION_NODE */;\n}\n\n/**\n * Checks whether the given DOM node is a [processing instruction](https://developer.mozilla.org/en-US/docs/Web/API/ProcessingInstruction).\n *\n * @param node - A node to check.\n *\n * @returns `true` for `ProcessingInstruction`, or `false` everything else.\n */\nexport function isProcessingInstructionNode(node: Node): node is ProcessingInstruction {\n  return node.nodeType === 7/* Node.PROCESSING_INSTRUCTION_NODE */;\n}\n\n/**\n * Checks whether the given DOM node is a [comment](https://developer.mozilla.org/en-US/docs/Web/API/Comment).\n *\n * @param node - A node to check.\n *\n * @returns `true` for `Comment`, or `false` everything else.\n */\nexport function isCommentNode(node: Node): node is Comment {\n  return node.nodeType === 8/* Node.COMMENT_NODE */;\n}\n\n/**\n * Checks whether the given DOM node is a [document](https://developer.mozilla.org/en-US/docs/Web/API/Document).\n *\n * @param node - A node to check.\n *\n * @returns `true` for `Document`, or `false` everything else.\n */\nexport function isDocumentNode(node: Node): node is Document {\n  return node.nodeType === 9/* Node.DOCUMENT_NODE */;\n}\n\n/**\n * Checks whether the given DOM node is a [document type](https://developer.mozilla.org/en-US/docs/Web/API/DocumentType).\n *\n * @param node - A node to check.\n *\n * @returns `true` for `DocumentType`, or `false` everything else.\n */\nexport function isDocumentTypeNode(node: Node): node is DocumentType {\n  return node.nodeType === 10/* Node.DOCUMENT_TYPE_NODE */;\n}\n\n/**\n * Checks whether the given DOM node is a [document fragment](https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment).\n *\n * @param node - A node to check.\n *\n * @returns `true` for `DocumentFragment`, or `false` everything else.\n */\nexport function isDocumentFragmentNode(node: Node): node is DocumentFragment {\n  return node.nodeType === 11/* Node.DOCUMENT_FRAGMENT_NODE */;\n}\n\n/**\n * Checks whether the given DOM node is a [shadow root](https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot).\n *\n * Note that shadow root is a kind of {@link isDocumentFragmentNode document fragment}.\n *\n * @param node - A node to check.\n *\n * @returns `true` for `ShadowRoot`, or `false` everything else.\n */\nexport function isShadowRootNode(node: Node): node is ShadowRoot {\n  return isDocumentFragmentNode(node) && !!(node as Partial<ShadowRoot>).host;\n}\n","import { isElementNode } from './node-types';\n\n/**\n * Finds a host element of the given DOM node. I.e. an enclosing element.\n *\n * Crosses shadow DOM bounds.\n *\n * @param node - Target element.\n *\n * @returns Either parent element of the given node, or `undefined` when not found.\n */\nexport function nodeHost(node: Node): Element | undefined {\n\n  const { parentNode } = node;\n\n  return parentNode && isElementNode(parentNode) && parentNode\n      || (node.getRootNode() as Partial<ShadowRoot>).host// Inside shadow DOM?\n      || undefined;\n}\n","import type { RenderExecution, RenderShot } from './render-shot';\n\n/**\n * Render schedule signature.\n *\n * This function accepts a {@link RenderShot render shot} to schedule. All scheduled render shots are meant to update\n * the same rendering target. If multiple render shots scheduled before execution starts, only the last one will be\n * executed to limit rendering rate.\n *\n * The render shot execution may fail. This should not prevent other scheduled or postponed render shots from being\n * executed. The render shot execution failure reason is expected to be reported with {@link RenderScheduleConfig.error}\n * method.\n *\n * Render schedules are constructed by {@link RenderScheduler render schedulers}, or by {@link newRenderSchedule}\n * function that uses the {@link setRenderScheduler default scheduler} for that.\n *\n * @typeParam TExecution - A type of supported render shot execution context.\n */\nexport type RenderSchedule<TExecution extends RenderExecution = RenderExecution> =\n/**\n * @param shot - A render shot to schedule.\n */\n    (this: void, shot: RenderShot<TExecution>) => void;\n\n/**\n * Options for render schedule.\n *\n * This is passed to {@link RenderScheduler render scheduler} when constructing new {@link RenderSchedule schedule}.\n *\n * A {@link RenderScheduleConfig render configuration} can be constructed based on the options with\n * {@link RenderScheduleConfig.by} function.\n */\nexport interface RenderScheduleOptions {\n\n  /**\n   * A window for constructed schedule.\n   *\n   * Detected by {@link nodeWindow} by default, if {@link node} is specified. Falls back to current `window`.\n   *\n   * The schedulers that don't need a window never access this option value.\n   */\n  window?: Window;\n\n  /**\n   * A DOM node for constructed schedule.\n   *\n   * Used to detect missing {@link window} option.\n   */\n  node?: Node;\n\n  /**\n   * Reports an error. E.g. a render shot execution failure.\n   *\n   * Reports errors with `console.error()` by default.\n   *\n   * @param messages - Error messages to report.\n   */\n  error?(...messages: any[]): void;\n\n}\n\n/**\n * Render schedule configuration.\n *\n * This is based on {@link RenderScheduleOptions render options}, but has all properties present.\n *\n * The configuration ought to be constructed out of render options by {@link RenderScheduleConfig.by} function.\n */\nexport interface RenderScheduleConfig {\n\n  /**\n   * A window the schedule is constructed for.\n   *\n   * The schedulers that don't need a window should never access this option value.\n   */\n  window: Window;\n\n  /**\n   * A DOM node the schedule is constructed for.\n   */\n  node?: Node;\n\n  /**\n   * Reports an error. E.g. a render shot execution failure.\n   *\n   * @param messages - Error messages to report.\n   */\n  error(...messages: any[]): void;\n\n}\n\nexport const RenderScheduleConfig = {\n\n  /**\n   * Constructs a configuration of render scheduler by its options.\n   *\n   * @param options - Render scheduler options the configuration should be base on.\n   */\n  by(this: void, options: RenderScheduleOptions = {}): RenderScheduleConfig {\n\n    let win: Window | undefined;\n\n    return {\n      get node(): Node | undefined {\n        return options.node;\n      },\n      get window(): Window {\n        return win || (win = options.window || (options.node && nodeWindow(options.node)) || window);\n      },\n      error(...messages: any[]): void {\n        if (options && options.error) {\n          options.error(...messages);\n        } else {\n          console.error(...messages);\n        }\n      },\n    };\n  },\n\n};\n\n/**\n * Detects a window the given DOM node is attached to.\n *\n * @param node - Target DOM node.\n *\n * @returns A window of the owner document, or `null` if absent.\n */\nexport function nodeWindow(node: Node): Window | null {\n\n  const document = node.ownerDocument || node as Document;\n\n  return document.defaultView;\n}\n","import type { RenderQueue } from './render-queue';\nimport { RenderSchedule, RenderScheduleConfig, RenderScheduleOptions } from './render-schedule';\nimport type { RenderScheduler } from './render-scheduler';\nimport type { RenderExecution, RenderShot } from './render-shot';\n\n/**\n * Custom render scheduler options.\n *\n * This is passed to {@link customRenderScheduler} function to construct new custom scheduler.\n */\nexport interface CustomRenderSchedulerOptions {\n\n  /**\n   * Obtains a queue for render schedule.\n   *\n   * This is called once per render schedule.\n   *\n   * Render schedules may share the queue.\n   *\n   * @param config - Render schedule configuration.\n   *\n   * @returns  A queue of scheduled render shots.\n   */\n  newQueue(config: RenderScheduleConfig): RenderQueue;\n\n}\n\n/**\n * @internal\n */\nconst RenderQ__symbol = Symbol('render-q');\n\n/**\n * @internal\n */\ninterface InternalRenderQueue extends RenderQueue {\n  [RenderQ__symbol]?: RenderQ;\n}\n\n/**\n * @internal\n */\nclass RenderQ {\n\n  readonly ref: [RenderQ, RenderQ];\n  schedule: (this: RenderQ, config: RenderScheduleConfig) => void;\n  private scheduled?: RenderScheduleConfig;\n\n  static by(queue: InternalRenderQueue, ref?: [RenderQ, RenderQ]): RenderQ {\n    return queue[RenderQ__symbol]\n        || (queue[RenderQ__symbol] = new RenderQ(queue, ref));\n  }\n\n  private constructor(private readonly q: RenderQueue, ref?: [RenderQ, RenderQ]) {\n    this.schedule = this.doSchedule;\n    this.ref = ref || [this, this];\n  }\n\n  add(shot: RenderShot): void {\n    this.q.add(shot);\n  }\n\n  private doSchedule(config: RenderScheduleConfig): void {\n    this.schedule = () => {/* do not schedule */};\n\n    const postponed: RenderShot[] = [];\n    const execution: RenderExecution = {\n      get config() {\n        return config;\n      },\n      postpone(shot) {\n        postponed.unshift(shot);\n      },\n    };\n\n    this.q.schedule(() => {\n\n      const next = this.reset();\n\n      next.suspend();\n      this.exec(execution);\n      // Activate next queue\n      this.ref[1] = this.ref[0];\n      // Schedule postponed shots (in reverse order)\n      postponed.forEach(shot => this.q.add(shot));\n      // Recurrently postponed shots are executed immediately after their initiators\n      execution.postpone = shot => this.q.post(shot);\n      this.exec(execution);\n      next.resume();\n    });\n  }\n\n  private exec(execution: RenderExecution): void {\n    for (; ;) {\n\n      const shot = this.q.pull();\n\n      if (!shot) {\n        break;\n      }\n      shot(execution);\n    }\n  }\n\n  private reset(): RenderQ {\n    // Update next queue. Current queue remains active\n    return this.ref[0] = RenderQ.by(this.q.reset(), this.ref);\n  }\n\n  private suspend(): void {\n    this.schedule = config => {\n      this.scheduled = config;\n      this.schedule = () => {/* do not schedule */};\n    };\n  }\n\n  private resume(): void {\n    if (this.scheduled) {\n      this.doSchedule(this.scheduled);\n    } else {\n      this.schedule = this.doSchedule;\n    }\n  }\n\n}\n\n/**\n * Builds custom render scheduler.\n *\n * @param options - Render scheduler options.\n *\n * @returns New render scheduler.\n */\nexport function customRenderScheduler(\n    options: CustomRenderSchedulerOptions,\n): RenderScheduler {\n  return (scheduleOptions?: RenderScheduleOptions): RenderSchedule => {\n\n    const config = RenderScheduleConfig.by(scheduleOptions);\n    const queueRef: readonly [RenderQ, RenderQ] = RenderQ.by(options.newQueue(config)).ref;\n    let enqueued: [RenderQ, RenderShot, true?] | [] = [];\n\n    return (shot: RenderShot): void => {\n\n      const [lastQueue,, executed] = enqueued;\n      const [nextQueue, activeQueue] = queueRef;\n      let queue = lastQueue || activeQueue;\n\n      if (lastQueue === activeQueue && !executed || lastQueue === nextQueue) {\n        enqueued[1] = shot;\n      } else {\n\n        // Add to active queue initially, unless a shot executed in it already.\n        // Add to the next queue otherwise.\n        const nextEnqueued: [RenderQ, RenderShot, true?] = enqueued = [\n          queue = executed ? nextQueue : activeQueue,\n          shot,\n        ];\n\n        queue.add((execution: RenderExecution) => {\n          nextEnqueued[2] = true; // Switch to next queue\n          try {\n            nextEnqueued[1]({\n              get config() {\n                return config;\n              },\n              postpone(postponed) {\n                execution.postpone(postponed);\n              },\n            });\n          } catch (e) {\n            config.error(e);\n          }\n        });\n      }\n\n      queue.schedule(config);\n    };\n  };\n}\n","import type { RenderShot } from './render-shot';\n\n/**\n * A queue of scheduled render shots.\n *\n * Utilized by render scheduler in order to collect render shots and schedule their execution.\n *\n * The default implementation may be constructed using {@link RenderQueue.by} function.\n */\nexport interface RenderQueue {\n\n  /**\n   * Adds a render shot to this queue.\n   *\n   * @param shot - Scheduled render shot to add.\n   */\n  add(shot: RenderShot): void;\n\n  /**\n   * Adds a render shot to the head of this queue.\n   *\n   * @param shot - Scheduled render shot to add.\n   */\n  post(shot: RenderShot): void;\n\n  /**\n   * Retrieves the first added render shot and removes it from the queue.\n   *\n   * @returns  Either pulled out render shot, or `undefined` when there is no more render shots.\n   */\n  pull(): RenderShot | undefined;\n\n  /**\n   * Schedules queued render shots execution.\n   *\n   * @param task - A function that performs render shots execution task.\n   */\n  schedule(task: (this: void) => void): void;\n\n  /**\n   * Resets the queue for the next execution.\n   *\n   * @returns  Another (empty) queue that will collect scheduled render shots from now on.\n   */\n  reset(): RenderQueue;\n\n}\n\nexport const RenderQueue = {\n\n  /**\n   * Builds the default implementation of render queue.\n   *\n   * @param schedule - Schedules queued render shots execution. This is an implementation of\n   * {@link RenderQueue.schedule} method.\n   * @param replace - Called right after {@link RenderQueue.reset} method in order to inform on the queue that will\n   * collect scheduled render shots from now.\n   *\n   * @returns New render queue.\n   */\n  by(\n      this: void,\n      {\n        schedule,\n        replace = (): void => {/* do not replace */},\n      }: {\n        schedule(this: RenderQueue, task: (this: void) => void): void;\n        replace?(this: void, replacement: RenderQueue): void;\n      },\n  ): RenderQueue {\n\n    const shots: RenderShot[] = [];\n\n    return {\n      schedule,\n      add(shot: RenderShot): void {\n        shots.push(shot);\n      },\n      post(shot: RenderShot): void {\n        shots.unshift(shot);\n      },\n      pull(): RenderShot | undefined {\n        return shots.shift();\n      },\n      reset(): RenderQueue {\n\n        const next = RenderQueue.by({ schedule, replace });\n\n        replace(next);\n\n        return next;\n      },\n    };\n  },\n\n};\n","import { customRenderScheduler } from './custom-render-scheduler';\nimport { RenderQueue } from './render-queue';\nimport type { RenderScheduler } from './render-scheduler';\n\n/**\n * @internal\n */\nconst animationRenderQueues = (/*#__PURE__*/ new WeakMap<Window, RenderQueue>());\n\n/**\n * A render scheduler that executes scheduled render shots within animation frame.\n *\n * Utilizes [requestAnimationFrame()] function for that.\n *\n * The render shots scheduled by different schedules created for the same window are all executed in the same animation\n * frame. The {@link RenderExecution.postpone postponed} render shots are executed only after all scheduled ones\n * complete.\n *\n * [requestAnimationFrame()]: https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame\n */\nexport const animationRenderScheduler: RenderScheduler = (/*#__PURE__*/ customRenderScheduler({\n  newQueue({ window }) {\n\n    const existing = animationRenderQueues.get(window);\n\n    if (existing) {\n      return existing;\n    }\n\n    const newQueue = RenderQueue.by({\n      schedule: task => window.requestAnimationFrame(task),\n      replace: replacement => animationRenderQueues.set(window, replacement),\n    });\n\n    animationRenderQueues.set(window, newQueue);\n\n    return newQueue;\n  },\n}));\n","import { RenderSchedule, RenderScheduleConfig, RenderScheduleOptions } from './render-schedule';\nimport type { RenderScheduler } from './render-scheduler';\nimport type { RenderExecution, RenderShot } from './render-shot';\n\n/**\n * Render scheduler that executes render shots immediately.\n *\n * @param options\n */\nexport const immediateRenderScheduler: RenderScheduler = (options?: RenderScheduleOptions): RenderSchedule => {\n\n  const config = RenderScheduleConfig.by(options);\n\n  return (shot: RenderShot): void => {\n\n    const postponed: RenderShot[] = [];\n    const execution: RenderExecution = {\n      get config() {\n        return config;\n      },\n      postpone(shot) {\n        postponed.push(shot);\n      },\n    };\n\n    execute(shot);\n    for (; ;) {\n\n      const last = postponed.pop();\n\n      if (!last) {\n        break;\n      }\n\n      execute(last);\n    }\n\n    function execute(shot: RenderShot): void {\n      try {\n        shot(execution);\n      } catch (e) {\n        config.error(e);\n      }\n    }\n  };\n};\n","import { customRenderScheduler } from './custom-render-scheduler';\nimport { RenderQueue } from './render-queue';\nimport type { RenderScheduler } from './render-scheduler';\n\n/**\n * @internal\n */\nlet immediateRenderQueue = (/*#__PURE__*/ RenderQueue.by({\n  schedule: task => task(),\n  replace: replacement => immediateRenderQueue = replacement,\n}));\n\n/**\n * A render scheduler that schedules render shots for immediate execution.\n *\n * In contrast to {@link immediateRenderScheduler} this one utilizes {@link RenderQueue render queue}. So it acts\n * similarly to other schedulers, such as {@link animationRenderScheduler}. In particular, it adds recurrent\n * render shots to render queue instead of executing them immediately.\n */\nexport const queuedRenderScheduler: RenderScheduler = (/*#__PURE__*/ customRenderScheduler({\n  newQueue: () => immediateRenderQueue,\n}));\n","import { animationRenderScheduler } from './animation-render-scheduler';\nimport type { RenderSchedule, RenderScheduleOptions } from './render-schedule';\nimport type { RenderExecution } from './render-shot';\n\n/**\n * Render scheduler signature.\n *\n * This function constructs a {@link RenderSchedule render schedule} according to the given options.\n *\n * The default render scheduler is always available as {@link newRenderSchedule} function.\n *\n * There are several scheduler implementations exist:\n * - {@link animationRenderScheduler} (used by default),\n * - {@link asyncRenderScheduler},\n * - {@link immediateRenderScheduler},\n * - {@link queuedRenderScheduler},\n * - {@link ManualRenderScheduler},\n * - {@link noopRenderScheduler}.\n *\n * Custom scheduler implementations could be created using {@link customRenderScheduler} function.\n *\n * @typeParam TExecution - A type of supported render shot execution context.\n */\nexport type RenderScheduler<TExecution extends RenderExecution = RenderExecution> =\n/**\n * @param options - Options of constructed render schedule.\n *\n * @returns New render schedule.\n */\n    (this: void, options?: RenderScheduleOptions) => RenderSchedule<TExecution>;\n\n/**\n * @internal\n */\nlet defaultRenderScheduler = animationRenderScheduler;\n\n/**\n * Assigns or resets the default render scheduler.\n *\n * An {@link animationRenderScheduler animation frame render scheduler} is used bu default.\n *\n * @param scheduler - New default render scheduler. {@link animationRenderScheduler animation frame render scheduler}\n * will be used if `null`, `undefined`, or omitted.\n *\n * @returns New default render scheduler.\n */\nexport function setRenderScheduler(\n    scheduler?: RenderScheduler | null,\n): RenderScheduler {\n  return defaultRenderScheduler = scheduler || animationRenderScheduler;\n}\n\n/**\n * Constructs {@link RenderSchedule render schedule} using {@link setRenderScheduler default render scheduler}.\n *\n * @param options - Options of constructed render schedule.\n *\n * @returns New render schedule.\n */\nexport function newRenderSchedule(options?: RenderScheduleOptions): RenderSchedule {\n  return defaultRenderScheduler(options);\n}\n","import { AfterEvent, onceOn, OnEvent, onEventBy } from '@proc7ts/fun-events';\nimport { valueProvider } from '@proc7ts/primitives';\nimport { DrekContentStatus } from './content-status';\nimport { DrekPlacement } from './placement';\n\n/**\n * @internal\n */\nexport const DrekPlacement$Status__symbol = (/*#__PURE__*/ Symbol('DrekPlacement.status'));\n\n/**\n * @internal\n */\nexport class DrekPlacement$Status<TStatus extends [DrekContentStatus]> {\n\n  constructor(readonly placement: DrekPlacement<TStatus>) {\n  }\n\n  onceConnected(): OnEvent<TStatus> {\n    return (this.onceConnected = valueProvider(this.placement.readStatus.do(\n        DrekPlacement$once<TStatus>(({ connected }) => connected),\n    )))();\n  }\n\n  whenConnected(): OnEvent<TStatus> {\n    return (this.whenConnected = valueProvider(this.onceConnected().do(\n        onceOn,\n    )))();\n  }\n\n}\n\nfunction DrekPlacement$once<TStatus extends [DrekContentStatus]>(\n    test: (...status: TStatus) => boolean,\n): (input: AfterEvent<TStatus>) => OnEvent<TStatus> {\n  return input => onEventBy(receiver => {\n\n    let value = false;\n\n    input({\n      supply: receiver.supply,\n      receive(eventCtx, ...status) {\n\n        const newValue = test(...status);\n\n        if (newValue || value !== newValue) {\n          value = newValue;\n          receiver.receive(eventCtx, ...status);\n        }\n      },\n    });\n  });\n}\n","import { AfterEvent, AfterEvent__symbol, EventKeeper, OnEvent } from '@proc7ts/fun-events';\nimport { DrekContentStatus } from './content-status';\nimport { DrekPlacement$Status, DrekPlacement$Status__symbol } from './placement.status.impl';\n\n/**\n * A rendered content placement.\n *\n * @typeParam TStatus - A type of the tuple containing a rendered content status as its first element.\n */\nexport abstract class DrekPlacement<TStatus extends [DrekContentStatus] = [DrekContentStatus]>\n    implements EventKeeper<TStatus> {\n\n  /**\n   * An `AfterEvent` keeper of content placement status.\n   */\n  abstract readonly readStatus: AfterEvent<TStatus>;\n\n  /**\n   * @internal\n   */\n  private readonly [DrekPlacement$Status__symbol]: DrekPlacement$Status<TStatus>;\n\n  constructor() {\n    this[DrekPlacement$Status__symbol] = new DrekPlacement$Status(this);\n  }\n\n  /**\n   * An alias of {@link readStatus}.\n   *\n   * @returns An `AfterEvent` keeper of content placement status.\n   */\n  [AfterEvent__symbol](): AfterEvent<TStatus> {\n    return this.readStatus;\n  }\n\n  /**\n   * An `OnEvent` sender of placed content connection event.\n   *\n   * The registered receiver is called when placed content is {@link DrekContentStatus.connected connected}.\n   * If connected already the receiver is called immediately.\n   */\n  get onceConnected(): OnEvent<TStatus> {\n    return this[DrekPlacement$Status__symbol].onceConnected();\n  }\n\n  /**\n   * An `OnEvent` sender of single placed content connection event.\n   *\n   * The registered receiver is called when placed content is {@link DrekContentStatus.connected connected}.\n   * If connected already the receiver is called immediately.\n   *\n   * In contrast to {@link onceConnected}, cuts off the event supply after sending the first event.\n   */\n  get whenConnected(): OnEvent<TStatus> {\n    return this[DrekPlacement$Status__symbol].whenConnected();\n  }\n\n}\n","import type { NamespaceAliaser } from '@frontmeans/namespace-aliaser';\nimport type { RenderScheduler } from '@frontmeans/render-scheduler';\nimport { OnEvent } from '@proc7ts/fun-events';\nimport { DrekContentStatus } from './content-status';\nimport { DrekPlacement } from './placement';\n\n/**\n * Document rendering context.\n *\n * Can be obtained by {@link drekContextOf} function, or constructed by {@link DrekFragment rendered fragment}.\n *\n * @typeParam TStatus - A type of the tuple containing a context content status as its first element.\n */\nexport abstract class DrekContext<TStatus extends [DrekContentStatus] = [DrekContentStatus]>\n    extends DrekPlacement<TStatus> {\n\n  /**\n   * The window this context belongs to.\n   */\n  abstract readonly window: Window;\n\n  /**\n   * The document this context belongs to.\n   */\n  abstract readonly document: Document;\n\n  /**\n   * Namespace aliaser to use.\n   */\n  abstract readonly nsAlias: NamespaceAliaser;\n\n  /**\n   * Render scheduler to use.\n   */\n  abstract readonly scheduler: RenderScheduler;\n\n  /**\n   * An `OnEvent` sender of a settlement event.\n   *\n   * Such event can be sent by {@link DrekFragment.settle rendered fragment}.\n   *\n   * The same as {@link whenConnected} by default.\n   *\n   * Cuts off the event supply after sending the first event.\n   */\n  get whenSettled(): OnEvent<TStatus> {\n    return this.whenConnected;\n  }\n\n  /**\n   * Tries to lift this rendering context to enclosing one.\n   *\n   * This is only meaningful for context attached to disconnected DOM node by {@link drekContextOf} function.\n   *\n   * Tries to find new root node. If the new root differs from current one, then {@link drekContextOf finds} a context\n   * of that new root and connects the status of this context to the found one.\n   *\n   * This has no effect for document rendering context and for {@link DrekFragment rendered fragments}.\n   *\n   * @returns Either a rendering context of the new root node, or this one.\n   */\n  abstract lift(): DrekContext;\n\n}\n\nexport namespace DrekContext {\n\n  /**\n   * Updatable document rendering context.\n   */\n  export interface Updatable extends DrekContext {\n\n    /**\n     * Updates this context.\n     *\n     * @param update - An update to apply to this context.\n     *\n     * @returns `this` instance.\n     */\n    update(update?: Update): this;\n\n  }\n\n  /**\n   * An update to rendering context.\n   */\n  export interface Update {\n\n    /**\n     * Namespace aliaser to use.\n     *\n     * The aliaser is not updated when omitted.\n     */\n    readonly nsAlias?: NamespaceAliaser;\n\n    /**\n     * Render scheduler to use.\n     *\n     * The scheduler is not updated when omitted.\n     */\n    readonly scheduler?: RenderScheduler;\n\n  }\n\n}\n","import { NamespaceAliaser } from '@frontmeans/namespace-aliaser';\nimport { RenderScheduler } from '@frontmeans/render-scheduler';\nimport { DrekContext } from './context';\n\n/**\n * @internal\n */\nexport const DrekContext__symbol = (/*#__PURE__*/ Symbol('DrekContext'));\n\n/**\n * @internal\n */\nexport type DrekContext$Holder<T> = T & {\n\n  [DrekContext__symbol]?: DrekContext;\n\n};\n\n/**\n * @internal\n */\nexport class DrekContext$State {\n\n  _nsAlias: NamespaceAliaser;\n  readonly nsAlias: NamespaceAliaser;\n\n  _scheduler: RenderScheduler;\n  readonly scheduler: RenderScheduler;\n\n  constructor({ nsAlias, scheduler }: Required<DrekContext.Update>) {\n    this._nsAlias = nsAlias;\n    this.nsAlias = ns => this._nsAlias(ns);\n\n    this._scheduler = scheduler;\n    this.scheduler = options => {\n\n      let scheduler = this._scheduler;\n      let schedule = scheduler(options);\n\n      return shot => {\n        if (scheduler !== this._scheduler) {\n          scheduler = this._scheduler;\n          schedule = scheduler(options);\n        }\n        return schedule(shot);\n      };\n    };\n  }\n\n  set({ nsAlias, scheduler }: Required<DrekContext.Update>): void {\n    this._nsAlias = nsAlias;\n    this._scheduler = scheduler;\n  }\n\n}\n","import { NamespaceAliaser, newNamespaceAliaser } from '@frontmeans/namespace-aliaser';\nimport {\n  newRenderSchedule,\n  RenderSchedule,\n  RenderScheduleOptions,\n  RenderScheduler,\n} from '@frontmeans/render-scheduler';\nimport { AfterEvent, afterThe } from '@proc7ts/fun-events';\nimport { DrekContentStatus } from './content-status';\nimport { DrekContext } from './context';\nimport { DrekContext$Holder, DrekContext$State, DrekContext__symbol } from './context.impl';\n\n/**\n * @internal\n */\nexport function DrekContext$ofDocument(document: DrekContext$Holder<Document>): DrekContext.Updatable {\n\n  const existing = document[DrekContext__symbol] as DrekContext$OfDocument | undefined;\n\n  if (existing) {\n    return existing;\n  }\n\n  const state = new DrekContext$State({\n    nsAlias: newNamespaceAliaser(),\n    scheduler: newRenderSchedule,\n  });\n\n  const view = document.defaultView || window;\n  const scheduler = (\n      options?: RenderScheduleOptions,\n  ): RenderSchedule => state.scheduler({\n    window: view,\n    ...options,\n  });\n  const readStatus = afterThe<[DrekContentStatus]>({ connected: true });\n\n  class DrekContext$OfDocument extends DrekContext implements DrekContext.Updatable {\n\n    get window(): Window {\n      return view;\n    }\n\n    get document(): Document {\n      return document;\n    }\n\n    get nsAlias(): NamespaceAliaser {\n      return state.nsAlias;\n    }\n\n    get scheduler(): RenderScheduler {\n      return scheduler;\n    }\n\n    get readStatus(): AfterEvent<[DrekContentStatus]> {\n      return readStatus;\n    }\n\n    lift(): this {\n      return this;\n    }\n\n    update(\n        {\n          nsAlias = state._nsAlias,\n          scheduler = state._scheduler,\n        }: DrekContext.Update,\n    ): this {\n      state.set({ nsAlias, scheduler });\n      return this;\n    }\n\n  }\n\n  return document[DrekContext__symbol] = new DrekContext$OfDocument();\n}\n","import { isDocumentNode } from '@frontmeans/dom-primitives';\nimport { NamespaceAliaser } from '@frontmeans/namespace-aliaser';\nimport { RenderScheduler } from '@frontmeans/render-scheduler';\nimport { AfterEvent, EventEmitter, OnEvent, trackValue } from '@proc7ts/fun-events';\nimport { DrekContentStatus } from './content-status';\nimport { DrekContext } from './context';\nimport { DrekContext$Holder, DrekContext$State, DrekContext__symbol } from './context.impl';\nimport { DrekContext$ofDocument } from './context.of-document.impl';\n\n/**\n * Obtains a updatable a rendering context of the given document.\n *\n * @param document - Target document.\n *\n * @returns Updatable document rendering context.\n */\nexport function drekContextOf(document: Document): DrekContext.Updatable;\n\n/**\n * Obtains a rendering context of the given node.\n *\n * If the node is connected to document, the rendering context is the one of the document. Otherwise, if the node\n * belongs to the {@link DrekFragment rendering fragment}, then the latter is used. Otherwise, a new context is created\n * and attached to the node root. The latter does not track a document connection automatically.\n * A {@link DrekContext.expand} method could be used to track the connection status manually.\n *\n * @param node - Target node.\n *\n * @returns Target node rendering context.\n */\nexport function drekContextOf(node: Node): DrekContext;\n\nexport function drekContextOf(node: Node): DrekContext {\n  for (;;) {\n\n    const root = node.getRootNode({ composed: true });\n\n    if (root === node) {\n      return DrekContext$ofRoot(node);\n    }\n\n    node = root;\n  }\n}\n\nfunction DrekContext$ofRoot(root: DrekContext$Holder<Node>): DrekContext {\n  return isDocumentNode(root) ? DrekContext$ofDocument(root) : DrekContext$ofRootNode(root);\n}\n\nfunction DrekContext$ofRootNode(root: DrekContext$Holder<Node>): DrekContext {\n\n  const existing = root[DrekContext__symbol];\n\n  if (existing) {\n    return existing.lift();\n  }\n\n  const status = trackValue<DrekContentStatus>({ connected: false });\n  const settled = new EventEmitter<[DrekContentStatus]>();\n  let derivedCtx: DrekContext = DrekContext$ofDocument(\n      root.ownerDocument! /* Not a document, so `ownerDocument` is set */,\n  );\n  const scheduler = new DrekContext$State(derivedCtx);\n  let lift = (ctx: DrekContext): DrekContext => {\n\n    const newRoot = root.getRootNode({ composed: true });\n\n    if (newRoot === root) {\n      return ctx;\n    }\n\n    const lifted = DrekContext$ofRoot(newRoot);\n\n    root[DrekContext__symbol] = undefined;\n    scheduler.set(lifted);\n    lifted.whenSettled(status => settled.send(status)).cuts(settled);\n    status.by(lifted);\n    lift = _ctx => lifted;\n    derivedCtx = lifted;\n\n    return lifted;\n  };\n\n  class DrekContext$OfRootNode extends DrekContext {\n\n    get window(): Window {\n      return derivedCtx.window;\n    }\n\n    get document(): Document {\n      return derivedCtx.document;\n    }\n\n    get nsAlias(): NamespaceAliaser {\n      return derivedCtx.nsAlias;\n    }\n\n    get scheduler(): RenderScheduler {\n      return scheduler.scheduler;\n    }\n\n    get readStatus(): AfterEvent<[DrekContentStatus]> {\n      return status.read;\n    }\n\n    get whenSettled(): OnEvent<[DrekContentStatus]> {\n      return settled.on;\n    }\n\n    lift(): DrekContext {\n      return lift(this);\n    }\n\n  }\n\n  return root[DrekContext__symbol] = new DrekContext$OfRootNode();\n}\n","import { css__naming, QualifiedName } from '@frontmeans/namespace-aliaser';\nimport { Supply, SupplyPeer } from '@proc7ts/supply';\nimport { DrekContext } from '../context';\nimport { drekContextOf } from '../context-of';\n\n/**\n * An accessor to CSS classes of some element.\n *\n * Can be obtained by {@link drekCssClassesOf} function.\n */\nexport interface DrekCssClasses {\n\n  /**\n   * Adds CSS class to target element.\n   *\n   * The same CSS class can be supplied multiple times. In this case the class would be removed when no more suppliers\n   * left.\n   *\n   * Utilizes a {@link DrekContext.nsAlias namespace aliaser} of element rendering context for resolving class names.\n   *\n   * {@link DrekContext.scheduler Schedules} element CSS updates via element rendering context.\n   *\n   * @param className - CSS class name to add. Either a string or qualified one.\n   * @param user - A supply peer of the CSS class. When specified, its supply us returned from the method call.\n   *\n   * @returns Added CSS class supply that removes the class once cut off, unless there are other supplies of the same\n   * class.\n   */\n  add(className: QualifiedName, user?: SupplyPeer): Supply;\n\n  /**\n   * Checks whether the target element has the given CSS class.\n   *\n   * @param className - CSS class name to check. Either a string or qualified one.\n   *\n   * @returns `true` if the target element has this class, or `false` otherwise.\n   */\n  has(className: QualifiedName): boolean;\n\n  /**\n   * Obtains CSS classes accessor using different rendering context.,\n   *\n   * @param context - A rendering context to use instead of the {@link drekContextOf default one}.\n   *\n   * @returns Either new CSS classes accessor instance, or `this` one if context is the same.\n   */\n  renderIn(context: DrekContext): DrekCssClasses;\n\n}\n\nconst DrekCssClasses__symbol = (/*#__PURE__*/ Symbol('DrekCssClasses'));\n\ninterface DrekCssClasses$Holder extends Element {\n  [DrekCssClasses__symbol]?: DrekCssClasses$;\n}\n\n/**\n * Obtains CSS classes of the given element.\n *\n * @param element - Target element.\n *\n * @returns CSS classes accessor, either already existing or newly created one.\n */\nexport function drekCssClassesOf(element: Element): DrekCssClasses;\n\nexport function drekCssClassesOf(element: DrekCssClasses$Holder): DrekCssClasses {\n  return element[DrekCssClasses__symbol]\n      || (element[DrekCssClasses__symbol] = new DrekCssClasses$(element));\n}\n\nclass DrekCssClasses$ implements DrekCssClasses {\n\n  private readonly _context: DrekContext;\n  private readonly _counters = new Map<string, DrekCssClasses$Counter>();\n\n  constructor(private readonly _element: Element) {\n    this._context = drekContextOf(_element);\n  }\n\n  add(className: QualifiedName, user?: SupplyPeer): Supply {\n    return this._add(this._context, className, user);\n  }\n\n  private _add(\n      {\n        nsAlias,\n        scheduler,\n      }: DrekContext,\n      className: QualifiedName,\n      user?: SupplyPeer,\n  ): Supply {\n\n    const supply = user ? user.supply : new Supply();\n\n    if (supply.isOff) {\n      return supply;\n    }\n\n    const name = css__naming.name(className, nsAlias);\n    const schedule = scheduler({ node: this._element });\n\n    let counter = this._counters.get(name);\n    let delta: number;\n\n    if (!counter) {\n      counter = {\n        n: delta = this._element.classList.contains(name) ? -1 : 1,\n        s: 0,\n      };\n      this._counters.set(name, counter);\n    } else if (counter.n > 0) {\n      delta = 1;\n      ++counter.n;\n    } else {\n      delta = -1;\n      --counter.n;\n    }\n\n    schedule(() => {\n      if (!supply.isOff) {\n        this._element.classList.add(name);\n        counter!.s = 1;\n      }\n    });\n\n    return supply.whenOff(() => {\n      if (!(counter!.n -= delta)) {\n        this._counters.delete(name);\n        if (counter!.s && delta > 0) {\n          // Do not remove the class if it is not added or present initially.\n          schedule(() => {\n            this._element.classList.remove(name);\n          });\n        }\n      }\n    });\n  }\n\n  has(className: QualifiedName): boolean {\n    return this._has(this._context, className);\n  }\n\n  private _has({ nsAlias }: DrekContext, className: QualifiedName): boolean {\n\n    const name = css__naming.name(className, nsAlias);\n\n    return this._counters.has(name) || this._element.classList.contains(name);\n  }\n\n  renderIn(context: DrekContext): DrekCssClasses {\n    return context !== this._context\n        ? {\n          add: className => this._add(context, className),\n          has: className => this._has(context, className),\n          renderIn: newContext => this.renderIn(newContext),\n        }\n        : this;\n  }\n\n}\n\ninterface DrekCssClasses$Counter {\n  n: number;  // number of suppliers\n  s: 0 | 1;   // actually set\n}\n","/**\n * Escapes CSS identifier accordingly to the rules defined for [CSS.escape()](https://drafts.csswg.org/cssom/#the-css.escape%28%29-method)\n * utility method.\n *\n * Can be applied to CSS values as well, although it escapes characters that don't strictly need to be escaped.\n * A {@link escapeCSSVal} is a better alternative for that.\n *\n * @param text - A text to escape.\n *\n * @returns A string safe to be used as CSS identifier, e.g. as CSS selector.\n */\nexport function escapeCSS(text: string): string {\n\n  const len = text.length;\n  const first = text.charCodeAt(0);\n  let out = '';\n  let i = 0;\n\n  if (first === 0x2d) {\n    // If the first character is a \"-\" (U+002D)\n\n    const second = text.charCodeAt(1);\n\n    // ... and the second character is in the range [0-9] (U+0030 to U+0039).\n    if (second > 0x2f && second < 0x3a) {\n      // then '-' followed by the character escaped as code point.\n      out += `-\\\\${second.toString(16)} `;\n      i = 2;\n    } else {\n      out = '-';\n      i = 1;\n    }\n\n    if (len === 1) {\n      // ... and there is no second character, then the escaped character.\n      return '\\\\-';\n    }\n  } else if (first > 0x2f && first < 0x3a) {\n    // If the first character is in the range [0-9] (U+0030 to U+0039),\n    // then the character escaped as code point.\n    out += `\\\\${first.toString(16)} `;\n    i = 1;\n  }\n\n  for (; i < len; ++i) {\n\n    const c = text.charCodeAt(i);\n\n    if (\n        // Is in range [a-z] (U+0061 to U+007A),\n        (c > 0x60 && c < 0x7b)\n        // or is \"-\" (U+002D),\n        || c === 0x2d\n        // or is \"_\" (U+005F)\n        || c === 0x5f\n        // or is in range [0-9] (U+0030 to U+0039),\n        || (c > 0x2f && c < 0x3a)\n        // or is in range [A-Z] (U+0041 to U+005A)\n        || (c > 0x40 && c < 0x5b)\n    ) {\n      // then the character itself.\n      out += text[i];\n    } else if (c > 0x7e) {\n      out += c === 0x7f\n          // If the character is U+007F\n          // then the character escaped as code point.\n          ? `\\\\${c.toString(16)} `\n          // If the character is greater than or equal to U+0080,\n          // then the character itself\n          : text[i];\n    } else if (c < 0x20) {\n      out += c\n          // If the character is in the range [\\1-\\1f] (U+0001 to U+001F)\n          // then the character escaped as code point.\n          ? `\\\\${c.toString(16)} `\n          // If the character is NULL (U+0000)\n          // then the REPLACEMENT CHARACTER (U+FFFD).\n          : '\\uFFFD';\n    } else {\n      // Otherwise, the escaped character.\n      out += `\\\\${text[i]}`;\n    }\n  }\n\n  return out;\n}\n","/**\n * Escapes CSS value to be included into CSS string.\n *\n * Escapes accordingly to [serialize a string] algorithm.\n *\n * [serialize a string]: https://drafts.csswg.org/cssom/#serialize-a-string\n *\n * @param text - A text to escape.\n *\n * @returns A string safe to be included into CSS value, e.g. within CSS string.\n */\nexport function escapeCSSVal(text: string): string {\n\n  let out = '';\n  const len = text.length;\n\n  for (let i = 0; i < len; ++i) {\n\n    const c = text.charCodeAt(i);\n\n    out += c < 0x20 || c === 0x7f\n        ? (c\n                // If the character is in the range [\\1-\\1f] (U+0001 to U+001F),\n                // the character escaped as code point.\n                ? `\\\\${c.toString(16)} `\n                // If the character is NULL (U+0000), then the REPLACEMENT CHARACTER (U+FFFD).;\n                : '\\uFFFD'\n        )\n        : (c === 0x22 || c === 0x5c\n                // If the character is '\"' (U+0022) or \"\\\" (U+005C),\n                // the escaped character.\n                ? `\\\\${text[i]}`\n                // Otherwise, the character itself.\n                : text[i]\n        );\n  }\n\n  return out;\n}\n","/**\n * @internal\n */\nexport const uppercasePattern = /[A-Z]+/g;\n\n/**\n * @internal\n */\nexport function toHyphenLower(letters: string, offset: number, str: string): string {\n\n  const lowerCase = letters.toLowerCase();\n\n  if ((lowerCase.length > 1) && (offset + lowerCase.length < str.length)) {\n    // More than one subsequent upper-case letters, unless at the end of the string.\n    return `-${lowerCase.slice(0, -1)}-${lowerCase.slice(-1)}`;\n  }\n\n  return '-' + lowerCase;\n}\n\n/**\n * @internal\n */\nexport const hyphenateCSSName$cache = (/*#__PURE__*/ new Map<string, string>());\n","import { hyphenateCSSName$cache, toHyphenLower, uppercasePattern } from './hyphenate.impl';\n\n/**\n * Hyphenates a camel-cased name.\n *\n * Applicable to CSS property names.\n *\n * Converts:\n *\n * - `backgroundColor` to `background-color`.\n *\n *    Uppercase letters converted to lower case and prepended by hyphen,\n *\n * - `MozTransition` to `-moz-transition`.\n *\n *   The very first uppercase letter is prepended by hyphen too.\n *\n * - `MSTransition` to `-ms-transition`.\n *\n *   Subsequent upper-case letters converted to lower case. The first and the last ones prepended by hyphen.\n *\n * - `someURL` to `some-url`\n *\n *   Subsequent upper-case letters in the very end of the string converted to lower case and prepended by hyphen.\n *\n * - `color` to `color`.\n *\n *   All lower-case names remain as is.\n *\n * - `padding-left` to `padding-left`\n *\n *   Hyphens remain in place.\n *\n * @param name - Camel-cased name to hyphenate.\n *\n * @returns Hyphenated name.\n */\nexport function hyphenateName(name: string): string {\n  return name.replace(uppercasePattern, toHyphenLower);\n}\n\n/**\n * De-capitalizes a camel-cased name and hyphenates it.\n *\n * Calls {@link hyphenateName}, then removes the leading hyphen.\n *\n * Thus, e.g. `MozTransition` would be converted to `moz-transition` rather to `-moz-transition`.\n *\n * @param name - Camel-cased name to hyphenate.\n *\n * @returns Hyphenated name.\n */\nexport function hyphenateDecapName(name: string): string {\n\n  const hyphenated = hyphenateName(name);\n\n  return hyphenated.startsWith('-') ? hyphenated.substr(1) : hyphenated;\n}\n\n/**\n * Hyphenates a camel-cased CSS property key.\n *\n * Applicable to the names of `HTMLElement.style` properties, including vendor-specific ones.\n *\n * Calls {@link hyphenateName}, then replaces `ms-` prefix with `-ms-` one. Other vendor-specific prefixes are\n * capitalized, so the hyphen prefix is added already.\n *\n * Caches hyphenated names for the sake of speed.\n *\n * @param name - Camel-cased CSS property name to hyphenate.\n *\n * @returns Hyphenated CSS property name.\n */\nexport function hyphenateCSSName(name: string): string {\n\n  const found = hyphenateCSSName$cache.get(name);\n\n  if (found) {\n    return found;\n  }\n\n  let hyphenated = hyphenateName(name);\n\n  if (hyphenated.startsWith('ms-')) {\n    hyphenated = '-' + hyphenated;\n  }\n\n  hyphenateCSSName$cache.set(name, hyphenated);\n\n  return hyphenated;\n}\n","import { SingleContextKey } from '@proc7ts/context-values';\nimport { BootstrapContext } from './bootstrap-context';\n\n/**\n * @internal\n */\nexport const BootstrapContext__key = (/*#__PURE__*/ new SingleContextKey<BootstrapContext>('bootstrap-context'));\n","import { ContextKey, ContextKey__symbol, ContextValues } from '@proc7ts/context-values';\nimport { OnEvent } from '@proc7ts/fun-events';\nimport { Class } from '@proc7ts/primitives';\nimport { SupplyPeer } from '@proc7ts/supply';\nimport { ComponentClass, DefinitionContext } from '../component/definition';\nimport { FeatureRef } from '../feature';\nimport { BootstrapContext__key } from './bootstrap-context.key.impl';\n\n/**\n * Components bootstrap context.\n *\n * An instance of this class is passed to {@link FeatureDef.Options.init} method so that the feature can configure\n * itself.\n *\n * Extends `BootstrapValues` interface. The values could be {@link BootstrapSetup.provide pre-configured} in feature\n * definitions.\n *\n * @category Core\n */\nexport abstract class BootstrapContext extends ContextValues {\n\n  /**\n   * A key of bootstrap context value containing the bootstrap context itself.\n   */\n  static get [ContextKey__symbol](): ContextKey<BootstrapContext> {\n    return BootstrapContext__key;\n  }\n\n  /**\n   * An `OnEvent` sender of bootstrap readiness event.\n   *\n   * The registered receiver will be notified once bootstrap is complete.\n   *\n   * If bootstrap is complete already, the receiver will be notified immediately.\n   */\n  abstract readonly whenReady: OnEvent<[BootstrapContext]>;\n\n  /**\n   * Allows to wait for component definition.\n   *\n   * This corresponds to `window.customElements.whenDefined()` method.\n   *\n   * @typeParam T - A type of component.\n   * @param componentType - Component class constructor.\n   *\n   * @return An `OnEvent` sender of definition context sent when the given `componentType` is registered.\n   */\n  abstract whenDefined<T extends object>(componentType: ComponentClass<T>): OnEvent<[DefinitionContext<T>]>;\n\n  /**\n   * Allows to loads the given `feature`.\n   *\n   * @param feature - The feature to load.\n   * @param user - The user of the feature. The feature reference will be dismissed once the user's supply is cut off.\n   *\n   * @returns  Loaded feature reference.\n   */\n  abstract load(feature: Class, user?: SupplyPeer): FeatureRef;\n\n}\n","import { ContextKey, ContextKeyDefault } from '@proc7ts/context-values';\nimport { BootstrapContext } from './bootstrap-context';\n\n/**\n * Provides a default value for bootstrap context key.\n *\n * @category Core\n * @typeParam TValue - Context value type.\n * @typeParam TKey - Context key type.\n * @param provide - A function accepting bootstrap context and target key as parameters, and returning either a default\n * value, or `null`/`undefined` if unknown.\n *\n * @returns A provider of default value for bootstrap context value key.\n */\nexport function bootstrapDefault<TValue, TKey extends ContextKey<any, any, any>>(\n    provide: (this: void, context: BootstrapContext, key: TKey) => TValue | null | undefined,\n): ContextKeyDefault<TValue, TKey> {\n  return (context, key): TValue | null | undefined => {\n\n    const bootstrapContext = context.get(BootstrapContext);\n\n    return context === bootstrapContext\n        ? provide(bootstrapContext, key)\n        : bootstrapContext.get(key) as TValue;\n  };\n}\n","import {\n  Class,\n  fieldAccessorDescriptor,\n  PropertyAccessorDescriptor,\n  toPropertyAccessorDescriptor,\n} from '@proc7ts/primitives';\n\n/**\n * Typed class decorator.\n *\n * @category Utility\n * @typeParam TClass - A type of class to decorate.\n */\nexport type TypedClassDecorator<TClass extends Class> = (type: TClass) => TClass | void;\n\n/**\n * Typed property decorator.\n *\n * @category Utility\n * @typeParam TClass - A type of class the decorated property belongs to.\n */\nexport type TypedPropertyDecorator<TClass extends Class> =\n    <TValue>(\n        target: InstanceType<TClass>,\n        propertyKey: string | symbol,\n        descriptor?: TypedPropertyDescriptor<TValue>,\n    ) => any | void;\n\n/**\n * Property decorator helper converting a field or property to the one with accessor (`get` and optionally `set`).\n *\n * @category Utility\n * @typeParam T - A type of target object.\n * @typeParam TValue - A property value type.\n * @param target - Target object containing the property.\n * @param propertyKey - Target property key.\n * @param desc - Target property descriptor, or `undefined` for object fields.\n * @param updateDescriptor - Descriptor updater. Accepts the accessor descriptor as the only argument. If returns\n * a descriptor, then it is applied to the property. Otherwise the target property descriptor is never updated.\n *\n * @returns Updated property descriptor to return from decorator to apply to the property, or `undefined` if there is\n * nothing to update.\n */\nexport function decoratePropertyAccessor<T, TValue>(\n    target: T,\n    propertyKey: string | symbol,\n    desc: TypedPropertyDescriptor<TValue> | undefined,\n    updateDescriptor: (desc: PropertyAccessorDescriptor<TValue>) => PropertyAccessorDescriptor<TValue>,\n): PropertyAccessorDescriptor<TValue> | undefined {\n\n  const isField = !desc;\n  const accessorDesc = desc\n      ? toPropertyAccessorDescriptor(desc)\n      : fieldAccessorDescriptor(target, propertyKey as keyof T) as unknown as PropertyAccessorDescriptor<TValue>;\n  const updatedDesc = updateDescriptor(accessorDesc);\n\n  if (isField && updatedDesc) {\n    Object.defineProperty(target, propertyKey, updatedDesc);\n    return;\n  }\n\n  return updatedDesc;\n}\n","/**\n * Property accessor descriptor. I.e. the one with `get` and `set` functions.\n *\n * @typeParam TValue - Property value type.\n */\nexport interface PropertyAccessorDescriptor<TValue> extends TypedPropertyDescriptor<TValue> {\n  enumerable?: boolean;\n  configurable?: boolean;\n  writable?: undefined;\n  value?: undefined;\n  get?: () => TValue;\n  set?: (value: TValue) => void;\n}\n\n/**\n * Detects whether the given property descriptor is the one of property accessor.\n *\n * @typeParam TValue - Property value type.\n * @param desc - Target property descriptor.\n *\n * @return `true` if the descriptor has no `value` or `writable` attributes set.\n */\nexport function isPropertyAccessorDescriptor<TValue>(\n    desc: TypedPropertyDescriptor<TValue>,\n): desc is PropertyAccessorDescriptor<TValue> {\n  return desc.value === undefined && desc.writable === undefined;\n}\n\n/**\n * Converts a property descriptor to property accessor descriptor.\n *\n * @typeParam TValue - Property value type.\n * @param desc - Target property descriptor.\n *\n * @return Either an accessor descriptor constructed from data descriptor, or `desc` if it is an accessor descriptor\n * already.\n */\nexport function toPropertyAccessorDescriptor<TValue>(\n    desc: TypedPropertyDescriptor<TValue>,\n): PropertyAccessorDescriptor<TValue> {\n  if (isPropertyAccessorDescriptor(desc)) {\n    return desc;\n  }\n\n  const value__symbol = Symbol('value');\n\n  interface ValueHost {\n    [value__symbol]: TValue;\n  }\n\n  const initial = desc.value as TValue;\n\n  const accessorDesc: PropertyAccessorDescriptor<TValue> = {\n    ...desc,\n    writable: undefined,\n    value: undefined,\n    get(this: ValueHost) {\n      return value__symbol in this ? this[value__symbol] : initial;\n    },\n  };\n\n  if (desc.writable) {\n    accessorDesc.set = function (this: ValueHost, newValue: TValue) {\n      this[value__symbol] = newValue;\n    };\n  }\n\n  delete accessorDesc.writable;\n  delete accessorDesc.value;\n\n  return accessorDesc;\n}\n","import type { PropertyAccessorDescriptor } from './property-accessor-descriptor';\n\n/**\n * Creates a property accessor descriptor for the given field.\n *\n * @typeParam TObject - The type of target object.\n * @typeParam TKey - Target object property keys type.\n * @param target - The object containing target field.\n * @param fieldKey - Target field key.\n */\nexport function fieldAccessorDescriptor<TObject, TKey extends keyof TObject>(\n    target: TObject,\n    fieldKey: TKey,\n): PropertyAccessorDescriptor<TObject[TKey]> {\n\n  const value__symbol = Symbol(`${String(fieldKey)}:value`);\n\n  interface ValueHost {\n    [value__symbol]: TObject[TKey];\n  }\n\n  const initial: TObject[TKey] = target[fieldKey];\n\n  return {\n    configurable: true,\n    enumerable: true,\n    get(this: ValueHost): TObject[TKey] {\n      return value__symbol in this ? this[value__symbol] : initial;\n    },\n    set(this: ValueHost, newValue) {\n      this[value__symbol] = newValue;\n    },\n  };\n}\n","import { Class, superClassOf } from '@proc7ts/primitives';\n\n/**\n * @category Utility\n */\nexport abstract class MetaAccessor<TMeta, TSrc = TMeta> {\n\n  readonly symbol: symbol;\n\n  protected constructor(symbol: symbol) {\n    this.symbol = symbol;\n  }\n\n  own(type: Class, receiver?: Class): TMeta | undefined {\n    // eslint-disable-next-line no-prototype-builtins\n    return type.hasOwnProperty(this.symbol)\n        ? Reflect.get(type, this.symbol, receiver)\n        : undefined;\n  }\n\n  of(type: Class, receiver: Class = type): TMeta | undefined {\n\n    const ownDef: TMeta | undefined = this.own(type, receiver);\n    const superType = superClassOf(type);\n    const superDef = superType && this.of(superType, receiver);\n\n    return ownDef ? (superDef ? this.merge([superDef, ownDef]) : ownDef) : superDef;\n  }\n\n  define<TClass extends Class>(type: TClass, sources: readonly TSrc[]): TClass {\n\n    const prevMeta = this.own(type);\n    const updates = sources.map(source => this.meta(source, type));\n    const newMeta: TMeta = this.merge(prevMeta ? [prevMeta, ...updates] : updates);\n\n    Object.defineProperty(\n        type,\n        this.symbol,\n        {\n          configurable: true,\n          value: newMeta,\n        },\n    );\n\n    return type;\n  }\n\n  abstract merge(metas: readonly TMeta[]): TMeta;\n\n  protected abstract meta(source: TSrc, type: Class): TMeta;\n\n}\n","/**\n * @internal\n */\nexport type InitMethod<TTarget, TArgs extends any[]> =\n    (this: TTarget, ...args: TArgs) => void | PromiseLike<unknown>;\n\n/**\n * @internal\n */\nexport function mergeInitMethods<TTarget, TArgs extends any[]>(\n    target1: TTarget,\n    method1: InitMethod<TTarget, TArgs> | undefined,\n    target2: TTarget,\n    method2: InitMethod<TTarget, TArgs> | undefined,\n): InitMethod<void, TArgs> | undefined {\n\n  const m1 = method1 && (method1 as () => void | PromiseLike<undefined>).bind(target1) as InitMethod<void, TArgs>;\n  const m2 = method2 && (method2 as () => void | PromiseLike<undefined>).bind(target2) as InitMethod<void, TArgs>;\n\n  if (!m2) {\n    return m1;\n  }\n  if (!m1) {\n    return m2;\n  }\n\n  return async (...args) => {\n    await m1(...args);\n    await m2(...args);\n  };\n}\n","import { Class, elementOrArray, extendSetOfElements, setOfElements } from '@proc7ts/primitives';\nimport { BootstrapSetup } from '../boot';\nimport { MetaAccessor } from '../common';\nimport { FeatureContext } from './feature-context';\nimport { mergeInitMethods } from './init-method.impl';\n\n/**\n * A key of a property holding a feature definition within its class constructor.\n *\n * @category Core\n */\nexport const FeatureDef__symbol = (/*#__PURE__*/ Symbol('feature-def'));\n\n/**\n * Feature definition.\n *\n * This can be one of:\n * - feature definition options object,\n * - feature definition holder, or\n * - feature definition factory.\n *\n * @category Core\n */\nexport type FeatureDef =\n    | FeatureDef.Options\n    | FeatureDef.Holder\n    | FeatureDef.Factory;\n\n/**\n * @category Core\n */\nexport namespace FeatureDef {\n\n  /**\n   * Feature definition options.\n   */\n  export interface Options {\n\n    readonly [FeatureDef__symbol]?: undefined;\n\n    /**\n     * Features this one requires.\n     */\n    readonly needs?: Class | readonly Class[];\n\n    /**\n     * Features this one provides.\n     *\n     * The feature always provides itself.\n     */\n    readonly has?: Class | readonly Class[];\n\n    /**\n     * Sets up bootstrap.\n     *\n     * This method is called before bootstrap context created.\n     *\n     * @param setup - Bootstrap setup.\n     *\n     * @returns Either nothing when setup completed synchronously, or a promise-like instance resolved when setup\n     * completed asynchronously.\n     */\n    setup?(setup: BootstrapSetup): void | PromiseLike<unknown>;\n\n    /**\n     * Initializes this feature by calling the given bootstrap context constructed.\n     *\n     * @param context - Feature initialization context.\n     *\n     * @returns Either nothing when initialization completed synchronously, or a promise-like instance resolved when\n     * initialization completed asynchronously.\n     */\n    init?(context: FeatureContext): void | PromiseLike<unknown>;\n\n  }\n\n  /**\n   * Feature definition holder.\n   */\n  export interface Holder {\n\n    /**\n     * The feature definition this holder contains.\n     */\n    readonly [FeatureDef__symbol]: FeatureDef;\n\n  }\n\n  /**\n   * Feature definition factory.\n   */\n  export interface Factory {\n\n    /**\n     * Builds feature definition.\n     *\n     * @param featureType - A feature class constructor to build definition for.\n     *\n     * @returns Built feature definition.\n     */\n    [FeatureDef__symbol](featureType: Class): FeatureDef;\n\n  }\n\n}\n\n/**\n * @internal\n */\nclass FeatureMeta extends MetaAccessor<FeatureDef.Options, FeatureDef> {\n\n  constructor() {\n    super(FeatureDef__symbol);\n  }\n\n  merge(defs: readonly FeatureDef.Options[]): FeatureDef.Options {\n    return defs.reduce<FeatureDef.Options>(\n        (prev, def) => ({\n          needs: elementOrArray(extendSetOfElements(setOfElements(prev.needs), def.needs)),\n          has: elementOrArray(extendSetOfElements(setOfElements(prev.has), def.has)),\n          setup: mergeInitMethods(prev, prev.setup, def, def.setup),\n          init: mergeInitMethods(prev, prev.init, def, def.init),\n        }),\n        {},\n    );\n  }\n\n  meta(source: FeatureDef, type: Class): FeatureDef.Options {\n\n    const def = source[FeatureDef__symbol];\n\n    return def == null\n        ? source as FeatureDef.Options\n        : this.meta(\n            typeof def === 'function' ? (source as FeatureDef.Factory)[FeatureDef__symbol](type) : def,\n            type,\n        );\n  }\n\n}\n\n/**\n * @internal\n */\nconst featureMeta = (/*#__PURE__*/ new FeatureMeta());\n\n/**\n * @internal\n */\nconst noFeatureDef: FeatureDef.Factory = {\n  [FeatureDef__symbol]() {\n    return {};\n  },\n};\n\n/**\n * @category Core\n */\nexport const FeatureDef = {\n\n  /**\n   * Extracts feature definition options from its type.\n   *\n   * @param featureType - Target feature class constructor.\n   *\n   * @returns Feature definition options. May be empty when there is no feature definition found in the given\n   * `featureType`.\n   */\n  of(this: void, featureType: Class): FeatureDef.Options {\n    return featureMeta.of(featureType) || {};\n  },\n\n  /**\n   * Builds feature definition options for the given feature class.\n   *\n   * @param featureType - Target feature class constructor.\n   * @param def - A feature definition.\n   *\n   * @returns Feature definition options.\n   */\n  for(this: void, featureType: Class, def: FeatureDef): FeatureDef.Options {\n    return featureMeta.meta(def, featureType);\n  },\n\n  /**\n   * Merges multiple feature definition options.\n   *\n   * @param defs - Feature definition options to merge.\n   *\n   * @returns Merged feature definition options.\n   */\n  merge(this: void, ...defs: readonly FeatureDef.Options[]): FeatureDef.Options {\n    return featureMeta.merge(defs);\n  },\n\n  /**\n   * Merges multiple feature definitions.\n   *\n   * @param defs - Feature definitions to merge.\n   *\n   * @returns Merged feature definition.\n   */\n  all(this: void, ...defs: readonly FeatureDef[]): FeatureDef {\n    return defs.reduce(\n        (prev, def) => ({\n          [FeatureDef__symbol](featureType: Class) {\n            return FeatureDef.merge(\n                FeatureDef.for(featureType, prev),\n                FeatureDef.for(featureType, def),\n            );\n          },\n        }),\n        noFeatureDef,\n    );\n  },\n\n  /**\n   * Defines a feature.\n   *\n   * Either creates new or extends an existing feature definition and stores it under `[FeatureDef__symbol]` key.\n   *\n   * @typeParam TClass - Feature type.\n   * @param featureType - Feature class constructor.\n   * @param defs - Feature definitions.\n   *\n   * @returns The `type` instance.\n   */\n  define<TClass extends Class>(this: void, featureType: TClass, ...defs: readonly FeatureDef[]): TClass {\n    return featureMeta.define(featureType, defs);\n  },\n\n};\n","import { Class } from '@proc7ts/primitives';\nimport { TypedClassDecorator } from '../common';\nimport { FeatureDef } from './feature-def';\n\n/**\n * Feature class decorator.\n *\n * Decorate a class with this decorator to define it as a feature like this:\n * ```TypeScript\n * @Feature({ needs: [OtherFeature, MyComponent] })\n * class MyFeature {\n *   // ...\n * }\n * ```\n *\n * Such feature can be passed to {@link bootstrapComponents} function or referenced by other features.\n *\n * This is an alternative to direct call to {@link FeatureDef.define} method.\n *\n * @category Core\n * @typeParam TClass - A type of decorated feature class.\n * @param defs - Feature definitions.\n *\n * @returns A feature class decorator.\n */\nexport function Feature<TClass extends Class = any>(...defs: FeatureDef[]): TypedClassDecorator<TClass> {\n  return (type: TClass) => FeatureDef.define(type, ...defs);\n}\n","import { ContextKey, ContextKey__symbol, ContextValueSpec, SingleContextKey } from '@proc7ts/context-values';\nimport { OnEvent } from '@proc7ts/fun-events';\nimport { Class } from '@proc7ts/primitives';\nimport { Supply, SupplyPeer } from '@proc7ts/supply';\nimport { BootstrapContext, BootstrapSetup } from '../boot';\nimport { ComponentContext } from '../component';\nimport { ComponentClass, DefinitionContext, DefinitionSetup } from '../component/definition';\nimport { FeatureRef } from './feature-ref';\n\n/**\n * @internal\n */\nconst FeatureContext__key = (/*#__PURE__*/ new SingleContextKey<FeatureContext>('feature-context'));\n\n/**\n * Feature initialization context.\n *\n * @category Core\n */\nexport abstract class FeatureContext\n    extends BootstrapContext\n    implements BootstrapSetup, SupplyPeer {\n\n  /**\n   * A key of feature context value containing the feature context itself.\n   */\n  static get [ContextKey__symbol](): ContextKey<FeatureContext> {\n    return FeatureContext__key;\n  }\n\n  /**\n   * Feature class this context is created for.\n   */\n  abstract readonly feature: Class;\n\n  /**\n   * An `OnEvent` sender of feature readiness event.\n   *\n   * The registered receiver will be notified once bootstrap is complete and the feature is loaded.\n   *\n   * If the above conditions satisfied already, the receiver will be notified immediately.\n   */\n  abstract readonly whenReady: OnEvent<[FeatureContext]>;\n\n  /**\n   * An `OnEvent` sender of component definition events.\n   *\n   * The registered receiver will be notified when new component class is defined, but before its custom element class\n   * constructed.\n   */\n  abstract readonly onDefinition: OnEvent<[DefinitionContext]>;\n\n  /**\n   * An `OnEvent` sender of component construction events.\n   *\n   * The registered receiver will be notified right before component is constructed.\n   */\n  abstract readonly onComponent: OnEvent<[ComponentContext]>;\n\n  /**\n   * Feature supply.\n   *\n   * Cut off once feature unloaded.\n   */\n  abstract readonly supply: Supply;\n\n  /**\n   * Provides bootstrap context value.\n   *\n   * Note that this happens when bootstrap context already exists. To provide a value before bootstrap context created\n   * a {@link BootstrapSetup.provide} method can be used.\n   *\n   * @typeParam TSrc - Source value type.\n   * @typeParam TDeps - Dependencies tuple type.\n   * @param spec - Context value specifier.\n   *\n   * @returns A value supply that removes the given context value specifier once cut off.\n   */\n  abstract provide<TSrc, TDeps extends any[]>(\n      spec: ContextValueSpec<BootstrapContext, unknown, TSrc, TDeps>,\n  ): Supply;\n\n  abstract perDefinition<TSrc, TDeps extends any[]>(\n      spec: ContextValueSpec<DefinitionContext, unknown, TSrc, TDeps>,\n  ): Supply;\n\n  abstract perComponent<TSrc, TDeps extends any[]>(\n      spec: ContextValueSpec<ComponentContext, unknown, TSrc, TDeps>,\n  ): Supply;\n\n  abstract setupDefinition<T extends object>(componentType: ComponentClass<T>): OnEvent<[DefinitionSetup]>;\n\n  /**\n   * Defines a component.\n   *\n   * Creates a custom element according to component definition, and registers it with custom elements registry.\n   *\n   * Note that custom element definition will happen only when all features configuration complete.\n   *\n   * @typeParam T - A type of component.\n   * @param componentType - Component class constructor.\n   *\n   * @return Custom element class constructor registered as custom element.\n   *\n   * @throws TypeError  If `componentType` does not contain a component definition.\n   */\n  abstract define<T extends object>(componentType: ComponentClass<T>): void;\n\n  whenDefined<T extends object>(componentType: ComponentClass<T>): OnEvent<[DefinitionContext<T>]> {\n    return this.get(BootstrapContext).whenDefined(componentType);\n  }\n\n  load(feature: Class, user?: SupplyPeer): FeatureRef {\n    return this.get(BootstrapContext).load(\n        feature,\n        user ? new Supply().needs(this).needs(user) : this,\n    );\n  }\n\n}\n","import { ContextRef, SingleContextKey } from '@proc7ts/context-values';\nimport { Workbench, WorkStage } from '@proc7ts/workbench';\nimport { bootstrapDefault } from '../../boot';\n\n/**\n * @internal\n */\nexport type BootstrapWorkbench = Workbench;\n\n/**\n * @internal\n */\nexport const BootstrapWorkbench: ContextRef<BootstrapWorkbench> = (/*#__PURE__*/ new SingleContextKey(\n    'bootstrap-workbench',\n    {\n      byDefault: bootstrapDefault(() => new Workbench()),\n    },\n));\n\n/**\n * @internal\n */\nexport const featureSetupStage = (/*#__PURE__*/ new WorkStage('feature setup'));\n\n/**\n * @internal\n */\nexport const featureInitStage = (/*#__PURE__*/ new WorkStage('feature init', { after: featureSetupStage }));\n\n/**\n * @internal\n */\nexport const componentDefStage = (/*#__PURE__*/ new WorkStage('component definition', { after: featureInitStage }));\n\n","import { isQualifiedName, QualifiedName } from '@frontmeans/namespace-aliaser';\nimport { mergeFunctions } from '@proc7ts/primitives';\nimport { MetaAccessor } from '../common';\nimport { FeatureDef, FeatureDef__symbol } from '../feature';\nimport { ComponentClass, DefinitionContext, DefinitionSetup, ElementDef } from './definition';\n\n/**\n * A key of a property holding a component definition within its class constructor.\n *\n * @category Core\n */\nexport const ComponentDef__symbol = (/*#__PURE__*/ Symbol('component-def'));\n\n/**\n * Component definition.\n *\n * A custom element class will be created for each registered component in accordance to this definition.\n *\n * This can be one of:\n * - custom element name (possibly qualified),\n * - component definition options,\n * - component definition holder,\n * - component definition factory,\n * - feature definition holder, or\n * - feature definition factory.\n *\n * @category Core\n * @typeParam T - A type of component.\n */\nexport type ComponentDef<T extends object = any> =\n    | QualifiedName\n    | ComponentDef.Options<T>\n    | ComponentDef.Holder<T>\n    | ComponentDef.Factory<T>\n    | FeatureDef.Holder\n    | FeatureDef.Factory;\n\n/**\n * @category Core\n */\nexport namespace ComponentDef {\n\n  /**\n   * Component definition options.\n   */\n  export interface Options<T extends object = any> {\n\n    readonly [ComponentDef__symbol]?: undefined;\n\n    /**\n     * Custom element name.\n     *\n     * The name may belong to some namespace to avoid naming conflicts. I.e. it can be either a string, or\n     * name/namespace tuple.\n     *\n     * When omitted an anonymous component will be registered. Such component is not bound to custom element, but it\n     * still can be mounted.\n     */\n    readonly name?: QualifiedName;\n\n    /**\n     * Existing element to extend by custom one.\n     */\n    readonly extend?: ElementDef.Extend;\n\n    /**\n     * Additional feature definition options.\n     */\n    readonly feature?: FeatureDef.Options;\n\n    /**\n     * Sets up component definition.\n     *\n     * This method is called before component definition context constructed.\n     *\n     * @param setup - Component definition setup.\n     */\n    setup?(setup: DefinitionSetup<T>): void;\n\n    /**\n     * Defines this component by calling the given component definition context methods.\n     *\n     * This function is called before the custom element is defined.\n     *\n     * @param defContext - Component definition context.\n     */\n    define?(defContext: DefinitionContext<T>): void;\n\n  }\n\n  /**\n   * Component definition holder.\n   *\n   * @typeParam T - A type of component.\n   */\n  export interface Holder<T extends object = any> {\n\n    /**\n     * The component definition this holder contains.\n     */\n    readonly [ComponentDef__symbol]: ComponentDef<T>;\n\n  }\n\n  /**\n   * Component definition factory.\n   *\n   * @typeParam T - A type of component.\n   */\n  export interface Factory<T extends object = any> {\n\n    /**\n     * Builds component definition.\n     *\n     * @param componentType - A component class constructor to build definition for.\n     *\n     * @returns Built component definition.\n     */\n    [ComponentDef__symbol](componentType: ComponentClass<T>): ComponentDef<T>;\n\n  }\n\n}\n\n/**\n * @internal\n */\ntype ComponentDefHolder<T extends object> =\n    | ComponentDef.Options<T>\n    | ComponentDef.Holder<T>\n    | ComponentDef.Factory<T>\n    | { [ComponentDef__symbol]?: undefined };\n\n/**\n * @internal\n */\ntype FeatureDefHolder =\n    | FeatureDef.Holder\n    | FeatureDef.Factory\n    | { [FeatureDef__symbol]?: undefined };\n\n/**\n * @internal\n */\nclass ComponentMeta extends MetaAccessor<ComponentDef.Options, ComponentDef> {\n\n  constructor() {\n    super(ComponentDef__symbol);\n  }\n\n  merge<T extends object>(defs: readonly ComponentDef.Options<T>[]): ComponentDef.Options<T> {\n    return defs.reduce(\n        (prev, def) => ({\n          ...prev,\n          ...def,\n          setup: mergeFunctions(prev.setup, def.setup),\n          define: mergeFunctions(prev.define, def.define),\n          feature: prev.feature\n              ? def.feature ? FeatureDef.merge(prev.feature, def.feature) : prev.feature\n              : def.feature,\n        }),\n        {},\n    );\n  }\n\n  meta<T extends object>(source: ComponentDef<T>, componentType: ComponentClass<T>): ComponentDef.Options<T> {\n\n    const def = (source as ComponentDefHolder<T>)[ComponentDef__symbol];\n\n    if (def != null) {\n      return this.meta(\n          typeof def === 'function' ? (source as ComponentDef.Factory<T>)[ComponentDef__symbol](componentType) : def,\n          componentType,\n      );\n    }\n    if ((source as FeatureDefHolder)[FeatureDef__symbol] != null) {\n      return {\n        feature: FeatureDef.for(componentType, source as FeatureDef),\n      };\n    }\n    if (isQualifiedName(source)) {\n      return { name: source };\n    }\n\n    return source as ComponentDef.Options<T>;\n  }\n\n}\n\n/**\n * @internal\n */\nconst componentMeta = (/*#__PURE__*/ new ComponentMeta());\n\n/**\n * @internal\n */\nconst noComponentDef: ComponentDef.Factory = {\n  [ComponentDef__symbol]() {\n    return {};\n  },\n};\n\n/**\n * @category Core\n */\nexport const ComponentDef = {\n\n  /**\n   * Extracts component definition options from its type.\n   *\n   * @typeParam T - A type of component.\n   * @param componentType - Target component class constructor.\n   *\n   * @returns Component definition options. May be empty if there is not definition attached to component type.\n   */\n  of<T extends object>(this: void, componentType: ComponentClass<T>): ComponentDef.Options<T> {\n    return componentMeta.of(componentType) as ComponentDef.Options<T> || {};\n  },\n\n  /**\n   * Builds component definition options for the given component class.\n   *\n   * @param componentType - Target component class constructor.\n   * @param source - A source of component definition.\n   *\n   * @returns Component definition.\n   */\n  for<T extends object>(\n      this: void,\n      componentType: ComponentClass<T>,\n      source: ComponentDef<T>,\n  ): ComponentDef.Options<T> {\n    return componentMeta.meta(source, componentType);\n  },\n\n  /**\n   * Merges multiple component definition options.\n   *\n   * @typeParam T - A type of component.\n   * @param defs - Component definition options to merge.\n   *\n   * @returns Merged component definition options.\n   */\n  merge<T extends object>(this: void, ...defs: ComponentDef.Options<T>[]): ComponentDef.Options<T> {\n    return componentMeta.merge(defs);\n  },\n\n  /**\n   * Merges multiple component definitions.\n   *\n   * @typeParam T - A type of component.\n   * @param defs - Component definitions to merge.\n   *\n   * @returns Merged component definition.\n   */\n  all<T extends object>(this: void, ...defs: ComponentDef<T>[]): ComponentDef<T> {\n    return defs.reduce<ComponentDef.Factory<T>>(\n        (prev, def) => ({\n          [ComponentDef__symbol](componentType: ComponentClass<T>) {\n            return ComponentDef.merge(\n                ComponentDef.for(componentType, prev),\n                ComponentDef.for(componentType, def),\n            );\n          },\n        }),\n        noComponentDef,\n    );\n  },\n\n  /**\n   * Defines a component.\n   *\n   * Either assigns new or extends existing component definition and stores it under {@link ComponentDef__symbol} key.\n   *\n   * Each component can be passed directly to {@link bootstrapComponents} function or added as a requirement\n   * of another feature.\n   *\n   * @typeParam TClass - A type of component class.\n   * @param componentType - Component class constructor.\n   * @param defs - Component definitions.\n   *\n   * @returns The `type` instance.\n   */\n  define<TClass extends ComponentClass>(\n      this: void,\n      componentType: TClass,\n      ...defs: ComponentDef<InstanceType<TClass>>[]\n  ): TClass {\n    return componentMeta.define(componentType, defs);\n  },\n\n};\n","import { Class } from '@proc7ts/primitives';\nimport { ComponentDef, ComponentDef__symbol } from './component-def';\nimport { ComponentClass } from './definition';\n\n/**\n * Component decorator interface.\n *\n * In addition to being a decorator for component class, it may also serve as {@link ComponentDef component definition}.\n * Thus it can be added as parameter to {@link Component @Component} decorator, or used as class decorator by itself.\n *\n * Constructed by {@link Component} function.\n *\n * @category Core\n * @typeParam TClass - A type of decorated component class.\n */\nexport interface ComponentDecorator<TClass extends ComponentClass = Class>\n    extends ComponentDef.Factory<InstanceType<TClass>> {\n\n  (this: void, type: TClass): TClass | void;\n\n}\n\n/**\n * Decorator of component class.\n *\n * Decorated class becomes component:\n * ```TypeScript\n * @Component({ name: 'my-element' })\n * class MyComponent {\n *   // ...\n * }\n * ```\n *\n * Such component can be registered with {@link FeatureContext.define} method or used as a feature, e.g. passed to\n * {@link bootstrapComponents} function, or added to {@link FeatureDef.Options.needs} property of another feature.\n *\n * This is an alternative to direct call to {@link ComponentDef.Options.define} method.\n *\n * @category Core\n * @typeParam TClass - A type of decorated component class.\n * @param defs - Component definitions.\n *\n * @returns A component class decorator.\n */\nexport function Component<TClass extends ComponentClass = Class>(\n    ...defs: ComponentDef<InstanceType<TClass>>[]\n): ComponentDecorator<TClass> {\n\n  const decorator = ((type: TClass) => ComponentDef.define(type, ...defs)) as ComponentDecorator<TClass>;\n  const def = decorator as ComponentDef.Factory<InstanceType<TClass>>;\n\n  def[ComponentDef__symbol] = () => ComponentDef.all(...defs);\n\n  return decorator;\n}\n","import { SingleContextKey } from '@proc7ts/context-values';\nimport { ComponentContext } from './component-context';\n\n/**\n * @internal\n */\nexport const ComponentContext__key = (/*#__PURE__*/ new SingleContextKey<ComponentContext>('component-context'));\n","import { DomEventDispatcher, OnDomEvent } from '@frontmeans/dom-events';\nimport { SingleContextKey } from '@proc7ts/context-values';\nimport { ComponentContext__key } from './component-context.key.impl';\nimport { ComponentEventDispatcher } from './component-event-dispatcher';\n\n/**\n * @internal\n */\nexport const ComponentEventDispatcher__key = (/*#__PURE__*/ new SingleContextKey<ComponentEventDispatcher>(\n    'component-event-dispatcher',\n    {\n      byDefault(values) {\n\n        const context = values.get(ComponentContext__key);\n        const dispatcher = new DomEventDispatcher(context.element);\n\n        dispatcher.supply.needs(context);\n\n        return {\n          dispatch(event: Event): boolean {\n            return dispatcher.dispatch(event);\n          },\n          on<TEvent extends Event>(type: string): OnDomEvent<TEvent> {\n            return dispatcher.on(type);\n          },\n        };\n      },\n    },\n));\n","import { SingleContextKey, SingleContextRef } from '@proc7ts/context-values';\nimport { ComponentContext__key } from './component-context.key.impl';\n\n/**\n * Component content root node.\n *\n * Either element itself, or its shadow root.\n *\n * @category Core\n */\nexport type ContentRoot = Element | ShadowRoot;\n\n/**\n * A key of component context value containing a component root element.\n *\n * This is an element itself by default. But can be overridden e.g. by {@link AttachShadow @AttachShadow} decorator.\n *\n * @category Core\n */\nexport const ContentRoot: SingleContextRef<ContentRoot> = (/*#__PURE__*/ new SingleContextKey<ContentRoot>(\n    'content-root',\n    {\n      byDefault(ctx): ContentRoot {\n        return ctx.get(ComponentContext__key).element as ContentRoot;\n      },\n    },\n));\n","import { ContextValueSlot } from '@proc7ts/context-values';\nimport { ContextUpKey, ContextUpRef } from '@proc7ts/context-values/updatable';\nimport { AfterEvent, afterThe, digAfter, statePath, StatePath } from '@proc7ts/fun-events';\nimport { mergeFunctions, noop } from '@proc7ts/primitives';\n\n/**\n * Component state updater signature.\n *\n * @category Core\n */\nexport type StateUpdater =\n/**\n * @typeParam TValue - Updated value type\n * @param path - Updated state node path.\n * @param newValue - New value.\n * @param oldValue - Replaced value.\n */\n    <TValue>(this: void, path: StatePath, newValue: TValue, oldValue: TValue) => void;\n\n/**\n * @category Core\n */\nexport namespace StateUpdater {\n\n  /**\n   * Normalized component state updater signature.\n   *\n   * Accepts normalized state path.\n   */\n  export type Normalized =\n  /**\n   * @typeParam TValue - Updated value type\n   * @param path - Normalized path of updated state node.\n   * @param newValue - New value.\n   * @param oldValue - Replaced value.\n   */\n      <TValue>(this: void, path: StatePath.Normalized, newValue: TValue, oldValue: TValue) => void;\n\n}\n\n/**\n * @internal\n */\nclass StateUpdaterKey extends ContextUpKey<StateUpdater, StateUpdater.Normalized> {\n\n  readonly upKey: ContextUpKey.UpKey<StateUpdater, StateUpdater.Normalized>;\n\n  constructor() {\n    super('state-updater');\n    this.upKey = this.createUpKey(\n        slot => slot.insert(slot.seed.do(digAfter(\n            (...fns) => {\n              if (fns.length) {\n\n                const combined: StateUpdater.Normalized = fns.reduce(\n                    (prev, fn) => mergeFunctions(fn, prev),\n                    noop,\n                );\n\n                return afterThe((path, newValue, oldValue) => combined(statePath(path), newValue, oldValue));\n              }\n\n              if (slot.hasFallback && slot.or) {\n                return slot.or;\n              }\n\n              return afterThe(noop);\n            },\n        ))),\n    );\n  }\n\n  grow(\n      slot: ContextValueSlot<\n          StateUpdater,\n          ContextUpKey.Source<StateUpdater.Normalized>,\n          AfterEvent<StateUpdater.Normalized[]>>,\n  ): void {\n\n    let delegated: StateUpdater;\n\n    slot.context.get(\n        this.upKey,\n        slot.hasFallback ? { or: slot.or != null ? afterThe(slot.or) : slot.or } : undefined,\n    )!(\n        fn => delegated = fn,\n    ).whenOff(\n        () => delegated = noop,\n    );\n\n    slot.insert((path, newValue, oldValue) => delegated(path, newValue, oldValue));\n  }\n\n}\n\n/**\n * A key of component context value containing a component {@link StateUpdater state updater} function.\n *\n * Features are calling this function by default when component state changes, e.g. attribute value or DOM property\n * modified.\n *\n * Does nothing by default and after component destruction.\n *\n * When multiple state updaters provided, they all will be called on each state update, in reverse order.\n *\n * @category Core\n */\nexport const StateUpdater: ContextUpRef<StateUpdater, StateUpdater.Normalized> = (/*#__PURE__*/ new StateUpdaterKey());\n","import { OnDomEvent } from '@frontmeans/dom-events';\nimport { ContextKey, ContextKey__symbol, ContextValues } from '@proc7ts/context-values';\nimport { AfterEvent, OnEvent, StatePath } from '@proc7ts/fun-events';\nimport { Supply, SupplyPeer } from '@proc7ts/supply';\nimport { ComponentContext__key } from './component-context.key.impl';\nimport { ComponentEventDispatcher__key } from './component-event-dispatcher.key.impl';\nimport { ContentRoot } from './content-root';\nimport { ComponentClass } from './definition';\nimport { StateUpdater } from './state-updater';\n\n/**\n * A key of component instance method returning its component context.\n *\n * @category Core\n */\nexport const ComponentContext__symbol = (/*#__PURE__*/ Symbol('component-context'));\n\n/**\n * Component context.\n *\n * Passed to component constructor as its only parameter.\n *\n * Extends `ContextValues` interface. The values are provided by corresponding providers registered with\n * {@link BootstrapSetup.perComponent}} and {@link DefinitionSetup.perComponent} methods.\n *\n * @category Core\n * @typeParam T - A type of component.\n */\nexport abstract class ComponentContext<T extends object = any> extends ContextValues implements SupplyPeer {\n\n  /**\n   * A key of component context value containing the component context instance itself.\n   */\n  static get [ContextKey__symbol](): ContextKey<ComponentContext> {\n    return ComponentContext__key;\n  }\n\n  /**\n   * Extracts component context from the given component instance.\n   *\n   * @param component - Target component instance.\n   *\n   * @return Component context reference returned by {@link ComponentContext__symbol} method.\n   *\n   * @throws TypeError  When the given `component` does not contain component context reference.\n   */\n  static of<T extends object>(component: ComponentInstance<T>): ComponentContext<T> {\n    if (typeof component[ComponentContext__symbol] !== 'function') {\n      throw new TypeError(`No component context found in ${String(component)}`);\n    }\n    return component[ComponentContext__symbol]!();\n  }\n\n  /**\n   * Component class constructor.\n   */\n  abstract readonly componentType: ComponentClass<T>;\n\n  /**\n   * Custom element constructed for the component according to its type.\n   *\n   * E.g. `HTMLElement` instance.\n   */\n  abstract readonly element: any;\n\n  /**\n   * A component instance.\n   *\n   * It is an error accessing this property before the component is created, e.g. from inside of component constructor\n   * or {@link DefinitionContext.whenComponent component instantiation event} receiver. A {@link whenReady} callback\n   * could be utilized to work this around.\n   */\n  abstract readonly component: ComponentInstance<T>;\n\n  /**\n   * Whether the component is {@link DefinitionContext.mountTo mounted} to element.\n   */\n  abstract readonly mounted: boolean;\n\n  /**\n   * Whether the component is ready.\n   *\n   * Set to `true` when {@link component} is available.\n   */\n  abstract readonly ready: boolean;\n\n  /**\n   * An `OnEvent` sender of component readiness event.\n   *\n   * The component is constructed shortly after custom element. So the component may not exist when requested\n   * e.g. inside component constructor or {@link DefinitionContext.whenComponent component instantiation event}\n   * receiver. The registered receiver will be notified when the component is constructed.\n   *\n   * If the component is constructed already, the receiver will be notified immediately.\n   */\n  abstract readonly onceReady: OnEvent<[this]>;\n\n  /**\n   * An `OnEvent` sender of single component readiness event.\n   *\n   * The component is constructed shortly after custom element. So the component may not exist when requested\n   * e.g. inside component constructor or {@link DefinitionContext.whenComponent component instantiation event}\n   * receiver. The registered receiver will be notified when the component is constructed.\n   *\n   * If the component is constructed already, the receiver will be notified immediately.\n   *\n   * In contrast to {@link onceReady}, cuts off the event supply after sending the first event.\n   */\n  abstract readonly whenReady: OnEvent<[this]>;\n\n  /**\n   * Whether the component is settled.\n   *\n   * Component settlement happens:\n   * - when {@link settle} method is called,\n   * - when component is {@link DefinitionContext.mountTo mounted} to element, or\n   * - when component's element is {@link connected}.\n   *\n   * It is guaranteed that component settlement won't happen inside custom element's constructor. So the settlement\n   * event may be used e.g. to start DOM manipulations, as the latter is prohibited inside custom element constructor.\n   *\n   * This becomes `true` right before {@link whenSettled} event is sent.\n   */\n  abstract readonly settled: boolean;\n\n  /**\n   * An `OnEvent` sender of component settlement event.\n   *\n   * The registered receiver is called when component is {@link settled}. If settled already the receiver is called\n   * immediately.\n   */\n  abstract readonly onceSettled: OnEvent<[this]>;\n\n  /**\n   * An `OnEvent` sender of single component settlement event.\n   *\n   * The registered receiver is called when component is {@link settled}. If settled already the receiver is called\n   * immediately.\n   *\n   * In contrast to {@link onceSettled}, cuts off the event supply after sending the first event.\n   */\n  abstract readonly whenSettled: OnEvent<[this]>;\n\n  /**\n   * Whether the component's element is connected.\n   *\n   * This becomes `true` right before {@link whenConnected} event is sent.\n   */\n  abstract readonly connected: boolean;\n\n  /**\n   * An `OnEvent` sender of component's element connection event.\n   *\n   * The registered receiver is called when component's element is connected. E.g. when custom element's\n   * `connectedCallback()` method is called.\n   *\n   * If connected already the receiver is called immediately.\n   */\n  abstract readonly onceConnected: OnEvent<[this]>;\n\n  /**\n   * An `OnEvent` sender of single component's element connection event.\n   *\n   * The registered receiver is called when component's element is connected. E.g. when custom element's\n   * `connectedCallback()` method is called.\n   *\n   * If connected already the receiver is called immediately.\n   *\n   * In contrast to {@link onceConnected}, cuts off the event supply after sending the first event.\n   */\n  abstract readonly whenConnected: OnEvent<[this]>;\n\n  /**\n   * An `AfterEvent` keeper of component status.\n   *\n   * Sends this context instance each time the component status changes.\n   */\n  abstract readonly readStatus: AfterEvent<[this]>;\n\n  /**\n   * An event supply that {@link destroy destroys} component when cut off.\n   */\n  abstract readonly supply: Supply;\n\n  /**\n   * Updates component's state.\n   *\n   * This is a shorthand for invoking a component {@link StateUpdater state updater} .\n   *\n   * @typeParam TValue - A type of changed value.\n   * @param key - Changed value key.\n   * @param newValue - New value.\n   * @param oldValue - Previous value.\n   */\n  readonly updateState: StateUpdater;\n\n  constructor() {\n    super();\n    this.updateState = <TValue>(key: StatePath, newValue: TValue, oldValue: TValue): void => {\n      this.get(StateUpdater)(key, newValue, oldValue);\n    };\n  }\n\n  /**\n   * Component content root.\n   *\n   * This is a shorthand for requesting a {@link ContentRoot content root} from component context.\n   */\n  get contentRoot(): ContentRoot {\n    return this.get(ContentRoot);\n  }\n\n  /**\n   * Settles component.\n   *\n   * Calling this method has no effect if component is {@link settled} already, when component is not\n   * {@link whenReady ready} yet, or custom element's constructor is not exited.\n   *\n   * Calling this method may trigger DOM manipulations (the latter is prohibited inside custom element's constructor).\n   * This may be desired for rendering optimizations. E.g. to render element's content _before_ adding it to document.\n   *\n   * This method is called automatically when {@link DefinitionContext.mountTo mounting} component to element.\n   */\n  abstract settle(): void;\n\n  /**\n   * Returns a DOM event producer for the given event type.\n   *\n   * This is a shorthand for invoking a component event producer function available under\n   * `[ComponentEventProducer.key]` key.\n   *\n   * @typeParam TEvent - DOM event type.\n   * @param type - An event type to listen for.\n   *\n   * @returns A producer of DOM event events of the given type.\n   */\n  on<TEvent extends Event>(type: string): OnDomEvent<TEvent> {\n    return this.get(ComponentEventDispatcher__key).on(type);\n  }\n\n  /**\n   * Dispatches an event to component element.\n   *\n   * This is a shorthand for invoking a component {@link ComponentEventDispatcher event dispatcher}.\n   *\n   * @param event - An event to dispatch.\n   */\n  dispatchEvent(event: Event): void {\n    this.get(ComponentEventDispatcher__key).dispatch(event);\n  }\n\n  /**\n   * Destroys the component.\n   *\n   * Removes element from the DOM tree. I.e. disconnects custom element first.\n   *\n   * After this method call the component should no longer be used.\n   *\n   * Note that component destruction is virtual. It is up to developer to decide when component is no longer needed.\n   * However the component is destroyed automatically once disconnected, i.e. when custom element's\n   * `disconnectedCallback()` method is called.\n   *\n   * @param reason - Optional reason of destruction.\n   */\n  abstract destroy(reason?: any): void;\n\n}\n\n/**\n * A component instance.\n *\n * @category Core\n */\nexport type ComponentInstance<T extends object = any> = T & {\n\n  /**\n   * @returns Component context.\n   */\n  [ComponentContext__symbol]?(): ComponentContext<T>;\n\n};\n","import { Class, PropertyAccessorDescriptor, valueProvider } from '@proc7ts/primitives';\nimport { decoratePropertyAccessor } from '../common';\nimport { ComponentDef, ComponentDef__symbol } from './component-def';\nimport { Component, ComponentDecorator } from './component.decorator';\nimport { ComponentClass } from './definition';\n\n/**\n * Component property decorator interface.\n *\n * Allows to construct a {@link ComponentDecorator component decorator} by declaring a virtual property to use instead\n * of decorated one.\n *\n * Constructed by {@link ComponentProperty} function.\n *\n * @category Core\n * @typeParam TValue - Property value type.\n * @typeParam TClass - A type of decorated component class.\n */\nexport interface ComponentPropertyDecorator<TValue, TClass extends ComponentClass = Class> {\n\n  /**\n   * Decorates component method.\n   *\n   * @typeParam TPropValue - Property value type.\n   * @param proto - Decorated class prototype.\n   * @param propertyKey - Decorated property key.\n   * @param descriptor - Decorated property descriptor.\n   *\n   * @returns  Either updated property descriptor, or nothing.\n   */\n      <TPropValue extends TValue>(\n      this: void,\n      proto: InstanceType<TClass>,\n      propertyKey: string | symbol,\n      descriptor?: TypedPropertyDescriptor<TPropValue>,\n  ): any | void;\n\n  /**\n   * Builds component decorator assuming the virtual property has the given value.\n   *\n   * @param value - Virtual property value.\n   * @param key - Virtual property key. Defaults to {@link AnonymousComponentProperty__symbol}.\n   *\n   * @returns New component decorator.\n   */\n  As(\n      this: void,\n      value: TValue,\n      key?: string | symbol,\n  ): ComponentDecorator<TClass>;\n\n  /**\n   * Builds component decorator assuming the virtual property value is provided by the given `provider`.\n   *\n   * @param provider - Virtual property read-only value provider.\n   * @param key - Virtual property key. Defaults to {@link AnonymousComponentProperty__symbol}.\n   *\n   * @returns New component decorator.\n   */\n  By(\n      this: void,\n      provider: ComponentProperty.Provider<TValue, InstanceType<TClass>>,\n      key?: string | symbol,\n  ): ComponentDecorator<TClass>;\n\n  /**\n   * Builds component decorator assuming the decorated property is available via the given `accessor`.\n   *\n   * @param accessor - Virtual property accessor.\n   * @param key - Virtual property key. Defaults to {@link AnonymousComponentProperty__symbol}.\n   *\n   * @returns New component decorator.\n   */\n  With(\n      this: void,\n      accessor: ComponentProperty.Accessor<TValue, InstanceType<TClass>>,\n      key?: string | symbol,\n  ): ComponentDecorator<TClass>;\n\n  /**\n   * Builds component decorator assuming the decorated property is bound to component with by the given `binder`.\n   *\n   * @param binder - A binder of virtual property accessor\n   * @param key - Virtual property key. Defaults to {@link AnonymousComponentProperty__symbol}..\n   *\n   * @returns New component decorator.\n   */\n  Bind(\n      this: void,\n      binder: ComponentProperty.Binder<TValue, InstanceType<TClass>>,\n      key?: string | symbol,\n  ): ComponentDecorator<TClass>;\n\n}\n\n/**\n * @category Core\n */\nexport namespace ComponentProperty {\n\n  /**\n   * Component property value provider signature.\n   *\n   * This function will be called each time the property value is requested.\n   *\n   * @typeParam TValue - Property value type.\n   * @typeParam T - A type of component.\n   */\n  export type Provider<TValue, T extends object = any> =\n  /**\n   * @param component - Component instance.\n   * @param key - Target property key.\n   *\n   * @returns Property value.\n   */\n      (\n          this: void,\n          component: T,\n          key: string | symbol,\n      ) => TValue;\n\n  /**\n   * Component property accessor.\n   *\n   * Allows to read and write property value.\n   *\n   * @typeParam TValue - Property value type.\n   * @typeParam T - A type of component.\n   */\n  export interface Accessor<TValue, T extends object = any> {\n\n    /**\n     * Reads property value.\n     *\n     * May throw if the property is not readable.\n     *\n     * @param component - Target component instance.\n     * @param key - Property key.\n     *\n     * @returns Property value.\n     */\n    get(this: void, component: T, key: string | symbol): TValue;\n\n    /**\n     * Assigns new property value.\n     *\n     * May throw is the property is not writable.\n     *\n     * @param component - Target component instance.\n     * @param value - New property value.\n     * @param key - Property key.\n     */\n    set(this: void, component: T, value: TValue, key: string | symbol): void;\n\n  }\n\n  /**\n   * Property accessor binder signature.\n   *\n   * This is a function that binds a {@link BoundAccessor property accessor} to target component.\n   *\n   * @typeParam TValue - Property value type.\n   * @typeParam T - A type of component.\n   */\n  export type Binder<TValue, T extends object = any> =\n  /**\n   * @param component - Target component to bind property accessor to.\n   * @param key - Property key.\n   *\n   * @returns Property accessor bound to `component`.\n   */\n      (\n          this: void,\n          component: T,\n          key: string | symbol,\n      ) => BoundAccessor<TValue>;\n\n  export interface BoundAccessor<TValue> {\n\n    /**\n     * Reads bound component's property value.\n     *\n     * An attempt to read the value would throw when omitted.\n     *\n     * @returns Property value.\n     */\n    get?(): TValue;\n\n    /**\n     * Assigns bound component's new property value.\n     *\n     * An attempt to assign the value would throw when omitted.\n     *\n     * @param value - New property value.\n     */\n    set?(value: TValue): void;\n\n  }\n\n  /**\n   * Component property descriptor.\n   *\n   * Passed to {@link Definer property definer} by {@link ComponentProperty @ComponentProperty} decorator to build\n   * a {@link Definition property definition}.\n   *\n   * @typeParam TValue - Property value type.\n   * @typeParam TClass - A type of component class.\n   */\n  export interface Descriptor<TValue, TClass extends ComponentClass = Class> {\n\n    /**\n     * Component class constructor.\n     */\n    readonly type: TClass;\n\n    /**\n     * Component property key.\n     */\n    readonly key: string | symbol;\n\n    /**\n     * Whether the property is initially writable.\n     *\n     * This can be changed by {@link Definition.get property read definition}.\n     */\n    readonly readable: boolean;\n\n    /**\n     * Whether the property is initially writable.\n     *\n     * This can be changed by {@link Definition.set property assignment definition}.\n     */\n    readonly writable: boolean;\n\n    /**\n     * Whether the property is initially enumerable.\n     *\n     * This can be changed by {@link Definition.enumerable property definition}.\n     */\n    readonly enumerable: boolean;\n\n    /**\n     * Whether the property is initially configurable.\n     *\n     * This can be changed by {@link Definition.configurable property definition}.\n     */\n    readonly configurable: boolean;\n\n    /**\n     * Reads property value.\n     *\n     * May throw if the property is not readable.\n     *\n     * @param component - Target component instance.\n     *\n     * @returns Property value.\n     */\n    get(this: void, component: InstanceType<TClass>): TValue;\n\n    /**\n     * Assigns new property value.\n     *\n     * May throw is the property is not writable.\n     *\n     * @param component - Target component instance.\n     * @param value - New property value.\n     */\n    set(this: void, component: InstanceType<TClass>, value: TValue): void;\n\n  }\n\n  /**\n   * A signature of component property definition builder.\n   *\n   * This is a function called by {@link ComponentProperty @ComponentProperty} decorator to define the property.\n   *\n   * @typeParam TValue - Property value type.\n   * @typeParam TClass - A type of component class.\n   */\n  export type Definer<TValue, TClass extends ComponentClass = Class> =\n  /**\n   * @param descriptor - Component property descriptor.\n   *\n   * @returns Component property definition, or nothing if the property definition is not to be changed.\n   */\n      (\n          this: void,\n          descriptor: Descriptor<TValue, TClass>,\n      ) => Definition<TValue, TClass> | void;\n\n  /**\n   * Property definition to apply to existing property.\n   *\n   * When applying to decorated property, this definition updates its definition.\n   *\n   * When applying to virtual property assumed by one of {@link ComponentPropertyDecorator} methods, most of returned\n   * values ignored. Except for {@link Definition.componentDef component definition}, {@link Definition.get value\n   * reader}, and {@link Definition.set value setter}.\n   *\n   * @typeParam TValue - Property value type.\n   * @typeParam TClass - A type of component class.\n   */\n  export interface Definition<TValue, TClass extends ComponentClass = Class> {\n\n    /**\n     * Component definition to apply to component.\n     *\n     * When specified, it is used to enable certain functionality for decorated (or virtual) property.\n     */\n    readonly componentDef?: ComponentDef<InstanceType<TClass>>;\n\n    /**\n     * Whether to make the property enumerable.\n     *\n     * When specified, it is used as `enumerable` attribute value of decorated property descriptor.\n     */\n    readonly enumerable?: boolean;\n\n    /**\n     * Whether to make the property configurable.\n     *\n     * When specified, it is used as `configurable` attribute value of decorated property descriptor.\n     */\n    readonly configurable?: boolean;\n\n    /**\n     * Reads property value.\n     *\n     * When specified it changes how the property value is read.\n     *\n     * When neither {@link get}, nor {@link set} specified, the property access does not change.\n     *\n     * @param component - Target component instance.\n     * @param key - Property key.\n     *\n     * @returns Property value.\n     */\n    get?(this: void, component: InstanceType<TClass>, key: string | symbol): TValue;\n\n    /**\n     * Assigns new property value.\n     *\n     * When specified it changes how the property value is assigned.\n     *\n     * When neither {@link get}, nor {@link set} specified, the property access does not change.\n     *\n     * @param component - Target component instance.\n     * @param value - New property value.\n     * @param key - Property key.\n     */\n    set?(this: void, component: InstanceType<TClass>, value: TValue, key: string | symbol): void;\n\n  }\n\n}\n\n/**\n * Anonymous component property key.\n *\n * Used as a default virtual property key.\n *\n * @category Core\n */\nexport const AnonymousComponentProperty__symbol = (/*#__PURE__*/ Symbol('anonymous-component-property'));\n\n/**\n * Decorator of component property.\n *\n * Updates decorated property and component definition. Can be converted to {@link ComponentDecorator component\n * decorator} by calling appropriate method of returned decorator instance.\n *\n * @category Core\n * @typeParam TValue - Decorated property value type.\n * @typeParam TClass - A type of decorated component class.\n * @param define - Component property definition builders.\n *\n * @returns Component property decorator.\n */\nexport function ComponentProperty<TValue, TClass extends ComponentClass = Class>(\n    ...define: ComponentProperty.Definer<TValue, TClass>[]\n): ComponentPropertyDecorator<TValue, TClass> {\n\n  const decorator = (\n      proto: InstanceType<TClass>,\n      propertyKey: string | symbol,\n      descriptor?: TypedPropertyDescriptor<TValue>,\n  ): any | void => {\n\n    const updateDescriptor = ComponentProperty$updateDescriptor<TValue, TClass>(proto, propertyKey);\n\n    return decoratePropertyAccessor(\n        proto,\n        propertyKey,\n        descriptor,\n        desc => define.reduce(updateDescriptor, desc),\n    );\n  };\n  const decorateWith = (\n      accessor: ComponentProperty.Accessor<TValue, InstanceType<TClass>>,\n      key: string | symbol = AnonymousComponentProperty__symbol,\n      writable: boolean,\n  ): ComponentDecorator<TClass> => Component({\n    [ComponentDef__symbol](type: InstanceType<TClass>) {\n\n      const defineBy = ComponentProperty$defineBy(type, accessor, key, writable);\n\n      return ComponentDef.all(...define.map(defineBy));\n    },\n  });\n  const By = (\n      provider: ComponentProperty.Provider<TValue, InstanceType<TClass>>,\n      key?: string | symbol,\n  ): ComponentDecorator<TClass> => decorateWith(\n      {\n        get(component, key) {\n          return provider(component, key);\n        },\n      } as ComponentProperty.Accessor<TValue>,\n      key,\n      false,\n  );\n\n  const result = decorator as ComponentPropertyDecorator<TValue, TClass>;\n\n  result.With = (access, key) => decorateWith(access, key, true);\n  result.By = By;\n  result.As = (value, key?) => By(valueProvider(value), key);\n  result.Bind = (binder, key = AnonymousComponentProperty__symbol) => {\n\n    const accessor__symbol = Symbol(`${String(key)}:accessor`);\n\n    interface HostComponent {\n      [accessor__symbol]?: {\n        get(): TValue;\n        set(value: TValue): void;\n      };\n    }\n\n    const accessor = (component: HostComponent): {\n      get(): TValue;\n      set(value: TValue): void;\n    } => {\n\n      const existing = component[accessor__symbol];\n\n      if (existing) {\n        return existing;\n      }\n\n      const accessor = binder(component as InstanceType<TClass>, key);\n\n      return component[accessor__symbol] = {\n        get: accessor.get ? accessor.get.bind(accessor) : ComponentProperty$notReadable(key),\n        set: accessor.set ? accessor.set.bind(accessor) : ComponentProperty$notWritable(key),\n      };\n    };\n\n    return decorateWith(\n        {\n          get(component) {\n            return accessor(component).get();\n          },\n          set(component, value) {\n            return accessor(component).set(value);\n          },\n        },\n        key,\n        true,\n    );\n  };\n\n  return result;\n}\n\nfunction ComponentProperty$updateDescriptor<TValue, TClass extends ComponentClass>(\n    proto: InstanceType<TClass>,\n    propertyKey: string | symbol,\n): (\n    desc: PropertyAccessorDescriptor<TValue>,\n    definer: ComponentProperty.Definer<TValue, TClass>,\n) => PropertyAccessorDescriptor<TValue> {\n  return (\n      desc: PropertyAccessorDescriptor<TValue>,\n      definer: ComponentProperty.Definer<TValue, TClass>,\n  ): PropertyAccessorDescriptor<TValue> => {\n\n    const { get: getValue, set: setValue } = desc;\n    const type = proto.constructor as TClass;\n    const { get, set, configurable, enumerable, componentDef = {} } = definer({\n      type,\n      key: propertyKey,\n      readable: !!desc.get,\n      writable: !!desc.set,\n      enumerable: !!desc.enumerable,\n      configurable: !!desc.configurable,\n      get: getValue\n          ? ((component: InstanceType<TClass>) => getValue.call(component))\n          : ComponentProperty$notReadable(propertyKey),\n      set: setValue\n          ? ((component, value) => setValue.call(component, value))\n          : ComponentProperty$notWritable(propertyKey),\n    }) || {};\n\n    ComponentDef.define(type, componentDef);\n\n    const updated: PropertyAccessorDescriptor<TValue> = {\n      ...desc,\n      configurable: configurable ?? desc.configurable,\n      enumerable: enumerable ?? desc.enumerable,\n    };\n\n    if (get || set) {\n      updated.get = get && function (this: InstanceType<TClass>) {\n        return get(this, propertyKey);\n      };\n      updated.set = set && function (this: InstanceType<TClass>, value: TValue) {\n        set(this, value, propertyKey);\n      };\n    }\n\n    return updated;\n  };\n}\n\nfunction ComponentProperty$notReadable(propertyKey: string | symbol): () => never {\n  return () => { throw new TypeError(`\"${String(propertyKey)}\" is not readable`); };\n}\n\nfunction ComponentProperty$notWritable(propertyKey: string | symbol): () => never {\n  return () => { throw new TypeError(`\"${String(propertyKey)}\" is not writable`); };\n}\n\nfunction ComponentProperty$defineBy<TValue, TClass extends ComponentClass>(\n    type: InstanceType<TClass>,\n    { get, set }: ComponentProperty.Accessor<TValue, InstanceType<TClass>>,\n    key: string | symbol,\n    writable: boolean,\n): (\n    definer: ComponentProperty.Definer<TValue, TClass>,\n) => ComponentDef<InstanceType<TClass>> {\n  return definer => {\n\n    const def = definer({\n      type,\n      key,\n      readable: true,\n      writable,\n      enumerable: false,\n      configurable: false,\n      get: component => get(component, key),\n      set: (component, value) => set(component, value, key),\n    });\n\n    return (def && def.componentDef) || {};\n  };\n}\n","import { AfterEvent, AfterEvent__symbol, digOn_, EventKeeper, onceOn, OnEvent, trackValue } from '@proc7ts/fun-events';\nimport { ComponentContext } from './component-context';\n\n/**\n * A component slot.\n *\n * It is added to {@link ComponentElement component element} and contains a bound component context.\n *\n * Notifies on component binding.\n *\n * @category Core\n */\nexport interface ComponentSlot<T extends object = any> extends EventKeeper<[ComponentContext<T>?]> {\n\n  /**\n   * A context of the bound component.\n   */\n  readonly context: ComponentContext<T> | undefined;\n\n  /**\n   * An `AfterEvent` keeper of the bound component context.\n   */\n  readonly read: AfterEvent<[ComponentContext<T>?]>;\n\n  /**\n   * An `OnEvent` sender of the bound component {@link ComponentContext.whenReady readiness} event.\n   */\n  readonly whenReady: OnEvent<[ComponentContext<T>]>;\n\n  /**\n   * Binds a component to element.\n   *\n   * This method is not typically used by client code.\n   *\n   * @param context - The bound component context.\n   */\n  bind(context: ComponentContext<T>): void;\n\n  /**\n   * Unbinds component from element.\n   *\n   * This method is not typically used by client code.\n   */\n  unbind(): void;\n\n}\n\n/**\n * A key of component element property containing a reference to component slot.\n *\n * @category Core\n */\nexport const ComponentSlot__symbol = (/*#__PURE__*/ Symbol('component-slot'));\n\n/**\n * An element the component can be bound to.\n *\n * Such element may contain a {@link ComponentSlot component slot} containing a bound component context.\n *\n * @category Core\n * @typeParam T - A type of the bound component.\n */\nexport interface ComponentElement<T extends object = any> extends Element {\n\n  /**\n   * A component slot instance.\n   *\n   * A {@link ComponentSlot.of} function may be used to access the slot instance, or construct it when necessary.\n   */\n  [ComponentSlot__symbol]?: ComponentSlot<T>;\n\n}\n\n/**\n * @category Core\n */\nexport const ComponentSlot = {\n\n  /**\n   * Accesses a component slot of the given element. Attaches a new slot if necessary.\n   *\n   * @param element - Target element.\n   *\n   * @returns A component slot instance attached to the element.\n   */\n  of<T extends object>(this: void, element: ComponentElement<T>): ComponentSlot<T> {\n\n    const found = element[ComponentSlot__symbol];\n\n    if (found) {\n      return found;\n    }\n\n    return element[ComponentSlot__symbol] = new ComponentSlot$();\n  },\n\n};\n\nclass ComponentSlot$<T extends object> implements ComponentSlot<T> {\n\n  private readonly _ctx = trackValue<ComponentContext<T>>();\n  readonly whenReady: OnEvent<[ComponentContext<T>]>;\n\n  constructor() {\n    this.whenReady = this._ctx.read.do(\n        digOn_(ctx => ctx && ctx.whenReady),\n        onceOn,\n    );\n  }\n\n  get context(): ComponentContext<T> | undefined {\n    return this._ctx.it;\n  }\n\n  get read(): AfterEvent<[ComponentContext<T>?]> {\n    return this._ctx.read;\n  }\n\n  [AfterEvent__symbol](): AfterEvent<[ComponentContext<T>?]> {\n    return this._ctx.read;\n  }\n\n  bind(context: ComponentContext<T>): void {\n    this._ctx.it = context;\n  }\n\n  unbind(): void {\n    this._ctx.it = undefined;\n  }\n\n}\n\n\n","import {\n  ContextKey,\n  ContextKey__symbol,\n  ContextRegistry,\n  ContextValues,\n  SingleContextKey,\n} from '@proc7ts/context-values';\nimport { BootstrapContext } from '../bootstrap-context';\n\nconst BootstrapContextRegistry__key = (\n    /*#__PURE__*/ new SingleContextKey<BootstrapContextRegistry>('bootstrap-context-registry')\n);\n\n/**\n * @internal\n */\nexport class BootstrapContextRegistry extends ContextRegistry<BootstrapContext> {\n\n  static get [ContextKey__symbol](): ContextKey<BootstrapContextRegistry> {\n    return BootstrapContextRegistry__key;\n  }\n\n  readonly values: ContextValues;\n\n  static create(): BootstrapContextRegistry {\n    return new BootstrapContextRegistry();\n  }\n\n  private constructor() {\n    super();\n    this.provide({ a: BootstrapContextRegistry, is: this });\n    this.values = this.newValues();\n  }\n\n}\n","import { ContextRef, ContextRegistry, SingleContextKey } from '@proc7ts/context-values';\nimport { ComponentContext } from '../../component';\nimport { bootstrapDefault } from '../bootstrap-default';\n\nexport type PerComponentRegistry = ComponentContextRegistry;\n\nexport const PerComponentRegistry: ContextRef<PerComponentRegistry> = (\n    /*#__PURE__*/ new SingleContextKey<ComponentContextRegistry>(\n    'per-component-registry',\n    {\n      byDefault: bootstrapDefault(() => new ComponentContextRegistry()),\n    },\n));\n\n/**\n * @internal\n */\nexport class ComponentContextRegistry extends ContextRegistry<ComponentContext> {\n}\n","import { ContextRef, ContextRegistry, SingleContextKey } from '@proc7ts/context-values';\nimport { DefinitionContext } from '../../component/definition';\nimport { bootstrapDefault } from '../bootstrap-default';\n\n/**\n * @internal\n */\nexport type PerDefinitionRegistry = DefinitionContextRegistry;\n\n/**\n * @internal\n */\nexport const PerDefinitionRegistry: ContextRef<PerDefinitionRegistry> = (\n    /*#__PURE__*/ new SingleContextKey<DefinitionContextRegistry>(\n    'per-definition-registry',\n    {\n      byDefault: bootstrapDefault(bsContext => new DefinitionContextRegistry(bsContext)),\n    },\n));\n\n/**\n * @internal\n */\nexport class DefinitionContextRegistry extends ContextRegistry<DefinitionContext> {\n}\n","import { EventEmitter, onAny, OnEvent, onEventBy, supplyOn, trackValue, valueOn } from '@proc7ts/fun-events';\nimport { asis, superClassOf } from '@proc7ts/primitives';\nimport { Supply } from '@proc7ts/supply';\nimport { ComponentDef__symbol } from '../../component';\nimport { ComponentClass, DefinitionSetup } from '../../component/definition';\n\n/**\n * @internal\n */\nexport function onPostDefSetup(\n    componentType: ComponentClass,\n    supply: Supply,\n): OnEvent<[DefinitionSetup]> {\n\n  const { on } = postDefSetup(componentType);\n\n  return onEventBy(receiver => {\n    on({\n      supply: receiver.supply.needs(supply),\n      receive(ctx, setup) {\n\n        const whenReady = setup.whenReady.do(supplyOn(supply));\n        const whenComponent = setup.whenComponent.do(supplyOn(supply));\n\n        receiver.receive(ctx, {\n          get componentType() {\n            return setup.componentType;\n          },\n          get whenReady() {\n            return whenReady;\n          },\n          get whenComponent() {\n            return whenComponent;\n          },\n          perDefinition(spec) {\n            return setup.perDefinition(spec).needs(supply);\n          },\n          perComponent(spec) {\n            return setup.perComponent(spec).needs(supply);\n          },\n        });\n      },\n    });\n  });\n}\n\n/**\n * @internal\n */\nexport interface PostDefSetup<T extends object = any> {\n  readonly on: OnEvent<[DefinitionSetup<T>]>;\n  send(setup: DefinitionSetup): void;\n  setup(setup: DefinitionSetup<T>): void;\n}\n\nconst PostDefSetup__symbol = (/*#__PURE__*/ Symbol('post-def-setup'));\n\ninterface PostDefComponentClass<T extends object> extends ComponentClass<T> {\n  [PostDefSetup__symbol]?: PostDefSetup<T>;\n}\n\n/**\n * @internal\n */\nexport function postDefSetup<T extends object>(componentType: PostDefComponentClass<T>): PostDefSetup<T> {\n  // eslint-disable-next-line no-prototype-builtins\n  if (componentType.hasOwnProperty(PostDefSetup__symbol)) {\n    return componentType[PostDefSetup__symbol] as PostDefSetup<T>;\n  }\n\n  const tracker = trackValue<DefinitionSetup<T>>();\n  const emitter = new EventEmitter<[DefinitionSetup]>();\n  const onSetup: OnEvent<[DefinitionSetup<T>]> = tracker.read.do(valueOn(asis));\n  const on = onAny(onSetup, emitter);\n  const superType = superClassOf(componentType, type => ComponentDef__symbol in type);\n\n  if (superType) {\n\n    const superPostDefSetup = postDefSetup(superType);\n\n    on(setup => superPostDefSetup.send(setup));\n  }\n\n  const result: PostDefSetup<T> = {\n    on,\n    send(setup) {\n      emitter.send(setup);\n    },\n    setup(setup) {\n      tracker.it = setup;\n    },\n  };\n\n  Object.defineProperty(componentType, PostDefSetup__symbol, { value: result });\n\n  return result;\n}\n","import { SingleContextKey, SingleContextRef } from '@proc7ts/context-values';\n\n/**\n * A window the components bootstrap is performed against.\n *\n * @category Core\n */\nexport type BootstrapWindow = Window & typeof globalThis;\n\n/**\n * A key of bootstrap context value containing a window instance the bootstrap is performed against.\n *\n * Target value defaults to current window.\n *\n * @category Core\n */\nexport const BootstrapWindow: SingleContextRef<BootstrapWindow> = (/*#__PURE__*/ new SingleContextKey(\n    'window',\n    {\n      byDefault() {\n        return window;\n      },\n    },\n));\n","import { NamespaceAliaser } from '@frontmeans/namespace-aliaser';\nimport { SingleContextKey, SingleContextRef } from '@proc7ts/context-values';\n\n/**\n * Namespace aliaser used by default.\n *\n * Maps namespaces to their unique aliases.\n *\n * @category Core\n */\nexport type DefaultNamespaceAliaser = NamespaceAliaser;\n\n/**\n * A key of bootstrap context value containing the default namespace aliaser.\n *\n * @category Core\n */\nexport const DefaultNamespaceAliaser: SingleContextRef<DefaultNamespaceAliaser> = (\n    /*#__PURE__*/ new SingleContextKey<DefaultNamespaceAliaser>('default-namespace-aliaser')\n);\n","import { newRenderSchedule, RenderScheduler } from '@frontmeans/render-scheduler';\nimport { ContextValues, ContextValueSlot } from '@proc7ts/context-values';\nimport { ContextUpKey, ContextUpRef } from '@proc7ts/context-values/updatable';\nimport { AfterEvent, afterThe, digAfter } from '@proc7ts/fun-events';\nimport { BootstrapContext } from '../bootstrap-context';\nimport { BootstrapWindow } from './bootstrap-window';\n\n/**\n * Default rendering tasks scheduler.\n *\n * @category Core\n */\nexport type DefaultRenderScheduler = RenderScheduler;\n\n/**\n * @internal\n */\nclass DefaultRenderSchedulerKey extends ContextUpKey<DefaultRenderScheduler, RenderScheduler> {\n\n  readonly upKey: ContextUpKey.UpKey<DefaultRenderScheduler, RenderScheduler>;\n\n  constructor() {\n    super('default-render-scheduler');\n    this.upKey = this.createUpKey(\n        slot => slot.insert(slot.seed.do(digAfter(\n            (...fns) => {\n              if (fns.length) {\n                return afterThe(toDefaultRenderScheduler(slot.context, fns[fns.length - 1]));\n              }\n              if (slot.hasFallback && slot.or) {\n                return slot.or;\n              }\n              return afterThe(toDefaultRenderScheduler(slot.context, newRenderSchedule));\n            },\n        ))),\n    );\n  }\n\n  grow(\n      slot: ContextValueSlot<\n          DefaultRenderScheduler,\n          ContextUpKey.Source<RenderScheduler>,\n          AfterEvent<RenderScheduler[]>>,\n  ): void {\n\n    const { context } = slot;\n    const bsContext = context.get(BootstrapContext);\n\n    if (context !== bsContext) {\n      return slot.insert(bsContext.get(this, slot.hasFallback ? slot : undefined));\n    }\n\n    let delegated: DefaultRenderScheduler;\n\n    context.get(\n        this.upKey,\n        slot.hasFallback ? { or: slot.or != null ? afterThe(slot.or) : slot.or } : undefined,\n    )!(\n        scheduler => delegated = toDefaultRenderScheduler(context, scheduler),\n    );\n\n    slot.insert((...args) => delegated(...args));\n  }\n\n}\n\n/**\n * @internal\n */\nfunction toDefaultRenderScheduler(\n    context: ContextValues,\n    scheduler: RenderScheduler,\n): DefaultRenderScheduler {\n  return (options = {}) => scheduler({\n    ...options,\n    window: options.window || context.get(BootstrapWindow),\n  });\n}\n\n/**\n * A key of bootstrap context value containing {@link DefaultRenderScheduler} instance.\n *\n * Uses the default `RenderScheduler` (`newRenderSchedule()`) for {@link BootstrapWindow bootstrap window}.\n *\n * @category Core\n */\nexport const DefaultRenderScheduler: ContextUpRef<DefaultRenderScheduler, RenderScheduler> = (\n    /*#__PURE__*/ new DefaultRenderSchedulerKey()\n);\n","import { nodeDocument } from '@frontmeans/dom-primitives';\nimport { DrekContext, drekContextOf } from '@frontmeans/drek';\nimport { ContextRef, SingleContextKey } from '@proc7ts/context-values';\nimport { BootstrapContext } from '../bootstrap-context';\nimport { bootstrapDefault } from '../bootstrap-default';\nimport { DefaultNamespaceAliaser } from './default-namespace-aliaser';\nimport { DefaultRenderScheduler } from './default-render-scheduler';\n\n/**\n * A render kit used by default.\n *\n * @category Core\n */\nexport interface DefaultRenderKit {\n\n  /**\n   * Obtains a rendering context of the given node.\n   *\n   * Does the same as `drekContextOf()` function, and also makes sure that the rendering context for the document\n   * is initialized with {@link DefaultRenderScheduler} and {@link DefaultNamespaceAliaser}.\n   *\n   * @param node - Target node.\n   *\n   * @returns Target node rendering context.\n   */\n  contextOf(node: Node): DrekContext;\n\n}\n\n/**\n * A key of bootstrap context value containing {@link DefaultRenderKit} instance.\n *\n * @category Core\n */\nexport const DefaultRenderKit: ContextRef<DefaultRenderKit> = (\n    /*#__PURE__*/ new SingleContextKey<DefaultRenderKit>(\n        'default-render-kit',\n        {\n          byDefault: bootstrapDefault(DefaultRenderKit$new),\n        },\n    )\n);\n\nfunction DefaultRenderKit$new(bsContext: BootstrapContext): DefaultRenderKit {\n\n  const docs = new WeakMap<Document, 1>();\n  const initDoc = (doc: Document): void => {\n    if (!docs.get(doc)) {\n      docs.set(doc, 1);\n      drekContextOf(doc).update({\n        nsAlias: bsContext.get(DefaultNamespaceAliaser),\n        scheduler: bsContext.get(DefaultRenderScheduler),\n      });\n    }\n  };\n\n  return {\n    contextOf(node: Node): DrekContext {\n      initDoc(nodeDocument(node));\n      return drekContextOf(node);\n    },\n  };\n}\n","import { ComponentClass, DefinitionContext } from '../../component/definition';\n\n/**\n * @internal\n */\nexport const DefinitionContext__symbol = (/*#__PURE__*/ Symbol('definition-context'));\n\n/**\n * @internal\n */\nexport interface ComponentDefinitionClass<T extends object> extends ComponentClass<T> {\n  [DefinitionContext__symbol]?: DefinitionContext<T>;\n}\n\n/**\n * @internal\n */\nexport function definitionContextOf<T extends object>(\n    componentType: ComponentDefinitionClass<T>,\n): DefinitionContext<T> {\n  // eslint-disable-next-line no-prototype-builtins\n  if (!componentType.hasOwnProperty(DefinitionContext__symbol)) {\n    throw new TypeError(`Component is not defined: ${componentType}`);\n  }\n  return componentType[DefinitionContext__symbol] as DefinitionContext<T>;\n}\n","import { html__naming, isQualifiedName, QualifiedName } from '@frontmeans/namespace-aliaser';\nimport { ContextKey, ContextKey__symbol, SingleContextKey } from '@proc7ts/context-values';\nimport { Class, newPromiseResolver, PromiseResolver } from '@proc7ts/primitives';\nimport { BootstrapContext, bootstrapDefault } from '../../boot';\nimport { BootstrapWindow, DefaultNamespaceAliaser } from '../../boot/globals';\nimport { definitionContextOf } from '../../boot/impl/definition-context.symbol.impl';\nimport { ComponentClass } from './component-class';\n\n/**\n * @internal\n */\nconst CustomElements__key = (/*#__PURE__*/ new SingleContextKey<CustomElements>(\n    'custom-elements',\n    {\n      byDefault: bootstrapDefault(createCustomElements),\n    },\n));\n\n/**\n * Custom elements registry.\n *\n * This is used to register custom elements.\n *\n * Typically implemented by `window.customElements`.\n *\n * @category Core\n */\nexport abstract class CustomElements {\n\n  /**\n   * A key of bootstrap context value containing a `CustomElements` instance used to register custom\n   * elements.\n   *\n   * Target value defaults to `window.customElements` from the window provided under `[BootstrapWindow.key]`.\n   */\n  static get [ContextKey__symbol](): ContextKey<CustomElements> {\n    return CustomElements__key;\n  }\n\n  /**\n   * Defines custom element.\n   *\n   * @param componentTypeOrName - A component class constructor or custom element name. The latter may belong to\n   * namespace to avoid naming conflicts.\n   * @param elementType - A constructor of custom element to define.\n   */\n  abstract define(componentTypeOrName: ComponentClass | QualifiedName, elementType: Class): void;\n\n  /**\n   * Allows to wait for component definition.\n   *\n   * This corresponds to `window.customElements.whenDefined()` method.\n   *\n   * @param componentTypeOrName - Component class constructor or custom element name possibly belonging to some\n   * namespace.\n   *\n   * @return A promise that is resolved when custom element is registered.\n   *\n   * @throws TypeError If `componentType` does not contain a component definition.\n   */\n  abstract whenDefined(componentTypeOrName: ComponentClass | QualifiedName): Promise<void>;\n\n}\n\n/**\n * @internal\n */\nfunction createCustomElements(bsContext: BootstrapContext): CustomElements {\n\n  const customElements: CustomElementRegistry = bsContext.get(BootstrapWindow).customElements;\n  const nsAlias = bsContext.get(DefaultNamespaceAliaser);\n\n  class CustomElements$ extends CustomElements {\n\n    define(componentTypeOrName: ComponentClass | QualifiedName, elementType: Class): void {\n      if (isQualifiedName(componentTypeOrName)) {\n        customElements.define(html__naming.name(componentTypeOrName, nsAlias), elementType);\n        return;\n      }\n\n      const defContext = definitionContextOf(componentTypeOrName);\n      const { tagName, extend } = defContext.elementDef;\n\n      if (!tagName) {\n        componentResolver(componentTypeOrName).resolve(undefined);\n        return; // Anonymous component.\n      }\n      if (extend && extend.name) {\n        customElements.define(\n            tagName,\n            elementType,\n            {\n              extends: extend.name,\n            },\n        );\n      } else {\n        customElements.define(tagName, elementType);\n      }\n    }\n\n    whenDefined(componentTypeOrName: ComponentClass | string): Promise<void> {\n      if (isQualifiedName(componentTypeOrName)) {\n        return customElements.whenDefined(html__naming.name(componentTypeOrName, nsAlias));\n      }\n\n      const defContext = definitionContextOf(componentTypeOrName);\n      const { name } = defContext.elementDef;\n\n      if (!name) {\n        return componentResolver(componentTypeOrName).promise();\n      }\n\n      return customElements.whenDefined(html__naming.name(name, nsAlias));\n    }\n\n  }\n\n  return new CustomElements$();\n}\n\n/**\n * @internal\n */\nconst ComponentResolver__symbol = (/*#__PURE__*/ Symbol('component-resolver'));\n\n/**\n * @internal\n */\ninterface CustomComponentClass<T extends object = any> extends ComponentClass<T> {\n  [ComponentResolver__symbol]?: PromiseResolver;\n}\n\n/**\n * @internal\n */\nfunction componentResolver(componentType: CustomComponentClass): PromiseResolver {\n  // eslint-disable-next-line no-prototype-builtins\n  if (componentType.hasOwnProperty(ComponentResolver__symbol)) {\n    return componentType[ComponentResolver__symbol] as PromiseResolver;\n  }\n  return componentType[ComponentResolver__symbol] = newPromiseResolver();\n}\n","import { noop } from '../fn';\nimport { lazyValue } from '../value';\n\n/**\n * A resolver of promise that can be created later or not created at all.\n *\n * Creates the promise only on demand.\n *\n * The methods of this object do not require `this` context and can be called as functions.\n */\nexport interface PromiseResolver<T = void> {\n\n  /**\n   * Resolves the promise.\n   *\n   * Has no effect when the promised is already settled.\n   *\n   * Can be called before the promise constructed.\n   *\n   * @param resolution - Either a promise value, or a promise-like instance resolving to one.\n   */\n  resolve(this: void, resolution: T | PromiseLike<T>): void;\n\n  /**\n   * Rejects the promise.\n   *\n   * Has no effect when the promised is already settled.\n   *\n   * Can be called before the promise constructed.\n   *\n   * @param reason - Promise rejection reason.\n   */\n  reject(this: void, reason?: any): void;\n\n  /**\n   * Creates a promise resolved by {@link resolve}, or rejected by {@link reject}.\n   *\n   * The subsequent calls to this method return the same promise instance.\n   *\n   * @returns Created promise.\n   */\n  promise(this: void): Promise<T>;\n\n}\n\n/**\n * Creates a promise resolver.\n *\n * @returns New promise resolver.\n */\nexport function newPromiseResolver<T = void>(): PromiseResolver<T> {\n\n  let resolvePromise: (value: T | PromiseLike<T>) => void;\n  let rejectPromise: (reason?: any) => void;\n  let buildPromise = lazyValue(() => new Promise<T>((resolve, reject) => {\n    resolvePromise = resolve;\n    rejectPromise = reject;\n  }));\n  const settle = (resolution: () => Promise<T>): void => {\n    buildPromise = lazyValue(resolution);\n    resolvePromise = noop;\n    rejectPromise = noop;\n  };\n\n  resolvePromise = value => {\n    settle(() => Promise.resolve(value));\n  };\n  rejectPromise = error => {\n    settle(() => Promise.reject(error));\n  };\n\n  return {\n    resolve(value?) {\n      resolvePromise(value);\n    },\n    reject(reason) {\n      rejectPromise(reason);\n    },\n    promise() {\n      return buildPromise();\n    },\n  };\n}\n","import { SingleContextKey } from '@proc7ts/context-values';\nimport { DefinitionContext } from './definition-context';\n\n/**\n * @internal\n */\nexport const DefinitionContext__key = (/*#__PURE__*/ new SingleContextKey<DefinitionContext>('definition-context'));\n","import { html__naming, QualifiedName } from '@frontmeans/namespace-aliaser';\nimport { SingleContextKey, SingleContextRef } from '@proc7ts/context-values';\nimport { Class } from '@proc7ts/primitives';\nimport { BootstrapWindow, DefaultNamespaceAliaser } from '../../boot/globals';\nimport { ComponentDef } from '../component-def';\nimport { DefinitionContext__key } from './definition.context.key.impl';\n\n/**\n * Custom element definition meta.\n *\n * @category Core\n */\nexport interface ElementDef {\n\n  /**\n   * Custom element name.\n   *\n   * The name may belong to some namespace to avoid naming conflicts. I.e. it can be either a string, or\n   * name/namespace tuple.\n   *\n   * When omitted an anonymous component will be registered. Such component is not bound to custom element, but it\n   * still can be mounted.\n   */\n  readonly name: QualifiedName | undefined;\n\n  /**\n   * Resolved custom HTML element's tag name, if any.\n   *\n   * In contrast to {@link name} this one is always a string.\n   */\n  readonly tagName: string | undefined;\n\n  /**\n   * Existing element to extend by custom one.\n   */\n  readonly extend: ElementDef.Extend;\n\n}\n\n/**\n * A key of definition context value containing a custom element definition.\n *\n * Target value defaults to `HTMLElement` from the window provided under `[BootstrapWindow.key]`,\n * unless `ComponentDef.extend.type` is specified.\n *\n * @category Core\n */\nexport const ElementDef: SingleContextRef<ElementDef> = (/*#__PURE__*/ new SingleContextKey<ElementDef>(\n    'element-def',\n    {\n      byDefault(values) {\n\n        const componentType = values.get(DefinitionContext__key).componentType;\n        const { name, extend } = ComponentDef.of(componentType);\n        let tagName: string | undefined;\n\n        const elementExtend: ElementDef.Extend = {\n          get type() {\n            return extend && extend.type || values.get(BootstrapWindow).HTMLElement;\n          },\n          get name() {\n            return extend && extend.name;\n          },\n        };\n\n        return {\n          get name() {\n            return name;\n          },\n          get tagName() {\n            return tagName || (name && (tagName = html__naming.name(name, values.get(DefaultNamespaceAliaser))));\n          },\n          get extend() {\n            return elementExtend;\n          },\n        };\n      },\n    },\n));\n\n/**\n * @category Core\n */\nexport namespace ElementDef {\n\n  /**\n   * The definition of element to extend by custom one.\n   */\n  export interface Extend {\n\n    /**\n     * The class constructor of element to extend.\n     */\n    readonly type: Class;\n\n    /**\n     * The name of element to extend.\n     *\n     * This is to support `as` attribute of standard HTML element. Note that this is not supported by polyfills.\n     */\n    readonly name?: string;\n\n  }\n\n}\n","import { ContextKey, ContextKey__symbol, ContextValues, ContextValueSpec } from '@proc7ts/context-values';\nimport { OnEvent } from '@proc7ts/fun-events';\nimport { Class } from '@proc7ts/primitives';\nimport { Supply } from '@proc7ts/supply';\nimport { ComponentContext } from '../component-context';\nimport { ComponentElement } from '../component-slot';\nimport { ComponentClass } from './component-class';\nimport { DefinitionContext__key } from './definition.context.key.impl';\nimport { ElementDef } from './element-def';\n\n/**\n * Component definition context.\n *\n * Extends `ContextValues` interface. The values are provided by corresponding providers registered with\n * {@link BootstrapSetup.perDefinition} and {@link DefinitionSetup.perDefinition} methods. All {@link BootstrapContext}\n * values are available too.\n *\n * @category Core\n * @typeParam T - A type of component.\n */\nexport abstract class DefinitionContext<T extends object = any> extends ContextValues {\n\n  /**\n   * A key of definition context value containing the definition context itself.\n   */\n  static get [ContextKey__symbol](): ContextKey<DefinitionContext> {\n    return DefinitionContext__key;\n  }\n\n  /**\n   * Component class constructor.\n   */\n  abstract readonly componentType: ComponentClass<T>;\n\n  /**\n   * Custom element class constructor.\n   *\n   * It is an error accessing this property before the element class is created, e.g. from inside of\n   * {@link ComponentDef.define} function. In such case you may wish to add a `whenReady()` callback.\n   */\n  abstract readonly elementType: Class;\n\n  /**\n   * Custom element definition.\n   */\n  get elementDef(): ElementDef {\n    return this.get(ElementDef);\n  }\n\n  /**\n   * An `OnEvent` sender of component definition context upon its readiness.\n   *\n   * The custom element class is not constructed until component definition is complete.\n   * The registered receiver will be notified when the custom element class is constructed.\n   *\n   * If the custom element class is constructed already, the receiver will be notified immediately.\n   */\n  abstract readonly whenReady: OnEvent<[this]>;\n\n  /**\n   * An `OnEvent` sender of component context upon its instantiation.\n   *\n   * If component instantiated after the receiver is registered, that receiver would receive an instantiated component's\n   * context immediately.\n   *\n   * If component already exists when the receiver is registered, that receiver would receive instantiated component's\n   * context only when/if component is {@link ComponentContext.whenConnected connected}. This is to prevent resource\n   * leaks on destroyed components.\n   */\n  abstract readonly whenComponent: OnEvent<[ComponentContext<T>]>;\n\n  /**\n   * Mounts a component to arbitrary element.\n   *\n   * This method creates a component, but instead of creating a custom element for, it mounts it to the target\n   * `element`.\n   *\n   * It is up to the features to update the target element. They can use a {@link ComponentContext.mounted} flag\n   * to check whether the component is mounted or constructed in a standard way.\n   *\n   * The constructed component connection state is maintained by [Document Render Kit].\n   *\n   * [Document Render Kit]: https://www.npmjs.com/package/@frontmeans/drek\n   *\n   * @param element - Target element to mount new component to.\n   *\n   * @returns Mounted component context.\n   *\n   * @throws Error If target element is already bound to some component.\n   */\n  abstract mountTo(element: ComponentElement<T>): ComponentContext<T>;\n\n  /**\n   * Provides a value available in the context of each component of the defined component type.\n   *\n   * @typeParam TSrc - The type of context value sources.\n   * @typeParam TDeps - A type of dependencies.\n   * @param spec - Component context value specifier.\n   *\n   * @returns A value supply that removes the given context value specifier once cut off.\n   */\n  abstract perComponent<TSrc, TDeps extends any[]>(\n      spec: ContextValueSpec<ComponentContext<T>, unknown, TSrc, TDeps>,\n  ): Supply;\n\n}\n","import { ComponentContext, ComponentContext__symbol } from '../component-context';\nimport { ComponentClass } from './component-class';\n\nconst ComponentConstructor__symbol = (/*#__PURE__*/ Symbol('newComponent'));\n\ntype ComponentConstructor<T extends object> = (this: ComponentType<T>, context: ComponentContext<T>) => T;\n\ninterface ComponentType<T extends object> extends ComponentClass<T> {\n\n  [ComponentConstructor__symbol]?: ComponentConstructor<T>;\n\n}\n\n/**\n * @internal\n */\nexport function newComponent<T extends object>(context: ComponentContext<T>): T {\n\n  const componentType = context.componentType as ComponentType<T>;\n\n  if (!componentType[ComponentConstructor__symbol]) {\n    componentType[ComponentConstructor__symbol] = newComponentConstructor(componentType);\n  }\n\n  return componentType[ComponentConstructor__symbol]!(context);\n}\n\nfunction newComponentConstructor<T extends object>(componentType: ComponentType<T>): ComponentConstructor<T> {\n\n  // Component context reference specific to component class.\n  const context__symbol = Symbol('component-context');\n\n  type ComponentInstance = T & {\n    [context__symbol]?: ComponentContext<T>;\n  };\n\n  let defaultContext: ComponentContext<T> | undefined;\n\n  componentType.prototype[ComponentContext__symbol] = function (\n      this: ComponentInstance,\n  ): ComponentContext<T> {\n    return this[context__symbol] || (this[context__symbol] = defaultContext)!;\n  };\n\n  return function (this: ComponentType<T>, context: ComponentContext<T>): T {\n\n    const prevContext = defaultContext;\n\n    // Ensure the component context is available in component constructor.\n    defaultContext = context;\n    try {\n\n      const component = new this(context) as ComponentInstance;\n\n      component[context__symbol] = context;\n\n      return component;\n    } finally {\n      defaultContext = prevContext;\n    }\n  };\n}\n","import { AfterEvent, filterOn_, mapAfter_, onceOn, OnEvent, onEventBy, trackValue } from '@proc7ts/fun-events';\nimport { valueProvider } from '@proc7ts/primitives';\nimport { Supply } from '@proc7ts/supply';\nimport { ComponentContext } from '../../component';\n\nconst enum ComponentStatusValue {\n  Building,\n  Ready,\n  Settled,\n  Connected,\n}\n\n/**\n * @internal\n */\nexport class ComponentStatus<TCtx extends ComponentContext> {\n\n  private readonly _val = trackValue<ComponentStatusValue>(ComponentStatusValue.Building);\n  private _canSettle: 0 | 1 = 0;\n\n  constructor(private readonly _ctx: TCtx) {\n  }\n\n  get supply(): Supply {\n    return this._val.supply;\n  }\n\n  read(): AfterEvent<[TCtx]> {\n    return (this.read = valueProvider(this._val.read.do(\n        mapAfter_(valueProvider(this._ctx)),\n    )))();\n  }\n\n  isReady(): boolean {\n    return !!this._val.it && !this._val.supply.isOff;\n  }\n\n  onceReady(): OnEvent<[TCtx]> {\n    return (this.onceReady = valueProvider(this.read().do(\n        ComponentStatus$once(({ ready }) => ready),\n    )))();\n  }\n\n  whenReady(): OnEvent<[TCtx]> {\n    return (this.whenReady = valueProvider(this.onceReady().do(\n        onceOn,\n    )))();\n  }\n\n  isSettled(): boolean {\n    return this._val.it >= ComponentStatusValue.Settled && !this._val.supply.isOff;\n  }\n\n  onceSettled(): OnEvent<[TCtx]> {\n    return (this.onceSettled = valueProvider(this.read().do(\n        ComponentStatus$once(({ settled }) => settled),\n    )))();\n  }\n\n  whenSettled(): OnEvent<[TCtx]> {\n    return (this.whenSettled = valueProvider(this.onceSettled().do(\n        onceOn,\n    )))();\n  }\n\n  isConnected(): boolean {\n    return this._val.it >= ComponentStatusValue.Connected && !this._val.supply.isOff;\n  }\n\n  onceConnected(): OnEvent<[TCtx]> {\n    return (this.onceConnected = valueProvider(this.read().do(\n        // Filtering is enough, as there is no status after \"connected\"\n        filterOn_(({ connected }) => connected),\n    )))();\n  }\n\n  whenConnected(): OnEvent<[TCtx]> {\n    return (this.whenConnected = valueProvider(this.onceConnected().do(\n        onceOn,\n    )))();\n  }\n\n  ready(): void {\n    this._val.it = ComponentStatusValue.Ready;\n  }\n\n  settle(): void {\n    if (this._canSettle && this._val.it < ComponentStatusValue.Settled) {\n      // Prevent settling until exiting custom element constructor\n      this._val.it = ComponentStatusValue.Settled;\n    }\n  }\n\n  connect(): void {\n    this._val.it = ComponentStatusValue.Connected;\n  }\n\n  create(): void {\n    this._canSettle = 1; // Can settle now\n  }\n\n}\n\nfunction ComponentStatus$once<TCtx extends ComponentContext>(\n    test: (context: TCtx) => boolean,\n): (input: OnEvent<[TCtx]>) => OnEvent<[TCtx]> {\n  return input => onEventBy(receiver => {\n\n      let value = false;\n\n      input({\n        supply: receiver.supply,\n        receive(eventCtx, componentCtx) {\n\n          const newValue = test(componentCtx);\n\n          if (newValue && !value) {\n            value = newValue;\n            receiver.receive(eventCtx, componentCtx);\n          }\n        },\n      });\n    });\n}\n","import { OnEvent } from '../on-event';\nimport { shareOn } from './share-on';\nimport { translateOn_ } from './translate-on';\n\n/**\n * Creates an event processor that passes incoming events implementing the given type only.\n *\n * @category Event Processing\n * @typeParam TValue - Incoming value type. This is a list of the test function parameter types.\n * @typeParam TMatch - Required value type.\n * @param test - Test function accepting incoming event as its only parameter, and returning truthy value if the value\n * implements the given type, or falsy one otherwise.\n *\n * @returns {@link OnEvent} sender mapper function.\n */\nexport function filterOn<TValue, TMatch extends TValue>(\n    test: (this: void, event: TValue) => event is TMatch,\n): (this: void, supplier: OnEvent<[TValue]>) => OnEvent<[TMatch]>;\n\n/**\n * Creates an event processor that passes incoming events matching the given condition only.\n *\n * @category Event Processing\n * @typeParam TEvent - An event type. This is a list of the test function parameter types.\n * @param test - Test function accepting incoming event as its parameters, and returning truthy value for matching\n * events, or falsy one otherwise.\n *\n * @returns {@link OnEvent} sender mapper function.\n */\nexport function filterOn<TEvent extends any[]>(\n    test: (this: void, ...event: TEvent) => boolean,\n): (this: void, supplier: OnEvent<TEvent>) => OnEvent<TEvent>;\n\nexport function filterOn<TEvent extends any[]>(\n    test: (this: void, ...event: TEvent) => boolean,\n): (this: void, supplier: OnEvent<TEvent>) => OnEvent<TEvent> {\n\n  const map = filterOn_(test);\n\n  return supplier => shareOn(map(supplier));\n}\n\n/**\n * Creates an event processor that passes incoming events implementing the given type only, and does not share\n * the outgoing events supply.\n *\n * @category Event Processing\n * @typeParam TValue - Incoming value type. This is a list of the test function parameter types.\n * @typeParam TMatch - Required value type.\n * @param test - Test function accepting incoming event as its only parameter, and returning truthy value if the value\n * implements the given type, or falsy one otherwise.\n *\n * @returns {@link OnEvent} sender mapper function.\n */\nexport function filterOn_<TValue, TMatch extends TValue>(// eslint-disable-line @typescript-eslint/naming-convention\n    test: (this: void, event: TValue) => event is TMatch,\n): (this: void, supplier: OnEvent<[TValue]>) => OnEvent<[TMatch]>;\n\n/**\n * Creates an event processor that passes incoming events matching the given condition only, and does not share\n * the outgoing events supply.\n *\n * @category Event Processing\n * @typeParam TEvent - An event type. This is a list of the test function parameter types.\n * @param test - Test function accepting incoming event as its parameters, and returning truthy value for matching\n * events, or falsy one otherwise.\n *\n * @returns {@link OnEvent} sender mapper function.\n */\nexport function filterOn_<TEvent extends any[]>(// eslint-disable-line @typescript-eslint/naming-convention\n    test: (this: void, ...event: TEvent) => boolean,\n): (this: void, supplier: OnEvent<TEvent>) => OnEvent<TEvent>;\n\nexport function filterOn_<TEvent extends any[]>(// eslint-disable-line @typescript-eslint/naming-convention\n    test: (this: void, ...event: TEvent) => boolean,\n): (this: void, supplier: OnEvent<TEvent>) => OnEvent<TEvent> {\n  return translateOn_((send, ...event) => test(...event) && send(...event));\n}\n","import { AfterEvent, onceOn, OnEvent } from '@proc7ts/fun-events';\nimport { noop, valueProvider } from '@proc7ts/primitives';\nimport { Supply } from '@proc7ts/supply';\nimport { ComponentContext, ComponentContext__symbol, ComponentInstance, ComponentSlot } from '../../component';\nimport { ComponentClass } from '../../component/definition';\nimport { newComponent } from '../../component/definition/component.impl';\nimport { DefaultRenderKit } from '../globals';\nimport { ComponentStatus } from './component-status.impl';\nimport { DefinitionContext$ } from './definition-context.impl';\n\n/**\n * @internal\n */\nexport abstract class ComponentContext$<T extends object> extends ComponentContext<T> {\n\n  readonly get: ComponentContext<T>['get'];\n  private readonly _status: ComponentStatus<this>;\n\n  constructor(\n      readonly _definitionContext: DefinitionContext$<T>,\n      readonly element: any,\n  ) {\n    super();\n\n    const registry = _definitionContext._newComponentRegistry();\n\n    registry.provide({ a: ComponentContext, is: this });\n    this.get = registry.newValues().get;\n    this._status = new ComponentStatus(this);\n\n    // Ignore immediate settlement, as is typically leads to DOM manipulations prohibited inside constructor.\n    let whenSettled: () => void = noop;\n\n    this.get(DefaultRenderKit)\n        .contextOf(element)\n        .whenSettled(_drekCtx => whenSettled())\n        .needs(this);\n\n    // Assume the settlement would happen outside the constructor.\n    whenSettled = () => this.settle();\n  }\n\n  get componentType(): ComponentClass<T> {\n    return this._definitionContext.componentType;\n  }\n\n  get component(): ComponentInstance<T> {\n    return this._component();\n  }\n\n  get supply(): Supply {\n    return this._status.supply;\n  }\n\n  get ready(): boolean {\n    return this._status.isReady();\n  }\n\n  get onceReady(): OnEvent<[this]> {\n    return this._status.onceReady();\n  }\n\n  get whenReady(): OnEvent<[this]> {\n    return this._status.whenReady();\n  }\n\n  get settled(): boolean {\n    return this._status.isSettled();\n  }\n\n  get onceSettled(): OnEvent<[this]> {\n    return this._status.onceSettled();\n  }\n\n  get whenSettled(): OnEvent<[this]> {\n    return this._status.whenSettled();\n  }\n\n  get connected(): boolean {\n    return this._status.isConnected();\n  }\n\n  get onceConnected(): OnEvent<[this]> {\n    return this._status.onceConnected();\n  }\n\n  get whenConnected(): OnEvent<[this]> {\n    return this._status.whenConnected();\n  }\n\n  get readStatus(): AfterEvent<[this]> {\n    return this._status.read();\n  }\n\n  _component(): T {\n    throw new TypeError('Component is not constructed yet. Consider to use a `whenReady()` callback');\n  }\n\n  settle(): void {\n    this._status.settle();\n  }\n\n  destroy(reason?: any): void {\n    try {\n      this._status.supply.off(reason);\n    } finally {\n      delete this.component[ComponentContext__symbol];\n      this._component = componentDestroyed;\n      ComponentSlot.of(this.element).unbind();\n      removeElement(this.element);\n    }\n  }\n\n  _createComponent(): this {\n\n    const whenComponent = this._definitionContext._whenComponent;\n\n    let lastRev = 0;\n\n    ComponentSlot.of<T>(this.element).bind(this);\n    whenComponent.readNotifier.do(onceOn)(notifier => lastRev = notifier(this, lastRev));\n    this.whenConnected(() => {\n      whenComponent.readNotifier({\n        supply: new Supply().needs(this),\n        receive: (_, notifier) => {\n          lastRev = notifier(this, lastRev);\n        },\n      });\n    });\n    this._definitionContext._elementBuilder.components.send(this);\n\n    const component = newComponent(this);\n\n    this._component = valueProvider(component);\n    this._status.ready();\n\n    return this;\n  }\n\n  _connect(): void {\n    this._status.connect();\n  }\n\n  _created(): void {\n    this._status.create();\n  }\n\n}\n\n/**\n * @internal\n */\nexport class ComponentContext$Mounted<T extends object> extends ComponentContext$<T> {\n\n  get mounted(): true {\n    return true;\n  }\n\n}\n\nfunction removeElement(element: Element): void {\n\n  const { parentNode } = element;\n\n  if (parentNode) {\n    parentNode.removeChild(element);\n  }\n}\n\nfunction componentDestroyed(): never {\n  throw new TypeError('Component destroyed already');\n}\n","import { CustomHTMLElementClass } from '@frontmeans/dom-primitives';\nimport { Class } from '@proc7ts/primitives';\nimport { ComponentElement, ComponentSlot } from '../../component';\nimport { ElementDef } from '../../component/definition';\nimport { ComponentContext$ } from './component-context.impl';\nimport { DefinitionContext$ } from './definition-context.impl';\n\nclass ComponentContext$Custom<T extends object> extends ComponentContext$<T> {\n\n  get mounted(): false {\n    return false;\n  }\n\n}\n\n/**\n * @internal\n */\nexport function customElementType<T extends object>(\n    definitionContext: DefinitionContext$<T>,\n): Class {\n\n  const elementDef = definitionContext.get(ElementDef);\n\n  class CustomElement$ extends (elementDef.extend.type as CustomHTMLElementClass) implements ComponentElement {\n\n    constructor() {\n      super();\n\n      const context = new ComponentContext$Custom(definitionContext, this);\n\n      context._createComponent();\n      context._created();\n    }\n\n    connectedCallback(): void {\n      super.connectedCallback?.();\n      (ComponentSlot.of<T>(this).context as ComponentContext$<T>)._connect();\n    }\n\n    disconnectedCallback(): void {\n      (ComponentSlot.of<T>(this).context as ComponentContext$<T>).destroy();\n      super.disconnectedCallback?.();\n    }\n\n  }\n\n  return CustomElement$;\n}\n","import { AfterEvent, EventEmitter, mapAfter_, OnEvent, onEventBy, trackValue } from '@proc7ts/fun-events';\nimport { ComponentContext } from '../../component';\n\nexport class WhenComponent<T extends object> {\n\n  readonly onCreated: OnEvent<[ComponentContext<T>]>;\n  readonly readNotifier: AfterEvent<[ComponentNotifier<T>]>;\n\n  constructor() {\n\n    const currentRev = trackValue(0);\n    const created = new EventEmitter<[ComponentContext<T>, number]>();\n\n    this.onCreated = onEventBy(receiver => {\n\n      const receiverRev = currentRev.it + 1;\n\n      created.on({\n        supply: receiver.supply,\n        receive: (eventContext, componentContext, notifiedRev) => {\n          if (notifiedRev < receiverRev) {\n            // Notify only receivers added after the last notification\n            receiver.receive(\n                {\n                  onRecurrent(recurrentReceiver) {\n                    eventContext.onRecurrent(recurrentContext => recurrentReceiver(recurrentContext));\n                  },\n                },\n                componentContext,\n            );\n          }\n        },\n      });\n\n      ++currentRev.it;\n    });\n    this.readNotifier = currentRev.read.do(\n        mapAfter_(\n            rev => (context, notifiedRev) => {\n              created.send(context, notifiedRev);\n              return rev;\n            },\n        ),\n    );\n  }\n\n}\n\nexport type ComponentNotifier<T extends object> = (\n    this: void,\n    context: ComponentContext<T>,\n    notifiedRev: number,\n) => number;\n","import { ContextValues, ContextValueSpec } from '@proc7ts/context-values';\nimport { mapOn_, onceOn, OnEvent, trackValue, translateOn, ValueTracker } from '@proc7ts/fun-events';\nimport { Class, valueProvider } from '@proc7ts/primitives';\nimport { Supply } from '@proc7ts/supply';\nimport { ComponentContext, ComponentDef, ComponentElement, ComponentSlot } from '../../component';\nimport { DefinitionContext, DefinitionSetup } from '../../component/definition';\nimport { BootstrapContext } from '../bootstrap-context';\nimport { DefaultRenderKit } from '../globals';\nimport { ComponentContextRegistry, PerComponentRegistry } from './component-context-registry.impl';\nimport { ComponentContext$Mounted } from './component-context.impl';\nimport { customElementType } from './custom-element.impl';\nimport { DefinitionContextRegistry, PerDefinitionRegistry } from './definition-context-registry.impl';\nimport { ComponentDefinitionClass, DefinitionContext__symbol } from './definition-context.symbol.impl';\nimport { ElementBuilder } from './element-builder.impl';\nimport { postDefSetup } from './post-def-setup.impl';\nimport { WhenComponent } from './when-component.impl';\n\n/**\n * @internal\n */\nexport class DefinitionContext$<T extends object> extends DefinitionContext<T> {\n\n  readonly whenReady: OnEvent<[this]>;\n  readonly get: ContextValues['get'];\n  private readonly _def: ComponentDef.Options<T>;\n  readonly _whenComponent = new WhenComponent<T>();\n  private readonly _ready: ValueTracker<boolean>;\n  private readonly _whenReady: OnEvent<[]>;\n  private readonly _perComponentRegistry: ComponentContextRegistry;\n\n  constructor(\n      readonly _bsContext: BootstrapContext,\n      readonly _elementBuilder: ElementBuilder,\n      readonly componentType: ComponentDefinitionClass<T>,\n  ) {\n    super();\n    this._ready = trackValue(false);\n    this._whenReady = this._ready.read.do(translateOn((send, ready) => ready && send()));\n    this._def = ComponentDef.of(componentType);\n\n    const definitionContextRegistry = new DefinitionContextRegistry(_bsContext.get(PerDefinitionRegistry).seeds());\n\n    definitionContextRegistry.provide({ a: DefinitionContext, is: this });\n\n    this.get = definitionContextRegistry.newValues().get;\n\n    const parentPerComponentRegistry = _bsContext.get(PerComponentRegistry).append(seedKey => this.get(seedKey));\n    this._perComponentRegistry = new ComponentContextRegistry(parentPerComponentRegistry.seeds());\n\n    this.whenReady = this._whenReady.do(mapOn_(valueProvider(this)), onceOn);\n\n    const definitionSetup: DefinitionSetup<T> = {\n      get componentType() {\n        return componentType;\n      },\n      whenReady: this.whenReady,\n      whenComponent: this.whenComponent,\n      perDefinition: spec => definitionContextRegistry.provide(spec),\n      perComponent: spec => this._perComponentRegistry.provide(spec),\n    };\n\n    this._def.setup?.(definitionSetup);\n    postDefSetup(componentType).setup(definitionSetup);\n  }\n\n  get elementType(): Class {\n    return this._elementType();\n  }\n\n  get whenComponent(): OnEvent<[ComponentContext<T>]> {\n    return this._whenComponent.onCreated;\n  }\n\n  mountTo(element: ComponentElement<T>): ComponentContext<T> {\n\n    const slot = ComponentSlot.of(element);\n\n    if (slot.context) {\n      throw new Error(`Element ${String(element)} already bound to component`);\n    }\n\n    const context = new ComponentContext$Mounted(this, element);\n\n    context._createComponent();\n    context.get(DefaultRenderKit)\n        .contextOf(element)\n        .whenConnected(() => context._connect())\n        .needs(context);\n    context._created();\n\n    return context;\n  }\n\n  perComponent<TSrc, TDeps extends any[]>(\n      spec: ContextValueSpec<ComponentContext<T>, unknown, TSrc, TDeps>,\n  ): Supply {\n    return this._perComponentRegistry.provide(spec);\n  }\n\n  _newComponentRegistry(): ComponentContextRegistry {\n    return new ComponentContextRegistry(this._perComponentRegistry.seeds());\n  }\n\n  _elementType(): Class {\n    throw new Error('Custom element class is not constructed yet. Consider to use a `whenReady()` callback');\n  }\n\n  _define(): void {\n    this._def.define?.(this);\n    this._elementBuilder.definitions.send(this);\n    this._elementType = valueProvider(customElementType(this));\n    this.componentType[DefinitionContext__symbol] = this;\n    this._ready.it = true;\n  }\n\n}\n","import { SingleContextKey, SingleContextRef } from '@proc7ts/context-values';\nimport { EventEmitter } from '@proc7ts/fun-events';\nimport { ComponentContext } from '../../component';\nimport { ComponentClass, DefinitionContext } from '../../component/definition';\nimport { BootstrapContext } from '../bootstrap-context';\nimport { bootstrapDefault } from '../bootstrap-default';\nimport { DefinitionContext$ } from './definition-context.impl';\n\n/**\n * @internal\n */\nexport interface ElementBuilder {\n  readonly definitions: EventEmitter<[DefinitionContext]>;\n  readonly components: EventEmitter<[ComponentContext]>;\n  buildElement<T extends object>(this: void, componentType: ComponentClass<T>): DefinitionContext<T>;\n}\n\n/**\n * @internal\n */\nexport const ElementBuilder: SingleContextRef<ElementBuilder> = (/*#__PURE__*/ new SingleContextKey<ElementBuilder>(\n    'element-builder',\n    {\n      byDefault: bootstrapDefault(newElementBuilder),\n    },\n));\n\nfunction newElementBuilder(bsContext: BootstrapContext): ElementBuilder {\n  return {\n    definitions: new EventEmitter<[DefinitionContext]>(),\n    components: new EventEmitter<[ComponentContext]>(),\n    buildElement<T extends object>(componentType: ComponentClass<T>) {\n\n      const definitionContext = new DefinitionContext$(bsContext, this, componentType);\n\n      definitionContext._define();\n\n      return definitionContext;\n    },\n  };\n\n}\n","import { ContextModule } from '@proc7ts/context-values/updatable';\nimport { valueProvider } from '@proc7ts/primitives';\nimport { ElementBuilder } from '../../boot/impl';\nimport { ComponentClass, CustomElements } from '../../component/definition';\nimport { BootstrapWorkbench, componentDefStage } from './bootstrap-workbench.impl';\n\n/**\n * @internal\n */\nexport class ComponentRegistry {\n\n  private _components?: ComponentClass[] = undefined;\n\n  constructor(private readonly _setup: ContextModule.Setup) {\n  }\n\n  define<T extends object>(componentType: ComponentClass<T>): void {\n    if (this._components) {\n      this._components.push(componentType);\n    } else {\n      this._components = [componentType];\n      this._defineAll(this._components);\n    }\n  }\n\n  private _defineAll(components: readonly ComponentClass[]): void {\n\n    const workbench = this._setup.get(BootstrapWorkbench);\n    const whenDefined = workbench.work(componentDefStage).run(() => {\n\n      const customElements = this._setup.get(CustomElements);\n      const elementBuilder = this._setup.get(ElementBuilder);\n\n      components.forEach(componentType => {\n\n        const defContext = elementBuilder.buildElement(componentType);\n\n        customElements.define(componentType, defContext.elementType);\n      });\n\n      this._components = undefined;\n    });\n\n    this._setup.initBy(valueProvider(whenDefined));\n  }\n\n}\n","import { ContextRegistry, ContextValueSpec } from '@proc7ts/context-values';\nimport { ContextModule } from '@proc7ts/context-values/updatable';\nimport { onceOn, OnEvent, supplyOn, valueOn_ } from '@proc7ts/fun-events';\nimport { Class } from '@proc7ts/primitives';\nimport { Supply } from '@proc7ts/supply';\nimport { BootstrapContext } from '../../boot';\nimport {\n  BootstrapContextRegistry,\n  ElementBuilder,\n  onPostDefSetup,\n  PerComponentRegistry,\n  PerDefinitionRegistry,\n} from '../../boot/impl';\nimport { ComponentContext } from '../../component';\nimport { ComponentClass, DefinitionContext, DefinitionSetup } from '../../component/definition';\nimport { FeatureContext } from '../feature-context';\nimport { ComponentRegistry } from './component-registry.impl';\n\n/**\n * @internal\n */\nexport class FeatureContext$ extends FeatureContext {\n\n  readonly whenReady: OnEvent<[FeatureContext]>;\n  private _onDefinition?: OnEvent<[DefinitionContext]>;\n  private _onComponent?: OnEvent<[ComponentContext]>;\n  readonly get: FeatureContext['get'];\n  private readonly _bsContext: BootstrapContext;\n  private readonly _componentRegistry: ComponentRegistry;\n\n  constructor(readonly feature: Class, private readonly _setup: ContextModule.Setup) {\n    super();\n\n    this._bsContext = _setup.get(BootstrapContext);\n\n    const handle = _setup.get(_setup.module);\n    const registry = new ContextRegistry<FeatureContext>(this._bsContext);\n\n    registry.provide({ a: FeatureContext, is: this });\n    this.get = registry.newValues().get;\n\n    this.whenReady = handle.read.do(\n        valueOn_(({ ready }) => ready && this),\n        onceOn,\n    );\n\n    this._componentRegistry = new ComponentRegistry(this._setup);\n  }\n\n  get supply(): Supply {\n    return this._setup.supply;\n  }\n\n  get onDefinition(): OnEvent<[DefinitionContext]> {\n    return this._onDefinition\n        || (this._onDefinition = this._setup.get(ElementBuilder).definitions.on.do(supplyOn(this)));\n  }\n\n  get onComponent(): OnEvent<[ComponentContext]> {\n    return this._onComponent\n        || (this._onComponent = this._setup.get(ElementBuilder).components.on.do(supplyOn(this)));\n  }\n\n  provide<TSrc, TDeps extends any[]>(\n      spec: ContextValueSpec<BootstrapContext, unknown, TSrc, TDeps>,\n  ): Supply {\n    return this._bsContext.get(BootstrapContextRegistry).provide(spec).needs(this);\n  }\n\n  perDefinition<TSrc, TDeps extends any[]>(\n      spec: ContextValueSpec<DefinitionContext, unknown, TSrc, TDeps>,\n  ): Supply {\n    return this._bsContext.get(PerDefinitionRegistry).provide(spec).needs(this);\n  }\n\n  perComponent<TSrc, TDeps extends any[]>(\n      spec: ContextValueSpec<ComponentContext, unknown, TSrc, TDeps>,\n  ): Supply {\n    return this._bsContext.get(PerComponentRegistry).provide(spec).needs(this);\n  }\n\n  setupDefinition<T extends object>(componentType: ComponentClass<T>): OnEvent<[DefinitionSetup]> {\n    return onPostDefSetup(componentType, this.supply);\n  }\n\n  define<T extends object>(componentType: ComponentClass<T>): void {\n    this._componentRegistry.define(componentType);\n  }\n\n}\n","import { ContextModule } from '@proc7ts/context-values/updatable';\nimport { Class, setOfElements, valueProvider } from '@proc7ts/primitives';\nimport { ComponentDef, ComponentDef__symbol } from '../../component';\nimport { FeatureDef } from '../feature-def';\nimport { BootstrapWorkbench, featureInitStage, featureSetupStage } from './bootstrap-workbench.impl';\nimport { FeatureContext$ } from './feature-context.impl';\n\nconst FeatureModule__symbol = (/*#__PURE__*/ Symbol('feature-module'));\n\ninterface FeatureClass extends Class {\n\n  [FeatureModule__symbol]?: FeatureModule;\n\n}\n\n/**\n * @internal\n */\nexport class FeatureModule extends ContextModule {\n\n  static of(feature: FeatureClass): FeatureModule {\n    if (Object.prototype.hasOwnProperty.call(feature, FeatureModule__symbol)) {\n      return feature[FeatureModule__symbol]!;\n    }\n    return feature[FeatureModule__symbol] = new FeatureModule(feature);\n  }\n\n  constructor(readonly feature: Class) {\n    super(feature.name, FeatureModule$options(feature));\n  }\n\n  async setup(setup: ContextModule.Setup): Promise<void> {\n\n    const workbench = setup.get(BootstrapWorkbench);\n\n    await workbench.work(featureSetupStage).run(() => super.setup(setup));\n  }\n\n}\n\nfunction FeatureModule$options(feature: Class): ContextModule.Options {\n\n  const def = featureDef(feature);\n  const has: FeatureModule[] = [];\n  const needs: FeatureModule[] = [];\n\n  for (const replaced of setOfElements(def.has)) {\n    has.push(FeatureModule.of(replaced));\n  }\n  for (const required of setOfElements(def.needs)) {\n    needs.push(FeatureModule.of(required));\n  }\n\n  return {\n    needs,\n    has,\n    async setup(setup) {\n\n      const workbench = setup.get(BootstrapWorkbench);\n      const featureContext = new FeatureContext$(feature, setup);\n\n      if (def.init) {\n\n        const whenInit = workbench.work(featureInitStage).run(async () => {\n          await def.init!(featureContext);\n        });\n\n        setup.initBy(valueProvider(whenInit));\n      }\n\n      await def.setup?.(featureContext);\n    },\n  };\n}\n\nfunction featureDef(featureType: Class): FeatureDef.Options {\n\n  let def = FeatureDef.of(featureType);\n\n  if (ComponentDef__symbol in featureType) {\n    def = FeatureDef.merge(\n        def,\n        {\n          init(context) {\n            context.define(featureType);\n          },\n        },\n    );\n\n    const { feature } = ComponentDef.of(featureType);\n\n    if (feature) {\n      def = FeatureDef.merge(def, feature);\n    }\n\n  }\n\n  return def;\n}\n","import { OnEvent, onPromise } from '@proc7ts/fun-events';\nimport { ComponentClass, CustomElements, DefinitionContext } from '../../component/definition';\nimport { BootstrapContext } from '../bootstrap-context';\nimport { definitionContextOf } from './definition-context.symbol.impl';\n\n/**\n * @internal\n */\nexport const WhenDefined__symbol = (/*#__PURE__*/ Symbol('when-defined'));\n\ninterface WhenDefinedComponentClass<T extends object> extends ComponentClass<T> {\n  [WhenDefined__symbol]?: OnEvent<[DefinitionContext<T>]>;\n}\n\n/**\n * @internal\n */\nexport function whenDefined<T extends object>(\n    bsContext: BootstrapContext,\n    componentType: WhenDefinedComponentClass<T>,\n): OnEvent<[DefinitionContext<T>]> {\n  // eslint-disable-next-line no-prototype-builtins\n  if (componentType.hasOwnProperty(WhenDefined__symbol)) {\n    return componentType[WhenDefined__symbol] as OnEvent<[DefinitionContext<T>]>;\n  }\n\n  const result: OnEvent<[DefinitionContext<T>]> = onPromise(\n      Promise.resolve(bsContext.whenReady)\n          .then(() => bsContext.get(CustomElements).whenDefined(componentType))\n          .then(() => definitionContextOf(componentType)),\n  );\n\n  return componentType[WhenDefined__symbol] = result;\n}\n","/**\n * A path to sub-state containing element an attributes.\n *\n * Thus, an attribute state path is always something like `[AttributePath__root, 'attribute-name']`.\n *\n * @category Feature\n */\nexport const AttributePath__root = (/*#__PURE__*/ Symbol('attribute'));\n\n/**\n * A path to the named attribute state.\n *\n * @category Feature\n */\nexport type AttributePath = readonly [keyof AttributePath.RootKeys, string];\n\n/**\n * Constructs a named attribute state path.\n *\n * @category Feature\n * @param name - Target attribute name.\n *\n * @return Attribute state path.\n */\nexport function attributePathTo(name: string): AttributePath {\n  return [AttributePath__root, name];\n}\n\n/**\n * @category Feature\n */\nexport namespace AttributePath {\n  export interface RootKeys {\n    [AttributePath__root]: true;\n  }\n}\n","import { StatePath } from '@proc7ts/fun-events';\nimport { noop } from '@proc7ts/primitives';\nimport { ComponentContext } from '../../component';\nimport { AttributeUpdateReceiver } from './attribute-def';\nimport { AttributeChangedCallback } from './attribute-descriptor';\nimport { attributePathTo } from './attribute-path';\n\n/**\n * @internal\n */\nexport function attributeStateUpdate<T extends object>(\n    name: string,\n    updateState: boolean | AttributeUpdateReceiver<T> | StatePath = true,\n): AttributeChangedCallback<T> {\n  if (updateState === false) {\n    return noop;\n  }\n  if (updateState === true || typeof updateState === 'function') {\n\n    const path = attributePathTo(name);\n    const update: AttributeUpdateReceiver<T> = updateState === true ? updateAttributeState : updateState;\n\n    return (component: T, newValue, oldValue) => update(component, path, newValue, oldValue);\n  }\n\n  return (component: T, newValue, oldValue) => updateAttributeState(\n      component,\n      updateState,\n      newValue,\n      oldValue,\n  );\n}\n\nfunction updateAttributeState<T extends object>(\n    component: T,\n    path: StatePath,\n    newValue: string | null,\n    oldValue: string | null,\n): void {\n  ComponentContext.of(component).updateState(path, newValue, oldValue);\n}\n","import { CustomHTMLElementClass } from '@frontmeans/dom-primitives';\nimport { ContextRef, SingleContextKey } from '@proc7ts/context-values';\nimport { mergeFunctions } from '@proc7ts/primitives';\nimport { BootstrapWindow } from '../../boot/globals';\nimport { ComponentContext, ComponentElement, ComponentSlot } from '../../component';\nimport { DefinitionContext } from '../../component/definition';\nimport { AttributeChangedCallback, AttributeDescriptor } from './attribute-descriptor';\n\n/**\n * A registry of component's element attributes.\n *\n * @category Feature\n */\nexport interface AttributeRegistry {\n\n  /**\n   * Declares component element's attribute.\n   *\n   * @param descriptor - Attribute descriptor.\n   */\n  declareAttribute(descriptor: AttributeDescriptor): void;\n\n}\n\n/**\n * A key of component definition context value containing {@link AttributeRegistry attribute registry}.\n *\n * @category Feature\n */\nexport const AttributeRegistry: ContextRef<AttributeRegistry> = (\n    /*#__PURE__*/ new SingleContextKey<AttributeRegistry>(\n        'attribute-registry',\n        {\n          byDefault(context) {\n            return new AttributeRegistry$(context.get(DefinitionContext));\n          },\n        },\n    )\n);\n\n/**\n * @internal\n */\nclass AttributeRegistry$ implements AttributeRegistry {\n\n  private readonly attrs = new Map<string, AttributeChangedCallback<any>>();\n\n  constructor(private readonly _context: DefinitionContext) {\n    _context.whenReady(({ elementType }) => this.define(elementType as CustomHTMLElementClass));\n    _context.whenComponent(context => {\n      if (context.mounted) {\n        // Mount element attributes\n        this.mount(context);\n      }\n    });\n  }\n\n  declareAttribute({ name, change }: AttributeDescriptor): void {\n    this.attrs.set(name, mergeFunctions(this.attrs.get(name), change));\n  }\n\n  private define(elementType: CustomHTMLElementClass): void {\n\n    const { attrs } = this;\n\n    if (!attrs.size) {\n      return; // No attributes defined\n    }\n\n    Object.defineProperty(elementType, 'observedAttributes', {\n      configurable: true,\n      enumerable: true,\n      value: observedAttributes(elementType, [...attrs.keys()]),\n    });\n    Object.defineProperty(elementType.prototype, 'attributeChangedCallback', {\n      configurable: true,\n      enumerable: true,\n      value: attributeChangedCallback(elementType, attrs),\n    });\n  }\n\n  private mount(context: ComponentContext): void {\n\n    const { element } = context as { element: ComponentElement };\n    const { attrs } = this;\n    const attributeFilter = [...attrs.keys()];\n\n    if (!attributeFilter.length) {\n      return; // No attributes defined\n    }\n\n    const MutationObserver = this._context.get(BootstrapWindow).MutationObserver;\n    const observer = new MutationObserver(\n        records => records.forEach(\n            record => {\n\n              const attributeName = record.attributeName as string;\n\n              return attrs.get(attributeName)!(\n                  context.component,\n                  element.getAttribute(attributeName),\n                  record.oldValue,\n              );\n            },\n        ),\n    );\n\n    observer.observe(element, {\n      attributes: true,\n      attributeFilter,\n      attributeOldValue: true,\n    });\n  }\n\n}\n\n/**\n * @internal\n */\ntype ElementAttributeChanged = (\n    this: any,\n    name: string,\n    oldValue: string | null,\n    newValue: string | null,\n) => void;\n\n/**\n * @internal\n */\nfunction observedAttributes(\n    elementType: CustomHTMLElementClass,\n    attrs: readonly string[],\n): readonly string[] {\n\n  const alreadyObserved = elementType.observedAttributes;\n\n  if (Array.isArray(alreadyObserved)) {\n\n    const newAttrs = new Set<string>(alreadyObserved);\n\n    attrs.forEach(attr => newAttrs.add(attr));\n\n    attrs = [...newAttrs];\n  }\n\n  return attrs;\n}\n\n/**\n * @internal\n */\nfunction attributeChangedCallback<T extends object>(\n    elementType: CustomHTMLElementClass,\n    attrs: Map<string, AttributeChangedCallback<T>>,\n): ElementAttributeChanged {\n\n  const prevCallback = elementType.prototype.attributeChangedCallback;\n\n  if (!prevCallback) {\n    return function (this: ComponentElement<T>, name, oldValue, newValue) {\n      ComponentSlot.of(this).whenReady(({ component }) => {\n        attrs.get(name)!(component, newValue, oldValue);\n      });\n    };\n  }\n\n  return function (this: ComponentElement<T>, name, oldValue, newValue) {\n\n    const attrChanged = attrs.get(name);\n\n    if (attrChanged) {\n      ComponentSlot.of(this).whenReady(({ component }) => attrChanged(component, newValue, oldValue));\n    } else {\n      prevCallback.call(this, name, oldValue, newValue);\n    }\n  };\n}\n","import { ComponentContext, ComponentProperty, ComponentPropertyDecorator } from '../../component';\nimport { ComponentClass } from '../../component/definition';\nimport { AttributeDef } from './attribute-def';\nimport { parseAttributeDescriptor } from './attribute-descriptor.impl';\nimport { AttributeRegistry } from './attribute-registry';\n\n/**\n * Creates a decorator for component's property that accesses custom element's attribute.\n *\n * The decorated property accesses corresponding attribute on read, and updates it on setting. `null` value corresponds\n * to absent attribute. Setting to `null` or `undefined` removes corresponding attribute.\n *\n * @category Feature\n * @typeParam TClass - A type of decorated component class.\n * @param def - Attribute definition or just an attribute name (either _camelCase_ or _dash-style_).\n *\n * @return Component property decorator.\n */\nexport function Attribute<TClass extends ComponentClass>(\n    def?: AttributeDef<InstanceType<TClass>> | string,\n): ComponentPropertyDecorator<string | null | undefined, TClass> {\n  return ComponentProperty(({ type, key, set: setValue }) => {\n\n    const { name, change } = parseAttributeDescriptor(type.prototype, key, def);\n\n    return {\n      componentDef: {\n        define(defContext) {\n          defContext.get(AttributeRegistry).declareAttribute({\n            name,\n            change(component, newValue, oldValue) {\n              setValue(component, newValue);\n              change(component, newValue, oldValue);\n            },\n          });\n        },\n      },\n      get(component: InstanceType<TClass>): string | null {\n        return (ComponentContext.of(component).element as Element).getAttribute(name);\n      },\n      set(component: InstanceType<TClass>, newValue: string | null) {\n\n        const { element } = ComponentContext.of(component) as { element: Element };\n\n        if (newValue != null) {\n          element.setAttribute(name, newValue);\n        } else {\n          element.removeAttribute(name);\n        }\n\n        setValue(component, newValue);\n      },\n    };\n  });\n}\n","import { hyphenateDecapName } from '@frontmeans/httongue';\nimport { AttributeDef } from './attribute-def';\nimport { AttributeChangedCallback, AttributeDescriptor } from './attribute-descriptor';\nimport { attributeStateUpdate } from './attribute-state-update.impl';\n\n/**\n * @internal\n */\nexport function parseAttributeDescriptor<T extends object>(\n    target: T,\n    propertyKey: string | symbol,\n    def?: AttributeDef<T> | string,\n): AttributeDescriptor<T> {\n\n  let name: string;\n  let change: AttributeChangedCallback<T>;\n\n  if (typeof def === 'string') {\n    name = hyphenateDecapName(def);\n    change = attributeStateUpdate(name);\n  } else {\n    if (def && def.name) {\n      name = hyphenateDecapName(def.name);\n    } else if (typeof propertyKey !== 'string') {\n      throw new TypeError(\n          'Attribute name is required as property key is not a string: '\n          + `${target.constructor.name}.prototype.${String(propertyKey)}`,\n      );\n    } else {\n      name = hyphenateDecapName(propertyKey);\n    }\n\n    change = attributeStateUpdate(name, def && def.updateState);\n  }\n\n  return { name, change };\n}\n","import { ContextKey, ContextKey__symbol, ContextValueSlot, SimpleContextKey } from '@proc7ts/context-values';\nimport { StateTracker } from '@proc7ts/fun-events';\nimport { ComponentContext, StateUpdater } from '../../component';\n\nclass ComponentStateKey extends SimpleContextKey<ComponentState> {\n\n  constructor() {\n    super('component-state');\n  }\n\n  grow(\n      slot: ContextValueSlot<ComponentState, ComponentState, SimpleContextKey.Seed<ComponentState>>,\n  ): void {\n\n    const provided = slot.seed();\n    let state: ComponentState;\n\n    if (provided != null) {\n      state = provided;\n      slot.insert(state);\n    } else if (slot.hasFallback) {\n      return;\n    } else {\n      state = new ComponentState();\n      slot.context.get(ComponentContext).supply.whenOff(reason => state.done(reason));\n      slot.insert(state);\n    }\n\n    slot.setup(({ registry }) => {\n      registry.provide({ a: StateUpdater, is: state.update });\n    });\n  }\n\n}\n\n/**\n * @internal\n */\nconst ComponentState__key = (/*#__PURE__*/ new ComponentStateKey());\n\n/**\n * Component state tracker.\n *\n * @category Feature\n */\nexport class ComponentState extends StateTracker {\n\n  static get [ContextKey__symbol](): ContextKey<ComponentState> {\n    return ComponentState__key;\n  }\n\n}\n","import { OnEvent, StatePath, supplyOn, translateOn, ValueTracker } from '@proc7ts/fun-events';\nimport { Supply } from '@proc7ts/supply';\nimport { ComponentContext } from '../../component';\nimport { ComponentState } from '../state';\nimport { attributePathTo } from './attribute-path';\n\nclass AttributeTracker extends ValueTracker<string | null> {\n\n  readonly on: OnEvent<[string | null, string | null]>;\n  readonly supply = new Supply();\n\n  constructor(\n      private readonly _context: ComponentContext,\n      private readonly _name: string,\n      path: StatePath,\n  ) {\n    super();\n    this.on = this._context.get(ComponentState).track(path).onUpdate.do(\n        translateOn((send, _path, newValue, oldValue) => send(newValue, oldValue)),\n        supplyOn(this),\n    );\n  }\n\n  get it(): string | null {\n    return (this._context.element as Element).getAttribute(this._name);\n  }\n\n  set it(value: string | null) {\n    if (!this.supply.isOff) {\n      if (value == null) {\n        (this._context.element as Element).removeAttribute(this._name);\n      } else {\n        (this._context.element as Element).setAttribute(this._name, value);\n      }\n    }\n  }\n\n}\n\n/**\n * Creates a tracker of custom element's attribute value.\n *\n * Requires attribute to be defined. E.g. with {@link Attribute @Attribute}, {@link AttributeChanged @AttributeChanged},\n * or {@link Attributes @Attributes} decorator.\n *\n * @category Feature\n * @param context - Target component context.\n * @param name - Attribute name.\n * @param path - Custom attribute state path.\n *\n * @returns New attribute value tracker.\n */\nexport function trackAttribute(\n    context: ComponentContext,\n    name: string,\n    path: StatePath = attributePathTo(name),\n): ValueTracker<string | null> {\n  return new AttributeTracker(context, name, path);\n}\n","import {\n  EventSender,\n  isEventSender,\n  OnEvent,\n  onSupplied,\n  StatePath,\n  supplyOn,\n  translateOn_,\n} from '@proc7ts/fun-events';\nimport { valueByRecipe } from '@proc7ts/primitives';\nimport { ComponentContext } from '../../component';\nimport { ComponentState } from '../state';\n\n/**\n * Element rendering definition.\n *\n * This is either a {@link RenderDef.Spec rendering specifier}, or its {@link RenderDef.Provider provider function}.\n *\n * @category Feature\n */\nexport type RenderDef =\n    | RenderDef.Spec\n    | RenderDef.Provider;\n\n/**\n * @category Feature\n */\nexport namespace RenderDef {\n\n  /**\n   * Rendering options.\n   */\n  export interface Options {\n\n    /**\n     * When to start the rendering.\n     *\n     * One of:\n     * - `settled` (the default) - start rendering when component is {@link ComponentContext.settled settled}.\n     * - `connected` - start rendering when component's element is {@link ComponentContext.connected connected}\n     *   to document.\n     */\n    readonly when?: 'settled' | 'connected';\n\n    /**\n     * Reports rendering error. E.g. a render shot execution failure.\n     *\n     * @param messages - Error messages to report.\n     */\n    error?(...messages: any[]): void;\n\n  }\n\n  /**\n   * Rendering specifier.\n   */\n  export interface Spec extends Options {\n\n    /**\n     * A trigger that issues rendering.\n     *\n     * This can be useful e.g. when component has multiple independent sub-views.\n     *\n     * This can be one of the following:\n     * - A path to component state part the renderer should track. The rendering would trigger only when the target\n     *   state part is updated.\n     * - Arbitrary event sender. The rendering would be triggered on any event from this sender.\n     *\n     * A root state path is tracked when omitted.\n     *\n     * When trigger is a root path (the default value), then the rendering will be triggered by any state update.\n     * Except for updates of sub-states inside {@link RenderPath__root}.\n     */\n    readonly on?: StatePath | EventSender<[]>;\n\n  }\n\n  /**\n   * Rendering specifier provider signature.\n   */\n  export type Provider =\n  /**\n   * @param context - A context of component to render.\n   *\n   * @returns Rendering specifier.\n   */\n      (\n          this: void,\n          context: ComponentContext,\n      ) => RenderDef.Spec;\n\n}\n\n/**\n * A root path to sub-states updates to which will be ignored by default.\n *\n * This can be used to create sub-states that won't trigger rendering occasionally, but only when requested explicitly.\n *\n * @category Feature\n */\nexport const RenderPath__root = (/*#__PURE__*/ Symbol('render'));\n\n/**\n * @category Feature\n */\nexport const RenderDef = {\n\n  /**\n   * Builds a rendering specifier for component by its definition.\n   *\n   * @param context - A context of component to render.\n   * @param def - Arbitrary rendering definition.\n   *\n   * @returns Rendering specifier.\n   */\n  spec(\n      this: void,\n      context: ComponentContext,\n      def: RenderDef,\n  ): RenderDef.Spec {\n    return valueByRecipe(def, context);\n  },\n\n  /**\n   * Fulfills rendering specifier with the given defaults.\n   *\n   * @param base - Base rendering specifier to fulfill.\n   * @param defaults - Defaults that will be applied unless defined in `base` specifier.\n   *\n   * @return `base` rendering specifier fulfilled by `defaults`.\n   */\n  fulfill(this: void, base: RenderDef.Spec, defaults: RenderDef.Spec = {}): RenderDef.Spec {\n\n    const { on = defaults.on, error } = base;\n\n    return {\n      on,\n      error: error ? error.bind(base) : defaults.error && defaults.error.bind(defaults),\n    };\n  },\n\n  /**\n   * Builds a trigger issuing rendering updates.\n   *\n   * @param context - Rendered component context.\n   * @param spec - Rendering specifier.\n   *\n   * @returns `OnEvent` sender that sends an event each time the rendering required.\n   */\n  trigger(\n      this: void,\n      context: ComponentContext,\n      spec: RenderDef.Spec = {},\n  ): OnEvent<[]> {\n\n    const { on = [] } = spec;\n\n    if ((typeof on === 'object' || typeof on === 'function') && isEventSender(on)) {\n      return onSupplied(on).do(supplyOn(context));\n    }\n\n    const trigger = context\n        .get(ComponentState)\n        .track(on)\n        .onUpdate.do(\n            supplyOn(context),\n        );\n\n    if (Array.isArray(on) && !on.length) {\n      return trigger.do(translateOn_(\n          (send, path: StatePath.Normalized) => path[0] !== RenderPath__root && send(),\n      ));\n    }\n\n    return trigger;\n  },\n\n};\n","import { queuedRenderScheduler, RenderExecution } from '@frontmeans/render-scheduler';\nimport { noop } from '@proc7ts/primitives';\nimport { Supply } from '@proc7ts/supply';\nimport { DefaultRenderKit } from '../../boot/globals';\nimport { ComponentContext } from '../../component';\nimport { ElementRenderCtl } from './element-render-ctl';\nimport { ElementRenderer } from './element-renderer';\nimport { RenderDef } from './render-def';\n\n/**\n * @internal\n */\nconst enum RenderStatus {\n  Cancelled = -1,\n  Complete = 0,\n  Pending = 1,\n  Scheduled = 2,\n}\n\n/**\n * @internal\n */\nexport class ElementRenderCtl$ implements ElementRenderCtl {\n\n  private readonly _renders = new Set<() => void>();\n\n  constructor(private readonly _context: ComponentContext) {\n  }\n\n  renderBy(\n      renderer: ElementRenderer,\n      def: RenderDef = {},\n  ): Supply {\n\n    const spec = RenderDef.spec(this._context, def);\n    const trigger = RenderDef.trigger(this._context, spec);\n    const renderKit = this._context.get(DefaultRenderKit);\n    const schedule = renderKit.contextOf(this._context.element).scheduler({\n      ...RenderDef.fulfill(spec),\n      node: this._context.element as Element,\n    });\n    const whenConnected = spec.when === 'connected';\n    let status = RenderStatus.Pending;\n    const startRendering = (): 0 | void => status /* there is an update to render */ && scheduleRenderer();\n    const onUpdate = whenConnected\n        ? () => this._context.connected && scheduleRenderer()\n        : () => this._context.settled && scheduleRenderer();\n    const supply = trigger(onUpdate)\n        .needs(this._context)\n        .whenOff(cancelRenderer);\n\n    (whenConnected ? this._context.whenConnected : this._context.whenSettled)(startRendering);\n\n    const immediateSchedule = queuedRenderScheduler();\n\n    this._renders.add(renderNow);\n\n    return supply.whenOff(() => this._renders.delete(renderNow));\n\n    function scheduleRenderer(): void {\n      status = RenderStatus.Scheduled;\n      schedule(renderElement);\n    }\n\n    function renderNow(): void {\n      immediateSchedule(renderElement);\n    }\n\n    function cancelRenderer(): void {\n      if (status === RenderStatus.Scheduled) { // Scheduled, but not rendered yet\n        schedule(noop);\n      }\n      status = RenderStatus.Cancelled;\n    }\n\n    function renderElement(execution: RenderExecution): void {\n      if (status > RenderStatus.Complete) { // Prevent excessive rendering\n        status = RenderStatus.Complete;\n        for (; ;) {\n\n          const newRenderer = renderer(execution);\n\n          if (newRenderer === renderer || typeof newRenderer !== 'function') {\n            break;\n          }\n\n          renderer = newRenderer;\n        }\n      }\n    }\n  }\n\n  renderNow(): void {\n    this._renders.forEach(render => render());\n  }\n\n}\n","import { ContextRef, SingleContextKey } from '@proc7ts/context-values';\nimport { Supply } from '@proc7ts/supply';\nimport { ComponentContext } from '../../component';\nimport { ElementRenderCtl$ } from './element-render-ctl.impl';\nimport { ElementRenderer } from './element-renderer';\nimport { RenderDef } from './render-def';\n\n/**\n * A render control of component's element.\n *\n * Controls rendering by {@link ElementRenderer element renderers}.\n *\n * Available in component context.\n *\n * @category Feature\n */\nexport interface ElementRenderCtl {\n\n  /**\n   * Enables component element rendering by the given `renderer`.\n   *\n   * A `renderer` call will be scheduled by {@link DefaultRenderScheduler} once component state updated.\n   *\n   * @param renderer - Element renderer function.\n   * @param def - Optional element rendering definition.\n   *\n   * @returns Render shots supply. Element `renderer` will stop rendering once this supply is cut off.\n   */\n  renderBy(\n      renderer: ElementRenderer,\n      def?: RenderDef,\n  ): Supply;\n\n  /**\n   * Executes scheduled element render shots immediately.\n   *\n   * Uses `immediateRenderScheduler` for that.\n   *\n   * Does not execute element renderers that are not scheduled. I.e. if no corresponding state updates happened.\n   */\n  renderNow(): void;\n\n}\n\n/**\n * A key of component context value containing {@link ElementRenderCtl element render control}.\n *\n * @category Feature\n */\nexport const ElementRenderCtl: ContextRef<ElementRenderCtl> = (\n    /*#__PURE__*/ new SingleContextKey<ElementRenderCtl>(\n        'element-render-ctl',\n        {\n          byDefault(values) {\n            return new ElementRenderCtl$(values.get(ComponentContext));\n          },\n        },\n    )\n);\n","import { RenderSchedule, RenderScheduleOptions, RenderShot } from '@frontmeans/render-scheduler';\nimport { ContextRef, ContextValues, SingleContextKey } from '@proc7ts/context-values';\nimport { trackValue } from '@proc7ts/fun-events';\nimport { noop } from '@proc7ts/primitives';\nimport { ElementRenderCtl } from './element-render-ctl';\nimport { ElementRenderer } from './element-renderer';\nimport { RenderDef } from './render-def';\n\n/**\n * A signature of element render scheduler.\n *\n * Schedules render shots to be executed by {@link ElementRenderCtl element render control}.\n *\n * Available in component context.\n *\n * @category Feature\n */\nexport type ElementRenderScheduler =\n/**\n * @param options - Options of constructed element render schedule.\n *\n * @returns New render schedule.\n */\n    (this: void, options?: ElementRenderScheduleOptions) => RenderSchedule;\n\n/**\n * Options for render schedule.\n *\n * This is passed to {@link ElementRenderScheduler element render scheduler} when constructing new render schedule.\n *\n * Generic `RenderSchedule` options are ignored.\n *\n * @category Feature\n */\nexport interface ElementRenderScheduleOptions extends RenderScheduleOptions, RenderDef.Options {\n\n  /**\n   * When to start the rendering.\n   *\n   * One of:\n   * - `settled` - start rendering when component is {@link ComponentContext.settled settled}.\n   * - `connected` (the default) - start rendering when component's element is {@link ComponentContext.connected\n   *   connected} to document.\n   */\n  readonly when?: 'settled' | 'connected';\n\n  /**\n   * Reports rendering error. E.g. a render shot execution failure.\n   *\n   * @param messages - Error messages to report.\n   */\n  error?(...messages: any[]): void;\n\n}\n\n/**\n * @internal\n */\nfunction newElementRenderScheduler(context: ContextValues): ElementRenderScheduler {\n\n  const renderCtl = context.get(ElementRenderCtl);\n\n  return (opts = {}): RenderSchedule => {\n\n    const recentShot = trackValue<RenderShot>(noop);\n    const renderer: ElementRenderer = execution => {\n      recentShot.it(execution);\n    };\n\n    renderCtl.renderBy(renderer, RenderDef.fulfill({ on: recentShot.on }, opts));\n\n    return (shot: RenderShot): void => {\n      recentShot.it = execution => shot(execution); // Ensure render shot always updated\n    };\n  };\n}\n\n/**\n * A key of component context value containing {@link ElementRenderScheduler element render scheduler}.\n *\n * @category Feature\n */\nexport const ElementRenderScheduler: ContextRef<ElementRenderScheduler> = (\n    /*#__PURE__*/ new SingleContextKey<ElementRenderScheduler>(\n        'element-render-scheduler',\n        {\n          byDefault: newElementRenderScheduler,\n        },\n    )\n);\n","import { RenderExecution } from '@frontmeans/render-scheduler';\nimport { ComponentProperty, ComponentPropertyDecorator } from '../../component';\nimport { ComponentClass } from '../../component/definition';\nimport { ElementRenderCtl } from './element-render-ctl';\nimport { ElementRenderer } from './element-renderer';\nimport { RenderDef } from './render-def';\n\n/**\n * Component property decorator that declares a rendering method for the component.\n *\n * The decorated method call will be scheduled by {@link DefaultRenderScheduler} once component state updated.\n *\n * The decorated method should have no arguments. It may return either nothing, or a function. In the latter case the\n * returned function will be called immediately to render the element. It may, in turn, return a renderer function,\n * and so on.\n *\n * Enables rendering with {@link ElementRenderCtl.renderBy element render control}.\n *\n * @category Feature\n * @typeParam TClass - A type of decorated component class.\n * @param def - Non-mandatory render definition.\n *\n * @returns Component method decorator.\n */\nexport function Render<TClass extends ComponentClass>(\n    def?: RenderDef,\n): ComponentPropertyDecorator<(execution: RenderExecution) => ElementRenderer | void, TClass> {\n  return ComponentProperty(({ get }) => ({\n    componentDef: {\n      define(defContext) {\n        defContext.whenComponent(context => {\n          context.whenReady(() => {\n\n            const { component } = context;\n            const renderer = get(component).bind(component);\n\n            context.get(ElementRenderCtl).renderBy(renderer, def);\n          });\n        });\n      },\n    },\n  }));\n}\n","import { SingleContextKey, SingleContextRef } from '@proc7ts/context-values';\n\n/**\n * Component shadow content root.\n *\n * @category Feature\n */\nexport type ShadowContentRoot = ShadowRoot;\n\n/**\n * A key of component context value containing a shadow content root instance.\n *\n * This is only available when the component is decorated with {@link AttachShadow @AttachShadow} decorator.\n *\n * @category Feature\n */\nexport const ShadowContentRoot: SingleContextRef<ShadowContentRoot> = (\n    /*#__PURE__*/ new SingleContextKey<ShadowContentRoot>('shadow-content-root')\n);\n","import { FnContextKey, FnContextRef } from '@proc7ts/context-values/updatable';\nimport { ComponentContext } from '../../component';\nimport { ShadowContentDef } from './attach-shadow.decorator';\n\n/**\n * Shadow root builder function type.\n *\n * An instance of this function is available in component context and is used by {@link AttachShadow @AttachShadow}\n * decorator to attach shadow root to decorated component's custom element.\n *\n * By default, if shadow root already exists for the component's element, it uses one.\n *\n * Dispatches a `wesib:shadowAttached` event for the found or attached shadow root.\n *\n * @category Feature\n */\nexport type ShadowRootBuilder =\n/**\n * @param context - Target component context.\n * @param init - Shadow root initialization options.\n *\n * @returns A shadow root instance for target component, or `null`/`undefined` if one can not be attached.\n */\n    (context: ComponentContext, init: ShadowContentDef) => ShadowRoot | null | undefined;\n\n/**\n * A key of component context value containing a shadow root builder instance.\n *\n * @category Feature\n */\nexport const ShadowRootBuilder: FnContextRef<Parameters<ShadowRootBuilder>, ReturnType<ShadowRootBuilder>> = (\n    /*#__PURE__*/ new FnContextKey<Parameters<ShadowRootBuilder>, ReturnType<ShadowRootBuilder>>(\n        'shadow-root-builder',\n        {\n          byDefault() {\n            return attachShadow;\n          },\n        },\n    )\n);\n\nfunction attachShadow(context: ComponentContext, init: ShadowRootInit): ShadowRoot | undefined {\n  return shadowRootOf(context.element as Element, init);\n}\n\nfunction shadowRootOf(element: Element, init: ShadowRootInit): ShadowRoot | undefined {\n\n  const existing = element.shadowRoot;\n\n  if (existing) {\n    // Shadow root already attached. Using it.\n    return existing;\n  }\n  if ('attachShadow' in element) {\n    return element.attachShadow(init);\n  }\n\n  return; // Unable to attach shadow root.\n}\n\n","import { Class } from '@proc7ts/primitives';\nimport { Component, ComponentContext, ComponentDecorator, ContentRoot } from '../../component';\nimport { ComponentClass } from '../../component/definition';\nimport { ShadowContentRoot } from './shadow-content-root';\nimport { ShadowRootBuilder } from './shadow-root-builder';\n\n/**\n * @internal\n */\nconst defaultShadowContentDef: ShadowContentDef = { mode: 'open' };\n\n/**\n * Shadow content root definition.\n *\n * This is a readonly component shadow root initialization options.\n *\n * @category Feature\n */\nexport type ShadowContentDef = Readonly<ShadowRootInit>;\n\n/**\n * Creates a component decorator that attaches shadow root to decorated component instance.\n *\n * @category Feature\n * @typeParam TClass - A type of decorated component class.\n * @param def - Shadow content root definition. Uses `mode: 'open'` by default.\n *\n * @returns New component decorator.\n */\nexport function AttachShadow<TClass extends ComponentClass = Class>(\n    def: ShadowContentDef = defaultShadowContentDef,\n): ComponentDecorator<TClass> {\n  return Component({\n    setup(setup) {\n      setup.perComponent(\n          {\n            a: ShadowContentRoot,\n            by(ctx: ComponentContext<InstanceType<TClass>>) {\n              return ctx.get(ShadowRootBuilder)(ctx, def);\n            },\n          },\n      );\n      setup.perComponent({ // Content root is an alias of shadow root when present.\n        a: ContentRoot,\n        by(context: ComponentContext<InstanceType<TClass>>) {\n          return context.get(ShadowContentRoot, { or: null });\n        },\n      });\n    },\n  });\n}\n","import { NamespaceDef } from '@frontmeans/namespace-aliaser';\n\n/**\n * Default Wesib namespace definition.\n *\n * @category Core\n */\nexport const Wesib__NS: NamespaceDef = (/*#__PURE__*/ new NamespaceDef(\n    'https://wesib.github.io/ns',\n    'b',\n    'wesib',\n));\n","import type { ReadonlyDeltaSet } from './readonly-delta-set';\n\n/**\n * A `Set` implementation that keeps a delta of changes made to it.\n *\n * @typeParam T - A type of elements of delta set.\n */\nexport class DeltaSet<T> extends Set<T> implements ReadonlyDeltaSet<T> {\n\n  /** @internal */\n  private readonly _added: Set<T>;\n\n  /** @internal */\n  private readonly _removed: Set<T>;\n\n  /**\n   * Constructs new delta set.\n   *\n   * @param values - An iterable of elements be add to constructed delta set. Or `null` to add nothing.\n   */\n  constructor(values?: Iterable<T> | null) {\n    super();\n    this._added = new Set<T>(values);\n    this._removed = new Set<T>();\n    this._added.forEach(value => this.add(value));\n  }\n\n  /**\n   * Appends a new element with a specified value to the end of this delta set. Unless the set contains this element\n   * already.\n   *\n   * Records element addition and forgets its removal unless the set contains it already.\n   *\n   * @param value - The value of the element to add.\n   *\n   * @returns `this` delta set.\n   */\n  add(value: T): this {\n    if (!this.has(value)) {\n      this._added.add(value);\n      this._removed.delete(value);\n      super.add(value);\n    }\n    return this;\n  }\n\n  /**\n   * Removes the specified element from this delta set.\n   *\n   * Records element removal and forgets its addition if removal succeed.\n   *\n   * @param value - The value of the element to remove.\n   *\n   * @returns `true` if element removed successfully; or `false` if this set did not contain the element.\n   */\n  delete(value: T): boolean {\n    if (super.delete(value)) {\n      this._added.delete(value);\n      this._removed.add(value);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Removes all elements from this delta set.\n   *\n   * Records all elements removal and forgets all elements additions.\n   */\n  clear(): void {\n    this._added.clear();\n    this.forEach(value => this._removed.add(value));\n    super.clear();\n  }\n\n  /**\n   * Applies changes to this delta set.\n   *\n   * First removes elements to `remove`. Then appends elements to `add`.\n   *\n   * Records all changes made.\n   *\n   * @param add - An iterable of elements to add.\n   * @param remove - An iterable of elements to remove.\n   *\n   * @returns `this` delta set.\n   */\n  delta(add: Iterable<T>, remove: Iterable<T> = []): this {\n    deltaSetDeltaReceiver(this)(add, remove);\n    return this;\n  }\n\n  /**\n   * Replays the changes made to this set in target receiver.\n   *\n   * @param receiver - A receiver of changes delta. E.g. another `Set`.\n   *\n   * @returns `this` delta set.\n   */\n  redelta(receiver: DeltaSet.DeltaReceiver<T>): this {\n\n    const receive = typeof receiver === 'function' ? receiver : deltaSetDeltaReceiver(receiver);\n\n    receive([...this._added], [...this._removed]);\n\n    return this;\n  }\n\n  /**\n   * Forgets all changes made to this set.\n   *\n   * Does not alter the set contents.\n   *\n   * @returns `this` delta set.\n   */\n  undelta(): this {\n    this._added.clear();\n    this._removed.clear();\n    return this;\n  }\n\n}\n\nexport namespace DeltaSet {\n\n  /**\n   * A delta set changes receiver.\n   *\n   * This can be either an {@link DeltaReceiverObject object}, or a {@link DeltaReceiverFunction function}.\n   *\n   * @typeParam T - A type of elements of delta set.\n   */\n  export type DeltaReceiver<T> =\n      | DeltaReceiverFunction<T>\n      | DeltaReceiverObject<T>;\n\n  /**\n   * A delta set changes receiver function.\n   *\n   * @typeParam T - A type of elements of delta set.\n   */\n  export type DeltaReceiverFunction<T> =\n  /**\n   * @param added - An array of added elements.\n   * @param removed - An array of removed elements.\n   */\n      (this: void, added: T[], removed: T[]) => void;\n\n  /**\n   * A delta set changes receiver object.\n   *\n   * A `Set` class implements this interface.\n   *\n   * @typeParam T - A type of elements of delta set.\n   */\n  export interface DeltaReceiverObject<T> {\n\n    /**\n     * Receives an element that has been added to delta set.\n     *\n     * @param value - The value of the added element.\n     */\n    add(value: T): void;\n\n    /**\n     * Receives an element that has been remove from delta set.\n     *\n     * @param value - The value of the removed element.\n     */\n    delete(value: T): void;\n\n  }\n\n}\n\n/**\n * @internal\n */\nfunction deltaSetDeltaReceiver<T>(\n    receiver: DeltaSet.DeltaReceiverObject<T>,\n): (this: void, add: Iterable<T>, remove: Iterable<T>) => void {\n  return (add, remove) => {\n    for (const removed of remove) {\n      receiver.delete(removed);\n    }\n    for (const added of add) {\n      receiver.add(added);\n    }\n  };\n}\n","import { noop, valueProvider } from '@proc7ts/primitives';\nimport { InAspect } from './aspect';\nimport { InControl } from './control';\n\nconst nullInAspect$: InAspect.Applied<any, any> = {\n  instance: null,\n  convertTo: noop,\n};\n\n/**\n * Creates an aspect applied to control with `null` instance value.\n *\n * @category Aspect\n * @typeParam TValue - Input value type.\n * @typeParam TInstance - Aspect instance type.\n *\n * @returns Applied input aspect.\n */\nexport function nullInAspect<TValue, TInstance>(): InAspect.Applied<TValue, TInstance | null> {\n  return nullInAspect$;\n}\n\n/**\n * Creates an aspect applied to control with known instance.\n *\n * An instance remains as is when converted to another control.\n *\n * @category Aspect\n * @typeParam TValue - Input value type.\n * @typeParam TInstance - Aspect instance type.\n * @typeParam instance - Known aspect instance type.\n *\n * @returns Applied input aspect.\n */\nexport function knownInAspect<TValue, TInstance>(instance: TInstance): InAspect.Applied<TValue, TInstance> {\n  return {\n    instance,\n    convertTo(_target) {\n      return this as InAspect.Applied<any, TInstance>;\n    },\n  };\n}\n\n/**\n * Creates an aspect applied to control with known inconvertible instance.\n *\n * When converted to another control with the same value, an aspect instance remains as is.\n *\n * When converted to another control with another value, an aspect instance replaced by `null`.\n *\n * @category Aspect\n * @typeParam TValue - Input value type.\n * @typeParam TInstance - Aspect instance type.\n * @typeParam TKind - Aspect application kind.\n * @param control - Target control to apply an aspect to.\n * @param aspectKey - Applied aspect key.\n * @param instance - Known aspect instance type. Defaults to `null`.\n *\n * @returns Applied input aspect.\n */\nexport function inconvertibleInAspect<TValue, TInstance, TKind extends InAspect.Application.Kind>(\n    control: InControl<TValue>,\n    aspectKey: InAspect.Key<TInstance | null, TKind>,\n    instance: TInstance | null = null,\n): InAspect.Applied<TValue, TInstance | null> {\n  return builtInAspect$(control, aspectKey, valueProvider(null), instance);\n}\n\n/**\n * Creates an aspect applied to control with built instance.\n *\n * When converted to another control with the same value, an aspect instance remains as is.\n *\n * When converted to another control with another value, an aspect instance is built again with original control\n * passed to the builder as a second parameter.\n *\n * @category Aspect\n * @typeParam TValue - Input value type.\n * @typeParam TInstance - Aspect instance type.\n * @typeParam TKind - Aspect application kind.\n * @param control - Target control to apply an aspect to.\n * @param aspectKey - Applied aspect key.\n * @param build - Aspect instance builder function. Accepts target control and optionally an original one as parameters.\n *\n * @returns Applied input aspect.\n */\nexport function builtInAspect<TValue, TInstance, TKind extends InAspect.Application.Kind>(\n    control: InControl<TValue>,\n    aspectKey: InAspect.Key<TInstance, TKind>,\n    build: <TValue>(this: void, control: InControl<TValue>, origin?: InControl<any>) => TInstance,\n): InAspect.Applied<TValue, TInstance> {\n  return builtInAspect$(control, aspectKey, build);\n}\n\nfunction builtInAspect$<TValue, TInstance, TKind extends InAspect.Application.Kind>(\n    control: InControl<TValue>,\n    aspectKey: InAspect.Key<TInstance, TKind>,\n    build: <TValue>(this: void, control: InControl<TValue>, origin?: InControl<any>) => TInstance,\n    instance?: TInstance,\n    origin?: InControl<any>,\n): InAspect.Applied<TValue, TInstance> {\n  if (instance === undefined) {\n    instance = build(control, origin);\n  }\n\n  return {\n    instance,\n    convertTo<TTo>(target: InControl<TTo>): InAspect.Applied<TTo, TInstance> {\n      return builtInAspect$<TTo, TInstance, TKind>(\n          target,\n          aspectKey,\n          build,\n          undefined,\n          control,\n      );\n    },\n    attachTo(target: InControl<TValue>): InAspect.Applied<TValue, TInstance> | undefined {\n      return builtInAspect$(\n          target,\n          aspectKey,\n          build,\n          (control.aspect(aspectKey) as TInstance | undefined) || build(target),\n      );\n    },\n  };\n}\n","import { InControl } from './control';\n\n/**\n * Some aspect of the user input. Such as input focus or validity.\n *\n * An aspect is applied to input control first. This creates an aspect instance bound to that control. All\n * aspect-related operations are performed by that instance.\n *\n * @category Aspect\n * @typeParam TInstance - Aspect instance type.\n * @typeParam TKind - Aspect application kind.\n */\nexport interface InAspect<TInstance, TKind extends InAspect.Application.Kind = 'default'> {\n\n  /**\n   * Applies this aspect to the given input `control`.\n   *\n   * This method is called at most once per control when requested aspect is not applied to the control yet.\n   *\n   * @typeParam TValue - Input value type.\n   * @param control - Input control to apply aspect to.\n   *\n   * @returns An aspect applied to the given `control`.\n   */\n  applyTo<TValue>(control: InControl<TValue>): InAspect.Applied<TValue, TInstance>;\n\n}\n\n/**\n * A symbol of aspect key property containing a reference to aspect.\n *\n * @category Aspect\n */\nexport const InAspect__symbol = (/*#__PURE__*/ Symbol('in-aspect'));\n\n/**\n * @category Aspect\n */\nexport namespace InAspect {\n\n  /**\n   * A key of the aspect of user input.\n   *\n   * It is passed to `InControl.aspect()` method in order to apply target aspect to that control.\n   *\n   * This interface is typically implemented by aspect instance class object. I.e. by its static methods.\n   *\n   * @typeParam TInstance - Aspect instance type.\n   * @typeParam TKind - Aspect application kind.\n   */\n  export interface Key<TInstance, TKind extends Application.Kind = 'default'> {\n\n    /**\n     * A referenced aspect of user input.\n     */\n    [InAspect__symbol]: InAspect<TInstance, TKind>;\n\n  }\n\n  /**\n   * An input aspect applied to control.\n   *\n   * This is what returned from `InAspect.applyTo()` method. Contains aspect instance and its manipulation methods.\n   *\n   * @typeParam TValue - Input value type.\n   * @typeParam TInstance - Aspect instance type.\n   * @typeParam TConvertedInstance - A type of aspect instance applied to converted control.\n   * The same as `Instance` by default.\n   */\n  export interface Applied<TValue, TInstance, TConvertedInstance extends TInstance = TInstance> {\n\n    /**\n     * Input aspect instance.\n     */\n    readonly instance: TInstance;\n\n    /**\n     * Converts an aspect to another value type.\n     *\n     * This method is called by input control created by {@link InControl.convert} method.\n     *\n     * @typeParam TTargetValue - Converted input value type.\n     * @param target - Target input control.\n     *\n     * @returns The same aspect applied to `target` control, or `undefined` if aspect can not be converted.\n     */\n    convertTo<TTargetValue>(target: InControl<TTargetValue>): Applied<TTargetValue, TConvertedInstance> | undefined;\n\n    /**\n     * Converts an aspect to the same value type.\n     *\n     * When defined, this method is called instead of {@link convertTo} when converting aspect for converted control\n     * with the same value. I.e. when {@link InConverter.Aspect aspect-only converters} used for conversion.\n     *\n     * @param target - Target input control.\n     *\n     * @returns The same aspect applied to `target` control, or `undefined` if aspect can not be converted.\n     */\n    attachTo?(target: InControl<TValue>): Applied<TValue, TInstance> | undefined;\n\n  }\n\n  export namespace Application {\n\n    /**\n     * A kind of input aspect application.\n     *\n     * This is a key of `InAspect.Application.Map` type.\n     */\n    export type Kind = keyof Map<unknown, unknown>;\n\n    /**\n     * A type of input aspect application result of the given application kind and input value type.\n     *\n     * @typeParam TInstance - Aspect instance type.\n     * @typeParam TValue - Input value type.\n     * @typeParam TKind - Aspect application kind.\n     */\n    export type Result<TInstance, TValue, TKind extends Kind> =\n        Applied<TValue, Instance<TInstance, TValue, TKind>>;\n\n    /**\n     * A type of applied aspect instance of the given application kind and input value type.\n     *\n     * @typeParam TInstance - Aspect instance type.\n     * @typeParam TValue - Input value type.\n     * @typeParam TKind - Aspect application kind.\n     */\n    export type Instance<TInstance, TValue, TKind extends Kind> =\n        ReturnType<Map<TInstance, TValue>[TKind]>;\n\n    /**\n     * A map implementing application result detection algorithms.\n     *\n     * Each method name here is a kind of aspect application, while the return value of this method is an aspect\n     * instance type.\n     *\n     * @typeParam TInstance - Aspect instance type.\n     * @typeParam TValue - Input value type.\n     */\n    export interface Map<TInstance, TValue> {\n\n      /**\n       * Default aspect application type. Just an aspect instance type.\n       */\n      default(): TInstance;\n\n    }\n\n  }\n\n}\n","import { NamespaceAliaser, NamespaceDef, newNamespaceAliaser } from '@frontmeans/namespace-aliaser';\nimport { knownInAspect } from '../applied-aspect';\nimport { InAspect, InAspect__symbol } from '../aspect';\nimport { InConverter } from '../converter';\n\n/**\n * Namespace aliaser aspect.\n *\n * Used by other aspect to generate unique names.\n *\n * Creates new namespace aliaser and reuses it across converted controls unless overridden e.g. by\n * {@link InNamespaceAliaser.to} converter.\n *\n * @category Aspect\n */\nexport type InNamespaceAliaser = NamespaceAliaser;\n\n/**\n * Default input-aspects namespace definition.\n *\n * @category Aspect\n */\nexport const InputAspects__NS: NamespaceDef = (/*#__PURE__*/ new NamespaceDef(\n    'https://surol.github.io/input-aspects/ns',\n    'inasp',\n    'input-aspects',\n));\n\n/**\n * @internal\n */\nconst InNamespaceAliaser__aspect: InAspect<InNamespaceAliaser> = {\n\n  applyTo() {\n    return knownInAspect(newNamespaceAliaser());\n  },\n\n};\n\n/**\n * @category Aspect\n */\nexport const InNamespaceAliaser = {\n\n  get [InAspect__symbol](): InAspect<InNamespaceAliaser> {\n    return InNamespaceAliaser__aspect;\n  },\n\n  /**\n   * Creates input control aspect converter that assigns the given namespace aliaser to converted control.\n   *\n   * @typeParam TValue - Converted control value type.\n   * @param nsAlias - Target namespace aliaser.\n   *\n   * @returns Input control aspect converter.\n   */\n  to<TValue>(nsAlias: InNamespaceAliaser): InConverter.Aspect<any, TValue> {\n    return {\n      applyAspect<TInstance, TKind extends InAspect.Application.Kind>(\n          aspect: InAspect<any, any>,\n      ): InAspect.Applied<any, InAspect.Application.Instance<TInstance, TValue, TKind>> | undefined {\n        return aspect === InNamespaceAliaser__aspect\n            ? knownInAspect(nsAlias) as InAspect.Application.Result<TInstance, TValue, TKind>\n            : undefined;\n      },\n    };\n  },\n\n};\n","import { newRenderSchedule, RenderScheduler } from '@frontmeans/render-scheduler';\nimport { knownInAspect } from '../applied-aspect';\nimport { InAspect, InAspect__symbol } from '../aspect';\nimport { InConverter } from '../converter';\n\n/**\n * Input elements render scheduler.\n *\n * It is used e.g. to schedule CSS updates. The control values and attributes are updated instantly.\n *\n * Uses the default render scheduler unless overridden e.g. by {@link InRenderScheduler.to} converter.\n *\n * @category Aspect\n */\nexport type InRenderScheduler = RenderScheduler;\n\n/**\n * @internal\n */\nconst InRenderScheduler__aspect: InAspect<InRenderScheduler> = {\n\n  applyTo() {\n    return knownInAspect(newRenderSchedule);\n  },\n\n};\n\n/**\n * @category Aspect\n */\nexport const InRenderScheduler = {\n\n  get [InAspect__symbol](): InAspect<InRenderScheduler> {\n    return InRenderScheduler__aspect;\n  },\n\n  /**\n   * Creates input control aspect converter that assigns the given render scheduler to converted control.\n   *\n   * @typeParam TValue - Converted control value type.\n   * @param scheduler - Target DOM render scheduler.\n   *\n   * @returns Input control aspect converter.\n   */\n  to<TValue>(scheduler: InRenderScheduler): InConverter.Aspect<any, TValue> {\n    return {\n      applyAspect<TInstance, TKind extends InAspect.Application.Kind>(\n          aspect: InAspect<any, any>,\n      ): InAspect.Applied<any, InAspect.Application.Instance<TInstance, TValue, TKind>> | undefined {\n        return aspect === InRenderScheduler__aspect\n            ? knownInAspect(scheduler) as InAspect.Application.Result<TInstance, TValue, TKind>\n            : undefined;\n      },\n    };\n  },\n\n};\n","import { AfterEvent, AfterEvent__symbol, EventKeeper, mapAfter_, trackValue } from '@proc7ts/fun-events';\nimport { noop } from '@proc7ts/primitives';\nimport { Supply, SupplyPeer } from '@proc7ts/supply';\nimport { InAspect, InAspect__symbol } from '../aspect';\nimport { InControl } from '../control';\n\nconst InRole__aspect: InAspect<InRole<any>, 'role'> = {\n\n  applyTo<TValue>(control: InControl<TValue>): InAspect.Applied<TValue, InRole<TValue>> {\n    return {\n      instance: new InControlRole<TValue>(control),\n      convertTo: noop,\n    };\n  },\n\n};\n\n/**\n * A role of input control.\n *\n * Contains arbitrary named roles. A special role `'default'` considered active when no other roles activated.\n *\n * Roles may be used to conditionally activate other input aspects of the control.\n *\n * @typeParam TValue - Input value type.\n */\nexport abstract class InRole<TValue> implements EventKeeper<[InRole.Active]> {\n\n  static get [InAspect__symbol](): InAspect<InRole<any>, 'role'> {\n    return InRole__aspect;\n  }\n\n  /**\n   * An `AfterEvent` keeper of active roles.\n   *\n   * The `[AfterEvent__symbol]` method returns this value.\n   */\n  abstract readonly read: AfterEvent<[InRole.Active]>;\n\n  [AfterEvent__symbol](): AfterEvent<[InRole.Active]> {\n    return this.read;\n  }\n\n  /**\n   * Adds named role to control.\n   *\n   * The named role becomes activate. To deactivate it the returned supply has to be cut off.\n   *\n   * The same role may be added multiple times. In that case the role will be deactivated once all role supplies cut\n   * off.\n   *\n   * @param role - A name of the role to add.\n   *\n   * @returns A role supply. Removes the added role once cut off.\n   */\n  abstract add(role: string): Supply;\n\n  /**\n   * Registers an activator of the given role.\n   *\n   * The given activator would be issued once the given role {@link add activated}. A supply instance returned\n   * by activator call will be cut off once the role deactivated.\n   *\n   * @param role - Target role name.\n   * @param activator - Role activator.\n   *\n   * @returns Activator supply. Removes the registered activator once cut off.\n   */\n  abstract when(role: string, activator: InRole.Activator<TValue>): Supply;\n\n}\n\nexport namespace InRole {\n\n  /**\n   * An activator signature of input control role.\n   *\n   * @typeParam TValue - Input value type.\n   */\n  export type Activator<TValue> =\n  /**\n   * @param control - A control the role is activate for.\n   * @param role - Activated role name.\n   * @param active - Active control role.\n   *\n   * @returns Activation supply peer. Its supply will be cut off once the role deactivated or activator removed. It is\n   * expected that this supply performs deactivation once cut off.\n   */\n      (\n          this: void,\n          control: InControl<TValue>,\n          role: string,\n          active: Active,\n      ) => SupplyPeer;\n\n  /**\n   * Active input control role.\n   *\n   * Contains all roles {@link InRole.add added} to control.\n   *\n   * Implements an `Iterable` interface by iterating over all active role names.\n   */\n  export interface Active extends Iterable<string> {\n\n    /**\n     * Checks whether the given role is active.\n     *\n     * @param role - Target role name.\n     *\n     * @returns `true` if the given role is {@link InRole.add added} to controller, or `false` otherwise.\n     */\n    has(role: string): boolean;\n\n  }\n\n}\n\nclass InRole$Active {\n\n  static create(): InRole$Active {\n\n    const result = new InRole$Active(new Map());\n\n    result.add('default', true);\n\n    return result;\n  }\n\n  readonly active: InRole.Active;\n  private _activate: (this: void) => void = noop;\n  private _defaultSupply!: Supply;\n\n  private constructor(\n      readonly roles: Map<string, InRole$Named>,\n  ) {\n    this.active = {\n      [Symbol.iterator]() {\n        return roles.keys();\n      },\n      has(role: string) {\n        return roles.has(role);\n      },\n    };\n  }\n\n  modify(): InRole$Active {\n\n    const result = new InRole$Active(this.roles);\n\n    result._defaultSupply = this._defaultSupply;\n\n    return result;\n  }\n\n  add(role: string, isDefault: boolean): Supply | undefined {\n\n    const named = this.roles.get(role);\n\n    if (named) {\n      // Already active.\n      ++named.active;\n      return;\n    }\n\n    const supply = new Supply();\n\n    this.roles.set(\n        role,\n        {\n          active: 1,\n          supply,\n        },\n    );\n\n    if (isDefault) {\n      this._defaultSupply = supply.whenOff(() => {\n\n        const toRemove = this.roles.get(role)!;\n\n        if (!--toRemove.active) {\n          this.roles.delete(role);\n        }\n      });\n    } else {\n\n      const defaultSupply = this._defaultSupply;\n\n      this.activateBy(() => defaultSupply.off());\n    }\n\n    return supply;\n  }\n\n  remove(role: string, reason: unknown): void {\n\n    const named = this.roles.get(role)!;\n\n    if (--named.active) {\n      // Still active.\n      return;\n    }\n\n    this.roles.delete(role);\n    this.activateBy(() => named.supply.off(reason));\n  }\n\n  activateBy(activator: () => void): void {\n\n    const prevActivator = this._activate;\n\n    this._activate = () => {\n      prevActivator();\n      activator();\n    };\n  }\n\n  activate(): void {\n\n    const activator = this._activate;\n\n    this._activate = noop;\n\n    activator();\n  }\n\n}\n\ninterface InRole$Named {\n  active: number;\n  readonly supply: Supply;\n}\n\nclass InControlRole<TValue> extends InRole<TValue> {\n\n  private readonly _active = trackValue<InRole$Active>(InRole$Active.create());\n  private readonly _activators = new Map<string, Map<Supply, InRole.Activator<TValue>>>();\n  readonly read: AfterEvent<[InRole.Active]>;\n\n  constructor(private readonly _control: InControl<TValue>) {\n    super();\n    this._active.on(active => active.activate());\n    this._active.supply.needs(_control);\n    this.read = this._active.read.do(mapAfter_(({ active }) => active));\n  }\n\n  add(role: string): Supply {\n\n    const active = this._active.it.modify();\n\n    this._add(active, role);\n    this._active.it = active;\n\n    return new Supply(reason => {\n\n      const active = this._active.it.modify();\n\n      active.remove(role, reason);\n      if (!active.roles.size) {\n        // No more active roles left.\n        // Enable `default` role.\n        this._add(active, 'default', true);\n      }\n\n      this._active.it = active;\n    });\n  }\n\n  when(role: string, activator: InRole.Activator<TValue>): Supply {\n\n    let activators = this._activators.get(role);\n\n    if (!activators) {\n      activators = new Map();\n      this._activators.set(role, activators);\n    }\n\n    const supply = new Supply().needs(this._control);\n\n    activators.set(\n        supply,\n        (control, role, active) => activator(control, role, active).supply.needs(supply),\n    );\n    supply.whenOff(() => {\n      activators!.delete(supply);\n      if (!activators!.size) {\n        this._activators.delete(role);\n      }\n    });\n\n    const named = this._active.it.roles.get(role);\n\n    if (named) {\n      // The role already active.\n      // Issue activator immediately.\n      named.supply.cuts(activator(this._control, role, this._active.it.active));\n    }\n\n    return supply;\n  }\n\n  private _add(active: InRole$Active, role: string, isDefault = false): void {\n\n    const activatedSupply = active.add(role, isDefault);\n\n    if (activatedSupply) {\n      // Role activated\n\n      const activators = this._activators.get(role);\n\n      if (activators) {\n        // Issue activators\n        for (const activator of activators.values()) {\n          activatedSupply.cuts(activator(this._control, role, this._active.it.active));\n        }\n      }\n    }\n  }\n\n}\n\ndeclare module '../aspect' {\n\n  export namespace InAspect.Application {\n\n    export interface Map<TInstance, TValue> {\n\n      /**\n       * Input role application type.\n       */\n      role(): InRole<TValue>;\n\n    }\n\n  }\n\n}\n","import { InAspect, InAspect__symbol } from './aspect';\n\n/**\n * @internal\n */\nexport function isAspectKey<TInstance, TKind extends InAspect.Application.Kind>(\n    value: any,\n): value is InAspect.Key<TInstance, TKind> {\n  return InAspect__symbol in value;\n}\n","import type { InConverter } from './converter';\n\n/**\n * @internal\n */\nexport const noopInConversion: InConverter.Aspect.Conversion<any> = {\n  applyAspect(_aspect): undefined {\n    return;\n  },\n};\n\n/**\n * @internal\n */\nexport function noopInConverter(): InConverter.Aspect.Conversion<any> {\n  return noopInConversion;\n}\n","import { arrayOfElements, isPresent, noop, valueProvider } from '@proc7ts/primitives';\nimport { filterArray, itsReduction, overElementsOf } from '@proc7ts/push-iterator';\nimport type { InAspect } from './aspect';\nimport type { InControl } from './control';\nimport { noopInConverter } from './noop-converter.impl';\n\n/**\n * Input control converter. Either aspect-only, or value one.\n *\n * Either a {@link InConverter.Conversion control conversion}, or a {@link InConverter.Factory conversion factory}.\n *\n * @category Converter\n * @typeParam TFrom - Original input value type.\n * @typeParam TTo - Converted input value type.\n */\nexport type InConverter<TFrom, TTo> =\n    | InConverter.Conversion<TFrom, TTo>\n    | InConverter.Factory<TFrom, TTo>;\n\n/**\n * @category Converter\n */\nexport namespace InConverter {\n\n  /**\n   * Input control conversion factory signature. Either aspect-only, or value one.\n   *\n   * @typeParam TFrom - Original input value type.\n   * @typeParam TTo - Converted input value type.\n   */\n  export type Factory<TFrom, TTo> = (\n      this: void,\n      from: InControl<TFrom>,\n      to: InControl<TTo>,\n  ) => Conversion<TFrom, TTo>;\n\n  /**\n   * Input control conversion. Either aspect-only, or full one.\n   *\n   * @typeParam TFrom - Original input value type.\n   * @typeParam TTo - Converted input value type.\n   */\n  export type Conversion<TFrom, TTo> =\n      | InConverter.Value.Conversion<TFrom, TTo>\n      | InConverter.Aspect.Conversion<TTo>;\n\n  /**\n   * Input control value converter.\n   *\n   * Either a {@link InConverter.Value.Conversion control value conversion}, or a {@link InConverter.Value.Factory\n   * value conversion factory}.\n   *\n   * @typeParam TFrom - Original input value type.\n   * @typeParam TTo - Converted input value type.\n   */\n  export type Value<TFrom, TTo> =\n      | InConverter.Value.Factory<TFrom, TTo>\n      | InConverter.Value.Conversion<TFrom, TTo>;\n\n  /**\n   * Input control aspect converter.\n   *\n   * Either an {@link InConverter.Aspect.Conversion control aspect conversion}, or {@link InConverter.Aspect.Factory\n   * aspect conversion factory}.\n   *\n   * @typeParam TFrom - Original input value type.\n   * @typeParam TTo - Converted input value type.\n   */\n  export type Aspect<TFrom, TTo = TFrom> =\n      | InConverter.Aspect.Conversion<TTo>\n      | InConverter.Aspect.Factory<TFrom, TTo>;\n\n}\n\n/**\n * @category Converter\n */\nexport namespace InConverter.Value {\n\n  /**\n   * Input control value conversion factory signature.\n   *\n   * Called by {@link InControl.convert} to construct a {@link Conversion control conversion}.\n   *\n   * Should not access converted control value as the one does not exist at calling time.\n   *\n   * @typeParam TFrom - Original input value type.\n   * @typeParam TTo - Converted input value type.\n   */\n  export type Factory<TFrom, TTo> =\n  /**\n   * @param from - Original input control.\n   * @param to - Converted input control.\n   *\n   * @returns Control conversion.\n   */\n      (\n          this: void,\n          from: InControl<TFrom>,\n          to: InControl<TTo>,\n      ) => Conversion<TFrom, TTo>;\n\n  /**\n   * Input control value conversion.\n   *\n   * @typeParam TFrom - Original input value type.\n   * @typeParam TTo - Converted input value type.\n   */\n  export interface Conversion<TFrom, TTo> {\n\n    /**\n     * Applies the given aspect to converted control in a custom way.\n     *\n     * @typeParam TInstance - Aspect instance type.\n     * @typeParam TKind - Aspect application kind.\n     * @param aspect - An aspect to apply.\n     *\n     * @returns Either applied aspect instance or `undefined` to apply the aspect in standard way (i.e. by converting\n     * it from corresponding aspect of original control).\n     */\n    applyAspect?<TInstance, TKind extends InAspect.Application.Kind>(\n        aspect: InAspect<TInstance, TKind>,\n    ): InAspect.Application.Result<TInstance, TTo, TKind> | undefined;\n\n    /**\n     * Converts original value.\n     *\n     * @param value - Original value to convert.\n     *\n     * @returns New value of converted control.\n     */\n    set(value: TFrom): TTo;\n\n    /**\n     * Restores original control value by converted one.\n     *\n     * @param value - A converted value to restore the original one by.\n     *\n     * @returns New value of original control.\n     */\n    get(value: TTo): TFrom;\n\n  }\n\n}\n\n/**\n * @category Converter\n */\nexport namespace InConverter.Aspect {\n\n  /**\n   * Input control aspect conversion factory signature.\n   *\n   * Called by {@link InControl.convert} to construct an {@link Conversion control aspect conversion}.\n   *\n   * Should not access converted control value as the one does not exist at calling time.\n   *\n   * @typeParam TFrom - Original input value type.\n   * @typeParam TTo - Converted input value type.\n   */\n  export type Factory<TFrom, TTo = TFrom> = (\n      this: void,\n      from: InControl<TFrom>,\n      to: InControl<TTo>,\n  ) => Conversion<TTo>;\n\n  /**\n   * Input control aspect conversion.\n   *\n   * @typeParam TValue - Input value type.\n   */\n  export interface Conversion<TValue> {\n\n    /**\n     * Applies the given aspect to converted control in a custom way.\n     *\n     * @typeParam TInstance - Aspect instance type.\n     * @typeParam TKind - Aspect application kind.\n     * @param aspect - An aspect to apply.\n     *\n     * @returns Either applied aspect instance or `undefined` to apply the aspect in standard way (i.e. by converting\n     * it from corresponding aspect of original control).\n     */\n    applyAspect<TInstance, TKind extends InAspect.Application.Kind>(\n        aspect: InAspect<TInstance, TKind>,\n    ): InAspect.Application.Result<TInstance, TValue, TKind> | undefined;\n\n  }\n\n}\n\n/**\n * Creates converter that combines input aspect converters.\n *\n * @typeParam TValue - Input value type.\n * @param converters - Input control aspect converters.\n *\n * @returns Input control aspect conversion factory.\n */\nexport function intoConvertedBy<TValue>(\n    ...converters: InConverter.Aspect<TValue, TValue>[]\n): InConverter.Aspect.Factory<TValue, TValue>;\n\n/**\n * Creates converter that combines input value converter with aspect converters.\n *\n * @category Converter\n * @typeParam TFrom - Original input value type.\n * @typeParam TTo - Converted input value type.\n * @param converter - Input control converter.\n * @param converters - Additional input control aspect converters.\n *\n * @returns Input control value conversion factory.\n */\nexport function intoConvertedBy<TFrom, TTo>(\n    converter: InConverter.Value<TFrom, TTo>,\n    ...converters: InConverter.Aspect<TFrom, TTo>[]\n): InConverter.Value.Factory<TFrom, TTo>;\n\n/**\n * Creates converter that combines any input control converter with aspect converters.\n *\n * @category Converter\n * @typeParam TFrom - Original input value type.\n * @typeParam TTo - Converted input value type.\n * @param converter - Input control converter.\n * @param converters - Additional input control aspect converters.\n *\n * @returns Input control conversion factory.\n */\nexport function intoConvertedBy<TFrom, TTo>(\n    converter?: InConverter<TFrom, TTo>,\n    ...converters: InConverter.Aspect<TFrom, TTo>[]\n): InConverter.Factory<TFrom, TTo>;\n\nexport function intoConvertedBy<TFrom, TTo>(\n    valueOrAspectConverter?: InConverter<TFrom, TTo> | InConverter.Aspect<TFrom, TTo>,\n    ...converters: InConverter.Aspect<TFrom, TTo>[]\n): InConverter.Factory<TFrom, TTo> {\n\n  type AspectApplicator = <TInstance, TKind extends InAspect.Application.Kind>(\n      aspect: InAspect<TInstance, TKind>,\n  ) => InAspect.Application.Result<TInstance, TTo, TKind> | undefined;\n\n  if (!valueOrAspectConverter) {\n    return noopInConverter;\n  }\n\n  const converter = inConverter(valueOrAspectConverter);\n\n  if (!converters.length) {\n    return converter;\n  }\n\n  const aspectConverters = converters.map<InConverter.Aspect.Factory<TFrom, TTo>>(inConverter);\n\n  return (\n      from,\n      to,\n  ): InConverter.Conversion<TFrom, TTo> => {\n\n    const conversion = converter(from, to);\n    const conversions = overElementsOf<InConverter.Conversion<TFrom, TTo>>(\n        [conversion],\n        filterArray<InConverter.Aspect.Conversion<TTo> | undefined, InConverter.Aspect.Conversion<TTo>>(\n            aspectConverters.map(acf => acf(from, to)),\n            isPresent,\n        ),\n    );\n\n    const applyAspect: AspectApplicator = itsReduction(\n        conversions,\n        (prev: AspectApplicator, cv: InConverter.Conversion<TFrom, TTo>) => cv.applyAspect\n            ? (aspect => prev(aspect) || cv.applyAspect!(aspect))\n            : prev,\n        noop,\n    );\n\n    if (/*#__INLINE__*/ isInAspectConversion(conversion)) {\n      return {\n        applyAspect,\n      };\n    }\n\n    return {\n      set: conversion.set.bind(conversion),\n      get: conversion.get.bind(conversion),\n      applyAspect,\n    };\n  };\n}\n\n/**\n * Creates converter that combines input aspect converters.\n *\n * @category Converter\n * @typeParam TValue - Input value type.\n * @param aspects - Input aspect converter(s) to combine.\n *\n * @returns Input aspect conversion factory.\n */\nexport function intoConvertedAspects<TValue>(\n    aspects?: InConverter.Aspect<TValue> | readonly InConverter.Aspect<TValue>[],\n): InConverter.Aspect.Factory<TValue> {\n  return aspects\n      ? intoConvertedBy(...arrayOfElements(aspects))\n      : intoConvertedBy<TValue>();\n}\n\n/**\n * Checks whether the given input control converter converts aspect only.\n *\n * @category Converter\n * @param conversion - Input control conversion to check.\n *\n * @returns `false` if the given conversion has a {@link InConverter.Value.Conversion.set set} method,\n * or `true` if there is no one.\n */\nexport function isInAspectConversion<TFrom, TTo>(\n    conversion: InConverter.Conversion<TFrom, TTo>,\n): conversion is InConverter.Aspect.Conversion<TTo> {\n  return !(conversion as Partial<InConverter.Value.Conversion<TFrom, TTo>>).set;\n}\n\n/**\n * @internal\n */\nfunction inConverter<TFrom, TTo>(\n    converter: InConverter.Value<TFrom, TTo>,\n): InConverter.Value.Factory<TFrom, TTo>;\n\n/**\n * @internal\n */\nfunction inConverter<TFrom, TTo>(\n    converter: InConverter.Aspect<TFrom, TTo>,\n): InConverter.Aspect.Factory<TFrom, TTo>;\n\n/**\n * @internal\n */\nfunction inConverter<TFrom, TTo>(\n    converter: InConverter<TFrom, TTo>,\n): InConverter.Factory<TFrom, TTo>;\n\nfunction inConverter<TFrom, TTo>(\n    converter: InConverter<TFrom, TTo> | InConverter.Aspect<TFrom, TTo>,\n): InConverter.Factory<TFrom, TTo> | InConverter.Aspect.Factory<TFrom, TTo> {\n  return typeof converter === 'function' ? converter : valueProvider<any>(converter);\n}\n","import { InAspect } from './aspect';\nimport { InControl } from './control';\nimport { InConverter, intoConvertedBy } from './converter';\n\n/**\n * @internal\n */\nexport const InBuilder$Impl__symbol = (/*#__PURE__*/ Symbol('InBuilder.impl'));\n\n/**\n * @internal\n */\nexport class InBuilder$Impl<TControl extends InControl<TValue>, TValue> {\n\n  private readonly _aspectsByKey = new Map<InAspect<any, any>, InConverter.Aspect.Factory<TValue>>();\n  private _commonAspects: InConverter.Aspect.Factory<TValue> | undefined = undefined;\n  private _setup: ((control: TControl) => void) | undefined = undefined;\n\n  addAspect(aspect: InAspect<any, any>, converter: InConverter.Aspect<TValue>): void {\n\n    const prev = this._aspectsByKey.get(aspect);\n\n    this._aspectsByKey.set(aspect, prev ? intoConvertedBy(prev, converter) : intoConvertedBy(converter));\n  }\n\n  addAspects(aspects: readonly InConverter.Aspect<TValue>[]): void {\n    this._commonAspects = this._commonAspects\n        ? intoConvertedBy(this._commonAspects, ...aspects)\n        : intoConvertedBy(...aspects);\n  }\n\n  setup(setup: (control: TControl) => void): void {\n\n    const prev = this._setup;\n\n    if (prev) {\n      this._setup = control => {\n        prev(control);\n        setup(control);\n      };\n    } else {\n      this._setup = setup;\n    }\n  }\n\n  build(factory: InControl.Factory<TControl, TValue>): TControl {\n\n    const control = factory({ aspects: this._aspects() });\n\n    // Control setup\n    if (this._setup) {\n      control.setup(this._setup);\n    }\n\n    return control;\n  }\n\n  private _aspects(): InConverter.Aspect<TValue> | undefined {\n    if (this._aspectsByKey.size) {\n\n      const byKey = intoConvertedByKey(this._aspectsByKey);\n\n      return this._commonAspects ? intoConvertedBy(byKey, this._commonAspects) : byKey;\n    }\n\n    return this._commonAspects;\n  }\n\n}\n\nfunction intoConvertedByKey<TValue>(\n    byKey: Map<InAspect<any, any>, InConverter.Aspect.Factory<TValue>>,\n): InConverter.Aspect.Factory<TValue> {\n  return (from, to) => ({\n    applyAspect<TInstance, TKind extends InAspect.Application.Kind>(\n        aspect: InAspect<any, any>,\n    ): InAspect.Application.Result<TInstance, TValue, TKind> | undefined {\n\n      const converter = byKey.get(aspect);\n\n      return converter && converter(from, to).applyAspect(aspect);\n    },\n  });\n}\n","import { InAspect, InAspect__symbol } from './aspect';\nimport { isAspectKey } from './aspect.impl';\nimport { InBuilder$Impl, InBuilder$Impl__symbol } from './builder.impl';\nimport { InControl } from './control';\nimport { InConverter } from './converter';\n\n/**\n * User input control builder.\n *\n * @category Control\n * @typeParam TControl - Control type.\n * @typeParam TValue - Input value type.\n */\nexport class InBuilder<TControl extends InControl<TValue>, TValue = InControl.ValueType<TControl>> {\n\n  /**\n   * @internal\n   */\n  private readonly [InBuilder$Impl__symbol]: InBuilder$Impl<TControl, TValue> = new InBuilder$Impl();\n\n  /**\n   * Registers an aspect to add to the built control.\n   *\n   * @param aspectKey - A key of aspect to add.\n   * @param converter - An aspect converter to the built control from the {@link inValueOf same-valued one}.\n   *\n   * @returns `this` builder instance.\n   */\n  addAspect(aspectKey: InAspect.Key<any, any>, converter: InConverter.Aspect<TValue>): this {\n    this[InBuilder$Impl__symbol].addAspect(aspectKey[InAspect__symbol], converter);\n    return this;\n  }\n\n  /**\n   * Registers arbitrary aspects to add to the built control.\n   *\n   * These aspects always applied after {@link addAspect concrete} ones.\n   *\n   * @param aspects - Input aspects to add. These are aspect converters to the built control from the {@link inValueOf\n   * same-valued one}.\n   *\n   * @returns `this` builder instance.\n   */\n  addAspects(...aspects: InConverter.Aspect<TValue>[]): this {\n    if (aspects.length) {\n      this[InBuilder$Impl__symbol].addAspects(aspects);\n    }\n    return this;\n  }\n\n  /**\n   * Registers additional setup of the built control.\n   *\n   * The setup is performed when the control {@link build built}.\n   *\n   * @param setup - A function that accepts a built control as its only parameter.\n   *\n   * @returns `this` builder instance.\n   */\n  setup(setup: (this: void, control: TControl) => void): this;\n\n  /**\n   * Registers additional setup of the built control's aspect.\n   *\n   * The setup is performed when the control {@link build built}.\n   *\n   * @typeParam TInstance - Aspect instance type.\n   * @typeParam TKind - Aspect application kind.\n   * @param aspectKey - A key of aspect to set up.\n   * @param setup - A function that accepts an applied aspect instance and a built control as parameters.\n   *\n   * @returns `this` builder instance.\n   */\n  setup<TInstance, TKind extends InAspect.Application.Kind>(\n      aspectKey: InAspect.Key<TInstance, TKind>,\n      setup: (this: void, aspect: InAspect.Application.Instance<TInstance, TValue, TKind>, control: TControl) => void,\n  ): this;\n\n  setup<TInstance, TKind extends InAspect.Application.Kind>(\n      aspectKeyOrSetup: InAspect.Key<TInstance, TKind> | ((this: void, control: TControl) => void),\n      aspectSetup?: (\n          this: void,\n          aspect: InAspect.Application.Instance<TInstance, TValue, TKind>,\n          control: TControl,\n      ) => void,\n  ): this {\n    if (isAspectKey(aspectKeyOrSetup)) {\n      this[InBuilder$Impl__symbol].setup(control => control.setup(aspectKeyOrSetup, aspectSetup!));\n    } else {\n      this[InBuilder$Impl__symbol].setup(aspectKeyOrSetup);\n    }\n    return this;\n  }\n\n  /**\n   * Builds control.\n   *\n   * @param factory - Control factory.\n   *\n   * @returns New user input control constructed by the given `factory` and set up with configured aspects and setup\n   * procedures.\n   */\n  build(factory: InControl.Factory<TControl, TValue>): TControl {\n    return this[InBuilder$Impl__symbol].build(factory);\n  }\n\n}\n","import { InAspect } from './aspect';\nimport { InControl } from './control';\nimport { InConverter } from './converter';\n\n/**\n * @internal\n */\nexport const InControl$Aspects__symbol = (/*#__PURE__*/ Symbol('InControl.aspects'));\n\n/**\n * @internal\n */\nexport type InControl$Impl<TControl extends InControl<TValue>, TValue> = TControl & {\n\n  _applyAspect<TInstance, TKind extends InAspect.Application.Kind>(\n      _aspect: InAspect<TInstance, TKind>,\n  ): InAspect.Application.Result<TInstance, TValue, TKind> | undefined;\n\n};\n\n/**\n * @internal\n */\nexport class InControl$Aspects<TControl extends InControl<TValue>, TValue> {\n\n  private readonly _byKey = new Map<InAspect<any, any>, InAspect.Applied<any, any>>();\n\n  constructor(\n      readonly control: InControl$Impl<TControl, TValue>,\n      readonly aspects: InConverter.Aspect.Conversion<TValue>,\n  ) {}\n\n  aspect<TInstance, TKind extends InAspect.Application.Kind>(\n      aspect: InAspect<TInstance, TKind>,\n  ): InAspect.Application.Result<TInstance, TValue, TKind> {\n\n    const applied = this._byKey.get(aspect);\n\n    if (applied) {\n      // Aspect applied already.\n      // Return it.\n      return applied;\n    }\n\n    const application = this.control._applyAspect(aspect)\n        || aspect.applyTo(this.control) as InAspect.Application.Result<TInstance, TValue, TKind>;\n\n    this._byKey.set(aspect, application);\n\n    return application;\n  }\n\n}\n","import { EventEmitter, OnEvent, trackValue, ValueTracker } from '@proc7ts/fun-events';\nimport { arrayOfElements, asis, noop } from '@proc7ts/primitives';\nimport { Supply } from '@proc7ts/supply';\nimport { InAspect, InAspect__symbol } from './aspect';\nimport { isAspectKey } from './aspect.impl';\nimport { InControl$Aspects, InControl$Aspects__symbol, InControl$Impl } from './control.impl';\nimport { InConverter, intoConvertedAspects, intoConvertedBy, isInAspectConversion } from './converter';\nimport { noopInConversion } from './noop-converter.impl';\n\n/**\n * User input control.\n *\n * Maintains input value and various aspects of the user input, such as input focus, validity, etc.\n *\n * @category Control\n * @typeParam TValue - Input value type.\n */\nexport abstract class InControl<TValue> extends ValueTracker<TValue> {\n\n  /**\n   * @internal\n   */\n  readonly [InControl$Aspects__symbol]: InControl$Aspects<this, TValue>;\n\n  /**\n   * Constructs user input control.\n   *\n   * @param aspects - Input aspects applied by default. These are aspect converters to constructed control from the\n   * {@link inValueOf same-valued one}.\n   */\n  constructor(\n      {\n        aspects,\n      }: {\n        readonly aspects?: InConverter.Aspect<TValue> | readonly InConverter.Aspect<TValue>[];\n      } = {},\n  ) {\n    super();\n\n    const aspectList = arrayOfElements(aspects);\n\n    this[InControl$Aspects__symbol] = new InControl$Aspects(\n        this as unknown as InControl$Impl<this, TValue>,\n        aspectList.length\n            ? intoConvertedAspects(aspectList)(inValueOf(this), this)\n            : noopInConversion,\n    );\n  }\n\n  /**\n   * Input value.\n   */\n  abstract it: TValue;\n\n  /**\n   * This control's input supply.\n   *\n   * Releases all control resources when cut off.\n   *\n   * Each control has its own supply. An input supply of converted control depends on the input supply of control it\n   * is converted from.\n   *\n   * After this supply cut off the control should no longer be used.\n   */\n  abstract get supply(): Supply;\n\n  /**\n   * Retrieves an aspect instance applied to this control.\n   *\n   * If the given `aspect` is not applied yet, then applies it first.\n   *\n   * @typeParam TInstance - Aspect instance type.\n   * @typeParam TKind - Aspect application kind.\n   * @param aspectKey - A key of aspect to apply to this control.\n   *\n   * @returns An applied aspect instance.\n   */\n  aspect<TInstance, TKind extends InAspect.Application.Kind>(\n      aspectKey: InAspect.Key<TInstance, TKind>,\n  ): InAspect.Application.Instance<TInstance, TValue, TKind> {\n    return this[InControl$Aspects__symbol].aspect(aspectKey[InAspect__symbol]).instance;\n  }\n\n  /**\n   * Performs additional setup of this control.\n   *\n   * @param setup - A function that accepts this control as its only parameter.\n   *\n   * @returns `this` control instance.\n   */\n  setup(setup: (this: void, control: this) => void): this;\n\n  /**\n   * Performs additional setup of this control's aspect.\n   *\n   * @typeParam TInstance - Aspect instance type.\n   * @typeParam TKind - Aspect application kind.\n   * @param aspectKey - A key of aspect to set up.\n   * @param setup - A function that accepts an applied aspect instance and this control as parameters.\n   *\n   * @returns `this` control instance.\n   */\n  setup<TInstance, TKind extends InAspect.Application.Kind>(\n      aspectKey: InAspect.Key<TInstance, TKind>,\n      setup: (this: void, aspect: InAspect.Application.Instance<TInstance, TValue, TKind>, control: this) => void,\n  ): this;\n\n  setup<TInstance, TKind extends InAspect.Application.Kind>(\n      aspectKeyOrSetup: InAspect.Key<TInstance, TKind> | ((this: void, control: this) => void),\n      aspectSetup?: (\n          this: void,\n          aspect: InAspect.Application.Instance<TInstance, TValue, TKind>,\n          control: this,\n      ) => void,\n  ): this {\n    if (isAspectKey(aspectKeyOrSetup)) {\n      aspectSetup!(this.aspect(aspectKeyOrSetup), this);\n    } else {\n      aspectKeyOrSetup(this);\n    }\n    return this;\n  }\n\n  /**\n   * Converts this control to another one without changing its value type.\n   *\n   * The converted aspect may have another value and input aspects.\n   *\n   * @typeParam TTo - Converted input value type.\n   * @param by - Input control aspect converters.\n   *\n   * @returns Converted control.\n   */\n  convert(\n      ...by: InConverter.Aspect<TValue, TValue>[]\n  ): InControl<TValue>;\n\n  /**\n   * Converts this control to another one.\n   *\n   * The converted aspect may have another value and input aspects.\n   *\n   * @typeParam TTo - Converted input value type.\n   * @param by - Input control converter.\n   * @param and - Additional input control aspect converters.\n   *\n   * @returns Converted control.\n   */\n  convert<TTo>(\n      by: InConverter<TValue, TTo>,\n      ...and: InConverter.Aspect<TValue, TTo>[]\n  ): InControl<TTo>;\n\n  convert<TTo>(\n      by?: InConverter<TValue, TTo>,\n      ...and: InConverter.Aspect<TValue, TTo>[]\n  ): InControl<TValue> | InControl<TTo> {\n    return new InControl$Converted(this, intoConvertedBy(by, ...and));\n  }\n\n  /**\n   * Applies the given aspect to this control in a custom way.\n   *\n   * @typeParam TInstance - Aspect instance type.\n   * @typeParam TKind - Aspect application kind.\n   * @param aspect - An aspect to apply.\n   *\n   * @returns Either applied aspect instance or `undefined` to apply the aspect in standard way (i.e. using\n   * `InAspect.applyTo()` method).\n   */\n  protected _applyAspect<TInstance, TKind extends InAspect.Application.Kind>(\n      aspect: InAspect<TInstance, TKind>,\n  ): InAspect.Application.Result<TInstance, TValue, TKind> | undefined {\n    return this[InControl$Aspects__symbol].aspects.applyAspect(aspect);\n  }\n\n}\n\n/**\n * @category Control\n */\nexport namespace InControl {\n\n  /**\n   * A value type of the given input control type.\n   *\n   * @typeParam TControl - Input control type.\n   */\n  export type ValueType<TControl extends InControl<any>> = TControl extends InControl<infer TValue> ? TValue : never;\n\n  /**\n   * User input control factory signature.\n   *\n   * @typeParam TControl - Control type.\n   * @typeParam TValue - Input value type.\n   */\n  export type Factory<TControl extends InControl<TValue>, TValue = ValueType<TControl>> =\n  /**\n   * @param aspects - Input aspects applied by default. This is an aspect converter to constructed control from the\n   * {@link inValueOf same-valued one}.\n   *\n   * @returns Created control instance.\n   */\n      (\n          this: void,\n          {\n            aspects,\n          }: {\n            readonly aspects?: InConverter.Aspect<TValue>;\n          },\n      ) => TControl;\n\n}\n\n/**\n * @internal\n */\nclass InControl$SameValued<TValue> extends InControl<TValue> {\n\n  private _supply?: Supply;\n\n  constructor(private readonly _control: InControl<TValue>) {\n    super();\n  }\n\n  get supply(): Supply {\n    return this._supply || (this._supply = new Supply(noop).needs(this._control));\n  }\n\n  get it(): TValue {\n    return this._control.it;\n  }\n\n  set it(value: TValue) {\n    this._control.it = value;\n  }\n\n  get on(): OnEvent<[TValue, TValue]> {\n    return this._control.on;\n  }\n\n}\n\n/**\n * Constructs input control with the same value as another one.\n *\n * The constructed control does not inherit any aspects from original one.\n *\n * @category Control\n * @typeParam TValue - Input value type.\n * @param control - Original control containing the value.\n *\n * @returns New input control that accesses the value of original `control`.\n */\nexport function inValueOf<TValue>(control: InControl<TValue>): InControl<TValue> {\n  return new InControl$SameValued(control);\n}\n\nclass InControl$Converted<TFrom, TTo> extends InControl<TTo> {\n\n  readonly supply: Supply;\n  private readonly _on = new EventEmitter<[TTo, TTo]>();\n  private readonly _it: ValueTracker<[TTo, number]>;\n  protected readonly _applyAspect: <TInstance, TKind extends InAspect.Application.Kind>(\n      this: this,\n      aspect: InAspect<TInstance, TKind>,\n  ) => InAspect.Application.Result<TInstance, TTo, TKind> | undefined;\n\n  constructor(src: InControl<TFrom>, by: InConverter.Factory<TFrom, TTo>) {\n    super();\n    this.supply = new Supply().needs(src);\n\n    let lastRev = 0;\n    let backward: TFrom | undefined;\n\n    const conversion = by(src, this);\n    let set: (value: TFrom) => TTo;\n    let get: (value: TTo) => TFrom;\n    let convertAspect: <TInstance, TKind extends InAspect.Application.Kind>(\n        aspect: InAspect<TInstance, TKind>,\n    ) => InAspect.Application.Result<TInstance, TTo, TKind> | undefined;\n\n    if (/*#__INLINE__*/ isInAspectConversion(conversion)) {\n      set = asis as (value: TFrom) => TTo;\n      get = asis as (value: TTo) => TFrom;\n      convertAspect = <TInstance, TKind extends InAspect.Application.Kind>(aspect: InAspect<TInstance, TKind>) => {\n\n        const fallback: InAspect.Applied<any, any> = src[InControl$Aspects__symbol].aspect(aspect);\n\n        return fallback.attachTo ? fallback.attachTo(this) : fallback.convertTo(this);\n      };\n    } else {\n      set = conversion.set;\n      get = conversion.get;\n      convertAspect = <TInstance, TKind extends InAspect.Application.Kind>(aspect: InAspect<TInstance, TKind>) => {\n\n        const fallback: InAspect.Applied<any, any> = src[InControl$Aspects__symbol].aspect(aspect);\n\n        return fallback.convertTo(this);\n      };\n    }\n\n    this._applyAspect = aspect => conversion.applyAspect?.(aspect) || convertAspect(aspect);\n    this._it = trackValue([set(src.it), 0]);\n    this._it.supply.needs(this.supply);\n    this._it.on(([newValue], [oldValue]) => {\n      if (newValue !== oldValue) {\n        this._on.send(newValue, oldValue);\n      }\n    }).cuts(this._on);\n    src.on(value => {\n      if (value !== backward) {\n        this._it.it = [set(value), ++lastRev];\n      }\n    }).cuts(this);\n    this._it.on(([value, rev]) => {\n      if (rev !== lastRev) {\n        lastRev = rev;\n        backward = get(value);\n        try {\n          src.it = backward;\n        } finally {\n          backward = undefined;\n        }\n      }\n    });\n  }\n\n  get it(): TTo {\n    return this._it.it[0];\n  }\n\n  set it(value: TTo) {\n\n    const [prevValue, prevRev] = this._it.it;\n\n    if (value !== prevValue) {\n      this._it.it = [value, prevRev + 1];\n    }\n  }\n\n  get on(): OnEvent<[TTo, TTo]> {\n    return this._on.on;\n  }\n\n}\n","import {\n  AfterEvent,\n  AfterEvent__symbol,\n  EventKeeper,\n  EventSender,\n  OnEvent,\n  OnEvent__symbol,\n} from '@proc7ts/fun-events';\nimport { inconvertibleInAspect } from '../applied-aspect';\nimport { InAspect, InAspect__symbol } from '../aspect';\nimport { InControl } from '../control';\n\n/**\n * @internal\n */\nconst InContainer__aspect: InAspect<InContainer<any> | null, 'container'> = {\n  applyTo(control) {\n    return inconvertibleInAspect(control, InContainer);\n  },\n};\n\n/**\n * An input control containing other controls.\n *\n * Container is available as an aspect of itself and converted controls with the same value.\n *\n * @category Control\n * @typeParam TValue - Input value type.\n */\nexport abstract class InContainer<TValue> extends InControl<TValue> {\n\n  static get [InAspect__symbol](): InAspect<InContainer<any> | null, 'container'> {\n    return InContainer__aspect;\n  }\n\n  /**\n   * Controls of this input container.\n   */\n  abstract readonly controls: InContainerControls;\n\n  protected _applyAspect<TInstance, TKind extends InAspect.Application.Kind>(\n      aspect: InAspect<TInstance, TKind>,\n  ): InAspect.Application.Result<TInstance, TValue, TKind> | undefined {\n    return aspect === InContainer__aspect as InAspect<any>\n        ? inconvertibleInAspect(this, InContainer, this) as InAspect.Application.Result<TInstance, TValue, TKind>\n        : super._applyAspect(aspect);\n  }\n\n}\n\n/**\n * @category Control\n */\nexport namespace InContainer {\n\n  /**\n   * Input controls container entry.\n   *\n   * This is a tuple containing control key and control itself.\n   *\n   * Container implementations may apply limitations on the type of keys and input values they support.\n   */\n  export type Entry = readonly [PropertyKey, InControl<any>];\n\n  /**\n   * A snapshot of input controls within container.\n   *\n   * Extends an `Iterable` interface by iterating over all nested controls.\n   */\n  export interface Snapshot extends Iterable<InControl<any>> {\n\n    [Symbol.iterator](): IterableIterator<InControl<any>>;\n\n    /**\n     * Iterates over nested control entries.\n     *\n     * @returns An iterable iterator over entries.\n     */\n    entries(): IterableIterator<InContainer.Entry>;\n\n  }\n\n}\n\n/**\n * Controls of input container.\n *\n * Allows to track container contents. I.e. nested controls, their additions and removal.\n *\n * Implements `EventSender` interface by sending arrays of added and removed control entries.\n *\n * Implements `EventKeeper` interface by sending container contents instance each time it is changed.\n *\n * @category Control\n */\nexport abstract class InContainerControls\n     implements EventSender<[InContainer.Entry[], InContainer.Entry[]]>, EventKeeper<[InContainer.Snapshot]> {\n\n  /**\n   * An `OnEvent` sender of container updates.\n   *\n   * Sends two arrays on each container update: the first one contains added control entries, while the second one\n   * contains removed control entries.\n   *\n   * The `[OnEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly on: OnEvent<[InContainer.Entry[], InContainer.Entry[]]>;\n\n  /**\n   * An `AfterEvent` keeper of input container contents.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly read: AfterEvent<[InContainer.Snapshot]>;\n\n  [OnEvent__symbol](): OnEvent<[InContainer.Entry[], InContainer.Entry[]]> {\n    return this.on;\n  }\n\n  [AfterEvent__symbol](): AfterEvent<[InContainer.Snapshot]> {\n    return this.read;\n  }\n\n}\n\ndeclare module '../aspect' {\n\n  export namespace InAspect.Application {\n\n    export interface Map<TInstance, TValue> {\n\n      /**\n       * Input controls container application type.\n       */\n      container(): InContainer<TValue> | null;\n\n    }\n\n  }\n\n}\n","import {\n  AfterEvent,\n  AfterEvent__symbol,\n  EventEmitter,\n  EventKeeper,\n  EventSender,\n  mapAfter,\n  OnEvent,\n  OnEvent__symbol,\n} from '@proc7ts/fun-events';\nimport { Supply } from '@proc7ts/supply';\nimport { knownInAspect } from '../applied-aspect';\nimport { InAspect, InAspect__symbol } from '../aspect';\nimport { InControl } from '../control';\nimport { InContainer } from './container.control';\n\n/**\n * @internal\n */\nconst InParents__aspect: InAspect<InParents> = {\n  applyTo(control): InAspect.Applied<any, InParents> {\n    return knownInAspect(new InControlParents(control));\n  },\n};\n\n/**\n * Parents of input control.\n *\n * Reflects all containers the control belongs to. Note that component may belong to multiple containers. Or even\n * to the same container multiple times.\n *\n * Implements `EventSender` interface by sending arrays of parent entries the control is added to and removed from.\n *\n * Implements `EventKeeper` interface by sending a snapshot of all parents each time it is updated.\n *\n * @category Aspect\n */\nexport abstract class InParents\n    implements EventKeeper<[Iterable<InParents.Entry>]>, EventSender<[InParents.Entry[], InParents.Entry[]]> {\n\n  static get [InAspect__symbol](): InAspect<InParents> {\n    return InParents__aspect;\n  }\n\n  /**\n   * An `OnEvent` sender of parent updates.\n   *\n   * Sends two arrays on each parents update: the first one contains added parent entries, while the second one\n   * contains removed parent entries.\n   *\n   * The `[OnEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly on: OnEvent<[InParents.Entry[], InParents.Entry[]]>;\n\n  /**\n   * An `AfterEvent` keeper of control parents.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly read: AfterEvent<[InParents.All]>;\n\n  [OnEvent__symbol](): OnEvent<[InParents.Entry[], InParents.Entry[]]> {\n    return this.on;\n  }\n\n  [AfterEvent__symbol](): AfterEvent<[InParents.All]> {\n    return this.read;\n  }\n\n  /**\n   * Adds the input control to the given parent container under the given key.\n   *\n   * @param entry - Parent container entry.\n   *\n   * @returns A parent container supply. Removes the control from the parent container once cut off.\n   */\n  abstract add(entry: InParents.Entry): Supply;\n\n}\n\n/**\n * @category Aspect\n */\nexport namespace InParents {\n\n  /**\n   * Parent container entry of input control.\n   */\n  export interface Entry {\n\n    /**\n     * Parent container.\n     */\n    readonly parent: InContainer<any>;\n\n  }\n\n  /**\n   * All control parents as iterable instance.\n   */\n  export interface All extends Iterable<Entry> {\n\n    [Symbol.iterator](): IterableIterator<Entry>;\n\n  }\n\n}\n\n/**\n * @internal\n */\nclass InControlParents extends InParents {\n\n  readonly read: AfterEvent<[InParents.All]>;\n  private readonly _map = new Map<InParents.Entry, Supply>();\n  private readonly _on = new EventEmitter<[InParents.Entry[], InParents.Entry[]]>();\n\n  constructor(private readonly _control: InControl<any>) {\n    super();\n    this._on.supply.needs(this._control);\n\n    const allParents = (): InParents.All => ({\n      [Symbol.iterator]: () => this._map.keys(),\n    });\n\n    this.read = this.on.do(mapAfter(allParents, allParents));\n  }\n\n  add(entry: InParents.Entry): Supply {\n\n    const existingSupply = this._map.get(entry);\n\n    if (existingSupply) {\n      // Parent entry already added. Doing nothing\n      return existingSupply;\n    }\n\n    // Adding new entry\n    const supply = new Supply(() => {\n      this._map.delete(entry);\n      this._on.send([], [entry]);\n    });\n\n    this._map.set(entry, supply);\n    this._on.send([entry], []);\n\n    return supply\n        .needs(this._control)\n        .needs(entry.parent);\n  }\n\n  get on(): OnEvent<[InParents.Entry[], InParents.Entry[]]> {\n    return this._on.on;\n  }\n\n}\n","import { DomEventDispatcher } from '@frontmeans/dom-events';\nimport { AfterEvent } from '@proc7ts/fun-events';\nimport { inconvertibleInAspect } from './applied-aspect';\nimport { InAspect, InAspect__symbol } from './aspect';\nimport { InControl } from './control';\n\n/**\n * @internal\n */\nconst InElement__aspect: InAspect<InElement<any> | null, 'element'> = {\n  applyTo(control) {\n    return inconvertibleInAspect(control, InElement);\n  },\n};\n\n/**\n * HTML input element control.\n *\n * It is also available as aspect of itself and converted controls with the same value.\n *\n * @category Control\n * @typeParam TValue - Input value type.\n * @typeParam TElt - A type of input HTML element.\n */\nexport abstract class InElement<TValue, TElt = HTMLElement> extends InControl<TValue> {\n\n  static get [InAspect__symbol](): InAspect<InElement<any> | null, 'element'> {\n    return InElement__aspect;\n  }\n\n  /**\n   * HTML input element this control is based on.\n   */\n  abstract readonly element: TElt;\n\n  /**\n   * DOM event dispatcher of this element.\n   */\n  abstract readonly events: DomEventDispatcher;\n\n  /**\n   * An `AfterEvent` keeper of user input.\n   */\n  abstract readonly input: AfterEvent<[InElement.Input<TValue>]>;\n\n  protected _applyAspect<TInstance, TKind extends InAspect.Application.Kind>(\n      aspect: InAspect<TInstance, TKind>,\n  ): InAspect.Application.Result<TInstance, TValue, TKind> | undefined {\n    return aspect as InAspect<any, any> === InElement__aspect\n        ? inconvertibleInAspect(\n            this,\n            InElement,\n            this as InElement<TValue, any>,\n        ) as InAspect.Application.Result<TInstance, TValue, TKind>\n        : super._applyAspect(aspect);\n  }\n\n}\n\n/**\n * @category Control\n */\nexport namespace InElement {\n\n  /**\n   * User input.\n   *\n   * @typeParam TValue - Input value type.\n   */\n  export interface Input<TValue> {\n\n    /**\n     * The value user entered.\n     */\n    value: TValue;\n\n    /**\n     * An event caused the value to be applied.\n     *\n     * The value has been applied programmatically if missing.\n     */\n    event?: Event;\n\n  }\n\n}\n\ndeclare module './aspect' {\n\n  export namespace InAspect.Application {\n\n    export interface Map<TInstance, TValue> {\n\n      /**\n       * Input element application type.\n       */\n      element(): InElement<TValue> | null;\n\n    }\n\n  }\n\n}\n","import {\n  afterAll,\n  afterEach,\n  AfterEvent,\n  AfterEvent__symbol,\n  afterSent,\n  afterSupplied,\n  afterThe,\n  digAfter,\n  digAfter_,\n  EventEmitter,\n  EventKeeper,\n  EventSender,\n  isEventKeeper,\n  mapAfter,\n  mapOn,\n  OnEvent,\n  OnEvent__symbol,\n  supplyAfter,\n  trackValue,\n  translateAfter,\n  translateOn,\n  ValueTracker,\n} from '@proc7ts/fun-events';\nimport { valuesProvider } from '@proc7ts/primitives';\nimport { itsElements, overElementsOf } from '@proc7ts/push-iterator';\nimport { Supply } from '@proc7ts/supply';\nimport { builtInAspect } from '../applied-aspect';\nimport { InAspect, InAspect__symbol } from '../aspect';\nimport { InParents } from '../containers';\nimport { InParentsAspect } from '../containers/parents.aspect.impl';\nimport { InControl } from '../control';\nimport { InElement } from '../element.control';\n\n/**\n * @internal\n */\nconst InMode__aspect: InAspect<InMode> = {\n\n  applyTo<TValue>(control: InControl<TValue>): InAspect.Applied<TValue, InMode> {\n    return builtInAspect(\n        control,\n        InMode,\n        ctrl => new InControlMode(ctrl),\n    );\n  },\n\n};\n\n/**\n * Input mode aspect of control.\n *\n * Control can be either enabled, disabled, or readonly.\n *\n * Each control maintains its own state, while nested controls respect container ones. I.e. when container is disabled\n * all nested ones are also disabled. When container is readonly, all nested ones are also readonly, unless explicitly\n * disabled.\n *\n * When applied to input element this aspect maintains its `disabled` and `readonly` attributes (not properties!).\n *\n * Implements `EventSender` interface by sending new and old mode values on each update.\n *\n * Implements `EventKeeper` interface by sending actual mode value.\n *\n * @category Aspect\n */\nexport abstract class InMode implements EventSender<[InMode.Value, InMode.Value]>, EventKeeper<[InMode.Value]> {\n\n  static get [InAspect__symbol](): InAspect<InMode> {\n    return InMode__aspect;\n  }\n\n  /**\n   * An `OnEvent` sender of input mode updates.\n   *\n   * Sends a new mode value along with old one as second parameter.\n   *\n   * The `[OnEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly on: OnEvent<[InMode.Value, InMode.Value]>;\n\n  /**\n   * An `AfterEvent` keeper of input mode.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly read: AfterEvent<[InMode.Value]>;\n\n  [OnEvent__symbol](): OnEvent<[InMode.Value, InMode.Value]> {\n    return this.on;\n  }\n\n  [AfterEvent__symbol](): AfterEvent<[InMode.Value]> {\n    return this.read;\n  }\n\n  /**\n   * Own input mode tracker.\n   */\n  abstract readonly own: ValueTracker<InMode.Value>;\n\n  /**\n   * Checks whether control in the given `mode` has data to submit.\n   *\n   * @param mode - Input control mode to check.\n   *\n   * @returns `true` if control in the given `mode` has data to submit, or `false` otherwise.\n   */\n  static hasData(mode: InMode.Value): boolean {\n    return mode !== 'off' && mode[0] !== '-';\n  }\n\n  /**\n   * Derives input mode from another `source`.\n   *\n   * If the `source` mode is disabled, this one would be disabled too. If the `source` mode is read-only, then this one\n   * would be read-only, unless disabled already.\n   *\n   * @param source - A source to derive input mode from.\n   *\n   * @returns Derived input mode supply. Disables `source` mode derivation once cut off.\n   */\n  abstract derive(source: InMode.Source): Supply;\n\n  /**\n   * Unregisters all receivers.\n   *\n   * @param reason - Optional reason.\n   *\n   * @returns `this` instance.\n   */\n  done(reason?: any): this {\n    this.own.supply.off(reason);\n    return this;\n  }\n\n}\n\n/**\n * @category Aspect\n */\nexport namespace InMode {\n\n  /**\n   * Possible input control mode value:\n   *\n   * - `on` when control is writable. This is the default.\n   * - `ro` when control is read-only. Such control can not be edited, but still can be submitted.\n   * - `off` when control is disabled. Such control is not submitted.\n   * - `-on` when control is writable, but not submitted.\n   * - `-ro` when control is read-only, but not submitted.\n   */\n  export type Value = 'on' | 'ro' | 'off' | '-on' | '-ro';\n\n  /**\n   * A source of input mode.\n   *\n   * This is either an event keeper of {@link Value mode value}, or a function returning one and accepting target input\n   * control as the only parameter.\n   */\n  export type Source =\n      | EventKeeper<[InMode.Value]>\n      | ((this: void, control: InControl<any>) => EventKeeper<[InMode.Value]>);\n\n}\n\n/**\n * @internal\n */\nclass OwnModeTracker extends ValueTracker<InMode.Value> {\n\n  private readonly _tracker: ValueTracker<InMode.Value>;\n\n  constructor(element: InElement<any> | null) {\n    super();\n    this._tracker = trackValue(element ? initialInMode(element.element) : 'on');\n  }\n\n  get supply(): Supply {\n    return this._tracker.supply;\n  }\n\n  get it(): InMode.Value {\n    return this._tracker.it;\n  }\n\n  set it(value: InMode.Value) {\n    switch (value) {\n    case 'off':\n    case 'ro':\n    case '-on':\n    case '-ro':\n      break;\n    default:\n      value = 'on'; // Correct the value.\n    }\n\n    this._tracker.it = value;\n  }\n\n  get on(): OnEvent<[InMode.Value, InMode.Value]> {\n    return this._tracker.on;\n  }\n\n}\n\n/**\n * @internal\n */\nclass DerivedInModes {\n\n  readonly read: AfterEvent<[InMode.Value]>;\n  private readonly _all = new Set<AfterEvent<[InMode.Value]>>();\n  private readonly _on = new EventEmitter<[]>();\n\n  constructor() {\n\n    const sources: AfterEvent<[Set<AfterEvent<[InMode.Value]>>]> = afterSent(\n        this._on.on.do(mapOn(() => this._all)),\n        valuesProvider(this._all),\n    );\n\n    this.read = sources.do(\n        digAfter_((set: Set<AfterEvent<[InMode.Value]>>) => afterEach(...set)),\n        mapAfter(mergeInModes),\n    );\n  }\n\n  add(source: AfterEvent<[InMode.Value]>): Supply {\n\n    const supply = new Supply(() => {\n      this._all.delete(source);\n      this._on.send();\n    });\n\n    this._all.add(source);\n    this._on.send();\n\n    return supply;\n  }\n\n}\n\n/**\n * @internal\n */\nclass InControlMode extends InMode {\n\n  readonly own: OwnModeTracker;\n  readonly on: OnEvent<[InMode.Value, InMode.Value]>;\n  readonly read: AfterEvent<[InMode.Value]>;\n  private readonly _derived = new DerivedInModes();\n\n  constructor(private readonly _control: InControl<any>) {\n    super();\n\n    const element = _control.aspect(InElement);\n\n    this.own = new OwnModeTracker(element);\n    this.own.supply.needs(_control);\n    this.derive(_control.aspect(InParentsAspect).read.do(digAfter(parentsInMode)));\n\n    let last: InMode.Value = 'on';\n\n    this.read = afterAll({\n      derived: this._derived.read,\n      own: this.own,\n    }).do(translateAfter(\n        (\n            send,\n            {\n              derived: [derived],\n              own: [own],\n            },\n        ) => {\n\n          let next: InMode.Value;\n\n          if (own === 'off' || derived === 'off') {\n            next = 'off';\n          } else {\n\n            let off = false;\n\n            if (own[0] === '-') {\n              off = true;\n              own = own.substring(1) as InMode.Value;\n            }\n            if (derived[0] === '-') {\n              off = true;\n              derived = derived.substring(1) as InMode.Value;\n            }\n            next = derived === 'ro' ? 'ro' : own;\n            if (off) {\n              next = '-' + next as InMode.Value;\n            }\n          }\n\n          if (last !== next) {\n            send(last = next);\n          }\n        },\n        valuesProvider<[InMode.Value]>(last),\n    ));\n\n    let lastUpdate: InMode.Value = 'on';\n\n    this.on = this.read.do(translateOn((send, value) => {\n\n      const old = lastUpdate;\n\n      if (old !== value) {\n        send(lastUpdate = value, old);\n      }\n    }));\n\n    if (element) {\n      this.read(value => applyInMode(element.element, value));\n    }\n  }\n\n  derive(source: InMode.Source): Supply {\n    return this._derived.add(\n        afterSupplied(isEventKeeper(source) ? source : source(this._control)).do(supplyAfter(this._control)),\n    ).needs(this._control);\n  }\n\n}\n\n/**\n * @internal\n */\nfunction initialInMode(element: HTMLElement): InMode.Value {\n  return element.getAttribute('disabled') != null\n      ? 'off'\n      : (element.getAttribute('readonly') != null ? 'ro' : 'on');\n}\n\n/**\n * @internal\n */\nfunction applyInMode(element: HTMLElement, value: InMode.Value): void {\n  switch (value) {\n  case 'off':\n    element.setAttribute('disabled', '');\n    break;\n  case 'ro':\n  case '-ro':\n    // Workaround of https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/12087679/\n    element.setAttribute('disabled', '');\n    element.removeAttribute('disabled');\n    element.setAttribute('readonly', '');\n    break;\n  default:\n    // Workaround of https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/12087679/\n    element.setAttribute('disabled', '');\n    element.removeAttribute('disabled');\n    // Workaround of https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/12087679/\n    element.setAttribute('readonly', '');\n    element.removeAttribute('readonly');\n  }\n}\n\n/**\n * @internal\n */\nfunction parentsInMode(parents: InParents.All): AfterEvent<[InMode.Value]> {\n\n  const parentList = itsElements(parents);\n\n  if (!parentList.length) {\n    return afterThe('on');\n  }\n\n  const parentModes = parentList.map(({ parent }) => parent.aspect(InMode));\n\n  return afterEach(...parentModes).do(mapAfter(mergeInModes));\n}\n\n/**\n * @internal\n * @param modes\n */\nfunction mergeInModes(...modes: [InMode.Value][]): InMode.Value {\n  return inModeValue(...overElementsOf<InMode.Value>(...modes));\n}\n\n/**\n * Merges multiple input mode values.\n *\n * @category Aspect\n * @param modes - Input mode values to merge.\n *\n * @returns Merged input mode value.\n */\nexport function inModeValue(...modes: InMode.Value[]): InMode.Value {\n\n  let ro = false;\n  let off = false;\n\n  for (const mode of modes) {\n    switch (mode) {\n    case 'off':\n      return 'off';\n    case 'ro':\n      ro = true;\n      break;\n    case '-on':\n      off = true;\n      break;\n    case '-ro':\n      off = true;\n      ro = true;\n      break;\n    case 'on':\n    }\n  }\n\n  return off ? (ro ? '-ro' : '-on') : (ro ? 'ro' : 'on');\n}\n","import { afterAll, AfterEvent, mapAfter } from '@proc7ts/fun-events';\nimport { builtInAspect } from '../applied-aspect';\nimport { InAspect, InAspect__symbol } from '../aspect';\nimport { InControl } from '../control';\nimport { InMode } from './mode.aspect';\n\n/**\n * A data aspect of the input.\n *\n * Represents input control data that will be submitted.\n *\n * Input data is typically the same as control value with respect to {@link InMode input mode}. I.e. when input mode is\n * `off` the data is `undefined`.\n *\n * An aspect interface is an `AfterEvent` keeper of input data.\n *\n * @category Aspect\n * @typeParam TValue - Input value type.\n */\nexport type InData<TValue> = AfterEvent<[InData.DataType<TValue>?]>;\n\n/**\n * @internal\n */\nconst InData__aspect: Aspect = {\n\n  applyTo<TValue>(control: InControl<TValue>): Applied<TValue> {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    return builtInAspect(control, InData, <TValue>(ctrl: InControl<TValue>) => afterAll({\n      value: ctrl,\n      mode: ctrl.aspect(InMode),\n    }).do(mapAfter(\n        ({ value: [value], mode: [mode] }) => InMode.hasData(mode)\n            ? value as any\n            : undefined,\n    )));\n  },\n\n};\n\n/**\n * Input data aspect.\n */\ninterface Aspect extends InAspect<InData<any>, 'data'> {\n\n  applyTo<TValue>(control: InControl<TValue>): Applied<TValue>;\n\n}\n\n/**\n * An input data aspect applied to control.\n */\ninterface Applied<TValue> extends InAspect.Applied<TValue, InData<TValue>, InData<any>> {\n\n  convertTo<TTo>(target: InControl<TTo>): Applied<TTo> | undefined;\n\n}\n\n/**\n * @category Aspect\n */\nexport const InData = {\n\n  get [InAspect__symbol](): InAspect<InData<any>, 'data'> {\n    return InData__aspect;\n  },\n\n};\n\n/**\n * @category Aspect\n */\nexport namespace InData {\n\n  /**\n   * Input data type.\n   *\n   * This is either a partial value (for the object), or the value itself (for everything else).\n   *\n   * @typeParam TValue - Input value type.\n   */\n  export type DataType<TValue> =\n      | (TValue extends object ? { [K in keyof TValue]?: DataType<TValue[K]> } : TValue)\n      | undefined;\n\n}\n\ndeclare module '../aspect' {\n\n  export namespace InAspect.Application {\n\n    export interface Map<TInstance, TValue> {\n\n      /**\n       * Input data aspect application type.\n       */\n      data(): InData<TValue>;\n\n    }\n\n  }\n\n}\n","import {\n  afterAll,\n  AfterEvent,\n  AfterEvent__symbol,\n  afterThe,\n  digAfter_,\n  EventEmitter,\n  EventKeeper,\n  EventSender,\n  mapAfter,\n  onceAfter,\n  OnEvent,\n  OnEvent__symbol,\n  supplyAfter,\n  trackValue,\n  translateOn,\n  ValueTracker,\n} from '@proc7ts/fun-events';\nimport { noop } from '@proc7ts/primitives';\nimport {\n  iteratorOf,\n  itsEach,\n  mapIt,\n  overEntries,\n  overIterator,\n  PushIterable,\n  PushIterator,\n  PushIterator__symbol,\n} from '@proc7ts/push-iterator';\nimport { neverSupply, Supply } from '@proc7ts/supply';\nimport { inconvertibleInAspect } from '../applied-aspect';\nimport { InAspect, InAspect__symbol } from '../aspect';\nimport { InControl } from '../control';\nimport { InConverter } from '../converter';\nimport { InData, InMode } from '../data';\nimport { InContainer, InContainerControls } from './container.control';\nimport { InParents } from './parents.aspect';\n\n/**\n * @internal\n */\nconst InGroup__aspect: InAspect<InGroup<any> | null, 'group'> = {\n  applyTo(control) {\n    return inconvertibleInAspect(control, InGroup);\n  },\n};\n\n/**\n * A group of input controls.\n *\n * Nested controls are identified by keys and can be added and removed via `controls` property.\n *\n * Group value (called model) is an object formed by nested control values. The model property value is the one of the\n * control with the same key, if present. When model is updated corresponding controls are also updated.\n *\n * Group is available as an aspect of itself and converted controls with the same value.\n *\n * @category Control\n * @typeParam TModel - Group model type, i.e. its value type.\n */\nexport abstract class InGroup<TModel extends object> extends InContainer<TModel> {\n\n  static get [InAspect__symbol](): InAspect<InGroup<any> | null, 'group'> {\n    return InGroup__aspect;\n  }\n\n  /**\n   * Input group controls.\n   */\n  abstract readonly controls: InGroupControls<TModel>;\n\n  protected _applyAspect<TInstance, TKind extends InAspect.Application.Kind>(\n      aspect: InAspect<any, any>,\n  ): InAspect.Application.Result<TInstance, TModel, TKind> | undefined {\n    return aspect === InGroup__aspect\n        ? inconvertibleInAspect(this, InGroup, this) as InAspect.Application.Result<TInstance, TModel, TKind>\n        : super._applyAspect(aspect);\n  }\n\n}\n\n/**\n * @category Control\n */\nexport namespace InGroup {\n\n  /**\n   * Input group controls.\n   *\n   * This is a read-only object containing an input control per each model property under the same key.\n   *\n   * @typeParam TModel - Group model type, i.e. its value type.\n   */\n  export type Controls<TModel> = {\n    readonly [K in keyof TModel]?: InControl<TModel[K]>;\n  };\n\n  /**\n   * Input controls group entry.\n   *\n   * This is a tuple containing model key and corresponding control.\n   *\n   * @typeParam TModel - Group model type, i.e. its value type.\n   * @typeParam TKey - Model keys type.\n   */\n  export type Entry<TModel, TKey extends keyof TModel = any> = readonly [TKey, InControl<TModel[TKey]>];\n\n  /**\n   * A snapshot of input control group controls.\n   *\n   * @typeParam TModel - Group model type, i.e. its value type.\n   */\n  export interface Snapshot<TModel> extends InContainer.Snapshot {\n\n    entries(): IterableIterator<Entry<TModel>>;\n\n    /**\n     * Returns input control with the given key, if present.\n     *\n     * @param key - Control key, i.e. corresponding model property key.\n     *\n     * @returns Target control, or `undefined` if there is no control set for this key.\n     */\n    get<TKey extends keyof TModel>(key: TKey): InGroup.Controls<TModel>[TKey] | undefined;\n\n  }\n\n}\n\n/**\n * Input group controls.\n *\n * @category Control\n * @typeParam TModel - Group model type, i.e. its value type.\n */\nexport abstract class InGroupControls<TModel>\n    extends InContainerControls\n    implements EventSender<[InGroup.Entry<TModel>[], InGroup.Entry<TModel>[]]>,\n        EventKeeper<[InGroup.Snapshot<TModel>]> {\n\n  abstract readonly on: OnEvent<[InGroup.Entry<TModel>[], InGroup.Entry<TModel>[]]>;\n\n  abstract readonly read: AfterEvent<[InGroup.Snapshot<TModel>]>;\n\n  /**\n   * Sets input control with the given key.\n   *\n   * Replaces existing control if already present.\n   *\n   * @typeParam TKey - Model key type.\n   * @param key - A key of input control to set. I.e. corresponding model property key.\n   * @param control - Input control to add, or `undefined` to remove control.\n   *\n   * @returns A supply of just added control that removes it once cut off. A cut off supply when set to `undefined`.\n   */\n  abstract set<TKey extends keyof TModel>(key: TKey, control: InControl<TModel[TKey]> | undefined): Supply;\n\n  /**\n   * Sets multiple input controls at a time.\n   *\n   * @param controls - A map of controls under their keys. A value can be `undefined` to remove corresponding control.\n   *\n   * @returns A supply of just added controls that removes them once cut off.\n   */\n  abstract set(controls: InGroup.Controls<TModel>): Supply;\n\n  /**\n   * Removes input control with the given key.\n   *\n   * Calling this method is the same as calling `set(key, undefined)`\n   *\n   * @param key - A key of input control to remove. I.e. corresponding model property key.\n   */\n  remove(key: keyof TModel): void {\n    this.set(key, undefined);\n  }\n\n  /**\n   * Removes all input controls.\n   */\n  abstract clear(): void;\n\n}\n\nexport interface InGroupControls<TModel> {\n\n  [OnEvent__symbol](): OnEvent<[InGroup.Entry<TModel>[], InGroup.Entry<TModel>[]]>;\n\n  [AfterEvent__symbol](): AfterEvent<[InGroup.Snapshot<TModel>]>;\n\n}\n\n/**\n * @internal\n */\ntype InGroupEntry = readonly [InControl<any>, Supply]; // When event supply is done the control is unused\n\n/**\n * @internal\n */\nconst inControlReplacedReason = {};\n\n/**\n * @internal\n */\nclass InGroupSnapshot<TModel> implements InGroup.Snapshot<TModel>, PushIterable<InControl<any>> {\n\n  private readonly _it: PushIterable<InControl<any>>;\n  private readonly _entriesIt: PushIterable<InGroup.Entry<TModel>>;\n\n  constructor(private readonly _map: Map<keyof TModel, InGroupEntry>) {\n    this._it = mapIt(\n        overIterator(() => this._map.values()),\n        ([control]: InGroupEntry) => control,\n    );\n    this._entriesIt = mapIt(this._map, ([key, [control]]) => [key, control]);\n  }\n\n  get<TKey extends keyof TModel>(key: TKey): InGroup.Controls<TModel>[TKey] | undefined {\n\n    const entry = this._map.get(key);\n\n    return entry && entry[0] as InGroup.Controls<TModel>[TKey];\n  }\n\n  [Symbol.iterator](): PushIterator<InControl<any>> {\n    return this[PushIterator__symbol]();\n  }\n\n  [PushIterator__symbol](accept?: PushIterator.Acceptor<InControl<any>>): PushIterator<InControl<any>> {\n    return this._it[PushIterator__symbol](accept);\n  }\n\n  entries(): PushIterator<InGroup.Entry<TModel>> {\n    return iteratorOf(this._entriesIt);\n  }\n\n}\n\n/**\n * @internal\n */\nclass InGroupMap<TModel extends object> {\n\n  readonly _supply = new Supply();\n  private _map = new Map<keyof TModel, InGroupEntry>();\n  private _shot?: InGroupSnapshot<TModel>;\n\n  constructor(private readonly _controls: InGroupControlControls<TModel>) {\n  }\n\n  set<TKey extends keyof TModel>(\n      key: TKey,\n      control: InControl<TModel[TKey]> | undefined,\n      added: [keyof TModel, InGroupEntry][],\n      removed: [keyof TModel, InGroupEntry][],\n  ): Supply {\n\n    const replaced = this._map.get(key);\n    let supply: Supply;\n\n    if (control) {\n      supply = new Supply();\n\n      const entry = this.newEntry(key, control, supply);\n\n      let sendUpdate = true;\n\n      if (replaced) {\n        if (replaced[0] === control) {\n          // Do not send update when replacing control with itself\n          sendUpdate = false;\n        } else {\n          removed.push([key, replaced]);\n        }\n      }\n\n      if (sendUpdate) {\n        this.modify().set(key, entry);\n        added.push([key, entry]);\n      } else {\n        this._map.set(key, entry);\n      }\n    } else {\n      supply = neverSupply();\n      if (replaced) {\n        removed.push([key, replaced]);\n        this.modify().delete(key);\n      }\n    }\n    if (replaced) {\n      replaced[1].off(inControlReplacedReason);\n    }\n\n    return supply;\n  }\n\n  private newEntry<TKey extends keyof TModel>(\n      key: TKey,\n      control: InControl<TModel[TKey]>,\n      supply: Supply,\n  ): InGroupEntry {\n    return [\n      control,\n      new Supply(reason => {\n        if (reason !== inControlReplacedReason) {\n          this._controls.remove(key);\n        }\n      })\n          .needs(this._supply)\n          .needs(supply)\n          .whenOff(\n              reason => supply.off(reason === inControlReplacedReason ? undefined : reason),\n          ),\n    ];\n  }\n\n  private modify(): Map<keyof TModel, InGroupEntry> {\n    if (this._shot) {\n\n      const map = new Map<keyof TModel, InGroupEntry>();\n\n      itsEach(this._map.entries(), ([k, e]) => map.set(k, e));\n      this._shot = undefined;\n      this._map = map;\n    }\n\n    return this._map;\n  }\n\n  snapshot(): InGroup.Snapshot<TModel> {\n    return this._shot || (this._shot = new InGroupSnapshot<TModel>(this._map));\n  }\n\n  clear(): [keyof TModel, InGroupEntry][] {\n\n    const added: [keyof TModel, InGroupEntry][] = [];\n    const removed: [keyof TModel, InGroupEntry][] = [];\n\n    itsEach(this._map.keys(), key => this.set(key, undefined, added, removed));\n\n    return removed;\n  }\n\n}\n\n/**\n * @internal\n */\nclass InGroupControlControls<TModel extends object> extends InGroupControls<TModel> {\n\n  readonly on: OnEvent<[InGroup.Entry<TModel>[], InGroup.Entry<TModel>[]]>;\n  readonly read: AfterEvent<[InGroup.Snapshot<TModel>]>;\n  private readonly _map: InGroupMap<TModel>;\n  private readonly _updates = new EventEmitter<[[keyof TModel, InGroupEntry][], [keyof TModel, InGroupEntry][]]>();\n\n  constructor(private readonly _group: InGroupControl<TModel>) {\n    super();\n\n    const applyModelToControls = (model: TModel): void => {\n      this.read.do(onceAfter)(snapshot => {\n\n        const withValues = new Set<keyof TModel>();\n\n        itsEach(overEntries(model), ([key, value]) => {\n          withValues.add(key);\n\n          const control = snapshot.get(key);\n\n          if (control) {\n            control.it = value;\n          }\n        });\n\n        itsEach(snapshot.entries(), ([key, control]) => {\n          if (!withValues.has(key)) {\n            control.it = undefined!;\n          }\n        });\n      });\n    };\n\n    this._map = new InGroupMap<TModel>(this);\n\n    this.on = this._updates.on.do(translateOn(\n        (send, added, removed) => send(\n            added.map(controlEntryToGroupEntry),\n            removed.map(controlEntryToGroupEntry),\n        ),\n    ));\n\n    const takeSnapshot = this._map.snapshot.bind(this._map);\n\n    this.read = this._updates.on.do(mapAfter(\n        takeSnapshot,\n        takeSnapshot,\n    ));\n\n    this._map._supply.needs(_group.read(applyModelToControls));\n  }\n\n  set<TKey extends keyof TModel>(\n      keyOrControls: TKey | InGroup.Controls<TModel>,\n      newControl?: InControl<TModel[TKey]> | undefined,\n  ): Supply {\n\n    const group = this._group;\n    const added: [keyof TModel, InGroupEntry][] = [];\n    const removed: [keyof TModel, InGroupEntry][] = [];\n    let supply: Supply;\n\n    if (typeof keyOrControls === 'object') {\n      supply = new Supply();\n      itsEach(overEntries(keyOrControls), ([key, value]) => {\n        this._map.set(key, value, added, removed).needs(supply);\n      });\n    } else {\n      supply = this._map.set(keyOrControls, newControl, added, removed);\n    }\n    if (added.length || removed.length) {\n      this._updates.send(added, removed);\n      if (added.length) {\n        applyControlsToModel();\n      }\n    }\n\n    return supply;\n\n    function applyControlsToModel(): void {\n\n      let newModel: TModel | undefined;\n\n      added.forEach(<TKey extends keyof TModel>(keyAndEntry: [keyof TModel, InGroupEntry]) => {\n\n        const [key, [control, supply]] = keyAndEntry as [TKey, [InControl<TModel[TKey]>, Supply]];\n\n        control.aspect(InParents).add({ parent: group }).as(supply);\n\n        const value = control.it;\n\n        if (newModel) {\n          newModel[key] = value;\n        } else {\n\n          const model = group.it;\n\n          if (model[key] !== value) {\n            newModel = { ...model, [key]: value };\n          }\n        }\n      });\n\n      if (newModel) {\n        group.it = newModel;\n      }\n\n      added.forEach(<TKey extends keyof TModel>(keyAndEntry: [keyof TModel, InGroupEntry]) => {\n\n        const [key, [control, supply]] = keyAndEntry as [TKey, [InControl<TModel[TKey]>, Supply]];\n\n        control.read.do(supplyAfter(supply))(value => {\n          if (group.it[key] !== value) {\n            group.it = {\n              ...group.it,\n              [key]: value,\n            };\n          }\n        }).cuts(supply);\n      });\n    }\n  }\n\n  clear(): void {\n\n    const removed = this._map.clear();\n\n    if (removed.length) {\n      this._updates.send([], removed);\n    }\n  }\n\n}\n\n/**\n * @internal\n */\nfunction controlEntryToGroupEntry<TModel extends object>(\n    [key, [control]]: [keyof TModel, InGroupEntry],\n): InGroup.Entry<TModel> {\n  return [key, control];\n}\n\n/**\n * @internal\n */\nclass InGroupControl<TModel extends object> extends InGroup<TModel> {\n\n  private readonly _model: ValueTracker<TModel>;\n  readonly controls: InGroupControlControls<TModel>;\n\n  constructor(\n      model: TModel,\n      opts: {\n        readonly aspects?: InConverter.Aspect<TModel> | readonly InConverter.Aspect<TModel>[];\n      },\n  ) {\n    super(opts);\n    this._model = trackValue(model);\n    this.controls = new InGroupControlControls(this);\n    this.supply.whenOff(() => this.controls.clear());\n  }\n\n  get supply(): Supply {\n    return this._model.supply;\n  }\n\n  get it(): TModel {\n    return this._model.it;\n  }\n\n  set it(value: TModel) {\n    this._model.it = value;\n  }\n\n  get on(): OnEvent<[TModel, TModel]> {\n    return this._model.on;\n  }\n\n  protected _applyAspect<TInstance, TKind extends InAspect.Application.Kind>(\n      aspect: InAspect<any, any>,\n  ): InAspect.Application.Result<TInstance, TModel, TKind> | undefined {\n    if (aspect === InData[InAspect__symbol]) {\n      return {\n        instance: inGroupData(this),\n        convertTo: noop,\n      } as InAspect.Application.Result<any, any, any>;\n    }\n    return super._applyAspect(aspect);\n  }\n\n}\n\n/**\n * @internal\n */\nfunction inGroupData<TModel extends object>(group: InGroup<TModel>): InData<TModel> {\n  return afterAll({\n    cs: group.controls,\n    model: group,\n    mode: group.aspect(InMode),\n  }).do(\n      digAfter_(readInGroupData),\n  );\n}\n\n/**\n * @internal\n */\nfunction readInGroupData<TModel extends object>(\n    {\n      cs: [controls],\n      model: [model],\n      mode: [mode],\n    }: {\n      cs: [InGroup.Snapshot<TModel>];\n      model: [TModel];\n      mode: [InMode.Value];\n    },\n): AfterEvent<[InData.DataType<TModel>?]> {\n  if (!InMode.hasData(mode)) {\n    return afterThe();\n  }\n\n  const csData = {} as { [key in keyof TModel]: InData<any> };\n\n  itsEach(controls.entries(), ([key, control]) => {\n    csData[key as keyof TModel] = control.aspect(InData);\n  });\n\n  return afterAll(csData).do(mapAfter(controlsData => {\n\n    const data: Partial<TModel> = { ...model };\n\n    itsEach(\n        overEntries(controlsData),\n        <TKey extends keyof TModel>(keyAndControlData: readonly [keyof TModel, [InData.DataType<any>?]]) => {\n\n          const [key, [controlData]] = keyAndControlData as readonly [TKey, [TModel[TKey]?]];\n\n          data[key] = controlData;\n        },\n    );\n\n    return data as InData.DataType<TModel>;\n  }));\n}\n\n/**\n * Constructs input controls group.\n *\n * @category Control\n * @typeParam TModel - Group model type, i.e. its value type.\n * @param model - Initial model of the group.\n * @param aspects - Input aspects applied by default. These are aspect converters to constructed control\n * from {@link inValueOf same-valued one}.\n *\n * @returns New input controls group.\n */\nexport function inGroup<TModel extends object>(\n    model: TModel,\n    {\n      aspects,\n    }: {\n      readonly aspects?: InConverter.Aspect<TModel> | readonly InConverter.Aspect<TModel>[];\n    } = {},\n): InGroup<TModel> {\n  return new InGroupControl(model, { aspects });\n}\n\ndeclare module '../aspect' {\n\n  export namespace InAspect.Application {\n\n    export interface Map<TInstance, TValue> {\n\n      /**\n       * Input control group application type.\n       */\n      group(): InGroup<TValue extends object ? TValue : never> | null;\n\n    }\n\n  }\n\n}\n","import { AfterEvent, afterThe } from '@proc7ts/fun-events';\n\n/**\n * @internal\n */\nconst RequireNothing$ = (/*#__PURE__*/ afterThe<[]>());\n\n/**\n * Input validator that requires nothing.\n *\n * @category Validation\n */\nexport function requireNothing(): AfterEvent<[]> {\n  return RequireNothing$;\n}\n","import {\n  AfterEvent,\n  AfterEvent__symbol,\n  afterEventBy,\n  afterSupplied,\n  EventEmitter,\n  EventKeeper,\n  shareAfter,\n  supplyAfter,\n} from '@proc7ts/fun-events';\nimport { noop, valuesProvider } from '@proc7ts/primitives';\nimport { flatMapIt, itsEach } from '@proc7ts/push-iterator';\nimport { Supply } from '@proc7ts/supply';\nimport { InControl } from '../control';\nimport { InValidation } from './validation.aspect';\nimport { inValidator, InValidator } from './validator';\n\nconst dontRemove = {};\n\n/**\n * @internal\n */\nexport class InValidationMessages<TValue> implements EventKeeper<InValidation.Message[]> {\n\n  readonly _messages: AfterEvent<InValidation.Message[]>;\n  readonly from: (this: void, validator: InValidator<TValue>) => Supply;\n\n  constructor(control: InControl<TValue>) {\n\n    const emitter = new EventEmitter<InValidation.Message[]>();\n    const validators = new Map<AfterEvent<InValidation.Message[]>, Supply>();\n    const validatorMessages = new Map<InValidator<TValue>, InValidation.Message[]>();\n    // Sends validation messages\n    let send: () => void = noop;\n    // Validates using the given validator\n    let validate: (validator: AfterEvent<InValidation.Message[]>, validatorSupply: Supply) => void = noop;\n\n    this._messages = afterEventBy<InValidation.Message[]>(receiver => {\n\n      // Validation messages supply\n      const resultSupply = afterSupplied(emitter, valuesProvider())(receiver).whenOff(() => {\n        send = noop; // Disable message sending\n        validate = noop; // Disable validation\n      });\n\n      // Enable validation using the given validator\n      validate = (validator: AfterEvent<InValidation.Message[]>, validatorSupply: Supply) => {\n\n        const supply = validator(\n            (...messages) => {\n              if (messages.length) {\n                // Replace messages reported by validator.\n                validatorMessages.set(validator, messages);\n              } else if (!validatorMessages.delete(validator)) {\n                // Nothing removed. No need to send messages\n                return;\n              }\n              send(); // Send all messages.\n            },\n        )\n            .needs(validatorSupply)\n            .whenOff(reason => {\n              if (reason !== dontRemove) {\n                validatorSupply.off(reason);\n              }\n              if (validatorMessages.delete(validator)) {\n                // Send all messages only if the removed validator reported some messages earlier\n                send();\n              }\n            });\n\n        resultSupply.whenOff(() => supply.off(dontRemove));\n      };\n\n      // Enable each validator\n      itsEach(validators.entries(), ([validator, validatorSupply]) => validate(validator, validatorSupply));\n\n      // Enable message sending\n      send = () => {\n        emitter.send(...allMessages());\n      };\n\n      // Send messages if present already\n      if (validatorMessages.size) {\n        send();\n      }\n    }).do(\n        shareAfter,\n        supplyAfter(control),\n    );\n\n    this.from = validator => {\n\n      const source = inValidator(validator)(control);\n      const validatorSupply = new Supply(() => {\n        validators.delete(source);\n      });\n\n      validators.set(source, validatorSupply);\n      validate(source, validatorSupply); // Start validation using validator\n\n      return validatorSupply.needs(control);\n    };\n\n    function allMessages(): Iterable<InValidation.Message> {\n      return flatMapIt(validatorMessages.values());\n    }\n  }\n\n  [AfterEvent__symbol](): AfterEvent<InValidation.Message[]> {\n    return this._messages;\n  }\n\n}\n","import { AfterEvent, afterSupplied, EventKeeper, isEventKeeper, translateAfter } from '@proc7ts/fun-events';\nimport { arrayOfElements, valueProvider } from '@proc7ts/primitives';\nimport { InControl } from '../control';\nimport { InValidation } from './validation.aspect';\n\n/**\n * Input validator.\n *\n * Validator can be added to input validation aspect using `InValidation.by()` method. After that all validation\n * messages it sends are reported by validation aspect. Multiple messages could be sent at a time. These messages\n * replace the previously sent ones. To report the absence of error just send an empty event without messages.\n *\n * This can be one either a validation messages event keeper, a function returning one and accepting input control\n * as its only parameter, or simple validator instance.\n *\n * @category Validation\n * @typeParam TValue - Input value type.\n */\nexport type InValidator<TValue> =\n    | EventKeeper<InValidation.Message[]>\n    | ((this: void, control: InControl<TValue>) => EventKeeper<InValidation.Message[]>)\n    | InValidator.Simple<TValue>;\n\n/**\n * @category Validation\n */\nexport namespace InValidator {\n\n  /**\n   * Simple input validator.\n   *\n   * @typeParam TValue - Input value type.\n   */\n  export interface Simple<TValue> {\n\n    /**\n     * Validates the user input.\n     *\n     * This method is called each time input value changes. The returned messages then reported by input validation\n     * aspect.\n     *\n     * @param control - Input control to validate.\n     *\n     * @returns Either validation message, array of validation messages, or `null`/`unknown` to indicate their absence.\n     */\n    validate(control: InControl<TValue>): InValidation.Message | InValidation.Message[] | null | undefined;\n\n  }\n\n}\n\n/**\n * Converts arbitrary input validator to normalized form.\n *\n * @category Validation\n * @typeParam TValue - Input value type.\n * @param validator - Validator to convert.\n *\n * @returns A function accepting input control as its only parameter and returning an `AfterEvent` keeper of validation\n * messages.\n */\nexport function inValidator<TValue>(\n    validator: InValidator<TValue>,\n): (this: void, control: InControl<TValue>) => AfterEvent<InValidation.Message[]> {\n  if (isEventKeeper(validator)) {\n    return valueProvider(afterSupplied(validator));\n  }\n  if (typeof validator === 'function') {\n    return control => afterSupplied(validator(control));\n  }\n\n  return control => control.read.do(\n      translateAfter(send => send(...arrayOfElements(validator.validate(control)))),\n  );\n}\n","import {\n  afterEach,\n  AfterEvent,\n  AfterEvent__symbol,\n  afterSupplied,\n  digAfter_,\n  EventKeeper,\n  mapAfter,\n  translateAfter,\n} from '@proc7ts/fun-events';\nimport {\n  flatMapArray,\n  itsEach,\n  mapIt,\n  overArray,\n  overEntries,\n  overNone,\n  PushIterable,\n  PushIterator,\n  PushIterator__symbol,\n} from '@proc7ts/push-iterator';\nimport { Supply } from '@proc7ts/supply';\nimport { builtInAspect } from '../applied-aspect';\nimport { InAspect, InAspect__symbol } from '../aspect';\nimport { InContainer } from '../containers';\nimport { InControl } from '../control';\nimport { requireAll } from './require-all.validator';\nimport { InValidator } from './validator';\nimport { InValidationMessages } from './validator.impl';\n\n/**\n * @internal\n */\nconst InValidation__aspect: InAspect<InValidation<any>, 'validation'> = {\n  applyTo<TValue>(control: InControl<TValue>) {\n    return builtInAspect<TValue, InValidation<TValue>, 'validation'>(\n        control,\n        InValidation,\n        <TValue>(ctrl: InControl<TValue>, origin?: InControl<any>): InValidation<any> => {\n\n          const validation = new InControlValidation<TValue>(ctrl);\n\n          if (origin) {\n            validation.by(\n                origin.aspect(InValidation).read.do(\n                    translateAfter((send, result) => send(...result.messages())),\n                ),\n            );\n          }\n\n          return validation;\n        },\n    );\n  },\n};\n\n/**\n * Validation aspect of the input.\n *\n * Reports validation messages sent by registered validators. To register validator call a `InValidation.by()` method.\n *\n * Implements an `EventKeeper` interface by sending validation result whenever validation messages reported.\n *\n * A validation aspect of converted control reports all messages from original control in addition to its own.\n *\n * A validation aspect of input controls container reports all messages from nested controls in addition to its own.\n *\n * @category Aspect\n * @typeParam TValue - Input value type.\n */\nexport abstract class InValidation<TValue> implements EventKeeper<[InValidation.Result]> {\n\n  /**\n   * Input validation aspect.\n   */\n  static get [InAspect__symbol](): InAspect<InValidation<any>, 'validation'> {\n    return InValidation__aspect;\n  }\n\n  /**\n   * An `AfterEvent` keeper of input validation result.\n   *\n   * An `[AfterEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly read: AfterEvent<[InValidation.Result]>;\n\n  [AfterEvent__symbol](): AfterEvent<[InValidation.Result]> {\n    return this.read;\n  }\n\n  /**\n   * Validates the input using the given validators.\n   *\n   * Messages sent by each registered validator are handled independently. This means that every time the event received\n   * from validator, it replaces the list of validation messages reported previously by the same validator. But it never\n   * affects messages received from other validators.\n   *\n   * @param validators - Input validators to use.\n   *\n   * @returns Validators supply. Removes validators and their messages once cut off.\n   */\n  abstract by(...validators: InValidator<TValue>[]): Supply;\n\n}\n\n/**\n * @category Aspect\n */\nexport namespace InValidation {\n\n  /**\n   * Input validation messages.\n   *\n   * This is a map of key/value pairs, where the key is a message code, while the value is arbitrary. Message codes\n   * are ignored when their values are falsy (i.e. `!message[code] === true`).\n   *\n   * Some message codes are treated specially by convenience.\n   */\n  export type Message = {\n    readonly [code in Extract<keyof GenericMessage, string>]?: any;\n  };\n\n  /**\n   * Generic input validation messages.\n   */\n  export interface GenericMessage {\n\n    readonly [code: string]: any;\n\n    /**\n     * Missing input.\n     */\n    readonly missing?: any;\n\n    /**\n     * The message with this code would be reported by `requireNeeded()` validator despite there are messages with\n     * `missing` code.\n     */\n    readonly despiteMissing?: any;\n\n    /**\n     * Incomplete input, except missing one.\n     */\n    readonly incomplete?: any;\n\n    /**\n     * The message with this code would be reported by `requireNeeded()` validator despite there are messages with\n     * `incomplete` code.\n     */\n    readonly despiteIncomplete?: any;\n\n    /**\n     * Invalid input, except missing or incomplete one.\n     */\n    readonly invalid?: any;\n\n    /**\n     * Submit failure.\n     *\n     * This is set by input submit aspect.\n     */\n    readonly submit?: any;\n\n  }\n\n  /**\n   * Input validation result.\n   *\n   * Combines messages sent by all registered validators.\n   *\n   * Implements `Iterable` interface by iterating over all validation messages.\n   */\n  export interface Result extends Iterable<Message> {\n\n    /**\n     * Whether validation succeed.\n     *\n     * This is `true` when there is no validation messages, or `false` otherwise.\n     */\n    readonly ok: boolean;\n\n    /**\n     * Returns messages with the given code.\n     *\n     * @param code - Target code. All messages reported when absent.\n     *\n     * @returns An array of matching messages. Possibly empty.\n     */\n    messages(code?: string): readonly Message[];\n\n    /**\n     * Checks whether there are errors with the given code.\n     *\n     * @param code - Target code. Any message matches when absent.\n     *\n     * @returns `true` if there is at least one message with the given code, or `false` otherwise.\n     */\n    has(code?: string): boolean;\n\n    /**\n     * Checks whether there are errors without the given codes.\n     *\n     * @param codes - Excluded codes. Any message matches when empty.\n     *\n     * @returns `true` is there is at least one message without any of the given codes, or `false` otherwise.\n     */\n    hasBut(...codes: string[]): boolean;\n\n    [Symbol.iterator](): IterableIterator<Message>;\n\n  }\n\n  /**\n   * Successful input validation result.\n   */\n  export interface Ok extends Result {\n\n    readonly ok: true;\n\n  }\n\n  /**\n   * Unsuccessful input validation result.\n   */\n  export interface Errors extends Result {\n\n    readonly ok: false;\n\n  }\n\n}\n\n/**\n * @internal\n */\nconst noInValidationErrors: InValidation.Result & PushIterable<InValidation.Message> = {\n  get ok() {\n    return true;\n  },\n  messages() {\n    return [];\n  },\n  has() {\n    return false;\n  },\n  hasBut() {\n    return false;\n  },\n  [Symbol.iterator](): PushIterator<InValidation.Message> {\n    return overNone();\n  },\n  [PushIterator__symbol](_accept): PushIterator<InValidation.Message> {\n    return overNone();\n  },\n};\n\n/**\n * @internal\n */\nclass InValidationErrors implements InValidation.Result, PushIterable<InValidation.Message> {\n\n  private readonly _all: InValidation.Message[];\n  private readonly _it: PushIterable<InValidation.Message>;\n  private readonly _byCode = new Map<string, InValidation.Message[]>();\n\n  constructor(messages: InValidation.Message[]) {\n    this._all = [];\n    this._it = overArray(this._all);\n    messages.forEach(message => {\n\n      let nonEmpty = false;\n\n      itsEach(overEntries(message), ([code, codePresent]) => {\n        if (codePresent) {\n          nonEmpty = true;\n\n          const prev = this._byCode.get(code);\n\n          if (prev) {\n            prev.push(message);\n          } else {\n            this._byCode.set(code, [message]);\n          }\n        }\n      });\n\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (nonEmpty) {\n        this._all.push(message);\n      }\n    });\n  }\n\n  get ok(): boolean {\n    return !this._all.length;\n  }\n\n  messages(code?: string): InValidation.Message[] {\n    return code == null ? this._all : this._byCode.get(code) || [];\n  }\n\n  has(code?: string): boolean {\n    return code == null || this._byCode.has(code);\n  }\n\n  hasBut(...codes: string[]): boolean {\n    return this._all.some(\n        message => codes.every(code => !message[code]),\n    );\n  }\n\n  [Symbol.iterator](): PushIterator<InValidation.Message> {\n    return this[PushIterator__symbol]();\n  }\n\n  [PushIterator__symbol](accept?: PushIterator.Acceptor<InValidation.Message>): PushIterator<InValidation.Message> {\n    return this._it[PushIterator__symbol](accept);\n  }\n\n}\n\n/**\n * Returns successful input validation result.\n *\n * @category Validation\n * @returns Successful input validation result.\n */\nexport function inValidationResult(): InValidation.Ok;\n\n/**\n * Creates input validation result out of validation messages.\n *\n * @param messages - Input validation messages.\n *\n * @returns New input validation result containing the given `messages`.\n */\nexport function inValidationResult(...messages: InValidation.Message[]): InValidation.Result;\n\nexport function inValidationResult(...messages: InValidation.Message[]): InValidation.Result {\n  return messages.length ? new InValidationErrors(messages) : noInValidationErrors;\n}\n\n/**\n * @internal\n */\nclass InControlValidation<TValue> extends InValidation<TValue> {\n\n  readonly _messages: InValidationMessages<TValue>;\n  readonly read: AfterEvent<[InValidation.Result]>;\n\n  constructor(control: InControl<TValue>) {\n    super();\n    this._messages = new InValidationMessages(control);\n\n    this.read = afterSupplied(this._messages).do<AfterEvent<[InValidation.Result]>>(\n        mapAfter(inValidationResult),\n    );\n\n    const container = control.aspect(InContainer);\n\n    if (container) {\n      this._messages.from(nestedInValidationMessages(container));\n    }\n  }\n\n  by(...validators: InValidator<TValue>[]): Supply {\n    return this._messages.from(requireAll(...validators));\n  }\n\n}\n\n/**\n * @internal\n */\nfunction nestedInValidationMessages(container: InContainer<any>): EventKeeper<InValidation.Message[]> {\n  return container.controls.read.do(\n      digAfter_(controls => afterEach(...mapIt(controls, control => control.aspect(InValidation)))),\n      translateAfter((send, ...results) => send(...flatMapArray(results, ([result]) => result))),\n  );\n}\n\ndeclare module '../aspect' {\n\n  export namespace InAspect.Application {\n\n    export interface Map<TInstance, TValue> {\n\n      /**\n       * Input validation aspect application type.\n       */\n      validation(): InValidation<TValue>;\n\n    }\n\n  }\n\n}\n","import { InControl } from '../control';\nimport { requireNothing } from './require-nothing.validator';\nimport { InValidator } from './validator';\nimport { InValidationMessages } from './validator.impl';\n\n/**\n * Creates input validator that validates using all listed validators.\n *\n * @category Validation\n * @typeParam TValue - Input value type.\n * @param validators - Validators to validate the input with.\n *\n * @returns Validator that requires all the given `validators`. Or just the given validator if it is the only one given.\n */\nexport function requireAll<TValue>(...validators: InValidator<TValue>[]): InValidator<TValue> {\n\n  const numValidators = validators.length;\n\n  if (numValidators === 1) {\n    return validators[0];\n  }\n  if (!numValidators) {\n    return requireNothing;\n  }\n\n  return (control: InControl<TValue>) => {\n\n    const messages = new InValidationMessages(control);\n\n    validators.forEach(validator => messages.from(validator));\n\n    return messages;\n  };\n}\n","import { EventKeeper, translateAfter } from '@proc7ts/fun-events';\nimport { InControl } from '../control';\nimport { InValidation } from './validation.aspect';\nimport { InValidator } from './validator';\n\n/**\n * Creates input validator that requires value to present.\n *\n * Reports empty (falsy) values with `missing` message code.\n *\n * @category Validation\n */\nexport function requirePresent(): InValidator<any>;\n\n/**\n * Input validator that requires value to present.\n *\n * Reports empty (falsy) values with `missing` message code.\n */\nexport function requirePresent(control: InControl<any>): EventKeeper<InValidation.Message[]>;\n\nexport function requirePresent(\n    control?: InControl<any>,\n): InValidator<any> | EventKeeper<InValidation.Message[]> {\n  return control\n      ? control.read.do(\n          translateAfter((send, value) => value ? send() : send({ missing: 'missing' })),\n      )\n      : requirePresent;\n}\n","import {\n  afterAll,\n  AfterEvent,\n  AfterEvent__symbol,\n  EventKeeper,\n  mapAfter,\n  supplyAfter,\n  trackValue,\n  translateAfter,\n} from '@proc7ts/fun-events';\nimport { itsEvery } from '@proc7ts/push-iterator';\nimport { builtInAspect } from './applied-aspect';\nimport { InAspect, InAspect__symbol } from './aspect';\nimport { InControl } from './control';\nimport { InData } from './data';\nimport { InValidation, inValidationResult } from './validation';\n\n/**\n * @internal\n */\nconst InSubmit__aspect: InAspect<InSubmit<any>, 'submit'> = {\n  applyTo<TValue>(control: InControl<TValue>) {\n    return builtInAspect(control, InSubmit, ctrl => new InControlSubmit(ctrl));\n  },\n};\n\n/**\n * Input submit error.\n *\n * Contains submit messages as validation result.\n *\n * @category Aspect\n */\nexport class InSubmitError extends Error {\n\n  /**\n   * Input submit errors.\n   */\n  readonly errors: InValidation.Errors;\n\n  /**\n   * Constructs input submit error.\n   *\n   * @param errors - Input submit error messages. A `submit` code will be added to each of them, unless already present.\n   */\n  constructor(...errors: [InValidation.Message, ...InValidation.Message[]]) {\n    super();\n    this.errors = inValidationResult(\n        ...errors.map(message => message.submit ? message : { ...message, submit: true }),\n    ) as InValidation.Errors;\n  }\n\n}\n\n/**\n * Input submit rejection error.\n *\n * Raised if submit is not ready or in process already.\n *\n * @category Aspect\n */\nexport class InSubmitRejectedError extends InSubmitError {\n\n  /**\n   * Constructs input submit rejection error.\n   *\n   * @param reason - A reason code.\n   */\n  constructor(reason: string) {\n    super({ submit: 'rejected', rejected: reason, [reason]: true });\n  }\n\n}\n\n/**\n * Input submit aspect.\n *\n * Allows to submit {@link InData input data} and reports submit status.\n *\n * Implements an `EventKeeper` interface by sending submit status flags to registered receivers.\n *\n * @category Aspect\n * @typeParam TValue - Input value type.\n */\nexport abstract class InSubmit<TValue> implements EventKeeper<[InSubmit.Flags]> {\n\n  static get [InAspect__symbol](): InAspect<InSubmit<any>, 'submit'> {\n    return InSubmit__aspect;\n  }\n\n  /**\n   * An `AfterEvent` keeper of submit status flags.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly read: AfterEvent<[InSubmit.Flags]>;\n\n  [AfterEvent__symbol](): AfterEvent<[InSubmit.Flags]> {\n    return this.read;\n  }\n\n  /**\n   * Attempts to submit the input data.\n   *\n   * 1. Sets `submitted` status flag.\n   * 2.1. Rejects to submit if `busy` status flag is set, or if `ready` status flag is not set with\n   *      [InSubmitRejectedError].\n   *      Note that the latter mey be reset after the step 1. So this check is performed asynchronously.\n   * 2.2. Otherwise, sets the `busy` status flag.\n   * 3. Clears submit failure messages.\n   * 4. Calls `submitter` function.\n   * 5. Waits for the promise returned by `submitter` to resolve.\n   * 5.1. Resolves the result promise if submit were successful.\n   * 5.2. Otherwise, reports submit failure messages.\n   * 6. Rejects the result promise.\n   *\n   * @typeParam TResult - Submit result value type.\n   * @param submitter - A submitter function that performs actual submit.\n   *\n   * @returns Submit result promise.\n   */\n  abstract submit<TResult>(submitter: InSubmit.Submitter<TValue, TResult>): Promise<TResult>;\n\n  /**\n   * Resets the submit.\n   *\n   * Clears submit failure messages. Resets `submitted` flag.\n   */\n  abstract reset(): void;\n\n}\n\n/**\n * @category Aspect\n */\nexport namespace InSubmit {\n\n  /**\n   * Input submit status flags.\n   *\n   * The flags of nested control are combined with parent ones.\n   */\n  export interface Flags {\n\n    /**\n     * Whether the input is ready to be submitted.\n     *\n     * The submit won't happen until this flag becomes `true`.\n     *\n     * This is `true` when there is a data to submit, and no validation messages (except submit failure messages with\n     * `submit` code).\n     */\n    ready: boolean;\n\n    /**\n     * Whether the input has been submitted.\n     *\n     * This becomes `true` on `InSubmit.submit()` method call. And becomes `false` on `InSubmit.reset()` method call.\n     */\n    submitted: boolean;\n\n    /**\n     * Whether the submit is in process.\n     *\n     * This becomes `true` when submit is initiated by `InSubmit.submit()` method call. And becomes `false` when submit\n     * is completed.\n     */\n    busy: boolean;\n\n  }\n\n  /**\n   * Input submitter function interface.\n   *\n   * A submitter is passed to `InSubmit.submit()` method to perform the actual submit.\n   *\n   * A submit failure (a returned promise rejection) is reported as validation messages. This can be either a\n   * [InSubmitError], or arbitrary error. Previously reported submit messages are replaced by the reported ones,\n   * and cleared on a new submit.\n   *\n   * @typeParam TValue - Input value type.\n   * @typeParam TResult - Submit result value type.\n   */\n  export type Submitter<TValue, TResult> =\n  /**\n   * @param data - Input data to submit.\n   * @param control - Input control the submit is performed for.\n   *\n   * @returns Submit result promise.\n   */\n      (\n          this: void,\n          data: TValue extends undefined ? never : TValue,\n          control: InControl<TValue>,\n      ) => Promise<TResult>;\n\n}\n\nclass InControlSubmit<TValue> extends InSubmit<TValue> {\n\n  readonly read: AfterEvent<[InSubmit.Flags]>;\n  private readonly _flags = trackValue({ submitted: false, busy: false });\n  private readonly _errors = trackValue<InValidation.Message[]>([]);\n\n  constructor(private readonly _control: InControl<TValue>) {\n    super();\n    this.read = afterAll({\n      flags: this._flags,\n      data: this._control.aspect(InData),\n      messages: this._control.aspect(InValidation),\n    }).do(\n        supplyAfter(this._control),\n        mapAfter(({\n          flags: [flags],\n          data: [data],\n          messages: [messages],\n        }): InSubmit.Flags => ({\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n          ready: data !== undefined && (messages.ok || itsEvery(messages, message => message.submit)),\n          submitted: flags.submitted,\n          busy: flags.busy,\n        })),\n    );\n\n    const validation = _control.aspect(InValidation);\n\n    validation.by(this._errors.read.do(\n        translateAfter((send, messages) => send(...messages)),\n    ));\n  }\n\n  async submit<TResult>(submitter: InSubmit.Submitter<TValue, TResult>): Promise<TResult> {\n    if (this._control.supply.isOff) {\n      throw new InSubmitRejectedError('noInput');\n    }\n    if (this._flags.it.busy) {\n      throw new InSubmitRejectedError('busy');\n    }\n\n    const submit = this;\n    const control = this._control;\n    let errors: InValidation.Message[] | undefined;\n\n    this._flags.it = { ...this._flags.it, submitted: true, busy: true };\n    try {\n      if (this._errors.it.length) {\n        this._errors.it = [];\n      }\n      return await submitter(await submitData(), control);\n    } catch (error) {\n      errors = toInSubmitMessages(error);\n      throw error;\n    } finally {\n      this._flags.it = { ...this._flags.it, busy: false };\n      if (errors) {\n        this._errors.it = errors;\n      }\n    }\n\n    async function submitData(): Promise<TValue extends undefined ? never : TValue> {\n\n      const { data: [d], flags: [{ ready }] } = await afterAll({\n        data: control.aspect(InData),\n        flags: submit,\n      });\n\n      return ready\n          ? d as any\n          : Promise.reject(new InSubmitRejectedError('notReady'));\n    }\n  }\n\n  reset(): void {\n\n    const flags = this._flags.it;\n\n    if (flags.submitted) {\n      this._flags.it = { ...flags, submitted: false };\n    }\n    if (this._errors.it.length) {\n      this._errors.it = [];\n    }\n  }\n\n}\n\n/**\n * @internal\n */\nfunction toInSubmitMessages(error: any): InValidation.Message[] {\n  if (error instanceof InSubmitError) {\n    return [...error.errors];\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  return [{ submit: error }];\n}\n\ndeclare module './aspect' {\n\n  export namespace InAspect.Application {\n\n    export interface Map<TInstance, TValue> {\n\n      /**\n       * Input submit aspect application type.\n       */\n      submit(): InSubmit<TValue>;\n\n    }\n\n  }\n\n}\n","import { DomEventDispatcher } from '@frontmeans/dom-events';\nimport { AfterEvent, EventEmitter, mapAfter, OnEvent, translateOn } from '@proc7ts/fun-events';\nimport { asis } from '@proc7ts/primitives';\nimport { Supply } from '@proc7ts/supply';\nimport { InConverter } from '../converter';\nimport { InElement } from '../element.control';\n\n/**\n * Abstract implementation of {@link InElement input HTML element control}.\n *\n * @category Control\n * @typeParam TValue - Input value type.\n * @typeParam TElt - A type of input HTML element.\n */\nexport class AbstractInElement<TValue, TElt extends HTMLElement> extends InElement<TValue, TElt> {\n\n  readonly events: DomEventDispatcher;\n  readonly input: AfterEvent<[InElement.Input<TValue>]>;\n  readonly on: OnEvent<[TValue, TValue]>;\n  private readonly _get: (this: AbstractInElement<TValue, TElt>) => TValue;\n  private readonly _set: (this: AbstractInElement<TValue, TElt>, value: TValue) => void;\n  private readonly _input: EventEmitter<[InElement.Input<TValue>, TValue]> = new EventEmitter();\n  private _value: TValue;\n  private _update: (value: TValue, oldValue: TValue) => void;\n\n  /**\n   * Constructs HTML input element control.\n   *\n   * @param element - HTML input element the constructed control is based on.\n   * @param aspects - Input aspects applied by default. These are aspect converters to constructed control\n   * from the {@link inValueOf same-valued one}.\n   * @param get - Input value getter.\n   * @param set - Input value setter.\n   */\n  constructor(\n      readonly element: TElt,\n      {\n        aspects,\n        get,\n        set,\n      }: {\n        readonly aspects?: InConverter.Aspect<TValue> | readonly InConverter.Aspect<TValue>[];\n        readonly get: (this: AbstractInElement<TValue, TElt>) => TValue;\n        readonly set: (this: AbstractInElement<TValue, TElt>, value: TValue) => void;\n      },\n  ) {\n    super({ aspects });\n\n    const self = this;\n\n    this._get = get;\n    this._set = set;\n    this._value = this.it;\n\n    const doUpdate = this._update = (value: TValue, oldValue: TValue): void => update({ value }, oldValue);\n\n    this.events = new DomEventDispatcher(element);\n    this.events.supply.needs(this);\n    this.listenForInput(input => update(input, this._value));\n\n    this.on = this._input.on.do(\n        translateOn((\n            send,\n            { value: newValue },\n            oldValue,\n        ) => newValue !== oldValue && send(newValue, oldValue)),\n    );\n    this.input = this._input.on.do(mapAfter(asis, () => ({ value: this.it })));\n\n    function update(input: InElement.Input<TValue>, oldValue: TValue): void {\n      for (;;) {\n        self._value = input.value;\n\n        // Corrections are value updates performed by update event receivers\n        // The last correction is recorded and sent later, when all receivers receive current update\n        let correction: [InElement.Input<TValue>, TValue] | undefined;\n\n        // Record corrections\n        self._update = (newValue: TValue, old: TValue) => {\n          // Corrections retain the event instance\n          correction = [{ ...input, value: newValue }, old];\n        };\n        try {\n          self._input.send(input, oldValue);\n        } finally {\n          self._update = doUpdate;\n        }\n\n        if (!correction) {\n          break; // No more corrections\n        }\n\n        // Apply last correction\n        // noinspection JSUnusedAssignment\n        [input, oldValue] = correction;\n      }\n    }\n  }\n\n  get supply(): Supply {\n    return this._input.supply;\n  }\n\n  get it(): TValue {\n    return this._get();\n  }\n\n  set it(value: TValue) {\n\n    const oldValue = this.it;\n\n    if (value !== oldValue) {\n      this._set(value);\n      this._update(this._get(), oldValue);\n    }\n  }\n\n  /**\n   * Enables reaction to input input.\n   *\n   * By default listens for `input` and `change` events.\n   *\n   * @param update - Updates current value by user input and sends update event. This function is to be called by\n   * input event listeners.\n   */\n  protected listenForInput(update: (input: InElement.Input<TValue>) => void): void {\n\n    const onInput = (event: Event): void => update({ value: this.it, event });\n\n    this.events.on('input')(onInput);\n    this.events.on('change')(onInput);\n  }\n\n}\n","import { InConverter } from '../converter';\nimport { InElement } from '../element.control';\nimport { AbstractInElement } from './abstract-element.control';\n\n/**\n * Textual input control.\n *\n * @category Control\n */\nexport type InText = InElement<string, InText.Element>;\n\n/**\n * @category Control\n */\nexport namespace InText {\n\n  /**\n   * Text input element.\n   *\n   * Either `<input>`, `<textarea>`, or `<select>`.\n   */\n  export type Element = HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement;\n\n}\n\n/**\n * Creates control for the given textual input element.\n *\n * Note that this won't work for files, checkboxes, or radio buttons.\n *\n * For `<select multiple>` this would only reflect the first option. Consider to use `inSelect()` for multi-selects.\n *\n * @category Control\n * @param element - Target text input element.\n * @param aspects - Input aspects applied by default. These are aspect converters to constructed control\n * from the {@link inValueOf same-valued one}.\n *\n * @return New textual input control instance.\n */\nexport function inText(\n    element: InText.Element,\n    {\n      aspects,\n    }: {\n      readonly aspects?: InConverter.Aspect<string> | readonly InConverter.Aspect<string>[];\n    } = {},\n): InText {\n  return new AbstractInElement(\n      element,\n      {\n        get(): string {\n          return this.element.value;\n        },\n        set(value) {\n          this.element.value = value;\n        },\n        aspects,\n      },\n  );\n}\n","import { OnEvent, trackValue, ValueTracker } from '@proc7ts/fun-events';\nimport { noop } from '@proc7ts/primitives';\nimport { Supply } from '@proc7ts/supply';\nimport { builtInAspect } from '../../applied-aspect';\nimport { InAspect, InAspect__symbol } from '../../aspect';\nimport { InControl } from '../../control';\nimport { InElement } from '../../element.control';\n\n/**\n * @internal\n */\nconst InFocus__aspect: InAspect<InFocus | null> = {\n\n  applyTo<TValue>(control: InControl<TValue>): InAspect.Applied<TValue, InFocus | null> {\n    return builtInAspect(control, InFocus, ctrl => {\n\n      const element = ctrl.aspect(InElement);\n\n      return element && new InControlFocus(element);\n    });\n  },\n\n};\n\n/**\n * Input focus aspect.\n *\n * This is a value tracker of element focus flag. Or `null` when {@link InElement} aspect is absent.\n *\n * @category Aspect\n */\nexport abstract class InFocus extends ValueTracker<boolean> {\n\n  static get [InAspect__symbol](): InAspect<InFocus | null> {\n    return InFocus__aspect;\n  }\n\n}\n\n/**\n * @internal\n */\nclass InControlFocus extends InFocus {\n\n  private readonly _it: ValueTracker<boolean>;\n\n  constructor(inElement: InElement<any>) {\n    super();\n\n    const { element, events } = inElement;\n    const owner: DocumentOrShadowRoot = element.getRootNode\n        ? element.getRootNode() as unknown as DocumentOrShadowRoot\n        : element.ownerDocument;\n\n    this._it = trackValue(owner.activeElement === element);\n    this.supply.needs(inElement);\n\n    events.on('focus')(() => this._it.it = true);\n    events.on('blur')(() => this._it.it = false);\n    this.on({\n      receive(ctx, newValue) {\n        ctx.onRecurrent(noop);\n        if (newValue) {\n          element.focus();\n        } else {\n          element.blur();\n        }\n      },\n    });\n  }\n\n  get supply(): Supply {\n    return this._it.supply;\n  }\n\n  get it(): boolean {\n    return this._it.it;\n  }\n\n  set it(value: boolean) {\n    this._it.it = value;\n  }\n\n  get on(): OnEvent<[boolean, boolean]> {\n    return this._it.on;\n  }\n\n}\n","import {\n  afterAll,\n  afterEach,\n  AfterEvent,\n  AfterEvent__symbol,\n  afterThe,\n  digAfter_,\n  EventKeeper,\n  mapAfter,\n  onceAfter,\n  supplyAfter,\n  trackValue,\n  ValueTracker,\n} from '@proc7ts/fun-events';\nimport { itsEach, mapIt } from '@proc7ts/push-iterator';\nimport { builtInAspect } from '../../applied-aspect';\nimport { InAspect, InAspect__symbol } from '../../aspect';\nimport { InContainer } from '../../containers';\nimport { InControl } from '../../control';\nimport { InElement } from '../../element.control';\nimport { InFocus } from './focus.aspect';\n\n/**\n * @internal\n */\nconst InStatus__aspect: InAspect<InStatus> = {\n\n  applyTo<TValue>(control: InControl<TValue>): InAspect.Applied<TValue, InStatus> {\n    return builtInAspect(control, InStatus, ctrl => {\n\n      const container = ctrl.aspect(InContainer);\n\n      return container != null ? new InContainerStatus(container) : new InControlStatus(ctrl);\n    });\n  },\n\n};\n\n/**\n * Aggregate status aspect of user input.\n *\n * Collects and reports input status flags. Like whether the input ever had focus or being altered.\n *\n * Supports input elements and containers. For the rest of input controls always sends default status flags.\n *\n * Implements `EventKeeper` interface by sending collected status flags to receivers.\n *\n * @category Aspect\n */\nexport abstract class InStatus implements EventKeeper<[InStatus.Flags]> {\n\n  static get [InAspect__symbol](): InAspect<InStatus> {\n    return InStatus__aspect;\n  }\n\n  /**\n   * An `AfterEvent` keeper of input status flags.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly read: AfterEvent<[InStatus.Flags]>;\n\n  [AfterEvent__symbol](): AfterEvent<[InStatus.Flags]> {\n    return this.read;\n  }\n\n  /**\n   * Marks the input as touched.\n   *\n   * For container invokes this method for each of the nested controls.\n   *\n   * @param touched - Whether to mark the input as touched or not. `true` by default. When `false` the input would be\n   * marked as non-edited too. Setting to `false` affects only edited flag when input has focus.\n   *\n   * @returns `this` aspect instance.\n   */\n  abstract markTouched(touched?: boolean): this;\n\n  /**\n   * Marks the input as edited by user.\n   *\n   * For container invokes this method for each of the nested controls.\n   *\n   * @param edited - Whether to mark the input as edited by user. `true` by default, in which case the input will be\n   * marked as touched as well.\n   *\n   * @returns `this` aspect instance.\n   */\n  abstract markEdited(edited?: boolean): this;\n\n}\n\n/**\n * @category Aspect\n */\nexport namespace InStatus {\n\n  /**\n   * A flags representing aggregated input status.\n   */\n  export interface Flags {\n\n    /**\n     * Whether the input has focus currently.\n     */\n    readonly hasFocus: boolean;\n\n    /**\n     * Whether the input had focus already.\n     *\n     * This flag can be set using `InStatus.markTouched()`.\n     */\n    readonly touched: boolean;\n\n    /**\n     * Whether the input has been edited by user.\n     *\n     * This flag can be set using `InStatus.markEdited()`.\n     */\n    readonly edited: boolean;\n\n  }\n\n}\n\n/**\n * @internal\n */\nconst defaultInStatusFlags: InStatus.Flags = {\n  hasFocus: false,\n  touched: false,\n  edited: false,\n};\n\n/**\n * @internal\n */\nclass InControlStatus extends InStatus {\n\n  private readonly _flags = trackValue<InStatus.Flags>(defaultInStatusFlags);\n\n  constructor(control: InControl<any>) {\n    super();\n    this._flags.supply.needs(control);\n    this._flags.by(elementInStatusFlags(this._flags, control));\n  }\n\n  get read(): AfterEvent<[InStatus.Flags]> {\n    return this._flags.read;\n  }\n\n  markTouched(touched = true): this {\n\n    const flags = this._flags.it;\n\n    if (!touched) {\n      if (flags.touched) {\n        // Try to reset touched.\n        // Still touched if in focus. Not edited anyway.\n        this._flags.it = { ...flags, touched: flags.hasFocus, edited: false };\n      }\n    } else if (!flags.touched) {\n      // Do not modify if already touched.\n      this._flags.it = { ...flags, touched };\n    }\n\n    return this;\n  }\n\n  markEdited(edited = true): this {\n\n    const flags = this._flags.it;\n\n    if (edited) {\n      if (!flags.edited) {\n        // Touched if edited\n        this._flags.it = { ...flags, touched: true, edited };\n      }\n    } else if (flags.edited) {\n      // Assume not edited\n      this._flags.it = { ...flags, edited };\n    }\n\n    return this;\n  }\n\n}\n\n/**\n * @internal\n */\nfunction elementInStatusFlags(\n    origin: ValueTracker<InStatus.Flags>,\n    control: InControl<any>,\n): AfterEvent<[InStatus.Flags]> {\n\n  const element = control.aspect(InElement);\n  const focus = control.aspect(InFocus);\n\n  return afterAll({\n    hasFocus: focus || afterThe(false),\n    edited: element ? element.input.do(mapAfter(({ event }) => !!event)) : afterThe(false),\n  }).do(mapAfter(\n      ({ hasFocus: [hasFocus], edited: [edited] }) => updateInStatusFlags(origin.it, hasFocus, edited),\n  ));\n}\n\n/**\n * @internal\n */\nfunction updateInStatusFlags(flags: InStatus.Flags, hasFocus: boolean, edited: boolean): InStatus.Flags {\n  if (hasFocus) {\n    flags = { ...flags, hasFocus, touched: true };\n  } else {\n    flags = { ...flags, hasFocus };\n  }\n  if (edited) {\n    flags = { ...flags, edited, touched: true };\n  }\n  return flags;\n}\n\n/**\n * @internal\n */\nclass InContainerStatus extends InStatus {\n\n  readonly read: AfterEvent<[InStatus.Flags]>;\n\n  constructor(private readonly _container: InContainer<any>) {\n    super();\n    this.read = containerInStatusFlags(this._container);\n  }\n\n  markEdited(edited?: boolean): this {\n    this._container.controls.read.do(onceAfter)(snapshot => itsEach(\n        snapshot,\n        control => control.aspect(InStatus).markEdited(edited),\n    ));\n    return this;\n  }\n\n  markTouched(touched?: boolean): this {\n    this._container.controls.read.do(onceAfter)(snapshot => itsEach(\n        snapshot,\n        control => control.aspect(InStatus).markTouched(touched),\n    ));\n    return this;\n  }\n\n}\n\n/**\n * @internal\n */\nfunction containerInStatusFlags(container: InContainer<any>): AfterEvent<[InStatus.Flags]> {\n  return container.controls.read.do(\n      supplyAfter(container),\n      digAfter_((snapshot: InContainer.Snapshot) => afterEach(...inControlStatuses(snapshot))),\n      mapAfter(combineInStatusFlags),\n  );\n}\n\n/**\n * @internal\n */\nfunction inControlStatuses(snapshot: InContainer.Snapshot): Iterable<InStatus> {\n  return mapIt(snapshot, c => c.aspect(InStatus));\n}\n\n/**\n * @internal\n */\nfunction combineInStatusFlags(...flags: [InStatus.Flags][]): InStatus.Flags {\n\n  const result: { -readonly [K in keyof InStatus.Flags]: InStatus.Flags[K] } = {\n    hasFocus: false,\n    touched: false,\n    edited: false,\n  };\n\n  itsEach(\n      flags,\n      (([{ hasFocus, touched, edited }]) => {\n            if (touched) {\n              result.touched = true;\n            }\n            if (hasFocus) {\n              result.hasFocus = result.touched = true;\n            }\n            if (edited) {\n              result.edited = result.touched = true;\n            }\n          }\n      ),\n  );\n\n  return result;\n}\n","import { noop } from '@proc7ts/primitives';\nimport { InControl } from '../../control';\nimport { InConverter, intoConvertedAspects } from '../../converter';\nimport { InMode } from '../../data';\nimport { inModeByForm } from '../../data/modes';\nimport { InElement } from '../../element.control';\nimport { AbstractInElement } from '../abstract-element.control';\n\n/**\n * Form element control.\n *\n * It is connected to control to submit (form), but is not intended for submission itself, and has no value.\n *\n * It is used to update form element state. E.g. to make it read-only when {@link InSubmit.Flags.busy submitting}\n * the form.\n *\n * Form element control can be created by {@link inFormElement} function.\n *\n * @category Control\n * @typeParam TElt - A type of HTML form element.\n */\nexport type InFormElement<TElt extends HTMLElement = HTMLElement> = InElement<void, TElt>;\n\n/**\n * @category Control\n */\nexport namespace InFormElement {\n\n  /**\n   * Form element control options.\n   */\n  export interface Options {\n\n    /**\n     * Submitted control. Typically a {@link InContainer container}.\n     */\n    readonly form: InControl<any>;\n\n    /**\n     * Additional input aspects to apply. These are aspect converters to constructed control  from the\n     * {@link inValueOf same-valued one}.\n     */\n    readonly aspects?: InConverter.Aspect<void> | readonly InConverter.Aspect<void>[];\n\n    /**\n     * Input modes to derive from submitted control.\n     *\n     * Applied to form element control by {@link inModeByForm}.\n     */\n    readonly modes?: {\n\n      /**\n       * Input mode to set when submit is not ready. E.g. when input is invalid. `on` (enabled) by default.\n       */\n      readonly notReady?: InMode.Value;\n\n      /**\n       * Input mode to set when submit is not ready _and_ the form is submitted. `on` (enabled) by default.\n       */\n      readonly invalid?: InMode.Value;\n\n      /**\n       * Input mode to set while submitting. `ro` (read-only) by default.\n       */\n      readonly busy?: InMode.Value;\n\n    };\n\n  }\n\n}\n\n/**\n * Creates form element control.\n *\n * @category Control\n * @param element - HTML element to create control for.\n * @param options - Form element control options.\n *\n * @returns New form element control.\n */\nexport function inFormElement<TElt extends HTMLElement>(\n    element: TElt,\n    options: InFormElement.Options,\n): InFormElement<TElt> {\n\n  const { form, aspects, modes } = options;\n  const control = new AbstractInElement<void, TElt>(\n      element,\n      {\n        aspects: [intoConvertedAspects(aspects)],\n        get: noop,\n        set: noop,\n      },\n  );\n\n  control.supply.needs(form);\n\n  return control.setup(InMode, mode => mode.derive(inModeByForm(form, modes)));\n}\n","import { mapAfter } from '@proc7ts/fun-events';\nimport { InControl } from '../../control';\nimport { InSubmit } from '../../submit.aspect';\nimport { InMode, inModeValue } from '../mode.aspect';\n\n/**\n * Creates an {@link InMode input mode} source depending on the given `form` control status.\n *\n * This can be applied e.g. to {@link InSubmitButton submit button}, to {@link InFormElement form element},\n * or to input controls. The defaults best suit the latter.\n *\n * @category Aspect\n * @param form - Form control the evaluated mode depends on. Should not be the same as the target control!\n * @param notReady - Input mode to set when submit is not ready. E.g. when input is invalid.\n * `on` (enabled) by default. An `off` (disable) value is a better choice for submit button.\n * @param invalid - Input mode to set when submit is not ready _and_ the form is submitted.\n * `on` (enabled) by default. An `off` (disable) value is a better choice for submit button.\n * @param busy - Input mode to set while submitting. `ro` (read-only) by default. An `off` (disabled) value is a better\n * choice for submit button.\n *\n * @returns A source of input mode.\n */\nexport function inModeByForm(\n    form: InControl<any>,\n    {\n      notReady = 'on',\n      invalid = 'on',\n      busy = 'ro',\n    }: {\n      notReady?: InMode.Value;\n      invalid?: InMode.Value;\n      busy?: InMode.Value;\n    } = {},\n): InMode.Source {\n\n  const submit = form.aspect(InSubmit);\n\n  return submit.read.do(mapAfter(\n      flags => inModeValue(\n          flags.busy ? busy : 'on',\n          flags.ready ? 'on' : (flags.submitted ? invalid : notReady),\n      ),\n  ));\n}\n","import { knownInAspect, nullInAspect } from '../../applied-aspect';\nimport { InAspect, InAspect__symbol } from '../../aspect';\nimport { InControl } from '../../control';\nimport { InConverter } from '../../converter';\nimport { InElement } from '../../element.control';\n\n/**\n * An input aspect representing DOM element to apply styles to.\n *\n * This is a HTML element for input element control, and `null` for everything else by default.\n *\n * @category Aspect\n */\nexport type InStyledElement = Element;\n\n/**\n * @internal\n */\nconst InStyledElement__aspect: InAspect<InStyledElement | null> = {\n\n  applyTo(control: InControl<any>): InAspect.Applied<any, InStyledElement | null> {\n\n    const element = control.aspect(InElement);\n\n    return element ? knownInAspect(element.element) : nullInAspect();\n  },\n\n};\n\n/**\n * @category Aspect\n */\nexport const InStyledElement = {\n\n  get [InAspect__symbol]() {\n    return InStyledElement__aspect;\n  },\n\n  /**\n   * Creates input control aspect converter that assigns the given styled element to converted control.\n   *\n   * This is useful for controls without elements (such as input groups), or can be used to apply CSS classes to input\n   * element wrappers (such as `form-group` in Bootstrap).\n   *\n   * @typeParam TValue - Converted control value type.\n   * @param element - A DOM element to apply styles to. Styles won't be applied when `null` or undefined.\n   *\n   * @returns Input control aspect converter.\n   */\n  to<TValue>(element: InStyledElement | null = null): InConverter.Aspect<any, TValue> {\n    return {\n      applyAspect<TInstance, TKind extends InAspect.Application.Kind>(\n          aspect: InAspect<any, any>,\n      ): InAspect.Applied<any, InAspect.Application.Instance<TInstance, TValue, TKind>> | undefined {\n        return aspect === InStyledElement__aspect\n            ? knownInAspect(element) as InAspect.Application.Result<TInstance, TValue, TKind>\n            : undefined;\n      },\n    };\n  },\n\n};\n","import { css__naming, isQualifiedName, QualifiedName } from '@frontmeans/namespace-aliaser';\nimport { RenderSchedule } from '@frontmeans/render-scheduler';\nimport { DeltaSet } from '@proc7ts/delta-set';\nimport {\n  afterEach,\n  AfterEvent,\n  AfterEvent__symbol,\n  afterEventBy,\n  afterSupplied,\n  digAfter_,\n  EventKeeper,\n  EventNotifier,\n  isEventKeeper,\n  mapAfter,\n  mapAfter_,\n  shareAfter,\n  supplyAfter,\n  trackValue,\n} from '@proc7ts/fun-events';\nimport { noop } from '@proc7ts/primitives';\nimport { filterIt, itsEach, ObjectEntry, overEntries } from '@proc7ts/push-iterator';\nimport { Supply } from '@proc7ts/supply';\nimport { InAspect, InAspect__symbol } from '../../aspect';\nimport { InNamespaceAliaser, InRenderScheduler } from '../../aspects';\nimport { InControl } from '../../control';\nimport { InStyledElement } from './styled-element.aspect';\n\n/**\n * @internal\n */\nconst InCssClasses__aspect: InAspect<InCssClasses> = {\n\n  applyTo(control: InControl<any>): InAspect.Applied<any, InCssClasses> {\n    return {\n      instance: new InControlCssClasses(control),\n      convertTo: noop,\n    };\n  },\n\n};\n\n/**\n * An aspect of the user input representing CSS classes to apply to styled element.\n *\n * Implements an `EventKeeper` interface by reporting all CSS classes applied to styled element.\n *\n * @category Aspect\n */\nexport abstract class InCssClasses implements EventKeeper<[InCssClasses.Map]> {\n\n  static get [InAspect__symbol](): InAspect<InCssClasses> {\n    return InCssClasses__aspect;\n  }\n\n  /**\n   * An `AfterEvent` keeper of CSS classes to be applied to styled element.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly read: AfterEvent<[InCssClasses.Map]>;\n\n  /**\n   * An `AfterEvent` keeper of added and removed CSS classes.\n   *\n   * Sends current CSS classes as added ones on receiver registration.\n   */\n  abstract readonly track: AfterEvent<[readonly string[], readonly string[]]>;\n\n  [AfterEvent__symbol](): AfterEvent<[InCssClasses.Map]> {\n    return this.read;\n  }\n\n  /**\n   * Appends CSS classes from the given `source` to styled element.\n   *\n   * @param source - A source of CSS class names.\n   *\n   * @returns CSS class names supply. Removes `source` CSS classes from styled element once cut off.\n   */\n  abstract add(source: InCssClasses.Source): Supply;\n\n  /**\n   * Converts arbitrary CSS classes source to their {@link InCssClasses.Spec specifiers}.\n   *\n   * @param source - A source of CSS classes names.\n   *\n   * @returns An `AfterEvent` keeper of CSS class name specifiers.\n   */\n  abstract specs(source: InCssClasses.Source): AfterEvent<InCssClasses.Spec[]>;\n\n  /**\n   * Resolves arbitrary CSS classes source to {@link InCssClasses.Map map of class names}.\n   *\n   * @param source - A source of CSS classes names.\n   *\n   * @returns An `AfterEvent` keeper of CSS class names map.\n   */\n  abstract resolve(source: InCssClasses.Source): AfterEvent<[InCssClasses.Map]>;\n\n  /**\n   * Applies CSS classes to the given styled element.\n   *\n   * @param element - Target element to apply CSS classes to.\n   * @param schedule - DOM render schedule to add CSS class updates to. A new schedule is constructed by\n   * {@link InRenderScheduler input render scheduler} by default.\n   *\n   * @returns CSS classes supply that stops their application and removes already applied ones once cut off.\n   */\n  abstract applyTo(element: InStyledElement, schedule?: RenderSchedule): Supply;\n\n  /**\n   * Removes all CSS class sources and stops applying CSS classes to styled elements.\n   *\n   * @param reason - An optional reason.\n   *\n   * @returns `this` instance.\n   */\n  abstract done(reason?: any): this;\n\n}\n\n/**\n * @category Aspect\n */\nexport namespace InCssClasses {\n\n  /**\n   * A source of CSS class names for styled element.\n   *\n   * This is either an event keeper of CSS class names, or a function returning one and accepting target input\n   * control as the only parameter.\n   */\n  export type Source =\n      | EventKeeper<Spec[]>\n      | ((this: void, control: InControl<any>) => EventKeeper<Spec[]>);\n\n  /**\n   * A specifier of CSS classes for styled element.\n   *\n   * This is either a single (potentially qualified) class name, or a {@link Map map of class names}.\n   *\n   * Qualified names are converted to simple ones by {@link InNamespaceAliaser} aspect.\n   */\n  export type Spec =\n      | QualifiedName\n      | Map;\n\n  /**\n   * A map of CSS class names for styled element.\n   *\n   * The keys of this map are class names to apply.\n   * - When the value is `true` corresponding class name will be added.\n   * - When the value is `false` corresponding class name will not be added.\n   * - The `undefined` value is ignored.\n   */\n  export type Map = {\n    readonly [name in string]?: boolean;\n  };\n\n}\n\n/**\n * @internal\n */\nconst UnsubscribeReason__symbol = (/*#__PURE__*/ Symbol('reason'));\n\n/**\n * @internal\n */\ninterface UnsubscribeReason {\n  readonly [UnsubscribeReason__symbol]?: any;\n}\n\n/**\n * @internal\n */\nfunction isUnsubscribeReason(reason: any): reason is UnsubscribeReason {\n  return reason && typeof reason === 'object' && UnsubscribeReason__symbol in reason;\n}\n\n/**\n * @internal\n */\nclass InControlCssClasses extends InCssClasses {\n\n  readonly read: AfterEvent<[InCssClasses.Map]>;\n  readonly track: AfterEvent<[readonly string[], readonly string[]]>;\n  private readonly _sources = trackValue<[Map<AfterEvent<[InCssClasses.Map]>, Supply>]>([new Map()]);\n  private _schedule?: RenderSchedule;\n\n  constructor(private readonly _control: InControl<any>) {\n    super();\n\n    _control.supply.whenOff(reason => this.done(reason));\n\n    this.read = this._sources.read.do(\n        supplyAfter(this._control),\n        digAfter_(([sources]) => afterEach(...sources.keys())),\n        mapAfter_((...classes: [InCssClasses.Map][]) => {\n\n          const result: { [name: string]: boolean } = {};\n\n          classes.forEach(([map]) => mergeInCssClassesMap(map, result));\n\n          return result;\n        }),\n    );\n\n    this.track = afterEventBy<[readonly string[], readonly string[]]>(receiver => {\n      receiver.supply.needs(this._control);\n\n      const classes = new DeltaSet<string>();\n      const emitter = new EventNotifier<[readonly string[], readonly string[]]>();\n      let classesSent = false;\n      const sendClasses = (): void => {\n        classesSent = true;\n        classes.redelta(\n            (add, remove) => emitter.send(add, remove),\n        ).undelta();\n      };\n\n      emitter.on(receiver);\n\n      return this.read(map => {\n\n        const remove = new Set(classes);\n        const add: string[] = [];\n\n        itsEach(\n            filterIt<ObjectEntry<InCssClasses.Map>>(\n                overEntries<InCssClasses.Map>(map),\n                ([, flag]) => !!flag,\n            ),\n            ([name]) => {\n              if (!remove.delete(name)) {\n                add.push(name);\n              }\n            },\n        );\n\n        if (!classesSent || add.length || remove.size) {\n          classes.delta(add, remove);\n          sendClasses();\n        }\n      });\n    });\n\n    const element = _control.aspect(InStyledElement);\n\n    if (element) {\n      this.applyTo(element, this.schedule);\n    }\n  }\n\n  get schedule(): RenderSchedule {\n    return this._schedule || (this._schedule = controlSchedule(\n        this._control,\n        this._control.aspect(InStyledElement)!,\n    ));\n  }\n\n  specs(source: InCssClasses.Source): AfterEvent<InCssClasses.Spec[]> {\n    return afterSupplied(isEventKeeper(source) ? source : source(this._control));\n  }\n\n  resolve(source: InCssClasses.Source): AfterEvent<[InCssClasses.Map]> {\n\n    const nsAlias = this._control.aspect(InNamespaceAliaser);\n\n    return this.specs(source).do(\n        mapAfter((...names) => {\n\n          const result: { [name: string]: boolean } = {};\n\n          names.forEach(name => {\n            if (isQualifiedName(name)) {\n              result[css__naming.name(name, nsAlias)] = true;\n            } else {\n              mergeInCssClassesMap(name, result);\n            }\n          });\n\n          return result;\n        }),\n    );\n  }\n\n  add(source: InCssClasses.Source): Supply {\n\n    const inSupply = this._control.supply;\n\n    if (inSupply.isOff) {\n      return inSupply;\n    }\n\n    const classesSupply = new Supply();\n    const src = afterEventBy<[InCssClasses.Map]>(receiver => {\n\n      const supply = this.resolve(source)({\n        receive(context, ...event) {\n          receiver.receive(context, ...event);\n        },\n      });\n\n      receiver.supply.whenOff(reason => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        classesSupply.off({ [UnsubscribeReason__symbol]: reason });\n      });\n      classesSupply.needs(supply).whenOff(reason => {\n        if (isUnsubscribeReason(reason)) {\n          supply.off(reason[UnsubscribeReason__symbol]);\n        }\n      });\n    }).do(shareAfter);\n\n    const [sources] = this._sources.it;\n\n    sources.set(src, classesSupply);\n    classesSupply.whenOff(reason => {\n      if (!isUnsubscribeReason(reason)) {\n        sources.delete(src);\n        this._sources.it = [sources];\n      }\n    });\n\n    this._sources.it = [sources];\n\n    return classesSupply.needs(inSupply);\n  }\n\n  applyTo(\n      element: Element,\n      schedule: RenderSchedule = controlSchedule(this._control, element),\n  ): Supply {\n\n    const { classList } = element;\n    const classes = new DeltaSet<string>();\n    const updateClasses = (): void => {\n      classes.redelta((add, remove) => {\n        classList.remove(...remove);\n        classList.add(...add);\n      }).undelta();\n    };\n\n    return this.track((add, remove) => {\n      classes.delta(add, remove);\n      schedule(updateClasses);\n    }).whenOff(() => {\n      if (classes.size) {\n        classes.clear();\n        schedule(updateClasses);\n      }\n    });\n  }\n\n  done(reason?: any): this {\n    itsEach(\n        this._sources.it[0].values(),\n        supply => supply.off(reason),\n    );\n    this._sources.supply.off(reason);\n    return this;\n  }\n\n}\n\n/**\n * @internal\n */\nfunction mergeInCssClassesMap(map: InCssClasses.Map, result: { [name: string]: boolean }): void {\n  itsEach(\n      overEntries(map),\n      ([name, flag]) => {\n        if (flag != null) {\n          result[name] = flag;\n        }\n      },\n  );\n}\n\n/**\n * @internal\n */\nfunction controlSchedule(control: InControl<any>, node: Node | undefined): RenderSchedule {\n  return control.aspect(InRenderScheduler)({ node });\n}\n","import { translateAfter } from '@proc7ts/fun-events';\nimport { arrayOfElements } from '@proc7ts/primitives';\nimport { InputAspects__NS } from '../../aspects';\nimport { InValidation } from '../../validation';\nimport { InCssClasses } from './css-classes.aspect';\n\n/**\n * Builds a source of error marker CSS classes.\n *\n * Applies error marker class(es) when the given error message codes present in\n * {@link InValidation.Result validation result}.\n *\n * @category Style\n * @param mark - Error mark. Specifies CSS class(es) to apply when requested error present.\n * A class with `has-error` name in {@link InputAspects__NS input aspects namespace} is used by default.\n * @param when - {@link InValidation.Message Validation message} code(s) to expect.\n * {@link InValidation.Result.ok Any} error matches by default.\n *\n * @returns A source of CSS class names to apply.\n */\nexport function inCssError(\n    {\n      mark,\n      when,\n    }: {\n      mark?: InCssClasses.Spec | readonly InCssClasses.Spec[];\n      when?: string | string[];\n    } = {},\n): InCssClasses.Source {\n\n  let hasError: (errors: InValidation.Result) => boolean;\n\n  if (!when) {\n    hasError = defaultInCssHasError;\n  } else if (Array.isArray(when)) {\n    hasError = when.length ? errors => when.every(code => errors.has(code)) : defaultInCssHasError;\n  } else {\n    hasError = errors => errors.has(when);\n  }\n\n  return control => control.aspect(InValidation).read.do(translateAfter(\n      (send, errors) => hasError(errors) ? send(...inCssErrorMarks(mark)) : send(),\n  ));\n}\n\n/**\n * @internal\n */\nfunction defaultInCssHasError(errors: InValidation.Result): boolean {\n  return !errors.ok;\n}\n\n/**\n * @internal\n */\nconst defaultInCssErrorMarks: readonly InCssClasses.Spec[] = [['has-error', InputAspects__NS]];\n\n/**\n * @internal\n */\nfunction inCssErrorMarks(mark?: InCssClasses.Spec | readonly InCssClasses.Spec[]): readonly InCssClasses.Spec[] {\n  if (!mark) {\n    return defaultInCssErrorMarks;\n  }\n\n  const marks = arrayOfElements(mark);\n\n  return marks.length ? marks : defaultInCssErrorMarks;\n}\n","import { NamespaceDef, QualifiedName } from '@frontmeans/namespace-aliaser';\nimport { afterAll, translateAfter } from '@proc7ts/fun-events';\nimport { InputAspects__NS } from '../../aspects';\nimport { InControl } from '../../control';\nimport { InMode } from '../../data';\nimport { InValidation } from '../../validation';\nimport { InStatus } from '../focus';\nimport { InCssClasses } from './css-classes.aspect';\n\n/**\n * Builds a source of informative CSS classes.\n *\n * Generates the following CSS classes:\n * - `disabled` when input control is disabled (i.e. has no data).\n * - `readonly` when input control is read-only,\n * - `invalid` when input control validation failed,\n * - `missing` when there are validation messages with `missing` code,\n * - `incomplete` when there are validation messages with `incomplete`,\n * - `has-focus` when input control has input focus,\n * - `touched` when input control is touched (i.e. had focus already),\n * - `edited` when input control is edited by user.\n *\n * These names are qualified with the given (or {@link InputAspects__NS default}) namespace.\n *\n * @category Style\n * @param ns - A definition of namespace to qualify CSS class names with. The {@link InputAspects__NS default namespace}\n * will be used when omitted.\n *\n * @returns A source of CSS class names to apply.\n */\nexport function inCssInfo(\n    {\n      ns = InputAspects__NS,\n    }: {\n      ns?: NamespaceDef;\n    } = {},\n): InCssClasses.Source {\n  return (control: InControl<any>) => {\n\n    const cls = (name: string) => [name, ns] as const;\n\n    return afterAll({\n      md: control.aspect(InMode),\n      vl: control.aspect(InValidation),\n      st: control.aspect(InStatus),\n    }).do(translateAfter(\n        (send, { md: [mode], vl: [valid], st: [{ hasFocus, touched, edited }] }) => {\n\n          const names: QualifiedName[] = [];\n\n          if (!InMode.hasData(mode)) {\n            names.push(cls('disabled'));\n          }\n          if (mode === 'ro' || mode === '-ro') {\n            names.push(cls('readonly'));\n          }\n          if (!valid.ok) {\n            names.push(cls('invalid'));\n          }\n          if (valid.has('missing')) {\n            names.push(cls('missing'));\n          }\n          if (valid.has('incomplete')) {\n            names.push(cls('incomplete'));\n          }\n          if (hasFocus) {\n            names.push(cls('has-focus'));\n          }\n          if (touched) {\n            names.push(cls('touched'));\n          }\n          if (edited) {\n            names.push(cls('edited'));\n          }\n\n          send(...names);\n        },\n    ));\n  };\n}\n","import type { HthvItem } from '../hthv-item';\nimport type { HthvPartial } from './hthv-partial';\n\n/**\n * @internal\n */\nexport function hthvItem<TItem extends HthvItem<any, any, any>>(\n    {\n      $ = 'raw',\n      n,\n      t,\n      v,\n      x = [],\n      p = {},\n      pl = [],\n    }: HthvPartial<TItem>,\n): TItem {\n  if (n) {\n    (p as Record<string, HthvPartial>)[n as string] = { $, n, v, x: [], p: {}, pl: [] };\n  }\n  return {\n    $,\n    n,\n    t,\n    v,\n    x,\n    p,\n    pl,\n  } as TItem;\n}\n","import type { HthvItem, HthvParamItem } from '../hthv-item';\n\n/**\n * @internal\n */\nexport function addParam(\n    {\n      p,\n      pl,\n    }: HthvItem,\n    param: HthvParamItem,\n): void {\n\n  const key = param.n || param.v;\n  const prev = p[key];\n\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  if (!prev || !prev.n && param.n) {\n    p[key] = param;\n  }\n  pl.push(param);\n}\n","/**\n * @internal\n */\nexport const parseNone = (): false => false;\n","import { parseNone } from './parse-none';\nimport type { ParserConfig } from './parser-config';\nimport type { ParserInput } from './parser-input';\n\nconst datePattern = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d\\d (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d\\d\\d\\d \\d\\d:\\d\\d:\\d\\d GMT/;\n\n/**\n * @internal\n */\nexport function dateTimeParser(\n    { dateTime }: ParserConfig,\n): (input: ParserInput, out: (v: string) => void) => boolean {\n  return dateTime ? parseDateTime : parseNone;\n}\n\nfunction parseDateTime(input: ParserInput, out: (value: string) => void): boolean {\n  input.s = input.s.substring(input.i);\n  input.i = 0;\n  if (datePattern.test(input.s)) {\n    out(input.s.substring(input.i, input.i += 29));\n    return true;\n  }\n  return false;\n}\n","import type { ParserConfig } from './parser-config';\nimport type { ParserInput } from './parser-input';\n\n/**\n * @internal\n */\nexport function nextInItem({ delimiterOf }: ParserConfig): (input: ParserInput) => string {\n  return input => {\n\n    const c = input.s[input.i];\n\n    input.d = delimiterOf(c);\n\n    return c;\n  };\n}\n","import { HthvDelimiter } from '../hthv-delimiter';\nimport type { HthvExtraItem, HthvItem, HthvItemType } from '../hthv-item';\nimport { hthvItem } from '../impl';\nimport { angleBracketsParser } from './angle-brackets-parser';\nimport { dateTimeParser } from './date-time-parser';\nimport { nextInItem } from './next-in-item';\nimport { parseNone } from './parse-none';\nimport type { ParserConfig } from './parser-config';\nimport type { ParserInput } from './parser-input';\nimport { quotedStringParser } from './quoted-string-parser';\n\n/**\n * @internal\n */\nexport interface ItemParserConfig {\n  named?: boolean;\n  tagged?: boolean;\n  extra?: boolean;\n  next?: (input: ParserInput) => string;\n}\n\n/**\n * @internal\n */\nexport function itemParser(\n    config: ParserConfig,\n    {\n      named = true,\n      tagged = true,\n      extra = true,\n      next = nextInItem(config),\n    }: ItemParserConfig = {},\n): (input: ParserInput, out: (param: HthvItem<any, any, any>) => void) => boolean {\n\n  const parseAngleBrackets = angleBracketsParser(config);\n  const parseDateTime = dateTimeParser(config);\n  const parseQuotedString = quotedStringParser(config);\n  const parseExtra = extra ? itemParser(config, { next, tagged: false, named: false, extra: false }) : parseNone;\n\n  return (input, out) => {\n\n    let name = '';\n    let type: HthvItemType = 'raw';\n    let tag: string | undefined;\n    let value: string | undefined;\n\n    while (input.i < input.s.length) {\n\n      const c = next(input);\n\n      if (input.d) {\n        if (input.d & (HthvDelimiter.Item | HthvDelimiter.Parameter)) {\n          break;\n        }\n        if (value == null) {\n          if (input.d & HthvDelimiter.Assignment) {\n            value = name ? '' : c;\n            ++input.i;\n            continue;\n          }\n          if (input.d & HthvDelimiter.Quote) {\n            if (tagged || !name) {\n              parseQuotedString(input, v => {\n                if (name) {\n                  type = 'tagged-string';\n                  tag = name;\n                } else {\n                  type = 'quoted-string';\n                }\n                name = '';\n                value = v;\n              });\n            }\n            break;\n          }\n          if (!name && parseAngleBrackets(input, v => {\n            type = 'angle-bracketed-string';\n            value = v;\n          })) {\n            break;\n          }\n          value = name;\n          name = '';\n        } else if (input.d & HthvDelimiter.Quote) {\n          if (tagged || !value) {\n            parseQuotedString(input, v => {\n              if (value) {\n                type = 'tagged-string';\n                tag = value;\n              } else {\n                type = 'quoted-string';\n              }\n              value = v;\n            });\n          }\n          break;\n        } else if (!value && parseAngleBrackets(input, v => {\n          type = 'angle-bracketed-string';\n          value = v;\n        })) {\n          break;\n        }\n      }\n\n      if (value == null) {\n        if (!name && parseDateTime(input, v => value = v)) {\n          type = 'date-time';\n          break;\n        }\n        if (named) {\n          name += c;\n        } else {\n          value = c;\n        }\n      } else if (!value && parseDateTime(input, v => value = v)) {\n        type = 'date-time';\n        break;\n      } else {\n        value += c;\n      }\n\n      ++input.i;\n    }\n\n    let item: HthvItem<any, any>;\n\n    if (value == null) {\n      if (!name) {\n        return false;\n      }\n      item = hthvItem({ $: type, v: name });\n    } else {\n      item = hthvItem({ $: type, n: name || undefined, t: tag, v: value });\n    }\n\n    // noinspection StatementWithEmptyBodyJS\n    while (parseExtra(input, extraItem => item.x.push(extraItem as HthvExtraItem))); // eslint-disable-line curly\n\n    out(item);\n\n    return true;\n  };\n}\n","import { HthvDelimiter } from '../hthv-delimiter';\nimport type { ParserConfig } from './parser-config';\nimport type { ParserInput } from './parser-input';\n\n/**\n * @internal\n */\nexport function angleBracketsParser(\n    { delimiterOf }: ParserConfig,\n): (input: ParserInput, out: (v: string) => void) => boolean {\n  return (input, out) => {\n     if (!(delimiterOf(input.s[input.i]) & HthvDelimiter.AngleBracketStart)) {\n       return false;\n     }\n\n     let result = '';\n\n     ++input.i;\n     while (input.i < input.s.length) {\n\n       const c = input.s[input.i++];\n\n       if (delimiterOf(c) & HthvDelimiter.AngleBracketEnd) {\n         break;\n       }\n       result += c;\n     }\n\n     out(result);\n\n     return true;\n  };\n}\n","import { HthvDelimiter } from '../hthv-delimiter';\nimport type { ParserConfig } from './parser-config';\nimport type { ParserInput } from './parser-input';\n\n/**\n * @internal\n */\nexport function quotedStringParser(\n    { delimiterOf }: ParserConfig,\n): (input: ParserInput, out: (value: string) => void) => void {\n  return (input, out) => {\n\n    let unquoted = '';\n\n    ++input.i;\n    for (; input.i < input.s.length; ++input.i) {\n\n      const c = input.s[input.i];\n\n      if (c === '\\\\') {\n\n        const next = input.s[++input.i];\n\n        if (next) {\n          unquoted += next;\n        } else {\n          unquoted += c;\n        }\n      } else if (delimiterOf(c) & HthvDelimiter.Quote) {\n        ++input.i;\n        out(unquoted);\n        return;\n      } else {\n        unquoted += c;\n      }\n    }\n\n    out(unquoted);\n  };\n}\n","import { HthvDelimiter } from '../hthv-delimiter';\nimport type { ParserConfig } from './parser-config';\nimport type { ParserInput } from './parser-input';\n\n/**\n * @internal\n */\nexport function nextInComment({ delimiterOf }: ParserConfig): (input: ParserInput) => string {\n  return input => {\n\n    let c = input.s[input.i];\n\n    if (c !== '\\\\') {\n      input.d = delimiterOf(c);\n      return c;\n    }\n\n    ++input.i;\n    if (input.i < input.s.length) {\n      c = input.s[input.i];\n      input.d = delimiterOf(c) ? HthvDelimiter.NonToken : HthvDelimiter.None;\n    } else {\n      input.d = HthvDelimiter.NonToken;\n    }\n\n    return c;\n  };\n}\n","import { HthvDelimiter } from '../hthv-delimiter';\nimport type { ParserConfig } from './parser-config';\nimport type { ParserInput } from './parser-input';\n\n/**\n * @internal\n */\nexport function spacesParser({ delimiterOf }: ParserConfig): (input: ParserInput) => boolean {\n  return input => {\n\n    const start = input.i;\n\n    do {\n\n      const c = input.s[input.i];\n\n      if (!(delimiterOf(c) & HthvDelimiter.Space)) {\n        break;\n      }\n      input.i++;\n    } while (input.i < input.s.length);\n\n    return input.i !== start;\n  };\n}\n","import { HthvDelimiter } from '../hthv-delimiter';\nimport type { HthvParamItem } from '../hthv-item';\nimport { itemParser, ItemParserConfig } from './item-parser';\nimport type { ParserConfig } from './parser-config';\nimport type { ParserInput } from './parser-input';\nimport { spacesParser } from './spaces-parser';\n\n/**\n * @internal\n */\nexport function paramParser(\n    config: ParserConfig,\n    opts: ItemParserConfig = {},\n): (input: ParserInput, out: (param: HthvParamItem) => void) => boolean {\n\n  const { delimiterOf } = config;\n  const skipSpaces = spacesParser(config);\n  const parseItem = itemParser(config, { ...opts, tagged: false });\n\n  return (input, out) => {\n    if (!(delimiterOf(input.s[input.i]) & HthvDelimiter.Parameter)) {\n      return false;\n    }\n\n    ++input.i;\n    skipSpaces(input);\n\n    return parseItem(input, out);\n  };\n}\n","import { HthvDelimiter, HthvDelimiterChar } from '../hthv-delimiter';\nimport type { HthvParserConfig } from '../hthv-parser';\n\n/**\n * @internal\n */\nexport interface ParserConfig {\n  readonly dateTime?: boolean;\n  delimiterOf(this: void, char: string): number;\n}\n\n/**\n * @internal\n */\nexport type DelimitConfig = { [char in HthvDelimiterChar]: number };\n\n/**\n * @internal\n */\nexport const defaultDelimit: DelimitConfig = {\n  ' ': HthvDelimiter.NonToken | HthvDelimiter.Space | HthvDelimiter.Item,\n  '\\t': HthvDelimiter.NonToken | HthvDelimiter.Space | HthvDelimiter.Item,\n  ',': HthvDelimiter.NonToken | HthvDelimiter.Item,\n  ';': HthvDelimiter.NonToken | HthvDelimiter.Parameter,\n  '\"': HthvDelimiter.NonToken | HthvDelimiter.Escaped | HthvDelimiter.Quote,\n  '\\\\': HthvDelimiter.NonToken | HthvDelimiter.Escaped,\n  '<': HthvDelimiter.NonToken | HthvDelimiter.AngleBracketStart,\n  '>': HthvDelimiter.NonToken | HthvDelimiter.AngleBracketEnd,\n  '=': HthvDelimiter.NonToken | HthvDelimiter.Assignment,\n  '(': HthvDelimiter.NonToken,\n  ')': HthvDelimiter.NonToken,\n  '/': HthvDelimiter.NonToken,\n  ':': HthvDelimiter.NonToken,\n  '?': HthvDelimiter.NonToken,\n  '@': HthvDelimiter.NonToken,\n  '[': HthvDelimiter.NonToken,\n  ']': HthvDelimiter.NonToken,\n  '{': HthvDelimiter.NonToken,\n  '}': HthvDelimiter.NonToken,\n};\n\n/**\n * @internal\n */\nexport function buildParserConfig(\n    {\n      delimit,\n      dateTime,\n    }: HthvParserConfig = {},\n): ParserConfig {\n\n  const delimitConfig: DelimitConfig = delimit ? { ...defaultDelimit, ...delimit } : defaultDelimit;\n\n  return {\n    dateTime,\n    delimiterOf(c) {\n      return delimitConfig[c as HthvDelimiterChar]\n          || (c >= '\\u0000' && c <= ' ' || c === '\\u007f' ? HthvDelimiter.NonToken : HthvDelimiter.None);\n    },\n  };\n}\n\n/**\n * @internal\n */\nexport const defaultParserConfig = (/*#__PURE__*/ buildParserConfig());\n\n/**\n * @internal\n */\nexport const commentParserConfig = (/*#__PURE__*/ buildParserConfig({\n  delimit: {\n    ':': HthvDelimiter.NonToken | HthvDelimiter.Assignment,\n    '(': HthvDelimiter.NonToken | HthvDelimiter.Escaped | HthvDelimiter.Comment,\n    ')': HthvDelimiter.NonToken | HthvDelimiter.Escaped | HthvDelimiter.Item,\n    ' ': HthvDelimiter.NonToken | HthvDelimiter.Space,\n    '\\t': HthvDelimiter.NonToken | HthvDelimiter.Space,\n    '=': HthvDelimiter.NonToken,\n    ',': HthvDelimiter.NonToken,\n  },\n}));\n","import type { HthvDelimiterChar } from './hthv-delimiter';\nimport type { HthvItem } from './hthv-item';\nimport { hthvItem } from './impl';\nimport {\n  addParam,\n  buildParserConfig,\n  commentParser,\n  commentParserConfig,\n  defaultParserConfig,\n  itemDelimitParser,\n  itemParser,\n  paramParser,\n  parseNone,\n  ParserInput,\n} from './parser';\n\n/**\n * HTTP header value parser signature.\n *\n * Splits the value onto {@link HthvItem items}.\n *\n * @typeParam TNameMode - Whether parsed items have {@link HthvItem.n names}.\n * @typeParam TTagMode - Whether parsed items have {@link HthvItem.t tags}.\n * @typeParam TParamsMode - Whether parsed items have {@link HthvItem.p parameters}.\n */\nexport type HthvParser<\n    TNameMode extends 'has-name' | 'no-name' = 'has-name' | 'no-name',\n    TTagMode extends 'has-tag' | 'no-tag' = 'has-tag' | 'no-tag',\n    TParamsMode extends 'has-params' | 'no-params' = 'has-params' | 'no-params'> =\n/**\n * @param value - HTTP header value to parse.\n *\n * @returns An array of parsed value items.\n */\n    (this: void, value: string) => HthvItem<TNameMode, TTagMode, TParamsMode>[];\n\n/**\n * A configuration of HTTP header value parser.\n *\n * This is used to {@link newHthvParser configure new parser}.\n */\nexport interface HthvParserConfig {\n\n  /**\n   * Delimits configuration.\n   *\n   * An object literal with {@link HthvDelimiterChar supported delimiter characters} as keys\n   * and corresponding {@link HthvDelimiter delimiters} as values.\n   */\n  readonly delimit?: HthvDelimitConfig;\n\n  /**\n   * Whether to parse date/time values.\n   *\n   * @default `false`\n   */\n  readonly dateTime?: boolean;\n\n  /**\n   * Whether to parse comments.\n   *\n   * @default `false`.\n   */\n  readonly comments?: boolean;\n\n}\n\n/**\n * Delimits configuration for HTTP header value parser.\n *\n * This is an object literal with {@link HthvDelimiterChar supported delimiter characters} as keys\n * and corresponding {@link HthvDelimiter delimiters} as values.\n *\n * The default delimiter configuration is used for omitted characters.\n */\nexport type HthvDelimitConfig = { readonly [char in HthvDelimiterChar]?: number };\n\n/**\n * Creates and configures new HTTP header value parser.\n *\n * @param config - New parser configuration.\n *\n * @returns New HTTP header value parser function.\n */\nexport function newHthvParser(config?: HthvParserConfig): HthvParser {\n\n  const parserConfig = config ? buildParserConfig(config) : defaultParserConfig;\n  const parseItemDelimit = itemDelimitParser(parserConfig);\n  const parseParam = paramParser(parserConfig);\n  const parseItem = itemParser(parserConfig);\n  const parseComment = config?.comments ? commentParser(commentParserConfig) : parseNone;\n\n  return headerValue => {\n\n    const result: HthvItem[] = [];\n    const input: ParserInput = { i: 0, s: headerValue };\n\n    // noinspection StatementWithEmptyBodyJS\n    while (parseTopLevelItem()); // eslint-disable-line curly\n\n    return result;\n\n    function parseTopLevelItem(): boolean {\n      return input.i < input.s.length && (\n          parseItemDelimit(input)\n          || parseParam(\n              input,\n              param => {\n                if (!result.length) {\n                  result.push(hthvItem({ $: 'raw', v: '' }));\n                }\n                addParam(result[result.length - 1], param);\n              },\n          )\n          || parseComment(input, item => result.push(item))\n          || parseItem(input, item => result.push(item))\n      );\n    }\n  };\n}\n","import { HthvDelimiter } from '../hthv-delimiter';\nimport type { ParserConfig } from './parser-config';\nimport type { ParserInput } from './parser-input';\nimport { spacesParser } from './spaces-parser';\n\n/**\n * @internal\n */\nexport function itemDelimitParser(config: ParserConfig): (input: ParserInput) => boolean {\n\n  const { delimiterOf } = config;\n  const skipSpaces = spacesParser(config);\n\n  return input => {\n    if (delimiterOf(input.s[input.i]) & HthvDelimiter.Item) {\n      input.i++;\n      skipSpaces(input);\n      return true;\n    }\n    return false;\n  };\n}\n","import { HthvDelimiter } from '../hthv-delimiter';\nimport type { HthvItem } from '../hthv-item';\nimport { hthvItem } from '../impl';\nimport { addParam } from './add-param';\nimport { itemParser, ItemParserConfig } from './item-parser';\nimport { nextInComment } from './next-in-comment';\nimport { paramParser } from './param-parser';\nimport type { ParserConfig } from './parser-config';\nimport type { ParserInput } from './parser-input';\nimport { spacesParser } from './spaces-parser';\n\n/**\n * @internal\n */\nexport function commentParser(config: ParserConfig): (input: ParserInput, out: (item: HthvItem) => void) => boolean {\n\n  const { delimiterOf } = config;\n  const skipSpaces = spacesParser(config);\n  const commentParserConfig: ItemParserConfig = {\n    next: nextInComment(config),\n  };\n  const parseItem = itemParser(config, commentParserConfig);\n  const parseParam = paramParser(config, commentParserConfig);\n\n  return (input, out) => {\n    if (!(delimiterOf(input.s[input.i]) & HthvDelimiter.Comment)) {\n      return false;\n    }\n\n    ++input.i;\n\n    let result: HthvItem | undefined;\n\n    // noinspection StatementWithEmptyBodyJS\n    while ( // eslint-disable-line curly\n        skipSpaces(input)\n        || parseParam(\n            input,\n            param => {\n              if (!result) {\n                result = hthvItem({ $: 'raw', v: '' });\n              }\n              addParam(result, param);\n            },\n        )\n        || parseItem(input, item => result = item)\n        );\n\n    ++input.i; // closing parent\n    out(result || hthvItem({ $: 'raw', v: '' }));\n\n    return true;\n  };\n}\n","import { HthvParser, newHthvParser } from './hthv-parser';\n\n/**\n * Parses HTTP header value.\n *\n * Splits the value onto {@link HthvItem items}.\n *\n * Parser is configured with default {@link HthvParserConfig config}.\n *\n * Does not recognize comments or date/time values.\n *\n * Treats illegal characters as ASCII letters.\n *\n * @param value - HTTP header value to parse.\n *\n * @returns An array of comma- or space- separated value items.\n */\nexport const hthvParse: HthvParser = (/*#__PURE__*/ newHthvParser());\n\n/**\n * Parses HTTP header value that may contain date/time.\n *\n * Splits the value onto {@link HthvItem items}.\n *\n * Parser is configured with default config except {@link HthvParserConfig.dateTime date/time parsing enabled}.\n *\n * Does not recognize comments.\n *\n * Handles date/time values in [IMF-fixdate] format only.\n *\n * Treats illegal characters as ASCII letters.\n *\n * [IMF-fixdate]: https://tools.ietf.org/html/rfc7231#section-7.1.1.1\n *\n * @param value - HTTP header value to parse.\n *\n * @returns An array of comma- or space- separated value items.\n */\nexport const hthvParseDT: HthvParser = (/*#__PURE__*/ newHthvParser({ dateTime: true }));\n","import { HthvDelimiter } from './hthv-delimiter';\nimport { defaultParserConfig } from './parser';\n\n/**\n * Conditionally encloses HTTP header value or its part into double quotes.\n *\n * Quotes will be added if delimiter or special character is present in input `string`, or the input `string` is empty.\n * {@link hthvEscapeQ Escapes} `\"` and `\\` symbols.\n *\n * @param string - A string to quote.\n *\n * @returns Either a string enclosed in double quotes, or original `string` if there is no need to quote it.\n */\nexport function hthvQuote(string: string): string {\n  if (!string) {\n    return '\"\"';\n  }\n\n  const { delimiterOf } = defaultParserConfig;\n  let escaped: undefined | string;\n  let quote = false;\n\n  for (let i = 0; i < string.length; ++i) {\n\n    const c = string[i];\n    const delimiter = delimiterOf(c);\n\n    if (delimiter) {\n      if (delimiter & HthvDelimiter.Escaped) {\n        if (!escaped) {\n          escaped = string.substring(0, i);\n        }\n        escaped += '\\\\' + c;\n      }\n      quote = true;\n    } else if (escaped) {\n      escaped += c;\n    }\n  }\n\n  return quote ? `\"${escaped || string}\"` : string;\n}\n","import { ContextValueSlot } from '@proc7ts/context-values';\nimport { contextDestroyed, ContextUpKey, ContextUpRef } from '@proc7ts/context-values/updatable';\nimport { AfterEvent, afterThe, digAfter, EventSender, OnEvent, onSupplied } from '@proc7ts/fun-events';\n\n/**\n * @internal\n */\ntype FetchAgent<TResponse extends any[]> = (\n    this: void,\n    next: (this: void, request?: Request) => OnEvent<TResponse>,\n    request: Request,\n) => EventSender<TResponse>;\n\n/**\n * @internal\n */\ntype CombinedFetchAgent<TResponse extends any[]> = (\n    this: void,\n    next: (this: void, request: Request) => OnEvent<TResponse>,\n    request: Request,\n) => OnEvent<TResponse>;\n\n/**\n * @internal\n */\nexport class FetchAgentKey<TResponse extends any[]>\n    extends ContextUpKey<CombinedFetchAgent<TResponse>, FetchAgent<TResponse>>\n    implements ContextUpRef<CombinedFetchAgent<TResponse>, FetchAgent<TResponse>> {\n\n  readonly upKey: ContextUpKey.UpKey<CombinedFetchAgent<TResponse>, FetchAgent<TResponse>>;\n\n  constructor(name: string) {\n    super(name);\n    this.upKey = this.createUpKey(\n        slot => slot.insert(slot.seed.do(digAfter(\n            (...agents) => {\n              if (agents.length) {\n                return afterThe(combineFetchAgents(agents));\n              }\n              if (slot.hasFallback && slot.or) {\n                return slot.or;\n              }\n\n              return afterThe(defaultFetchAgent);\n            },\n        ))),\n    );\n  }\n\n  grow(\n      slot: ContextValueSlot<\n          CombinedFetchAgent<TResponse>,\n          ContextUpKey.Source<FetchAgent<TResponse>>,\n          AfterEvent<FetchAgent<TResponse>[]>>,\n  ): void {\n\n    let delegated: CombinedFetchAgent<TResponse>;\n\n    slot.context.get(\n        this.upKey,\n        slot.hasFallback ? { or: slot.or != null ? afterThe(slot.or) : slot.or } : undefined,\n    )!(\n        agent => delegated = agent,\n    ).whenOff(\n        reason => delegated = contextDestroyed(reason),\n    );\n\n    slot.insert((next, request) => delegated(next, request));\n  }\n\n}\n\n/**\n * @internal\n */\nfunction defaultFetchAgent<TResponse extends any[]>(\n    next: (this: void, request: Request) => OnEvent<TResponse>,\n    request: Request,\n): OnEvent<TResponse> {\n  return next(request);\n}\n\n/**\n * @internal\n */\nexport function combineFetchAgents<TResponse extends any[]>(\n    agents: FetchAgent<TResponse>[],\n): CombinedFetchAgent<TResponse> {\n  return (next, request) => {\n\n    const fetch: (agentIdx: number, agentRequest: Request) => OnEvent<TResponse> = (\n        agentIdx,\n        agentRequest,\n    ) => {\n\n      const agent = agents[agentIdx];\n\n      if (!agent) {\n        return next(agentRequest);\n      }\n\n      return onSupplied(\n          agent(\n              (nextRequest = agentRequest) => fetch(agentIdx + 1, nextRequest),\n              agentRequest,\n          ),\n      );\n    };\n\n    return fetch(0, request);\n  };\n}\n","import { ContextUpRef } from '@proc7ts/context-values/updatable';\nimport { EventSender, OnEvent } from '@proc7ts/fun-events';\nimport { FetchAgentKey } from './fetch-agent-key.impl';\n\n/**\n * HTTP fetch agent signature.\n *\n * The agent can be used to alter {@link HttpFetch} processing. For that it should be registered in appropriate context.\n *\n * All registered agents are organized into chain. The first agent in chain is called by {@link HttpFetch}.\n */\nexport type HttpFetchAgent =\n/**\n * @param next - Either calls the next agent in chain, or actually fetches the data if this agent is the last one.\n * Accepts an optional `Request` parameter. The original request will be used instead when omitted.\n * @param request - HTTP request.\n *\n * @returns An `EventSender` of response object(s). It is returned either to preceding agent in chain, or as a result of\n * {@link HttpFetch} call.\n */\n    (\n        this: void,\n        next: (this: void, request?: Request) => OnEvent<[Response]>,\n        request: Request,\n    ) => EventSender<[Response]>;\n\nexport namespace HttpFetchAgent {\n\n  /**\n   * Combined HTTP fetch agent signature.\n   *\n   * This is what is available under {@link HttpFetchAgent} key.\n   */\n  export type Combined =\n  /**\n   * @param next - Either calls the next agent in chain, or actually fetches the data if this agent is the last one.\n   * Accepts `Request` parameter.\n   * @param request - HTTP request.\n   *\n   * @returns An `OnEvent` sender of response object(s) receivers. It is returned as a result of {@link HttpFetch} call.\n   */\n      (\n          this: void,\n          next: (this: void, request: Request) => OnEvent<[Response]>,\n          request: Request,\n      ) => OnEvent<[Response]>;\n\n}\n\n/**\n * A key of context value containing an {@link HttpFetchAgent} instance.\n *\n * The agent returned combines all registered agents into one. If no agent registered it just performs the fetch.\n */\nexport const HttpFetchAgent: ContextUpRef<HttpFetchAgent.Combined, HttpFetchAgent> = (\n    /*#__PURE__*/ new FetchAgentKey<[Response]>('http-fetch-agent')\n);\n","import { DomEventDispatcher } from '@frontmeans/dom-events';\nimport { EventEmitter, onceOn, OnEvent, onEventBy } from '@proc7ts/fun-events';\nimport { Supply } from '@proc7ts/supply';\nimport { BootstrapContext, BootstrapWindow } from '@wesib/wesib';\nimport { HttpFetch } from './http-fetch';\nimport { HttpFetchAgent } from './http-fetch-agent';\n\nconst HttpFetchAborted = {};\n\n/**\n * @internal\n */\nexport function newHttpFetch(context: BootstrapContext): HttpFetch {\n\n  const window = context.get(BootstrapWindow);\n  const agent = context.get(HttpFetchAgent);\n\n  return (input, init) => agent(fetch, new Request(input, init));\n\n  function fetch(request: Request): OnEvent<[Response]> {\n    return onEventBy(receiver => {\n\n      const responseEmitter = new EventEmitter<[Response]>();\n      let supply: Supply;\n\n      if ('AbortController' in window) {\n\n        const abortController = new window.AbortController();\n        const { signal } = abortController;\n\n        supply = new Supply(reason => {\n          if (reason === HttpFetchAborted) {\n            abortController.abort();\n          }\n        });\n        receiver.supply.whenOff(() => supply.off(HttpFetchAborted)).needs(supply);\n        responseEmitter.on({\n          supply,\n          receive(ctx, response) {\n            receiver.receive(ctx, response);\n          },\n        });\n\n        const customSignal = request.signal;\n\n        if (customSignal) {\n          new DomEventDispatcher(customSignal)\n              .on('abort')\n              .do(onceOn)(\n                  () => abortController.abort(),\n              );\n          if (customSignal.aborted) {\n            abortController.abort();\n          }\n        }\n\n        request = new Request(request, { signal });\n      } else {\n        supply = responseEmitter.on(receiver);\n      }\n\n      window.fetch(request)\n          .then(response => {\n            responseEmitter.send(response);\n            supply.off();\n          })\n          .catch(reason => supply.off(reason));\n    });\n  }\n}\n","import { FnContextKey, FnContextRef } from '@proc7ts/context-values/updatable';\nimport { OnEvent } from '@proc7ts/fun-events';\nimport { bootstrapDefault } from '@wesib/wesib';\nimport { newHttpFetch } from './http-fetch.impl';\n\n/**\n * HTTP fetch function signature.\n *\n * This is a function that wraps browser's\n * [fetch()](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch) function and provides\n * additional functionality. E.g. request interception.\n *\n * This function returns an `OnEvent` sender instead of a `Promise`. This allows to report multiple responses.\n * E.g. when the resource refresh requested and delivered. The request is sent whenever a receiver is registered\n * in this sender. When the fetch completes the response supply is cut off, and callbacks registered with its\n * `whenOff()` method are notified. When fetch fails for whatever reason, this reason is passed to these callbacks.\n * The fetch can be aborted by cutting off the response supply. I.e. by calling its `off()` method.\n *\n * An instance of {@link HttpFetch} is available from bootstrap context.\n */\nexport type HttpFetch =\n/**\n * @param input - The resource to fetch. This can either an URL string, or a `Request` object.\n * @param init - Custom settings to apply to the request.\n *\n * @returns An `OnEvent` sender of responses.\n */\n    (this: void, input: RequestInfo, init?: RequestInit) => OnEvent<[Response]>;\n\n/**\n * A key of bootstrap context value containing an {@link HttpFetch} instance.\n */\nexport const HttpFetch: FnContextRef<Parameters<HttpFetch>, ReturnType<HttpFetch>> = (\n    /*#__PURE__*/ new FnContextKey<Parameters<HttpFetch>, ReturnType<HttpFetch>>(\n        'http-fetch',\n        {\n          byDefault: bootstrapDefault(newHttpFetch),\n        },\n    )\n);\n","/**\n * Extracts URL contained in the hash of another URL.\n *\n * Extracted hash URL is based on origin of the original URL. Still, it may be absolute one.\n *\n * Input URL is never altered.\n *\n * @param url - An URL to extract hash from.\n *\n * @returns URL extracted from hash.\n */\nexport function getHashURL(url: URL): URL {\n  return new URL(url.hash.substring(1), url.origin);\n}\n\n/**\n * Creates an URL based on original one, but with hash substituted by the given hash URL.\n *\n * The hash URL is substituted as following:\n *\n * 1. If the hash URL's origin is not the same as the one of the base one, or if it contains a username,\n *    then absolute hash URL is substituted:\n * 2. Otherwise:\n *    - pathname is substituted, unless it is equal to `/` and no hash and search parameters present,\n *    - search parameters are substituted when at least one present,\n *    - hash is substituted only when present.\n *\n * Input URLs are never altered.\n *\n * @param url - Base URL.\n * @param hashURL - Hash URL to substitute.\n *\n * @returns URL with updated hash.\n */\nexport function setHashURL(url: URL, hashURL: URL): URL {\n  if (hashURL.origin !== url.origin || hashURL.username) {\n    return new URL(`#${hashURL}`, url);\n  }\n\n  const { pathname, search, hash } = hashURL;\n  const result = new URL('', url);\n\n  result.hash = (search || hash || pathname.length > 1) ? (pathname + search + hash) : (search + hash);\n\n  return result;\n}\n","import { Page } from './page';\nimport { PageParamContext } from './page-param-context';\n\n/**\n * A key of {@link PageParam.Ref page parameter request} property containing requested page parameter.\n */\nexport const PageParam__symbol = (/*#__PURE__*/ Symbol('page-param'));\n\n/**\n * Page navigation parameter.\n *\n * Can applied before navigation happened (i.e. to {@link LeavePageEvent}). Then it will be available to the target page\n * both before and after navigation.\n *\n * @typeParam T - Parameter value type.\n * @typeParam TInput - Parameter input type.\n */\nexport abstract class PageParam<T, TInput> implements PageParam.Ref<T, TInput> {\n\n  get [PageParam__symbol](): this {\n    return this;\n  }\n\n  /**\n   * Creates page parameter handle.\n   *\n   * This method is called when {@link Page.put assigning new page parameter}. It is called at most once per request,\n   * unless this parameter is assigned already. A {@link PageParam.Handle.put} method will be called instead\n   * in the latter case.\n   *\n   * @param page - A page to assign navigation parameter to.\n   * @param input - Parameter input used to construct its initial value.\n   * @param context - Page parameter context.\n   *\n   * @returns New page parameter value handle.\n   */\n  abstract create(page: Page, input: TInput, context: PageParamContext): PageParam.Handle<T, TInput>;\n\n  /**\n   * Creates default page parameter handle.\n   *\n   * This method is called when {@link Page.get requesting page parameter} which value is not present in the page.\n   * The value handle returned is assigned to the page.\n   *\n   * Returns nothing by default.\n   *\n   * @param _page - A page to assign navigation parameter to.\n   * @param _context - Page parameter context.\n   *\n   * @returns New page parameter value handle or nothing if there is no default value.\n   */\n  byDefault(_page: Page, _context: PageParamContext): PageParam.Handle<T, TInput> | undefined {\n    return;\n  }\n\n}\n\nexport namespace PageParam {\n\n  /**\n   * Page navigation parameter reference.\n   *\n   * @typeParam T - Parameter value type.\n   * @typeParam TInput - Parameter input type.\n   */\n  export interface Ref<T, TInput> {\n\n    /**\n     * Referred page navigation parameter instance.\n     */\n    readonly [PageParam__symbol]: PageParam<T, TInput>;\n\n  }\n\n  /**\n   * Page navigation parameter that has default value.\n   *\n   * @typeParam T - Parameter value type.\n   * @typeParam TInput - Parameter input type.\n   */\n  export interface WithDefaults<T, TInput> extends PageParam<T, TInput> {\n\n    byDefault(page: Page, context: PageParamContext): PageParam.Handle<T, TInput>;\n\n  }\n\n  export namespace WithDefaults {\n\n    /**\n     * A reference to page navigation parameter that has default value.\n     *\n     * @typeParam T - Parameter value type.\n     * @typeParam TInput - Parameter input type.\n     */\n    export interface Ref<T, TInput> {\n\n      /**\n       * Referred page navigation parameter instance.\n       */\n      readonly [PageParam__symbol]: WithDefaults<T, TInput>;\n\n    }\n\n  }\n\n  /**\n   * Page navigation parameter value handle.\n   *\n   * Holds and maintains parameter value.\n   *\n   * Created by {@link PageParam.create} method.\n   *\n   * @typeParam T - Parameter value type.\n   * @typeParam TInput - Parameter input type.\n   */\n  export interface Handle<T, TInput> {\n\n    /**\n     * Returns current parameter value.\n     *\n     * @returns Parameter value.\n     */\n    get(): T;\n\n    /**\n     * Puts page parameter value.\n     *\n     * This method is called when {@link Page.put re-assigning page parameter}. It is called when page parameter\n     * is assigned already and can be used to update it. The update logic is up to the implementation.\n     *\n     * @param input - Parameter input to use when updating its value.\n     */\n    put(input: TInput): void;\n\n    /**\n     * Transfers parameter to target page.\n     *\n     * This is called right before {@link LeavePageEvent} is fired for each parameter handle of current page.\n     *\n     * @param to - A page to transfer parameter to.\n     * @param when - When the transfer happens. Either `pretend`, `pre-open`, `pre-replace`, `open`, or `return`.\n     * `return` is used when return to page generated by another app version. E.g. from the page that has been\n     * reloaded.\n     *\n     * @returns New parameter handle instance for target page, or `undefined` if nothing to transfer.\n     */\n    transfer?(\n        to: Page, when: 'pretend' | 'pre-open' | 'pre-replace' | 'enter' | 'return',\n    ): Handle<T, TInput> | undefined;\n\n    /**\n     * This method is called when the page this parameter created for is entered.\n     *\n     * @param page - Entered page.\n     * @param when - When the page is entered. Either `init`, `open`, `replace`, `enter`, or `return`.\n     */\n    enter?(page: Page, when: 'init' | 'open' | 'replace' | 'enter' | 'return'): void;\n\n    /**\n     * This method is called when the page this parameter created for is left.\n     */\n    leave?(): void;\n\n    /**\n     * This method is called when page navigation aborted and target page won't be reached.\n     *\n     * The handle won't be accessed after this method call.\n     *\n     * @param at - The page the browser remains at.\n     */\n    stay?(at: Page): void;\n\n    /**\n     * This method is called when the page this parameter is created for is removed from navigation history.\n     *\n     * The handle won't be accessed after this method call.\n     */\n    forget?(): void;\n\n  }\n\n}\n","import { ContextValueSlot } from '@proc7ts/context-values';\nimport { contextDestroyed, ContextUpKey, ContextUpRef } from '@proc7ts/context-values/updatable';\nimport { AfterEvent, afterThe, digAfter } from '@proc7ts/fun-events';\nimport { BootstrapWindow } from '@wesib/wesib';\nimport { Navigation } from './navigation';\nimport { Page } from './page';\nimport { PageParam } from './page-param';\nimport Target = Navigation.Target;\n\n/**\n * Navigation agent signature.\n *\n * The agent is called by navigation methods when leaving current page and may alter navigation processing.\n * E.g. change navigation target. For that it should be registered in appropriate context.\n *\n * All registered agents are organized into chain. The first agent in chain is called by navigation method.\n */\nexport type NavigationAgent =\n/**\n * @param next - Either calls the next agent in chain, or applies the final navigation target if this agent is the last\n * one. Not calling this function effectively prevents navigation.\n * Accepts an optional {@link Navigation.Target} parameter. The original target will be used instead when omitted.\n * @param when - When navigation occurred. Either `pretend`, `pre-open`, or `pre-replace`.\n * @param from - The page to leave.\n * @param to - Navigation target page.\n */\n    (\n        this: void,\n        next: (this: void, target?: Target) => void,\n        when: 'pretend' | 'pre-open' | 'pre-replace',\n        from: Page,\n        to: Page,\n    ) => void;\n\n/**\n * @internal\n */\nclass NavigationAgentKey\n    extends ContextUpKey<NavigationAgent.Combined, NavigationAgent>\n    implements ContextUpRef<NavigationAgent.Combined, NavigationAgent> {\n\n  readonly upKey: ContextUpKey.UpKey<NavigationAgent.Combined, NavigationAgent>;\n\n  constructor(name: string) {\n    super(name);\n    this.upKey = this.createUpKey(\n        slot => {\n\n          const { document } = slot.context.get(BootstrapWindow);\n\n          slot.insert(slot.seed.do(\n              digAfter((...agents) => {\n                if (agents.length) {\n                  return afterThe(combinedAgent);\n                }\n                if (slot.hasFallback && slot.or) {\n                  return slot.or;\n                }\n\n                return afterThe(defaultNavigationAgent);\n\n                function combinedAgent(\n                    next: (this: void, target: Navigation.URLTarget) => void,\n                    when: 'pretend' | 'pre-open' | 'pre-replace',\n                    from: Page,\n                    to: Page,\n                ): void {\n\n                  return navigate(0, to);\n\n                  function navigate(agentIdx: number, agentTo: Page): void {\n\n                    const agent = agents[agentIdx];\n\n                    if (!agent) {\n                      return next(agentTo);\n                    }\n\n                    agent(\n                        (\n                            {\n                              url: nextURL = agentTo.url,\n                              title: nextTitle = agentTo.title,\n                              // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                              data: nextData = agentTo.data,\n                            }: Navigation.Target = agentTo,\n                        ) => navigate(\n                            agentIdx + 1,\n                            {\n                              url: new URL(String(nextURL), document.baseURI),\n                              title: nextTitle,\n                              // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                              data: nextData,\n                              get visited() {\n                                return agentTo.visited;\n                              },\n                              get current() {\n                                return agentTo.current;\n                              },\n                              get<T>(ref: PageParam.Ref<T, unknown>): T | undefined {\n                                return agentTo.get(ref);\n                              },\n                              put(ref, input) {\n                                agentTo.put(ref, input);\n                              },\n                            },\n                        ),\n                        when,\n                        from,\n                        agentTo,\n                    );\n                  }\n                }\n              }),\n          ));\n        },\n    );\n  }\n\n  grow(\n      slot: ContextValueSlot<\n          NavigationAgent.Combined,\n          ContextUpKey.Source<NavigationAgent>,\n          AfterEvent<NavigationAgent[]>>,\n  ): void {\n\n    let delegated: NavigationAgent.Combined;\n\n    slot.context.get(\n        this.upKey,\n        slot.hasFallback ? { or: slot.or != null ? afterThe(slot.or) : slot.or } : undefined,\n    )!(\n        agent => delegated = agent,\n    ).whenOff(\n        reason => delegated = contextDestroyed(reason),\n    );\n\n    slot.insert((next, when, from, to) => delegated(next, when, from, to));\n  }\n\n}\n\n/**\n * @internal\n */\nfunction defaultNavigationAgent(\n    next: (this: void, target: Navigation.URLTarget) => void,\n    _when: 'pretend' | 'pre-open' | 'pre-replace',\n    _from: Page,\n    to: Page,\n): void {\n  next(to);\n}\n\nexport namespace NavigationAgent {\n\n  /**\n   * Combined navigation agent signature.\n   *\n   * This is what is available under {@link NavigationAgent} key.\n   */\n  export type Combined =\n  /**\n   * @param next - Either calls the next agent in chain, or applies the final navigation target if this agent is the\n   * last one. Not calling this function effectively prevents navigation.\n   * Accepts an optional {@link Navigation.Target} parameter. The original target will be used instead when omitted.\n   * @param when - When navigation occurred. Either `pretend`, `pre-open`, or `pre-replace`.\n   * @param from - The page to leave.\n   * @param to - Navigation target page.\n   */\n      (\n          this: void,\n          next: (this: void, target: Navigation.URLTarget) => void,\n          when: 'pretend' | 'pre-open' | 'pre-replace',\n          from: Page,\n          to: Page,\n      ) => void;\n\n}\n\n/**\n * A key of context value containing an {@link NavigationAgent} instance.\n *\n * The agent returned combines all registered agents into one. If no agent registered it just performs the navigation.\n */\nexport const NavigationAgent: ContextUpRef<NavigationAgent.Combined, NavigationAgent> = (\n    /*#__PURE__*/ new NavigationAgentKey('navigation-agent')\n);\n","import { ContextValues } from '@proc7ts/context-values';\n\n/**\n * Page parameter context.\n *\n * Provides values available in bootstrap context.\n */\nexport abstract class PageParamContext extends ContextValues {\n}\n","import { ContextKey, ContextKey__symbol, ContextRegistry, SingleContextKey } from '@proc7ts/context-values';\nimport { ValueTracker } from '@proc7ts/fun-events';\nimport { noop } from '@proc7ts/primitives';\nimport { itsEach } from '@proc7ts/push-iterator';\nimport { BootstrapContext, bootstrapDefault, BootstrapWindow } from '@wesib/wesib';\nimport { Navigation } from './navigation';\nimport { Page } from './page';\nimport { PageParam, PageParam__symbol } from './page-param';\nimport { PageParamContext } from './page-param-context';\n\n/**\n * @internal\n */\nconst NavHistory__key = (/*#__PURE__*/ new SingleContextKey<NavHistory>(\n    'nav-history',\n    {\n      byDefault: bootstrapDefault(ctx => new NavHistory(ctx)),\n    },\n));\n\n/**\n * @internal\n */\nexport const NAV_DATA_KEY = 'wesib:navigation:data' as const;\n\n/**\n * @internal\n */\nexport interface PartialNavData {\n  readonly uid?: string;\n  readonly id?: number;\n  readonly data: any;\n}\n\n/**\n * @internal\n */\nexport interface NavData extends PartialNavData {\n  readonly uid: string;\n  readonly id: number;\n}\n\n/**\n * @internal\n */\nexport interface NavDataEnvelope {\n  readonly [NAV_DATA_KEY]: NavData;\n}\n\n/**\n * @internal\n */\nfunction extractNavData(state: any): PartialNavData {\n  return state == null || typeof state !== 'object'\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      ? { data: state }\n      : (state as NavDataEnvelope)[NAV_DATA_KEY] as PartialNavData;\n}\n\n/**\n * @internal\n */\nexport class NavHistory {\n\n  static get [ContextKey__symbol](): ContextKey<NavHistory> {\n    return NavHistory__key;\n  }\n\n  private readonly _document: Document;\n  private readonly _location: Location;\n  private readonly _history: History;\n  private readonly _entries = new Map<number, PageEntry>();\n  private readonly _uid: string;\n  private _lastId = 0;\n\n  constructor(private readonly _context: BootstrapContext) {\n    const window = _context.get(BootstrapWindow);\n\n    this._document = window.document;\n    this._location = window.location;\n    this._history = window.history;\n    this._uid = btoa(String(Math.random()));\n  }\n\n  init(): PageEntry {\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const { data } = extractNavData(this._history.state);\n    const entry = this.newEntry({\n      url: new URL(this._location.href),\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      data,\n      title: this._document.title,\n    });\n\n    this._entries.set(entry.id, entry);\n    entry.schedule(() => {\n      entry.enter('init');\n      this._history.replaceState(this._historyState(entry), '');\n    });\n\n    return entry;\n  }\n\n  newEntry(target: Navigation.URLTarget): PageEntry {\n    return new PageEntry(this._context, ++this._lastId, target);\n  }\n\n  open(\n      toEntry: PageEntry,\n      tracker: ValueTracker<PageEntry>,\n  ): void {\n\n    const { page: { title = '', url } } = toEntry;\n\n    this._history.pushState(\n        this._historyState(toEntry),\n        title,\n        url.href,\n    );\n\n    this._enter('open', toEntry, tracker);\n  }\n\n  private _enter(\n      when: 'open' | 'enter',\n      toEntry: PageEntry,\n      tracker: ValueTracker<PageEntry>,\n  ): void {\n\n    const fromEntry = tracker.it;\n\n    this._entries.set(toEntry.id, toEntry);\n\n    try {\n      // Forget all entries starting from next one\n      for (let e = fromEntry.next; e; e = e.next) {\n        this._forget(e);\n      }\n    } finally {\n      toEntry.prev = fromEntry;\n      fromEntry.next = toEntry;\n      toEntry.schedule(() => {\n        try {\n          fromEntry.leave();\n        } finally {\n          toEntry.enter(when);\n        }\n      });\n      tracker.it = toEntry;\n    }\n  }\n\n  replace(\n      toEntry: PageEntry,\n      tracker: ValueTracker<PageEntry>,\n  ): void {\n\n    const fromEntry = tracker.it;\n    const { page: { title = '', url } } = toEntry;\n\n    this._history.replaceState(\n        this._historyState(toEntry),\n        title,\n        url.href,\n    );\n\n    this._entries.set(toEntry.id, toEntry);\n\n    const prev = fromEntry.prev;\n\n    if (prev) {\n      toEntry.prev = prev;\n      prev.next = toEntry;\n    }\n\n    toEntry.schedule(() => {\n      try {\n        fromEntry.leave();\n      } finally {\n        try {\n          this._forget(fromEntry);\n        } finally {\n          toEntry.enter('replace');\n        }\n      }\n    });\n    tracker.it = toEntry;\n  }\n\n  popState(\n      popState: PopStateEvent,\n      tracker: ValueTracker<PageEntry>,\n  ): PageEntry | undefined {\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const { state } = popState;\n\n    if (state == null) {\n      // Hash change\n      if (this._history.state == null) {\n        // Not a return\n        return this._changeHash(tracker);\n      }\n      return; // Already handled by `hashchange` handler\n    }\n\n    const fromEntry = tracker.it;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const { uid, data, id: pageId } = extractNavData(state);\n    let toEntry: PageEntry;\n\n    const existingEntry = uid === this._uid && pageId != null ? this._entries.get(pageId) : undefined;\n\n    if (existingEntry) {\n      toEntry = existingEntry;\n    } else {\n      // Returning to page existed in previous app version\n      toEntry = this.newEntry({\n        url: new URL(this._location.href),\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        data,\n        title: this._document.title,\n      });\n      fromEntry.transfer(toEntry, 'return');\n      this._entries.set(toEntry.id, toEntry);\n      this._history.replaceState(this._historyState(toEntry), '');\n    }\n\n    toEntry.schedule(() => {\n      try {\n        fromEntry.leave();\n      } finally {\n        toEntry.enter('return');\n      }\n    });\n\n    tracker.it = toEntry;\n\n    return toEntry;\n  }\n\n  public hashChange(tracker: ValueTracker<PageEntry>): PageEntry | void {\n    if (this._history.state == null) {\n      // Not a return\n      return this._changeHash(tracker);\n    }\n    // Otherwise, a `popstate` event is also triggered,\n    // and its handler would do the job (or already did).\n  }\n\n  public update(tracker: ValueTracker<PageEntry>, url: URL): PageEntry {\n\n    const oldEntry = tracker.it;\n    const newEntry = new PageEntry(this._context, ++this._lastId, { ...oldEntry.page, url }, oldEntry);\n\n    this._entries.set(newEntry.id, newEntry);\n    this._history.replaceState(this._historyState(newEntry), '', url.href);\n    this._entries.delete(oldEntry.id);\n\n    return tracker.it = newEntry;\n  }\n\n  private _changeHash(tracker: ValueTracker<PageEntry>): PageEntry {\n\n    const fromEntry = tracker.it;\n    const toEntry = this.newEntry({\n      url: new URL(this._location.href),\n      data: null,\n      title: this._document.title,\n    });\n\n    try {\n      fromEntry.transfer(toEntry, 'enter');\n    } finally {\n      this._history.replaceState(this._historyState(toEntry), '');\n      this._enter('enter', toEntry, tracker);\n    }\n\n    return toEntry;\n  }\n\n  private _forget(entry: PageEntry): void {\n    this._entries.delete(entry.id);\n    entry.forget();\n  }\n\n  private _historyState({ id, page: { data } }: PageEntry): NavDataEnvelope {\n    return {\n      [NAV_DATA_KEY]: {\n        uid: this._uid,\n        id,\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        data,\n      },\n    };\n  }\n\n}\n\nconst enum PageStatus {\n  New,\n  Visited,\n  Current,\n}\n\n/**\n * @internal\n */\nexport class PageEntry {\n\n  next?: PageEntry;\n  prev?: PageEntry;\n  private _status: PageStatus = PageStatus.New;\n  readonly page: Page;\n  private readonly _params: Map<PageParam<any, any>, PageParam.Handle<any, any>>;\n  private _update: () => void = noop;\n\n  constructor(\n      private readonly _bsContext: BootstrapContext,\n      readonly id: number,\n      target: Navigation.URLTarget,\n      proto?: PageEntry,\n  ) {\n    this._params = proto ? proto._params : new Map<PageParam<any, any>, PageParam.Handle<any, any>>();\n\n    const entry = this;\n\n    this.page = {\n      get url() {\n        return target.url;\n      },\n      get title() {\n        return target.title;\n      },\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      get data(): any {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return target.data;\n      },\n      get visited() {\n        return !!entry._status;\n      },\n      get current() {\n        return entry._status === PageStatus.Current;\n      },\n      get<T>(ref: PageParam.Ref<T, unknown>): T | undefined {\n        return entry.get(ref);\n      },\n      put(ref, input) {\n        entry.put(ref, input);\n      },\n    };\n  }\n\n  get<T>(ref: PageParam.Ref<T, unknown>): T | undefined {\n\n    const param = ref[PageParam__symbol];\n    const handle: PageParam.Handle<T, unknown> | undefined = this._params.get(param);\n\n    if (handle) {\n      return handle.get();\n    }\n\n    const newHandle = param.byDefault(this.page, this._newContext());\n\n    return newHandle && this._init(param, newHandle);\n  }\n\n  put<T, TInput>(ref: PageParam.Ref<T, TInput>, input: TInput): T {\n\n    const param = ref[PageParam__symbol];\n    const handle: PageParam.Handle<T, TInput> | undefined = this._params.get(param);\n\n    if (handle) {\n      handle.put(input);\n      return handle.get();\n    }\n\n    return this._init(param, param.create(this.page, input, this._newContext()));\n  }\n\n  private _newContext(): PageParamContext {\n\n    const registry = new ContextRegistry<ParamContext>(this._bsContext);\n\n    class ParamContext extends PageParamContext {\n\n      readonly get: PageParamContext['get'] = registry.newValues().get;\n\n    }\n\n    return new ParamContext();\n  }\n\n  private _init<T, TInput>(param: PageParam<T, TInput>, handle: PageParam.Handle<T, TInput>): T {\n    this._params.set(param, handle);\n\n    if (this.page.current && handle.enter) {\n      handle.enter(this.page, 'init');\n    }\n\n    return handle.get();\n  }\n\n  transfer(to: PageEntry, when: 'pretend' | 'pre-open' | 'pre-replace' | 'enter' | 'return'): void {\n    itsEach(this._params.entries(), ([param, handle]) => {\n      if (handle.transfer) {\n\n        const transferred = handle.transfer(to.page, when);\n\n        if (transferred) {\n          to._params.set(param, transferred);\n        }\n      }\n    });\n  }\n\n  stay(at: Page): void {\n    itsEach(this._params.values(), handle => handle.stay && handle.stay(at));\n  }\n\n  enter(when: 'init' | 'open' | 'replace' | 'enter' | 'return'): void {\n    this._status = PageStatus.Current;\n    itsEach(this._params.values(), handle => handle.enter && handle.enter(this.page, when));\n  }\n\n  leave(): void {\n    this._status = PageStatus.Visited;\n    itsEach(this._params.values(), handle => handle.leave && handle.leave());\n  }\n\n  forget(): void {\n    itsEach(this._params.values(), handle => handle.forget && handle.forget());\n    this._params.clear();\n  }\n\n  schedule(update: () => void): void {\n    this._update = update;\n  }\n\n  apply(): void {\n\n    const update = this._update;\n\n    this._update = noop;\n    update();\n  }\n\n}\n","import { Navigation } from './navigation';\nimport { Page } from './page';\n\n/**\n * Navigation event.\n */\nexport type NavigationEvent = LeavePageEvent | EnterPageEvent | StayOnPageEvent;\n\n/**\n * Navigation event type.\n */\nexport const enum NavigationEventType {\n\n  /**\n   * {@link EnterPageEvent Enter page event} type.\n   */\n  EnterPage = 'wesib:enterPage',\n\n  /**\n   * {@link LeavePageEvent Leave page event} type.\n   */\n  LeavePage = 'wesib:leavePage',\n\n  /**\n   * {@link StayOnPageEvent Stay on page event} type.\n   */\n  StayOnPage = 'wesib:stayOnPage',\n\n}\n\n/**\n * An event fired when navigation target reached by entering destination page.\n *\n * @event EnterPageEvent#wesib:enterPage\n */\nexport class EnterPageEvent extends Event {\n\n  /**\n   * When navigation event occurred.\n   *\n   * Can be one of:\n   * - `open` when opening a new page,\n   * - `replace` when replacing navigation history entry,\n   * - `enter` when entering new page by user action (e.g. hashchange event),\n   * - `return` when navigated to previously visited entry in navigation history.\n   */\n  readonly when: 'open' | 'replace' | 'enter' | 'return';\n\n  /**\n   * Entered page.\n   */\n  readonly to: Page;\n\n  /**\n   * Constructs enter page event.\n   *\n   * @param type - Event type.\n   * @param init - Initialization options.\n   */\n  constructor(type: string, init: EnterPageEventInit) {\n    super(type, { ...init, cancelable: false });\n    this.when = init.when;\n    this.to = init.to;\n  }\n\n}\n\n/**\n * {@link EnterPageEvent Enter page event} initialization options.\n */\nexport interface EnterPageEventInit extends Omit<EventInit, 'cancelable'> {\n\n  /**\n   * When navigation event occurred.\n   *\n   * Can be one of:\n   * - `open` when opening a new page,\n   * - `replace` when replacing navigation history entry,\n   * - `enter` when entering new page by user action (e.g. hashchange event),\n   * - `return` when navigated to previously visited entry in navigation history.\n   */\n  readonly when: 'open' | 'replace' | 'enter' | 'return';\n\n  /**\n   * Entered page.\n   */\n  readonly to: Page;\n\n}\n\n/**\n * An event fired right before leaving the page in order to navigate to another one.\n *\n * This event can be cancelled in order to prevent actual navigation or history update. The navigation is also\n * cancelled when another navigation initiated by one of the handlers of this event.\n *\n * @event LeavePageEvent#wesib:leavePage\n */\nexport class LeavePageEvent extends Event {\n\n  /**\n   * When navigation event occurred. Either `pre-open` when leaving a page to open a new one, or `pre-replace` when\n   * leaving a page to replace it with another history entry.\n   */\n  readonly when: 'pre-open' | 'pre-replace';\n\n  /**\n   * The page to leave.\n   */\n  readonly from: Page;\n\n  /**\n   * Navigation target page.\n   */\n  readonly to: Page;\n\n  /**\n   * Constructs leave page event.\n   *\n   * @param type - Event type.\n   * @param init - Initialization options.\n   */\n  constructor(type: string, init: LeavePageEventInit) {\n    super(type, { ...init, cancelable: true });\n    this.when = init.when;\n    this.from = init.from;\n    this.to = init.to;\n  }\n\n}\n\n/**\n * {@link LeavePageEvent Leave page event} initialization options.\n */\nexport interface LeavePageEventInit extends Omit<EventInit, 'cancelable'> {\n\n  /**\n   * When navigation event occurred. Either `pre-open` when leaving a page to open a new one, or `pre-replace` when\n   * leaving a page to replace it with another history entry.\n   */\n  readonly when: 'pre-open' | 'pre-replace';\n\n  /**\n   * The page to leave.\n   */\n  readonly from: Page;\n\n  /**\n   * Navigation target page.\n   */\n  readonly to: Page;\n\n}\n\n/**\n * An event fired when navigation cancelled or failed.\n *\n * @event StayOnPageEvent#wesib:stayOnPage\n */\nexport class StayOnPageEvent extends Event {\n\n  /**\n   * When navigation event occurred. Always `stay`.\n   */\n  get when(): 'stay' {\n    return 'stay';\n  }\n\n  /**\n   * The page to stay at.\n   */\n  readonly from: Page;\n\n  /**\n   * Navigation target.\n   */\n  readonly to: Navigation.URLTarget;\n\n  /**\n   * A reason of navigation failure. This is set when navigation failed due to some error.\n   */\n  readonly reason?: any;\n\n  /**\n   * Constructs stay on page event.\n   *\n   * @param type - Event type.\n   * @param init - Initialization options.\n   */\n  constructor(type: string, init: StayOnPageEventInit) {\n    super(type, { ...init, cancelable: true });\n    this.from = init.from;\n    this.to = init.to;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    this.reason = init.reason;\n  }\n\n}\n\n/**\n * {@link StayOnPageEvent Stay on page event} initialization options.\n */\nexport interface StayOnPageEventInit extends Omit<EventInit, 'cancelable'> {\n\n  /**\n   * The page to stay at.\n   */\n  readonly from: Page;\n\n  /**\n   * Navigation target.\n   */\n  readonly to: Navigation.URLTarget;\n\n  /**\n   * A reason of navigation failure. This is set when navigation failed due to some error.\n   */\n  readonly reason?: any;\n\n}\n","import { DomEventDispatcher, OnDomEvent } from '@frontmeans/dom-events';\nimport { ContextKey, ContextKey__symbol, SingleContextKey } from '@proc7ts/context-values';\nimport {\n  AfterEvent,\n  AfterEvent__symbol,\n  EventKeeper,\n  EventSender,\n  mapAfter,\n  onAny,\n  OnEvent,\n  OnEvent__symbol,\n  onSupplied,\n  trackValue,\n} from '@proc7ts/fun-events';\nimport { mergeFunctions, noop } from '@proc7ts/primitives';\nimport { BootstrapContext, bootstrapDefault, BootstrapWindow } from '@wesib/wesib';\nimport { NavHistory, PageEntry } from './nav-history.impl';\nimport { NavigationAgent } from './navigation-agent';\nimport {\n  EnterPageEvent,\n  LeavePageEvent,\n  NavigationEvent,\n  NavigationEventType,\n  StayOnPageEvent,\n} from './navigation.event';\nimport { Page } from './page';\nimport { PageParam } from './page-param';\n\n/**\n * @internal\n */\nconst Navigation__key = (/*#__PURE__*/ new SingleContextKey<Navigation>(\n    'navigation',\n    {\n      byDefault: bootstrapDefault(createNavigation),\n    },\n));\n\n/**\n * Browser navigation service.\n *\n * Expected to be used as a [History] and [Location] APIs replacement.\n *\n * Fires additional navigation events the browser does not support natively.\n *\n * Implements an `EventSender` interface by sending {@link NavigationEvent navigation events} to registered receivers.\n *\n * Implements an `EventKeeper` interface by sending current {@link Page page} to registered receivers.\n *\n * Available as bootstrap context value.\n *\n * [History]: https://developer.mozilla.org/en-US/docs/Web/API/History\n * [Location]: https://developer.mozilla.org/en-US/docs/Web/API/Location\n */\nexport abstract class Navigation implements EventSender<[NavigationEvent]>, EventKeeper<[Page]> {\n\n  static get [ContextKey__symbol](): ContextKey<Navigation> {\n    return Navigation__key;\n  }\n\n  /**\n   * Current page.\n   */\n  abstract readonly page: Page;\n\n  /**\n   * The number of element in navigation history.\n   */\n  abstract readonly length: number;\n\n  /**\n   * An `OnDomEvent` sender of {@link EnterPageEvent enter page events}.\n   */\n  abstract readonly onEnter: OnDomEvent<EnterPageEvent>;\n\n  /**\n   * An `OnDomEvent` sender of {@link LeavePageEvent leave page events}.\n   *\n   * The registered listener may cancel navigation by calling `preventDefault()` method of received event.\n   */\n  abstract readonly onLeave: OnDomEvent<LeavePageEvent>;\n\n  /**\n   * An `OnDomEvent` {@link StayOnPageEvent stay on page events}.\n   *\n   * The registered listener is informed when navigation has been cancelled by one of leave page event receivers,\n   * navigation failed due to e.g. invalid URL, or when another navigation request initiated before the page left.\n   *\n   * @returns `OnDomEvent` sender of {@link StayOnPageEvent stay on page events}.\n   */\n  abstract readonly onStay: OnDomEvent<StayOnPageEvent>;\n\n  /**\n   * An `OnEvent` sender of {@link NavigationEvent navigation events}.\n   *\n   * The `[OnEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly on: OnEvent<[NavigationEvent]>;\n\n  [OnEvent__symbol](): OnEvent<[NavigationEvent]> {\n    return this.on;\n  }\n\n  /**\n   * An `AfterEvent` keeper of {@link page current page}.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly read: AfterEvent<[Page]>;\n\n  [AfterEvent__symbol](): AfterEvent<[Page]> {\n    return this.read;\n  }\n\n  /**\n   * Goes to the previous page in navigation history.\n   *\n   * Calling this method is the same as calling `go(-1)`.\n   */\n  back(): void {\n    this.go(-1);\n  }\n\n  /**\n   * Goes to the next page in navigation history.\n   *\n   * Calling this method is the same as calling `go(1)`.\n   */\n  forward(): void {\n    this.go(1);\n  }\n\n  /**\n   * Loads a page from navigation history, identified by its relative location to the current page.\n   *\n   * For example `-1` navigates to previous page, while `1` navigates to the next one. If you specify an out-of-bounds\n   * value (for instance, specifying -1 when there are no previously-visited pages in navigation history), this method\n   * silently has no effect.\n   *\n   * @param delta - Relative location in navigation history to navigate to. The absent value or value of `0` reloads\n   * the current page.\n   */\n  abstract go(delta?: number): void;\n\n  /**\n   * Reloads current page.\n   *\n   * Calling this method is the same as calling `go()`.\n   */\n  reload(): void {\n    this.go();\n  }\n\n  /**\n   * Opens a page by navigating to the given `target`.\n   *\n   * Appends an entry to navigation history.\n   *\n   * @param target - Either navigation target or URL to navigate to.\n   * @fires PreNavigateEvent#wesib:preNavigate  On window object prior to actually navigate.\n   * Then navigates to the `target`, unless the event cancelled.\n   * @fires NavigateEvent@wesib:navigate  On window object when navigation succeed.\n   *\n   * @returns A promise resolved to navigated page, or to `null` otherwise.\n   */\n  abstract open(target: Navigation.Target | string | URL): Promise<Page | null>;\n\n  /**\n   * Replaces current navigation history entry with the given `target`.\n   *\n   * @param target - Either navigation target or URL to replace current history entry with.\n   * @fires PreNavigateEvent#wesib:preNavigate  On window object prior to actually update the history.\n   * Then navigates to the `target`, unless the event cancelled.\n   * @fires NavigateEvent@wesib:navigate  On window object when history updated.\n   *\n   * @returns A promise resolved to navigated page, or to `null` otherwise.\n   */\n  abstract replace(target: Navigation.Target | string | URL): Promise<Page | null>;\n\n  /**\n   * Replaces current page URL with the given one.\n   *\n   * Does not alter current page state, and does not trigger any events.\n   *\n   * @param url - An URL to replace the the current one with.\n   *\n   * @returns Current page with updated URL.\n   */\n  abstract update(url: string | URL): Page;\n\n  /**\n   * Creates parameterized navigation instance and assigns a page parameter to apply to target page.\n   *\n   * @typeParam T - Parameter value type.\n   * @typeParam TInput - Parameter input type.\n   * @param ref - A reference to page navigation parameter to apply.\n   * @param input - Parameter input to use when constructing its value.\n   *\n   * @returns New parameterized navigation instance.\n   */\n  abstract with<T, TInput>(ref: PageParam.Ref<T, TInput>, input: TInput): Navigation.Parameterized;\n\n}\n\nexport namespace Navigation {\n\n  /**\n   * Parameterized navigation.\n   *\n   * Allows to assign target page parameters prior to navigating to it.\n   */\n  export interface Parameterized {\n\n    /**\n     * Applies parameter to navigation target page.\n     *\n     * @typeParam T - Parameter value type.\n     * @typeParam TInput - Parameter input type.\n     * @param ref - A reference to page navigation parameter to apply.\n     * @param input - Parameter input to use when constructing its value.\n     *\n     * @returns New parameterized navigation instance.\n     */\n    with<T, TInput>(ref: PageParam.Ref<T, TInput>, input: TInput): Parameterized;\n\n    /**\n     * Opens a page by navigating to the given `target` with provided page parameters.\n     *\n     * Appends an entry to navigation history.\n     *\n     * @param target - Either navigation target or URL to navigate to. Navigates to current page URL when omitted.\n     * @fires PreNavigateEvent#wesib:preNavigate  On window object prior to actually navigate.\n     * Then navigates to the `target`, unless the event cancelled.\n     * @fires NavigateEvent@wesib:navigate  On window object when navigation succeed.\n     *\n     * @returns A promise resolved to navigated page, or to `null` otherwise.\n     */\n    open(target?: Navigation.Target | string | URL): Promise<Page | null>;\n\n    /**\n     * Replaces the most recent entry in navigation history with the given `target` and provided page parameters.\n     *\n     * @param target - Either navigation target or URL to replace the latest history entry with. Navigates to current\n     * page URL when omitted.\n     * @fires PreNavigateEvent#wesib:preNavigate  On window object prior to actually update the history.\n     * Then navigates to the `target`, unless the event cancelled.\n     * @fires NavigateEvent@wesib:navigate  On window object when history updated.\n     *\n     * @returns A promise resolved to navigated page, or to `null` otherwise.\n     */\n    replace(target?: Navigation.Target | string | URL): Promise<Page | null>;\n\n    /**\n     * Pretends navigation.\n     *\n     * Prepares navigation and parameters, but does not actually navigate. Instead it calls the provided callback\n     * function.\n     *\n     * This is useful e.g. to build target URL or evaluate target page parameter.\n     *\n     * @param target - Either navigation target or URL to pretend navigation to.\n     * @param callback - A callback function receiving two pages as parameters: the page to leave, and the page to open.\n     * The latter one is valid only inside callback, as its parameters will be cleaned up right after callback returns.\n     * The value returned from callback is then returned from this method call. It may be used to collect some data\n     * from target page.\n     *\n     * @returns Either the value returned by callback, or `undefined` when navigation failed.\n     */\n    pretend<T>(\n        target: Navigation.Target | string | URL,\n        callback: (this: void, from: Page, to: Page) => T,\n    ): T | undefined;\n\n    /**\n     * Pretends navigation to the same page.\n     *\n     * Prepares navigation and parameters, but does not actually navigate. Instead it calls the provided callback\n     * function.\n     *\n     * This is useful e.g. to build target URL or evaluate target page parameter.\n     *\n     * @param callback - A callback function receiving two pages as parameters: the page to leave, and the page to open.\n     * The latter one is valid only inside callback, as its parameters will be cleaned up right after callback returns.\n     * The value returned from callback is then returned from this method call. It may be used to collect some data\n     * from target page.\n     *\n     * @returns Either the value returned by callback, or `undefined` when navigation failed.\n     */\n    pretend<T>(\n        callback: (this: void, from: Page, to: Page) => T,\n    ): T | undefined;\n\n    /**\n     * Pretends navigation and builds navigation target.\n     *\n     * Prepares navigation and parameters, but does not actually navigate. Instead it calls the provided callback\n     * function.\n     *\n     * This is useful e.g. to build target URL or evaluate target page parameter.\n     *\n     * @param target - Either navigation target or URL to pretend navigation to. Prepends navigation to current page\n     * when omitted.\n     *\n     * @returns Either Navigation target with URL value, or `undefined` when navigation failed.\n     */\n    pretend(\n        target?: Navigation.Target | string | URL,\n    ): URLTarget | undefined;\n\n  }\n\n  /**\n   * Navigation target.\n   *\n   * This is passed to {@link Navigation.open} and {@link Navigation.replace} methods.\n   */\n  export interface Target {\n\n    /**\n     * An URL to update the browser location string to.\n     */\n    readonly url?: string | URL;\n\n    /**\n     * Opaque data to apply to session history. I.e. either push or replace.\n     */\n    readonly data?: any;\n\n    /**\n     * New window title.\n     */\n    readonly title?: string;\n\n  }\n\n  /**\n   * Navigation target with URL value.\n   */\n  export interface URLTarget extends Target {\n\n    readonly url: URL;\n\n  }\n\n}\n\nfunction createNavigation(context: BootstrapContext): Navigation {\n\n  const window = context.get(BootstrapWindow);\n  const { document, history } = window;\n  const dispatcher = new DomEventDispatcher(window);\n  const navHistory = context.get(NavHistory);\n  const agent = context.get(NavigationAgent);\n  const nav = trackValue<PageEntry>(navHistory.init());\n\n  nav.read(nextEntry => nextEntry.apply()); // The very first page entry receiver applies scheduled updates to page\n\n  let next: Promise<any> = Promise.resolve();\n\n  dispatcher.on<PopStateEvent>('popstate')(popState => {\n\n    const entry = navHistory.popState(popState, nav);\n\n    if (entry) {\n      dispatcher.dispatch(new EnterPageEvent(\n          NavigationEventType.EnterPage,\n          {\n            when: popState.state != null ? 'return' : 'enter',\n            to: entry.page,\n          },\n      ));\n    }\n  });\n\n  dispatcher.on('hashchange')(() => {\n\n    const entry = navHistory.hashChange(nav);\n\n    if (entry) {\n      dispatcher.dispatch(new EnterPageEvent(\n          NavigationEventType.EnterPage,\n          {\n            when: 'enter',\n            to: entry.page,\n          },\n      ));\n    }\n  });\n\n  type NavTarget = { -readonly [K in keyof Navigation.URLTarget]: Navigation.URLTarget[K] };\n\n  class Navigation$ extends Navigation {\n\n    readonly onEnter: OnDomEvent<EnterPageEvent>;\n    readonly onLeave: OnDomEvent<LeavePageEvent>;\n    readonly onStay: OnDomEvent<StayOnPageEvent>;\n    readonly on: OnEvent<[NavigationEvent]>;\n    readonly read: AfterEvent<[Page]>;\n\n    constructor() {\n      super();\n      this.onEnter = dispatcher.on<EnterPageEvent>(NavigationEventType.EnterPage);\n      this.onLeave = dispatcher.on<LeavePageEvent>(NavigationEventType.LeavePage);\n      this.onStay = dispatcher.on<StayOnPageEvent>(NavigationEventType.StayOnPage);\n      this.on = onAny<[NavigationEvent]>(\n          onSupplied(this.onEnter),\n          onSupplied(this.onLeave),\n          onSupplied(this.onStay),\n      );\n      this.read = nav.read.do(\n          mapAfter(({ page }) => page),\n      );\n    }\n\n    get page(): Page {\n      return nav.it.page;\n    }\n\n    get length(): number {\n      return history.length;\n    }\n\n    go(delta?: number): void {\n      history.go(delta);\n    }\n\n    open(target: Navigation.Target | string | URL): Promise<Page | null> {\n      return navigate('pre-open', 'open', target);\n    }\n\n    replace(target: Navigation.Target | string | URL): Promise<Page | null> {\n      return navigate('pre-replace', 'replace', target);\n    }\n\n    update(url: string | URL): Page {\n      return navHistory.update(nav, toURL(url)).page;\n    }\n\n    with<T, TInput>(ref: PageParam.Ref<T, TInput>, input: TInput): Navigation.Parameterized {\n      return withParam(page => page.put(ref, input));\n    }\n\n  }\n\n  return new Navigation$();\n\n  function withParam(applyParams: (page: Page) => void): Navigation.Parameterized {\n    return {\n      with<T, TInput>(ref: PageParam.Ref<T, TInput>, input: TInput): Navigation.Parameterized {\n        return withParam(mergeFunctions(applyParams, page => page.put(ref, input)));\n      },\n      open(target?: Navigation.Target | string | URL) {\n        return navigate('pre-open', 'open', target, applyParams);\n      },\n      replace(target?: Navigation.Target | string | URL) {\n        return navigate('pre-replace', 'replace', target, applyParams);\n      },\n      pretend<T>(\n          targetOrCallback?: Navigation.Target | string | URL | ((this: void, from: Page, to: Page) => T),\n          callback: (this: void, from: Page, to: Page) => T = (_from, to) => to as unknown as T,\n      ): T | undefined {\n\n        let target: Navigation.Target | string | URL | undefined;\n\n        if (typeof targetOrCallback === 'function') {\n          callback = targetOrCallback;\n          target = undefined;\n        } else {\n          target = targetOrCallback;\n        }\n\n        const navTarget = navTargetOf(target);\n        const fromEntry = nav.it;\n        const toEntry = newEntry('pretend', fromEntry, navTarget, applyParams);\n\n        try {\n          return applyAgent('pretend', fromEntry, navTarget, toEntry)\n              ? callback(fromEntry.page, toEntry.page)\n              : undefined;\n        } finally {\n          toEntry.stay(nav.it.page);\n        }\n      },\n    };\n  }\n\n  function toURL(url: string | URL | undefined): URL {\n    if (typeof url === 'string') {\n      return new URL(url, document.baseURI);\n    }\n    return url || nav.it.page.url;\n  }\n\n  function navTargetOf(target?: Navigation.Target | string | URL): NavTarget {\n    if (target == null || typeof target === 'string' || target instanceof URL) {\n      return { url: toURL(target) };\n    }\n    if (target.url instanceof URL) {\n      return target as Navigation.URLTarget;\n    }\n    return { ...target, url: toURL(target.url) };\n  }\n\n  function navigate(\n      whenLeave: 'pre-open' | 'pre-replace',\n      when: 'open' | 'replace',\n      target?: Navigation.Target | string | URL,\n      applyParams: (page: Page) => void = noop,\n  ): Promise<Page | null> {\n\n    const navTarget = navTargetOf(target);\n    const promise = next = next.then(doNavigate, doNavigate);\n\n    return promise;\n\n    function doNavigate(): Page | null {\n\n      let toEntry: PageEntry | undefined = undefined;\n\n      try {\n\n        const prepared = prepare();\n\n        if (!prepared) {\n          return prepared; // Navigation cancelled\n        }\n\n        toEntry = prepared;\n        navHistory[when](toEntry, nav);\n        dispatcher.dispatch(new EnterPageEvent(\n            NavigationEventType.EnterPage,\n            {\n              when,\n              to: toEntry.page,\n            },\n        ));\n\n        return toEntry.page;\n      } catch (e) {\n        stay(toEntry, e);\n        throw e;\n      }\n    }\n\n    function prepare(): PageEntry | null {\n      if (next !== promise) {\n        return stay();\n      }\n\n      const fromEntry = nav.it;\n      const toEntry = newEntry(whenLeave, fromEntry, navTarget, applyParams);\n      const leavePage = new LeavePageEvent(\n          NavigationEventType.LeavePage,\n          {\n            when: whenLeave,\n            from: fromEntry.page,\n            to: toEntry.page,\n          },\n      );\n\n      if (!dispatcher.dispatch(leavePage)\n          || next !== promise\n          || !applyAgent(whenLeave, fromEntry, navTarget, toEntry)) {\n        return stay(toEntry);\n      }\n\n      return toEntry;\n    }\n\n    function stay(toEntry?: PageEntry, reason?: any): null {\n      if (toEntry) {\n        toEntry.stay(nav.it.page);\n      }\n\n      dispatcher.dispatch(new StayOnPageEvent(\n          NavigationEventType.StayOnPage,\n          {\n            from: nav.it.page,\n            to: navTarget,\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            reason,\n          },\n      ));\n\n      return null;\n    }\n\n  }\n\n  function newEntry(\n      whenLeave: 'pretend' | 'pre-open' | 'pre-replace',\n      fromEntry: PageEntry,\n      navTarget: NavTarget,\n      applyParams: (page: Page) => void,\n  ): PageEntry {\n\n    const toEntry = navHistory.newEntry(navTarget);\n\n    try {\n      fromEntry.transfer(toEntry, whenLeave);\n      applyParams(toEntry.page);\n    } catch (e) {\n      toEntry.stay(nav.it.page);\n      throw e;\n    }\n\n    return toEntry;\n  }\n\n  function applyAgent(\n      whenLeave: 'pretend' | 'pre-open' | 'pre-replace',\n      fromEntry: PageEntry,\n      navTarget: NavTarget,\n      toEntry: PageEntry,\n  ): boolean {\n\n    let navigated = false;\n\n    agent(\n        ({ url, data, title }) => {\n          navigated = true;\n          navTarget.url = url;\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n          navTarget.data = data;\n          navTarget.title = title;\n        },\n        whenLeave,\n        fromEntry.page,\n        toEntry.page,\n    );\n\n    return navigated;\n  }\n\n}\n","import { DomEventDispatcher } from '@frontmeans/dom-events';\nimport { deriveDrekContext, drekContextOf, drekCssClassesOf } from '@frontmeans/drek';\nimport { css__naming, QualifiedName } from '@frontmeans/namespace-aliaser';\nimport { EventReceiver } from '@proc7ts/fun-events';\nimport { setOfElements, valueByRecipe } from '@proc7ts/primitives';\nimport { Supply } from '@proc7ts/supply';\nimport { DefaultNamespaceAliaser, ElementRenderScheduler, RenderDef, Wesib__NS } from '@wesib/wesib';\nimport { Navigation } from '../navigation';\nimport { NavLink } from './nav-link';\n\nexport namespace NavElement {\n\n  /**\n   * Navigation element construction options.\n   *\n   * @typeParam TElement - Navigation element type.\n   */\n  export interface Options<TElement extends Element> {\n\n    /**\n     * Type or types of events to handle.\n     *\n     * `click` by default.\n     */\n    readonly event?: string | readonly string[];\n\n    /**\n     * Qualified name of CSS class to mark the active anchor element with.\n     *\n     * The `active` class in Wesib namespace is used by default.\n     */\n    readonly active?: QualifiedName;\n\n    /**\n     * Rendering definition options to pass to nav links render scheduler.\n     */\n    readonly render?: RenderDef.Options;\n\n    /**\n     * Extracts an {@link NavLink.href URI} the navigation link refers to.\n     *\n     * @param element - Navigation element instance.\n     *\n     * @returns Navigation URI.\n     */\n    href(element: TElement): string;\n\n  }\n\n}\n\nconst NavElement$activeClass: QualifiedName = ['active', Wesib__NS];\n\n/**\n * Creates navigation link for the given element.\n *\n * @typeParam TElement - Navigation element type.\n * @param element - Either target element, or a function returning one by the given navigation link owner.\n * @param options - Custom navigation element options.\n *\n * @returns Navigation link provider.\n */\nexport function navElement<TElement extends Element>(\n    element:\n        | TElement\n        | ((this: void, owner: NavLink.Owner) => TElement),\n    options: NavElement.Options<TElement>,\n): (this: void, owner: NavLink.Owner) => NavLink;\n\n/**\n * Optionally creates navigation link for the given element.\n *\n * @typeParam TElement - Navigation element type.\n * @param element - Either target element, or a function returning one by the given navigation link owner,\n * or nothing.\n * @param options - Custom navigation element options.\n *\n * @returns Navigation link provider.\n */\nexport function navElement<TElement extends Element>(\n    element:\n        | TElement\n        | ((this: void, owner: NavLink.Owner) => TElement | null | undefined)\n        | null\n        | undefined,\n    options: NavElement.Options<TElement>,\n): NavLink.Provider;\n\nexport function navElement<TElement extends Element>(\n    element:\n        | TElement\n        | ((this: void, owner: NavLink.Owner) => TElement | null | undefined)\n        | null\n        | undefined,\n    options: NavElement.Options<TElement>,\n): NavLink.Provider {\n\n  const getHref = options.href.bind(options);\n  const events = setOfElements(options.event || 'click');\n  const { active = NavElement$activeClass } = options;\n  let activeClass: string;\n\n  return owner => {\n\n    const anchor = valueByRecipe(element, owner);\n\n    if (!anchor) {\n      return;\n    }\n\n    const { context, supply: ownerSupply = context.supply } = owner;\n\n    activeClass = css__naming.name(active, context.get(DefaultNamespaceAliaser));\n\n    const navigation = context.get(Navigation);\n    const scheduler = context.get(ElementRenderScheduler);\n    const schedule = scheduler({ node: anchor });\n    const supply = new Supply().needs(ownerSupply);\n    const handleClick: EventReceiver<[Event]> = {\n      supply,\n      receive(_ctx, event) {\n\n        const href = getHref(anchor);\n        const pageURL = navigation.page.url;\n        const url = new URL(href, anchor.ownerDocument.baseURI);\n\n        if (url.origin !== pageURL.origin) {\n          return; // External link\n        }\n\n        event.preventDefault();\n        if (pageURL.href !== url.href) {\n          navigation.open(href).catch(console.error);\n        }\n      },\n    };\n    const eventDispatcher = new DomEventDispatcher(anchor);\n\n    supply.cuts(eventDispatcher);\n    for (const event of events) {\n      eventDispatcher.on(event)(handleClick);\n    }\n\n    const css = drekCssClassesOf(anchor)\n        .renderIn(\n            deriveDrekContext(\n                drekContextOf(anchor),\n                {\n                  scheduler: _opts => schedule,\n                },\n            ),\n        );\n\n    return ({\n\n      get href(): string {\n        return getHref(anchor!);\n      },\n\n      supply,\n\n      activate() {\n        return css.add(activeClass);\n      },\n\n    });\n  };\n}\n\n","import { NamespaceAliaser } from '@frontmeans/namespace-aliaser';\nimport { RenderScheduler } from '@frontmeans/render-scheduler';\nimport { AfterEvent } from '@proc7ts/fun-events';\nimport { DrekContentStatus } from '../content-status';\nimport { DrekContext } from '../context';\nimport { DrekContext$State } from '../context.impl';\n\n/**\n * Creates a rendering context based on another one.\n *\n * @typeParam TStatus - A type of the tuple containing a context content status as its first element.\n * @param base - Base rendering context.\n * @param update - Context update.\n *\n * @returns Updated rendering context, or the `base` one if nothing to update.\n */\nexport function deriveDrekContext<TStatus extends [DrekContentStatus] = [DrekContentStatus]>(\n    base: DrekContext<TStatus>,\n    update: DrekContext.Update = {},\n): DrekContext<TStatus> {\n\n  const {\n    nsAlias: initialNsAlias = base.nsAlias,\n    scheduler: initialScheduler = base.scheduler,\n  } = update;\n\n  if (initialNsAlias === base.nsAlias && initialScheduler === base.scheduler) {\n    return base;\n  }\n\n  const state = new DrekContext$State({\n    nsAlias: initialNsAlias,\n    scheduler: initialScheduler,\n  });\n  let lift = (derived: DrekContext): DrekContext => {\n\n    const lifted = base.lift();\n\n    if (lifted === base) {\n      return derived;\n    }\n\n    state.set(lifted);\n    lift = _derived => lifted;\n\n    return lifted;\n  };\n\n  class DrekContext$Derived extends DrekContext<TStatus> {\n\n    get window(): Window {\n      return base.window;\n    }\n\n    get document(): Document {\n      return base.document;\n    }\n\n    get nsAlias(): NamespaceAliaser {\n      return state.nsAlias;\n    }\n\n    get scheduler(): RenderScheduler {\n      return state.scheduler;\n    }\n\n    get readStatus(): AfterEvent<TStatus> {\n      return base.readStatus;\n    }\n\n    lift(): DrekContext {\n      return lift(this);\n    }\n\n  }\n\n  return new DrekContext$Derived();\n}\n","import { Contextual, Contextual__symbol } from '@proc7ts/context-values';\nimport { afterAll, AfterEvent, afterThe, isAfterEvent, trackValue, translateAfter_ } from '@proc7ts/fun-events';\nimport { noop, valueByRecipe } from '@proc7ts/primitives';\nimport { Supply, SupplyPeer } from '@proc7ts/supply';\nimport { BootstrapWindow, ComponentContext } from '@wesib/wesib';\nimport { getHashURL } from '../hash-url';\nimport { Navigation } from '../navigation';\nimport { Page } from '../page';\nimport { NavLink } from './nav-link';\n\nconst NavMenu$Links__symbol = (/*#__PURE__*/ Symbol('NavMenu.links'));\n\n/**\n * Navigation menu.\n *\n * Serves as an {@link NavLink.Owner owner} of navigation links. Activates the links matching {@link Navigation.page\n * current page}.\n */\nexport class NavMenu implements Contextual<NavMenu, ComponentContext>, SupplyPeer {\n\n  /**\n   * @internal\n   */\n  private readonly [NavMenu$Links__symbol]: NavMenu$Links;\n\n  /**\n   * Navigation menu supply.\n   */\n  get supply(): Supply {\n    return this[NavMenu$Links__symbol].supply;\n  }\n\n  /**\n   * Constructs navigation menu.\n   *\n   * @param links - Navigation links of this menu. Either an iterable of navigation links or their providers,\n   * an `AfterEvent` keeper of the same, or a function accepting component context and this menu as parameters,\n   * and returning one of the above.\n   * @param options - Additional options.\n   */\n  constructor(\n      links:\n          | Iterable<NavLink | NavLink.Provider>\n          | AfterEvent<(NavLink | NavLink.Provider)[]>\n          | ((this: void, context: ComponentContext, menu: NavMenu) =>\n          | Iterable<NavLink | NavLink.Provider>\n          | AfterEvent<(NavLink | NavLink.Provider)[]>),\n      options?: NavMenu.Options,\n  ) {\n    this[NavMenu$Links__symbol] = new NavMenu$Links(this, links, options);\n  }\n\n  /**\n   * Binds this menu to the given context.\n   *\n   * Subsequent calls have no effect.\n   *\n   * @param context - Owning component context.\n   *\n   * @returns `this` instance.\n   */\n  bindTo(context: ComponentContext): this {\n    this[NavMenu$Links__symbol].bindTo(context);\n    return this;\n  }\n\n  /**\n   * Binds this menu to the given context.\n   *\n   * Calls {@link bindTo} method.\n   *\n   * @param context - Owning component context.\n   *\n   * @returns `this` instance.\n   */\n  [Contextual__symbol](context: ComponentContext): this {\n    return this.bindTo(context);\n  }\n\n}\n\nexport namespace NavMenu {\n\n  /**\n   * Navigation menu options.\n   */\n  export interface Options {\n\n    /**\n     * Whether to activate navigation links.\n     *\n     * `true` by default.\n     */\n    readonly activate?: boolean;\n\n    /**\n     * Weighs matching navigation link.\n     *\n     * This method will be called for each navigation link on each current page update.\n     *\n     * By default:\n     * 1. If the link path has neither hash, nor search parameters, then:\n     * 1.1. Checks whether page URL path starts with the link's one.\n     * 1.2. If so, then uses link path length as weight.\n     * 2. If the link path has search parameters, but has no hash, then requires the page path to be the same as link's\n     *    one, and page search parameters include all of the link's ones. The number of link search parameters plus the\n     *    link path length is used as weight.\n     * 3. If the link path has a hash, then requires the page path and search parameters to be the same as link's ones,\n     *    and their hashes are treated as {@link getHashURL URLs}. The weight is calculated by applying steps 1, 2, and\n     *    3 to hash URLs increased by the link path length and the number of search parameters.\n     *\n     * Ignores search parameters with names starting and ending with double underscores. Like `__wesib_app_rev__`.\n     *\n     * @param link - Navigation link to weigh.\n     * @param menu - Owning navigation menu.\n     * @param context - Owning component context.\n     * @param page - Current navigation page.\n     *\n     * @returns Navigation link weight. Non-positive wight means the page URL doesn't match the link at all.\n     */\n    weigh?(\n        {\n          link,\n          menu,\n          context,\n          page,\n        }: {\n          link: NavLink;\n          menu: NavMenu;\n          context: ComponentContext;\n          page: Page;\n        },\n    ): number;\n\n  }\n\n}\n\nclass NavMenu$Links {\n\n  readonly supply: Supply;\n  private readonly _links = trackValue([new Set<NavLink>()]);\n  private readonly _active = new Map<NavLink, Supply>();\n  private readonly _activate: boolean;\n  private readonly _weigh: typeof defaultNavLinkWeight;\n\n  constructor(\n      private readonly _menu: NavMenu,\n      private readonly _navLinks:\n          | Iterable<NavLink | NavLink.Provider>\n          | AfterEvent<(NavLink | NavLink.Provider)[]>\n          | ((this: void, context: ComponentContext, menu: NavMenu) =>\n          | Iterable<NavLink | NavLink.Provider>\n          | AfterEvent<(NavLink | NavLink.Provider)[]>),\n      options: NavMenu.Options = {},\n  ) {\n    this.supply = new Supply().cuts(this._links);\n\n    const { activate = true, weigh } = options;\n\n    this._activate = activate;\n    this._weigh = weigh ? weigh.bind(options) : defaultNavLinkWeight;\n  }\n\n  bindTo(context: ComponentContext): void {\n    this.bindTo = noop;\n    context.whenConnected(context => {\n\n      let afterLinks: AfterEvent<(NavLink | NavLink.Provider)[]>;\n\n      if (isAfterEvent(this._navLinks)) {\n        afterLinks = this._navLinks;\n      } else {\n\n        const linkValues = valueByRecipe(this._navLinks, context, this._menu);\n\n        afterLinks = isAfterEvent(linkValues)\n            ? linkValues\n            : afterThe(linkValues).do(\n                translateAfter_((send, links) => send(...links)),\n            );\n      }\n\n      const owner: NavLink.Owner = {\n        context,\n        supply: this.supply,\n      };\n\n      afterLinks((...links) => {\n        this._replace(owner, links);\n      });\n\n      if (this._activate) {\n\n        const navigation = context.get(Navigation);\n\n        afterAll({\n          page: navigation,\n          links: this._links,\n        })(({\n          page: [page],\n          links: [[links]],\n        }) => {\n          this._updateActive(context, page, links);\n        });\n      }\n    });\n  }\n\n  private _replace(\n      owner: NavLink.Owner,\n      replacement: readonly (NavLink | NavLink.Provider)[],\n  ): void {\n\n    const toAdd = new Set<NavLink>();\n\n    for (const linkOrProvider of replacement) {\n\n      const link = valueByRecipe(linkOrProvider, owner);\n\n      if (link) {\n        toAdd.add(link);\n      }\n    }\n\n    const [links] = this._links.it;\n    const toRemove: NavLink[] = [];\n\n    for (const link of links.keys()) {\n      if (!toAdd.delete(link)) {\n        toRemove.push(link);\n      }\n    }\n\n    if (toAdd.size || toRemove.length) {\n      for (const removed of toRemove) {\n        links.delete(removed);\n        this._deactivate(removed);\n        removed.supply?.off();\n      }\n      for (const added of toAdd) {\n\n        const { supply } = added;\n\n        if (supply) {\n          if (supply.isOff) {\n            continue; // Exclude disabled nav link.\n          }\n\n          supply.needs(this).whenOff(() => {\n            // Handle nav link removal\n\n            const [links] = this._links.it;\n\n            if (links.delete(added)) {\n              this._links.it = [links];\n            }\n          });\n        }\n\n        links.add(added);\n      }\n\n      this._links.it = [links];\n    }\n  }\n\n  private _updateActive(context: ComponentContext, page: Page, links: Set<NavLink>): void {\n\n    const toDeactivate: NavLink[] = [];\n    const toActivate = this._selectActive(context, page, links);\n\n    for (const link of this._active.keys()) {\n      if (!toActivate.delete(link)) {\n        toDeactivate.push(link);\n      }\n    }\n\n    for (const deactivated of toDeactivate) {\n      this._deactivate(deactivated);\n    }\n    for (const activated of toActivate) {\n      if (activated.activate) {\n        this._active.set(\n            activated,\n            activated.activate(),\n        );\n      }\n    }\n  }\n\n  private _selectActive(context: ComponentContext, page: Page, links: Set<NavLink>): Set<NavLink> {\n\n    let maxWeight = 0;\n    let active = new Set<NavLink>();\n\n    for (const link of links) {\n\n      const weight = this._weigh({ link, menu: this._menu, context, page });\n\n      if (weight > maxWeight) {\n        maxWeight = weight;\n        active = new Set<NavLink>().add(link);\n      } else if (weight === maxWeight) {\n        active.add(link);\n      }\n    }\n\n    return active;\n  }\n\n  private _deactivate(link: NavLink): void {\n\n    const supply = this._active.get(link);\n\n    if (supply) {\n      this._active.delete(link);\n      supply.off();\n    }\n  }\n\n}\n\nfunction defaultNavLinkWeight(\n    {\n      link,\n      context,\n      page,\n    }: {\n      link: NavLink;\n      menu: NavMenu;\n      context: ComponentContext;\n      page: Page;\n    },\n): number {\n\n  const href = link.href;\n  const linkURL = new URL(href, context.get(BootstrapWindow).document.baseURI);\n\n  return calcNavLinkWeight(linkURL, page.url);\n}\n\nfunction calcNavLinkWeight(linkURL: URL, pageURL: URL): number {\n  if (linkURL.origin !== pageURL.origin) {\n    return -1;\n  }\n\n  const linkDir = navLinkPath2dir(linkURL);\n  const pageDir = navLinkPath2dir(pageURL);\n\n  if (linkURL.hash) {\n    if (linkDir !== pageDir) {\n      return -1;\n    }\n    // Require search parameters to be equal\n\n    const searchParamWeight = navLinkSearchParamsWeight(linkURL, pageURL);\n\n    if (searchParamWeight < 0 || navLinkSearchParamsWeight(pageURL, linkURL) < 0) {\n      return -1;\n    }\n\n    return linkURL.pathname.length\n        + searchParamWeight\n        + calcNavLinkWeight(getHashURL(linkURL), getHashURL(pageURL));\n  }\n\n  const searchParamWeight = navLinkSearchParamsWeight(linkURL, pageURL);\n\n  if (searchParamWeight) {\n    if (searchParamWeight < 0) {\n      return -1;\n    }\n    if (linkDir !== pageDir) {\n      return -1;\n    }\n    return linkURL.pathname.length + searchParamWeight;\n  }\n\n  if (!pageDir.startsWith(linkDir)) {\n    return -1;\n  }\n\n  return linkURL.pathname.length;\n}\n\nfunction navLinkPath2dir(url: URL): string {\n\n  const path = url.pathname;\n\n  return path.endsWith('/') ? path : path + '/';\n}\n\nfunction navLinkSearchParamsWeight(\n    { searchParams: linkParams }: URL,\n    { searchParams: pageParams }: URL,\n): number {\n\n  let weight = 0;\n\n  linkParams.forEach((value, key) => {\n    if (!isIgnoredSearchParam(key)) {\n      if (weight >= 0) {\n        if (pageParams.getAll(key).includes(value)) {\n          weight += 1;\n        } else {\n          weight = -1;\n        }\n      }\n    }\n  });\n\n  return weight;\n}\n\nfunction isIgnoredSearchParam(key: string): boolean {\n  return key.startsWith('__') && key.endsWith('__');\n}\n","import { isElementNode } from '@frontmeans/dom-primitives';\nimport { itsEach, overArray } from '@proc7ts/push-iterator';\n\n/**\n * Imports DOM node from one document to another.\n *\n * @typeParam TNode - DOM node type.\n * @param from - The node to import.\n * @param to - The node to append imported node to.\n * @param importContent - A function that imports nodes nested in parent element. {@link importNodeContent} by default.\n *\n * @returns Imported node.\n */\nexport function importNode<TNode extends Node>(\n    from: TNode,\n    to: Node,\n    importContent?: (this: void, from: TNode, to: TNode) => void,\n): TNode;\n\n/**\n * Imports DOM node from one document to another and inserts it before the given node.\n *\n * @typeParam TNode - DOM node type.\n * @param from - The node to import.\n * @param to - The node to append imported node to.\n * @param before - The node to insert imported node before, or `null` to append it to the end of target one.\n * @param importContent - A function that imports nodes nested in parent element. {@link importNodeContent} by default.\n *\n * @returns Imported node.\n */\nexport function importNode<TNode extends Node>(\n    from: TNode,\n    to: Node,\n    before?: Node | null,\n    importContent?: (this: void, from: TNode, to: TNode) => void,\n): TNode;\n\nexport function importNode<TNode extends Node>(\n    from: TNode,\n    to: Node,\n    beforeOrImport?: Node | null | ((this: void, from: TNode, to: TNode) => void),\n    importContent: (this: void, from: TNode, to: TNode) => void = importNodeContent,\n): TNode {\n\n  let before: Node | null;\n\n  if (typeof beforeOrImport === 'function') {\n    importContent = beforeOrImport;\n    before = null;\n  } else {\n    before = beforeOrImport || null;\n  }\n\n  const doc = to.ownerDocument!;\n\n  if (isElementNode(from)) {\n\n    const elementClone = doc.createElement(from.tagName.toLowerCase()) as Node as (Element & TNode);\n\n    from.getAttributeNames().forEach(attr => elementClone.setAttribute(attr, from.getAttribute(attr)!));\n    importContent(from, elementClone);\n    to.insertBefore(elementClone, before);\n\n    return elementClone;\n  }\n\n  const nodeClone = doc.importNode(from, false);\n\n  to.insertBefore(nodeClone, before);\n\n  return nodeClone;\n}\n\n/**\n * Imports DOM node contents from one document to another.\n *\n * @param from - The node which contents to import.\n * @param to - The node to append imported nodes to.\n */\nexport function importNodeContent(from: Node, to: Node): void {\n  itsEach(\n      overArray(from.childNodes),\n      node => importNode(node, to),\n  );\n}\n","import { OnEvent, onEventBy, supplyOn, trackValue, valueOn_ } from '@proc7ts/fun-events';\nimport { asis } from '@proc7ts/primitives';\nimport { Supply } from '@proc7ts/supply';\nimport { Page } from '../page';\nimport { PageLoadResponse } from './page-load-response';\nimport { PageLoader } from './page-loader.impl';\n\n/**\n * @internal\n */\nexport function cachingPageLoader(loader: PageLoader): PageLoader {\n\n  let state: {\n    readonly url: string;\n    readonly on: OnEvent<[PageLoadResponse]>;\n    readonly sup: Supply;\n  } | undefined;\n\n  return page => {\n\n    const url = pageUrl(page);\n\n    if (state) {\n      if (state.url === url) {\n        return state.on;\n      }\n      state.sup.off();\n    }\n\n    let tracked: {\n      readonly on: OnEvent<[PageLoadResponse]>;\n      num: number;\n    } | undefined;\n    const supply = new Supply(() => {\n      state = undefined;\n      tracked = undefined;\n    });\n\n    const on = onEventBy<[PageLoadResponse]>(receiver => {\n      if (!tracked) {\n\n        const onLoad = loader(page);\n        const tracker = trackValue<PageLoadResponse>();\n        const trackSupply = onLoad(resp => {\n          tracker.it = resp;\n        }).whenOff(reason => {\n          // Error drops page cache, unlike successful page load.\n          if (reason != null) {\n            supply.off(reason);\n          }\n        });\n\n        supply.cuts(trackSupply).cuts(tracker);\n\n        tracked = {\n          on: tracker.read.do(valueOn_(asis)),\n          num: 0,\n        };\n      }\n\n      const requested = tracked;\n\n      ++requested.num;\n\n      return requested.on.do(supplyOn(supply))(receiver).whenOff(reason => {\n        if (!--requested.num) {\n          // Allow to request the same page again\n          Promise.resolve().then(() => {\n            if (!requested.num && requested === tracked) {\n              supply.off(reason);\n            }\n          }).catch(console.error);\n        }\n      });\n    });\n\n    state = { url, on, sup: supply };\n\n    return on;\n  };\n}\n\nfunction pageUrl(page: Page): string {\n  return new URL('', page.url).href;\n}\n","import {\n  EventEmitter,\n  eventReceiver,\n  EventReceiver,\n  mapOn_,\n  OnEvent,\n  onEventBy,\n  shareOn,\n  supplyOn,\n} from '@proc7ts/fun-events';\nimport { noop } from '@proc7ts/primitives';\nimport { flatMapIt, itsEach, itsEvery, overIterator, PushIterable } from '@proc7ts/push-iterator';\nimport { neverSupply, Supply } from '@proc7ts/supply';\nimport { Navigation } from '../navigation';\nimport { Page } from '../page';\nimport { PageParam } from '../page-param';\nimport { PageFragmentRequest, PageLoadRequest } from './page-load-request';\nimport { PageLoadResponse } from './page-load-response';\nimport { PageLoader } from './page-loader.impl';\n\n/**\n * @internal\n */\nexport interface PageLoadReq extends PageLoadRequest {\n\n  readonly receiver: EventReceiver.Generic<[PageLoadResponse]>;\n\n}\n\nclass PageLoadAbortError extends Error {}\n\nclass PageLoadRequestsParam$ extends PageParam<PageLoadRequests, PageLoadRequests> {\n\n  create(\n      _page: Page,\n      requests: PageLoadRequests,\n  ): PageParam.Handle<PageLoadRequests, PageLoadRequests> {\n    return {\n      get() {\n        return requests;\n      },\n      put: noop,\n    };\n  }\n\n}\n\n/**\n * @internal\n */\nexport const PageLoadRequestsParam: PageParam<PageLoadRequests, PageLoadRequests> = new PageLoadRequestsParam$();\n\n/**\n * @internal\n */\nexport class PageLoadRequests {\n\n  private readonly _map = new Map<Supply, PageLoadReq[]>();\n  private readonly _requests: PushIterable<PageLoadReq>;\n\n  constructor(\n      private readonly _navigation: Navigation,\n      private readonly _loader: PageLoader,\n  ) {\n    this._requests = flatMapIt(overIterator(() => this._map.values()));\n  }\n\n  get fragments(): readonly PageFragmentRequest[] {\n\n    const result: PageFragmentRequest[] = [];\n\n    if (!itsEvery(\n        this._requests,\n        request => {\n          if (!request.fragment) {\n            return false;\n          }\n          result.push(request.fragment);\n          return true;\n        },\n    )) {\n      return [];\n    }\n\n    return result;\n  }\n\n  handle(): PageParam.Handle<void, PageLoadRequest> {\n\n    const self = this;\n    const pageSupply = new Supply(noop);\n    let loadSupply = neverSupply();\n\n    return {\n      get() {/* void */},\n      put(request: PageLoadRequest): void {\n        self._add(request);\n      },\n      transfer(to: Page, when) {\n        if (when === 'pretend') {\n          return;\n        }\n\n        const transferred = self._transfer();\n\n        to.put(PageLoadRequestsParam, transferred);\n\n        return transferred.handle();\n      },\n      enter(page: Page, when: 'init' | 'open' | 'replace' | 'return'): void {\n        if (when === 'init') {\n          // The page is loaded already. No need to fetch it.\n          return;\n        }\n\n        loadSupply = new Supply(noop).needs(pageSupply);\n\n        const onLoad = onEventBy<[PageLoadResponse]>(responseReceiver => {\n\n          const emitter = new EventEmitter<[PageLoadResponse]>();\n          const supply = emitter.on(responseReceiver);\n\n          self._loader(page).do(supplyOn(loadSupply))(\n              response => emitter.send(response),\n          ).whenOff(error => {\n            if (error !== undefined && !(error instanceof PageLoadAbortError)) {\n              // Report current page load error as failed load response\n              emitter.send({\n                ok: false as const,\n                page,\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                error,\n              });\n            }\n          });\n\n          return supply;\n        }).do(shareOn);\n\n        itsEach(\n            self._requests,\n            ({ fragment, receiver }) => onFragment(onLoad, fragment)({\n              supply: new Supply().needs(receiver.supply),\n              receive(context, response): void {\n                receiver.receive(context, response);\n              },\n            }),\n        );\n      },\n      leave(): void {\n        loadSupply.off(new PageLoadAbortError('page left'));\n      },\n      stay() {\n        pageSupply.off(new PageLoadAbortError('navigation cancelled'));\n      },\n      forget() {\n        pageSupply.off(new PageLoadAbortError('page forgotten'));\n      },\n    };\n\n  }\n\n  private _add(request: PageLoadRequest): void {\n\n    const req = { ...request, receiver: eventReceiver(request.receiver) };\n    const { supply } = req.receiver;\n    const list = this._map.get(supply);\n\n    if (list) {\n      list.push(req);\n    } else {\n      this._map.set(supply, [req]);\n      supply.whenOff(() => this._map.delete(supply));\n    }\n  }\n\n  private _transfer(): PageLoadRequests {\n\n    const transferred = new PageLoadRequests(this._navigation, this._loader);\n\n    for (const [supply, list] of this._map.entries()) {\n      transferred._map.set(supply, list.slice());\n    }\n\n    return transferred;\n  }\n\n}\n\nfunction onFragment(\n    onLoad: OnEvent<[PageLoadResponse]>,\n    fragment?: PageFragmentRequest,\n): OnEvent<[PageLoadResponse]> {\n  return fragment\n      ? onLoad.do(\n          mapOn_(\n              response => response.ok\n                  ? {\n                    ...response,\n                    fragment: (\n                        fragment.tag != null\n                            ? response.document.getElementsByTagName(fragment.tag)[0]\n                            : response.document.getElementById(fragment.id)\n                    ) || undefined,\n                  }\n                  : response,\n          ),\n      )\n      : onLoad;\n}\n","import { ContextUpRef } from '@proc7ts/context-values/updatable';\nimport { EventSender, OnEvent } from '@proc7ts/fun-events';\nimport { FetchAgentKey } from '../../fetch/fetch-agent-key.impl';\nimport { PageLoadResponse } from './page-load-response';\n\n/**\n * Page load agent signature.\n *\n * The agent can be used to alter loaded page document processing. For that it should be registered in appropriate\n * context.\n *\n * All registered agents are organized into chain. The first agent in chain is called by page loader.\n */\nexport type PageLoadAgent =\n/**\n * @param next - Either calls the next agent in chain, or actually loads page document if this agent is the last one.\n * Accepts an optional `Request` parameter. The original request will be used instead when omitted.\n * @param request - HTTP request.\n *\n * @returns An `EventSender` of page load response. It is returned either to preceding agent in chain, or as a loaded\n * document.\n */\n    (\n        this: void,\n        next: (this: void, request?: Request) => OnEvent<[PageLoadResponse]>,\n        request: Request,\n    ) => EventSender<[PageLoadResponse]>;\n\nexport namespace PageLoadAgent {\n\n  /**\n   * Combined page load agent signature.\n   *\n   * This is what is available under {@link PageLoadAgent} key.\n   */\n  export type Combined =\n  /**\n   * @param next - Either calls the next agent in chain, or actually loads page document if this agent is the last one.\n   * Accepts `Request` parameter.\n   * @param request - HTTP request.\n   *\n   * @returns An `OnEvent` sender of page load response.\n   */\n      (\n          this: void,\n          next: (this: void, request: Request) => OnEvent<[PageLoadResponse]>,\n          request: Request,\n      ) => OnEvent<[PageLoadResponse]>;\n\n}\n\n/**\n * A key of context value containing an {@link PageLoadAgent} instance.\n *\n * The agent returned combines all registered agents into one. If no agent registered it just performs the fetch.\n */\nexport const PageLoadAgent: ContextUpRef<PageLoadAgent.Combined, PageLoadAgent> = (\n    /*#__PURE__*/ new FetchAgentKey<[PageLoadResponse]>('page-load-agent')\n);\n","import { ContextUpRef, FnContextKey } from '@proc7ts/context-values/updatable';\nimport { noop, valueProvider } from '@proc7ts/primitives';\n\n/**\n * A signature of page load URL modifier function.\n *\n * All such functions registered in bootstrap context are called in order of their registration with current page URL.\n * They are able to modify it, e.g. by applying additional URL search parameters. The modified URL is used then to load\n * the page.\n */\nexport type PageLoadURLModifier =\n/**\n * @param url - An URL of page to load.\n */\n    (this: void, url: URL) => void;\n\n/**\n * A key of bootstrap context value containing a page load URL modifier.\n *\n * Does not modify URL by default.\n */\nexport const PageLoadURLModifier: ContextUpRef<PageLoadURLModifier, PageLoadURLModifier> = (\n    /*#__PURE__*/ new FnContextKey('page-load-url', { byDefault: valueProvider(noop) })\n);\n","import { hthvParse, hthvQuote } from '@hatsy/http-header-value';\nimport { SingleContextKey } from '@proc7ts/context-values';\nimport { afterThe, digOn_, EventNotifier, mapOn_, OnEvent, onEventBy, resolveOnOrdered } from '@proc7ts/fun-events';\nimport { BootstrapContext, bootstrapDefault, BootstrapWindow } from '@wesib/wesib';\nimport { HttpFetch } from '../../fetch';\nimport { Page } from '../page';\nimport { PageLoadAgent } from './page-load-agent';\nimport { PageLoadRequestsParam } from './page-load-requests.impl';\nimport { PageLoadResponse } from './page-load-response';\nimport { PageLoadURLModifier } from './page-load-url-modifier';\n\n/**\n * @internal\n */\nexport type PageLoader = (this: void, page: Page) => OnEvent<[PageLoadResponse]>;\n\n/**\n * @internal\n */\nexport const PageLoader = (/*#__PURE__*/ new SingleContextKey<PageLoader>(\n    'page-loader',\n    {\n      byDefault: bootstrapDefault(newPageLoader),\n    },\n));\n\nfunction newPageLoader(context: BootstrapContext): PageLoader {\n\n  const window = context.get(BootstrapWindow);\n  const httpFetch = context.get(HttpFetch);\n  const modifyURL = context.get(PageLoadURLModifier);\n  const agent = context.get(PageLoadAgent);\n  const parser = new window.DOMParser();\n\n  return page => {\n\n    const url = new URL(page.url.href);\n\n    modifyURL(url);\n\n    const request = new Request(\n        url.href,\n        {\n          mode: 'same-origin',\n          credentials: 'same-origin',\n          headers: new Headers({ Accept: 'text/html' }),\n        },\n    );\n\n    return onEventBy(receiver => agent(fetch, request)(receiver));\n\n    function fetch(fetchRequest: Request): OnEvent<[PageLoadResponse]> {\n      requestPageFragments(page, fetchRequest);\n\n      return onEventBy<[PageLoadResponse]>(receiver => {\n\n        const dispatcher = new EventNotifier<[PageLoadResponse]>();\n\n        dispatcher.on(receiver);\n        dispatcher.send({ page });\n\n        httpFetch(fetchRequest).do(\n            mapOn_(response => Promise.all([response, response.text()])),\n            resolveOnOrdered,\n            digOn_((...batch: [Response, string][]) => afterThe<[Response, string][]>(...batch)),\n            mapOn_(([response, text]): PageLoadResponse => {\n              if (!response.ok) {\n                return {\n                  ok: false as const,\n                  page,\n                  response,\n                  error: response.status,\n                };\n              }\n              try {\n                return {\n                  ok: true as const,\n                  page,\n                  response,\n                  document: parsePageDocument(parser, url, response, text),\n                };\n              } catch (error) {\n                return {\n                  ok: false as const,\n                  page,\n                  response,\n                  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                  error,\n                };\n              }\n            }),\n        )(receiver);\n      });\n    }\n  };\n}\n\nfunction requestPageFragments(page: Page, request: Request): void {\n\n  const fragments = page.get(PageLoadRequestsParam)?.fragments;\n\n  if (fragments && fragments.length) {\n    request.headers.set(\n        'Accept-Fragment',\n        fragments.reduce(\n            (header, fragment) => (header ? header + ', ' : '') + (\n                fragment.tag != null\n                    ? 'tag=' + hthvQuote(fragment.tag)\n                    : 'id=' + hthvQuote(fragment.id)\n            ),\n            '',\n        ),\n    );\n  }\n}\n\nfunction parsePageDocument(parser: DOMParser, url: URL, response: Response, text: string): Document {\n\n  const doc = parser.parseFromString(\n      text,\n      hthvParse(response.headers.get('Content-Type') || 'text/html')[0].v as DOMParserSupportedType,\n  );\n\n  if (doc.head) {\n\n    const base = doc.head.querySelector('base');\n\n    if (base) {\n      base.href = new URL(base.getAttribute('href')!, url).href;\n    } else {\n\n      const newBase = doc.createElement('base');\n\n      newBase.href = url.href;\n\n      doc.head.appendChild(newBase);\n    }\n  }\n\n  return doc;\n}\n","import { Navigation } from '../navigation';\nimport { Page } from '../page';\nimport { PageParam } from '../page-param';\nimport { PageParamContext } from '../page-param-context';\nimport { cachingPageLoader } from './caching-page-loader.impl';\nimport { PageLoadRequest } from './page-load-request';\nimport { PageLoadRequests, PageLoadRequestsParam } from './page-load-requests.impl';\nimport { PageLoader } from './page-loader.impl';\n\n/**\n * @internal\n */\nclass PageLoadParam$ extends PageParam<void, PageLoadRequest> {\n\n  create(page: Page, request: PageLoadRequest, context: PageParamContext): PageParam.Handle<void, PageLoadRequest> {\n\n    const requests = new PageLoadRequests(context.get(Navigation), cachingPageLoader(context.get(PageLoader)));\n    const handle = requests.handle();\n\n    page.put(PageLoadRequestsParam, requests);\n    handle.put(request);\n\n    return handle;\n  }\n\n}\n\n/**\n * Page load parameter.\n *\n * Accepts a {@link PageLoadRequest page load request} as input.\n *\n * A page load is initiated whenever a page with new address is {@link Navigation.onEnter entered}.\n *\n * Page load won't be initiated if:\n * - page load parameter is not {@link Page.put} added,\n * - all added {@link PageLoadRequest.receiver response receiver}s supplies are cut off, or\n * - the entered page address is the the same one as previous one, except the hash,\n */\nexport const PageLoadParam: PageParam<void, PageLoadRequest> = (/*#__PURE__*/ new PageLoadParam$());\n","import { ContextKey__symbol, SingleContextKey } from '@proc7ts/context-values';\nimport { AfterEvent, afterThe, mapOn_ } from '@proc7ts/fun-events';\nimport { BootstrapContext, bootstrapDefault, BootstrapWindow } from '@wesib/wesib';\nimport { Navigation } from '../navigation';\nimport { PageLoadAgent } from './page-load-agent';\nimport { PageLoadURLModifier } from './page-load-url-modifier';\n\nconst PageCacheBuster__key = (/*#__PURE__*/ new SingleContextKey<PageCacheBuster>(\n    'page-cache-buster',\n    {\n      byDefault: bootstrapDefault(context => new PageCacheBuster(context)),\n    },\n));\n\n/**\n * @internal\n */\nexport const appRevSearchParam = '__wesib_app_rev__';\n\n/**\n * @internal\n */\nexport class PageCacheBuster {\n\n  static get [ContextKey__symbol](): SingleContextKey<PageCacheBuster> {\n    return PageCacheBuster__key;\n  }\n\n  readonly urlModifier: AfterEvent<PageLoadURLModifier[]>;\n  readonly agent: AfterEvent<PageLoadAgent[]>;\n\n  constructor(context: BootstrapContext) {\n\n    const rev = appRev(context.get(BootstrapWindow).document);\n\n    if (!rev) {\n      this.urlModifier = afterThe();\n      this.agent = afterThe();\n    } else {\n\n      const navigation = context.get(Navigation);\n\n      this.urlModifier = afterThe(url => url.searchParams.set(appRevSearchParam, rev));\n      this.agent = afterThe(\n          (next, request) => next(new Request(request.url, request)).do(\n              mapOn_(response => {\n                    if (response.ok) {\n\n                      const newRev = appRev(response.document);\n\n                      if (newRev && newRev !== rev) {\n\n                        const url = new URL(response.page.url.href);\n\n                        url.searchParams.set(appRevSearchParam, newRev);\n                        navigation.update(url);\n                        navigation.reload();\n                      }\n                    }\n\n                    return response;\n                  }),\n          ),\n      );\n    }\n  }\n\n}\n\nfunction appRev(doc: Document): string | null | undefined {\n  return doc.querySelector('meta[name=wesib-app-rev]')?.getAttribute('content');\n}\n","import { mapOn_ } from '@proc7ts/fun-events';\nimport { filterArray, filterIt, itsEach, mapIt, PushIterable } from '@proc7ts/push-iterator';\nimport { BootstrapContext, BootstrapWindow } from '@wesib/wesib';\nimport { importNode } from '../../util';\nimport { PageLoadAgent } from './page-load-agent';\n\n/**\n * @internal\n */\nexport function pageScriptsAgent(context: BootstrapContext): PageLoadAgent {\n\n  const doc = context.get(BootstrapWindow).document;\n\n  return next => next().do(\n      mapOn_(response => {\n        if (response.ok) {\n\n          const allScripts = new Set<string>(mapIt(\n              externalScripts(doc, doc.scripts),\n              ([src]) => src,\n          ));\n\n          itsEach(\n              filterIt(\n                  externalScripts(response.document, response.document.querySelectorAll('script')),\n                  ([src]) => !allScripts.has(src),\n              ),\n              ([src, script]) => {\n                importNode(script, doc.head, (_from, to) => to.src = src);\n                allScripts.add(src);\n              },\n          );\n        }\n        return response;\n      }),\n  );\n}\n\nfunction externalScripts(\n    doc: Document,\n    scripts: ArrayLike<HTMLScriptElement>,\n): PushIterable<readonly [string, HTMLScriptElement]> {\n  return mapIt(\n      filterArray(scripts, ({ src }) => !!src),\n      script => [new URL(script.src, doc.baseURI).href, script] as const,\n  );\n}\n","import { mapOn_ } from '@proc7ts/fun-events';\nimport { itsEach, itsFirst, overArray } from '@proc7ts/push-iterator';\nimport { BootstrapContext, BootstrapWindow } from '@wesib/wesib';\nimport { importNode } from '../../util';\nimport { PageLoadAgent } from './page-load-agent';\n\n/**\n * @internal\n */\nexport function pageStyleAgent(context: BootstrapContext): PageLoadAgent {\n\n  const doc = context.get(BootstrapWindow).document;\n\n  return next => next().do(\n      mapOn_(response => {\n        if (!response.ok) {\n          return response;\n        }\n\n        const newStyles = response.document.querySelectorAll<HTMLLinkElement>('link[rel=stylesheet]');\n\n        if (!newStyles.length) {\n          return response;\n        }\n\n        let target: Node = doc.head;\n        let before: Node | null = null;\n        const oldStyles = doc.querySelectorAll<HTMLLinkElement>('link[rel=stylesheet]');\n        const oldStylesByHref = new Map<string, HTMLLinkElement>();\n        const firstOldStyle = oldStyles.item(0);\n\n        if (firstOldStyle) {\n          target = firstOldStyle.parentNode!;\n          before = firstOldStyle;\n          itsEach(\n              overArray(oldStyles),\n              link => oldStylesByHref.set(new URL(link.href, doc.baseURI).href, link),\n          );\n        }\n\n        itsEach(\n            overArray(newStyles),\n            newStyle => {\n\n              const href = new URL(newStyle.href, doc.baseURI).href;\n              const oldStyle = oldStylesByHref.get(href);\n\n              if (oldStyle) {\n                // Style already exists.\n                if (itsFirst(oldStylesByHref.keys()) === href) {\n                  // In proper position already.\n                  // Insert the remaining styles after it.\n                  target = oldStyle.parentNode!;\n                  before = oldStyle.nextSibling;\n                } else {\n                  // Move to proper position.\n                  target.insertBefore(oldStyle, before);\n                }\n                oldStylesByHref.delete(href);\n              } else {\n                // Import new style\n                importNode(newStyle, target, before, (_from, to) => to.href = href);\n              }\n            },\n        );\n\n        // Remove remaining old styles\n        itsEach(oldStylesByHref.values(), style => style.parentNode!.removeChild(style));\n\n        return response;\n      }),\n  );\n}\n","import { mapOn_ } from '@proc7ts/fun-events';\nimport { BootstrapContext, BootstrapWindow } from '@wesib/wesib';\nimport { PageLoadAgent } from './page-load-agent';\n\n/**\n * @internal\n */\nexport function pageTitleAgent(context: BootstrapContext): PageLoadAgent {\n\n  const doc = context.get(BootstrapWindow).document;\n\n  return next => next().do(mapOn_(response => {\n    if (response.ok) {\n\n      const title = response.document.getElementsByTagName('title').item(0);\n\n      if (title && title.textContent) {\n        doc.title = title.textContent;\n      }\n    }\n\n    return response;\n  }));\n}\n","import { FeatureDef, FeatureDef__symbol } from '@wesib/wesib';\nimport { PageCacheBuster } from './page-cache-buster.impl';\nimport { PageLoadAgent } from './page-load-agent';\nimport { PageLoadURLModifier } from './page-load-url-modifier';\nimport { pageScriptsAgent } from './page-scripts-agent.impl';\nimport { pageStyleAgent } from './page-style-agent.impl';\nimport { pageTitleAgent } from './page-title-agent.impl';\n\n/**\n * @internal\n */\nconst PageLoadSupport__feature: FeatureDef = {\n  setup(setup) {\n    setup.provide({\n      a: PageLoadURLModifier,\n      by: (buster: PageCacheBuster) => buster.urlModifier,\n      with: [PageCacheBuster],\n    });\n    setup.provide({\n      a: PageLoadAgent,\n      by: (buster: PageCacheBuster) => buster.agent,\n      with: [PageCacheBuster],\n    });\n    setup.provide({ a: PageLoadAgent, by: pageScriptsAgent });\n    setup.provide({ a: PageLoadAgent, by: pageStyleAgent });\n    setup.provide({ a: PageLoadAgent, by: pageTitleAgent });\n  },\n};\n\n/**\n * Page load support feature.\n *\n * Enables default {@link PageLoadAgent page load agents}:\n * 1. Page cache busting agent.\n *    If `<meta name=\"wesib-app-rev\">` tag is present in initial page, then sends this tag's content with each page load\n *    request as `__wesib_app_rev__` search parameter. If the loaded page contains the same named meta tag with\n *    different content, then reloads the page.\n *    This serves both as cache busting technique, and as server-side application updates handler.\n * 2. Scripts agent.\n *    Includes external scripts from loaded page into main document.\n * 3. Style agent.\n *    Replaces external styles of main document styles with the ones from loaded page.\n *    Unless loaded page has no external styles.\n * 4. Title agent.\n *    Applies loaded page title to bootstrap window. If there is one.\n */\nexport class PageLoadSupport {\n\n  static get [FeatureDef__symbol](): FeatureDef {\n    return PageLoadSupport__feature;\n  }\n\n}\n","import { nodeDocument } from '@frontmeans/dom-primitives';\nimport { onceAfter } from '@proc7ts/fun-events';\nimport { Class, noop, valueProvider } from '@proc7ts/primitives';\nimport { Supply } from '@proc7ts/supply';\nimport {\n  Component,\n  ComponentClass,\n  ComponentContext,\n  ComponentDecorator,\n  ElementRenderScheduler,\n  RenderDef,\n} from '@wesib/wesib';\nimport { importNodeContent } from '../../util';\nimport { Navigation } from '../navigation';\nimport { Page } from '../page';\nimport { PageLoadParam } from './page-load-param';\nimport { PageFragmentRequest } from './page-load-request';\nimport { PageLoadResponse } from './page-load-response';\nimport { PageLoadSupport } from './page-load-support.feature';\n\n/**\n * Creates component decorator that includes page contents into decorated component's element.\n *\n * The page is loaded and included whenever it is {@link Navigation.onEnter entered}.\n *\n * Utilizes {@link PageLoadParam} navigation parameter.\n *\n * Enables {@link PageLoadSupport} feature.\n *\n * @typeParam T - A type of decorated component class.\n * @param def - Page inclusion definition.\n *\n * @returns New component decorator.\n */\nexport function IncludePage<T extends ComponentClass = Class>(\n    def: IncludePageDef<InstanceType<T>> = {},\n): ComponentDecorator<T> {\n\n  const onResponse = def.onResponse ? def.onResponse.bind(def) : noop;\n  const contentKey: (page: Page) => string | undefined = def.contentKey\n      ? def.contentKey.bind(def)\n      : defaultPageContentKey;\n\n  return Component({\n    feature: {\n      needs: [PageLoadSupport],\n    },\n    define(context) {\n      context.whenComponent(context => {\n\n        const { fragment, render } = def;\n        const document = nodeDocument(context.element);\n        const schedule = context.get(ElementRenderScheduler)(render);\n        const navigation = context.get(Navigation);\n        let lastPageURL = contentKey(navigation.page);\n        let detectFragment: () => PageFragmentRequest;\n\n        if (fragment) {\n          detectFragment = valueProvider(fragment);\n        } else {\n          detectFragment = () => {\n\n            const { element: { id, tagName: tag } } = context as { element: Element };\n\n            return id ? { id } : { tag };\n          };\n        }\n\n        context.whenConnected(() => {\n\n          const range = document.createRange();\n\n          range.selectNodeContents(context.contentRoot);\n\n          navigation.read.do(onceAfter)(page => {\n            page.put(\n                PageLoadParam,\n                {\n                  fragment: detectFragment(),\n                  receiver: {\n                    supply: new Supply().needs(context),\n                    receive: (_ctx, response) => handleResponse(response),\n                  },\n                },\n            );\n          });\n\n          function handleResponse(response: PageLoadResponse): void {\n\n            const newPageURL = contentKey(response.page);\n\n            if (newPageURL === lastPageURL) {\n              return; // Only hash changed. Do not refresh the page.\n            }\n\n            if (!response.ok) {\n              schedule(() => onResponse({ context, range, response }));\n              return;\n            }\n\n            lastPageURL = newPageURL;\n            schedule(() => {\n              range.deleteContents();\n\n              const target = document.createDocumentFragment();\n              const { fragment } = response;\n\n              if (fragment) {\n                importNodeContent(fragment, target);\n                range.insertNode(target);\n              }\n\n              onResponse({ context, range, response });\n            });\n          }\n        });\n      });\n    },\n  });\n}\n\n/**\n * @internal\n */\nfunction defaultPageContentKey({ url }: Page): string {\n  return new URL('', url).href;\n}\n\n/**\n * Page inclusion definition.\n *\n * Configures {@link IncludePage @LoadPage} decorator.\n *\n * @typeParam T - A type of component.\n */\nexport interface IncludePageDef<T extends object = any> {\n\n  /**\n   * Page fragment to include.\n   *\n   * By default uses custom element identifier if present, or element tag name otherwise.\n   */\n  readonly fragment?: PageFragmentRequest;\n\n  /**\n   * Rendering options.\n   */\n  readonly render?: RenderDef.Options;\n\n  /**\n   * Builds content key for the given page.\n   *\n   * The loaded content will replace already included one only when their content key differ.\n   *\n   * By default uses page URL without hash part as a key. This prevents content refresh when only URL hash changes.\n   *\n   * @param page - Target page. Either loaded or not.\n   *\n   * @returns Content key.\n   */\n  contentKey?(page: Page): any;\n\n  /**\n   * Performs additional actions during page load.\n   *\n   * This method is called inside page contents render schedule for {@link PageLoadResponse each stage} of page\n   * load. At the final stage it is called after loaded page contents included.\n   *\n   * This method can be used e.g. to indicate the page load progress.\n   *\n   * @param context - Decorated component context.\n   * @param response - Page load response.\n   * @param range - Document range the loaded page contents going to replace.\n   */\n  onResponse?(\n      {\n        context,\n        response,\n        range,\n      }: {\n        context: ComponentContext<T>;\n        response: PageLoadResponse;\n        range: Range;\n      },\n  ): void;\n\n}\n","import { Share } from './share';\n\n/**\n * A key of {@link ShareRef component share reference} property containing a {@link Share component\n * share} instance.\n */\nexport const Share__symbol = (/*#__PURE__*/ Symbol('Share'));\n\n/**\n * A reference to {@link Share component share}.\n *\n * @typeParam T - Shared value type.\n */\nexport interface ShareRef<T> {\n\n  /**\n   * Component share instance.\n   */\n  readonly [Share__symbol]: Share<T>;\n\n}\n\n/**\n * Checks whether the given value is a {@link ShareRef component share reference}.\n *\n * @typeParam T - Shared value type.\n * @typeParam TOther - Another type the value may have.\n * @param value - A value to check.\n *\n * @returns `true` if the value has a {@link Share__symbol} property, or `false` otherwise.\n */\nexport function isShareRef<T, TOther>(value: ShareRef<T> | TOther): value is ShareRef<T> {\n  return !!value\n      && (typeof value === 'object' || typeof value === 'function')\n      && !!(value as Partial<ShareRef<T>>)[Share__symbol];\n}\n","import { ContextKey, ContextKey__symbol, SingleContextKey } from '@proc7ts/context-values';\nimport { trackValue, ValueTracker } from '@proc7ts/fun-events';\nimport { Supply } from '@proc7ts/supply';\nimport { bootstrapDefault, ComponentClass, DefaultNamespaceAliaser } from '@wesib/wesib';\nimport { Share } from './share';\n\nconst ShareRegistry__key = (/*#__PURE__*/ new SingleContextKey(\n    'share-registry',\n    {\n      byDefault: bootstrapDefault(bsContext => new ShareRegistry(bsContext.get(DefaultNamespaceAliaser))),\n    },\n));\n\n/**\n * @internal\n */\nexport class ShareRegistry {\n\n  static get [ContextKey__symbol](): ContextKey<ShareRegistry> {\n    return ShareRegistry__key;\n  }\n\n  private readonly _sharers = new Map<Share<unknown>, ValueTracker<Sharers>>();\n\n  constructor(readonly nsAlias: DefaultNamespaceAliaser) {\n  }\n\n  addSharer(\n      share: Share<unknown>,\n      componentType: ComponentClass,\n      elementName: string | undefined,\n      supply: Supply,\n  ): void {\n\n    let sharers = this._sharers.get(share);\n\n    if (!sharers) {\n      sharers = Sharers$new();\n      this._sharers.set(share, sharers);\n      Sharers$addSharer(sharers, componentType, supply);\n      Sharers$addName(sharers, elementName, supply);\n    } else {\n      Sharers$addSharer(sharers, componentType, supply);\n      Sharers$addName(sharers, elementName, supply);\n      sharers.it = { ...sharers.it };\n    }\n  }\n\n  sharers(share: Share<unknown>): ValueTracker<Sharers> {\n\n    let sharers = this._sharers.get(share);\n\n    if (!sharers) {\n      sharers = Sharers$new();\n      this._sharers.set(share, sharers);\n    }\n\n    return sharers;\n  }\n\n}\n\n/**\n * @internal\n */\nexport interface Sharers {\n\n  readonly names: Map<string, number>;\n  readonly sharers: Map<ComponentClass, number>;\n\n}\n\nfunction Sharers$new(): ValueTracker<Sharers> {\n  return trackValue({ names: new Map(), sharers: new Map() });\n}\n\nfunction Sharers$addName(\n    tracker: ValueTracker<Sharers>,\n    name: string | undefined,\n    supply: Supply,\n): void {\n  if (!name) {\n    return;\n  }\n\n  const sharers = tracker.it;\n  const counter = sharers.names.get(name) || 0;\n\n  sharers.names.set(name, counter + 1);\n  supply.whenOff(() => {\n\n    const counter = sharers.names.get(name)! - 1;\n\n    if (counter > 0) {\n      sharers.names.set(name, counter);\n    } else {\n      sharers.names.delete(name);\n    }\n\n    tracker.it = { ...sharers };\n  });\n}\n\nfunction Sharers$addSharer(\n    tracker: ValueTracker<Sharers>,\n    componentType: ComponentClass,\n    supply: Supply,\n): void {\n\n  const sharers = tracker.it;\n  const counter = sharers.sharers.get(componentType) || 0;\n\n  sharers.sharers.set(componentType, counter + 1);\n  supply.whenOff(() => {\n\n    const counter = sharers.sharers.get(componentType)! - 1;\n\n    if (counter > 0) {\n      sharers.sharers.set(componentType, counter);\n    } else {\n      sharers.sharers.delete(componentType);\n    }\n\n    tracker.it = { ...sharers };\n  });\n}\n","import { ContextValueSlot } from '@proc7ts/context-values';\nimport { ContextUpKey } from '@proc7ts/context-values/updatable';\nimport { AfterEvent, digAfter } from '@proc7ts/fun-events';\nimport { Share } from './share';\nimport { SharedValue } from './shared-value';\n\n/**\n * @internal\n */\nexport class ShareKey<T> extends ContextUpKey<AfterEvent<[T?]>, SharedValue<T>> {\n\n  constructor(name: string, private readonly _share: Share<T>) {\n    super(`${name}:share`);\n  }\n\n  get upKey(): this {\n    return this;\n  }\n\n  grow(\n      slot: ContextValueSlot<\n          AfterEvent<[T?]>,\n          Share.Source<T>,\n          AfterEvent<SharedValue<T>[]>>,\n  ): void {\n    slot.insert(\n        slot.seed.do(\n            digAfter((...values) => this._share.selectValue(...values)),\n        ),\n    );\n  }\n\n}\n","import { html__naming } from '@frontmeans/namespace-aliaser';\nimport { ContextUpKey } from '@proc7ts/context-values/updatable';\nimport { AfterEvent } from '@proc7ts/fun-events';\nimport { arrayOfElements } from '@proc7ts/primitives';\nimport { Supply } from '@proc7ts/supply';\nimport { BootstrapContext, DefinitionContext } from '@wesib/wesib';\nimport { Share } from './share';\nimport { ShareKey } from './share-key.impl';\nimport { Share__symbol } from './share-ref';\nimport { ShareRegistry } from './share-registry.impl';\nimport { SharedValue } from './shared-value';\n\n/**\n * @internal\n */\nexport const Share$impl__symbol = (/*#__PURE__*/ Symbol('Share.impl'));\n\n/**\n * @internal\n */\nexport class Share$<T> {\n\n  readonly key: ContextUpKey<AfterEvent<[T?]>, SharedValue<T>>;\n  private readonly _aliases: readonly Share<T>[];\n\n  constructor(\n      private readonly _share: Share<T>,\n      readonly name: string,\n      options: Share.Options<T>,\n  ) {\n    this.key = new ShareKey(name, _share);\n    this._aliases = arrayOfElements(options.as).map(alias => alias[Share__symbol]);\n  }\n\n  addSharer(defContext: DefinitionContext, options: SharedValue.Options = {}): Supply {\n\n    const { local, name = defContext.elementDef.name } = options;\n    const registry = defContext.get(BootstrapContext).get(ShareRegistry);\n    const supply = new Supply();\n    const { componentType } = defContext;\n    const elementName = local\n        ? undefined\n        : name && html__naming.name(name, registry.nsAlias).toLowerCase();\n\n    registry.addSharer(this._share, componentType, elementName, supply);\n    for (const alias of this._aliases) {\n      registry.addSharer(alias, componentType, elementName, supply);\n    }\n\n    return supply;\n  }\n\n  shareValue(\n      registrar: SharedValue.Registrar<T>,\n  ): void {\n    registrar.shareAs(this._share);\n\n    const priorityOffset = registrar.priority + 1;\n\n    this._aliases.forEach((alias, index) => {\n      alias.shareValue(registrar.withPriority(priorityOffset + index));\n    });\n  }\n\n}\n","import { QualifiedName } from '@frontmeans/namespace-aliaser';\nimport { AfterEvent } from '@proc7ts/fun-events';\nimport { Supply, SupplyPeer } from '@proc7ts/supply';\nimport { ComponentContext } from '@wesib/wesib';\nimport { ShareRef } from './share-ref';\n\n/**\n * A key of the {@link SharedValue.Detailed detailed shared value descriptor} containing the\n * {@link SharedValue.Details shared value details}.\n */\nexport const SharedValue__symbol = (/*#__PURE__*/ Symbol('SharedValue'));\n\n/**\n * A value shared by component.\n *\n * Either a pure value, or its {@link SharedValue.Detailed detailed descriptor}.\n *\n * @typeParam T - Shared value type.\n */\nexport type SharedValue<T> = T | SharedValue.Detailed<T>;\n\nexport namespace SharedValue {\n\n  /**\n   * Value sharing options.\n   *\n   * Declare availability of the shared value.\n   */\n  export interface Options {\n\n    /**\n     * The name of the element the sharer component is bound to. Defaults to component's element name.\n     *\n     * Ignored for {@link local} shares\n     */\n    readonly name?: QualifiedName;\n\n    /**\n     * Whether the share is local.\n     *\n     * - `true` to make the value available only locally, i.e. only when requested by sharer context.\n     * - `false` (by default) to make the value available to nested components too.\n     */\n    readonly local?: boolean;\n\n  }\n\n  /**\n   * A detailed descriptor of the value shared by component.\n   *\n   * @typeParam T - Shared value type.\n   */\n  export interface Detailed<T> {\n\n    /**\n     * Shared value details.\n     */\n    readonly [SharedValue__symbol]: Details<T>;\n\n  }\n\n  /**\n   * Details of the shared value.\n   */\n  export interface Details<T> {\n\n    /**\n     * A priority of the shared value.\n     *\n     * Never negative. The lesser value means higher priority. The shared value with higher priority\n     * {@link Share.selectValue takes precedence}.\n     */\n    readonly priority: number;\n\n    /**\n     * Builds the shared value.\n     *\n     * @returns Either the shared value, or its `AfterEvent` keeper.\n     */\n    get(): T | AfterEvent<[T?]>;\n\n  }\n\n  /**\n   * Shared value registrar.\n   *\n   * Passed to {@link Share.shareValue} method in order to share the value.\n   *\n   * @typeParam T - Shared value type.\n   */\n  export interface Registrar<T> extends SupplyPeer {\n\n    /**\n     * The default priority of the shared value.\n     *\n     * Never negative.\n     */\n    readonly priority: number;\n\n    /**\n     * Shared value supply.\n     *\n     * Stops value sharing once cut off.\n     */\n    readonly supply: Supply;\n\n    /**\n     * Shares the value under the given alias.\n     *\n     * @param alias - A reference to share alias.\n     * @param priority - Shared value priority. Equals to {@link priority default one} when omitted.\n     */\n    shareAs(this: void, alias: ShareRef<T>, priority?: number): void;\n\n    /**\n     * Builds a shared value registrar instance with another default priority.\n     *\n     * @param priority - New default shared value priority.\n     *\n     * @returns New registrar instance with {@link priority} set to the given value.\n     */\n    withPriority(this: void, priority: number): Registrar<T>;\n\n  }\n\n  /**\n   * Shared value provider.\n   *\n   * Can be used to {@link Share.createRegistrar create} a {@link SharedValue.Registrar} instance.\n   *\n   * @typeParam TSharer - Supported sharer component type.\n   * @typeParam T - Shared value type.\n   */\n  export interface Provider<T, TSharer extends object = any> {\n\n    /**\n     * The default priority of the shared value.\n     *\n     * Equals to `0` when absent or negative.\n     */\n    readonly priority?: number;\n\n    /**\n     * Shared value supply.\n     *\n     * Stops value sharing once cut off.\n     *\n     * New supply instance will be created when absent.\n     */\n    readonly supply?: Supply;\n\n    /**\n     * Provides shared value for the given component context.\n     *\n     * @typeParam TComponent - Actual sharer component type.\n     * @param context - Sharer component context to provide value for.\n     *\n     * @returns Either a shared value, or its `AfterEvent` keeper.\n     */\n    provide<TComponent extends TSharer>(context: ComponentContext<TComponent>): T | AfterEvent<[T?]>;\n\n  }\n\n}\n\nexport const SharedValue = {\n\n  /**\n   * Checks whether the given value shared by component is has details.\n   *\n   * @typeParam T - Shared value type.\n   * @param value - Shared value to check.\n   *\n   * @returns `true` if the given value is an object implementing a {@link SharedValue.Detailed} interface.\n   */\n  hasDetails<T>(\n      this: void,\n      value: SharedValue<T>,\n  ): value is SharedValue.Detailed<T> {\n    return !!value\n        && typeof value === 'object'\n        && typeof (value as SharedValue.Detailed<T>)[SharedValue__symbol] === 'object';\n  },\n\n};\n","import { applyContextTo, ContextBuilder, ContextBuilder__symbol, ContextRegistry } from '@proc7ts/context-values';\nimport { applyContextAfter } from '@proc7ts/context-values/updatable';\nimport { AfterEvent, isAfterEvent, translateAfter } from '@proc7ts/fun-events';\nimport { Supply } from '@proc7ts/supply';\nimport { ComponentContext } from '@wesib/wesib';\nimport { Share } from './share';\nimport { Share__symbol } from './share-ref';\nimport { SharedValue, SharedValue__symbol } from './shared-value';\n\n/**\n * @internal\n */\nexport function SharedValue$ContextBuilder<T, TSharer extends object>(\n    share: Share<T>,\n    provider: SharedValue.Provider<T, TSharer>,\n): ContextBuilder<ComponentContext<TSharer>> {\n  return {\n    [ContextBuilder__symbol]: registry => {\n\n      const registrar = share.createRegistrar(registry, provider);\n\n      share.shareValue(registrar);\n\n      return registrar.supply;\n    },\n  };\n}\n\n/**\n * @internal\n */\nexport function SharedValue$Registrar<T, TSharer extends object>(\n    registry: ContextRegistry<ComponentContext<TSharer>>,\n    provider: SharedValue.Provider<T, TSharer>,\n): SharedValue.Registrar<T> {\n  return SharedValue$BoundRegistrar(registry, SharedValue$bindProvider(provider));\n}\n\nfunction SharedValue$BoundRegistrar<T, TSharer extends object>(\n    registry: ContextRegistry<ComponentContext<TSharer>>,\n    provider: SharedValue$BoundProvider<T, TSharer>,\n): SharedValue.Registrar<T> {\n\n  const { priority, supply, provide } = provider;\n\n  return {\n    priority,\n    supply,\n    shareAs: (alias, newPriority = priority) => {\n      newPriority = Math.max(0, newPriority);\n      registry.provide({\n        a: alias[Share__symbol],\n        by: newPriority\n            ? SharedValue$detailedProvider(provide, newPriority)\n            : SharedValue$bareProvider(provide),\n      }).as(supply);\n    },\n    withPriority: newPriority => SharedValue$BoundRegistrar(\n        registry,\n        { ...provider, priority: Math.max(0, newPriority) },\n    ),\n  };\n}\n\ninterface SharedValue$BoundProvider<T, TSharer extends object> {\n  readonly priority: number;\n  readonly supply: Supply;\n  provide(this: void, context: ComponentContext<TSharer>): T | AfterEvent<[T?]>;\n}\n\nfunction SharedValue$bindProvider<T, TSharer extends object>(\n    provider: SharedValue.Provider<T>,\n): SharedValue$BoundProvider<T, TSharer> {\n\n  const priority = provider.priority ? Math.max(0, provider.priority) : 0;\n  const { supply = new Supply() } = provider;\n\n  return {\n    priority,\n    supply,\n    provide: (context: ComponentContext): T | AfterEvent<[T?]> => {\n\n      const value = provider.provide(context);\n\n      if (isAfterEvent(value)) {\n        return value.do(\n            applyContextAfter(context),\n        );\n      }\n\n      return applyContextTo(value)(context);\n    },\n  };\n}\n\nfunction SharedValue$bareProvider<T, TComponent extends object>(\n    provider: (context: ComponentContext<TComponent>) => T | AfterEvent<[T?]>,\n): (\n    context: ComponentContext<TComponent>,\n) => T | AfterEvent<T[]> | null | undefined {\n  return context => {\n\n    const value = provider(context);\n\n    if (isAfterEvent(value)) {\n      return value.do(\n          translateAfter((send, value?) => value !== undefined ? send(value) : send()),\n      );\n    }\n\n    return value;\n  };\n}\n\nfunction SharedValue$detailedProvider<T, TComponent extends object>(\n    provider: (context: ComponentContext<TComponent>) => T | AfterEvent<[T?]>,\n    priority: number,\n): (\n    context: ComponentContext<TComponent>,\n) => SharedValue.Detailed<T> {\n  return context => ({\n    [SharedValue__symbol]: {\n      priority,\n      get: () => provider(context),\n    },\n  });\n}\n","import { valueProvider } from '@proc7ts/primitives';\nimport type { ContextValues } from '../context-values';\nimport type { ContextValueProvider } from '../registry';\nimport type { Contextual } from './contextual';\nimport { Contextual__symbol, isContextual } from './contextual';\n\n/**\n * Converts a value or its {@link Contextual.Mandatory mondatory contextual reference} to mandatory context value\n * {@link ContextValueProvider provider}.\n *\n * @typeParam T - Value type.\n * @typeParam TCtx - Supported context type.\n * @param value - A value to convert. May be either a bare value, its contextual reference, or `null`/`undefined` to\n * provide nothing.\n *\n * @returns Mandatory context value provider.\n */\nexport function applyContextTo<T, TCtx extends ContextValues = ContextValues>(\n    value: Contextual.Mandatory<T, TCtx> | T | null | undefined,\n): (this: void, context: TCtx) => T;\n\n/**\n * Converts a value or its {@link Contextual contextual reference} to context value {@link ContextValueProvider\n * provider}.\n *\n * @typeParam T - Value type.\n * @typeParam TCtx - Supported context type.\n * @param value - A value to convert. May be either a bare value, its contextual reference, or `null`/`undefined` to\n * provide nothing.\n *\n * @returns Context value provider.\n */\nexport function applyContextTo<T, TCtx extends ContextValues = ContextValues>(\n    value: Contextual<T, TCtx> | T | null | undefined,\n): ContextValueProvider<T, TCtx>;\n\nexport function applyContextTo<T, TCtx extends ContextValues = ContextValues>(\n    value: Contextual<T, TCtx> | T | null | undefined,\n): ContextValueProvider<T, TCtx> {\n  return isContextual(value)\n      ? context => value[Contextual__symbol](context)\n      : valueProvider(value);\n}\n","import { nodeHost } from '@frontmeans/dom-primitives';\nimport { ContextKey__symbol, ContextRegistry } from '@proc7ts/context-values';\nimport { ContextUpKey, ContextUpRef } from '@proc7ts/context-values/updatable';\nimport {\n  afterAll,\n  AfterEvent,\n  afterEventBy,\n  afterThe,\n  deduplicateAfter,\n  deduplicateAfter_,\n  digAfter_,\n  isAfterEvent,\n  sendEventsTo,\n  shareAfter,\n  translateAfter_,\n} from '@proc7ts/fun-events';\nimport { Supply } from '@proc7ts/supply';\nimport { BootstrapContext, ComponentContext, ComponentElement, ComponentSlot, DefinitionContext } from '@wesib/wesib';\nimport { ShareLocator } from './share-locator';\nimport { Share__symbol, ShareRef } from './share-ref';\nimport { ShareRegistry } from './share-registry.impl';\nimport { Share$, Share$impl__symbol } from './share.impl';\nimport { SharedValue, SharedValue__symbol } from './shared-value';\nimport { SharedValue$Registrar } from './shared-value.impl';\n\n/**\n * A kind of the value a component shares with the nested ones.\n *\n * The sharing implies the following:\n *\n * - The sharer component {@link addSharer registers} its element name as the one bound to sharer.\n * - The sharer component {@link shareValue provides} an (updatable) shared value within its context.\n * - The consumer component {@link valueFor obtains} the shared value by searching the parent element with a sharer\n *   bound to it.\n *\n * A share instance is used as an identifier in all these steps.\n *\n * A {@link Shared @Shared} component property decorator may be used to automate this.\n *\n * @typeParam T - Shared value type.\n */\nexport class Share<T> implements ShareRef<T>, ContextUpRef<AfterEvent<[T?]>, SharedValue<T>> {\n\n  /**\n   * @internal\n   */\n  readonly [Share$impl__symbol]: Share$<T>;\n\n  /**\n   * Constructs new component share.\n   *\n   * @param name - A human-readable name of the share.\n   * @param options - Constructed share options.\n   */\n  constructor(name: string, options: Share.Options<T> = {}) {\n    this[Share$impl__symbol] = new Share$(this, name, options);\n  }\n\n  /**\n   * Refers to itself.\n   */\n  get [Share__symbol](): this {\n    return this;\n  }\n\n  /**\n   * A human-readable name of the name.\n   */\n  get name(): string {\n    return this[Share$impl__symbol].name;\n  }\n\n  /**\n   * A key of the sharer component context value containing an `AfterEvent` keeper of the shared value.\n   */\n  get [ContextKey__symbol](): ContextUpKey<AfterEvent<[T?]>, SharedValue<T>> {\n    return this[Share$impl__symbol].key;\n  }\n\n  /**\n   * Registers a sharer component.\n   *\n   * The registration is necessary for consumers to be able to find the element bound to sharer by that element's name.\n   *\n   * @param defContext - The definition context of the sharer component.\n   * @param options - Value sharing options.\n   *\n   * @returns Sharer registration supply. Revokes the sharer registration once cut off.\n   */\n  addSharer(defContext: DefinitionContext, options?: SharedValue.Options): Supply {\n    return this[Share$impl__symbol].addSharer(defContext, options);\n  }\n\n  /**\n   * Shares a value by providing it for the sharer component context.\n   *\n   * @param registrar - Shared value registrar.\n   *\n   * @return A builder of shared value for component context.\n   */\n  shareValue(\n      registrar: SharedValue.Registrar<T>,\n  ): void {\n    this[Share$impl__symbol].shareValue(registrar);\n  }\n\n  /**\n   * Creates a shared value registrar that shares a value created by the given provider.\n   *\n   * @typeParam TSharer - Sharer component type.\n   * @param registry - Target component context registry.\n   * @param provider - Shared value provider.\n   *\n   * @returns New shared value registrar.\n   */\n  createRegistrar<TSharer extends object>(\n      registry: ContextRegistry<ComponentContext<TSharer>>,\n      provider: SharedValue.Provider<T, TSharer>,\n  ): SharedValue.Registrar<T> {\n    return SharedValue$Registrar(registry, provider);\n  }\n\n  /**\n   * Locates a shared value for the consuming component.\n   *\n   * Searches among parent elements for the one bound to the sharer component, then obtains the shared value from\n   * the sharer's context.\n   *\n   * @param consumer - Consumer component context.\n   * @param options - Location options.\n   *\n   * @returns An `AfterEvent` keeper of the shared value and its sharer context, if found.\n   */\n  valueFor(\n      consumer: ComponentContext,\n      options: ShareLocator.Options = {},\n  ): AfterEvent<[T, ComponentContext] | []> {\n\n    const { local } = options;\n    const sharers = consumer.get(BootstrapContext).get(ShareRegistry).sharers(this);\n    const status = consumer.readStatus.do(\n        deduplicateAfter_(\n            (a, b) => a === b,\n            Share$consumerStatus,\n        ),\n    );\n\n    return afterAll({\n      sharers,\n      status,\n    }).do(\n        digAfter_(({ sharers: [sharers] }): AfterEvent<[T, ComponentContext] | []> => {\n          if (local) {\n            if (sharers.sharers.has(consumer.componentType)) {\n              return Share$sharedValue(this, consumer);\n            }\n            if (local === true) {\n              return afterThe();\n            }\n          }\n\n          let element: ComponentElement | undefined = nodeHost(consumer.element);\n\n          while (element) {\n            if (sharers.names.has(element.tagName.toLowerCase())) {\n              return ComponentSlot.of(element).read.do(\n                  digAfter_(sharer => sharer ? Share$sharedValue(this, sharer) : afterThe()),\n              );\n            }\n\n            element = nodeHost(element);\n          }\n\n          return afterThe();\n        }),\n        deduplicateAfter(),\n    );\n  }\n\n  /**\n   * Selects a shared value among candidates.\n   *\n   * It is especially useful when the value shared by multiple sharers.\n   *\n   * By default:\n   *\n   * - Prefers bare value.\n   * - Prefers the value from {@link SharedValue.Detailed detailed specifier} with higher priority\n   *   (i.e. lesser {@link SharedValue.Details.priority priority value}).\n   * - Prefers the value declared last.\n   *\n   * @param values - The values shared by sharers. May contain a {@link SharedValue.Detailed detailed value\n   * specifiers} in addition to pure values.\n   *\n   * @returns An `AfterEvent` keeper of selected value, if present.\n   */\n  selectValue(...values: SharedValue<T>[]): AfterEvent<[T?]> {\n\n    let selected: SharedValue.Details<T> | undefined;\n\n    for (let i = values.length - 1; i >= 0; --i) {\n\n      const value = values[i];\n\n      if (!SharedValue.hasDetails(value)) {\n        return afterThe(value);\n      }\n\n      const details = value[SharedValue__symbol];\n\n      if (!selected || selected.priority > details.priority) {\n        selected = details;\n      }\n    }\n\n    if (!selected) {\n      return afterThe();\n    }\n\n    return afterEventBy<[T?]>(receiver => {\n\n      const value = selected!.get();\n\n      if (isAfterEvent(value)) {\n        value(receiver);\n      } else {\n        sendEventsTo(receiver)(value);\n      }\n    }).do(\n        shareAfter,\n    );\n  }\n\n}\n\nexport namespace Share {\n\n  /**\n   * {@link Share Component share} options.\n   *\n   * @typeParam T - Shared value type.\n   */\n  export interface Options<T> {\n\n    /**\n     * Component share reference(s) the share provides a value for in addition to the one it provides for itself.\n     *\n     * The order of aliases is important. It defines the {@link SharedValue.Details.priority priority} of the\n     * value shared for the corresponding share.\n     */\n    readonly as?: ShareRef<T> | readonly ShareRef<T>[];\n\n  }\n\n  /**\n   * A key of context value containing an `AfterEvent` keeper of shared value.\n   *\n   * @typeParam T - Shared value type.\n   */\n  export type Key<T> = ContextUpKey<AfterEvent<[T?]>, SharedValue<T>>;\n\n  /**\n   * A source value accepted by {@link Share component share} context value.\n   *\n   * Either a single shared value, its {@link SharedValue.Detailed detailed descriptor}, or an `AfterEvent`\n   * keeper of the above.\n   *\n   * @typeParam T - Shared value type.\n   */\n  export type Source<T> = ContextUpKey.Source<SharedValue<T>>;\n\n}\n\nfunction Share$consumerStatus([{ settled, connected }]: [ComponentContext]): 0 | 1 | 2 {\n  return connected ? 2 : settled ? 1 : 0;\n}\n\nfunction Share$sharedValue<T>(\n    share: Share<T>,\n    sharer: ComponentContext,\n): AfterEvent<[T, ComponentContext] | []> {\n  return sharer.get(share).do(\n      translateAfter_((send, value?) => value ? send(value, sharer) : send()),\n  );\n}\n","import { AfterEvent } from '@proc7ts/fun-events';\nimport { ComponentContext } from '@wesib/wesib';\nimport { isShareRef, Share__symbol, ShareRef } from './share-ref';\n\n/**\n * Shared value locator.\n *\n * Can be one of:\n *\n * - component share {@link ShareRef reference},\n * - shared value locator specified {@link ShareLocator.Spec},\n * - {@link ShareLocator.CustomWithFallback custom} shared value locator, or\n * - `null`/`undefined` to locate a fallback share.\n *\n * A {@link shareLocator} function can be used to convert arbitrary locator to a function.\n *\n * @typeParam T - Shared value type.\n */\nexport type ShareLocator<T> =\n    | ShareRef<T>\n    | ShareLocator.Spec<T>\n    | ShareLocator.CustomWithFallback<T>\n    | null\n    | undefined;\n\n/**\n * Converts mandatory shared value locator to locator function.\n *\n * @typeParam T - Shared value type.\n * @param locator - Shared value locator to convert.\n * @param defaultOptions - Default shared value locator options.\n *\n * @returns Shared value locator function.\n */\nexport function shareLocator<T>(\n    locator: ShareLocator.Mandatory<T>,\n    defaultOptions?: ShareLocator.Options,\n): ShareLocator.Fn<T>;\n\n/**\n * Converts arbitrary shared value locator to locator function.\n *\n * @typeParam T - Shared value type.\n * @param locator - Shared value locator to convert.\n * @param defaultSpec - Default shared value locator specifier including fallback share reference.\n *\n * @returns Shared value locator function.\n */\nexport function shareLocator<T>(\n    locator: ShareLocator<T>,\n    defaultSpec: ShareLocator.MandatorySpec<T>,\n): ShareLocator.Fn<T>;\n\nexport function shareLocator<T>(\n    locator:\n        | ShareRef<T>\n        | Partial<ShareLocator.MandatorySpec<T>>\n        | ShareLocator.CustomWithFallback<T>\n        | null\n        | undefined,\n    defaultSpec: ShareLocator.Spec<T> = {},\n): ShareLocator.Fn<T> {\n  if (isShareRef(locator)) {\n\n    const share = locator[Share__symbol];\n\n    return (consumer, options = {}) => {\n\n      const { local = defaultSpec.local } = options;\n\n      return share.valueFor(consumer, { local });\n    };\n  }\n\n  if (typeof locator === 'function') {\n\n    const { local: localByDefault = false, share: shareByDefault } = defaultSpec;\n\n    return (consumer, options = {}) => {\n\n      const { share = shareByDefault!, local = localByDefault } = options;\n\n      return locator(consumer, { share, local });\n    };\n  }\n\n  const { share: shareRef = defaultSpec.share!, local: localByDefault = defaultSpec.local } = locator || {};\n  const share = shareRef[Share__symbol];\n\n  return (consumer, options = {}) => {\n\n    const { local = localByDefault } = options;\n\n    return share.valueFor(consumer, { local });\n  };\n}\n\nexport namespace ShareLocator {\n\n  /**\n   * Mandatory shared value locator.\n   *\n   * Can be one of:\n   *\n   * - component share {@link ShareRef reference},\n   * - shared value locator specified {@link ShareLocator.Spec}, or\n   * - {@link ShareLocator.Custom custom} shared value locator.\n   *\n   * A {@link shareLocator} function can be used to convert arbitrary locator to a function.\n   *\n   * @typeParam T - Shared value type.\n   */\n  export type Mandatory<T> =\n      | ShareRef<T>\n      | MandatorySpec<T>\n      | Custom<T>;\n\n  /**\n   * Shared value location options.\n   */\n  export interface Options {\n\n    /**\n     * Whether to search locally, in consumer component itself.\n     *\n     * - `false` (by default), to start the search from consumer's parent,\n     * - `true` to search locally, i.e. only in consumer component, or\n     * - `'too'` to start the search from consumer component.\n     */\n    readonly local?: boolean | 'too';\n\n  }\n\n  /**\n   * Shared value location options with all properties present.\n   */\n  export type FullOptions = Required<Options>;\n\n  /**\n   * Shared value locator specifier.\n   *\n   * @typeParam T - Share value type.\n   */\n  export interface Spec<T> extends Options {\n\n    /**\n     * Target share.\n     */\n    readonly share?: ShareRef<T>;\n\n  }\n\n  /**\n   * Mandatory shared value locator specifier.\n   *\n   * @typeParam T - Share value type.\n   */\n  export interface MandatorySpec<T> extends Spec<T> {\n\n    /**\n     * Target share.\n     */\n    readonly share: ShareRef<T>;\n\n  }\n\n  /**\n   * Shared value locator specifier with all properties set.\n   *\n   * @typeParam T - Share value type.\n   */\n  export type FullSpec<T> = Required<MandatorySpec<T>>;\n\n  /**\n   * Signature of custom shared value locator.\n   *\n   * @typeParam T - Shared value type.\n   * @typeParam consumer - Consumer component context.\n   * @typeParam options - Shared value location options.\n   *\n   * @returns An `AfterEvent` keeper of the shared value and its sharer context, if found.\n   */\n  export type Custom<T> =\n  /**\n   * @param consumer - Consumer component context.\n   * @param options - Full shared value location options.\n   *\n   * @returns An `AfterEvent` keeper of the shared value and its sharer context, if found.\n   */\n      (\n          this: void,\n          consumer: ComponentContext,\n          options: FullOptions,\n      ) => AfterEvent<[] | [T, ComponentContext]>;\n\n  /**\n   * Signature of custom shared value locator that expects a fallback share reference to be specified.\n   *\n   * @typeParam T - Shared value type.\n   */\n  export type CustomWithFallback<T> =\n  /**\n   * @param consumer - Consumer component context.\n   * @param options - Full shared value location specifier, including fallback share reference.\n   *\n   * @returns An `AfterEvent` keeper of the shared value and its sharer context, if found.\n   */\n      (\n          this: void,\n          consumer: ComponentContext,\n          spec: FullSpec<T>,\n      ) => AfterEvent<[] | [T, ComponentContext]>;\n\n  /**\n   * Signature of shared value locator function.\n   *\n   * Can be constructed by {@link shareLocator} function.\n   *\n   * @typeParam T - Shared value type.\n   */\n  export type Fn<T> =\n  /**\n   * @param consumer - Consumer component context.\n   * @param options - Shared value location options.\n   *\n   * @returns An `AfterEvent` keeper of the shared value and its sharer context, if found.\n   */\n      (\n          this: void,\n          consumer: ComponentContext,\n          defaultSpec?: Spec<T>,\n      ) => AfterEvent<[] | [T, ComponentContext]>;\n\n}\n","import { Contextual, Contextual__symbol } from '@proc7ts/context-values';\nimport {\n  AfterEvent,\n  AfterEvent__symbol,\n  afterValue,\n  EventKeeper,\n  trackValueBy,\n  ValueTracker,\n} from '@proc7ts/fun-events';\nimport { noop, valueProvider, valueRecipe } from '@proc7ts/primitives';\nimport { ComponentContext } from '@wesib/wesib';\n\nconst Shareable$Internals__symbol = (/*#__PURE__*/ Symbol('Shareable.internals'));\n\n/**\n * Abstract implementation of value shareable by component.\n *\n * Shareable instance contains a {@link body} that become usable only when bound to sharer component.\n *\n * @typeParam TBody - Shareable body type.\n * @typeParam TSharer - Sharer component type.\n */\nexport class Shareable<TBody = unknown, TSharer extends object = any>\n    implements EventKeeper<[TBody]>, Contextual<Shareable<TBody, TSharer>> {\n\n  /**\n   * Converts shareable body or its provider to provider that always returns an `AfterEvent` keeper of shareable body.\n   *\n   * @typeParam TBody - Shareable body type.\n   * @typeParam TSharer - Sharer component type.\n   * @param body - Either shareable body, or its provider.\n   *\n   * @returns Shareable body provider.\n   */\n  static provider<TBody = unknown, TSharer extends object = any>(\n      body: TBody | Shareable.Provider<TBody, TSharer>,\n  ): (\n      this: void,\n      sharer: ComponentContext<TSharer>,\n  ) => AfterEvent<[TBody]> {\n\n    const provider = valueRecipe(body);\n\n    return context => afterValue(provider(context));\n  }\n\n  /**\n   * @internal\n   */\n  private [Shareable$Internals__symbol]: Shareable$Internals<TBody, TSharer>;\n\n  /**\n   * Constructs shareable instance.\n   *\n   * @param body - Either shareable body, or its provider.\n   */\n  constructor(body: TBody | Shareable.Provider<TBody, TSharer>) {\n    this[Shareable$Internals__symbol] = new Shareable$Internals(this, body);\n  }\n\n  /**\n   * Sharer component context.\n   *\n   * Accessing it throws an exception until bound to sharer.\n   */\n  get sharer(): ComponentContext<TSharer> {\n    return this[Shareable$Internals__symbol].sharer();\n  }\n\n  /**\n   * An `AfterEvent` keeper of shareable body.\n   *\n   * An `[AfterEvent__symbol]` method always returns this value.\n   */\n  get read(): AfterEvent<[TBody]> {\n    return this[Shareable$Internals__symbol].get().read;\n  }\n\n  /**\n   * Binds this shareable instance to sharer component.\n   *\n   * @param sharer - Sharer component context.\n   *\n   * @returns `this` instance.\n   */\n  [Contextual__symbol](sharer: ComponentContext): this {\n    this[Shareable$Internals__symbol].bind(sharer);\n    return this;\n  }\n\n  [AfterEvent__symbol](): AfterEvent<[TBody]> {\n    return this.read;\n  }\n\n  /**\n   * Shareable body.\n   *\n   * Accessing is throws an exception until bound to sharer.\n   */\n  get body(): TBody {\n    return this[Shareable$Internals__symbol].get().it;\n  }\n\n}\n\nexport namespace Shareable {\n\n  /**\n   * Shareable provider signature.\n   *\n   * Provides shareable body rather the shareable instance itself.\n   *\n   * @typeParam TBody - Shareable body type.\n   * @typeParam TSharer - Sharer component type.\n   */\n  export type Provider<TBody = unknown, TSharer extends object = any> =\n  /**\n   * @param sharer - Sharer component context.\n   *\n   * @returns Either shareable body instance, or an `AfterEvent` keeper reporting one.\n   */\n      (\n          this: void,\n          sharer: ComponentContext<TSharer>,\n      ) => TBody | AfterEvent<[TBody]>;\n\n}\n\nclass Shareable$Internals<TBody, TSharer extends object> {\n\n  private readonly _get: (\n      this: void,\n      sharer: ComponentContext<TSharer>,\n  ) => AfterEvent<[TBody]>;\n\n  constructor(\n      private readonly _source: Shareable<TBody, TSharer>,\n      body: TBody | Shareable.Provider<TBody, TSharer>,\n  ) {\n    this._get = Shareable.provider(body);\n  }\n\n  sharer(): ComponentContext<TSharer> {\n    this._notBound();\n  }\n\n  get(): ValueTracker<TBody> {\n    this._notBound();\n  }\n\n  bind(sharer: ComponentContext<TSharer>): void {\n    this.bind = noop;\n    this.sharer = valueProvider(sharer);\n    this.get = () => {\n\n      const tracker = trackValueBy(this._get(sharer));\n\n      this.get = valueProvider(tracker);\n\n      return tracker;\n    };\n  }\n\n  private _notBound(): never {\n    throw new TypeError(`${String(this._source)} is not properly shared yet`);\n  }\n\n}\n","import { Contextual__symbol, isContextual } from '@proc7ts/context-values';\nimport { AfterEvent, isAfterEvent, trackValue, trackValueBy, ValueTracker } from '@proc7ts/fun-events';\nimport { noop } from '@proc7ts/primitives';\nimport { Supply } from '@proc7ts/supply';\nimport { ComponentClass, ComponentContext, ComponentInstance, ComponentProperty } from '@wesib/wesib';\n\n/**\n * @internal\n */\nexport class ShareAccessor<T, TClass extends ComponentClass> {\n\n  private readonly _get: () => T | AfterEvent<[T?]>;\n  private readonly _set: (value: T | AfterEvent<[T?]>) => void;\n  private readonly _ctx: ComponentContext<InstanceType<TClass>>;\n  private _valSupply?: Supply;\n  readonly val: ValueTracker<T | undefined>;\n\n  constructor(\n      desc: ComponentProperty.Descriptor<T | AfterEvent<[T?]>, TClass>,\n      component: ComponentInstance<InstanceType<TClass>>,\n  ) {\n    this._get = desc.get.bind(undefined, component);\n    this._set = desc.writable ? desc.set.bind(undefined, component) : noop;\n    this._ctx = ComponentContext.of(component);\n\n    const value = this._get();\n    let dynSync = false;\n\n    if (isAfterEvent(value)) {\n      dynSync = true;\n      this.val = trackValueBy(value);\n    } else {\n      this.val = trackValue(value);\n    }\n\n    this.val.supply.needs(this._ctx);\n\n    // Bind to context as the very first operation\n    this.val.read(value => isContextual(value) && value[Contextual__symbol](this._ctx));\n\n    if (dynSync) {\n      this._syncDyn();\n    } else {\n      this._syncVal();\n    }\n  }\n\n  get(): T | AfterEvent<[T?]> {\n    return this._valSupply ? this.val.it! : this.val.read;\n  }\n\n  set(value: T | AfterEvent<[T?]>): void {\n    if (isAfterEvent(value)) {\n      this.val.by(value);\n      this._syncDyn();\n    } else {\n      this.val.it = value;\n      this._syncVal();\n    }\n  }\n\n  private _syncVal(): void {\n    if (!this._valSupply) {\n      this._valSupply = this.val.read(value => this._set(value!));\n    }\n  }\n\n  private _syncDyn(): void {\n    if (this._valSupply) {\n      this._valSupply.off();\n      this._valSupply = undefined;\n      this._set(this.val.read);\n    }\n  }\n\n}\n","import { AfterEvent, digAfter_ } from '@proc7ts/fun-events';\nimport { Class, valuesProvider } from '@proc7ts/primitives';\nimport {\n  ComponentClass,\n  ComponentInstance,\n  ComponentProperty,\n  ComponentPropertyDecorator,\n  DefinitionContext,\n  DefinitionSetup,\n} from '@wesib/wesib';\nimport { Share } from './share';\nimport { ShareAccessor } from './share-accessor.impl';\nimport { Share__symbol } from './share-ref';\nimport { SharedValue$ContextBuilder } from './shared-value.impl';\nimport { targetShare, TargetShare } from './target-share';\n\n/**\n * Builds a decorator of component property that {@link Share shares} its value.\n *\n * The decorated property should return either a static value, or its `AfterEvent` keeper if the case the value is\n * updatable.\n *\n * Applies current component context to `Contextual` shared values.\n *\n * @typeParam T - Shared value type.\n * @typeParam TClass - A type of decorated component class.\n * @param share - Target component share.\n * @param define - Sharing property definition builders.\n *\n * @returns Component property decorator.\n */\nexport function Shared<T, TClass extends ComponentClass = Class>(\n    share: TargetShare<T>,\n    ...define: Shared.Definer<T, TClass>[]\n): ShareDecorator<T, TClass> {\n\n  const { share: { [Share__symbol]: shr }, local } = targetShare(share);\n\n  return ComponentProperty(\n      descriptor => {\n\n        const accessorKey = Symbol(`${String(descriptor.key)}:shared`);\n\n        type Component = ComponentInstance<InstanceType<TClass>> & {\n          [accessorKey]?: ShareAccessor<T, TClass>;\n        };\n\n        const accessor = (component: Component): ShareAccessor<T, TClass> => component[accessorKey]\n            || (component[accessorKey] = new ShareAccessor(descriptor, component));\n\n        return {\n          get: component => accessor(component).get(),\n          set: descriptor.writable\n              ? (component, value) => accessor(component).set(value)\n              : undefined,\n          componentDef: {\n            setup(setup: DefinitionSetup<InstanceType<TClass>>): void {\n              setup.perComponent(SharedValue$ContextBuilder(\n                  shr,\n                  {\n                    provide: context => context.onceReady.do(\n                        digAfter_(\n                            ({ component }) => accessor(component).val,\n                            valuesProvider<[T?]>(),\n                        ),\n                    ),\n                  },\n              ));\n            },\n            define(defContext: DefinitionContext<InstanceType<TClass>>) {\n              shr.addSharer(defContext, { local });\n            },\n          },\n        };\n\n\n      },\n      ...define.map(define => (\n          descriptor: ComponentProperty.Descriptor<T | AfterEvent<[T?]>, TClass>,\n      ) => define({ ...descriptor, share: shr })),\n  );\n}\n\n/**\n * Decorator of component property that {@link Share shares} its value.\n *\n * Built by {@link Shared @Shared} decorator.\n *\n * @typeParam T - Shared value type.\n * @typeParam TClass - A type of decorated component class.\n */\nexport type ShareDecorator<T, TClass extends ComponentClass = Class> =\n    ComponentPropertyDecorator<T | AfterEvent<[T?]>, TClass>;\n\nexport namespace Shared {\n\n  /**\n   * A descriptor of the component property that {@link Share shares} its value.\n   *\n   * Passed to {@link Definer property definer} by {@link Shared @Shared} decorator to build a {@link Definition\n   * property definition}.\n   *\n   * @typeParam T - Shared value type.\n   * @typeParam TClass - A type of decorated component class.\n   */\n  export interface Descriptor<T, TClass extends ComponentClass = Class>\n      extends ComponentProperty.Descriptor<T | AfterEvent<[T?]>, TClass> {\n\n    /**\n     * Target share instance.\n     */\n    readonly share: Share<T>;\n\n  }\n\n  /**\n   * A signature of definition builder of the component property that {@link Share shares} its value.\n   *\n   * This is a function called by {@link Shared @Shared} decorator to apply additional definitions.\n   *\n   * @typeParam T - Shared value type.\n   * @typeParam TClass - A type of decorated component class.\n   */\n  export type Definer<T, TClass extends ComponentClass = Class> =\n  /**\n   * @param descriptor - Decorated component property descriptor.\n   *\n   * @returns Component property definition, or nothing if the property definition is not to be changed.\n   */\n      (\n          this: void,\n          descriptor: Descriptor<T, TClass>,\n      ) => Definition<T, TClass> | void;\n\n  /**\n   * A definition of component property that {@link Share shares} its value.\n   *\n   * @typeParam T - Shared value type.\n   * @typeParam TClass - A type of component class.\n   */\n  export type Definition<T, TClass extends ComponentClass = Class> =\n      ComponentProperty.Definition<T | AfterEvent<[T?]>, TClass>;\n\n}\n","import { isShareRef, ShareRef } from './share-ref';\n\n/**\n * A specifier of component share to share the value of.\n *\n * Can be one of:\n *\n * - component share {@link ShareRef reference}, or\n * - detailed target component share {@link TargetShare.Spec specifier}.\n *\n * @typeParam T - Shared value type.\n */\nexport type TargetShare<T> =\n    | ShareRef<T>\n    | TargetShare.Spec<T>;\n\nexport namespace TargetShare {\n\n  /**\n   * A detailed specifier of the component share to share the value of.\n   *\n   * @typeParam T - Shared value type.\n   */\n  export interface Spec<T> {\n\n    /**\n     * Target component share reference.\n     */\n    readonly share: ShareRef<T>;\n\n    /**\n     * Whether to share is local.\n     *\n     * - `true` to make the value available only locally, i.e. only when requested by sharer context.\n     * - `false` (by default) to make the value available to nested components too.\n     */\n    readonly local?: boolean;\n\n  }\n\n}\n\n/**\n * Converts arbitrary {@link TargetShare target component share} to its detailed {@link TargetShare.Spec specifier}.\n *\n * @typeParam T - Share value type.\n * @param target\n */\nexport function targetShare<T>(target: TargetShare<T>): TargetShare.Spec<T> {\n  return isShareRef(target) ? { share: target } : target;\n}\n","import {\n  InAspect,\n  InBuilder,\n  InControl,\n  InNamespaceAliaser,\n  InRenderScheduler,\n  knownInAspect,\n} from '@frontmeans/input-aspects';\nimport { ComponentContext, DefaultNamespaceAliaser, ElementRenderScheduler } from '@wesib/wesib';\nimport { Field } from './field';\nimport { Form } from './form';\nimport { FormPreset } from './form-preset';\n\n/**\n * @internal\n */\nexport const DefaultFormPreset: FormPreset.Spec = {\n\n  setupField<TValue, TSharer extends object>(\n      { sharer, control }: Field.Builder<TValue, TSharer>,\n  ): void {\n    DefaultFormPreset$setup(sharer, control);\n  },\n\n  setupForm<TModel, TElt extends HTMLElement, TSharer extends object>(\n      { sharer, control, element }: Form.Builder<TModel, TElt, TSharer>,\n  ): void {\n    DefaultFormPreset$setup(sharer, control);\n    DefaultFormPreset$setup(sharer, element);\n  },\n\n};\n\nfunction DefaultFormPreset$setup<TValue, TSharer extends object>(\n    sharer: ComponentContext<TSharer>,\n    builder: InBuilder<InControl<TValue>>,\n): void {\n\n  const nsAliaser = sharer.get(DefaultNamespaceAliaser);\n  const renderScheduler = sharer.get(ElementRenderScheduler);\n\n  builder\n      .addAspect(\n          InNamespaceAliaser,\n          {\n            applyAspect<TInstance, TKind extends InAspect.Application.Kind>(\n                _aspect: InAspect<TInstance, TKind>,\n            ): InAspect.Application.Result<TInstance, TValue, TKind> {\n              return knownInAspect(nsAliaser) as InAspect.Application.Result<TInstance, TValue, TKind>;\n            },\n          },\n      ).addAspect(\n      InRenderScheduler,\n      {\n        applyAspect<TInstance, TKind extends InAspect.Application.Kind>(\n            _aspect: InAspect<TInstance, TKind>,\n        ): InAspect.Application.Result<TInstance, TValue, TKind> {\n          return knownInAspect(renderScheduler) as InAspect.Application.Result<TInstance, TValue, TKind>;\n        },\n      },\n  );\n}\n","import { ContextKey__symbol, ContextSupply, ContextValueSlot } from '@proc7ts/context-values';\nimport { ContextUpKey } from '@proc7ts/context-values/updatable';\nimport { AfterEvent, AfterEvent__symbol, EventKeeper, mapAfter, supplyAfter } from '@proc7ts/fun-events';\nimport { DefaultFormPreset } from './default.preset.impl';\nimport { Field } from './field';\nimport { Form } from './form';\n\nclass FormPresetKey extends ContextUpKey<FormPreset, FormPreset.Spec> {\n\n  constructor() {\n    super('form-preset');\n  }\n\n  get upKey(): this {\n    return this;\n  }\n\n  grow(\n      slot: ContextValueSlot<\n          FormPreset,\n          ContextUpKey.Source<FormPreset.Spec>,\n          AfterEvent<FormPreset.Spec[]>>,\n  ): void {\n    slot.insert(new FormPreset(slot.seed.do(\n        mapAfter((...specs) => FormPreset.combine(...specs, DefaultFormPreset)),\n        supplyAfter(slot.context.get(ContextSupply)),\n    )));\n  }\n\n}\n\nconst FormPreset__key = (/*#__PURE__*/ new FormPresetKey());\nconst FormPreset$rules__symbol = (/*#__PURE__*/ Symbol('FormPreset.rules'));\n\n/**\n * Form controls preset.\n *\n * Any number of presets can be {@link FormPreset.Spec specified} in component context to be applies to forms\n * and fields. They would be combined into single preset available in component context.\n */\nexport class FormPreset implements FormPreset.Rules, EventKeeper<[FormPreset.Rules]> {\n\n  /**\n   * A key of component context value containing default form preset combined from all provided {@link FormPreset.Spec\n   * specifiers}.\n   *\n   * As a bare minimum it attaches the following aspects to controls:\n   *\n   * - `InRenderScheduler` set to `ElementRenderScheduler`,\n   * - `InNamespaceAliaser` set to `DefaultNamespaceAliaser.\n   */\n  static get [ContextKey__symbol](): ContextUpKey<FormPreset, FormPreset.Spec> {\n    return FormPreset__key;\n  }\n\n  /**\n   * Combines form preset specifiers.\n   *\n   * @param specs - Form preset specifiers to combine.\n   *\n   * @returns Form preset rules instance combining the given specifiers.\n   */\n  static combine(...specs: FormPreset.Spec[]): FormPreset.Rules {\n    return {\n      setupField: FormPreset$setupField(specs),\n      setupForm: FormPreset$setupForm(specs),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  private [FormPreset$rules__symbol]: FormPreset.Rules;\n\n  /**\n   * Constructs form preset.\n   *\n   * @param rules - An `AfterEvent` keeper of form preset {@link FormPreset.Rules rules}.\n   */\n  constructor(readonly rules: AfterEvent<[FormPreset.Rules]>) {\n    rules(rules => {\n      this[FormPreset$rules__symbol] = rules;\n    });\n  }\n\n  /**\n   * Builds an `AfterEvent` keeper of this form preset {@link FormPreset.Rules rules}.\n   */\n  [AfterEvent__symbol](): AfterEvent<[FormPreset.Rules]> {\n    return this.rules;\n  }\n\n  /**\n   * Sets up form field controls.\n   *\n   * @param builder - Target field builder.\n   */\n  setupField<TValue, TSharer extends object>(\n      builder: Field.Builder<TValue, TSharer>,\n  ): void {\n    this[FormPreset$rules__symbol].setupField(builder);\n  }\n\n  /**\n   * Sets up form controls.\n   *\n   * @param builder - Target form builder.\n   */\n  setupForm<TModel, TElt extends HTMLElement, TSharer extends object>(\n      builder: Form.Builder<TModel, TElt, TSharer>,\n  ): void {\n    this[FormPreset$rules__symbol].setupForm(builder);\n  }\n\n}\n\nexport namespace FormPreset {\n\n  /**\n   * A {@link FormPreset form preset} specifier.\n   *\n   * Contains a partial form preset implementation.\n   */\n  export interface Spec {\n\n    /**\n     * Sets up form field controls.\n     *\n     * @param builder - Target field builder.\n     */\n    setupField?<TValue, TSharer extends object>(\n        builder: Field.Builder<TValue, TSharer>,\n    ): void;\n\n    /**\n     * Sets up form controls.\n     *\n     * @param builder - Target form builder.\n     */\n    setupForm?<TModel, TElt extends HTMLElement, TSharer extends object>(\n        builder: Form.Builder<TModel, TElt, TSharer>,\n    ): void;\n\n  }\n\n  /**\n   * {@link FormPreset Form preset} rules.\n   *\n   * Multiple {@link Spec specifiers} could be combined into single rule instance by {@link FormPreset.combine} static\n   * method.\n   */\n  export interface Rules extends FormPreset.Spec {\n\n    setupField<TValue, TSharer extends object>(\n        this: void,\n        builder: Field.Builder<TValue, TSharer>,\n    ): void;\n\n    setupForm<TModel, TElt extends HTMLElement, TSharer extends object>(\n        this: void,\n        builder: Form.Builder<TModel, TElt, TSharer>,\n    ): void;\n\n  }\n\n}\n\nfunction FormPreset$setupField(\n    specs: readonly FormPreset.Spec[],\n): <TValue, TSharer extends object>(\n    builder: Field.Builder<TValue, TSharer>,\n) => void {\n  return specs.reduce(\n      (prev, spec) => spec.setupField\n          ? <TValue, TSharer extends object>(\n              builder: Field.Builder<TValue, TSharer>,\n          ): void => {\n            prev(builder);\n            spec.setupField!(builder);\n          }\n          : prev,\n      FormPreset$noFieldSetup,\n  );\n}\n\nfunction FormPreset$noFieldSetup<TValue, TSharer extends object>(\n    _builder: Field.Builder<TValue, TSharer>,\n): void {\n  // No field setup\n}\n\nfunction FormPreset$setupForm(\n    specs: readonly FormPreset.Spec[],\n): <TModel, TElt extends HTMLElement, TSharer extends object>(\n    builder: Form.Builder<TModel, TElt, TSharer>,\n) => void {\n  return specs.reduce(\n      (prev, spec) => spec.setupForm\n          ? <TModel, TElt extends HTMLElement, TSharer extends object>(\n              builder: Form.Builder<TModel, TElt, TSharer>,\n          ): void => {\n            prev(builder);\n            spec.setupForm!(builder);\n          }\n          : prev,\n      FormPreset$noFormSetup,\n  );\n}\n\nfunction FormPreset$noFormSetup<TModel, TElt extends HTMLElement, TSharer extends object>(\n    _builder: Form.Builder<TModel, TElt, TSharer>,\n): void {\n  // No form setup\n}\n","import { InControl } from '@frontmeans/input-aspects';\nimport { Contextual__symbol } from '@proc7ts/context-values';\nimport { noop } from '@proc7ts/primitives';\nimport { ComponentContext } from '@wesib/wesib';\nimport { Shareable } from '../shares';\n\n/**\n * Abstract unit of input {@link Form form}.\n *\n * Represents a form or its field control and contains its value.\n *\n * @typeParam TValue - Input value type.\n * @typeParam TControls - A type of input controls this unit represents.\n * @typeParam TSharer - Unit sharer component type.\n */\nexport abstract class FormUnit<\n    TValue,\n    TControls extends FormUnit.Controls<TValue> = FormUnit.Controls<TValue>,\n    TSharer extends object = any>\n    extends Shareable<TControls | undefined, TSharer> {\n\n  /**\n   * Constructs form unit.\n   *\n   * @param controls - Either input controls, or their provider.\n   */\n  constructor(// eslint-disable-line @typescript-eslint/no-useless-constructor\n      controls: TControls | Shareable.Provider<TControls | undefined, TSharer>,\n  ) {\n    super(controls);\n  }\n\n  /**\n   * Input control of the field, if present.\n   */\n  get control(): InControl<TValue> | undefined {\n    return this.body?.control;\n  }\n\n  [Contextual__symbol](sharer: ComponentContext): this {\n    super[Contextual__symbol](sharer);\n    this.read(noop).needs(sharer); // Create controls eagerly.\n    return this;\n  }\n\n}\n\nexport namespace FormUnit {\n\n  /**\n   * A value type for the given form unit type.\n   *\n   * @typeParam TUnit - Target unit type.\n   */\n  export type ValueType<TUnit extends FormUnit<any, any, any>> =\n      TUnit extends FormUnit<infer TValue, any, any> ? TValue : never;\n\n  /**\n   * A type of controls type for the given form unit type.\n   *\n   * @typeParam TUnit - Target unit type.\n   */\n  export type ControlsType<TUnit extends FormUnit<any, any, any>> =\n      TUnit extends FormUnit<any, infer TControls, any> ? TControls : never;\n\n  /**\n   * A type of the sharer for the given form unit type.\n   *\n   * @typeParam TUnit - Target unit type.\n   */\n  export type SharerType<TUnit extends FormUnit<any, any, any>> =\n      TUnit extends FormUnit<any, any, infer TSharer> ? TSharer : never;\n\n  /**\n   * Form unit controls.\n   *\n   * @typeParam TValue - Input value type.\n   */\n  export interface Controls<TValue> {\n\n    /**\n     * An input control of the unit.\n     */\n    readonly control: InControl<TValue>;\n\n  }\n\n}\n","import { InBuilder, InControl } from '@frontmeans/input-aspects';\nimport { AfterEvent, afterValue, deduplicateAfter_, digAfter_, mapAfter } from '@proc7ts/fun-events';\nimport { valueRecipe } from '@proc7ts/primitives';\nimport { ComponentContext } from '@wesib/wesib';\nimport { Shareable } from '../shares';\nimport { FormPreset } from './form-preset';\nimport { FormUnit } from './form-unit';\n\n/**\n * A field of the user input {@link Form form}.\n *\n * A component {@link FieldShare shares} field (e.g. using {@link SharedField @SharedField} decorator) to make it\n * accessible by component itself and nested ones. E.g. to add it to {@link Form form} or to manipulate its value.\n *\n * The field instance is not usable until it is bound to its sharer component. The latter is done automatically when\n * the field is shared by {@link FieldShare}.\n *\n * @typeParam TValue - Field value type.\n * @typeParam TSharer - Field sharer component type.\n */\nexport class Field<TValue, TSharer extends object = any> extends FormUnit<TValue, Field.Body<TValue>, TSharer> {\n\n  /**\n   * Creates a form field by the given field control factory.\n   *\n   * @param factory - Field control factory.\n   *\n   * @returns New field instance.\n   */\n  static by<TValue, TSharer extends object = any>(\n      factory: InControl.Factory<InControl<TValue>>,\n  ): Field<TValue, TSharer> {\n    return new this(this.providerBy(factory));\n  }\n\n  /**\n   * Creates a form field controls provider by the given control factory.\n   *\n   * @param factory - Field control factory.\n   *\n   * @returns New form field controls provider.\n   */\n  static providerBy<TValue, TSharer extends object = any>(\n      factory: InControl.Factory<InControl<TValue>>,\n  ): Field.Provider<TValue, TSharer> {\n    return builder => ({\n      control: builder.control.build(factory),\n    });\n  }\n\n  /**\n   * Constructs form field.\n   *\n   * @param controls - Either a field controls instance, or its provider.\n   */\n  constructor(controls: Field.Controls<TValue> | Field.Provider<TValue, TSharer>) {\n    super(Field$provider(() => this, valueRecipe(controls)));\n  }\n\n  toString(): string {\n    return 'Field';\n  }\n\n}\n\nexport namespace Field {\n\n  /**\n   * A value type of the given form field.\n   *\n   * @typeParam TField - Field type.\n   */\n  export type ValueType<TField extends Field<any>> = FormUnit.ValueType<TField>;\n\n  /**\n   * Form field controls.\n   *\n   * @typeParam TValue - Input value type.\n   */\n  export interface Controls<TValue> extends FormUnit.Controls<TValue> {\n\n    /**\n     * Field input control.\n     */\n    readonly control: InControl<TValue>;\n\n  }\n\n  /**\n   * Form field body containing its input control.\n   *\n   * @typeParam TValue - Input value type.\n   */\n  export interface Body<TValue, TSharer extends object = any> extends FormUnit.Controls<TValue> {\n\n    /**\n     * A field the input control belongs to.\n     */\n    readonly field: Field<TValue, TSharer>;\n\n    /**\n     * Field input control.\n     */\n    readonly control: InControl<TValue>;\n\n  }\n\n  /**\n   * Form field builder.\n   *\n   * @typeParam TValue - Field value type.\n   * @typeParam TSharer - Field sharer component type.\n   */\n  export interface Builder<TValue, TSharer extends object> {\n\n    /**\n     * Sharer component context.\n     */\n    readonly sharer: ComponentContext<TSharer>;\n\n    /**\n     * Target field.\n     */\n    readonly field: Field<TValue, TSharer>;\n\n    /**\n     * Field input control builder.\n     */\n    readonly control: InBuilder<InControl<TValue>, TValue>;\n\n  }\n\n  /**\n   * Form field controls provider signature.\n   *\n   * @typeParam TValue - Field value type.\n   * @typeParam TSharer - Field sharer component type.\n   */\n  export type Provider<TValue, TSharer extends object = any> =\n  /**\n   * @param builder - Field builder.\n   *\n   * @returns Either field controls instance, or an `AfterEvent` keeper reporting one.\n   */\n      (\n          this: void,\n          builder: Builder<TValue, TSharer>,\n      ) => Controls<TValue> | AfterEvent<[Controls<TValue>?]>;\n\n}\n\nfunction Field$provider<TValue, TSharer extends object>(\n    field: () => Field<TValue, TSharer>,\n    provider: Field.Provider<TValue>,\n): Shareable.Provider<Field.Body<TValue> | undefined, TSharer> {\n  return sharer => sharer.get(FormPreset).rules.do(\n      digAfter_(preset => {\n\n        const builder: Field.Builder<TValue, TSharer> = {\n          sharer,\n          field: field(),\n          control: new InBuilder<InControl<TValue>, TValue>(),\n        };\n\n        preset.setupField(builder);\n\n        return afterValue(provider(builder));\n      }),\n      deduplicateAfter_(Field$isDuplicateControls, ([controls]) => controls),\n      mapAfter(controls => controls && { field: field(), control: controls.control }),\n  );\n}\n\nfunction Field$isDuplicateControls<TValue>(\n    prior?: Field.Controls<TValue>,\n    next?: Field.Controls<TValue>,\n): boolean {\n  if (prior?.control !== next?.control) {\n    prior?.control.supply.off();\n    return false;\n  }\n  return true;\n}\n","import { ContextKey__symbol } from '@proc7ts/context-values';\nimport { Class } from '@proc7ts/primitives';\nimport { Share, Share__symbol } from '../shares';\nimport { Field } from './field';\n\nconst FieldShare$map = (/*#__PURE__*/ new WeakMap<Class, FieldShare<any>>());\n\n/**\n * A kind of component share containing a {@link Field form field}.\n *\n * This class may be inherited to represent a specific type of forms. E.g. to distinguish multiple fields defined\n * within the same component.\n *\n * @typeParam TValue - Field value type.\n */\nexport class FieldShare<TValue = any> extends Share<Field<TValue>> {\n\n  /**\n   * Default field share instance.\n   */\n  static get [Share__symbol](): FieldShare {\n\n    let instance = FieldShare$map.get(this);\n\n    if (!instance) {\n      instance = new this('field');\n      FieldShare$map.set(this, instance);\n    }\n\n    return instance;\n  }\n\n  /**\n   * A key of component context value containing default field instance.\n   */\n  static get [ContextKey__symbol](): Share.Key<Field<any>> {\n    return this[Share__symbol][ContextKey__symbol];\n  }\n\n}\n","import { ContextKey__symbol } from '@proc7ts/context-values';\nimport { Class } from '@proc7ts/primitives';\nimport { Share, Share__symbol } from '../shares';\nimport { Form } from './form';\n\nconst FormShare$map = (/*#__PURE__*/ new WeakMap<Class, FormShare<any, any>>());\n\n/**\n * A kind of component share containing a user input form.\n *\n * This class may be inherited to represent a specific type of forms. E.g. to support multiple forms within the same\n * component tree.\n *\n * @typeParam TModel - A model type of the form.\n * @typeParam TElt - A type of HTML form element.\n */\nexport class FormShare<TModel = any, TElt extends HTMLElement = HTMLElement> extends Share<Form<TModel, TElt>> {\n\n  /**\n   * Default form share instance.\n   */\n  static get [Share__symbol](): FormShare<any, any> {\n\n    let instance = FormShare$map.get(this);\n\n    if (!instance) {\n      instance = new this('form');\n      FormShare$map.set(this, instance);\n    }\n\n    return instance;\n  }\n\n  /**\n   * A key of component context value containing default form instance.\n   */\n  static get [ContextKey__symbol](): Share.Key<Form> {\n    return this[Share__symbol][ContextKey__symbol];\n  }\n\n}\n","import { InBuilder, InControl } from '@frontmeans/input-aspects';\nimport { AfterEvent, afterThe, afterValue, digAfter } from '@proc7ts/fun-events';\nimport { valueRecipe } from '@proc7ts/primitives';\nimport { ComponentContext } from '@wesib/wesib';\nimport { shareLocator, ShareLocator } from '../shares';\nimport { Field } from './field';\nimport { FieldShare } from './field.share';\nimport { Form } from './form';\nimport { FormUnit } from './form-unit';\nimport { FormShare } from './form.share';\n\n/**\n * Creates a field adjacent to some form unit.\n *\n * Suitable e.g. for buttons or error indicators.\n *\n * The controls of adjacent field are based on the ones of the unit it is adjacent to.\n *\n * @typeParam TValue - Adjacent field value type.\n * @typeParam TAdjacentTo - A type of form unit the field is adjacent to.\n * @typeParam TAdjusted - A type of controls to adjust. I.e. the ones of the form unit the field is adjacent to.\n * @typeParam TSharer - Adjacent field sharer component type.\n */\nexport function adjacentField<\n    TValue,\n    TAdjacentTo extends FormUnit<unknown, TAdjusted>,\n    TAdjusted extends FormUnit.Controls<unknown> = FormUnit.ControlsType<TAdjacentTo>,\n    TSharer extends object = FormUnit.SharerType<TAdjacentTo>,\n    >(\n    controls: Field.Controls<TValue> | AdjacentField.Provider<TValue, TAdjacentTo, TAdjusted, TSharer>,\n    adjacentTo: ShareLocator.Mandatory<TAdjacentTo>,\n): Field<TValue, TSharer> {\n  return new Field(AdjacentField$provider(\n      valueRecipe(controls),\n      shareLocator(adjacentTo, { local: 'too' }),\n  ));\n}\n\n/**\n * Creates a field adjacent to another one.\n *\n * @typeParam TValue - Adjacent field value type.\n * @typeParam TSharer - Adjacent field sharer component type.\n * @param controls - Either a field controls instance, or its provider.\n * @param adjacentTo - A locator of the field share the created field is adjacent to. Includes local shares by\n * default. Defaults to {@link FieldShare}.\n */\nexport function adjacentToField<TValue, TSharer extends object = any>(\n    controls:\n        | Field.Controls<TValue>\n        | AdjacentField.Provider<TValue, Field<unknown>, Field.Controls<unknown>, TSharer>,\n    adjacentTo: ShareLocator.Mandatory<Field<unknown>> = FieldShare,\n): Field<TValue, TSharer> {\n  return adjacentField(controls, adjacentTo);\n}\n\n/**\n * Creates a field adjacent to form.\n *\n * @typeParam TValue - Adjacent field value type.\n * @typeParam TSharer - Adjacent field sharer component type.\n * @param controls - Either a field controls instance, or its provider.\n * @param adjacentTo - A locator of the form share the created field is adjacent to. Includes local shares by default.\n * Defaults to {@link FormShare}.\n */\nexport function adjacentToForm<TValue, TSharer extends object = any>(\n    controls:\n        | Field.Controls<TValue>\n        | AdjacentField.Provider<TValue, Form<unknown>, Form.Body<unknown>, TSharer>,\n    adjacentTo: ShareLocator.Mandatory<Form<unknown>> = FormShare,\n): Field<TValue, TSharer> {\n  return adjacentField(controls, adjacentTo);\n}\n\nexport namespace AdjacentField {\n\n  /**\n   * Adjacent field builder.\n   *\n   * @typeParam TValue - Adjacent field value type.\n   * @typeParam TAdjacentTo - A type of form unit the field is adjacent to.\n   * @typeParam TAdjusted - A type of controls to adjust. I.e. the ones of the form unit the field is adjacent to.\n   * @typeParam TSharer - Adjacent field sharer component type.\n   */\n  export interface Builder<\n      TValue,\n      TAdjacentTo extends FormUnit<unknown, TAdjusted>,\n      TAdjusted extends FormUnit.Controls<unknown> = FormUnit.ControlsType<TAdjacentTo>,\n      TSharer extends object = any,\n      > extends Field.Builder<TValue, TSharer> {\n\n    /**\n     * Sharer component context.\n     */\n    readonly sharer: ComponentContext<TSharer>;\n\n    /**\n     * Target field.\n     */\n    readonly field: Field<TValue, TSharer>;\n\n    /**\n     * Field input control builder.\n     */\n    readonly control: InBuilder<InControl<TValue>, TValue>;\n\n    /**\n     * Form unit the field is adjacent to.\n     */\n    readonly adjacentTo: TAdjacentTo;\n\n    /**\n     * Adjusted form unit control.\n     */\n    readonly adjusted: TAdjusted;\n\n  }\n\n  /**\n   * Adjacent field controls provider signature.\n   *\n   * @typeParam TValue - Adjacent field value type.\n   * @typeParam TAdjacentTo - A type of form unit the field is adjacent to.\n   * @typeParam TAdjusted - A type of controls to adjust. I.e. the ones of the form unit the field is adjacent to.\n   * @typeParam TSharer - Adjacent field sharer component type.\n   */\n  export type Provider<\n      TValue,\n      TAdjacentTo extends FormUnit<unknown, TAdjusted>,\n      TAdjusted extends FormUnit.Controls<unknown> = FormUnit.ControlsType<TAdjacentTo>,\n      TSharer extends object = any,\n      > =\n  /**\n   * @param builder - Adjacent field builder.\n   *\n   * @returns Either field controls instance, or an `AfterEvent` keeper reporting one.\n   */\n      (\n          this: void,\n          builder: Builder<TValue, TAdjacentTo, TAdjusted, TSharer>,\n      ) => Field.Controls<TValue> | AfterEvent<[Field.Controls<TValue>?]>;\n\n}\n\nfunction AdjacentField$provider<\n    TValue,\n    TAdjacentTo extends FormUnit<unknown, TAdjusted>,\n    TAdjusted extends FormUnit.Controls<unknown> = FormUnit.ControlsType<TAdjacentTo>,\n    TSharer extends object = any>(\n    provider: AdjacentField.Provider<TValue, TAdjacentTo, TAdjusted, TSharer>,\n    adjacentLocator: ShareLocator.Fn<TAdjacentTo>,\n): Field.Provider<TValue, TSharer> {\n  return builder => adjacentLocator(builder.sharer).do(\n      digAfter((adjacentTo?: TAdjacentTo, _sharer?): AfterEvent<[Field.Controls<TValue>?]> => adjacentTo\n          ? adjacentTo.read.do(\n              digAfter((adjusted?: TAdjusted): AfterEvent<[Field.Controls<TValue>?]> => adjusted\n                  ? afterValue(provider({\n                    ...builder,\n                    adjacentTo,\n                    adjusted,\n                  }))\n                  : afterThe()),\n          )\n          : afterThe()),\n  );\n}\n","/**\n * @internal\n */\nexport function Field$name(key: string | symbol, name: string | undefined): string | null {\n  if (name === '') {\n    return null;\n  }\n  if (name) {\n    return name;\n  }\n  return Field$nameByKey(key);\n}\n\n/**\n * @internal\n */\nexport function Field$nameByKey(key: string | symbol): string | null {\n  return typeof key === 'string' ? key : null;\n}\n","import { InGroup } from '@frontmeans/input-aspects';\nimport { afterAll, consumeEvents, digAfter_ } from '@proc7ts/fun-events';\nimport { asis, Class, valuesProvider } from '@proc7ts/primitives';\nimport { Supply } from '@proc7ts/supply';\nimport { ComponentClass } from '@wesib/wesib';\nimport { shareLocator, ShareLocator } from '../shares';\nimport { Field } from './field';\nimport { Field$nameByKey } from './field.impl';\nimport { Form } from './form';\nimport { FormUnit } from './form-unit';\nimport { FormShare } from './form.share';\nimport { SharedField } from './shared-field.decorator';\nimport { SharedFormUnit } from './shared-form-unit.decorator';\nimport { SharedForm } from './shared-form.decorator';\n\n/**\n * Builds a {@link SharedForm shared form} definition builder that adds nested form to enclosing one.\n *\n * @typeParam TForm - Nested form type.\n * @typeParam TModel - Nested form model type.\n * @typeParam TElt - A type of nested HTML form element.\n * @typeParam TClass - A type of decorated component class.\n * @param def - Nested form naming definition.\n *\n * @returns Shared form definition builder.\n */\nexport function FormName<\n    TForm extends Form<TModel, TElt>,\n    TModel = Form.ModelType<TForm>,\n    TElt extends HTMLElement = Form.ElementType<TForm>,\n    TClass extends ComponentClass = Class>(\n    def?: FieldNameDef,\n): SharedForm.Definer<TForm, TModel, TElt, TClass> {\n  return FormUnitName<TForm, TModel, Form.Body<TModel, TElt>, TClass>(def);\n}\n\n/**\n * Builds a {@link SharedField shared form field} definition builder that adds the field to enclosing form.\n *\n * @typeParam TField - Field type.\n * @typeParam TValue - Field value type.\n * @typeParam TClass - A type of decorated component class.\n * @param def - Field naming definition.\n *\n * @returns Shared field definition builder.\n */\nexport function FieldName<\n    TField extends Field<TValue>,\n    TValue = Field.ValueType<TField>,\n    TClass extends ComponentClass = Class>(\n    def: FieldNameDef = {},\n): SharedField.Definer<TField, TValue, TClass> {\n  return FormUnitName<TField, TValue, Field.Controls<TValue>, TClass>(def);\n}\n\nfunction FormUnitName<\n    TUnit extends FormUnit<TValue, TControls, any>,\n    TValue,\n    TControls extends FormUnit.Controls<TValue>,\n    TClass extends ComponentClass = Class>(\n    def: FieldNameDef = {},\n): SharedFormUnit.Definer<TUnit, TValue, TControls, TClass> {\n  return ({\n    key,\n    share,\n    locateForm: defaultForm,\n    name: defaultName,\n  }) => {\n\n    const { name = defaultName } = def;\n    let fieldName: string;\n\n    if (name) {\n      fieldName = name;\n    } else if (name != null) {\n      return; // Empty field name. Do not ad it to form.\n    } else {\n\n      const autoName = Field$nameByKey(key);\n\n      if (!autoName) {\n        return;\n      }\n\n      fieldName = autoName;\n    }\n\n    const locateForm = shareLocator(def.form || defaultForm, { share: FormShare });\n\n    return {\n      componentDef: {\n        setup(setup) {\n          setup.whenComponent(context => {\n            afterAll({\n              unit: context.get(share).do(\n                  digAfter_(asis, valuesProvider<[TControls?]>()),\n              ),\n              form: locateForm(context).do(\n                  digAfter_((form?, _sharer?) => form, valuesProvider<[FormUnit.Controls<any>?]>()),\n              ),\n            }).do(\n                consumeEvents(({ unit: [field], form: [form] }): Supply | undefined => {\n                  if (!form || !field) {\n                    return;\n                  }\n\n                  const group = form.control.aspect(InGroup);\n\n                  if (!group) {\n                    return;\n                  }\n\n                  return group.controls.set(fieldName, field.control);\n                }),\n            );\n          });\n        },\n      },\n    };\n  };\n}\n\n/**\n * Form field naming definition.\n */\nexport interface FieldNameDef {\n\n  /**\n   * A locator of form unit to add the field to.\n   *\n   * Either {@link SharedFieldDef.form predefined}, or {@link FormShare default} form share is used when omitted.\n   */\n  readonly form?: ShareLocator<FormUnit<any>>;\n\n  /**\n   * Field name.\n   *\n   * The shared field will be added to the input control group (`InGroup`) within the {@link form target form},\n   * unless the name is empty string.\n   *\n   * Either {@link SharedFieldDef.name predefined}, or property name is used when omitted.\n   */\n  readonly name?: string;\n\n}\n","import {\n  InAspect,\n  InAspect__symbol,\n  InBuilder,\n  InControl,\n  InConverter,\n  inconvertibleInAspect,\n  inFormElement,\n  InFormElement,\n  nullInAspect,\n} from '@frontmeans/input-aspects';\nimport { AfterEvent, afterValue, deduplicateAfter_, digAfter_, mapAfter } from '@proc7ts/fun-events';\nimport { lazyValue, valueRecipe } from '@proc7ts/primitives';\nimport { ComponentContext } from '@wesib/wesib';\nimport { Shareable } from '../shares';\nimport { FormPreset } from './form-preset';\nimport { FormUnit } from './form-unit';\n\nconst Form__aspect: Form$Aspect = {\n\n  applyTo<TValue>(_control: InControl<TValue>): Form$Applied<TValue> {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    return nullInAspect();\n  },\n\n};\n\n/**\n * User input form.\n *\n * A component {@link FormShare shares} form (e.g. using {@link SharedForm @SharedForm} decorator) to make its\n * accessible by component itself and nested ones. E.g. to add {@link Field fields} to it or submit it.\n *\n * A form may be nested within another one, as it implements a {@link Field} interface.\n *\n * The form instance is not usable until it is bound to its sharer component. The latter is done automatically when the\n * form is shared by {@link FormShare}.\n *\n * @typeParam TModel - A model type of the form, i.e. a type of its control value.\n * @typeParam TElt - A type of HTML form element.\n * @typeParam TSharer - Form sharer component type.\n */\nexport class Form<TModel = any, TElt extends HTMLElement = HTMLElement, TSharer extends object = any>\n    extends FormUnit<TModel, Form.Body<TModel, TElt>, TSharer> {\n\n  /**\n   * Builds a user input form for the given form control and HTML element.\n   *\n   * @param control - Submitted control. Typically a container one.\n   * @param element - HTML element to create control for.\n   * @param options - Form element control options.\n   *\n   * @returns New form instance.\n   */\n  static forElement<TModel, TElt extends HTMLElement>(\n      control: InControl<TModel>,\n      element: TElt,\n      options?: Omit<InFormElement.Options, 'form'>,\n  ): Form.Controls<TModel, TElt> {\n    return {\n      control,\n      element: inFormElement(element, { ...options, form: control }),\n    };\n  }\n\n  /**\n   * Creates a form instance by the given control factories.\n   *\n   * @param factory - Submittable form control factory.\n   * @param elementFactory - Form element control factory or options.\n   *\n   * @returns New form instance.\n   */\n  static by<\n      TModel,\n      TElt extends HTMLElement = HTMLElement,\n      TSharer extends object = any>(\n      factory: InControl.Factory<InControl<TModel>, TModel>,\n      elementFactory: (\n          this: void,\n          options: Parameters<InControl.Factory<InFormElement<TElt>, void>>[0] & { form: InControl<TModel>},\n      ) => InFormElement<TElt>,\n  ): Form<TModel, TElt, TSharer> {\n    return new this(this.providerBy(factory, elementFactory));\n  }\n\n  /**\n   * Creates a form controls provider by the given control factories.\n   *\n   * @param factory - Submittable form control factory.\n   * @param elementFactory - Form element control factory or options.\n   *\n   * @returns New form controls provider.\n   */\n  static providerBy<\n      TModel,\n      TElt extends HTMLElement = HTMLElement,\n      TSharer extends object = any>(\n      factory: InControl.Factory<InControl<TModel>, TModel>,\n      elementFactory: (\n          this: void,\n          options: Parameters<InControl.Factory<InFormElement<TElt>, void>>[0] & { form: InControl<TModel>},\n      ) => InFormElement<TElt>,\n  ): Form.Provider<TModel, TElt, TSharer> {\n    return builder => {\n\n      let control = (): InControl<TModel> => builder.control.build(\n          // Allow recurrent access to `Form` aspect during control setup.\n          opts => (control = lazyValue(() => factory(opts)))(),\n      );\n      let element = (): InFormElement<TElt> => builder.element.build(\n          // Allow recurrent access to `Form` aspect during control setup.\n          opts => (element = lazyValue(() => elementFactory({\n            form: control(),\n            ...opts,\n          })))(),\n      );\n\n      return {\n        get control() {\n          return control();\n        },\n        get element() {\n          return element();\n        },\n      };\n    };\n  }\n\n  /**\n   * An input control aspect representing a form this control belongs to.\n   *\n   * This aspect is available in {@link Form.Body.control submittable form control} and {@link Form.Body.element form\n   * element control}.\n   */\n  static get [InAspect__symbol](): InAspect<Form.Whole | null> {\n    return Form__aspect;\n  }\n\n  /**\n   * Constructs form.\n   *\n   * @param controls - Either form controls instance, or its provider.\n   */\n  constructor(\n      controls: Form.Controls<TModel, TElt> | Form.Provider<TModel, TElt, TSharer>,\n  ) {\n    super(Form$provider(() => this, valueRecipe(controls)));\n  }\n\n  /**\n   * Form element control, if present.\n   *\n   * Unlike {@link control input control} this one is not supposed to be submitted, but rather contains a `<form>`\n   * element issuing a `submit` event.\n   */\n  get element(): InFormElement<TElt> | undefined {\n    return this.body?.element;\n  }\n\n  toString(): string {\n    return 'Form';\n  }\n\n}\n\nfunction Form$provider<TModel, TElt extends HTMLElement, TSharer extends object>(\n    form: () => Form<TModel, TElt, TSharer>,\n    provider: Form.Provider<TModel, TElt, TSharer>,\n): Shareable.Provider<Form.Body<TModel, TElt> | undefined, TSharer> {\n\n  const formAspect: InConverter.Aspect.Factory<any> = control => ({\n    applyAspect<TInstance, TKind extends InAspect.Application.Kind>(\n        _aspect: InAspect<any, any>,\n    ): InAspect.Application.Result<TInstance, any, TKind> | undefined {\n      return inconvertibleInAspect(\n          control,\n          Form,\n          form() as Form.Whole,\n      ) as InAspect.Application.Result<TInstance, any, TKind>;\n    },\n  });\n\n  return sharer => sharer.get(FormPreset).rules.do(\n      digAfter_(preset => {\n\n        const builder: Form.Builder<TModel, TElt, TSharer> = {\n          sharer,\n          form: form(),\n          control: new InBuilder<InControl<TModel>, TModel>().addAspect(Form, formAspect),\n          element: new InBuilder<InFormElement<TElt>, void>().addAspect(Form, formAspect),\n        };\n\n        preset.setupForm(builder);\n\n        return afterValue(provider(builder));\n      }),\n      deduplicateAfter_(Form$isDuplicateControls, ([controls]) => controls),\n      mapAfter(controls => controls && {\n        get form() {\n          return form();\n        },\n        get control() {\n          return controls!.control;\n        },\n        get element() {\n          return controls!.element;\n        },\n      }),\n  );\n}\n\nfunction Form$isDuplicateControls<TModel, TElt extends HTMLElement>(\n    prior: Form.Controls<TModel, TElt> | undefined,\n    next: Form.Controls<TModel, TElt> | undefined,\n): boolean {\n\n  let duplicate = true;\n\n  if (prior?.control !== next?.control) {\n    prior?.control.supply.off();\n    duplicate = false;\n  }\n  if (prior?.element !== next?.element) {\n    prior?.element.supply.off();\n    duplicate = false;\n  }\n\n  return duplicate;\n}\n\nexport namespace Form {\n\n  /**\n   * A whole form instance containing controls.\n   *\n   * @typeParam TModel - A model type of the form, i.e. a type of its control value.\n   * @typeParam TElt - A type of HTML form element.\n   * @typeParam TSharer - Form sharer component type.\n   */\n  export interface Whole<\n      TModel = any,\n      TElt extends HTMLElement = HTMLElement,\n      TSharer extends object = any>\n      extends Form<TModel, TElt, TSharer> {\n\n    /**\n     * Form body.\n     */\n    readonly body: Body<TModel, TElt, TSharer>;\n\n    /**\n     * Submittable form input control.\n     */\n    readonly control: InControl<TModel>;\n\n    /**\n     * Form element control.\n     *\n     * Unlike {@link control input control} this one is not supposed to be submitted, but rather contains a `<form>`\n     * element issuing a `submit` event.\n     */\n    readonly element: InFormElement<any>;\n\n  }\n\n  /**\n   * A model type of the given form.\n   *\n   * @typeParam TForm - Form type.\n   */\n  export type ModelType<TForm extends Form<any, any>> = FormUnit.ValueType<TForm>;\n\n  /**\n   * HTML form element type of the form.\n   *\n   * @typeParam TForm - Form type.\n   */\n  export type ElementType<TForm extends Form<any, any>> = TForm extends Form<any, infer TElt> ? TElt : never;\n\n  /**\n   * Form controls.\n   *\n   * @typeParam TModel - A model type of the form, i.e. a type of its control value.\n   * @typeParam TElt - A type of HTML form element.\n   */\n  export interface Controls<TModel, TElt extends HTMLElement = HTMLElement> extends FormUnit.Controls<TModel> {\n\n    /**\n     * Submittable form input control.\n     */\n    readonly control: InControl<TModel>;\n\n    /**\n     * Form element control.\n     *\n     * Unlike {@link control input control} this one is not supposed to be submitted, but rather contains a `<form>`\n     * element issuing a `submit` event.\n     */\n    readonly element: InFormElement<TElt>;\n\n  }\n\n  /**\n   * Form body containing input controls.\n   *\n   * @typeParam TModel - A model type of the form, i.e. a type of its control value.\n   * @typeParam TElt - A type of HTML form element.\n   * @typeParam TSharer - Form sharer component type.\n   */\n  export interface Body<\n      TModel,\n      TElt extends HTMLElement = HTMLElement,\n      TSharer extends object = any,\n      > extends FormUnit.Controls<TModel> {\n\n    /**\n     * A form the controls belong to.\n     */\n    readonly form: Form<TModel, TElt, TSharer>;\n\n    /**\n     * Submittable form input control.\n     */\n    readonly control: InControl<TModel>;\n\n    /**\n     * Form element control.\n     *\n     * Unlike {@link control input control} this one is not supposed to be submitted, but rather contains a `<form>`\n     * element issuing a `submit` event.\n     */\n    readonly element: InFormElement<TElt>;\n\n  }\n\n  /**\n   * Form builder.\n   *\n   * @typeParam TModel - A model type of the form, i.e. a type of its control value.\n   * @typeParam TElt - A type of HTML form element.\n   */\n  export interface Builder<TModel, TElt extends HTMLElement, TSharer extends object> {\n\n    /**\n     * Sharer component context.\n     */\n    readonly sharer: ComponentContext<TSharer>;\n\n    /**\n     * Target form.\n     */\n    readonly form: Form<TModel, TElt, TSharer>;\n\n    /**\n     * Submittable form control builder.\n     */\n    readonly control: InBuilder<InControl<TModel>, TModel>;\n\n    /**\n     * Form element control builder.\n     *\n     * Unlike {@link control input control} this one is not supposed to be submitted, but rather contains a `<form>`\n     * element issuing a `submit` event.\n     */\n    readonly element: InBuilder<InFormElement<TElt>, void>;\n\n  }\n\n  /**\n   * Form controls provider signature.\n   *\n   * @typeParam TModel - A model type of the form, i.e. a type of its control value.\n   * @typeParam TElt - A type of HTML form element.\n   * @typeParam TSharer - Form sharer component type.\n   */\n  export type Provider<TModel = any, TElt extends HTMLElement = HTMLElement, TSharer extends object = object> =\n  /**\n   * @param builder - Form builder.\n   *\n   * @returns Either form controls instance, or an `AfterEvent` keeper reporting one.\n   */\n      (\n          this: void,\n          builder: Builder<TModel, TElt, TSharer>,\n      ) => Controls<TModel, TElt> | AfterEvent<[Controls<TModel, TElt>?]>;\n\n}\n\n/**\n * Form aspect.\n */\ninterface Form$Aspect extends InAspect<Form | null, 'form'> {\n\n  applyTo<TValue>(control: InControl<TValue>): Form$Applied<TValue>;\n\n}\n\n/**\n * A form aspect applied to control.\n */\ntype Form$Applied<TValue> = InAspect.Applied<TValue, Form.Whole<TValue> | null, Form.Whole<any> | null>;\n\ndeclare module '@frontmeans/input-aspects' {\n\n  export namespace InAspect.Application {\n\n    export interface Map<TInstance, TValue> {\n\n      /**\n       * Form aspect application type.\n       */\n      form(): Form.Whole<TValue> | null;\n\n    }\n\n  }\n\n}\n","import { InControl, InRole } from '@frontmeans/input-aspects';\nimport { arrayOfElements } from '@proc7ts/primitives';\nimport { neverSupply, Supply, SupplyPeer } from '@proc7ts/supply';\n\n/**\n * A scope of form setup applicability.\n *\n * Selects controls to set up:\n *\n * - `false` - to set up nothing,\n * - `true` - to set up every control,\n * - role name or array of role names - to set up only to controls with that roles,\n * - `null`, `undefined`, or empty array - to set up only controls with default role.\n */\nexport type FormScope =\n    | boolean\n    | string\n    | readonly string[]\n    | null\n    | undefined;\n\nexport const FormScope = {\n\n  /**\n   * Creates an input control setup procedure applied to the given scope.\n   *\n   * @typeParam TControl - Input control type.\n   * @typeParam TValue - Input value type.\n   * @param scope - Setup applicability scope.\n   * @param setup - A setup procedure to apply. Accepts target control instance as parameter and returns a setup supply\n   * peer. The setup should be reverted once this peer's supply cut off.\n   * @param defaultRole - A role name to apply by default. `'default'` when omitted.\n   *\n   * @returns A setup procedure accepting target control as parameter and returning a setup supply. The setup is\n   * reverted once this supply cut off.\n   */\n  createSetup<TControl extends InControl<TValue>, TValue = InControl.ValueType<TControl>>(\n      this: void,\n      scope: FormScope,\n      setup: (this: void, control: TControl) => SupplyPeer,\n      defaultRole = 'default',\n  ): (this: void, control: TControl) => Supply {\n    if (scope === false) {\n      return _control => neverSupply();\n    }\n    if (scope === true) {\n      return control => setup(control).supply;\n    }\n\n    let roles = arrayOfElements(scope);\n\n    if (!roles.length) {\n      roles = [defaultRole];\n    }\n\n    if (roles.length === 1) {\n      return control => control.aspect(InRole).when(roles[0], () => setup(control));\n    }\n\n    return control => roles.reduce(\n        (supply, role) => control.aspect(InRole).when(role, () => setup(control)).as(supply),\n        new Supply(),\n    );\n  },\n\n};\n","import { ContextBuilder, ContextBuilder__symbol, ContextRegistry } from '@proc7ts/context-values';\nimport { Class } from '@proc7ts/primitives';\nimport { Supply } from '@proc7ts/supply';\nimport { FeatureDef, FeatureDef__symbol } from '@wesib/wesib';\nimport { Field } from '../field';\nimport { Form } from '../form';\nimport { FormPreset } from '../form-preset';\n\nconst AbstractFormPreset$map = (/*#__PURE__*/ new WeakMap<typeof AbstractFormPreset, FeatureDef>());\n\n/**\n * Abstract form preset implementation.\n *\n * A class extending it may be used as a feature. E.g. passed to `bootstrapComponents()` function or used as a\n * dependency of another feature.\n *\n * An instance of implementation class may be created to customize its behavior. Such instance implements a\n * `ContextBuilder` interface. Thus is can be passed to context value registration method.\n */\nexport abstract class AbstractFormPreset implements FormPreset.Spec, ContextBuilder {\n\n  /**\n   * Feature definition of the preset.\n   */\n  static get [FeatureDef__symbol](): FeatureDef {\n\n    const found = AbstractFormPreset$map.get(this);\n\n    if (found) {\n      return found;\n    }\n\n    const preset = new (this as unknown as Class<AbstractFormPreset>)();\n    const featureDef: FeatureDef = {\n      setup: setup => {\n        setup.provide(preset);\n      },\n    };\n\n    AbstractFormPreset$map.set(this, featureDef);\n\n    return featureDef;\n  }\n\n  /**\n   * Provides this form preset to the given context.\n   *\n   * @param registry - A context registry to provide a value to.\n   *\n   * @returns A supply instance that removes the added preset once cut off.\n   */\n  [ContextBuilder__symbol](registry: ContextRegistry): Supply {\n    return registry.provide({ a: FormPreset, is: this });\n  }\n\n  /**\n   * Sets up form field controls.\n   *\n   * Does nothing by default.\n   *\n   * @param _builder - Target field builder.\n   */\n  setupField<TValue, TSharer extends object>(\n      _builder: Field.Builder<TValue, TSharer>,\n  ): void {\n    // No field setup\n  }\n\n  /**\n   * Sets up form controls.\n   *\n   * Does nothing by default.\n   *\n   * @param _builder - Target form builder.\n   */\n  setupForm<TModel, TElt extends HTMLElement, TSharer extends object>(\n      _builder: Form.Builder<TModel, TElt, TSharer>,\n  ): void {\n    // No form setup\n  }\n\n}\n","import { InControl } from '@frontmeans/input-aspects';\nimport { Supply, SupplyPeer } from '@proc7ts/supply';\nimport { FormScope } from './form-scope';\n\n/**\n * Scoped form setup configuration.\n *\n * Contains setup options along with the scope they applicable to.\n *\n * May be one of:\n *\n * - `false` - to not apply configuration,\n * - `true` - to apply default configuration to every control,\n * - role name or array of role names - to apply default configuration only to controls with that roles,\n * - `null`, `undefined`, or empty array - to apply default configuration only to controls with default role,\n * - an array containing options as the first element, and role names as the rest of them - to apply these options\n *   only to controls with that roles,\n * - a tuple consisting of options and {@link FormScope scope} specifier - to apply these options to specified scope.\n *\n * @typeParam TOptions - A type of setup options.\n */\nexport type ScopedFormConfig<TOptions> =\n    | TOptions\n    | FormScope\n    | readonly [TOptions, FormScope?]\n    | readonly [TOptions, ...string[]];\n\nexport const ScopedFormConfig = {\n\n  /**\n   * Creates an input control setup procedure that applies the given configuration to appropriate scope.\n   *\n   * @typeParam TOptions - A type of setup options.\n   * @typeParam TControl - Input control type.\n   * @typeParam TValue - Input value type.\n   * @param config - Scoped form setup configuration.\n   * @param createSetup - A function accepting setup options and returning a procedure that sets up the given control\n   * with these options. The setup procedure returns a setup supply peer. The setup should be reverted once this peer's\n   * supply cut off.\n   * @param defaultRole - A role name to apply by default. `'default'` when omitted.\n   *\n   * @returns A setup procedure accepting target control as parameter and returning a setup supply. The setup is\n   * reverted once this supply cut off.\n   */\n  createSetup<\n      TOptions,\n      TControl extends InControl<TValue>,\n      TValue = InControl.ValueType<TControl>,\n      >(\n      config: ScopedFormConfig<TOptions>,\n      createSetup: (this: void, options?: TOptions) => (this: void, control: TControl) => SupplyPeer,\n      defaultRole?: string,\n  ): (this: void, control: TControl) => Supply {\n\n    let scope: FormScope;\n    let options: TOptions | undefined;\n\n    if (Array.isArray(config)) {\n\n      const [first, ...rest] = config;\n\n      if (ScopedFormConfig$isOptions(first)) {\n        scope = rest.length > 1 ? rest : rest[0];\n        options = first;\n      } else {\n        scope = config;\n      }\n    } else if (ScopedFormConfig$isOptions(config)) {\n      options = config as TOptions;\n    } else {\n      scope = config;\n    }\n\n    return FormScope.createSetup<TControl, TValue>(\n        scope,\n        createSetup(options),\n        defaultRole,\n    );\n  },\n\n};\n\nfunction ScopedFormConfig$isOptions<TOptions>(\n    config: TOptions | string | boolean | undefined,\n): config is TOptions {\n  return config != null && typeof config !== 'string' && typeof config !== 'boolean';\n}\n","import { Class } from '@proc7ts/primitives';\nimport { ComponentClass } from '@wesib/wesib';\nimport { Share, Shared, ShareDecorator, ShareLocator, shareLocator, ShareRef, TargetShare } from '../shares';\nimport { Field } from './field';\nimport { FieldName } from './field-name.definer';\nimport { Field$name } from './field.impl';\nimport { FieldShare } from './field.share';\nimport { FormUnit } from './form-unit';\nimport { FormShare } from './form.share';\nimport { SharedFormUnit } from './shared-form-unit.decorator';\n\n/**\n * Builds a decorator of component property that {@link FieldShare shares} a form field.\n *\n * @typeParam TField - Field type.\n * @typeParam TValue - Field value type.\n * @typeParam TClass - A type of decorated component class.\n * @param def - Field definition.\n * @param define - Field property definition builders.\n *\n * @return Component property decorator.\n */\nexport function SharedField<\n    TField extends Field<TValue>,\n    TValue = Field.ValueType<TField>,\n    TClass extends ComponentClass = Class>(\n    def?: SharedFieldDef<TField, TValue>,\n    ...define: SharedField.Definer<TField, TValue, TClass>[]\n): ShareDecorator<TField, TClass>;\n\n/**\n * Builds a decorator of component property that {@link FieldShare shares} a form field and adds it to the\n * {@link FormShare default form} under decorated property name.\n *\n * @typeParam TField - Field type.\n * @typeParam TValue - Field value type.\n * @typeParam TClass - A type of decorated component class.\n * @param define - Field property definition builders.\n *\n * @return Component property decorator.\n */\nexport function SharedField<\n    TField extends Field<TValue>,\n    TValue = Field.ValueType<TField>,\n    TClass extends ComponentClass = Class>(\n    ...define: SharedField.Definer<TField, TValue, TClass>[]\n): ShareDecorator<TField, TClass>;\n\nexport function SharedField<\n    TField extends Field<TValue>,\n    TValue,\n    TClass extends ComponentClass>(\n    defOrDefiner:\n        | SharedFieldDef<TField, TValue>\n        | SharedField.Definer<TField, TValue, TClass> = {},\n    ...define: SharedField.Definer<TField, TValue, TClass>[]\n): ShareDecorator<TField, TClass> {\n\n  let def: SharedFieldDef<TField, TValue>;\n  let fieldName: string | undefined;\n  let definers: SharedField.Definer<TField, TValue, TClass>[];\n\n  if (typeof defOrDefiner === 'function') {\n    def = {};\n    definers = [FieldName(), defOrDefiner, ...define];\n  } else {\n    def = defOrDefiner;\n    fieldName = defOrDefiner.name;\n    definers = [FieldName({ name: fieldName }), ...define];\n  }\n\n  const {\n    share = FieldShare as ShareRef<any> as ShareRef<TField>,\n    form: formLocator,\n  } = def;\n  const locateForm = shareLocator(formLocator, { share: FormShare });\n\n  return SharedFormUnit<TField, TValue, Field.Controls<TValue>, TClass>(\n      share,\n      ...definers.map(definer => (\n          descriptor: Shared.Descriptor<TField, TClass>,\n      ) => definer({\n        ...descriptor,\n        locateForm,\n        name: Field$name(descriptor.key, fieldName),\n      })),\n  );\n}\n\n/**\n * Shared form field definition.\n *\n * @typeParam TField - Field type.\n * @typeParam TValue - Field value type.\n */\nexport interface SharedFieldDef<TField extends Field<TValue>, TValue = Field.ValueType<TField>> {\n\n  /**\n   * Target field share.\n   */\n  readonly share?: TargetShare<TField>;\n\n  /**\n   * A locator of form unit to add the shared field to.\n   *\n   * The {@link FormShare default form share} is used when omitted.\n   */\n  readonly form?: ShareLocator<FormUnit<unknown>>;\n\n  /**\n   * Field name.\n   *\n   * The shared field will be added to the input control group (`InGroup`) within the {@link form target form},\n   * unless the name is empty string.\n   *\n   * Equals to decorated property name when omitted.\n   */\n  readonly name?: string;\n\n}\n\nexport namespace SharedField {\n\n  /**\n   * A descriptor of the component property that {@link FieldShare shares} a form field.\n   *\n   * Passed to {@link Definer property definer} by {@link SharedField @SharedField} decorator to build a\n   * {@link Definition property definition}.\n   *\n   * @typeParam TField - Field type.\n   * @typeParam TValue - Field value type.\n   * @typeParam TClass - A type of decorated component class.\n   */\n  export interface Descriptor<\n      TField extends Field<TValue>,\n      TValue = Field.ValueType<TField>,\n      TClass extends ComponentClass = Class>\n      extends SharedFormUnit.Descriptor<TField, TValue, Field.Controls<TValue>, TClass> {\n\n    /**\n     * Target field share instance.\n     */\n    readonly share: Share<TField>;\n\n    /**\n     * Predefined locator function of the form unit to add the shared field to.\n     */\n    readonly locateForm: ShareLocator.Fn<FormUnit<any>>;\n\n    /**\n     * Predefined field name, or `null`/`undefined` when the field is not to be added to the {@link locateForm form}.\n     */\n    readonly name: string | null;\n\n  }\n\n  /**\n   * A signature of definition builder of the component property that {@link FieldShare shares} a form field.\n   *\n   * This is a function called by {@link SharedField @SharedField} decorator to apply additional definitions.\n   *\n   * @typeParam TField - Field type.\n   * @typeParam TValue - Field value type.\n   * @typeParam TClass - A type of decorated component class.\n   */\n  export type Definer<\n      TField extends Field<TValue>,\n      TValue = Field.ValueType<TField>,\n      TClass extends ComponentClass = Class> =\n  /**\n   * @param descriptor - Decorated component property descriptor.\n   *\n   * @returns Component property definition, or nothing if the property definition is not to be changed.\n   */\n      (\n          this: void,\n          descriptor: Descriptor<TField, TValue, TClass>,\n      ) => Definition<TField, TValue, TClass> | void;\n\n  /**\n   * A definition of component property that {@link FieldShare shares} a form field.\n   *\n   * @typeParam TField - Field type.\n   * @typeParam TValue - Field value type.\n   * @typeParam TClass - A type of component class.\n   */\n  export type Definition<\n      TField extends Field<TValue>,\n      TValue = Field.ValueType<TField>,\n      TClass extends ComponentClass = Class> =\n      SharedFormUnit.Definition<TField, TValue, Field.Controls<TValue>, TClass>;\n\n}\n","import { Class } from '@proc7ts/primitives';\nimport { ComponentClass } from '@wesib/wesib';\nimport { Shared, ShareDecorator, ShareLocator, TargetShare } from '../shares';\nimport { FormUnit } from './form-unit';\n\n/**\n * Builds a decorator of component property that shares a form unit.\n *\n * @typeParam TUnit - Unit type.\n * @typeParam TValue - Unit value type.\n * @typeParam TControls - Unit controls type.\n * @typeParam TClass - A type of decorated component class.\n * @param share - Target unit share.\n * @param define - Unit property definition builders.\n *\n * @return Component property decorator.\n */\nexport function SharedFormUnit<\n    TUnit extends FormUnit<TValue, TControls>,\n    TValue = FormUnit.ValueType<TUnit>,\n    TControls extends FormUnit.Controls<TValue> = FormUnit.ControlsType<TUnit>,\n    TClass extends ComponentClass = Class>(\n    share: TargetShare<TUnit>,\n    ...define: SharedFormUnit.Definer<TUnit, TValue, TControls, TClass>[]\n): ShareDecorator<TUnit, TClass> {\n  return Shared(share, ...define);\n}\n\nexport namespace SharedFormUnit {\n\n  /**\n   * A descriptor of the component property that shares a form unit.\n   *\n   * Passed to {@link Definer property definer} by {@link SharedFormUnit @SharedFormUnit} decorator to build a\n   * {@link Definition property definition}.\n   *\n   * @typeParam TValue - Unit value type.\n   * @typeParam TControls - Unit controls type.\n   * @typeParam TClass - A type of decorated component class.\n   */\n  export interface Descriptor<\n      TUnit extends FormUnit<TValue, TControls>,\n      TValue = FormUnit.ValueType<TUnit>,\n      TControls extends FormUnit.Controls<TValue> = FormUnit.ControlsType<TUnit>,\n      TClass extends ComponentClass = Class>\n      extends Shared.Descriptor<TUnit, TClass> {\n\n    /**\n     * Predefined locator function of the form unit to add the share unit to, or `undefined` when unknown.\n     */\n    readonly locateForm?: ShareLocator.Fn<FormUnit<any>>;\n\n    /**\n     * Predefined unit name, or `null`/`undefined` when the unit is not to be added to the {@link locateForm form}.\n     */\n    readonly name?: string | null;\n\n  }\n\n  /**\n   * A signature of definition builder of the component property that shares a form unit.\n   *\n   * This is a function called by {@link SharedFormUnit @SharedFormUnit} decorator to apply additional definitions.\n   *\n   * @typeParam TUnit - Unit type.\n   * @typeParam TValue - Unit value type.\n   * @typeParam TControls - Unit controls type.\n   * @typeParam TClass - A type of decorated component class.\n   */\n  export type Definer<\n      TUnit extends FormUnit<TValue, TControls>,\n      TValue = FormUnit.ValueType<TUnit>,\n      TControls extends FormUnit.Controls<TValue> = FormUnit.ControlsType<TUnit>,\n      TClass extends ComponentClass = Class> =\n  /**\n   * @param descriptor - Decorated component property descriptor.\n   *\n   * @returns Component property definition, or nothing if the property definition is not to be changed.\n   */\n      (\n          this: void,\n          descriptor: Descriptor<TUnit, TValue, TControls, TClass>,\n      ) => Definition<TUnit, TValue, TControls, TClass> | void;\n\n  /**\n   * A definition of component property that shares a form unit.\n   *\n   * @typeParam TUnit - Unit type.\n   * @typeParam TValue - Unit value type.\n   * @typeParam TControls - Unit controls type.\n   * @typeParam TClass - A type of decorated component class.\n   */\n  export type Definition<\n      TUnit extends FormUnit<TValue, TControls>,\n      TValue = FormUnit.ValueType<TUnit>,\n      TControls extends FormUnit.Controls<TValue> = FormUnit.ControlsType<TUnit>,\n      TClass extends ComponentClass = Class> =\n      Shared.Definition<TUnit, TClass>;\n\n}\n","/**\n * @internal\n */\nexport function isReadonlyArray<T>(value: any): value is readonly T[] {\n  return Array.isArray(value);\n}\n\n/**\n * @internal\n */\nexport function isNotEmptyArray<T>(array: readonly T[]): array is readonly [T, ...T[]];\n\n/**\n * @internal\n */\nexport function isNotEmptyArray<T>(array: T[]): array is [T, ...T[]];\n\n/**\n * @internal\n */\nexport function isNotEmptyArray<T>(array: readonly T[]): boolean {\n  return !!array.length;\n}\n","import { StypColor } from './color';\nimport { StypNumeric } from './numeric';\nimport { StypPriority } from './priority';\nimport { StypURL } from './url';\n\n/**\n * CSS property value.\n *\n * This is either a scalar value, or {@link StypValueStruct structured} one.\n *\n * @category CSS Value\n */\nexport type StypValue =\n    | string\n    | number\n    | boolean\n    | undefined\n    | StypNumeric<any>\n    | StypURL\n    | StypColor;\n\n/**\n * Structured property CSS value. E.g. [length](https://developer.mozilla.org/en-US/docs/Web/CSS/length),\n * [percentage](https://developer.mozilla.org/en-US/docs/Web/CSS/percentage),\n * [color](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value), etc.\n *\n * @category CSS Value\n * @typeParam TSelf - A type of itself.\n */\nexport abstract class StypValueStruct<TSelf extends StypValueStruct<TSelf>> {\n\n  /**\n   * CSS property value priority.\n   *\n   * The value {@link StypPriority.Important} and above means the property is `!important`. Everything else means normal\n   * priority.\n   *\n   * The property value with higher priority number takes precedence over the one with lower one.\n   */\n  readonly priority: number;\n\n  /**\n   * Constructs structured CSS property value.\n   *\n   * @param opts - Construction options.\n   */\n  protected constructor(opts?: StypValue.Opts) {\n    this.priority = opts && opts.priority || StypPriority.Default;\n  }\n\n  /**\n   * Checks whether this value equals to CSS property value.\n   *\n   * @param other - CSS property value to compare with.\n   */\n  abstract is(other: StypValue): boolean;\n\n  /**\n   * Creates structured CSS value with the given `priority`.\n   *\n   * @param priority - New priority.\n   *\n   * @returns Either a new value equal to this one but having the given `priority`, or this one if `priority` did\n   * not change.\n   */\n  abstract prioritize(priority: number): TSelf;\n\n  /**\n   * Creates `!important` variant of this value.\n   *\n   * @returns Either a new value equal to this one but having `priority` equal to {@link StypPriority.Important},\n   * or this one if already the case.\n   */\n  important(): TSelf {\n    return this.prioritize(StypPriority.Important);\n  }\n\n  /**\n   * Creates usual (not `!important`) variant of this value.\n   *\n   * @returns Either a new value equal to this one but having `priority` equal to {@link StypPriority.Usual},\n   * or this one if already the case.\n   */\n  usual(): TSelf {\n    return this.prioritize(StypPriority.Usual);\n  }\n\n  /**\n   * Maps the given CSS property value to the value of this one's type. Defaults to this value if mapping is not\n   * possible.\n   *\n   * This method allows to use an structured value instance as {@link StypMapper.Mapping CSS property mapping}.\n   *\n   * @param source - A raw property value that should be converted.\n   *\n   * @returns Mapped property value.\n   */\n  abstract by(source: StypValue): StypValue;\n\n  /**\n   * Returns textual representation of this value.\n   *\n   * Textual representation never contains an `!important` suffix.\n   *\n   * @returns A textual representation of this value to use as CSS property value.\n   */\n  abstract toString(): string;\n\n}\n\n/**\n * @category CSS Value\n */\nexport namespace StypValue {\n\n  /**\n   * Construction options of structured property CSS value.\n   */\n  export interface Opts {\n\n    /**\n     * Constructed value priority.\n     *\n     * The value {@link StypPriority.Important} and above means the property is `!important`. Everything else means\n     * normal priority.\n     */\n    readonly priority?: number;\n\n  }\n\n}\n\n/**\n * Checks whether two CSS property values are equal.\n *\n * Compares scalar values verbatim. Compares structured values using their {@link StypValueStruct.is} method. The latter\n * method is applied when at least one of the values is structured.\n *\n * @category CSS Value\n * @param first - The first CSS property value to compare.\n * @param second - The second CSS property value to compare.\n *\n * @returns `true` if `first` equals to `second`, or `false otherwise.\n */\nexport function stypValuesEqual(first: StypValue, second: StypValue): boolean {\n  if (first === second) {\n    return true;\n  }\n  if (typeof first === 'object') {\n    return first.is(second);\n  }\n  if (typeof second === 'object') {\n    return second.is(first);\n  }\n  return false;\n}\n","import { StypValue, StypValueStruct } from '../value';\n\n/**\n * Structured [color](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value) CSS property value.\n *\n * Colors are represented by either `rgb()`, or `hsl()` functional notations.\n *\n * @category CSS Value\n */\nexport type StypColor = StypRGB | StypHSL;\n\n/**\n * Structured color CSS property value base.\n *\n * @category CSS Value\n */\nexport abstract class StypColorStruct<TSelf extends StypColorStruct<TSelf, TCoords>, TCoords>\n    extends StypValueStruct<TSelf> {\n\n  /**\n   * Color value type corresponding to color coordinates. Either `rgb` or `hsl`\n   */\n  abstract readonly type: 'rgb' | 'hsl';\n\n  /**\n   * This color in RGB coordinates.\n   */\n  abstract readonly rgb: StypRGB;\n\n  /**\n   * This color in HSL coordinates.\n   */\n  abstract readonly hsl: StypHSL;\n\n  /**\n   * Constructs another color value with updated coordinates.\n   *\n   * @param coords - Either partial color coordinates to apply or a function returning them and accepting this color\n   * instance as its only argument. Missing values are taken from this color.\n   *\n   * @returns Updated color value.\n   */\n  abstract set(coords: Partial<TCoords> | ((this: void, color: this) => Partial<TCoords>)): TSelf;\n\n}\n\n/**\n * CSS property value representing [RGB color](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#RGB_colors)\n * in `rgb()` or `rgba()` functional notation.\n *\n * @category CSS Value\n */\nexport class StypRGB extends StypColorStruct<StypRGB, StypRGB.Coords> implements StypRGB.Coords {\n\n  // noinspection JSMethodCanBeStatic\n  /**\n   * `rgb` value type.\n   */\n  get type(): 'rgb' {\n    return 'rgb';\n  }\n\n  /**\n   * Red color value between `0` and `255`.\n   */\n  readonly r: number;\n\n  /**\n   * Green color value between `0` and `255`.\n   */\n  readonly g: number;\n\n  /**\n   * Blue color value between `0` and `255`.\n   */\n  readonly b: number;\n\n  /**\n   * Alpha value between `0` and `1`.\n   */\n  readonly a: number;\n\n  /**\n   * Constructs RGB color value.\n   *\n   * @param coords - Color coordinates.\n   * @param opts - Construction options.\n   */\n  constructor(coords: StypRGB.Coords, opts?: StypValue.Opts) {\n    super(opts);\n    this.r = intCoord(coords.r, 255);\n    this.g = intCoord(coords.g, 255);\n    this.b = intCoord(coords.b, 255);\n    this.a = coords.a != null ? coord(coords.a, 1) : 1;\n  }\n\n  /**\n   * This color in RGB coordinates.\n   *\n   * Always the same as `this`.\n   */\n  get rgb(): this {\n    return this;\n  }\n\n  /**\n   * This color in HSL coordinates.\n   */\n  get hsl(): StypHSL {\n\n    const { a } = this;\n    const r = this.r * 100 / 255;\n    const g = this.g * 100 / 255;\n    const b = this.b * 100 / 255;\n    const max = Math.max(r, g, b);\n    const min = Math.min(r, g, b);\n    const l = Math.round((max + min) / 2);\n\n    if (max === min) {\n      return new StypHSL({ h: 0, s: 0, l, a }, this);\n    }\n\n    const d = max - min;\n    const s = Math.round(l > 50 ? d * 100 / (200 - max - min) : d * 100 / (max + min));\n    let h: number;\n\n    switch (max) {\n    case r:\n      h = ((g - b) / d) + (g < b ? 6 : 0);\n      break;\n    case g:\n      h = ((b - r) / d) + 2;\n      break;\n    default:\n      h = ((r - g) / d) + 4;\n      break;\n    }\n    h *= 60;\n    h = Math.round(h);\n\n    return new StypHSL({ h, s, l, a }, this);\n  }\n\n  by(source: StypValue): StypColor {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    return StypColor.by(source) || this;\n  }\n\n  is(other: StypValue): boolean {\n    return typeof other === 'object'\n        && other.type === this.type\n        && other.r === this.r\n        && other.g === this.g\n        && other.b === this.b\n        && other.a === this.a\n        && other.priority === this.priority;\n  }\n\n  prioritize(priority: number): StypRGB {\n    return this.priority === priority ? this : new StypRGB(this, { priority });\n  }\n\n  set(coords: Partial<StypRGB.Coords> | ((this: void, color: this) => Partial<StypRGB.Coords>)): StypRGB {\n    if (typeof coords === 'function') {\n      coords = coords(this);\n    }\n\n    const { r = this.r, g = this.g, b = this.b, a = this.a } = coords;\n\n    return new StypRGB({ r, g, b, a }, this);\n  }\n\n  toString(): string {\n\n    const rgb = `${this.r}, ${this.g}, ${this.b}`;\n\n    return this.a === 1 ? `rgb(${rgb})` : `rgba(${rgb}, ${this.a})`;\n\n  }\n\n}\n\n/**\n * @category CSS Value\n */\nexport namespace StypRGB {\n\n  /**\n   * [RGB color](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#RGB_colors) coordinates.\n   */\n  export interface Coords {\n\n    /**\n     * Red color value between `0` and `255`.\n     */\n    r: number;\n\n    /**\n     * Green color value between `0` and `255`.\n     */\n    g: number;\n\n    /**\n     * Blue color value between `0` and `255`.\n     */\n    b: number;\n\n    /**\n     * Alpha value between `0` and `1`. `1` (full opacity) by default.\n     */\n    a?: number;\n  }\n\n}\n\n/**\n * CSS property value representing [HSL color](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#HSL_colors)\n * in `hsl()` or `hsla()` functional notation.\n *\n * @category CSS Value\n */\nexport class StypHSL extends StypColorStruct<StypHSL, StypHSL.Coords> implements StypHSL.Coords {\n\n  // noinspection JSMethodCanBeStatic\n  get type(): 'hsl' {\n    return 'hsl';\n  }\n\n  /**\n   * Hue angle value in degrees between `0` and `360`.\n   */\n  readonly h: number;\n\n  /**\n   * Saturation percentage.\n   */\n  readonly s: number;\n\n  /**\n   * Lightness percentage.\n   */\n  readonly l: number;\n\n  /**\n   * Alpha value between `0` and `1`.\n   */\n  readonly a: number;\n\n  /**\n   * Constructs HSL color value.\n   *\n   * @param coords - Color coordinates.\n   * @param opts - Construction options.\n   */\n  constructor(coords: StypHSL.Coords, opts?: StypValue.Opts) {\n    super(opts);\n    this.h = angleCoord(coords.h);\n    this.s = coord(coords.s, 100);\n    this.l = coord(coords.l, 100);\n    this.a = coords.a != null ? coord(coords.a, 1) : 1;\n  }\n\n  /**\n   * This color in RGB coordinates.\n   */\n  get rgb(): StypRGB {\n\n    const { a } = this;\n    const s = this.s / 100;\n    const l = this.l / 100;\n\n    if (!s) {\n\n      const c = l * 255;\n\n      return new StypRGB({ r: c, g: c, b: c, a }, this);\n    }\n\n    const q = l < 0.5 ? l * (1 + s) : (l + s) - (l * s);\n    const p = (2 * l) - q;\n    const hueAsFraction = this.h / 360;\n\n    return new StypRGB(\n        {\n          r: hueToRgb(p, q, hueAsFraction + (1.0 / 3.0)),\n          g: hueToRgb(p, q, hueAsFraction),\n          b: hueToRgb(p, q, hueAsFraction - (1.0 / 3.0)),\n          a,\n        },\n        this,\n    );\n  }\n\n  /**\n   * This color in HSL coordinates.\n   *\n   * Always the same as `this`.\n   */\n  get hsl(): this {\n    return this;\n  }\n\n  by(source: StypValue): StypColor {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    return StypColor.by(source) || this;\n  }\n\n  is(other: StypValue): boolean {\n    return typeof other === 'object'\n        && other.type === this.type\n        && other.h === this.h\n        && other.s === this.s\n        && other.l === this.l\n        && other.a === this.a\n        && other.priority === this.priority;\n  }\n\n  prioritize(priority: number): StypHSL {\n    return this.priority === priority ? this : new StypHSL(this, { priority });\n  }\n\n  set(coords: Partial<StypHSL.Coords> | ((this: void, color: this) => Partial<StypHSL.Coords>)): StypHSL {\n    if (typeof coords === 'function') {\n      coords = coords(this);\n    }\n\n    const { h = this.h, s = this.s, l = this.l, a = this.a } = coords;\n\n    return new StypHSL({ h, s, l, a }, this);\n  }\n\n  toString(): string {\n\n    const hsl = `${this.h}, ${this.s}%, ${this.l}%`;\n\n    return this.a === 1 ? `hsl(${hsl})` : `hsla(${hsl}, ${this.a})`;\n  }\n\n}\n\n/**\n * @category CSS Value\n */\nexport namespace StypHSL {\n\n  /**\n   * [HSL color](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#HSL_colors) coordinates.\n   */\n  export interface Coords {\n\n    /**\n     * Hue angle value in degrees.\n     */\n    h: number;\n\n    /**\n     * Saturation percentage.\n     */\n    s: number;\n\n    /**\n     * Lightness percentage.\n     */\n    l: number;\n\n    /**\n     * Alpha value between `0` and `1`. `1` (full opacity) by default.\n     */\n    a?: number;\n  }\n\n}\n\n/**\n * @category CSS Value\n */\nexport const StypColor = {\n\n  /**\n   * Maps the given CSS property value to color. Defaults to `undefined` if mapping is not possible.\n   *\n   * This method allows to use a {@link StypColor} object as {@link StypMapper.Mapping CSS property mapping}.\n   *\n   * @param source - A raw property value that should be converted.\n   *\n   * @returns Mapped property value or `undefined`.\n   */\n  by(source: StypValue): StypColor | undefined {\n    if (typeof source === 'object' && (source.type === 'rgb' || source.type === 'hsl')) {\n      return source;\n    }\n    return;\n  },\n\n};\n\n/**\n * @internal\n */\nfunction angleCoord(value: number): number {\n  value = value % 360;\n  return value < 0 ? 360 + value : value;\n}\n\n/**\n * @internal\n */\nfunction intCoord(value: number, max: number): number {\n  return coord(Math.round(value), max);\n}\n\n/**\n * @internal\n */\nfunction coord(value: number, max: number): number {\n  return Math.max(Math.min(value, max), 0);\n}\n\n/**\n * @internal\n */\nfunction hueToRgb(p: number, q: number, t: number): number {\n\n  let newT = t;\n\n  if (newT < 0) {\n    newT += 1;\n  } else if (newT > 1) {\n    newT -= 1;\n  }\n\n  let result;\n\n  if (newT < 1.0 / 6.0) {\n    result = p + ((q - p) * (6 * newT));\n  } else if (newT < 1.0 / 2.0) {\n    result = q;\n  } else if (newT < 2.0 / 3.0) {\n    result = p + (((q - p) * ((2.0 / 3.0) - newT)) * 6);\n  } else {\n    result = p;\n  }\n\n  return result * 255;\n}\n","import { StypColor, StypRGB } from './color';\n\n/**\n * Mixes two colors.\n *\n * Both the `weight` and the relative opacity of each color determines how much of each color is in the result.\n *\n * @category CSS Value\n * @param color1 - First color to mix\n * @param color2 - Second color to mix.\n * @param weight - A number between `0` and `1`. A larger weight indicates that more of `color1` should be used, and a\n * smaller weight indicates that more of `color2` should be used.\n *\n * @returns Mixed color.\n */\nexport function mixStypColors(color1: StypColor, color2: StypColor, weight: number): StypColor {\n\n  const w = weight * 2 - 1;\n  const rgba1 = color1.rgb;\n  const rgba2 = color2.rgb;\n  const aDiff = rgba1.a - rgba2.a;\n  const w1 = (((w * aDiff === -1) ? w : (w + aDiff) / (1 + w * aDiff)) + 1) / 2.0;\n  const w2 = 1 - w1;\n  return new StypRGB(\n      {\n        r: rgba1.r * w1 + rgba2.r * w2,\n        g: rgba1.g * w1 + rgba2.g * w2,\n        b: rgba1.b * w1 + rgba2.b * w2,\n        a: rgba1.a * weight + rgba2.a * (1 - weight),\n      },\n      color1,\n  );\n}\n","import { StypValue, StypValueStruct } from '../value';\nimport { StypZero } from './zero';\n\n/**\n * Structured numeric CSS property value.\n *\n * This represents either dimension, zero value, or a `calc()` CSS function call.\n *\n * @category CSS Value\n * @typeParam TUnit - Allowed unit type.\n * @typeParam TZero - A type of zero value. {@link StypZero} by default.\n */\nexport type StypNumeric<TUnit extends string, TZero extends StypZero<TUnit> | StypDimension<TUnit> = StypZero<TUnit>> =\n    | StypDimension<TUnit>\n    | StypCalc<TUnit>\n    | TZero;\n\n/**\n * Base implementation of structured numeric CSS property value.\n *\n * @category CSS Value\n * @typeParam TSelf - A type of itself.\n * @typeParam TUnit - Allowed unit type.\n */\nexport abstract class StypNumericStruct<TSelf extends StypNumericStruct<TSelf, TUnit>, TUnit extends string>\n    extends StypValueStruct<TSelf> {\n\n  /**\n   * A type of structured numeric CSS property value.\n   */\n  abstract type: 'dimension' | 'calc' | 0;\n\n  readonly dim: StypDimension.Kind<TUnit>;\n\n  constructor(opts: StypDimension.Opts<TUnit>) {\n    super(opts);\n    this.dim = opts.dim;\n  }\n\n  /**\n   * Tries to converts this numeric value to another dimension.\n   *\n   * Does not actually construct a value in another dimension, as long as dimension unit supported by both dimensions.\n   *\n   * @typeParam TDimUnit - A unit type allowed in target dimension.\n   * @param dim - Target dimension.\n   *\n   * @returns Either a value in dimension compatible with `dim`, or `undefined` if this value's unit is not supported\n   * by `dim`.\n   */\n  abstract toDim<TDimUnit extends string>(dim: StypDimension.Kind<TDimUnit>): StypNumeric<TDimUnit> | undefined;\n\n  abstract add(addendum: StypNumeric<TUnit>): StypNumeric<TUnit>;\n\n  abstract add(addendum: number, unit: TUnit): StypNumeric<TUnit>;\n\n  abstract sub(subtrahend: StypNumeric<TUnit>): StypNumeric<TUnit>;\n\n  abstract sub(subtrahend: number, unit: TUnit): StypNumeric<TUnit>;\n\n  abstract mul(multiplier: number): StypNumeric<TUnit>;\n\n  abstract div(divisor: number): StypNumeric<TUnit>;\n\n  abstract negate(): StypNumeric<TUnit>;\n\n  by(source: StypValue): StypNumeric<TUnit> {\n    return this.dim.by(source) || this as StypNumeric<TUnit>;\n  }\n\n  /**\n   * Returns a textual representation of this value to be used within CSS `calc()` function.\n   *\n   * @returns CSS value text without `!important` or `calc()`.\n   */\n  abstract toFormula(): string;\n\n  toString(): string {\n    return this.toFormula();\n  }\n\n}\n\n/**\n * Structured [dimension](https://developer.mozilla.org/en-US/docs/Web/CSS/dimension) value with unit.\n *\n * @category CSS Value\n * @typeParam TUnit - Allowed units type.\n */\nexport interface StypDimension<TUnit extends string>\n    extends StypValueStruct<StypDimension<TUnit>>, StypNumericStruct<StypDimension<TUnit>, TUnit> {\n\n  readonly type: 'dimension';\n\n  readonly dim: StypDimension.Kind<TUnit>;\n\n  /**\n   * Dimension value.\n   */\n  readonly val: number;\n\n  /**\n   * Dimension unit.\n   */\n  readonly unit: TUnit;\n\n  add(addendum: StypNumeric<TUnit>): StypNumeric<TUnit>;\n\n  add(addendum: number, unit?: TUnit): StypNumeric<TUnit>;\n\n  sub(subtrahend: StypNumeric<TUnit>): StypNumeric<TUnit>;\n\n  sub(subtrahend: number, unit?: TUnit): StypNumeric<TUnit>;\n\n  by(source: StypValue): StypNumeric<TUnit>;\n\n}\n\n/**\n * @category CSS Value\n */\nexport namespace StypDimension {\n\n  /**\n   * A kind of dimensions. E.g. angle, length, percentage, etc.\n   *\n   * It is perfectly fine to use dimensions interchangeably as long as dimension units are compatible.\n   *\n   * @typeParam TUnit - Allowed units type.\n   */\n  export interface Kind<TUnit extends string> {\n\n    /**\n     * A similar kind of dimensions supporting all units this one supports and, in addition, supporting percents (`%`).\n     *\n     * `undefined` if there is no such dimension kind. Refers itself if supports percents.\n     */\n    readonly pt?: Kind<TUnit | '%'>;\n\n    /**\n     * A similar kind of dimensions supporting all units this one supports, except percents (`%`).\n     *\n     * `undefined` if there is no such dimension kind. Refers itself if does not support percents.\n     */\n    readonly noPt: Kind<Exclude<TUnit, '%'>>;\n\n    /**\n     * Zero value of this kind.\n     *\n     * Typically, this is unit-less {@link StypZero}. But some dimensions require units.\n     */\n    readonly zero: StypDimension<TUnit> | StypZero<TUnit>;\n\n    /**\n     * Constructs dimension value.\n     *\n     * @param val - Numeric dimension value.\n     * @param unit - Dimension unit.\n     *\n     * @returns Constructed dimension value. Either {@link StypDimension} instance, or {@link StypZero} if `val` is `0`\n     * and this dimension kind supports unitless zero.\n     */\n    of(val: number, unit: TUnit): StypDimension<TUnit> | StypZero<TUnit>;\n\n    /**\n     * Maps the given CSS property value to the one compatible with this dimension kind. Defaults to `undefined`\n     * if mapping is not possible.\n     *\n     * This method allows to use a dimension kind as {@link StypMapper.Mapping CSS property mapping}.\n     *\n     * Any scalar or non-numeric value is mapped to `undefined`. A numeric value is converted to this dimension by\n     * {@link StypNumericStruct.toDim} method.\n     *\n     * @param source - A raw property value that should be converted.\n     *\n     * @returns Mapped property value or `undefined`.\n     */\n    by(source: StypValue): StypNumeric<TUnit, StypDimension<TUnit> | StypZero<TUnit>> | undefined;\n\n  }\n\n  export namespace Kind {\n\n    /**\n     * A kind of dimension with unit-less zero. E.g. angle or length.\n     *\n     * @typeParam TUnit - Allowed units type.\n     */\n    export interface UnitlessZero<TUnit extends string> extends Kind<TUnit> {\n\n      readonly pt?: UnitlessZero<TUnit | '%'>;\n\n      readonly noPt: UnitlessZero<Exclude<TUnit, '%'>>;\n\n      /**\n       * Zero value of this kind without unit.\n       */\n      readonly zero: StypZero<TUnit>;\n\n      /**\n       * Constructs dimension value.\n       *\n       * @param val - Numeric dimension value.\n       * @param unit - Dimension unit.\n       *\n       * @returns Constructed dimension value. Either {@link StypDimension} instance, or {@link StypZero} if `val` is\n       * `0`.\n       */\n      of(val: number, unit: TUnit): StypDimension<TUnit> | StypZero<TUnit>;\n\n      by(source: StypValue): StypNumeric<TUnit> | undefined;\n\n    }\n\n    /**\n     * A kind of dimension which zero value has unit. E.g. frequency or resolution.\n     *\n     * @typeParam TUnit - Allowed units type.\n     */\n    export interface UnitZero<TUnit extends string> extends Kind<TUnit> {\n\n      readonly pt?: UnitZero<TUnit | '%'>;\n\n      readonly noPt: UnitZero<Exclude<TUnit, '%'>>;\n\n      /**\n       * Zero value of this kind that has unit.\n       */\n      readonly zero: StypDimension<TUnit>;\n\n      /**\n       * Constructs dimension value.\n       *\n       * @param val - Numeric dimension value.\n       * @param unit - Dimension unit.\n       *\n       * @returns Constructed dimension value as a {@link StypDimension} instance.\n       */\n      of(val: number, unit: TUnit): StypDimension<TUnit>;\n\n      by(source: StypValue): StypNumeric<TUnit, StypDimension<TUnit>> | undefined;\n\n    }\n\n  }\n\n  /**\n   * Construction options of dimensions.\n   *\n   * @typeParam TUnit - Allowed units type.\n   */\n  export interface Opts<TUnit extends string> extends StypValue.Opts {\n\n    /**\n     * A kind of dimension.\n     */\n    dim: Kind<TUnit>;\n\n  }\n\n}\n\n/**\n * CSS `calc()` function call representation.\n *\n * This is either a {@link StypAddSub addition/subtraction}, or {@link StypMulDiv multiplication/division}.\n *\n * @category CSS Value\n * @typeParam TUnit - Allowed unit type.\n */\nexport type StypCalc<TUnit extends string> = StypAddSub<TUnit> | StypMulDiv<TUnit>;\n\n/**\n * CSS `calc()` function call representation containing either addition or subtraction.\n *\n * @category CSS Value\n * @typeParam TUnit - Allowed unit type.\n */\nexport interface StypAddSub<TUnit extends string> extends StypNumericStruct<StypAddSub<TUnit>, TUnit> {\n\n  readonly type: 'calc';\n\n  /**\n   * Left operand.\n   */\n  readonly left: StypNumeric<TUnit>;\n\n  /**\n   * Operator.\n   */\n  readonly op: '+' | '-';\n\n  /**\n   * Right operand.\n   */\n  readonly right: StypNumeric<TUnit>;\n\n}\n\n/**\n * CSS `calc()` function call representation containing either multiplication or division.\n *\n * @category CSS Value\n * @typeParam TUnit - Allowed unit type.\n */\nexport interface StypMulDiv<TUnit extends string> extends StypNumericStruct<StypMulDiv<TUnit>, TUnit> {\n\n  readonly type: 'calc';\n\n  /**\n   * Left operand.\n   */\n  readonly left: StypNumeric<TUnit>;\n\n  /**\n   * Operator.\n   */\n  readonly op: '*' | '/';\n\n  /**\n   * Right operand.\n   */\n  readonly right: number;\n\n}\n","import { itsEach, overKeys } from '@proc7ts/push-iterator';\nimport { StypProperties } from '../rule';\nimport { StypValue } from './value';\n\n/**\n * A type of function that maps CSS properties to something else.\n *\n * @category CSS Value\n * @typeParam TResult - A type of mapped properties. This is a mapping result type.\n */\nexport type StypMapper<TResult> =\n/**\n * @param from - CSS properties to map.\n *\n * @returns Mapping result.\n */\n    (this: void, from: StypProperties) => TResult;\n\n/**\n * @category CSS Value\n */\nexport namespace StypMapper {\n\n  /**\n   * CSS property mapping.\n   *\n   * It is used to recognize raw property value and convert it to the one of the given type.\n   *\n   * It is one of:\n   * - Default property value. Replaces the source property value, unless the the have the same type.\n   * - A mapping function. Replaces the source property value with the result of this function call.\n   * - An object containing mapping method called `by()`. Replaces the source property value with the result of this\n   *   method call.\n   *\n   * @typeParam TResult - A type of mapped properties. This is an object containing mapped properties.\n   * @typeParam TResultKey - Type of mapped properties keys.\n   */\n  export type Mapping<TResult, TResultKey extends keyof TResult> =\n      | MappingFunction<TResult, TResultKey>\n      | MappingObject<TResult, TResultKey>\n      | TResult[TResultKey];\n\n  /**\n   * CSS property mapping function.\n   *\n   * @typeParam TResult - A type of mapped properties. This is a mapping result type.\n   * @typeParam TResultKey - Type of mapped properties keys.\n   */\n  export type MappingFunction<TResult, TResultKey extends keyof TResult> =\n  /**\n   * @param source - A raw property value that should be converted.\n   * @param mapped - An object granting access to other mapped properties.\n   * @param key - A key of converted property.\n   *\n   * @returns Mapped property value.\n   */\n      (this: void, source: StypValue, mapped: Mapped<TResult>, key: TResultKey) => TResult[TResultKey];\n\n  /**\n   * CSS property mapping object.\n   *\n   * @typeParam TResult - A type of mapped properties. This is a mapping result type.\n   * @typeParam TResultKey - Type of mapped properties keys.\n   */\n  export interface MappingObject<TResult, TResutKey extends keyof TResult> {\n\n    /**\n     * Maps CSS property value.\n     *\n     * @param source - A raw property value that should be converted.\n     * @param mapped - An object granting access to other mapped properties.\n     * @param key - A key of converted property.\n     *\n     * @returns Mapped property value.\n     */\n    by(source: StypValue, mapped: Mapped<TResult>, key: TResutKey): TResult[TResutKey];\n\n  }\n\n  /**\n   * Grants access to mapped values.\n   *\n   * Passed as a second argument to mapping function.\n   *\n   * @typeParam TResult - A type of mapped properties. This is a mapping result type.\n   */\n  export interface Mapped<TResultKey> {\n\n    /**\n     * Original properties to convert.\n     */\n    from: StypProperties;\n\n    /**\n     * Maps the property with the given type accordingly to mapping instruction.\n     *\n     * The mapping is performed at most once per property.\n     *\n     * @param key - Mapped property key.\n     *\n     * @returns Mapped property value.\n     */\n    get<TKey extends keyof TResultKey>(key: TKey): TResultKey[TKey];\n\n  }\n\n  /**\n   * Mappings of CSS properties.\n   *\n   * Contains mappings for each mapped CSS property with that property name as a key.\n   *\n   * @typeParam TResult - A type of mapped properties. This is a mapping result type.\n   */\n  export type Mappings<TResult> = { readonly [key in keyof TResult]: Mapping<TResult, key>; };\n\n}\n\n/**\n * @category CSS Value\n */\nexport const StypMapper = {\n\n  /**\n   * Maps CSS properties accordingly to the given `mappings`.\n   *\n   * @typeParam TResult - A type of mapped properties. This is a mapping result type.\n   * @param mappings - Mappings of CSS properties.\n   * @param from - Raw CSS properties to map.\n   *\n   * @returns Mapped properties.\n   */\n  map<TResult>(mappings: StypMapper.Mappings<TResult>, from: StypProperties): TResult {\n\n    const result = {} as { [key in keyof TResult]: TResult[key] };\n    const mapped = {\n      from,\n      get<TKey extends keyof TResult>(key: TKey): TResult[TKey] {\n        if (key in result) {\n          return result[key];\n        }\n\n        const mapper = mappingBy<TResult, TKey>(mappings[key]);\n        const mappedValue = mapper(from[key as string], this, key);\n\n        result[key] = mappedValue;\n\n        return mappedValue;\n      },\n    };\n\n    itsEach(overKeys(mappings), key => mapped.get(key));\n\n    return result;\n  },\n\n  /**\n   * Creates CSS properties mapper function.\n   *\n   * @typeParam TResult - A type of mapped properties. This is a mapping result type.\n   * @param mappings - Mappings of CSS properties.\n   *\n   * @returns A function that maps CSS properties accordingly to the given `mappings`.\n   */\n  by<TResult>(mappings: StypMapper.Mappings<TResult>): StypMapper<TResult> {\n    return StypMapper.map.bind<void, StypMapper.Mappings<TResult>, [StypProperties], TResult>(undefined, mappings);\n  },\n\n};\n\n/**\n * @internal\n */\nfunction mappingBy<TResult, TResultKey extends keyof TResult>(\n    mapping: StypMapper.Mapping<TResult, TResultKey> | undefined,\n): StypMapper.MappingFunction<TResult, TResultKey> {\n  switch (typeof mapping) {\n  case 'function':\n    return mapping as StypMapper.MappingFunction<TResult, TResultKey>;\n  case 'object':\n    return (mapping as StypMapper.MappingObject<TResult, TResultKey>).by.bind(mapping);\n  default:\n  }\n\n  const type = typeof mapping;\n\n  return (from: StypValue): TResult[TResultKey] => typeof from === type\n      ? from as unknown as TResult[TResultKey]\n      : mapping as TResult[TResultKey];\n}\n","import { IMPORTANT_CSS_SUFFIX } from '../internal';\nimport { StypValue } from './value';\n\n/**\n * Predefined CSS property value priorities.\n *\n * @category CSS Value\n */\nexport const enum StypPriority {\n\n  /**\n   * Usual, non-important priority.\n   *\n   * This priority is assigned to values by {@link StypValueStruct.usual} method.\n   */\n  Usual = 0,\n\n  /**\n   * Default priority.\n   *\n   * The same as `Usual`. This priority is assigned to values by default.\n   */\n  Default = Usual,\n\n  /**\n   * Important priority.\n   *\n   * This priority corresponds to values with `!important` suffix. It is applied to string values with `!important`\n   * suffix, and can be assigned to structured values using {@link StypValueStruct.important} method.\n   *\n   * All numeric priorities with higher values are rendered as `!important` ones.\n   */\n  Important = 1,\n\n}\n\n/**\n * Splits undefined CSS property value onto non-prioritized value and priority.\n *\n * @category CSS Value\n * @param value - Undefined CSS property value to split.\n *\n * @returns An `[undefined, 0]` tuple.\n */\nexport function stypSplitPriority<T extends StypValue>(value: undefined): [undefined, 0];\n\n/**\n * Splits string CSS property value onto non-prioritized value and priority.\n *\n * @param value - CSS property value to split.\n *\n * @returns A tuple containing the value without `!priority` suffix, and numeric priority (0 or 1).\n */\nexport function stypSplitPriority(value: string): [string, 0 | 1];\n\n/**\n * Splits scalar CSS property value onto non-prioritized value and priority.\n *\n * @param value - CSS property value to split.\n *\n * @returns A tuple containing the value and `0` priority.\n */\nexport function stypSplitPriority<T extends number | boolean>(value: T): [T, 0];\n\n/**\n * Splits arbitrary CSS property value onto value non-prioritized value and priority.\n *\n * @param value - CSS property value to split.\n *\n * @returns A tuple containing the value and numeric priority.\n */\nexport function stypSplitPriority<T extends StypValue>(value: T): [T, number];\n\nexport function stypSplitPriority<T extends StypValue>(value: T): [T, number] {\n  if (value == null) {\n    return [undefined as T, StypPriority.Default];\n  }\n\n  switch (typeof value) {\n  case 'object':\n    return [value, value.priority];\n  case 'string':\n    if (value.endsWith(IMPORTANT_CSS_SUFFIX)) {\n      return [\n        value.substring(0, value.length - IMPORTANT_CSS_SUFFIX.length).trim() as T,\n        StypPriority.Important,\n      ];\n    }\n    break;\n  default:\n  }\n\n  return [value, StypPriority.Default];\n}\n","/**\n * @internal\n */\nexport const IMPORTANT_CSS_SUFFIX = '!important';\n","import { StypPriority } from '../priority';\nimport { StypValue, stypValuesEqual } from '../value';\nimport {\n  StypAddSub as StypAddSub_,\n  StypDimension as StypDimension_,\n  StypMulDiv as StypMulDiv_,\n  StypNumeric,\n  StypNumericStruct,\n} from './numeric';\nimport { StypZero } from './zero';\n\n/**\n * @internal\n */\nexport class StypDimension<TUnit extends string>\n    extends StypNumericStruct<StypDimension<TUnit>, TUnit>\n    implements StypDimension_<TUnit> {\n\n  get type(): 'dimension' {\n    return 'dimension';\n  }\n\n  /**\n   * The number value.\n   */\n  readonly val: number;\n\n  /**\n   * The unit.\n   */\n  readonly unit: TUnit;\n\n  /**\n   * Constructs new structured dimension value.\n   *\n   * @param val - The numeric value.\n   * @param unit - The unit.\n   * @param opts - CSS value options.\n   */\n  constructor(val: number, unit: TUnit, opts: StypDimension_.Opts<TUnit>) {\n    super(opts);\n    this.val = val;\n    this.unit = unit;\n  }\n\n  toDim<TDimUnit extends string>(dim: StypDimension_.Kind<TDimUnit>): StypDimension_<TDimUnit> | undefined {\n\n    const thisDim: StypDimension_.Kind<any> = this.dim;\n\n    if (dim === thisDim /* same dimension */\n        || dim === thisDim.pt /* !% to compatible +% */\n        || dim === (this.unit === '%' ? dim.pt /* % to any +% */ : thisDim.noPt /* !% to compatible -% */)) {\n      return this as StypDimension_<any>;\n    }\n\n    return;\n  }\n\n  is(other: StypValue): boolean {\n    if (other === this) {\n      return true;\n    }\n    return typeof other === 'object'\n        && other.type === this.type\n        && this.unit === other.unit\n        && this.val === other.val\n        && this.priority === other.priority;\n  }\n\n  prioritize(priority: number): StypDimension<TUnit> {\n    return this.priority === priority\n        ? this\n        : new StypDimension(this.val, this.unit, { dim: this.dim, priority });\n  }\n\n  add(addendum: StypNumeric<TUnit>): StypNumeric<TUnit>;\n\n  add(addendum: number, unit?: TUnit): StypNumeric<TUnit>;\n\n  add(addendum: StypNumeric<TUnit> | number, unit?: TUnit): StypNumeric<TUnit> {\n    if (typeof addendum === 'number') {\n      addendum = stypDimension(addendum, unit || this.unit, this);\n    }\n    if (addendum.type === 'dimension' && this.unit === addendum.unit) {\n      return stypDimension(this.val + addendum.val, this.unit, this);\n    }\n    return stypAddSub(this, '+', addendum);\n  }\n\n  sub(subtrahend: StypNumeric<TUnit>): StypNumeric<TUnit>;\n\n  sub(subtrahend: number, unit?: TUnit): StypNumeric<TUnit>;\n\n  sub(subtrahend: StypNumeric<TUnit> | number, unit?: TUnit): StypNumeric<TUnit> {\n    if (typeof subtrahend === 'number') {\n      subtrahend = stypDimension(subtrahend, unit || this.unit, this);\n    }\n    if (subtrahend.type === 'dimension' && this.unit === subtrahend.unit) {\n      return stypDimension(this.val - subtrahend.val, this.unit, this);\n    }\n    return stypAddSub(this, '-', subtrahend);\n  }\n\n  mul(multiplier: number): StypNumeric<TUnit> {\n    return multiplier === 1 ? this : stypDimension(this.val * multiplier, this.unit, this);\n  }\n\n  div(divisor: number): StypNumeric<TUnit> {\n    return divisor === 1 ? this : stypDimension(this.val / divisor, this.unit, this);\n  }\n\n  negate(): StypNumeric<TUnit> {\n    return stypDimension(-this.val, this.unit, this);\n  }\n\n  /**\n   * Returns a textual representation of this value to be used within CSS `calc()` function.\n   *\n   * @returns `<value><unit>` or just `0`.\n   */\n  toFormula(): string {\n    return `${this.val}${this.unit}`;\n  }\n\n}\n\n/**\n * Constructs structured [dimension] CSS property value.\n *\n * @param val - Numeric value.\n * @param unit - Value unit.\n * @param opts - Construction options.\n *\n * @returns Either {@link StypDimension}, or {@link StypZero} if `val === 0`.\n *\n * [dimension]: https://developer.mozilla.org/en-US/docs/Web/CSS/dimension\n *\n * @internal\n */\nexport function stypDimension<TUnit extends string>(\n    val: number,\n    unit: TUnit,\n    opts: StypDimension_.Opts<TUnit>,\n): StypDimension_<TUnit> | StypZero<TUnit> {\n  return val\n      ? new StypDimension<TUnit>(val, unit, opts)\n      : opts.dim.zero.prioritize(opts.priority || StypPriority.Default);\n}\n\n/**\n * @internal\n */\nexport abstract class StypCalcBase<\n    TSelf extends StypCalcBase<TSelf, TOp, TRight, TUnit>,\n    TOp extends '+' | '-' | '*' | '/',\n    TRight extends number | StypNumeric<TUnit>,\n    TUnit extends string\n    > extends StypNumericStruct<TSelf, TUnit> {\n\n  // noinspection JSMethodCanBeStatic\n  get type(): 'calc' {\n    return 'calc';\n  }\n\n  readonly left: StypNumeric<TUnit>;\n  readonly op: TOp;\n  readonly right: TRight;\n\n  // noinspection TypeScriptAbstractClassConstructorCanBeMadeProtected\n  constructor(\n      left: StypNumeric<TUnit>,\n      op: TOp,\n      right: TRight,\n      opts: StypDimension_.Opts<TUnit>,\n  ) {\n    super(opts);\n    this.left = left.usual();\n    this.op = op;\n    this.right = right;\n  }\n\n  is(other: StypValue): boolean {\n    if (this === other) {\n      return true;\n    }\n    if (typeof other === 'object' && other.type === this.type) {\n      return this.op === other.op\n          && this.left.is(other.left)\n          && stypValuesEqual(this.right, other.right)\n          && this.priority === other.priority;\n    }\n    return false;\n  }\n\n  add(addendum: StypNumeric<TUnit>): StypNumeric<TUnit>;\n\n  add(addendum: number, unit: TUnit): StypNumeric<TUnit>;\n\n  add(addendum: StypNumeric<TUnit> | number, unit?: TUnit): StypNumeric<TUnit> {\n    if (typeof addendum === 'number') {\n      addendum = stypDimension(addendum, unit as TUnit, this);\n    }\n    return stypAddSub(this as StypNumeric<TUnit>, '+', addendum);\n  }\n\n  sub(subtrahend: StypNumeric<TUnit>): StypNumeric<TUnit>;\n\n  sub(subtrahend: number, unit: TUnit): StypNumeric<TUnit>;\n\n  sub(subtrahend: StypNumeric<TUnit> | number, unit?: TUnit): StypNumeric<TUnit> {\n    if (typeof subtrahend === 'number') {\n      subtrahend = stypDimension(subtrahend, unit as TUnit, this);\n    }\n    return stypAddSub(this as StypNumeric<TUnit>, '-', subtrahend);\n  }\n\n  mul(multiplier: number): StypNumeric<TUnit> {\n    return stypMul(this as StypNumeric<TUnit>, multiplier);\n  }\n\n  div(divisor: number): StypNumeric<TUnit> {\n    return stypDiv(this as StypNumeric<TUnit>, divisor);\n  }\n\n  abstract negate(): StypNumeric<TUnit>;\n\n  abstract prioritize(priority: number): TSelf;\n\n  abstract toFormula(): string;\n\n  toString(): string {\n    return 'calc' + super.toString();\n  }\n\n}\n\n/**\n * CSS `calc()` function call representation containing either addition or subtraction.\n *\n * @typeParam TUnit - Allowed unit type.\n *\n * @internal\n */\nexport class StypAddSub<TUnit extends string>\n    extends StypCalcBase<StypAddSub<TUnit>, '+' | '-', StypNumeric<TUnit>, TUnit>\n    implements StypAddSub_<TUnit> {\n\n  constructor(left: StypNumeric<TUnit>, op: '+' | '-', right: StypNumeric<TUnit>, opts: StypDimension_.Opts<TUnit>) {\n    super(left, op, right.usual(), opts);\n  }\n\n  prioritize(priority: number): StypAddSub<TUnit> {\n    return this.priority === priority\n        ? this\n        : new StypAddSub(this.left, this.op, this.right, { dim: this.dim, priority });\n  }\n\n  toDim<TDimUnit extends string>(dim: StypDimension_.Kind<TDimUnit>): StypAddSub<TDimUnit> | undefined {\n\n    const left = this.left.toDim(dim);\n\n    if (!left) {\n      return;\n    }\n\n    const right = this.right.toDim(dim);\n\n    if (!right) {\n      return;\n    }\n\n    if (left === this.left as StypNumeric<any> && right === this.right as StypNumeric<any>) {\n      return this as StypAddSub<any>;\n    }\n\n    return new StypAddSub<TDimUnit>(left, this.op, right, { dim, priority: this.priority });\n  }\n\n  negate(): StypNumeric<TUnit> {\n    return this.op === '-'\n        ? new StypAddSub(this.right, this.op, this.left, this)\n        : new StypAddSub(this.left.negate(), '-', this.right, this);\n  }\n\n  /**\n   * Returns a textual representation of this value to be used within CSS `calc()` function.\n   *\n   * @returns `(<left> <op> <right>)`.\n   */\n  toFormula(): string {\n    return `(${this.left.toFormula()} ${this.op} ${this.right.toFormula()})`;\n  }\n\n}\n\nfunction stypAddSub<TUnit extends string>(\n    left: StypNumeric<TUnit>,\n    op: '+' | '-',\n    right: StypNumeric<TUnit>,\n): StypNumeric<TUnit> {\n  return !right.type ? left : new StypAddSub(left, op, right, left);\n}\n\n/**\n * CSS `calc()` function call representation containing either multiplication or division.\n *\n * @typeParam TUnit - Allowed unit type.\n *\n * @internal\n */\nexport class StypMulDiv<TUnit extends string>\n    extends StypCalcBase<StypMulDiv<TUnit>, '*' | '/', number, TUnit>\n    implements StypMulDiv_<TUnit> {\n\n  prioritize(priority: number): StypMulDiv<TUnit> {\n    return this.priority === priority\n        ? this\n        : new StypMulDiv(this.left, this.op, this.right, { dim: this.dim, priority });\n  }\n\n  toDim<TDimUnit extends string>(dim: StypDimension_.Kind<TDimUnit>): StypMulDiv<TDimUnit> | undefined {\n\n    const left = this.left.toDim(dim);\n\n    if (!left) {\n      return;\n    }\n\n    if (left === this.left as StypNumeric<any>) {\n      return this as StypMulDiv<any>;\n    }\n\n    return new StypMulDiv<TDimUnit>(left, this.op, this.right, { dim, priority: this.priority });\n  }\n\n  mul(multiplier: number): StypNumeric<TUnit> {\n    return (this.op === '*'\n        ? stypMul(this.left, this.right * multiplier)\n        : stypDiv(this.left, this.right / multiplier))\n        .prioritize(this.priority);\n  }\n\n  div(divisor: number): StypNumeric<TUnit> {\n    return (this.op === '/'\n        ? stypDiv(this.left, this.right * divisor)\n        : stypMul(this.left, this.right / divisor))\n        .prioritize(this.priority);\n  }\n\n  negate(): StypNumeric<TUnit> {\n    return new StypMulDiv(this.left, this.op, -this.right, this);\n  }\n\n  /**\n   * Returns a textual representation of this value to be used within CSS `calc()` function.\n   *\n   * @returns `(<left> <op> <right>)`.\n   */\n  toFormula(): string {\n    return `(${this.left.toFormula()} ${this.op} ${this.right})`;\n  }\n\n}\n\nfunction stypMul<TUnit extends string>(left: StypNumeric<TUnit>, right: number): StypNumeric<TUnit> {\n  return !right\n      ? left.dim.zero.prioritize(left.priority)\n      : right === 1\n          ? left.prioritize(left.priority)\n          : new StypMulDiv(left, '*', right, left);\n}\n\nfunction stypDiv<TUnit extends string>(left: StypNumeric<TUnit>, right: number): StypNumeric<TUnit> {\n  return right === 1\n      ? left.prioritize(left.priority)\n      : new StypMulDiv(left, '/', right, left);\n}\n\n/**\n * @internal\n */\nexport function isStypNumeric(source: StypValue): source is StypNumeric<any, any> {\n  return typeof source === 'object' && (source.type === 'dimension' || source.type === 'calc' || source.type === 0);\n}\n","import { StypPriority } from '../priority';\nimport { StypValue } from '../value';\nimport { StypDimension, StypNumeric, StypNumericStruct } from './index';\nimport { stypDimension } from './numeric.impl';\nimport { StypZero } from './zero';\n\nclass Zero<TUnit extends string> extends StypNumericStruct<Zero<TUnit>, TUnit> implements StypZero<TUnit> {\n\n  constructor(private readonly _byPriority: ZeroByPriority<TUnit>, opts: StypDimension.Opts<TUnit>) {\n    super(opts);\n  }\n\n  get type(): 0 {\n    return 0;\n  }\n\n  toDim<TDimUnit extends string>(dim: StypDimension.Kind<TDimUnit>): StypDimension<TDimUnit> | StypZero<TDimUnit> {\n    return dim.zero.prioritize(this.priority);\n  }\n\n  is(other: StypValue): boolean {\n    if (this === other) {\n      return true;\n    }\n    if (typeof other === 'object') {\n      return other.type === this.type && other.priority === this.priority;\n    }\n    if (other === 0 || other === '0') {\n      return this.priority === StypPriority.Usual;\n    }\n    if (other === '0 !important') {\n      return this.priority === StypPriority.Important;\n    }\n    return false;\n  }\n\n  add(addendum: StypNumeric<TUnit>): StypNumeric<TUnit>;\n\n  add(addendum: number, unit?: TUnit): StypNumeric<TUnit>;\n\n  add(addendum: StypNumeric<TUnit> | number, unit?: TUnit): StypNumeric<TUnit> {\n    if (typeof addendum === 'number') {\n      addendum = stypDimension(addendum, unit as TUnit, this);\n    }\n    return addendum.prioritize(this.priority);\n  }\n\n  sub(subtrahend: StypNumeric<TUnit>): StypNumeric<TUnit>;\n\n  sub(subtrahend: number, unit: TUnit): StypNumeric<TUnit>;\n\n  sub(subtrahend: StypNumeric<TUnit> | number, unit?: TUnit): StypNumeric<TUnit> {\n    if (typeof subtrahend === 'number') {\n      subtrahend = stypDimension(subtrahend, unit as TUnit, this);\n    }\n    return subtrahend.negate().prioritize(this.priority);\n  }\n\n  mul(): this {\n    return this;\n  }\n\n  div(): this {\n    return this;\n  }\n\n  negate(): this {\n    return this;\n  }\n\n  prioritize(priority: number): Zero<TUnit> {\n    return this._byPriority.get(priority);\n  }\n\n  important(): Zero<TUnit> {\n    return this._byPriority.important;\n  }\n\n  usual(): Zero<TUnit> {\n    return this._byPriority.usual;\n  }\n\n  toFormula(): string {\n    return '0';\n  }\n\n}\n\nclass ZeroByPriority<TUnit extends string> {\n\n  readonly usual: Zero<TUnit>;\n  readonly important: Zero<TUnit>;\n\n  constructor(readonly dim: StypDimension.Kind<TUnit>) {\n    this.usual = new Zero(this, { dim });\n    this.important = new Zero(this, { dim, priority: StypPriority.Important });\n  }\n\n  get(priority: number): Zero<TUnit> {\n    switch (priority) {\n    case StypPriority.Usual: return this.usual;\n    case StypPriority.Important: return this.important;\n    }\n    return new Zero(this, { dim: this.dim, priority });\n  }\n\n}\n\n/**\n * @internal\n */\nexport function newStypZero<TUnit extends string>(dim: StypDimension.Kind.UnitlessZero<TUnit>): StypZero<TUnit> {\n  return new ZeroByPriority<TUnit>(dim).usual;\n}\n","import { StypValue } from '../value';\nimport { StypDimension, StypNumeric } from './numeric';\nimport { isStypNumeric, StypDimension as StypDimension_ } from './numeric.impl';\nimport { StypZero } from './zero';\nimport { newStypZero } from './zero.impl';\n\n/**\n * @internal\n */\nexport function unitlessZeroDimensionKind<TUnit extends string>(\n    {\n      pt,\n      noPt,\n    }: {\n      pt: () => StypDimension.Kind.UnitlessZero<TUnit | '%'>;\n      noPt: () => StypDimension.Kind.UnitlessZero<Exclude<TUnit, '%'>>;\n    },\n): StypDimension.Kind.UnitlessZero<TUnit> {\n\n  const dimension: StypDimension.Kind.UnitlessZero<TUnit> = {\n\n    get zero(): StypZero<TUnit> {\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      return zero;\n    },\n\n    get pt() {\n      return pt();\n    },\n\n    get noPt() {\n      return noPt();\n    },\n\n    of(val: number, unit: TUnit): StypDimension<TUnit> | StypZero<TUnit> {\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      return val ? new StypDimension_(val, unit, { dim: this }) : zero;\n    },\n\n    by(source: StypValue): StypNumeric<TUnit> | undefined {\n      if (!isStypNumeric(source)) {\n        return;\n      }\n      return (source as StypNumeric<TUnit>).toDim(this);\n    },\n\n  };\n\n  const zero = newStypZero<TUnit>(dimension);\n\n  return dimension;\n}\n\n/**\n * @internal\n */\nexport function unitZeroDimensionKind<TUnit extends string>(\n    {\n      zeroUnit,\n      withPercent,\n      noPercent,\n    }: {\n      zeroUnit: TUnit;\n      withPercent?: () => StypDimension.Kind.UnitZero<TUnit | '%'>;\n      noPercent?: () => StypDimension.Kind.UnitZero<Exclude<TUnit, '%'>>;\n    },\n): StypDimension.Kind.UnitZero<TUnit> {\n\n  const dim: StypDimension.Kind.UnitZero<TUnit> = {\n\n    get pt() {\n      return withPercent && withPercent();\n    },\n\n    get noPt() {\n      return noPercent ? noPercent() : this as StypDimension.Kind.UnitZero<Exclude<TUnit, '%'>>;\n    },\n\n    get zero(): StypDimension<TUnit> {\n      return zero;// eslint-disable-line @typescript-eslint/no-use-before-define\n    },\n\n    of(val: number, unit: TUnit): StypDimension<TUnit> {\n      return new StypDimension_(val, unit, { dim: this });\n    },\n\n    by(source: StypValue): StypNumeric<TUnit, StypDimension<TUnit>> | undefined {\n      if (!isStypNumeric(source)) {\n        return;\n      }\n      return (source as StypNumeric<TUnit>).toDim(this) as StypNumeric<TUnit, StypDimension<TUnit>>;\n    },\n\n  };\n\n  const zero = new StypDimension_(0, zeroUnit, { dim });\n\n  return dim;\n}\n","import { StypDimension, StypNumeric } from '../numeric';\nimport { unitlessZeroDimensionKind } from '../numeric/dimension-kind.impl';\n\n/**\n * Structured [length](https://developer.mozilla.org/en-US/docs/Web/CSS/length) property value.\n *\n * Can be constructed using `StypLength.of()` function.\n *\n * @category CSS Value\n */\nexport type StypLength = StypNumeric<StypLength.Unit>;\n\n/**\n * @category CSS Value\n */\nexport namespace StypLength {\n\n  /**\n   * Supported length units, excluding percent.\n   */\n  export type Unit = 'cap' | 'ch' | 'em' | 'ex' | 'ic' | 'lh' | 'rem' | 'rlh'\n      | 'vh' | 'vw' | 'vi' | 'vb' | 'vmin' | 'vmax'\n      | 'px' | 'cm' | 'mm' | 'Q' | 'in' | 'pc' | 'pt';\n\n}\n\n/**\n * @category CSS Value\n */\nexport const StypLength: StypDimension.Kind.UnitlessZero<StypLength.Unit> = (/*#__PURE__*/ unitlessZeroDimensionKind({\n  pt() {\n    return StypLengthPt;// eslint-disable-line @typescript-eslint/no-use-before-define\n  },\n  noPt() {\n    return StypLength;\n  },\n}));\n\n/**\n * Structured [length-percentage](https://developer.mozilla.org/en-US/docs/Web/CSS/length-percentage) CSS property\n * value.\n *\n * Can be constructed using `StypLengthPt.of()` function.\n *\n * @category CSS Value\n */\nexport type StypLengthPt = StypNumeric<StypLengthPt.Unit>;\n\n/**\n * @category CSS Value\n */\nexport namespace StypLengthPt {\n\n  /**\n   * Supported length units, including percent.\n   */\n  export type Unit = StypLength.Unit | '%';\n\n}\n\n/**\n * @category CSS Value\n */\nexport const StypLengthPt: StypDimension.Kind.UnitlessZero<StypLengthPt.Unit> = (\n    /*#__PURE__*/ unitlessZeroDimensionKind({\n      pt() {\n        return StypLengthPt;\n      },\n      noPt() {\n        return StypLength;\n      },\n    })\n);\n","import { escapeCSSVal } from '@frontmeans/httongue';\nimport { stypSplitPriority } from './priority';\nimport { StypValue, StypValueStruct } from './value';\n\n/**\n * Structured [URL](https://developer.mozilla.org/en-US/docs/Web/CSS/url) CSS property value.\n *\n * @category CSS Value\n */\nexport class StypURL extends StypValueStruct<StypURL> {\n\n  /**\n   * Target URL.\n   */\n  readonly url: string;\n\n  /**\n   * `url` value type.\n   */\n  get type(): 'url' {\n    return 'url';\n  }\n\n  /**\n   * Maps the given CSS property value to URL. Defaults to `undefined` if mapping is not possible.\n   *\n   * This method allows to use a {@link StypURL} class as [CSS property mapping]{@link StypMapper.Mapping}.\n   *\n   * Strings are treated as URLs (without `url()` functional syntax). `!important` suffix is respected.\n   *\n   * @param source - A raw property value that should be converted.\n   *\n   * @returns Mapped property value or `undefined`.\n   */\n  static by(source: StypValue): StypURL | undefined {\n    switch (typeof source) {\n    case 'string': {\n\n      const [url, priority] = stypSplitPriority(source);\n\n      return new StypURL(url, { priority });\n    }\n    case 'object':\n      if (source.type === 'url') {\n        return source;\n      }\n      break;\n    default:\n    }\n    return;\n  }\n\n  /**\n   * Constructs URL value.\n   *\n   * @param url - Target URL.\n   * @param opts - Construction options.\n   */\n  constructor(url: string, opts?: StypValue.Opts) {\n    super(opts);\n    this.url = url;\n  }\n\n  by(source: StypValue): StypURL {\n    return StypURL.by(source) || this;\n  }\n\n  prioritize(priority: number): StypURL {\n    return priority === this.priority ? this : new StypURL(this.url, { priority });\n  }\n\n  is(other: StypValue): boolean {\n    return typeof other === 'object'\n        && other.type === 'url'\n        && other.url === this.url\n        && other.priority === this.priority;\n  }\n\n  toString(): string {\n    return `url(\"${escapeCSSVal(this.url)}\")`;\n  }\n\n}\n","import {\n  afterAll,\n  AfterEvent,\n  afterSupplied,\n  afterThe,\n  deduplicateAfter,\n  EventKeeper,\n  EventSender,\n  isEventKeeper,\n  isEventSender,\n  mapAfter,\n  mapAfter_,\n} from '@proc7ts/fun-events';\nimport { isPresent, valuesProvider } from '@proc7ts/primitives';\nimport { filterIt, itsIterator, itsReduction, overEntries } from '@proc7ts/push-iterator';\nimport { IMPORTANT_CSS_SUFFIX } from '../internal';\nimport { StypValue, stypValuesEqual } from '../value';\nimport { StypProperties } from './properties';\nimport { StypRule } from './rule';\n\n/**\n * @internal\n */\nexport const noStypProperties: AfterEvent<[StypProperties]> = (/*#__PURE__*/ afterThe({}));\n\n/**\n * @internal\n */\nexport function noStypPropertiesSpec(): AfterEvent<[StypProperties]> {\n  return noStypProperties;\n}\n\n/**\n * @internal\n */\nexport function stypPropertiesBySpec(rule: StypRule, spec?: StypProperties.Spec): AfterEvent<[StypProperties]> {\n  if (!spec) {\n    return noStypProperties;\n  }\n  if (typeof spec !== 'string') {\n    if (isEventKeeper(spec)) {\n      return preventDuplicates(spec);\n    }\n    if (isEventSender(spec)) {\n      return preventDuplicates(propertiesKeeper(spec));\n    }\n    if (typeof spec === 'function') {\n\n      const senderOrProperties = spec(rule);\n\n      if (typeof senderOrProperties !== 'string') {\n        if (isEventKeeper(senderOrProperties)) {\n          return preventDuplicates(senderOrProperties);\n        }\n        if (isEventSender(senderOrProperties)) {\n          return preventDuplicates(propertiesKeeper(senderOrProperties));\n        }\n      }\n\n      return afterThe(propertiesMap(senderOrProperties));\n    }\n  }\n\n  return afterThe(propertiesMap(spec));\n}\n\nfunction propertiesKeeper(sender: EventSender<[string | StypProperties]>): AfterEvent<[string | StypProperties]> {\n  return afterSupplied(sender, valuesProvider({}));\n}\n\nfunction preventDuplicates(properties: EventKeeper<[string | StypProperties]>): AfterEvent<[StypProperties]> {\n  return afterSupplied(properties).do(\n      mapAfter_(propertiesMap),\n      deduplicateAfter(isDuplicateProperties, cloneProperties),\n  );\n}\n\nfunction propertiesMap(properties: string | StypProperties): StypProperties {\n  return typeof properties === 'string' ? { $$css: properties } : properties;\n}\n\nfunction isDuplicateProperties(first: StypProperties, second: StypProperties): boolean {\n\n  const s = itsIterator(propertyEntries(second));\n\n  for (const [key, value] of propertyEntries(first)) {\n\n    const { value: sentry } = s.next() as IteratorResult<[keyof StypProperties, StypValue], undefined>;\n\n    if (!sentry || key !== sentry[0] || !stypValuesEqual(value, sentry[1])) {\n      return false;\n    }\n  }\n\n  return !s.next().value;\n}\n\nfunction cloneProperties([properties]: [StypProperties]): StypProperties {\n  return { ...properties };\n}\n\nfunction propertyEntries(properties: StypProperties): Iterable<readonly [keyof StypProperties, StypValue]> {\n  return filterIt(\n      overEntries(properties),\n      ([, value]) => isPresent(value),\n  );\n}\n\n/**\n * @internal\n */\nexport function mergeStypProperties(\n    base: AfterEvent<[StypProperties]>,\n    addendum: AfterEvent<[StypProperties]>,\n): AfterEvent<[StypProperties]> {\n  return preventDuplicates(\n      afterAll({ base, addendum }).do(\n          mapAfter(\n              ({\n                base: [baseProperties],\n                addendum: [addendumProperties],\n              }) => addValues(baseProperties, addendumProperties),\n          ),\n      ),\n  );\n}\n\nfunction addValues(base: StypProperties, addendum: StypProperties): StypProperties {\n  return itsReduction(\n      overEntries(addendum),\n      (result, [k, v]) => addValue(result, k, v),\n      { ...base },\n  );\n}\n\nfunction addValue(\n    properties: StypProperties.Mutable,\n    key: keyof StypProperties,\n    value: StypValue,\n): StypProperties.Mutable {\n  if (priorityOf(properties[key]) <= priorityOf(value)) {\n    delete properties[key];\n    properties[key] = value;\n  }\n  return properties;\n}\n\nfunction priorityOf(value: StypValue): number {\n  switch (typeof value) {\n  case 'string':\n    return value.endsWith(IMPORTANT_CSS_SUFFIX) ? 1 : 0;\n  case 'object':\n    return value.priority;\n  default:\n    return 0;\n  }\n}\n","import { compareNames, isQualifiedName, QualifiedName } from '@frontmeans/namespace-aliaser';\nimport { flatMapIt } from '@proc7ts/push-iterator';\nimport { isNotEmptyArray, isReadonlyArray } from '../internal';\nimport { StypPureSelector } from './pure-selector';\nimport { StypRuleKey } from './rule-key';\nimport { StypSelector } from './selector';\nimport { StypSubSelector } from './sub-selector';\n\n/**\n * @internal\n */\nexport function isCombinator(\n    item: string | StypSelector.Part | StypSelector.Combinator,\n): item is StypSelector.Combinator {\n  return item === '>' || item === '+' || item === '~';\n}\n\n/**\n * @internal\n */\nexport function normalizeStypSelector(selector: StypPureSelector.NormalizedPart): [StypPureSelector.NormalizedPart];\n\n/**\n * @internal\n */\nexport function normalizeStypSelector(selector: StypSelector.NormalizedPart): [StypSelector.NormalizedPart];\n\n/**\n * @internal\n */\nexport function normalizeStypSelector(selector: StypPureSelector): StypPureSelector.Normalized;\n\n/**\n * @internal\n */\nexport function normalizeStypSelector(selector: StypSelector): StypSelector.Normalized;\n\nexport function normalizeStypSelector(selector: StypSelector): StypSelector.Normalized {\n  if (!isReadonlyArray(selector)) {\n    return [normalizeKey(selector)];\n  }\n\n  const normalized: StypSelector.Mutable = [];\n  let combinator: StypSelector.Combinator | undefined;\n\n  for (const item of selector) {\n\n    const prevCombinator = combinator;\n\n    if (combinator) {\n      normalized.push(combinator);\n      combinator = undefined;\n    }\n\n    let part: StypSelector.NormalizedPart;\n\n    if (isCombinator(item)) {\n      combinator = item;\n      if (!prevCombinator) {\n        continue;\n      }\n      part = {};\n    } else {\n      part = normalizeKey(item);\n    }\n\n    normalized.push(part);\n  }\n  if (combinator) {\n    normalized.push(combinator, {});\n  }\n\n  return normalized;\n}\n\nfunction normalizeKey(key: StypSelector.Part | string): StypSelector.NormalizedPart {\n  if (typeof key === 'string') {\n    if (!key) {\n      return {};\n    }\n    return { s: key };\n  }\n  return normalizeStypSelectorPart(key);\n}\n\n/**\n * @internal\n */\nexport function normalizeStypSelectorPart(part: StypSelector.Part): StypSelector.NormalizedPart {\n\n  const ns = part.ns || undefined;\n  const i = part.i || undefined;\n  const c = normalizeClasses(part.c);\n  const u = normalizeSubSelectors(part.u);\n\n  return {\n    ns,\n    e: (part.e !== '*' || !ns && !i && !c && u && isPseudoSubSelector(u[0])) && part.e || undefined,\n    i,\n    c,\n    u,\n    s: part.s || undefined,\n    $: normalizeQualifiers(part.$),\n  };\n}\n\nfunction normalizeClasses(\n    classes: QualifiedName | readonly QualifiedName[] | undefined,\n): readonly [QualifiedName, ...QualifiedName[]] | undefined {\n  if (!classes) {\n    return;\n  }\n  if (isQualifiedName(classes)) {\n    return [classes];\n  }\n\n  const result = classes.filter(c => !!c);\n\n  return isNotEmptyArray(result) ? result.sort(compareNames) : undefined;\n}\n\nfunction normalizeSubSelectors(\n    subs: StypSubSelector | readonly StypSubSelector[] | undefined,\n): readonly [StypSubSelector.Normalized, ...StypSubSelector.Normalized[]] | undefined {\n  if (!subs) {\n    return;\n  }\n  if (/*#__INLINE__*/ isSubSelectorsArray(subs)) {\n\n    const result = subs.map(normalizeSubSelector);\n\n    return isNotEmptyArray(result) ? result : undefined;\n  }\n\n  return [normalizeSubSelector(subs)];\n}\n\nfunction isSubSelectorsArray(\n    subs: StypSubSelector | readonly StypSubSelector[],\n): subs is readonly StypSubSelector[] {\n  return typeof subs[0] !== 'string';\n}\n\nfunction normalizeSubSelector(sub: StypSubSelector): StypSubSelector.Normalized {\n  if (!isPseudoSubSelector(sub)) {\n    return sub;\n  }\n  if (sub.length < 3) {\n    return sub as StypSubSelector.Normalized;\n  }\n\n  const [prefix, name, ...params] = sub;\n\n  if (/*#__INLINE__*/ isSubSelectorParametersArray(params)) {\n    return [prefix, name, ...params.map(normalizeStypSelector)];\n  }\n\n  return [prefix, name, normalizeStypSelector(params)];\n}\n\n/**\n * @internal\n */\nexport function isPseudoSubSelector(sub: StypSubSelector.Normalized): sub is StypSubSelector.NormalizedPseudo;\n\n/**\n * @internal\n */\nexport function isPseudoSubSelector(sub: StypSubSelector): sub is StypSubSelector.Pseudo;\n\nexport function isPseudoSubSelector(sub: StypSubSelector): sub is StypSubSelector.Pseudo {\n  return sub.length > 1 && (sub[0] === ':' || sub[0] === '::');\n}\n\nfunction isSubSelectorParametersArray(\n    param: StypSubSelector.Parameter | readonly StypSubSelector.Parameter[],\n): param is readonly StypSubSelector.Parameter[] {\n  return isReadonlyArray(param[0]);\n}\n\nfunction normalizeQualifiers(\n    qualifiers: string | readonly string[] | undefined,\n): readonly [string, ...string[]] | undefined {\n  if (!qualifiers) {\n    return;\n  }\n\n  if (!isReadonlyArray(qualifiers)) {\n    qualifiers = [...exposeQualifier(qualifiers)];\n  } else {\n    qualifiers = [...new Set(flatMapIt(qualifiers, exposeQualifier))].sort();\n  }\n\n  return isNotEmptyArray(qualifiers) ? qualifiers : undefined;\n}\n\nconst noQualifiers: ReadonlySet<string> = new Set();\n\nfunction exposeQualifier(qualifier: string): ReadonlySet<string> {\n  if (!qualifier) {\n    return noQualifiers;\n  }\n\n  const eqIdx = qualifier.indexOf('=');\n  const name = eqIdx < 0 ? qualifier : qualifier.substring(0, eqIdx);\n  const exposed = new Set<string>();\n  let lastExposed: string | undefined;\n\n  for (const part of name.split(':')) {\n    if (lastExposed) {\n      lastExposed += ':' + part;\n    } else {\n      lastExposed = part;\n    }\n    exposed.add(lastExposed);\n  }\n  if (eqIdx >= 0) {\n    exposed.add(qualifier);\n  }\n\n  return exposed;\n}\n\nconst noKeyAndTail: [[]] = [[]];\n\n/**\n * @internal\n */\nexport function stypRuleKeyAndTail(\n    selector: StypSelector.Normalized,\n): readonly [[]] | readonly [StypRuleKey.Nested, StypSelector.Normalized?] {\n  if (!selector.length) {\n    return noKeyAndTail;\n  }\n\n  let i = 0;\n  let combinator: StypSelector.Combinator | undefined;\n\n  for (;;) {\n\n    const part = selector[i++];\n\n    if (isCombinator(part)) {\n      combinator = part;\n      continue;\n    }\n\n    const key: StypRuleKey = combinator ? [combinator, part] : [part];\n\n    return [key, selector.slice(i)];\n  }\n}\n\nconst rootSelector: StypSelector.Normalized = [];\n\n/**\n * @internal\n */\nexport function stypOuterSelector(\n    selector: StypSelector.Normalized,\n): StypSelector.Normalized | undefined {\n\n  let i = selector.length - 1;\n\n  if (i <= 0) {\n    return i ? undefined : rootSelector;\n  }\n\n  do {\n    --i;\n    switch (selector[i]) {\n    case '>':\n      return selector.slice(0, i);\n    case '+':\n    case '~':\n      --i;\n      continue;\n    default:\n      return selector.slice(0, i + 1);\n    }\n  } while (i > 0);\n\n  return;\n}\n","import { namesEqual, NamespaceDef, QualifiedName } from '@frontmeans/namespace-aliaser';\nimport { StypPureSelector } from './pure-selector';\nimport { StypSelector } from './selector';\nimport { normalizeStypSelectorPart } from './selector.impl';\n\n/**\n * CSS rule query.\n *\n * It may represent a selector like `element-name#id.class1.classN` with any of sub-parts omitted.\n *\n * Queries are used to grab a subset of matching rules from `StypRule`.\n *\n * All of its properties are optional.\n *\n * @category CSS Rule\n */\nexport interface StypQuery {\n\n  /**\n   * Element namespace.\n   */\n  readonly ns?: string | NamespaceDef;\n\n  /**\n   * Element name.\n   *\n   * This is the same as `*` when absent.\n   */\n  readonly e?: QualifiedName;\n\n  /**\n   * Element identifier.\n   */\n  readonly i?: QualifiedName;\n\n  /**\n   * Element class name or names.\n   */\n  readonly c?: QualifiedName | readonly QualifiedName[];\n\n  /**\n   * Qualifier or qualifiers.\n   */\n  readonly $?: string | readonly string[];\n\n}\n\n/**\n * @category CSS Rule\n */\nexport namespace StypQuery {\n\n  /**\n   * Normalized CSS rule query.\n   */\n  export type Normalized = StypQuery & StypSelector.NormalizedPart;\n\n}\n\n/**\n * Normalizes arbitrary CSS rule query.\n *\n * @category CSS Rule\n * @param query - CSS rule query to normalize.\n *\n * @returns Normalized CSS rule query.\n */\nexport function stypQuery(query: StypQuery): StypQuery.Normalized {\n  return normalizeStypSelectorPart(query);\n}\n\n/**\n * Checks whether the given structured CSS `selector` matches target `query`.\n *\n * @category CSS Rule\n * @param selector - Normalized structured CSS selector.\n * @param query - Normalized CSS rule query.\n *\n * @returns `true` if `selector` matches the `query`, or `false` otherwise.\n */\nexport function stypSelectorMatches(\n    selector: StypSelector.Normalized | StypPureSelector.Normalized,\n    query: StypQuery.Normalized,\n): boolean {\n  if (!selector.length) {\n    return false;\n  }\n\n  const part = selector[selector.length - 1] as StypSelector.NormalizedPart;\n\n  if (query.ns && part.ns !== query.ns) {\n    return false;\n  }\n  if (query.e && part.e !== query.e) {\n    return false;\n  }\n  if (query.i && part.i !== query.i) {\n    return false;\n  }\n  if (query.c && !classesMatch(part.c, query.c)) {\n    return false;\n  }\n  // noinspection RedundantIfStatementJS\n  if (query.$ && !classesMatch(part.$, query.$)) {\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * @internal\n */\nfunction classesMatch(\n    classes: readonly QualifiedName[] | undefined,\n    query: readonly QualifiedName[],\n): boolean | undefined {\n  return classes && query.every(qClass => classes.find(mClass => namesEqual(qClass, mClass)));\n}\n","import { StypSelector } from './index';\nimport { StypPureSelector } from './pure-selector';\nimport { normalizeStypSelector } from './selector.impl';\n\n/**\n * Converts normalized pure CSS selector part to normalized pure CSS selector.\n *\n * @category CSS Rule\n * @param selector - Normalized pure CSS selector part.\n *\n * @returns Normalized pure CSS selector. An array containing `selector` as its only item.\n */\nexport function stypSelector(selector: StypPureSelector.NormalizedPart): [StypPureSelector.NormalizedPart];\n\n/**\n * Converts normalized structured CSS selector part to normalized structured CSS selector.\n *\n * @category CSS Rule\n * @param selector - Normalized CSS selector part.\n *\n * @returns Normalized structured CSS selector. An array containing `selector` as its only item.\n */\nexport function stypSelector(selector: StypSelector.NormalizedPart): [StypSelector.NormalizedPart];\n\n/**\n * Normalizes arbitrary pure CSS selector.\n *\n * @param selector - CSS selector to normalize.\n *\n * @returns Normalized pure CSS selector.\n */\nexport function stypSelector(selector: StypPureSelector): StypPureSelector.Normalized;\n\n/**\n * Normalizes arbitrary structured CSS selector.\n *\n * @param selector - CSS selector to normalize.\n *\n * @returns Normalized structured CSS selector.\n */\nexport function stypSelector(selector: StypSelector): StypSelector.Normalized;\n\nexport function stypSelector(selector: StypSelector): StypSelector.Normalized {\n  return normalizeStypSelector(selector);\n}\n","import { escapeCSS, escapeCSSVal } from '@frontmeans/httongue';\nimport {\n  css__naming,\n  html__naming,\n  id__naming,\n  NamespaceAliaser,\n  NamespaceDef,\n  newNamespaceAliaser,\n} from '@frontmeans/namespace-aliaser';\nimport { StypRuleKey } from './rule-key';\nimport { StypSelector } from './selector';\nimport { StypSelectorFormat } from './selector-text';\nimport { isCombinator, isPseudoSubSelector } from './selector.impl';\nimport { StypSubSelector } from './sub-selector';\n\nconst ruleKeyTextOpts: StypSelectorFormat = {\n  qualify(qualifier: string) {\n    return `@${escapeCSS(qualifier)}`;\n  },\n};\n\n/**\n * @internal\n */\nexport function stypRuleKeyText(key: StypRuleKey): string {\n  return formatStypSelector(key, ruleKeyTextOpts);\n}\n\nconst displayTextOpts: StypSelectorFormat = {\n  qualify(qualifier: string) {\n    return `@${qualifier}`;\n  },\n};\n\n/**\n * @internal\n */\nexport function stypSelectorDisplayText(selector: StypSelector.Normalized): string {\n  return formatStypSelector(selector, displayTextOpts);\n}\n\nconst defaultFormat: StypSelectorFormat = {};\n\n/**\n * @internal\n */\nexport function formatStypSelector(\n    selector: StypSelector.Normalized,\n    {\n      qualify,\n      nsAlias = newNamespaceAliaser(),\n    }: StypSelectorFormat = defaultFormat,\n): string {\n\n  const format: ItemFormat = { qualify, nsAlias };\n\n  return selector.reduce(\n      (result, item) => {\n        if (isCombinator(item)) {\n          return result + item;\n        }\n        if (result && !isCombinator(result[result.length - 1])) {\n          result += ' ';\n        }\n        return result + formatItem(item, format);\n      },\n      '',\n  );\n}\n\ninterface ItemFormat extends StypSelectorFormat {\n  nsAlias: NamespaceAliaser;\n}\n\nfunction formatItem(\n    item: StypSelector.NormalizedPart,\n    {\n      qualify,\n      nsAlias,\n    }: ItemFormat,\n): string {\n\n  const { ns, e, i, c, s, u, $ } = item;\n  let hasProperties = false;\n  let out = '';\n\n  if (i) {\n    hasProperties = true;\n    out += `#${escapeCSS(id__naming.name(i, nsAlias))}`;\n  }\n  if (c) {\n    hasProperties = true;\n    out = c.reduce<string>(\n        (result, className) => `${result}.${escapeCSS(css__naming.name(className, nsAlias))}`,\n        out,\n    );\n  }\n  if (u) {\n    hasProperties = true;\n\n    const subFormat: ItemFormat = { nsAlias };\n\n    out = u.reduce(\n        (result, sub) => formatSubSelector(result, sub, subFormat),\n        out,\n    );\n  }\n  if (s) {\n    hasProperties = true;\n    out += s;\n  }\n  if (qualify && $) {\n    out = $.reduce((result, qualifier) => result + qualify(qualifier), out);\n  }\n  if (ns) {\n\n    const alias = xmlNs(ns, nsAlias);\n\n    if (alias) {\n      out = `${alias}|${e || '*'}${out}`;\n    } else {\n      out = qualifyElement();\n    }\n  } else {\n    out = qualifyElement();\n  }\n\n  return out;\n\n  function qualifyElement(): string {\n    if (hasProperties) {\n      return `${e ? html__naming.name(e, nsAlias) : ''}${out}`;\n    }\n    return `${e ? html__naming.name(e, nsAlias) : '*'}${out}`;\n  }\n}\n\nfunction formatSubSelector(\n    out: string,\n    sub: StypSubSelector.Normalized,\n    format: ItemFormat,\n): string {\n  if (isPseudoSubSelector(sub)) {\n    out += sub[0] + sub[1];\n\n    const len = sub.length;\n\n    if (len > 2) {\n      out += '(' + formatStypSelector(sub[2], format);\n      for (let i = 3; i < sub.length; ++i) {\n        out += ',' + formatStypSelector(sub[i] as StypSubSelector.NormalizedParameter, format);\n      }\n      out += ')';\n    }\n\n    return out;\n  }\n\n  const [attrName, attrOp, attrVal, attrFlag] = sub;\n\n  out += '[' + escapeCSS(attrName);\n  if (attrOp) {\n    out += `${attrOp}\"${escapeCSSVal(attrVal!)}\"`;\n  }\n  if (attrFlag) {\n    out += ' ' + attrFlag;\n  }\n\n  return out + ']';\n}\n\nfunction xmlNs(ns: string | NamespaceDef, nsAlias: NamespaceAliaser): string | undefined {\n  return typeof ns === 'string' ? ns : ns.url ? nsAlias(ns) : undefined;\n}\n","import { AfterEvent, mapAfter } from '@proc7ts/fun-events';\nimport { filterIt, itsReduction, ObjectEntry, overEntries } from '@proc7ts/push-iterator';\nimport { isNotEmptyArray } from '../../internal';\nimport { StypProperties, StypRule } from '../../rule';\nimport { mergeStypProperties } from '../../rule/properties.impl';\nimport { StypSelector, stypSelector } from '../../selector';\nimport { isCombinator } from '../../selector/selector.impl';\nimport { stypSplitPriority, StypValue } from '../../value';\nimport { StypRenderer } from '../renderer';\nimport { StyleProducer } from '../style-producer';\nimport { FIRST_RENDER_ORDER } from './renderer.impl';\n\n/**\n * @internal\n */\nclass AtRulesRenderer implements StypRenderer.Spec {\n\n  constructor(private readonly _rule: StypRule) {\n  }\n\n  read(properties: AfterEvent<[StypProperties]>): AfterEvent<[StypProperties]> {\n\n    let outer = this._rule.outer;\n\n    while (outer) {\n      properties = mergeStypProperties(outer.read.do(mapAfter(onlyAtProperties)), properties);\n      outer = outer.outer;\n    }\n\n    return properties;\n  }\n\n  render(producer: StyleProducer, properties: StypProperties): void {\n\n    const { selector } = producer;\n    let { writer } = producer;\n\n    if (!writer.isGroup) {\n      producer.render(properties);\n      return;\n    }\n\n    let sheet = writer;\n    const extracted = extractAtSelectors(selector);\n\n    if (!extracted) {\n      producer.render(properties);\n      return;\n    }\n\n    const [atSelectors, restSelector] = extracted;\n\n    for (const atSelector of atSelectors) {\n\n      const [name, params] = buildAtSelector(properties, atSelector);\n\n      if (params) {\n        writer = sheet = sheet.addGroup(name, params);\n      } else {\n        writer = sheet.addStyle(name);\n        break;\n      }\n    }\n\n    producer.render(properties, { writer, selector: restSelector });\n  }\n\n}\n\n/**\n * @internal\n */\nfunction buildAtSelector(\n    properties: StypProperties,\n    [key, [names, customQuery]]: [string, [Set<string>, string?]],\n): [string, string?] {\n\n  let query = '';\n  const addQuery = (q?: StypValue): void => {\n    if (q) {\n      if (query) {\n        query += ' and ';\n      }\n      query += q;\n    }\n  };\n\n  for (const name of names) {\n\n    const [namedQuery] = stypSplitPriority(properties[name]);\n\n    addQuery(namedQuery);\n  }\n\n  addQuery(customQuery);\n\n  return query ? [key, query] : [key];\n}\n\n/**\n * CSS stylesheet renderer of at-rules like `@media` queries.\n *\n * At-rules are represented by qualifiers which names start with `@` symbol. Qualifier names are used as at-rules keys,\n * and their values - as queries. If the rest of the selector is not empty, then properties are rendered in CSS\n * rule nested inside at-rule. Otherwise the properties are rendered in at-rule.\n *\n * So, for example CSS rule with `{ c: 'screen-only', $: '@media=screen' }` selector would be rendered as\n * ```css\n * @media screen {\n *   .screen-only {\n *      \\/* CSS properties *\\/\n *   }\n * }\n * ```\n *\n * Another option is to use named at-rules qualifiers. When named qualifier is used, the corresponding property is\n * searched in CSS rule and all of its outer rules. The values of all matching properties are used as queries.\n *\n * So the above example could be written as: `{ c: 'screen-only', $: '@media:screen' }` if CSS rule (or its outer\n * one) contains property `@media:screen` with value `screen`.\n *\n * Enabled by default in {@link produceStyle} function.\n *\n * @category Rendering\n */\nexport const stypRenderAtRules: StypRenderer = {\n\n  order: FIRST_RENDER_ORDER,\n\n  create(rule) {\n    return new AtRulesRenderer(rule);\n  },\n\n};\n\n/**\n * @internal\n */\nfunction onlyAtProperties(properties: StypProperties): StypProperties {\n  return itsReduction(\n      filterIt<ObjectEntry<StypProperties>, ObjectEntry<StypProperties, string>>(\n          overEntries(properties),\n          isAtEntry,\n      ),\n      (result: StypProperties.Mutable, [key, value]: ObjectEntry<StypProperties, string>) => {\n        result[key] = value;\n        return result;\n      },\n      {},\n  );\n}\n\n/**\n * @internal\n */\nfunction isAtEntry(entry: ObjectEntry<StypProperties>): entry is ObjectEntry<StypProperties, string> {\n  return String(entry[0])[0] === '@';\n}\n\n/**\n * @internal\n */\nfunction extractAtSelectors(\n    selector: StypSelector.Normalized,\n): [Map<string, [Set<string>, string?]>, StypSelector.Normalized] | undefined {\n\n  const atSelectors = new Map<string, [Set<string>, string?]>();\n  const rest: StypSelector.Mutable = [];\n\n  for (const part of selector) {\n    if (isCombinator(part)) {\n      rest.push(part);\n    } else {\n      rest.push(extractPartAtSelectors(part, atSelectors));\n    }\n  }\n\n  if (!atSelectors.size) {\n    return; // No at-rule qualifiers found.\n  }\n\n  return [atSelectors, stypSelector(rest)];\n}\n\n/**\n * @internal\n */\nfunction extractPartAtSelectors(\n    part: StypSelector.NormalizedPart,\n    atSelectors: Map<string, [Set<string>, string?]>,\n): StypSelector.NormalizedPart {\n\n  const qualifiers = part.$;\n\n  if (!qualifiers) {\n    return part;\n  }\n\n  const restQualifies: string[] = [];\n\n  for (const qualifier of qualifiers) {\n    if (qualifier[0] === '@') {\n      addAtSelector(atSelectors, qualifier);\n    } else {\n      restQualifies.push(qualifier);\n    }\n  }\n\n  if (restQualifies.length === qualifiers.length) {\n    return part; // No at-rule qualifiers found\n  }\n  if (isNotEmptyArray(restQualifies)) {\n    return { ...part, $: restQualifies };\n  }\n\n  return { ...part, $: undefined };\n}\n\n/**\n * @internal\n */\nfunction addAtSelector(atSelectors: Map<string, [Set<string>, string?]>, qualifier: string): void {\n\n  const eqIdx = qualifier.indexOf('=');\n  let name: string;\n  let query: string | undefined;\n\n  if (eqIdx < 0) {\n    name = qualifier;\n  } else {\n    name = qualifier.substring(0, eqIdx);\n    query = qualifier.substring(eqIdx + 1);\n  }\n\n  const colonIdx = name.indexOf(':');\n  const key = colonIdx < 0 ? name : name.substring(0, colonIdx);\n  const atSelector = atSelectors.get(key);\n\n  if (!atSelector) {\n    atSelectors.set(key, [new Set<string>().add(name), query]);\n  } else {\n\n    const [names, prevQuery] = atSelector;\n\n    names.add(name);\n    if (query) {\n      atSelector[1] = prevQuery ? `${prevQuery} and ${query}` : query;\n    }\n  }\n}\n","/**\n * @internal\n */\nexport const FIRST_RENDER_ORDER = -0xffff;\n","import { overEntries } from '@proc7ts/push-iterator';\nimport { StypProperties } from '../../rule';\nimport { stypSplitPriority, StypURL, StypValue } from '../../value';\nimport { StypRenderer } from '../renderer';\nimport { StyleProducer } from '../style-producer';\nimport { StypWriter } from '../writer';\nimport { stypRenderAtRules } from './at-rules.renderer';\nimport { FIRST_RENDER_ORDER } from './renderer.impl';\n\n/**\n * CSS stylesheet renderer of global at-rules.\n *\n * It renders at-rules that should stay at the top level:\n * - `@namespace`\n * - `@import`\n *\n * At-rule parameters are taken from root CSS rule properties and treated as following.\n *\n * **`@import:url`** property value is treated as media query and appended after stylesheet URL. I.e.\n * ```json\n * {\n *     \"@import:path/to/included.css\": \"screen\"\n * }\n * ```\n * becomes\n * ```css\n * @import url(path/to/included.css) screen;\n * ```\n *\n * **`@namespace`** property value is treated as default namespace URL. I.e.\n * ```json\n * {\n *     \"@namespace\": \"http://www.w3.org/1999/xhtml\"\n * }\n * ```\n * becomes\n * ```css\n * @namespace url(http://www.w3.org/1999/xhtml);\n * ```\n *\n * **`@namespace:prefix`** property value is treated as namespace URL with the given prefix. I.e\n * ```json\n * {\n *     \"@namespace:svg\": \"http://www.w3.org/2000/svg\"\n * }\n * ```\n * becomes\n * ```css\n * @namespace svg url(http://www.w3.org/2000/svg);\n * ```\n *\n * Enabled by default in {@link produceStyle} function.\n *\n * @category Rendering\n */\nexport const stypRenderGlobals: StypRenderer = {\n\n  order: FIRST_RENDER_ORDER + 1,\n\n  needs: stypRenderAtRules,\n\n  render(producer: StyleProducer, properties: StypProperties) {\n\n    const rootRule = !producer.rule.selector.length;\n\n    const { sheet } = producer;\n    let importIndex = 0;\n    let nsIndex = 0;\n\n    for (const [k, v] of overEntries(properties)) {\n\n      const key = String(k);\n\n      if (key[0] === '@') {\n\n        const [value] = stypSplitPriority(v);\n        const importDelta = rootRule ? renderImport(sheet, importIndex, key, value) : 0;\n\n        importIndex += importDelta;\n        nsIndex += importDelta;\n\n        const url = StypURL.by(value);\n\n        if (url) {\n          nsIndex += renderDefaultNamespace(sheet, nsIndex, key, url);\n          nsIndex += renderNamespacePrefix(sheet, nsIndex, key, url);\n        }\n      }\n    }\n\n    producer.render(properties);\n  },\n\n};\n\n/**\n * @internal\n */\nconst IMPORT_PREFIX = '@import:';\n\n/**\n * @internal\n */\nfunction renderImport(\n    sheet: StypWriter.Sheet,\n    index: number,\n    key: string,\n    value: StypValue,\n): number {\n  if (!key.startsWith(IMPORT_PREFIX)) {\n    return 0;\n  }\n\n  const url = new StypURL(key.substring(IMPORT_PREFIX.length));\n  let css = String(url);\n\n  if (value) {\n    css += ` ${value}`;\n  }\n\n  sheet.addGlobal('@import', css, index);\n\n  return 1;\n}\n\n/**\n * @internal\n */\nfunction renderDefaultNamespace(\n    sheet: StypWriter.Sheet,\n    index: number,\n    key: string,\n    url: StypURL,\n): number {\n  if (key !== '@namespace') {\n    return 0;\n  }\n\n  sheet.addGlobal('@namespace', String(url), index);\n\n  return 1;\n}\n\n/**\n * @internal\n */\nconst NS_PREFIX = '@namespace:';\n\n/**\n * @internal\n */\nfunction renderNamespacePrefix(\n    sheet: StypWriter.Sheet,\n    index: number,\n    key: string,\n    url: StypURL,\n): number {\n  if (!key.startsWith(NS_PREFIX)) {\n    return 0;\n  }\n\n  const prefix = key.substring(NS_PREFIX.length);\n\n  sheet.addGlobal('@namespace', `${prefix} ${url}`, index);\n\n  return 1;\n}\n","import { hyphenateCSSName } from '@frontmeans/httongue';\nimport { filterIt, itsEach, ObjectEntry, overEntries } from '@proc7ts/push-iterator';\nimport { StypProperties } from '../../rule';\nimport { stypSplitPriority } from '../../value';\nimport { StyleProducer } from '../style-producer';\n\n/**\n * Renders CSS properties.\n *\n * This renderer is always present, so there is typically no need to use it explicitly.\n *\n * @category Rendering\n */\nexport function stypRenderProperties(producer: StyleProducer, properties: StypProperties): void {\n\n  const style = producer.addStyle();\n\n  itsEach(\n      filterIt<ObjectEntry<StypProperties>, ObjectEntry<StypProperties, string>>(\n          overEntries(properties),\n          notCustomProperty,\n      ),\n      ([k, v]) => {\n\n        const [value, priority] = stypSplitPriority(v);\n\n        style.set(hyphenateCSSName(k), `${value}`, priority);\n      },\n  );\n\n  producer.render(properties, { writer: style });\n}\n\n/**\n * @internal\n */\nfunction notCustomProperty(\n    entry: ObjectEntry<StypProperties>,\n): entry is ObjectEntry<Required<StypProperties>, string> {\n\n  const [key, value] = entry;\n\n  if (value == null) {\n    return false;\n  }\n\n  const first = String(key)[0];\n\n  return first >= 'a' && first <= 'z' || first >= 'A' && first <= 'Z';\n}\n","import { StypProperties } from '../../rule';\nimport { StyleProducer } from '../style-producer';\n\n/**\n * Renders raw CSS text. I.e. the contents of {@link StypProperties.Generic.$$css} property.\n *\n * It should be rendered before CSS properties normally to add the rendered rule as a first one.\n *\n * Enabled by default in {@link produceStyle} function.\n *\n * @category Rendering\n */\nexport function stypRenderText(producer: StyleProducer, properties: StypProperties): void {\n\n  const css = properties.$$css;\n\n  if (!css) {\n    producer.render(properties);\n  } else {\n\n    const style = producer.addStyle();\n\n    style.replace(css);\n    producer.render(properties, { writer: style });\n  }\n}\n","import { NamespaceDef } from '@frontmeans/namespace-aliaser';\nimport { isPresent } from '@proc7ts/primitives';\nimport { StypProperties } from '../../rule';\nimport { StypSelector } from '../../selector';\nimport { isCombinator } from '../../selector/selector.impl';\nimport { StypURL } from '../../value';\nimport { StypRenderer } from '../renderer';\nimport { StyleProducer } from '../style-producer';\nimport { stypRenderGlobals } from './globals.renderer';\nimport { FIRST_RENDER_ORDER } from './renderer.impl';\n\n/**\n * CSS stylesheet renderer of global XML namespace definitions.\n *\n * Renders `@namespace` declarations for CSS selectors containing namespace definitions.\n *\n * Enabled by default in {@link produceStyle} function.\n *\n * @category Rendering\n */\nexport const stypRenderXmlNs: StypRenderer = {\n\n  order: FIRST_RENDER_ORDER,\n\n  needs: stypRenderGlobals,\n\n  render(producer: StyleProducer, properties: StypProperties) {\n\n    const xmlNsDefs = extractXmlNsDefs(producer.selector);\n\n    if (xmlNsDefs.length) {\n\n      const declareNs = (result: StypProperties.Mutable, ns: NamespaceDef): StypProperties.Mutable => {\n\n        const alias = producer.nsAlias(ns);\n\n        result[`@namespace:${alias}`] = new StypURL(ns.url);\n\n        return result;\n      };\n\n      producer.render(xmlNsDefs.reduce(declareNs, { ...properties }));\n    } else {\n      producer.render(properties);\n    }\n  },\n\n};\n\n/**\n * @internal\n */\nfunction extractXmlNsDefs(selector: StypSelector.Normalized): readonly NamespaceDef[] {\n  return selector\n      .map(part => !isCombinator(part) && part.ns && typeof part.ns !== 'string' ? part.ns : null)\n      .filter(isPresent);\n}\n","import { newRenderSchedule, RenderScheduler } from '@frontmeans/render-scheduler';\nimport { isReadonlyArray } from '../../internal';\nimport { StypRule } from '../../rule';\nimport { StypFormat } from '../format';\nimport { StypRenderer } from '../renderer';\nimport { stypRenderProperties } from '../renderers';\n\n/**\n * @internal\n */\nexport interface StypRendererSpecFactory extends StypRenderer.Factory {\n  create(rule: StypRule): StypRenderer.Spec;\n}\n\n/**\n * @internal\n */\nexport function stypRenderFactories(format: StypFormat): readonly StypRendererSpecFactory[] {\n\n  const factories = new Map<StypRenderer, StypRendererSpecFactory>();\n\n  addRenderers(format.renderer);\n  factories.delete(stypRenderProperties);\n\n  return [...factories.values(), rendererFactory(stypRenderProperties)].sort(compareRenderers);\n\n  function addRenderers(renderers: StypRenderer | readonly StypRenderer[] | undefined): void {\n    if (renderers) {\n      if (isReadonlyArray(renderers)) {\n        renderers.forEach(addRenderer);\n      } else {\n        addRenderer(renderers);\n      }\n    }\n  }\n\n  function addRenderer(renderer: StypRenderer): void {\n    if (factories.has(renderer)) {\n      return;\n    }\n\n    const factory = rendererFactory(renderer);\n\n    factories.set(renderer, factory);\n    addRenderers(factory.needs);\n  }\n}\n\nfunction rendererFactory(renderer: StypRenderer): StypRendererSpecFactory {\n  if (typeof renderer === 'function') {\n    return {\n      create() {\n        return { render: renderer };\n      },\n    };\n  }\n  if (isRendererFactory(renderer)) {\n    return {\n      order: renderer.order,\n      needs: renderer.needs,\n      create(rule) {\n        return rendererSpec(renderer.create(rule));\n      },\n    };\n  }\n\n  const render = renderer.render.bind(renderer);\n\n  return {\n    order: renderer.order,\n    needs: renderer.needs,\n    create() {\n      return { render };\n    },\n  };\n}\n\nfunction isRendererFactory(renderer: StypRenderer): renderer is StypRenderer.Factory {\n  return 'create' in renderer;\n}\n\nfunction compareRenderers(first: StypRenderer.Factory, second: StypRenderer.Factory): number {\n\n  const firstOrder = first.order || 0;\n  const secondOrder = second.order || 0;\n\n  return firstOrder > secondOrder ? 1 : firstOrder < secondOrder ? -1 : 0;\n}\n\nfunction rendererSpec(renderer: ReturnType<StypRenderer.Factory['create']>): StypRenderer.Spec {\n  return typeof renderer === 'function' ? { render: renderer } : renderer;\n}\n\n/**\n * @internal\n */\nexport function stypRenderScheduler(\n    parent: Node,\n    scheduler: RenderScheduler = newRenderSchedule,\n): RenderScheduler {\n  return (options = {}) => {\n\n    const { node = parent, error } = options;\n\n    return scheduler({\n      ...options,\n      node,\n      error: error && error.bind(options),\n    });\n  };\n}\n\n/**\n * @internal\n */\nexport function removeStyleElement(element: HTMLStyleElement): void {\n  element.parentNode?.removeChild(element);\n}\n","import { immediateRenderScheduler, RenderScheduler } from '@frontmeans/render-scheduler';\nimport { EventEmitter, OnEvent } from '@proc7ts/fun-events';\nimport { StypPriority } from '../../value';\nimport { StypFormat, StypFormatConfig } from '../format';\nimport { StypWriter } from '../writer';\n\n/**\n * Textual CSS production format.\n *\n * Represents each style sheet in textual form and reports it to registered receivers. Such receivers should be\n * registered before {@link produceStyle style production} started in order to receive all style sheets.\n *\n * @category Rendering\n */\nexport interface StypTextFormat extends StypFormat, StypTextFormatConfig {\n\n  /**\n   * Detailed configuration of CSS text pretty print, or `false` for compact output.\n   */\n  readonly pretty: StypTextFormatConfig.PrettyPrint | false;\n\n  /**\n   * An `OnEvent` sender of style sheet textual representation.\n   *\n   * Sends textual representation of each rendered style sheet on each update.\n   */\n  readonly onSheet: OnEvent<[StypSheetText]>;\n\n}\n\n/**\n * Configuration of {@link stypTextFormat textual CSS production format}.\n *\n * @category Rendering\n */\nexport interface StypTextFormatConfig extends StypFormatConfig {\n\n  /**\n   * DOM rendering operations scheduler.\n   *\n   * Creates a render schedule per rule.\n   *\n   * Uses `immediateRenderScheduler` by default.\n   */\n  readonly scheduler?: RenderScheduler;\n\n  /**\n   * How to pretty-print generated CSS text.\n   *\n   * - `false` to disable pretty print and generate compact output,\n   * - `true` (default value) for default pretty print,\n   * - {@link StypTextFormatConfig.PrettyPrint detailed configuration object}.\n   */\n  readonly pretty?: boolean | StypTextFormatConfig.PrettyPrint;\n\n}\n\n/**\n * @category Rendering\n */\nexport namespace StypTextFormatConfig {\n\n  /**\n   * Detailed configuration of CSS text pretty print.\n   */\n  export interface PrettyPrint {\n\n    /**\n     * Indentation string to use when formatting CSS text.\n     *\n     * Two spaces by default.\n     */\n    indent?: string;\n\n  }\n\n}\n\n/**\n * Style sheet textual representation.\n *\n * This is sent when producing styles in {@link StypTextFormat.onSheet textual format}.\n *\n * @category Rendering\n */\nexport interface StypSheetText {\n\n  /**\n   * Unique style sheet identifier.\n   *\n   * Style sheet is reported with the same identifier on each update.\n   */\n  readonly id: string;\n\n  /**\n   * The textual representation of style sheet formatted accordingly to {@link StypTextFormatConfig options},\n   * or `undefined` to inform that corresponding style sheet have been removed.\n   */\n  readonly css?: string;\n\n}\n\n/**\n * @internal\n */\ninterface StypTextFormatter {\n  readonly pre: string;\n  readonly nv: string;\n  readonly eol: string;\n  indent(): StypTextFormatter;\n}\n\n/**\n * @internal\n */\nconst defaultPrettyPrint: StypTextFormatConfig.PrettyPrint = {\n  indent: '  ',\n};\n\n/**\n * @internal\n */\nconst compactStypTextFormatter: StypTextFormatter = {\n  nv: '',\n  eol: '',\n  pre: '',\n  indent() {\n    return this;\n  },\n};\n\n/**\n * @internal\n */\nclass StypTextFormatter$ implements StypTextFormatter {\n\n  constructor(\n      private readonly _config: StypTextFormatConfig.PrettyPrint,\n      readonly pre = '',\n  ) {\n  }\n\n  get nv(): string {\n    return ' ';\n  }\n\n  get eol(): string {\n    return '\\n';\n  }\n\n  indent(): StypTextFormatter$ {\n    return new StypTextFormatter$(this._config, this.pre + this._config.indent!);\n  }\n\n}\n\n/**\n * @internal\n */\nclass StypStyleTextWriter implements StypWriter.Style {\n\n  private readonly nf: StypTextFormatter;\n  private body = '';\n\n  constructor(\n      private readonly f: StypTextFormatter,\n      readonly selector: string,\n  ) {\n    this.nf = f.indent();\n  }\n\n  get isGroup(): false {\n    return false;\n  }\n\n  set(name: string, value: string, priority: number): void {\n\n    const p = priority >= StypPriority.Important ? ' !important' : '';\n    const { pre, nv, eol } = this.nf;\n\n    if (this.body) {\n      this.body += `;${eol}`;\n    }\n\n    this.body += `${pre}${name}:${nv}${value}${p}`;\n  }\n\n  replace(css: string): void {\n    this.body = css.trim();\n    if (this.body.endsWith(';')) {\n      this.body = this.body.substr(0, this.body.length - 1);\n    }\n  }\n\n  toString(): string {\n\n    const { pre, nv, eol } = this.f;\n\n    if (this.body) {\n\n      const afterBody = eol ? `;${eol}` : '';\n\n      return `${pre}${this.selector}${nv}{${eol}${this.body}${afterBody}${pre}}`;\n    }\n\n    return '';\n  }\n\n}\n\n/**\n * @internal\n */\nabstract class AbstractStypGroupTextWriter implements StypWriter.Group {\n\n  readonly _nested: any[] = [];\n\n  protected constructor(readonly nf: StypTextFormatter) {\n  }\n\n  get isGroup(): true {\n    return true;\n  }\n\n  addGroup(name: string, params: string, index?: number): StypWriter.Group {\n    return this._add(new StypGroupTextWriter(this.nf, name, params), index);\n  }\n\n  addStyle(selector: string, index?: number): StypWriter.Style {\n    return this._add(new StypStyleTextWriter(this.nf, selector), index);\n  }\n\n  toString(): string {\n\n    let out = '';\n\n    for (const nested of this._nested) {\n\n      const text = String(nested);\n\n      if (text) {\n        if (out) {\n          out += this.nf.eol;\n        }\n        out += text;\n      }\n    }\n\n    return out;\n  }\n\n  protected _add<TNested>(nested: TNested, index = this._nested.length): TNested {\n    this._nested.splice(index, 0, nested);\n    return nested;\n  }\n\n}\n\n/**\n * @internal\n */\nclass StypGroupTextWriter extends AbstractStypGroupTextWriter implements StypWriter.Group {\n\n  constructor(readonly f: StypTextFormatter, readonly name: string, readonly params: string) {\n    super(f.indent());\n  }\n\n  toString(): string {\n\n    const body = super.toString();\n\n    if (!body) {\n      return '';\n    }\n\n    const { pre, nv, eol } = this.f;\n\n    return `${pre}${this.name} ${this.params}${nv}{${eol}${body}${eol}${pre}}`;\n  }\n\n}\n\n/**\n * @internal\n */\nclass StypSheetTextWriter extends AbstractStypGroupTextWriter implements StypWriter.Sheet {\n\n  constructor(\n      readonly id: string,\n      readonly f: StypTextFormatter,\n      readonly sender: EventEmitter<[StypSheetText]>,\n  ) {\n    super(f);\n  }\n\n  addGlobal(name: string, value: string, index?: number): void {\n    this._add(`${this.f.pre}${name} ${value};`, index);\n  }\n\n  clear(): void {\n    this._nested.length = 0;\n  }\n\n  remove(): void {\n    this.clear();\n    this.sender.send({ id: this.id });\n  }\n\n  done(): void {\n    this.sender.send({\n      id: this.id,\n      css: this.toString(),\n    });\n  }\n\n}\n\n/**\n * Builds textual CSS production format.\n *\n * It is necessary to register {@link StypTextFormat.onSheet CSS text receiver(s)} prior to start {@link produceStyle\n * style production} in order to receive CSS text for style sheets.\n *\n * @category Rendering\n * @param config - Textual format config.\n *\n * @returns Textual CSS production format.\n */\nexport function stypTextFormat(config: StypTextFormatConfig = {}): StypTextFormat {\n\n  const pretty: StypTextFormatConfig.PrettyPrint | false = config.pretty === true || config.pretty == null\n      ? defaultPrettyPrint\n      : (config.pretty || false);\n  const { scheduler = immediateRenderScheduler } = config;\n  const sender = new EventEmitter<[StypSheetText]>();\n  const formatter: StypTextFormatter = pretty ? new StypTextFormatter$(pretty) : compactStypTextFormatter;\n  let idSeq = 0;\n\n  return {\n    ...config,\n    pretty,\n    scheduler,\n    onSheet: sender.on,\n    addSheet() {\n      return new StypSheetTextWriter(String(++idSeq), formatter, sender);\n    },\n  };\n}\n","import { RenderScheduler } from '@frontmeans/render-scheduler';\nimport { StypFormat } from '../format';\nimport { removeStyleElement, stypRenderScheduler } from './format.impl';\nimport { stypTextFormat, StypTextFormatConfig } from './text.format';\n\n/**\n * Configuration of {@link stypDomFormat DOM style production format}.\n *\n * @category Rendering\n */\nexport interface StypDomFormatConfig extends StypTextFormatConfig {\n\n  /**\n   * Document to add style elements to.\n   *\n   * `parent.ownerDocument` or `window.document` by default.\n   */\n  readonly document?: Document;\n\n  /**\n   * Parent DOM node to add stylesheets to.\n   *\n   * `document.head` by default.\n   *\n   * This node don't have to be attached to document.\n   */\n  readonly parent?: Node;\n\n  /**\n   * DOM rendering operations scheduler.\n   *\n   * Creates a render schedule per rule.\n   *\n   * Uses `newRenderSchedule` for {@link parent} node by default.\n   */\n  readonly scheduler?: RenderScheduler;\n\n}\n\n/**\n * Builds DOM style production format.\n *\n * The sheet writer creates a `<style>` element inside the `parent` node per CSS rule and fills it with CSS text\n * generated by {@link stypTextFormat textual CSS production format}.\n *\n * This format is generally slower than {@link stypObjectFormat CSS object model production format}, but allows to add\n * `<style>` elements to DOM node outside document. E.g. to `DocumentFragment`.\n *\n * @category Rendering\n * @param config - DOM style format configuration.\n *\n * @returns CSS production format.\n */\nexport function stypDomFormat(\n    config: StypDomFormatConfig = {},\n): StypFormat {\n\n  const {\n    document = config.parent?.ownerDocument || window.document,\n    parent = document.head,\n  } = config;\n  const textFormat = stypTextFormat(config);\n  const scheduler = stypRenderScheduler(parent, config.scheduler);\n  const schedule = scheduler();\n  const elements = new Map<string, HTMLStyleElement>();\n  const supply = textFormat.onSheet(({ id, css }) => {\n    // CSS text is reported within schedule. No need to re-schedule DOM manipulations here.\n\n    let element = elements.get(id);\n\n    if (css == null) { // element exists here\n      elements.delete(id);\n      removeStyleElement(element!);\n    } else if (element) {\n      element.textContent = css;\n    } else {\n      element = document.createElement('style');\n      element.setAttribute('type', 'text/css');\n      element.textContent = css;\n      parent.appendChild(element);\n      elements.set(id, element);\n      supply.whenOff(\n          // Schedule element removal on style sheet removal instead of removing it right away.\n          () => schedule(() => removeStyleElement(element!)),\n      );\n    }\n  });\n\n  return {\n    ...config,\n    scheduler,\n    addSheet(producer) {\n      supply.needs(producer);\n      this.addSheet = textFormat.addSheet.bind(textFormat);\n      return this.addSheet(producer);\n    },\n  };\n}\n","import { RenderScheduler } from '@frontmeans/render-scheduler';\nimport { StypPriority } from '../../value';\nimport { StypFormat, StypFormatConfig } from '../format';\nimport { StypWriter } from '../writer';\nimport { removeStyleElement, stypRenderScheduler } from './format.impl';\n\n/**\n * @internal\n */\nclass StypStyleObjectWriter implements StypWriter.Style {\n\n  constructor(private readonly _target: CSSStyleRule) {\n  }\n\n  get isGroup(): false {\n    return false;\n  }\n\n  set(name: string, value: string, priority: number): void {\n    this._target.style.setProperty(name, value, priority >= StypPriority.Important ? 'important' : undefined);\n  }\n\n  replace(css: string): void {\n    this._target.style.cssText = css;\n  }\n\n}\n\n/**\n * @internal\n */\nclass StypGroupObjectWriter implements StypWriter.Group {\n\n  constructor(readonly _target: CSSStyleSheet | CSSGroupingRule) {\n  }\n\n  get isGroup(): true {\n    return true;\n  }\n\n  addGroup(name: string, params: string, index?: number): StypWriter.Group {\n    return new StypGroupObjectWriter(\n        this._add(\n            `${name} ${params}{}`,\n            index,\n        ) as CSSGroupingRule,\n    );\n  }\n\n  addStyle(selector: string, index?: number): StypWriter.Style {\n    return new StypStyleObjectWriter(this._add(`${selector}{}`, index) as CSSStyleRule);\n  }\n\n  protected _add(\n      ruleText: string,\n      index = this._target.cssRules.length,\n  ): CSSRule {\n\n    const idx = this._target.insertRule(ruleText, index);\n\n    return this._target.cssRules[idx];\n  }\n\n}\n\n/**\n * @internal\n */\nclass StypSheetObjectWriter extends StypGroupObjectWriter implements StypWriter.Sheet {\n\n  constructor(private readonly _element: HTMLStyleElement) {\n    super(_element.sheet as CSSStyleSheet);\n  }\n\n  addGlobal(name: string, value: string, index?: number): void {\n    this._add(`${name} ${value};`, index);\n  }\n\n  clear(): void {\n\n    const { cssRules } = this._target;\n\n    while (cssRules.length) {\n      this._target.deleteRule(cssRules.length - 1);\n    }\n  }\n\n  remove(): void {\n    removeStyleElement(this._element);\n  }\n\n  done(): void {\n    /* do nothing */\n  }\n\n}\n\n/**\n * Configuration of {@link stypObjectFormat CSS object model production format}.\n *\n * @category Rendering\n */\nexport interface StypObjectFormatConfig extends StypFormatConfig {\n\n  /**\n   * Parent DOM node to add stylesheets to.\n   *\n   * `document.head` by default.\n   *\n   * This node has to be attached to document.\n   */\n  readonly parent?: Node;\n\n  /**\n   * DOM rendering operations scheduler.\n   *\n   * Creates a render schedule per rule.\n   *\n   * Uses `newRenderSchedule` for {@link parent} node by default.\n   */\n  readonly scheduler?: RenderScheduler;\n\n}\n\n/**\n * Builds CSS object model production format.\n *\n * The sheet writer creates a `<style>` element inside the `parent` node per CSS rule and builds its style sheet\n * with CSS object model methods.\n *\n * @category Rendering\n * @param config - Object format configuration.\n *\n * @returns CSS production format.\n */\nexport function stypObjectFormat(\n    config: StypObjectFormatConfig = {},\n): StypFormat {\n\n  const { parent = document.head }: { parent?: Node } = config;\n  const doc = parent.ownerDocument!;\n\n  return {\n    ...config,\n    scheduler: stypRenderScheduler(parent, config.scheduler),\n    addSheet() {\n\n      const element = doc.createElement('style');\n\n      element.setAttribute('type', 'text/css');\n      element.append(doc.createTextNode(''));\n\n      parent.appendChild(element);\n\n      return new StypSheetObjectWriter(element);\n    },\n  };\n}\n","import { NamespaceDef, newNamespaceAliaser } from '@frontmeans/namespace-aliaser';\nimport { newRenderSchedule } from '@frontmeans/render-scheduler';\nimport { AfterEvent, afterSupplied, onSupplied } from '@proc7ts/fun-events';\nimport { noop } from '@proc7ts/primitives';\nimport { itsReduction, mapIt } from '@proc7ts/push-iterator';\nimport { Supply } from '@proc7ts/supply';\nimport { StypProperties, StypRule, StypRules } from '../rule';\nimport { StypSelector, stypSelector, StypSelectorFormat, stypSelectorText } from '../selector';\nimport { isCombinator } from '../selector/selector.impl';\nimport { StypFormat } from './format';\nimport { stypRenderFactories } from './formats/format.impl';\nimport { StypRenderer } from './renderer';\nimport { StyleProducer } from './style-producer';\nimport { StypWriter } from './writer';\n\n/**\n * Produces and dynamically updates basic CSS stylesheets based on the given CSS rules.\n *\n * Unlike {@link produceStyle}, this function does not enable renderers but the basic one which just renders CSS\n * properties. This can be used to save the bundle size by enabling only select renderers.\n *\n * @category Rendering\n * @param rules - CSS rules to produce stylesheets for. This can be e.g. a {@link StypRule.rules} to render all rules,\n * or a result of {@link StypRuleList.grab} method call to render only matching ones.\n * @param format - Production options.\n *\n * @returns Styles supply. Once cut off (i.e. its `off()` method is called) the produced stylesheets are removed.\n */\nexport function produceBasicStyle(rules: StypRules, format: StypFormat): Supply {\n\n  const {\n    rootSelector = { e: 'body' },\n    scheduler = newRenderSchedule,\n    nsAlias = newNamespaceAliaser(),\n  } = format;\n  const supply = new Supply();\n  const selectorFormat: StypSelectorFormat = { nsAlias };\n  const factories = stypRenderFactories(format);\n  const renderSupply = renderRules(rules);\n  const trackSupply = trackRules();\n\n  return supply.as(renderSupply).as(trackSupply);\n\n  function styleProducer(\n      rule: StypRule,\n      renderer: StypRenderer.Function,\n      production: {\n        sheet: StypWriter.Sheet;\n        writer: StypWriter;\n        selector: StypSelector.Normalized;\n      },\n  ): StyleProducer {\n\n    class StyleProducer$ implements StyleProducer {\n\n      get supply(): Supply {\n        return supply;\n      }\n\n      get rule(): StypRule {\n        return rule;\n      }\n\n      get sheet(): StypWriter.Sheet {\n        return production.sheet;\n      }\n\n      get writer(): StypWriter {\n        return production.writer;\n      }\n\n      get selector(): StypSelector.Normalized {\n        return production.selector;\n      }\n\n      nsAlias(ns: NamespaceDef): string {\n        return nsAlias(ns);\n      }\n\n      render(properties: StypProperties, options?: StypRenderer.Options): void {\n        if (!options) {\n          renderer(this, properties);\n        } else {\n          renderer(\n              styleProducer(\n                  rule,\n                  renderer,\n                  {\n                    sheet: production.sheet,\n                    writer: options.writer || production.writer,\n                    selector: options.selector || production.selector,\n                  },\n              ),\n              properties,\n          );\n        }\n      }\n\n      addStyle(_selector: StypSelector.Normalized = production.selector): StypWriter.Style {\n\n        const { writer } = production;\n\n        if (!writer.isGroup) {\n          return writer;\n        }\n\n        return writer.addStyle(selectorText(_selector));\n      }\n\n    }\n\n    return new StyleProducer$();\n  }\n\n  function selectorText(selector: StypSelector.Normalized): string {\n    return stypSelectorText(selector, selectorFormat);\n  }\n\n  function renderRules(rulesToRender: Iterable<StypRule>): Supply {\n    return itsReduction<Supply, Supply>(\n        mapIt(rulesToRender, renderRule),\n        (prev, supply) => new Supply().cuts(supply).cuts(prev),\n        new Supply(),\n    );\n  }\n\n  function trackRules(): Supply {\n\n    const supply = new Supply();\n\n    return onSupplied(rules)({\n      supply,\n      receive: (_ctx, added) => {\n        added.forEach(r => renderRule(r).needs(supply));\n      },\n    });\n  }\n\n  function renderRule(rule: StypRule): Supply {\n\n    const [reader, renderer] = rendererForRule(rule);\n    let sheet: StypWriter.Sheet | undefined;\n    const selector = ruleSelector(rule);\n    const schedule = scheduler();\n\n    return reader(renderProperties).whenOff(removeStyle);\n\n    function renderProperties(properties: StypProperties): void {\n      schedule(() => {\n        sheet?.clear();\n\n        const producer = styleProducer(\n            rule,\n            renderer,\n            {\n              get sheet(): StypWriter.Sheet {\n                if (!sheet) {\n                  sheet = format.addSheet(producer);\n                }\n                return sheet;\n              },\n              get writer(): StypWriter.Sheet {\n                return this.sheet;\n              },\n              selector,\n            },\n        );\n\n        producer.render(properties);\n        sheet?.done();\n      });\n    }\n\n    function removeStyle(): void {\n      schedule(() => {\n\n        const lastSheet = sheet;\n\n        if (lastSheet) {\n          sheet = undefined;\n          return lastSheet.remove();\n        }\n        // Otherwise element is removed before anything rendered.\n        // Should never happen for properly constructed rule.\n      });\n    }\n  }\n\n  function ruleSelector(rule: StypRule): StypSelector.Normalized {\n\n    const selector = rule.selector;\n\n    if (!selector.length) {\n      // Use configured root selector\n      return stypSelector(rootSelector);\n    }\n    if (isCombinator(selector[0])) {\n      // First combinator is relative to root selector\n      return [...stypSelector(rootSelector), ...selector];\n    }\n\n    return selector;\n  }\n\n  function rendererForRule(rule: StypRule): [AfterEvent<[StypProperties]>, StypRenderer.Function] {\n\n    const specs = factories.map(factory => factory.create(rule));\n    const reader = specs.reduce(\n        (read, spec) => spec.read ? afterSupplied(spec.read(read)) : read,\n        rule.read,\n    );\n\n    return [reader, renderAt(0)];\n\n    function renderAt(index: number): StypRenderer.Function {\n      return (producer, properties) => {\n\n        const nextIndex = index + 1;\n        let nextRenderer: StypRenderer.Function;\n\n        if (nextIndex === factories.length) {\n          nextRenderer = noop;\n        } else {\n          nextRenderer = renderAt(nextIndex);\n        }\n\n        const nextProducer = styleProducer(producer.rule, nextRenderer, producer);\n\n        specs[index].render(nextProducer, properties);\n      };\n    }\n  }\n}\n","import { NamespaceAliaser } from '@frontmeans/namespace-aliaser';\nimport { StypPureSelector } from './pure-selector';\nimport { StypSelector } from './selector';\nimport { stypSelector } from './selector-constructor';\nimport { formatStypSelector } from './selector-text.impl';\n\n/**\n * Structured CSS selector textual format.\n *\n * @category CSS Rule\n */\nexport interface StypSelectorFormat {\n\n  /**\n   * Qualifier formatting function. When present, it is called for each qualifier to build its\n   * textual representation. When unspecified, the qualifiers won't be attached to resulting CSS selector text.\n   *\n   * @param qualifier - Qualifier to format.\n   *\n   * @returns Textual representation of `qualifier`.\n   */\n  qualify?: (qualifier: string) => string;\n\n  /**\n   * Namespace aliaser to use.\n   *\n   * New instance will be created if not specified.\n   */\n  nsAlias?: NamespaceAliaser;\n\n}\n\n/**\n * Converts structured CSS selector to its textual representation.\n *\n * @category CSS Rule\n * @param selector - Target CSS selector.\n * @param format - CSS selector format.\n *\n * @returns CSS selector string.\n */\nexport function stypSelectorText(selector: StypSelector | StypPureSelector, format?: StypSelectorFormat): string {\n  return formatStypSelector(stypSelector(selector), format);\n}\n","import { isReadonlyArray } from '../../internal';\nimport { StypRenderer } from '../renderer';\nimport { stypRenderAtRules } from './at-rules.renderer';\nimport { stypRenderGlobals } from './globals.renderer';\nimport { stypRenderText } from './text.renderer';\nimport { stypRenderXmlNs } from './xml-ns.renderer';\n\n/**\n * @internal\n */\nexport function defaultStypRenderers(\n    renderer: StypRenderer | readonly StypRenderer[] | undefined,\n): readonly StypRenderer[] {\n\n  const result: StypRenderer[] = [\n    stypRenderAtRules,\n    stypRenderXmlNs,\n    stypRenderGlobals,\n    stypRenderText,\n  ];\n\n  if (renderer) {\n    if (isReadonlyArray(renderer)) {\n      result.push(...renderer);\n    } else {\n      result.push(renderer);\n    }\n  }\n\n  return result;\n}\n","import { Supply } from '@proc7ts/supply';\nimport { StypRules } from '../rule';\nimport { StypFormat } from './format';\nimport { produceBasicStyle } from './produce-basic-style';\nimport { defaultStypRenderers } from './renderers/default-renderers.impl';\n\n/**\n * Produces and dynamically updates CSS stylesheets based on the given CSS rules.\n *\n * Appends `<style>` element(s) to the given parent DOM node (`document.head` by default) and updates them when CSS\n * rules change.\n *\n * This function enables all default renderers. E.g. the one supporting raw CSS text rules. If some of them are not\n * needed a {@link produceBasicStyle} variant of this function may be used instead.\n *\n * @category Rendering\n * @param rules - CSS rules to produce stylesheets for. This can be e.g. a {@link StypRule.rules} to render all rules,\n * or a result of {@link StypRuleList.grab} method call to render only matching ones.\n * @param format - Production format.\n *\n * @returns Styles supply. Once cut off (i.e. its `off()` method is called) the produced stylesheets are removed.\n */\nexport function produceStyle(rules: StypRules, format: StypFormat): Supply {\n  return produceBasicStyle(rules, { ...format, renderer: defaultStypRenderers(format.renderer) });\n}\n\n\n","import { AfterEvent, AfterEvent__symbol, EventKeeper, OnEvent, OnEvent__symbol } from '@proc7ts/fun-events';\nimport { StypQuery, StypRuleKey, StypSelector } from '../selector';\nimport { StypProperties } from './properties';\nimport { StypRules } from './rules';\n\n/**\n * CSS rule.\n *\n * Represents CSS selector and corresponding CSS properties.\n *\n * @category CSS Rule\n */\nexport abstract class StypRule implements EventKeeper<[StypProperties]> {\n\n  /**\n   * A reference to the root CSS rule.\n   */\n  abstract readonly root: StypRule;\n\n  /**\n   * A reference to outer CSS rule.\n   *\n   * The outer rule is the one for enclosing element.\n   * I.e. for the rule with selector is `a b+c` the parent one is `a b`, while the outer one is `a`.\n   *\n   * This is `null` for the root rule and may be `null` for the rule removed from hierarchy.\n   */\n  abstract readonly outer: StypRule | null;\n\n  /**\n   * CSS selector of this rule.\n   */\n  abstract readonly selector: StypSelector.Normalized;\n\n  /**\n   * A key of this rule in the enclosing one.\n   */\n  abstract readonly key: StypRuleKey;\n\n  /**\n   * Whether this rule's properties are empty.\n   *\n   * This is `true` when the rule properties are constant and empty.\n   *\n   * Empty CSS rules returned from `rule()` method when there is no matching rule found.\n   */\n  abstract readonly empty: boolean;\n\n  /**\n   * Dynamic list of all CSS rules in hierarchy starting from this one.\n   */\n  abstract readonly rules: StypRuleHierarchy;\n\n  /**\n   * An `AfterEvent` keeper of CSS properties of this rule.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly read: AfterEvent<[StypProperties]>;\n\n  [AfterEvent__symbol](): AfterEvent<[StypProperties]> {\n    return this.read;\n  }\n\n  /**\n   * Sets CSS properties of this rule.\n   *\n   * @param properties - CSS properties specifier. Or nothing to clear them.\n   *\n   * @returns `this` rule instance.\n   */\n  abstract set(properties?: StypProperties.Spec): this;\n\n  /**\n   * Appends CSS properties to this rule.\n   *\n   * @param properties - CSS properties specifier.\n   *\n   * @returns `this` rule instance.\n   */\n  add(properties: StypProperties.Spec): this {\n    return this.rules.add([], properties) as this;\n  }\n\n  /**\n   * Clears CSS properties of this rule.\n   *\n   * Calling this method is the same as calling `set()` without properties.\n   *\n   * @returns `this` rule instance.\n   */\n  clear(): this {\n    return this.set();\n  }\n\n  /**\n   * Removes this rule from hierarchy along with all nested rules.\n   *\n   * @param reason - Optional removal reason.\n   *\n   * @returns `this` (just removed) rule instance.\n   */\n  abstract remove(reason?: any): this;\n\n}\n\n/**\n * Dynamically updated list of CSS rules.\n *\n * This is an iterable of rules, an EventSender` of their updates, and an `EventKeeper` of itself.\n *\n * @category CSS Rule\n */\nexport abstract class StypRuleList implements StypRules, EventKeeper<[StypRuleList]> {\n\n  /**\n   * An `AfterEvent` keeper of rule list.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly read: AfterEvent<[StypRuleList]>;\n\n  /**\n   * An `OnEvent` sender of this rule list updates.\n   *\n   * The list updates receiver accepts two arguments:\n   * - An array of added rules\n   * - An array of removed rules.\n   *\n   * The `[OnEvent__symbol]` property is an alias of this one.\n   *\n   * @returns `OnEvent` sender of rule list updates.\n   */\n  abstract readonly onUpdate: OnEvent<[StypRule[], StypRule[]]>;\n\n  [AfterEvent__symbol](): AfterEvent<[StypRuleList]> {\n    return this.read;\n  }\n\n  [OnEvent__symbol](): OnEvent<[StypRule[], StypRule[]]> {\n    return this.onUpdate;\n  }\n\n  abstract [Symbol.iterator](): IterableIterator<StypRule>;\n\n  /**\n   * Grabs rules from this list matching the given `query`.\n   *\n   * @param query - CSS rule query to match.\n   *\n   * @returns Dynamic list of rules in this list matching the given query.\n   */\n  abstract grab(query: StypQuery): StypRuleList;\n\n}\n\n/**\n * Dynamic list of all CSS rules in hierarchy starting from its root.\n *\n * @category CSS Rule\n */\nexport abstract class StypRuleHierarchy extends StypRuleList {\n\n  /**\n   * Dynamic list containing only root CSS rule.\n   *\n   * This list never changes actually.\n   */\n  abstract readonly self: StypRuleList;\n\n  /**\n   * Dynamic list of all CSS rules directly nested within the root one.\n   */\n  abstract readonly nested: StypRuleList;\n\n  /**\n   * Appends CSS properties to nested rule.\n   *\n   * Creates target rule if necessary.\n   *\n   * @param selector - Target rule selector.\n   * @param properties - Optional CSS properties specifier.\n   *\n   * @returns Modified CSS rule.\n   */\n  abstract add(selector: StypSelector, properties?: StypProperties.Spec): StypRule;\n\n  /**\n   * Returns nested CSS rule matching the given `selector`.\n   *\n   * @param selector - Target rule selector.\n   *\n   * @returns Either matching CSS rule, or `undefined` if not found.\n   */\n  abstract get(selector: StypSelector): StypRule | undefined;\n\n  /**\n   * Watches for CSS rule properties.\n   *\n   * The properties are empty when the watched rule does not exist.\n   *\n   * @param selector - CSS selector of watched rule.\n   *\n   * @returns An `AfterEvent` registrar of CSS properties receiver.\n   */\n  abstract watch(selector: StypSelector): AfterEvent<[StypProperties]>;\n\n}\n","import { AfterEvent, mapAfter, OnEvent, onEventBy, onSupplied, shareOn } from '@proc7ts/fun-events';\nimport { asis, valueProvider } from '@proc7ts/primitives';\nimport { filterIt, itsIterator } from '@proc7ts/push-iterator';\nimport { stypQuery, StypQuery, stypSelectorMatches } from '../selector';\nimport { StypRule, StypRuleList } from './rule';\nimport { StypRules } from './rules';\n\n/**\n * @internal\n */\nexport class Rules extends StypRuleList {\n\n  readonly read: AfterEvent<[StypRuleList]>;\n  readonly onUpdate: OnEvent<[StypRule[], StypRule[]]>;\n  private readonly _buildList: () => Iterable<StypRule>;\n  // noinspection JSMismatchedCollectionQueryUpdate\n  private _ruleSet?: Set<StypRule>; // `undefined` updates are not tracked\n\n  constructor(private readonly _list: StypRules, ruleMatches?: (rule: StypRule) => boolean) {\n    super();\n\n    let filterArray: (rules: StypRule[]) => StypRule[];\n\n    if (ruleMatches) {\n      this._buildList = () => filterIt(_list, ruleMatches);\n      filterArray = rules => rules.filter(ruleMatches);\n    } else {\n      this._buildList = valueProvider(_list);\n      filterArray = asis;\n    }\n\n    this.onUpdate = onEventBy<[StypRule[], StypRule[]]>(receiver => {\n\n      const rules = this._ruleSet || (this._ruleSet = new Set(this._buildList()));\n\n      onSupplied(this._list)({\n        supply: receiver.supply.whenOff(() => this._ruleSet = undefined),\n        receive: (context, added, removed) => {\n          added = filterArray(added);\n          removed = filterArray(removed);\n          if (removed.length || added.length) {\n            removed.forEach(rule => rules.delete(rule));\n            added.forEach(rule => rules.add(rule));\n            receiver.receive(context, added, removed);\n          }\n        },\n      });\n    }).do(shareOn);\n\n    const returnSelf = valueProvider(this);\n\n    this.read = this.onUpdate.do(mapAfter(returnSelf, returnSelf));\n  }\n\n  [Symbol.iterator](): IterableIterator<StypRule> {\n    if (this._ruleSet) {\n      // List changes are tracked.\n      return this._ruleSet.values();\n    }\n    // List changes are not currently tracked.\n    // Request the rules explicitly.\n    return itsIterator(this._buildList());\n  }\n\n  grab(query: StypQuery): StypRuleList {\n    return grabRules(this, query);\n  }\n\n}\n\n/**\n * @internal\n */\nexport function grabRules(list: StypRuleList, query: StypQuery): StypRuleList {\n\n  const q = stypQuery(query);\n\n  return new Rules(list, rule => stypSelectorMatches(rule.selector, q));\n}\n","import {\n  AfterEvent,\n  afterEventBy,\n  consumeEvents,\n  digAfter,\n  EventEmitter,\n  mapAfter,\n  OnEvent,\n  OnEvent__symbol,\n  shareAfter,\n  trackValue,\n  ValueTracker,\n} from '@proc7ts/fun-events';\nimport { lazyValue, valueProvider } from '@proc7ts/primitives';\nimport {\n  flatMapIt,\n  itsElements,\n  itsIterator,\n  overElementsOf,\n  overOne,\n  PushIterable,\n  PushIterator,\n  PushIterator__symbol,\n} from '@proc7ts/push-iterator';\nimport { StypQuery, StypRuleKey, stypSelector, StypSelector } from '../selector';\nimport { stypRuleKeyText } from '../selector/selector-text.impl';\nimport { stypOuterSelector, stypRuleKeyAndTail } from '../selector/selector.impl';\nimport { StypProperties } from './properties';\nimport { mergeStypProperties, noStypPropertiesSpec, stypPropertiesBySpec } from './properties.impl';\nimport { StypRule, StypRuleHierarchy, StypRuleList } from './rule';\nimport { StypRules } from './rules';\nimport { grabRules, Rules } from './rules.impl';\n\nclass AllRules extends StypRuleHierarchy implements PushIterable<StypRule$> {\n\n  readonly self: StypRuleList;\n  readonly read: AfterEvent<[AllRules]>;\n  private readonly _updates = new EventEmitter<[StypRule$[], StypRule$[]]>();\n  private readonly _it: () => PushIterable<StypRule$>;\n\n  constructor(private readonly _root: StypRule$, readonly nested: NestedRules) {\n    super();\n    this.self = selfRuleList(_root, this);\n    this._it = lazyValue(() => iterateAllRules(_root));\n\n    const returnSelf = valueProvider(this);\n\n    this.read = this._updates.on.do(mapAfter(returnSelf, returnSelf));\n  }\n\n  get onUpdate(): OnEvent<[StypRule$[], StypRule$[]]> {\n    return this._updates.on;\n  }\n\n  [Symbol.iterator](): PushIterator<StypRule$> {\n    return this[PushIterator__symbol]();\n  }\n\n  [PushIterator__symbol](accept?: PushIterator.Acceptor<StypRule$>): PushIterator<StypRule$> {\n    return this._it()[PushIterator__symbol](accept);\n  }\n\n  grab(query: StypQuery): StypRuleList {\n    return grabRules(this, query);\n  }\n\n  add(selector: StypSelector, properties?: StypProperties.Spec): StypRule$ {\n    return extendRule(this._root, stypSelector(selector), properties, true);\n  }\n\n  get(selector: StypSelector): StypRule$ | undefined {\n    return this._get(stypSelector(selector));\n  }\n\n  private _get(selector: StypSelector.Normalized): StypRule$ | undefined {\n\n    const [key, tail] = stypRuleKeyAndTail(selector);\n\n    if (!tail) {\n      return this._root;\n    }\n\n    const found = this.nested._rule(stypRuleKeyText(key));\n\n    if (!found) {\n      return;\n    }\n\n    return found.rules.get(tail);\n  }\n\n  watch(selector: StypSelector): AfterEvent<[StypProperties]> {\n\n    const request = stypSelector(selector);\n\n    return afterEventBy<[StypProperties]>(receiver => {\n\n      const tracker = trackValue<StypProperties>({});\n      const propertiesSupply = this.read.do(consumeEvents(() => {\n\n        const found = this._get(request);\n\n        return found && found\n            .read(properties => tracker.it = properties)\n            .whenOff(() => tracker.it = {});\n      }));\n\n      return tracker.read(receiver).cuts(propertiesSupply);\n    }).do(shareAfter);\n  }\n\n  _add(rule: StypRule$, sendUpdate: boolean): void {\n    rule.rules.onUpdate((added, removed) => this._updates.send(added, removed));\n    if (sendUpdate) {\n      this._updates.send(itsElements(rule.rules), []);\n    }\n  }\n\n  _remove(reason?: any): void {\n\n    const removed = itsElements(this);\n\n    this._updates.send([], removed);\n    removed.forEach(rule => {\n      rule.rules._updates.supply.off(reason);\n      rule._spec.supply.off(reason);\n    });\n  }\n\n}\n\nfunction selfRuleList(rule: StypRule$, all: AllRules): StypRuleList {\n\n  const onUpdate = new EventEmitter<[StypRule$[], StypRule$[]]>();\n  const rules = [rule];\n\n  all.onUpdate((_added, removed) => {\n    if (removed[0] === rule) {\n      rules.length = 0;\n      onUpdate.send([], [rule]);\n    }\n  }).cuts(onUpdate);\n\n  class Self implements StypRules {\n\n    [OnEvent__symbol](): OnEvent<[StypRule$[], StypRule$[]]> {\n      return onUpdate.on;\n    }\n\n    [Symbol.iterator](): IterableIterator<StypRule$> {\n      return itsIterator(rules);\n    }\n\n  }\n\n  return new Rules(new Self());\n}\n\nfunction iterateAllRules(rule: StypRule$): PushIterable<StypRule$> {\n  return overElementsOf(\n      overOne(rule),\n      flatMapIt(\n          rule.rules.nested,\n          nested => iterateAllRules(nested),\n      ),\n  );\n}\n\nclass NestedRules extends StypRuleList {\n\n  readonly read: AfterEvent<[NestedRules]>;\n  readonly _all: AllRules;\n  private readonly _updates = new EventEmitter<[StypRule$[], StypRule$[]]>();\n  private readonly _byKey = new Map<string, StypRule$>();\n\n  constructor(root: StypRule$) {\n    super();\n    this._all = new AllRules(root, this);\n\n    const returnSelf = valueProvider(this);\n\n    this.read = this._updates.on.do(mapAfter(returnSelf, returnSelf));\n  }\n\n  get onUpdate(): OnEvent<[StypRule[], StypRule[]]> {\n    return this._updates.on;\n  }\n\n  [Symbol.iterator](): IterableIterator<StypRule$> {\n    return this._byKey.values();\n  }\n\n  grab(query: StypQuery): StypRuleList {\n    return grabRules(this, query);\n  }\n\n  _rule(key: string): StypRule$ | undefined {\n    return this._byKey.get(key);\n  }\n\n  _add(key: string, rule: StypRule$, sendUpdate: boolean): void {\n    this._byKey.set(key, rule);\n    rule.rules.onUpdate((_added, removed) => {\n      if (removed[0] === rule) {\n        this._byKey.delete(key);\n        this._updates.send([], [rule]);\n      }\n    });\n    if (sendUpdate) {\n      this._updates.send([rule], []);\n    }\n    this._all._add(rule, sendUpdate);\n  }\n\n}\n\n/**\n * @internal\n */\nexport class StypRule$ extends StypRule {\n\n  readonly read: AfterEvent<[StypProperties]>;\n  private readonly _root: StypRule$;\n  private _outer?: StypRule$ | null;\n  private readonly _selector: StypSelector.Normalized;\n  private readonly _key: StypRuleKey;\n  readonly _spec: ValueTracker<StypProperties.Builder>;\n  private readonly _nested: NestedRules;\n\n  get root(): StypRule$ {\n    return this._root;\n  }\n\n  get outer(): StypRule$ | null {\n    if (this._outer !== undefined) {\n      return this._outer;\n    }\n\n    const outerSelector = stypOuterSelector(this.selector);\n\n    return this._outer = outerSelector && this.root.rules.get(outerSelector) || null;\n  }\n\n  get selector(): StypSelector.Normalized {\n    return this._selector;\n  }\n\n  get key(): StypRuleKey {\n    return this._key;\n  }\n\n  get empty(): boolean {\n    return this._spec.it === noStypPropertiesSpec;\n  }\n\n  get rules(): AllRules {\n    return this._nested._all;\n  }\n\n  constructor(\n      root: StypRule$ | undefined,\n      selector: StypSelector.Normalized,\n      key: StypRuleKey,\n      spec: StypProperties.Builder = noStypPropertiesSpec,\n  ) {\n    super();\n    this._root = root || this;\n    this._selector = selector;\n    this._key = key;\n    this._spec = trackValue(spec);\n    this.read = this._spec.read.do(digAfter(builder => builder(this)));\n    this._nested = new NestedRules(this);\n  }\n\n  set(properties?: StypProperties.Spec): this {\n    this._spec.it = properties ? r => stypPropertiesBySpec(r, properties) : noStypPropertiesSpec;\n    return this;\n  }\n\n  remove(reason?: any): this {\n    this.rules._remove(reason);\n    return this;\n  }\n\n}\n\nfunction extendRule(\n    rule: StypRule$,\n    targetSelector: StypSelector.Normalized,\n    properties: StypProperties.Spec | undefined,\n    sendUpdate: boolean,\n): StypRule$ {\n\n  const [key, tail] = stypRuleKeyAndTail(targetSelector);\n\n  if (!tail) {\n    // Target rule\n    rule._spec.it = extendSpec(rule, properties);\n    return rule;\n  }\n\n  const keyText = stypRuleKeyText(key);\n  const found = rule.rules.nested._rule(keyText);\n\n  if (found) {\n    return extendRule(found, tail, properties, sendUpdate);\n  }\n\n  const newNested = new StypRule$(rule.root, [...rule.selector, ...key], key);\n  const result = extendRule(newNested, tail, properties, false); // Send only a top-level update\n\n  rule.rules.nested._add(keyText, newNested, sendUpdate);\n\n  return result;\n}\n\nfunction extendSpec(rule: StypRule$, properties: StypProperties.Spec | undefined): StypProperties.Builder {\n\n  const oldSpec = rule._spec.it;\n\n  if (!properties) {\n    return oldSpec;\n  }\n\n  if (rule.empty) {\n    return r => stypPropertiesBySpec(r, properties);\n  }\n\n  return r => mergeStypProperties(oldSpec(r), stypPropertiesBySpec(r, properties));\n}\n","import { StypSelector } from '../selector';\nimport { StypProperties } from './properties';\nimport { stypPropertiesBySpec } from './properties.impl';\nimport { StypRule } from './rule';\nimport { StypRule$ } from './rule.impl';\n\n/**\n * @internal\n */\nconst rootSelector: StypSelector.Normalized = [];\n\n/**\n * Constructs root CSS rule representing global CSS declarations.\n *\n * All other rules are nested within single root.\n *\n * The root CSS rule selector is empty.\n *\n * @category CSS Rule\n * @param properties - Initial CSS rule properties specifier.\n *\n * @returns New root CSS rule.\n */\nexport function stypRoot(properties?: StypProperties.Spec): StypRule {\n  return new StypRule$(undefined, rootSelector, [], properties ? r => stypPropertiesBySpec(r, properties) : undefined);\n}\n","import {\n  afterAll,\n  AfterEvent,\n  AfterEvent__symbol,\n  afterThe,\n  EventKeeper,\n  isEventKeeper,\n  mapAfter,\n} from '@proc7ts/fun-events';\nimport { valueProvider } from '@proc7ts/primitives';\nimport { StypSelector } from '../selector';\nimport { StypMapper } from '../value';\nimport { StypProperties } from './properties';\nimport { StypRule } from './rule';\n\n/**\n * A type safe reference to CSS rule.\n *\n * Allows to access an modify CSS properties of the rule in a type safe manner.\n *\n * @category CSS Rule\n * @typeparam T  CSS properties structure of referenced rule.\n */\nexport abstract class StypRuleRef<T extends StypProperties<T>> implements EventKeeper<[T]> {\n\n  /**\n   * An `AfterEvent` keeper of CSS properties.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly read: AfterEvent<[T]>;\n\n  [AfterEvent__symbol](): AfterEvent<[T]> {\n    return this.read;\n  }\n\n  /**\n   * Sets CSS properties of the referenced rule.\n   *\n   * @param properties - CSS properties specifier. Or nothing to clear them.\n   *\n   * @returns `this` rule instance.\n   */\n  abstract set(properties?: Partial<StypProperties<T>> | EventKeeper<[Partial<StypProperties<T>>]>): this;\n\n  /**\n   * Appends CSS properties to the references CSS rule.\n   *\n   * @param properties - CSS properties specifier.\n   *\n   * @returns `this` rule instance.\n   */\n  abstract add(properties: Partial<StypProperties<T>> | EventKeeper<[Partial<StypProperties<T>>]>): this;\n\n  /**\n   * Clears CSS properties of the referenced rule.\n   *\n   * Calling this method is the same as calling `set()` without properties.\n   *\n   * @returns `this` rule instance.\n   */\n  clear(): this {\n    return this.set();\n  }\n\n}\n\n/**\n * CSS rule referrer.\n *\n * This is a function that obtains CSS rule reference relative to the given root.\n *\n * @category CSS Rule\n * @typeparam T  CSS properties interface of referenced rule.\n */\nexport type RefStypRule<T extends StypProperties<T>> =\n/**\n * @param root - Root CSS rule the constructed reference will be relative to.\n *\n * @returns CSS rule reference.\n */\n    (this: void, root: StypRule) => StypRuleRef<T>;\n\n\n/**\n * @internal\n */\nclass StypRuleRef$<T extends StypProperties<T>> extends StypRuleRef<T> {\n\n  readonly read: AfterEvent<[T]>;\n\n  constructor(\n      private readonly _root: StypRule,\n      private readonly _selector: StypSelector,\n      private readonly _map: (root: StypRule) => EventKeeper<[StypMapper.Mappings<T>]>,\n  ) {\n    super();\n    this.read = afterAll({\n      ms: this._map(this._root),\n      ps: this._root.rules.watch(this._selector),\n    }).do(mapAfter(\n        ({\n          ms: [_mappings],\n          ps: [_properties],\n        }) => StypMapper.map<T>(_mappings, _properties),\n    ));\n  }\n\n  add(properties: EventKeeper<[Partial<StypProperties<T>>]> | Partial<StypProperties<T>>): this {\n    this._root.rules.add(this._selector, properties);\n    return this;\n  }\n\n  set(properties?: EventKeeper<[Partial<StypProperties<T>>]> | Partial<StypProperties<T>>): this {\n    this._root.rules.add(this._selector).set(properties);\n    return this;\n  }\n\n}\n\n/**\n * @category CSS Rule\n */\nexport const RefStypRule = {\n\n  /**\n   * Constructs a CSS rule referrer that maps original CSS properties accordingly to the given `mappings`.\n   *\n   * @typeparam T  CSS properties structure of referenced rule.\n   * @param selector - CSS selector of target rule.\n   * @param mappings - Either a mappings of CSS properties, an event keeper sending such mappings, or a function\n   * returning one of them and accepting a root CSS rule as its only argument.\n   * The constructed reference will be relative to as its only parameter.\n   *\n   * @returns New CSS rule key instance.\n   */\n  by<T extends StypProperties<T>>(\n      selector: StypSelector,\n      mappings:\n          | StypMapper.Mappings<T>\n          | EventKeeper<[StypMapper.Mappings<T>]>\n          | ((this: void, root: StypRule) => StypMapper.Mappings<T> | EventKeeper<[StypMapper.Mappings<T>]>),\n  ): RefStypRule<T> {\n\n    let map: (root: StypRule) => EventKeeper<[StypMapper.Mappings<T>]>;\n\n    if (typeof mappings === 'function') {\n      map = root => mappingsKeeper(mappings(root));\n    } else {\n      map = valueProvider(mappingsKeeper(mappings));\n    }\n\n    return root => new StypRuleRef$(root, selector, map);\n  },\n\n};\n\n/**\n * @internal\n */\nfunction mappingsKeeper<T extends StypProperties<T>>(\n    mappings: StypMapper.Mappings<T> | EventKeeper<[StypMapper.Mappings<T>]>,\n): EventKeeper<[StypMapper.Mappings<T>]> {\n  return isEventKeeper(mappings) ? mappings : afterThe(mappings);\n}\n","import { afterAll, AfterEvent, AfterEvent__symbol, EventKeeper, mapAfter } from '@proc7ts/fun-events';\nimport { StypProperties } from './properties';\nimport { StypRule } from './rule';\nimport { RefStypRule, StypRuleRef } from './rule-ref';\n\n/**\n * Named CSS rule references complying to the CSS properties structure.\n *\n * Implements an event keeper interface by sending named CSS properties structures for each CSS rule reference.\n *\n * @category CSS Rule\n * @typeParam TRefMap - A type of target map of named CSS properties structures.\n */\nexport class StypRuleRefs<TRefMap extends StypRuleRefs.Struct<TRefMap>> implements EventKeeper<[TRefMap]> {\n\n  /**\n   * Constructs named CSS rules by resolving CSS rule referrers.\n   *\n   * @typeParam TRefMap - A type of target map of named CSS properties structures.\n   * @param referrers - Named CSS rule referrers to resolve.\n   * @param root - A root CSS rule the references will be relative to.\n   *\n   * @returns New names CSS rules instance.\n   */\n  static by<TRefMap extends StypRuleRefs.Struct<TRefMap>>(\n      referrers: { readonly [K in keyof TRefMap]: RefStypRule<TRefMap[K]> },\n      root: StypRule,\n  ): StypRuleRefs<TRefMap>;\n\n  static by<TRefMap extends StypRuleRefs.Struct<TRefMap>>(\n      referrers: { readonly [name: string]: RefStypRule<any> },\n      root: StypRule,\n  ): StypRuleRefs<TRefMap> {\n\n    const refs: { [K in keyof TRefMap]?: StypRuleRef<any> } = {};\n\n    for (const key of Object.keys(referrers)) {\n      refs[key as keyof TRefMap] = referrers[key](root);\n    }\n\n    return new StypRuleRefs<TRefMap>(refs as { [K in keyof TRefMap]: StypRuleRef<TRefMap[K]> });\n  }\n\n  /**\n   * CSS rule references by name.\n   *\n   * Each property in this map is a CSS rule reference corresponding to the same named property in properties structure.\n   * I.e. it has the same name and the same properties structure of referenced rule.\n   */\n  readonly refs: { readonly [K in keyof TRefMap]: StypRuleRef<TRefMap[K]> };\n\n  /**\n   * An `AfterEvent` keeper of named CSS properties structures for each CSS rule reference.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   */\n  readonly read: AfterEvent<[TRefMap]>;\n\n  /**\n   * Constructs named CSS rules.\n   *\n   * @param refs - A map of named CSS rule references.\n   */\n  constructor(refs: { readonly [K in keyof TRefMap]: StypRuleRef<TRefMap[K]> }) {\n    this.refs = refs;\n\n    const fromAll: AfterEvent<[{ [K in keyof TRefMap]: [StypProperties<any>] }]> = afterAll(this.refs);\n\n    this.read = fromAll.do(mapAfter(flattenProperties)) as AfterEvent<[TRefMap]>;\n  }\n\n  [AfterEvent__symbol](): AfterEvent<[TRefMap]> {\n    return this.read;\n  }\n\n}\n\n/**\n * @internal\n */\nfunction flattenProperties<TRefMap extends StypRuleRefs.Struct<TRefMap>>(\n    propertiesMap: { readonly [name: string]: [StypProperties<any>] },\n): TRefMap {\n\n  const result: { [name: string]: StypProperties<any> } = {};\n\n  for (const name of Object.keys(propertiesMap)) {\n    result[name] = propertiesMap[name][0];\n  }\n\n  return result as TRefMap;\n}\n\n/**\n * @category CSS Rule\n */\nexport namespace StypRuleRefs {\n\n  /**\n   * A map of named CSS properties structures.\n   *\n   * Each property in this map corresponds to CSS rule reference with the same CSS properties structure.\n   *\n   * @typeParam TRefMap - A type of target map of named CSS properties structures.\n   */\n  export type Struct<TRefMap = { readonly [name: string]: StypProperties<any> }> = {\n    readonly [K in keyof TRefMap]: StypProperties<any>;\n  };\n\n  /**\n   * A map of named CSS rule referrers.\n   *\n   * These referrers then resolved to the same named CSS rule references.\n   *\n   * @typeParam TRefMap - A type of target map of named CSS properties structures.\n   */\n  export type Referrers<TRefMap extends Struct<TRefMap>> = {\n    readonly [K in keyof TRefMap]: RefStypRule<TRefMap[K]>;\n  };\n\n}\n","import {\n  EventNotifier,\n  EventReceiver,\n  EventSender,\n  isEventSender,\n  OnEvent,\n  OnEvent__symbol,\n  onEventBy,\n  onNever,\n  onSupplied,\n  shareOn,\n} from '@proc7ts/fun-events';\nimport { itsEach } from '@proc7ts/push-iterator';\nimport { neverSupply, Supply } from '@proc7ts/supply';\nimport { StypRule, StypRuleList } from './rule';\nimport { Rules } from './rules.impl';\n\n/**\n * Dynamically updated CSS rule set.\n *\n * This is an iterable of rules, and an `EventSender` of their updates.\n *\n * @category CSS Rule\n */\nexport interface StypRules extends Iterable<StypRule>, EventSender<[StypRule[], StypRule[]]> {\n\n  [Symbol.iterator](): IterableIterator<StypRule>;\n\n}\n\n/**\n * @category CSS Rule\n */\nexport namespace StypRules {\n\n  /**\n   * A source of CSS rules.\n   *\n   * A dynamically updated CSS rule set can be constructed out of one or more sources by {@link stypRules} and\n   * {@link lazyStypRules} functions.\n   *\n   * This can be one of:\n   * - Single `StypRule` instance.\n   *   A `StypRule.rules.self` is used instead. I.e. a list containing only the rule itself.\n   * - A `StypRules` instance.\n   *   It is used as is.\n   * - A promise of one of the above.\n   *   The resolved value is used as an actual source.\n   *   No rules are available until resolution.\n   * - A function returning one of the above.\n   *   The function call result is used as an actual source.\n   *   The function will be called lazily upon rules access.\n   */\n  export type Source =\n      | StypRule\n      | StypRules\n      | Promise<StypRule | StypRules>\n      | ((this: void) => StypRule | StypRules | Promise<StypRule | StypRules>);\n\n}\n\n/**\n * @internal\n */\nconst noStypRules: StypRuleList = (/*#__PURE__*/ new Rules({\n  [OnEvent__symbol]() {\n    return onNever;\n  },\n  [Symbol.iterator](): IterableIterator<StypRule> {\n    return [][Symbol.iterator]();\n  },\n}));\n\n/**\n * Constructs dynamically updated CSS rule list out of rule sources.\n *\n * @category CSS Rule\n * @param sources - CSS rule sources.\n *\n * @returns Dynamic CSS rule list.\n */\nexport function stypRules(...sources: StypRules.Source[]): StypRuleList {\n  return sources.length ? rulesByList(sources.map(rulesFromSource)) : noStypRules;\n}\n\n/**\n * @internal\n */\nfunction rulesFromSource(source: StypRules.Source): StypRules {\n  return typeof source === 'function' ? evalRules(source) : rulesByValue(source);\n}\n\n/**\n * Constructs lazily updated CSS rule list out of rule sources.\n *\n * In contrast to {@link stypRules} this one does not evaluate sources (e.g. does not call source functions) until there\n * is an updates receiver registered.\n *\n * This means that the constructed rule set won't necessary contain the rules from all sources originally. It will\n * report them as updates instead.\n *\n * @category CSS Rule\n * @param sources - CSS rule sources.\n *\n * @returns Dynamic CSS rule list.\n */\nexport function lazyStypRules(...sources: StypRules.Source[]): StypRuleList {\n  return sources.length ? rulesByList(sources.map(lazyRulesFromSource)) : noStypRules;\n}\n\n/**\n * @internal\n */\nfunction lazyRulesFromSource(source: StypRules.Source): StypRules {\n  return typeof source === 'function' ? lazyRules(source) : rulesByValue(source);\n}\n\n/**\n * @internal\n */\nfunction rulesByList(sources: StypRules[]): StypRuleList {\n  if (sources.length === 1) {\n\n    const source = sources[0];\n\n    return source instanceof StypRuleList ? source : new Rules(source);\n  }\n  return new Rules({\n    *[Symbol.iterator](): IterableIterator<StypRule> {\n      for (const rules of sources) {\n        yield* rules;\n      }\n    },\n    [OnEvent__symbol](): OnEvent<[StypRule[], StypRule[]]> {\n      return onEventBy<[StypRule[], StypRule[]]>(receiver => {\n        sources.forEach(source => onSupplied(source)({\n          supply: new Supply().needs(receiver.supply),\n          receive(context, added, removed) {\n            receiver.receive(context, added, removed);\n          },\n        }));\n      }).do(shareOn);\n    },\n  });\n}\n\n/**\n * @internal\n */\nfunction evalRules(source: (this: void) => StypRule | StypRules | Promise<StypRule | StypRules>): StypRules {\n\n  let rules: StypRules | undefined;\n  const getRules = (): StypRules => rules || (rules = rulesByValue(source()));\n\n  return {\n    [Symbol.iterator](): IterableIterator<StypRule> {\n      return getRules()[Symbol.iterator]();\n    },\n    [OnEvent__symbol]() {\n      return getRules()[OnEvent__symbol]();\n    },\n  };\n}\n\n/**\n * @internal\n */\nfunction lazyRules(source: (this: void) => StypRule | StypRules | Promise<StypRule | StypRules>): StypRules {\n\n  const ruleSet = new Set<StypRule>();\n  const onEvent = onEventBy<[StypRule[], StypRule[]]>(receiver => {\n\n    const rules = rulesByValue(source());\n\n    reportExistingRules(rules, ruleSet, receiver);\n    rules[OnEvent__symbol]()({\n      supply: receiver.supply.whenOff(() => ruleSet.clear()),\n      receive(context, added, removed) {\n        removed.forEach(rule => ruleSet.delete(rule));\n        added.forEach(rule => ruleSet.add(rule));\n        receiver.receive(context, added, removed);\n      },\n    });\n  }).do(shareOn);\n\n  return {\n    [OnEvent__symbol]() {\n      return onEvent;\n    },\n    [Symbol.iterator](): IterableIterator<StypRule> {\n      return ruleSet.values();\n    },\n  };\n}\n\n/**\n * @internal\n */\nfunction rulesByValue(source: StypRule | StypRules | Promise<StypRule | StypRules>): StypRules {\n  return source instanceof StypRule ? source.rules.self : isEventSender(source) ? source : asyncRules(source);\n}\n\n/**\n * @internal\n */\nfunction asyncRules(source: Promise<StypRule | StypRules>): StypRules {\n\n  const ruleSet = new Set<StypRule>();\n  const onEvent = onEventBy<[StypRule[], StypRule[]]>(receiver => {\n\n    let sourceSupply = neverSupply();\n    const { supply } = receiver;\n\n    supply.cuts(sourceSupply)\n        .whenOff(() => ruleSet.clear());\n\n    source.then(\n        resolution => {\n          if (!supply.isOff) {\n\n            const rules = resolution instanceof StypRule ? resolution.rules : resolution;\n\n            reportExistingRules(rules, ruleSet, receiver);\n\n            sourceSupply = onSupplied(rules)({\n              receive(context, added, removed) {\n                removed.forEach(rule => ruleSet.delete(rule));\n                added.forEach(rule => ruleSet.add(rule));\n                receiver.receive(context, added, removed);\n              },\n            }).needs(supply);\n          }\n        },\n    ).catch(\n        error => supply.off(error),\n    );\n  }).do(shareOn);\n\n  return {\n    [OnEvent__symbol]() {\n      return onEvent;\n    },\n    [Symbol.iterator](): IterableIterator<StypRule> {\n      return ruleSet.values();\n    },\n  };\n}\n\n/**\n * @internal\n */\nfunction reportExistingRules(\n    rules: StypRules,\n    ruleSet: Set<StypRule>,\n    receiver: EventReceiver.Generic<[StypRule[], StypRule[]]>,\n): void {\n\n  const existing: StypRule[] = [];\n\n  itsEach(rules, rule => {\n    existing.push(rule);\n    ruleSet.add(rule);\n  });\n  if (existing.length) {\n\n    const dispatcher = new EventNotifier<[StypRule[], StypRule[]]>();\n\n    dispatcher.on(receiver);\n    dispatcher.send(existing, []); // Report existing rules as just added\n  }\n}\n","import { produceBasicStyle, StypFormat, StypRules } from '@frontmeans/style-producer';\nimport { SingleContextKey, SingleContextRef } from '@proc7ts/context-values';\nimport { Supply } from '@proc7ts/supply';\nimport { bootstrapDefault } from '@wesib/wesib';\n\n/**\n * Component style producer signature.\n */\nexport type ComponentStyleProducer =\n/**\n * @param rules - CSS rules to produce stylesheets for. This can be e.g. a `StypRule.rules` to render all rules,\n * or a result of `StypRuleList.grab()` method call to render only matching ones.\n * @param format - Style production format.\n *\n * @returns Styles supply. Once cut off (i.e. its `off()` method is called) the produced stylesheets are removed.\n */\n    (\n        rules: StypRules,\n        format: StypFormat,\n    ) => Supply;\n\n/**\n * A key of bootstrap, definition, or component context value containing a component style producer.\n *\n * Utilizes `produceBasicStyle()` by default. I.e. it does not enable default renderers. To enable them all a\n * {@link StyleProducerSupport} can be used.\n *\n * Depends on [@frontmeans/style-producer].\n *\n * [@frontmeans/style-producer]: https://www.npmjs.com/package/@frontmeans/style-producer\n */\nexport const ComponentStyleProducer: SingleContextRef<ComponentStyleProducer> = (\n    /*#__PURE__*/ new SingleContextKey<ComponentStyleProducer>(\n        'component-style-producer',\n        {\n          byDefault: bootstrapDefault(() => produceBasicStyle),\n        },\n    )\n);\n","import { nodeDocument } from '@frontmeans/dom-primitives';\nimport { StypDomFormatConfig } from '@frontmeans/style-producer';\nimport { ComponentContext, DefaultNamespaceAliaser, ElementRenderScheduler, RenderDef } from '@wesib/wesib';\nimport { ComponentStypFormat, ComponentStypFormatConfig } from './component-styp-format';\n\n/**\n * Builds configuration of DOM style production format.\n *\n * Schedules style rendering in `ElementRenderScheduler` by default.\n *\n * Utilizes `DefaultNamespaceAliaser` by default.\n *\n * @param format - Target component style production format.\n * @param config - Original component style production format configuration.\n * @param render - Element render definition to apply to style render schedule, unless render scheduler specified\n * explicitly in `config`.\n *\n * @returns Configuration of DOM style production format.\n */\nexport function componentStypDomFormatConfig(\n    format: ComponentStypFormat,\n    config: ComponentStypFormatConfig & StypDomFormatConfig = {},\n    render?: RenderDef,\n): StypDomFormatConfig {\n\n  const { context } = format;\n\n  return {\n    ...config,\n    document: config.document || nodeDocument(context.element),\n    parent: config.parent || context.contentRoot,\n    rootSelector: [],\n    scheduler: config.scheduler || defaultStypRenderScheduler(context, render),\n    nsAlias: config.nsAlias || context.get(DefaultNamespaceAliaser),\n    renderer: format.renderer(config),\n  };\n}\n\n/**\n * @internal\n */\nfunction defaultStypRenderScheduler(\n    context: ComponentContext,\n    render: RenderDef = {},\n): ElementRenderScheduler {\n\n  const scheduler = context.get(ElementRenderScheduler);\n\n  return (opts = {}) => scheduler({ ...opts, ...render });\n}\n","import { StypRenderer } from '@frontmeans/style-producer';\nimport { MultiContextKey, MultiContextRef } from '@proc7ts/context-values';\n\n/**\n * A CSS renderer that will be enabled by default by {@link ComponentStypFormat component style production format}.\n */\nexport type ComponentStypRenderer = StypRenderer;\n\n/**\n * A key of component context value containing component CSS renderers.\n */\nexport const ComponentStypRenderer: MultiContextRef<ComponentStypRenderer> = (\n    /*#__PURE__*/ new MultiContextKey<ComponentStypRenderer>('component-styp-renderer')\n);\n","import { css__naming, html__naming, NamespaceDef, QualifiedName } from '@frontmeans/namespace-aliaser';\nimport { ContextValues, SingleContextKey, SingleContextRef } from '@proc7ts/context-values';\nimport { ComponentContext, DefaultNamespaceAliaser, ElementDef } from '@wesib/wesib';\n\n/**\n * @internal\n */\nexport type ElementIdClass = QualifiedName;\n\n/**\n * @internal\n */\nexport const ElementIdClass__NS = (/*#__PURE__*/ new NamespaceDef(\n    'https://wesib.github.io/ns/element-id-class',\n    'elic',\n    'element-id-class',\n));\n\n/**\n * @internal\n */\nexport const ElementIdClass: SingleContextRef<ElementIdClass> = (/*#__PURE__*/ new SingleContextKey(\n    'unique-element-class',\n    { byDefault: assignElementId },\n));\n\n/**\n * @internal\n */\nlet uniqueClassSeq = 0;\n\n/**\n * @internal\n */\nfunction assignElementId(contextValues: ContextValues): ElementIdClass {\n\n  const aliaser = contextValues.get(DefaultNamespaceAliaser);\n  const context = contextValues.get(ComponentContext);\n  const elementDef = context.get(ElementDef);\n  const name: string = elementDef.name ? html__naming.name(elementDef.name, aliaser) : 'component';\n  const local = `${name}#${++uniqueClassSeq}`;\n  const qualified = ElementIdClass__NS.name(aliaser(ElementIdClass__NS), local, css__naming);\n  const element = context.element as Element;\n\n  element.classList.add(qualified);\n\n  return qualified;\n}\n","import { NamespaceAliaser } from '@frontmeans/namespace-aliaser';\nimport { RenderScheduler } from '@frontmeans/render-scheduler';\nimport {\n  lazyStypRules,\n  StypFormat,\n  StypFormatConfig,\n  stypObjectFormat,\n  StypObjectFormatConfig,\n  StypPureSelector,\n  StypRenderer,\n  StypRules,\n  StypSelector,\n  stypSelector,\n  StypSubSelector,\n} from '@frontmeans/style-producer';\nimport { ContextKey, ContextKey__symbol, SingleContextKey } from '@proc7ts/context-values';\nimport { elementOrArray, extendSetOfElements, setOfElements, valueProvider } from '@proc7ts/primitives';\nimport { Supply } from '@proc7ts/supply';\nimport { ComponentContext, ShadowContentRoot } from '@wesib/wesib';\nimport { ComponentStyleProducer } from './component-style-producer';\nimport { componentStypDomFormatConfig } from './component-styp-dom.format-config';\nimport { ComponentStypRenderer } from './component-styp-renderer';\nimport { ElementIdClass } from './element-id-class.impl';\n\n/**\n * Configuration of {@link ComponentStypFormat component style production format}.\n *\n * Depends on [@frontmeans/style-producer].\n *\n * [@frontmeans/style-producer]: https://www.npmjs.com/package/@frontmeans/style-producer\n */\nexport interface ComponentStypFormatConfig extends StypFormatConfig {\n\n  /**\n   * Structured CSS selector to use for custom element's host.\n   *\n   * It modifies the selectors of produced CSS rules.\n   *\n   * For custom element with shadow root:\n   * - Replaces root CSS rule selector with `:host(<hostSelector>).\n   * - When `hostSelector` is omitted, then replaces root CSS rule selector with `:host`.\n   * - If CSS rule selector starts with `:host`, then replaces `:host` with `:host(<hostSelector>)`\n   * - If CSS rule selector starts with `:host(<selector>)`, then extends `<selector>` by `hostSelector`.\n   *   I.e. appends CSS classes and sub-selectors to it, and fulfills missing element and identifier selectors.\n   *\n   * For custom element without shadow root either uses provided `hostSelector`, or generates a unique one when omitted.\n   * And additionally:\n   * - Replaces root CSS rule selector it with `hostSelector`.\n   * - If CSS rule selector starts with `:host`, then replaces `:host` with `hostSelector`.\n   * - If CSS rule selector starts with `:host(<selector>), then replaces `:host(<selector>)` with `<selector>` extended\n   *   by `hostSelector`. I.e. appends CSS classes and sub-selectors to it, and fulfills missing element and identifier\n   *   selectors.\n   * - Otherwise prepends CSS rule selector with `hostSelector`.\n   *\n   * This selector should not contain a `:host` sub-selector.\n   */\n  readonly hostSelector?: StypPureSelector.Part | string;\n\n  /**\n   * Root CSS selector is never used for custom elements. A `hostSelector` is applied instead.\n   */\n  readonly rootSelector?: undefined;\n\n  /**\n   * DOM rendering operations scheduler.\n   *\n   * Creates a render schedule per rule.\n   *\n   * `ElementRenderScheduler` is used when omitted.\n   */\n  readonly scheduler?: RenderScheduler;\n\n  /**\n   * Namespace aliaser to use.\n   *\n   * `DefaultNamespaceAliaser` is used when omitted.\n   */\n  readonly nsAlias?: NamespaceAliaser;\n\n}\n\nconst ComponentStypFormat__symbol = (/*#__PURE__*/ new SingleContextKey<ComponentStypFormat>(\n    'component-styp-format',\n    {\n      byDefault(context) {\n        return new ComponentStypObjectFormat(context.get(ComponentContext));\n      },\n    },\n));\n\n/**\n * Component style production format.\n *\n * This format can be obtained from component context.\n *\n * The formats implemented:\n * - {@link ComponentStypObjectFormat} (the default) renders CSS using CSS object model.\n * - {@link ComponentStypDomFormat} renders CSS as text. May render CSS of disconnected element.\n */\nexport abstract class ComponentStypFormat {\n\n  /**\n   * A key of component context value containing its style production format.\n   */\n  static get [ContextKey__symbol](): ContextKey<ComponentStypFormat> {\n    return ComponentStypFormat__symbol;\n  }\n\n  /**\n   * Component context.\n   */\n  abstract readonly context: ComponentContext;\n\n  /**\n   * Produces and dynamically updates component's CSS stylesheets based on the given CSS rules.\n   *\n   * Utilizes {@link newProducer component's producer function}.\n   *\n   * @param rules - A source of CSS rules to produce stylesheets for.\n   * @param config - Style production format configuration.\n   *\n   * @returns CSS rules supply. Once cut off the produced stylesheets are removed.\n   */\n  produce(\n      rules: StypRules.Source,\n      config?: ComponentStypFormatConfig,\n  ): Supply {\n\n    const producer = this.newProducer(rules, config);\n    const supply = new Supply();\n\n    this.context.whenSettled(() => producer().as(supply));\n\n    return supply;\n  }\n\n  /**\n   * Creates component's CSS stylesheets producer based on the given CSS rules.\n   *\n   * Utilizes {@link ComponentStyleProducer}.\n   *\n   * @param rules - A source of CSS rules to produce stylesheets for.\n   * @param config - Style production format configuration.\n   *\n   * @returns CSS rules producer function returning CSS rules supply. Once cut off the produced stylesheets are removed.\n   */\n  newProducer(\n      rules: StypRules.Source,\n      config?: ComponentStypFormatConfig,\n  ): (this: void) => Supply {\n\n    const css = lazyStypRules(rules);\n    let producer: () => Supply;\n    const componentSupply = this.context.supply;\n\n    producer = () => {\n\n      const produceStyle = this.context.get(ComponentStyleProducer);\n\n      return produceStyle(css, this.format(config)).needs(componentSupply);\n    };\n\n    // In case the component destroyed already, the producer will be reassigned here _before_ return.\n    componentSupply.whenOff(() => {\n      // Prevent style production once component destroyed.\n      producer = valueProvider(componentSupply);\n    });\n\n    return () => producer();\n  }\n\n  /**\n   * Builds CSS style production format to by its config.\n   *\n   * This method is called by {@link produce} one.\n   *\n   * @param config - Component style production format configuration.\n   *\n   * @returns Component style production format.\n   */\n  abstract format(config?: ComponentStypFormatConfig): StypFormat;\n\n  /**\n   * Builds component-specific style renderer.\n   *\n   * This renderer applies {@link ComponentStypFormatConfig.hostSelector host selector} to generated CSS rules.\n   *\n   * This method is called by {@link format} one.\n   *\n   * @param config - Component style production format configuration.\n   *\n   * @returns Component style renderer(s).\n   */\n  renderer(\n      config: ComponentStypFormatConfig,\n  ): StypRenderer | readonly StypRenderer[] | undefined {\n\n    const shadowRoot = this.context.get(ShadowContentRoot, { or: null });\n    const { renderer } = config;\n    const renderers = extendSetOfElements(\n        setOfElements<StypRenderer>(renderer),\n        this.context.get(ComponentStypRenderer),\n    );\n\n    const hostSelector = config.hostSelector\n        ? stypSelector(config.hostSelector)[0] as StypPureSelector.NormalizedPart\n        : undefined;\n\n    renderers.add(shadowRoot\n        ? shadowRenderer(hostSelector)\n        : noShadowRenderer(hostSelector || { c: [this.context.get(ElementIdClass)] }));\n\n    return elementOrArray(renderers);\n  }\n\n}\n\n\n/**\n * @internal\n */\nfunction shadowRenderer(hostSelector: StypPureSelector.NormalizedPart | undefined): StypRenderer {\n  return {\n    order: -100,\n    render(producer, properties) {\n\n      let { selector } = producer;\n\n      if (!selector.length) {\n        selector = [hostSelector || { u: [[':', 'host']] }];\n      } else if (hostSelector) {\n\n        const [rest, host] = extractHostSelector(selector);\n\n        if (host) {\n          if (host.length) {\n            selector = [{ u: [[':', 'host', extendHostSelector(host, hostSelector)]] }, ...rest];\n          } else {\n            selector = [{ u: [[':', 'host', [hostSelector]]] }, ...rest];\n          }\n        }\n      }\n\n      producer.render(properties, { selector });\n    },\n  };\n}\n\n/**\n * @internal\n */\nfunction noShadowRenderer(hostSelector: StypPureSelector.NormalizedPart): StypRenderer {\n  return {\n    order: -100,\n    render(producer, properties) {\n\n      let { selector } = producer;\n\n      if (!selector.length) {\n        selector = [hostSelector];\n      } else {\n\n        const [rest, host] = extractHostSelector(selector);\n\n        if (host && host.length) {\n          selector = [...extendHostSelector(host, hostSelector), ...rest];\n        } else {\n          selector = [hostSelector, ...rest];\n        }\n      }\n\n      producer.render(properties, { selector });\n    },\n  };\n}\n\n/**\n * @internal\n */\nfunction extractHostSelector(\n    selector: StypSelector.Normalized,\n): [StypSelector.Normalized, StypSelector.Normalized?] {\n  if (typeof selector[0] !== 'string') {\n\n    const [{ ns, e, i, c, u, s, $ }, ...restParts] = selector;\n\n    if (!ns && !e && !i && !c && !s && u) {\n\n      const [[prefix, name, ...params]] = u;\n\n      if (prefix === ':' && name === 'host') {\n\n        let host: StypSelector.Mutable;\n\n        if (params.length) {\n          host = (params[0] as StypSubSelector.NormalizedParameter).slice();\n          (host[0] as { $?: string | readonly string[] }).$ = $;\n        } else {\n          host = $ ? [{ $ }] : [];\n        }\n\n        return [restParts, host];\n      }\n    }\n  }\n  return [selector];\n}\n\n/**\n * @internal\n */\nfunction extendHostSelector(\n    selector: StypSelector.Normalized,\n    {\n      ns,\n      e,\n      i,\n      c,\n      u,\n      s,\n    }: StypPureSelector.NormalizedPart,\n): StypSelector.Normalized {\n\n  const [first, ...rest] = selector as [StypSelector.NormalizedPart, ...StypSelector.Normalized];\n\n  return [\n    {\n      ns: first.e || first.ns ? first.ns : ns,\n      e: first.e || first.ns ? first.e : e,\n      i: first.i || i,\n      c: first.c ? (c ? [...first.c, ...c] : first.c) as typeof c : c,\n      u: first.u ? (u ? [...first.u, ...u] : first.u) as typeof u : u,\n      s: ((first.s || '') + (s || '')) || undefined,\n      $: first.$,\n    },\n    ...rest,\n  ];\n}\n\n/**\n * Component's CSS object model production format.\n *\n * Renders CSS when component's element connected to document.\n *\n * This format is used by default.\n */\nexport class ComponentStypObjectFormat extends ComponentStypFormat {\n\n  /**\n   * Constructs CSS object model production format.\n   *\n   * @param context - Target component context.\n   */\n  constructor(readonly context: ComponentContext) {\n    super();\n  }\n\n  format(config?: ComponentStypFormatConfig & StypObjectFormatConfig): StypFormat {\n    return stypObjectFormat(this.config(config));\n  }\n\n  /**\n   * Builds configuration of CSS object model production format.\n   *\n   * This method is called by {@link format} one.\n   *\n   * @param config - Original component style production format configuration.\n   *\n   * @returns Configuration of CSS object model production format.\n   */\n  config(config?: ComponentStypFormatConfig & StypObjectFormatConfig): StypObjectFormatConfig {\n    return componentStypDomFormatConfig(this, config, { when: 'connected' });\n  }\n\n}\n\n","import { stypDomFormat, StypDomFormatConfig, StypFormat } from '@frontmeans/style-producer';\nimport { ComponentContext } from '@wesib/wesib';\nimport { componentStypDomFormatConfig } from './component-styp-dom.format-config';\nimport { ComponentStypFormat, ComponentStypFormatConfig } from './component-styp-format';\n\n/**\n * Component's DOM style production format.\n *\n * Renders CSS styles as text.\n *\n * This format is generally slower than {@link ComponentStypObjectFormat}, but allows to render styles before element\n * is connected to document.\n */\nexport class ComponentStypDomFormat extends ComponentStypFormat {\n\n  /**\n   * When to start component style rendering.\n   *\n   * One of:\n   * `settled` (the default) - to start rendering when component is settled.\n   * `connected` - to start rendering when component's element is connected to document.\n   */\n  readonly when: 'settled' | 'connected';\n\n  /**\n   * Constructs DOM style production format.\n   *\n   * @param context - Target component context.\n   * @param when - When to start style rendering. `settled` by default.\n   */\n  constructor(\n      readonly context: ComponentContext,\n      {\n        when = 'settled',\n      }: {\n        readonly when?: 'settled' | 'connected';\n      } = {},\n  ) {\n    super();\n    this.when = when;\n  }\n\n  format(config?: ComponentStypFormatConfig & StypDomFormatConfig): StypFormat {\n    return stypDomFormat(this.config(config));\n  }\n\n  /**\n   * Builds configuration of DOM style production format.\n   *\n   * This method is called by {@link format} one.\n   *\n   * @param config - Original component style production format configuration.\n   *\n   * @returns Configuration of DOM style production format.\n   */\n  config(\n      config?: ComponentStypFormatConfig & StypDomFormatConfig,\n  ): StypDomFormatConfig {\n    return componentStypDomFormatConfig(this, config, { when: this.when });\n  }\n\n}\n","import { StypRule, StypRules } from '@frontmeans/style-producer';\nimport { ComponentClass, ComponentProperty, ComponentPropertyDecorator } from '@wesib/wesib';\nimport { ComponentStypFormat, ComponentStypFormatConfig } from './component-styp-format';\n\n/**\n * A decorator of component property returning CSS rules to produce.\n *\n * Decorated property value should either contain a CSS rules source of type `StypRules.Source` or be a method\n * returning it.\n *\n * Produces CSS using {@link ComponentStypFormat component style production format}.\n *\n * Depends on [@frontmeans/style-producer].\n *\n * [@frontmeans/style-producer]: https://www.npmjs.com/package/@frontmeans/style-producer\n *\n * @typeParam T - A type of decorated component class.\n * @param config - Non-mandatory component style production format config.\n *\n * @returns Component property decorator.\n */\nexport function ProduceStyle<T extends ComponentClass>(\n    config?: ComponentStypFormatConfig,\n): ComponentPropertyDecorator<\n    | StypRules.Source\n    | (() => StypRule | StypRules | Promise<StypRule | StypRules>),\n    T> {\n  return ComponentProperty(({ get }) => ({\n    componentDef: {\n      define(defContext) {\n        defContext.whenComponent(context => {\n          context.whenReady(({ component }) => {\n\n            const value = get(component);\n            const source: StypRules.Source = typeof value === 'function' ? value.bind(component) : value;\n            const format = context.get(ComponentStypFormat);\n\n            format.produce(source, config);\n          });\n        });\n      },\n    },\n  }));\n}\n","import { produceStyle } from '@frontmeans/style-producer';\nimport { FeatureDef, FeatureDef__symbol } from '@wesib/wesib';\nimport { ComponentStyleProducer } from './component-style-producer';\n\n/**\n * @internal\n */\nconst StyleProducerSupport__feature: FeatureDef = {\n  setup(setup) {\n    setup.provide({ a: ComponentStyleProducer, is: produceStyle });\n  },\n};\n\n/**\n * Style producer support feature.\n *\n * This feature enables default CSS renderers.\n *\n * It is _not_ enabled automatically by {@link ProduceStyle @ProduceStyle} decorator.\n *\n * Depends on [@frontmeans/style-producer].\n *\n * [@frontmeans/style-producer]: https://www.npmjs.com/package/@frontmeans/style-producer\n */\nexport class StyleProducerSupport {\n\n  static get [FeatureDef__symbol](): FeatureDef {\n    return StyleProducerSupport__feature;\n  }\n\n}\n","import { stypRules, StypRules } from '@frontmeans/style-producer';\nimport { ContextRef, ContextValueSlot, IterativeContextKey } from '@proc7ts/context-values';\nimport { itsEach } from '@proc7ts/push-iterator';\nimport { Theme } from './theme';\n\n/**\n * Theme style provides part of the theme styling information.\n *\n * Theme style(s) can be provided in bootstrap context. They are applied to the theme at most once, when requested\n * by calling {@link Theme.style} method.\n *\n * Theme style is either a function, or an extension of another theme style.\n */\nexport type ThemeStyle = ThemeStyle.Provider | ThemeStyle.Extension;\n\nexport namespace ThemeStyle {\n\n  /**\n   * Theme style provider function.\n   *\n   * This function is called at most once per theme to apply styles to the latter. E.g. by declaring CSS rules.\n   *\n   * This function is used as an identifier of particular style and can be extended using {@link ThemeStyle.Extension}.\n   *\n   * It is not absolutely necessary to register style provider. It will be applied on request anyway.\n   *\n   * @param theme - A theme to apply styling to.\n   *\n   * @returns Dynamically updated CSS rule set containing the applied styling.\n   */\n  export type Provider = (this: void, theme: Theme) => StypRules;\n\n  /**\n   * Theme style extension.\n   *\n   * An extension should be registered in bootstrap context in order to be applied.\n   */\n  export interface Extension {\n\n    /**\n     * A theme style provider to extend.\n     */\n    readonly style: ThemeStyle.Provider;\n\n    /**\n     * Extends the theme style.\n     *\n     * This method is called at most once per theme to apply styles to the latter. E.g. by declaring CSS rules.\n     *\n     * It will be called after the style provider it extends.\n     *\n     * @param theme - A theme to apply styling to.\n     *\n     * @returns Dynamically updated CSS rule set containing the applied styling.\n     */\n    provide(theme: Theme): StypRules;\n\n  }\n\n  /**\n   * A function obtaining combined style provider. I.e. the one that applies the style along with all extensions.\n   *\n   * @param A - provider of theme style to apply.\n   *\n   * @returns A combined theme style provider.\n   */\n  export type ById = (this: void, style: ThemeStyle.Provider) => ThemeStyle.Provider;\n\n}\n\n/**\n * @internal\n */\nclass ThemeStyleKey extends IterativeContextKey<ThemeStyle.ById, ThemeStyle> {\n\n  constructor() {\n    super('theme-style');\n  }\n\n  grow(\n      slot: ContextValueSlot<ThemeStyle.ById, ThemeStyle, Iterable<ThemeStyle>>,\n  ): void {\n\n    const providers = new Map<ThemeStyle.Provider, [ThemeStyle.Provider, boolean]>();\n\n    itsEach(\n        slot.seed,\n        style => {\n\n          let key: ThemeStyle.Provider;\n          let provider: ThemeStyle.Provider;\n          let isId: boolean;\n\n          if (typeof style === 'function') {\n            key = provider = style;\n            isId = true;\n          } else {\n            key = style.style;\n            provider = style.provide.bind(style);\n            isId = false;\n          }\n\n          const prev = providers.get(key);\n\n          if (!prev) {\n            providers.set(key, [provider, isId]);\n          } else {\n\n            const [prevProvider, hasId] = prev;\n\n            providers.set(\n                key,\n                [\n                  isId ? combineStyles(provider, prevProvider) : combineStyles(prevProvider, provider),\n                  isId || hasId,\n                ],\n            );\n          }\n        },\n    );\n\n    if (providers.size || !slot.hasFallback) {\n      slot.insert(byId);\n    }\n\n    function byId(id: ThemeStyle.Provider): ThemeStyle.Provider {\n\n      const existing = providers.get(id);\n\n      if (!existing) {\n        return id;\n      }\n\n      const [provider, hasId] = existing;\n\n      return hasId ? provider : combineStyles(id, provider);\n    }\n  }\n\n}\n\n/**\n * A key of bootstrap context value containing theme styles.\n */\nexport const ThemeStyle: ContextRef<ThemeStyle.ById, ThemeStyle> = (/*#__PURE__*/ new ThemeStyleKey());\n\n/**\n * @internal\n */\nfunction combineStyles(first: ThemeStyle.Provider, second: ThemeStyle.Provider): ThemeStyle.Provider {\n  return theme => stypRules(first(theme), second(theme));\n}\n","import {\n  lazyStypRules,\n  RefStypRule,\n  StypProperties,\n  stypRoot,\n  StypRule,\n  StypRuleRef,\n  StypRules,\n} from '@frontmeans/style-producer';\nimport { ContextKey, ContextKey__symbol, SingleContextKey } from '@proc7ts/context-values';\nimport { bootstrapDefault } from '@wesib/wesib';\nimport { ThemeStyle } from './theme-style';\n\nexport interface ThemeFactory {\n\n  newTheme(): Theme;\n\n}\n\n/**\n * @internal\n */\nconst Theme__key = (/*#__PURE__*/ new SingleContextKey<Theme>(\n    'theme',\n    {\n      byDefault: bootstrapDefault(context => new Theme$(context.get(ThemeStyle))),\n    },\n));\n\n/**\n * A hierarchy of CSS rules within single root.\n *\n * A component may use it to extract styling information.\n *\n * Current theme is available in bootstrap, definition, or component context. By default, only one theme is declared\n * per bootstrap. But this can be overridden.\n */\nexport abstract class Theme {\n\n  /**\n   * A key of bootstrap, definition, or component context value containing current theme instance.\n   */\n  static get [ContextKey__symbol](): ContextKey<Theme> {\n    return Theme__key;\n  }\n\n  /**\n   * Root CSS rule.\n   *\n   * All theme styling is represented as rules within this root.\n   */\n  abstract readonly root: StypRule;\n\n  /**\n   * Obtains CSS rule reference by its `referrer`.\n   *\n   * This is a helper method that resolves the given `referrer` against the `root` CSS rule of this theme.\n   *\n   * @param referrer - Target CSS rule referrer.\n   *\n   * @returns CSS rule reference.\n   */\n  ref<T extends StypProperties<T>>(referrer: RefStypRule<T>): StypRuleRef<T> {\n    return referrer(this.root);\n  }\n\n  /**\n   * Obtains a styling for the given theme styles.\n   *\n   * This method requests the registered {@link ThemeStyle theme styles} for CSS rules they provide.\n   * If some of the styles are not registered then uses the given style as provider.\n   *\n   * @param styles - The styles to obtain styling information for.\n   *\n   * @returns Dynamically updated CSS rule set containing the requested styling.\n   */\n  abstract style(...styles: ThemeStyle.Provider[]): StypRules;\n\n}\n\n/**\n * @internal\n */\nclass Theme$ extends Theme {\n\n  readonly root: StypRule = stypRoot();\n  private readonly _rules = new Map<ThemeStyle.Provider, StypRules>();\n\n  constructor(private readonly _styles: ThemeStyle.ById) {\n    super();\n  }\n\n  style(...styles: ThemeStyle.Provider[]): StypRules {\n\n    const theme = this;\n\n    return lazyStypRules(...styles.reduce<StypRules[]>(addStyleRules, []));\n\n    function addStyleRules(target: StypRules[], style: ThemeStyle.Provider): StypRules[] {\n\n      const existing = theme._rules.get(style);\n\n      if (existing) {\n        target.push(existing);\n      } else {\n\n        const constructed = theme._styles(style)(theme);\n\n        theme._rules.set(style, constructed);\n        target.push(constructed);\n      }\n\n      return target;\n    }\n  }\n\n}\n","import { NamespaceDef } from '@frontmeans/namespace-aliaser';\n\nexport const Examples__NS = new NamespaceDef(\n    'https://wesib.github.io/examples',\n    'bex',\n    'wesib-examples',\n);\n","import { RefStypRule, StypColor, StypLength, StypLengthPt, StypProperties, StypRGB } from '@frontmeans/style-producer';\n\nexport interface ThemeSettings {\n  $color: StypColor;\n  $bgColor: StypColor;\n  $fontFace: string;\n  $fontSize: StypLengthPt;\n  $lineHeight: number;\n  $fontWeight: string;\n  $linkFontWeight: string;\n  $layoutBreakpoint: StypLength;\n}\n\nexport const ThemeSettings: RefStypRule<ThemeSettings> = RefStypRule.by(\n    { $: 'settings' },\n    {\n      $color: new StypRGB({ r: 161, g: 185, b: 142 }),\n      $bgColor: new StypRGB({ r: 40, g: 43, b: 36 }),\n      $fontFace: `'Exo 2', sans-serif`,\n      $fontSize: StypLengthPt.of(1, 'em'),\n      $lineHeight: 1.2,\n      $fontWeight: '400',\n      $linkFontWeight: '600',\n      $layoutBreakpoint: StypLength.of(576, 'px'),\n    },\n);\n\nexport function mediaStyle({ $layoutBreakpoint }: ThemeSettings): StypProperties {\n  return {\n    '@media:sm': `(max-width: ${$layoutBreakpoint})`,\n  };\n}\n","import { StypProperties, stypRules, StypRules } from '@frontmeans/style-producer';\nimport { mapAfter } from '@proc7ts/fun-events';\nimport { Theme } from '@wesib/generic/styp';\nimport { ThemeSettings } from './theme-settings';\n\nexport function LinkStyle(theme: Theme): StypRules {\n\n  const settings = theme.ref(ThemeSettings).read;\n  const { root: { rules } } = theme;\n\n  return stypRules(\n      rules.add({ e: 'a' }, settings.do(mapAfter(linkStyle))),\n      rules.add({ e: 'a', s: ':visited' }, settings.do(mapAfter(linkStyle))),\n      rules.add({ e: 'a', s: ':hover' }, { textDecoration: 'underline' }),\n      rules.add({ e: 'a', s: ':active' }, { textDecoration: 'underline dotted' }),\n      rules.add({ e: 'a', s: ':focus' }, { textDecoration: 'underline dotted' }),\n  );\n}\n\nfunction linkStyle(\n    {\n      $color,\n      $linkFontWeight,\n    }: ThemeSettings,\n): StypProperties {\n  return {\n    color: $color,\n    fontWeight: $linkFontWeight,\n    textDecoration: 'none',\n  };\n}\n","import { StypProperties, stypRules, StypRules } from '@frontmeans/style-producer';\nimport { mapAfter } from '@proc7ts/fun-events';\nimport { Theme } from '@wesib/generic/styp';\nimport { LinkStyle } from './link.style';\nimport { mediaStyle, ThemeSettings } from './theme-settings';\n\nexport function DefaultStyle(theme: Theme): StypRules {\n\n  const settings = theme.ref(ThemeSettings).read;\n\n  return stypRules(\n      theme.root\n          .add(settings.do(mapAfter(defaultStyle)))\n          .add(settings.do(mapAfter(mediaStyle))),\n      theme.style(LinkStyle),\n  );\n}\n\nfunction defaultStyle(\n    {\n      $color,\n      $fontFace,\n      $fontSize,\n      $lineHeight,\n      $fontWeight,\n    }: ThemeSettings,\n): StypProperties {\n  return {\n    color: $color,\n    font: `normal ${$fontWeight} ${$fontSize}/${$lineHeight} ${$fontFace}`,\n  };\n}\n","import { StypProperties, stypRules, StypRules } from '@frontmeans/style-producer';\nimport { mapAfter } from '@proc7ts/fun-events';\nimport { Theme } from '@wesib/generic/styp';\nimport { DefaultStyle } from './default.style';\nimport { ThemeSettings } from './theme-settings';\n\nexport function BodyStyle(theme: Theme): StypRules {\n\n  const settings = theme.ref(ThemeSettings).read;\n  const { root: { rules } } = theme;\n\n  return stypRules(\n      rules.add(\n          { e: 'html' },\n          {\n            height: '100%',\n            margin: 0,\n            padding: 0,\n          },\n      ),\n      rules.add(\n          { e: 'body' },\n          settings.do(mapAfter(bodyStyle)),\n      ),\n      theme.style(DefaultStyle),\n  );\n}\n\nfunction bodyStyle(\n    {\n      $bgColor,\n    }: ThemeSettings,\n): StypProperties {\n  return {\n    backgroundColor: $bgColor,\n    height: '100%',\n    margin: 0,\n    padding: 0,\n  };\n}\n","import { RefStypRule, StypColor, StypLength, StypLengthPt, StypMapper, StypRuleRefs } from '@frontmeans/style-producer';\nimport { mapAfter } from '@proc7ts/fun-events';\nimport { ThemeSettings } from '../theme';\n\nexport interface FormThemeSettings {\n  $color: StypColor;\n  $bgColor: StypColor;\n  $roBgColor: StypColor;\n  $fontFace: string;\n  $fontSize: StypLengthPt;\n  $errorFontSize: StypLengthPt;\n  $lineHeight: number;\n  $fontWeight: string;\n  $borderColor: StypColor;\n  $marginV: StypLengthPt;\n  $marginH: StypLengthPt;\n  $paddingV: StypLengthPt;\n  $paddingH: StypLengthPt;\n  $borderW: StypLength;\n}\n\nexport const FormThemeSettings: RefStypRule<FormThemeSettings> = RefStypRule.by(\n    { $: 'settings:form' },\n    root => StypRuleRefs.by<{ global: ThemeSettings }>(\n        {\n          global: ThemeSettings,\n        },\n        root,\n    ).read.do(mapAfter(formMappings)),\n);\n\nfunction formMappings(\n    {\n      global: {\n        $color,\n        $bgColor,\n        $fontFace,\n        $fontSize,\n        $lineHeight,\n        $fontWeight,\n      },\n    }: {\n      global: ThemeSettings;\n    },\n): StypMapper.Mappings<FormThemeSettings> {\n  return {\n    $color,\n    $bgColor: $bgColor.hsl.set(({ l }) => ({ l: l * 0.8 })),\n    $roBgColor: $bgColor.hsl.set(({ l }) => ({ l: l * 0.94 })),\n    $fontFace,\n    $fontSize,\n    $errorFontSize: $fontSize.mul(0.8),\n    $lineHeight,\n    $fontWeight,\n    $borderColor: $bgColor,\n    $marginV: $fontSize.div(4),\n    $marginH: $fontSize.div(4),\n    $paddingV: $fontSize.div(2),\n    $paddingH: $fontSize,\n    $borderW: StypLength.of(1, 'px'),\n  };\n}\n","import { InCssClasses, inCssError, inCssInfo, InputAspects__NS, InStyledElement } from '@frontmeans/input-aspects';\nimport { QualifiedName } from '@frontmeans/namespace-aliaser';\nimport { StypLengthPt, stypRules, StypRules } from '@frontmeans/style-producer';\nimport { AfterEvent, mapAfter, mapAfter_, trackValue, translateAfter_ } from '@proc7ts/fun-events';\nimport { adjacentToField, Field, FieldShare, SharedField } from '@wesib/generic/forms';\nimport { ProduceStyle, Theme } from '@wesib/generic/styp';\nimport { Attribute, Component, ComponentContext } from '@wesib/wesib';\nimport { Examples__NS } from '../examples.ns';\nimport { FormThemeSettings } from './form.theme-settings';\n\nclass FieldErrorShare extends FieldShare {\n\n  constructor() {\n    super('field-error');\n  }\n\n}\n\n@Component(['field-error', Examples__NS])\nexport class FieldErrorComponent {\n\n  private readonly _code = trackValue<string | null>();\n\n  @SharedField({\n    share: {\n      share: FieldErrorShare,\n      local: true,\n    },\n    name: '',\n  })\n  readonly indicator: Field<void>;\n\n  constructor(private readonly _context: ComponentContext) {\n\n    const when: AfterEvent<string[]> = this._code.read\n        .do(\n            translateAfter_((send, code) => code ? send(...code.trim().split(/\\s+/)) : send()),\n        );\n\n    this.indicator = adjacentToField<void>(builder => when.do(\n        mapAfter_((...when) => ({\n          control: builder.adjusted.control\n              .convert<void>(InStyledElement.to(_context.element))\n              .setup(InCssClasses, css => css.add(inCssInfo()))\n              .setup(InCssClasses, css => css.add(inCssError({ when }))),\n        })),\n    ));\n  }\n\n  @Attribute({ updateState: false })\n  get code(): string | null | undefined {\n    return this._code.it;\n  }\n\n  set code(code: string | null | undefined) {\n    this._code.it = code;\n  }\n\n  @ProduceStyle()\n  style(): StypRules {\n    return this._context.get(Theme).style(InErrorStyle);\n  }\n\n}\n\nconst InError__qualifier = 'bex:in-error';\nconst hasError__cssClass: QualifiedName = ['has-error', InputAspects__NS];\n\nfunction InErrorStyle(theme: Theme): StypRules {\n\n  const settings = theme.ref(FormThemeSettings).read;\n  const { root: { rules } } = theme;\n  const borderW = StypLengthPt.of(4, 'px');\n\n  return stypRules(\n      rules.add(\n          { u: [':', 'host'], $: InError__qualifier },\n          settings.do(mapAfter(({ $color, $errorFontSize }) => ({\n            display: 'none',\n            fontSize: $errorFontSize,\n            padding: $errorFontSize.div(2),\n            borderLeft: `${borderW} dotted ${$color}`,\n            paddingLeft: $errorFontSize.sub(borderW),\n          }))),\n      ),\n      rules.add(\n          {\n            u: [\n              ':',\n              'host',\n              {\n                c: [hasError__cssClass, ['touched', InputAspects__NS]],\n                u: [':', 'not', { c: ['has-focus', InputAspects__NS] }],\n              },\n            ],\n            $: InError__qualifier,\n          },\n          {\n            display: 'block',\n          },\n      ),\n      rules.add(\n          {\n            u: [\n              ':',\n              'host',\n              {\n                c: hasError__cssClass,\n                u: [\n                  [':', 'not', { u: ['code', '~=', 'missing'] }],\n                  [':', 'not', { u: ['code', '~=', 'incomplete'] }],\n                ],\n              },\n            ],\n            $: InError__qualifier,\n          },\n          {\n            display: 'block',\n          },\n      ),\n  );\n}\n","import { FormCssPreset, FormModePreset } from '@wesib/generic/forms';\nimport { Feature } from '@wesib/wesib';\nimport { FieldErrorComponent } from './field-error.component';\n\n@Feature({\n  needs: [\n    FormModePreset,\n    FormCssPreset,\n    FieldErrorComponent,\n  ],\n})\nexport class FormsSupport {\n}\n","import { InControl, InMode, inModeByValidity, InParents } from '@frontmeans/input-aspects';\nimport { consumeEvents } from '@proc7ts/fun-events';\nimport { itsEach } from '@proc7ts/push-iterator';\nimport { Supply } from '@proc7ts/supply';\nimport { Field } from '../field';\nimport { Form } from '../form';\nimport { FormScope } from '../form-scope';\nimport { ScopedFormConfig } from '../scoped-form-config';\nimport { AbstractFormPreset } from './abstract-form-preset';\n\n/**\n * Form preset that enables default form and field mode management.\n *\n * - Makes form mode depend on its validity (`inModeByValidity()`).\n * - Derives form field's mode from form element's one.\n */\nexport class FormModePreset extends AbstractFormPreset {\n\n  /**\n   * @internal\n   */\n  private readonly _byValidity: (control: InControl<any>) => Supply;\n\n  /**\n   * @internal\n   */\n  private readonly _byForm: (control: InControl<any>) => Supply;\n\n  /**\n   * Constructs customized form mode preset.\n   *\n   * @param options - Custom form mode preset options.\n   */\n  constructor(options: FormModePreset.Options = {}) {\n    super();\n    this._byValidity = ScopedFormConfig.createSetup(\n        options.byValidity,\n        opts => {\n\n          const src = inModeByValidity(opts);\n\n          return control => control.aspect(InMode).derive(src);\n        },\n    );\n    this._byForm = FormScope.createSetup(\n        options.byForm,\n        control => control.aspect(InParents).read.do(\n            consumeEvents(parents => {\n\n              const supply = new Supply();\n\n              itsEach(\n                  parents,\n                  ({ parent }) => {\n\n                    const form = parent.aspect(Form);\n\n                    if (form) {\n                      control.aspect(InMode).derive(form.element.aspect(InMode)).as(supply);\n                    }\n                  },\n              );\n\n              return supply;\n            }),\n        ),\n    );\n  }\n\n  setupField<TValue, TSharer extends object>(\n      builder: Field.Builder<TValue, TSharer>,\n  ): void {\n    builder.control.setup(this._byForm);\n  }\n\n  setupForm<TModel, TElt extends HTMLElement, TSharer extends object>(\n      builder: Form.Builder<TModel, TElt, TSharer>,\n  ): void {\n    builder.control.setup(this._byValidity);\n  }\n\n}\n\nexport namespace FormModePreset {\n\n  /**\n   * Form mode preset options.\n   */\n  export interface Options {\n\n    /**\n     * Whether to build a form mode by its validity options.\n     *\n     * `false` to disable.\n     */\n    readonly byValidity?: ScopedFormConfig<Parameters<typeof inModeByValidity>[0]>;\n\n    /**\n     * Whether form field mode should be derived from form element's one.\n     *\n     * `true` by default. `false` to disable.\n     */\n    readonly byForm?: FormScope;\n\n  }\n\n}\n","import { mapAfter } from '@proc7ts/fun-events';\nimport { InValidation } from '../../validation';\nimport { InMode } from '../mode.aspect';\n\n/**\n * Creates an {@link InMode input mode} source depending on control's {@link InValidation validity}.\n *\n * This can be applied to form control to prevent submission of invalid input.\n *\n * @category Aspect\n * @param invalid - Input mode to set when the input is invalid. `-on` (not submittable) by default. This\n * should not be set to disabled, as the latter would make it impossible to fix input errors.\n * @param ignore - Ignored message codes. If all validation messages have this code the form is not marked as invalid.\n * `submit` by default, as this code intended to be server-side.\n *\n * @returns A source of input mode.\n */\nexport function inModeByValidity(\n    {\n      invalid = '-on',\n      ignore = 'submit',\n    }: {\n      invalid?: InMode.Value;\n      ignore?: string | string[];\n    } = {},\n): InMode.Source {\n  return control => control.aspect(InValidation).read.do(mapAfter(\n      validity => validity.hasBut(...(typeof ignore === 'string' ? [ignore] : ignore)) ? invalid : 'on',\n  ));\n}\n","import { InControl, InCssClasses, inCssError, inCssInfo } from '@frontmeans/input-aspects';\nimport { Supply } from '@proc7ts/supply';\nimport { Field } from '../field';\nimport { Form } from '../form';\nimport { ScopedFormConfig } from '../scoped-form-config';\nimport { AbstractFormPreset } from './abstract-form-preset';\n\n/**\n * Form preset that enables CSS class indication of form and field states.\n *\n * - Enables CSS info classes (`inCssInfo()`) for forms and fields.\n * - Enables error indication (`inCssError()`) for fields.\n */\nexport class FormCssPreset extends AbstractFormPreset {\n\n  /**\n   * @internal\n   */\n  private readonly _info: (control: InControl<any>) => Supply;\n\n  /**\n   * @internal\n   */\n  private readonly _error: (control: InControl<any>) => Supply;\n\n  /**\n   * Constructs customized form CSS preset.\n   *\n   * @param options - Custom form CSS preset options.\n   */\n  constructor(options: FormCssPreset.Options = {}) {\n    super();\n    this._info = ScopedFormConfig.createSetup(\n        options.info,\n        opts => {\n\n          const src = inCssInfo(opts);\n\n          return control => control.aspect(InCssClasses).add(src);\n        },\n    );\n    this._error = ScopedFormConfig.createSetup(\n        options.error,\n        opts => {\n\n          const src = inCssError(opts);\n\n          return control => control.aspect(InCssClasses).add(src);\n        },\n    );\n  }\n\n  setupField<TValue, TSharer extends object>(\n      builder: Field.Builder<TValue, TSharer>,\n  ): void {\n    builder.control.setup(this._info).setup(this._error);\n  }\n\n  setupForm<TModel, TElt extends HTMLElement, TSharer extends object>(\n      builder: Form.Builder<TModel, TElt, TSharer>,\n  ): void {\n    builder.control.setup(this._info);\n    builder.element.setup(\n        InCssClasses,\n        (css, element) => css.add(\n            element.aspect(Form)!.control.aspect(InCssClasses),\n        ),\n    );\n  }\n\n}\n\nexport namespace FormCssPreset {\n\n  /**\n   * Form CSS preset options.\n   */\n  export interface Options {\n\n    /**\n     * CSS info options.\n     *\n     * `false` to disable.\n     */\n    readonly info?: ScopedFormConfig<Parameters<typeof inCssInfo>[0]>;\n\n    /**\n     * CSS error indication options.\n     *\n     * `false` to disable.\n     */\n    readonly error?: ScopedFormConfig<Parameters<typeof inCssError>[0]>;\n\n  }\n\n}\n","import { StypProperties } from '@frontmeans/style-producer';\nimport { IncludePage } from '@wesib/generic';\nimport { Component } from '@wesib/wesib';\nimport { Examples__NS } from '../examples.ns';\nimport { ThemeSettings } from '../theme';\n\n@Component(\n    ['main', Examples__NS],\n    IncludePage({\n      onResponse({ response, range }) {\n        if (!response.ok) {\n          range.deleteContents();\n          if (response.ok == null) {\n            range.insertNode(document.createTextNode('Loading...'));\n          } else {\n            range.insertNode(document.createTextNode(`Error. ${response.error}`));\n          }\n        }\n      },\n    }),\n)\nexport class MainComponent {\n}\n\nexport function mainStyle(\n    {\n      $fontSize,\n    }: ThemeSettings,\n): StypProperties {\n  return {\n    flex: '1 1 auto',\n    padding: 0,\n    margin: `0 0 0 ${$fontSize.div(2)}`,\n  };\n}\n","import { StypColor, StypLengthPt, StypProperties, stypRules, StypRules } from '@frontmeans/style-producer';\nimport { mapAfter } from '@proc7ts/fun-events';\nimport { mapIndexed } from '@proc7ts/push-iterator';\nimport { navAnchor, NavMenu } from '@wesib/generic';\nimport { ProduceStyle, Theme } from '@wesib/generic/styp';\nimport { Component, ComponentContext, Wesib__NS } from '@wesib/wesib';\nimport { Examples__NS } from '../examples.ns';\nimport { ThemeSettings } from '../theme';\n\n@Component(['nav', Examples__NS])\nexport class NavComponent {\n\n  private readonly _theme: Theme;\n\n  constructor(context: ComponentContext) {\n    this._theme = context.get(Theme);\n    new NavMenu(({ element }: { element: Element }) => mapIndexed(\n        element.querySelectorAll('a'),\n        el => navAnchor(el),\n    )).bindTo(context);\n  }\n\n  @ProduceStyle()\n  style(): StypRules {\n    return this._theme.style(NavStyle);\n  }\n\n}\n\nconst Nav__qualifier = 'bex:nav';\n\nfunction NavStyle(theme: Theme): StypRules {\n\n  const settings = theme.ref(ThemeSettings).read;\n  const { root: { rules } } = theme;\n\n  return stypRules(\n      rules.add(\n          { u: [':', 'host'], $: Nav__qualifier },\n          settings.do(mapAfter(navStyle)),\n      ),\n      rules.add(\n          { u: [':', 'host'], $: Nav__qualifier },\n          settings.do(mapAfter(sts => ({\n            flex: '0 1 200px',\n            height: '100%',\n            background: navLinkBackground(sts),\n          }))),\n      ),\n      rules.add(\n          { u: [':', 'host'], $: [Nav__qualifier, '@media:sm'] },\n          {\n            flex: '0 1 100%',\n          },\n      ),\n      rules.add(\n          [{ u: [':', 'host'], $: Nav__qualifier }, { e: 'a', $: Nav__qualifier }],\n          settings.do(mapAfter(navLinkStyle)),\n      ),\n      rules.add(\n          [{ u: [':', 'host'], $: Nav__qualifier }, { e: 'a', c: ['active', Wesib__NS], $: Nav__qualifier }],\n          settings.do(mapAfter(activeNavLinkStyle)),\n      ),\n  );\n}\n\nfunction navStyle(\n    {\n      $fontSize,\n    }: ThemeSettings,\n): StypProperties {\n  return {\n    padding: 0,\n    margin: `0 ${$fontSize.div(2)} 0 0`,\n  };\n}\n\nexport function navLinkBackground({ $bgColor }: ThemeSettings): StypColor {\n  return $bgColor.hsl.set(({ l }) => ({ l: l * 0.8 }));\n}\n\nfunction navLinkStyle(\n    settings: ThemeSettings,\n): StypProperties {\n\n  const { $fontSize } = settings;\n\n  return {\n    display: 'block',\n    margin: 0,\n    padding: `${$fontSize.div(2)} ${$fontSize}`,\n    border: 0,\n    outline: 0,\n    background: navLinkBackground(settings),\n  };\n}\n\nfunction activeNavLinkStyle(\n    {\n      $fontSize,\n      $color,\n      $bgColor,\n    }: ThemeSettings,\n): StypProperties {\n\n  const borderW = StypLengthPt.of(4, 'px');\n\n  return {\n    background: $bgColor,\n    borderLeft: `${borderW} solid ${$color}`,\n    paddingLeft: $fontSize.sub(borderW),\n  };\n}\n","import { makePushIterable } from '../base';\nimport { iterateOverIndexed } from '../base/iterate-over-indexed.impl';\nimport type { IndexedItemList } from '../construction';\nimport type { PushIterable } from '../push-iterable';\n\n/**\n * Creates a {@link PushIterable | push iterable} with the results of calling a provided function on every item of the\n * given indexed list.\n *\n * @typeParam TSrc - A type of indexed list items.\n * @typeParam TConv - A type of converted elements.\n * @param indexed - A source indexed items list.\n * @param convert - A function that produces an element of new iterable, taking list item as the only parameter.\n *\n * @returns New push iterable of transformed elements.\n */\nexport function mapIndexed<TSrc, TConv>(\n    indexed: IndexedItemList<TSrc>,\n    convert: (this: void, element: TSrc) => TConv,\n): PushIterable<TConv> {\n  return makePushIterable(iterateOverIndexed(\n      indexed,\n      (list, index) => convert(list.item(index) as TSrc /* The index is always valid */),\n  ));\n}\n","import { QualifiedName } from '@frontmeans/namespace-aliaser';\nimport { RenderDef } from '@wesib/wesib';\nimport { navElement } from './nav-element';\nimport { NavLink } from './nav-link';\n\ntype GenericElement = Element;\n\nexport namespace NavAnchor {\n\n  /**\n   * Anchor element.\n   */\n  export interface Element extends GenericElement {\n\n    /**\n     * Hyper-reference of this anchor.\n     */\n    readonly href: string;\n\n  }\n\n  /**\n   * Navigation anchor construction options.\n   */\n  export interface Options {\n\n    /**\n     * Type or types of events to handle.\n     *\n     * `click` by default.\n     */\n    readonly event?: string | readonly string[];\n\n    /**\n     * Qualified name of CSS class to mark the active anchor element with.\n     *\n     * The `active` class in Wesib namespace is used by default.\n     */\n    readonly active?: QualifiedName;\n\n    /**\n     * Rendering definition options to pass to nav links render scheduler.\n     */\n    readonly render?: RenderDef.Options;\n\n  }\n\n}\n\n/**\n * Creates navigation link for the given anchor element.\n *\n * @param element - Either an anchor element, or a function returning one by the given navigation link owner.\n * @param options - Custom anchor options.\n *\n * @returns Navigation link provider.\n */\nexport function navAnchor(\n    element:\n        | NavAnchor.Element\n        | ((this: void, owner: NavLink.Owner) => NavAnchor.Element),\n    options?: NavAnchor.Options,\n): (this: void, owner: NavLink.Owner) => NavLink;\n\n/**\n * Optionally creates navigation link for the given anchor element.\n *\n * @param element - Either an anchor element, or a function returning one by the given navigation link owner,\n * or nothing.\n * @param options - Custom anchor options.\n *\n * @returns Navigation link provider.\n */\nexport function navAnchor(\n    element:\n        | NavAnchor.Element\n        | ((this: void, owner: NavLink.Owner) => NavAnchor.Element | null | undefined)\n        | null\n        | undefined,\n    options?: NavAnchor.Options,\n): NavLink.Provider;\n\nexport function navAnchor(\n    element:\n        | NavAnchor.Element\n        | ((this: void, owner: NavLink.Owner) => NavAnchor.Element | null | undefined)\n        | null\n        | undefined,\n    options: NavAnchor.Options = {},\n): NavLink.Provider {\n  return navElement(\n      element,\n      {\n        ...options,\n        href(element) {\n          return element.href;\n        },\n      },\n  );\n}\n","import { QualifiedName } from '@frontmeans/namespace-aliaser';\nimport { stypRules, StypRules } from '@frontmeans/style-producer';\nimport { mapAfter } from '@proc7ts/fun-events';\nimport { ProduceStyle, Theme } from '@wesib/generic/styp';\nimport { BootstrapContext, Component, ComponentContext } from '@wesib/wesib';\nimport { Examples__NS } from '../examples.ns';\nimport { mediaStyle, ThemeSettings } from '../theme';\nimport { MainComponent, mainStyle } from './main.component';\nimport { NavComponent } from './nav.component';\n\n@Component({\n  name: ['container', Examples__NS],\n  feature: {\n    needs: [\n      MainComponent,\n      NavComponent,\n    ],\n  },\n})\nexport class ContainerComponent {\n\n  constructor(private readonly _context: ComponentContext) {\n  }\n\n  @ProduceStyle()\n  async style(): Promise<StypRules> {\n\n    const { elementDef: { name: mainName } } = await this._context.get(BootstrapContext).whenDefined(MainComponent);\n\n    return this._context.get(Theme).style(ContainerStyle(mainName!));\n  }\n\n}\n\nconst Container__qualifier = 'bex:container';\n\nfunction ContainerStyle(mainName: QualifiedName): (theme: Theme) => StypRules {\n  return theme => {\n\n    const settings = theme.ref(ThemeSettings).read;\n    const { root: { rules } } = theme;\n\n    return stypRules(\n        rules.add(\n            { u: [':', 'host'], $: Container__qualifier },\n            {\n              height: '100%',\n              display: 'flex',\n              flexFlow: 'row wrap',\n              alignItems: 'stretch',\n              alignContent: 'flex-start',\n            },\n        ).add(\n            settings.do(mapAfter(mediaStyle)),\n        ),\n        rules.add(\n            { u: [':', 'host'], $: [Container__qualifier, '@media:sm'] },\n            {\n              height: 'auto',\n            },\n        ),\n        rules.add(\n            [{ u: [':', 'host'], $: Container__qualifier }, { e: mainName, $: Container__qualifier }],\n            settings.do(mapAfter(mainStyle)),\n        ),\n    );\n  };\n}\n","import { PageLoadSupport } from '@wesib/generic';\nimport { StyleProducerSupport } from '@wesib/generic/styp';\nimport { Feature } from '@wesib/wesib';\nimport { ContainerComponent } from './container.component';\n\n@Feature({\n  needs: [\n    ContainerComponent,\n    PageLoadSupport,\n    StyleProducerSupport,\n  ],\n})\nexport class LayoutSupportFeature {\n}\n","import { produceBasicStyle, stypDomFormat } from '@frontmeans/style-producer';\nimport { ComponentStypDomFormat, ComponentStypFormat, Theme } from '@wesib/generic/styp';\nimport { Feature } from '@wesib/wesib';\nimport { BodyStyle } from './body.style';\n\n@Feature({\n  setup(setup) {\n    setup.perComponent({ a: ComponentStypFormat, as: ComponentStypDomFormat });\n  },\n  init(context) {\n    context.whenReady(() => {\n      produceBasicStyle(context.get(Theme).style(BodyStyle), stypDomFormat());\n    });\n  },\n})\nexport class BodyStyleSupport {}\n\n","import { Feature } from '@wesib/wesib';\nimport { FormsSupport } from './forms/forms-support.feature';\nimport { LayoutSupportFeature } from './layout';\nimport { BodyStyleSupport } from './theme/body-style-support.feature';\n\n@Feature({\n  needs: [\n    BodyStyleSupport,\n    FormsSupport,\n    LayoutSupportFeature,\n  ],\n})\nexport class AppFeature {}\n","import { InputAspects__NS } from '@frontmeans/input-aspects';\nimport { mixStypColors, StypProperties, stypRules, StypRules } from '@frontmeans/style-producer';\nimport { mapAfter } from '@proc7ts/fun-events';\nimport { Theme } from '@wesib/generic/styp';\nimport { FormThemeSettings } from './form.theme-settings';\n\nexport function FormStyle(theme: Theme): StypRules {\n\n  const formSettings = theme.ref(FormThemeSettings).read;\n  const { root: { rules } } = theme;\n\n  return stypRules(\n      rules.add({ e: 'input' }, formSettings.do(mapAfter(inStyle))),\n      rules.add({ e: 'input', s: '[readonly]' }, formSettings.do(mapAfter(readonlyInStyle))),\n      rules.add({ e: 'input', s: '[disabled]' }, formSettings.do(mapAfter(readonlyInStyle))),\n      rules.add({ e: 'input', s: ':focus' }, formSettings.do(mapAfter(focusedInStyle))),\n      rules.add(\n          {\n            e: 'input',\n            c: [\n              ['invalid', InputAspects__NS],\n              ['touched', InputAspects__NS],\n            ],\n          },\n          formSettings.do(mapAfter(invalidInStyle)),\n      ),\n      rules.add(\n          {\n            e: 'input',\n            c: [\n              ['missing', InputAspects__NS],\n              ['touched', InputAspects__NS],\n            ],\n          },\n          {\n            outlineStyle: 'dotted',\n          },\n      ),\n      rules.add(\n          {\n            e: 'input',\n            c: [\n              ['incomplete', InputAspects__NS],\n              ['touched', InputAspects__NS],\n            ],\n          },\n          {\n            outlineStyle: 'dotted',\n          },\n      ),\n  );\n}\n\nexport function inStyle(\n    {\n      $color,\n      $fontFace,\n      $fontSize,\n      $lineHeight,\n      $fontWeight,\n      $marginV,\n      $marginH,\n      $paddingV,\n      $paddingH,\n      $bgColor,\n      $borderColor,\n      $borderW,\n    }: FormThemeSettings,\n): StypProperties {\n  return {\n    color: $color,\n    font: `normal ${$fontWeight} ${$fontSize}/${$lineHeight} ${$fontFace}`,\n    padding: `${$paddingV} ${$paddingH}`,\n    margin: `${$marginV} ${$marginH}`,\n    backgroundColor: $bgColor,\n    border: '0 none',\n    outline: `${$borderW} solid ${$borderColor}`,\n    boxShadow: 'inset 1px 1px 2px -2px black',\n    boxSizing: 'border-box',\n    width: '100%',\n  };\n}\n\nexport function readonlyInStyle(\n    {\n      $roBgColor,\n    }: FormThemeSettings,\n): StypProperties {\n  return {\n    backgroundColor: $roBgColor,\n  };\n}\n\nfunction focusedInStyle(\n    {\n      $color,\n      $borderColor,\n    }: FormThemeSettings,\n): StypProperties {\n  return {\n    outlineColor: mixStypColors($borderColor, $color, 0.5),\n  };\n}\n\nfunction invalidInStyle(\n    {\n      $color,\n      $borderW,\n      $borderColor,\n    }: FormThemeSettings,\n): StypProperties {\n  return {\n    outline: `${$borderW.mul(2)} dashed ${mixStypColors($borderColor, $color, 0.25)}`,\n  };\n}\n","import { bootstrapComponents } from '@wesib/wesib';\nimport { AppFeature } from './app.feature';\n\nexport * from './app.feature';\nexport * from './examples.ns';\nexport * from './forms';\nexport * from './theme';\n\nexport const examplesContext = bootstrapComponents(AppFeature);\n","import { newNamespaceAliaser } from '@frontmeans/namespace-aliaser';\nimport { ContextModule } from '@proc7ts/context-values/updatable';\nimport { AfterEvent, AfterEvent__symbol, onceOn, OnEvent, trackValue, valueOn, valueOn_ } from '@proc7ts/fun-events';\nimport { Class, valueProvider } from '@proc7ts/primitives';\nimport { SupplyPeer } from '@proc7ts/supply';\nimport { ComponentClass, DefinitionContext } from '../../component/definition';\nimport { FeatureDef, FeatureRef, FeatureStatus } from '../../feature';\nimport { FeatureModule } from '../../feature/loader';\nimport { BootstrapContext } from '../bootstrap-context';\nimport { DefaultNamespaceAliaser } from '../globals';\nimport { BootstrapContextRegistry } from '../impl';\nimport { whenDefined } from '../impl/when-defined.impl';\n\n/**\n * Bootstraps components.\n *\n * Both features and components can be passed as parameters to this function.\n *\n * @category Core\n * @param features - Features and components to enable.\n *\n * @returns Bootstrap context instance.\n */\nexport function bootstrapComponents(...features: Class[]): BootstrapContext {\n\n  const bootstrapContextRegistry = BootstrapContextRegistry.create();\n  const { bootstrapContext, complete } = initBootstrap(bootstrapContextRegistry);\n  const feature = features.length === 1 ? features[0] : bootstrapFeature(features);\n\n  bootstrapContext.load(feature)\n      .read\n      .do(\n          valueOn_(({ ready }) => ready),\n          onceOn,\n      )\n      .then(complete)\n      .catch(console.error);\n\n  return bootstrapContext;\n}\n\n/**\n * @internal\n */\nfunction bootstrapFeature(needs: Class[]): Class {\n  return FeatureDef.define(class BootstrapFeature {}, { needs });\n}\n\n/**\n * @internal\n */\nconst enum BootstrapStage {\n  Init,\n  Ready,\n}\n\n/**\n * @internal\n */\nfunction initBootstrap(\n    bootstrapContextRegistry: BootstrapContextRegistry,\n): {\n  bootstrapContext: BootstrapContext;\n  complete(): void;\n} {\n\n  const stage = trackValue<BootstrapStage>(BootstrapStage.Init);\n  const values = bootstrapContextRegistry.values;\n\n  class BootstrapContext$ extends BootstrapContext {\n\n    readonly whenReady: OnEvent<[BootstrapContext]>;\n    readonly get = values.get;\n\n    constructor() {\n      super();\n      this.whenReady = stage.read.do(\n          valueOn(bsStage => !!bsStage && this),\n          onceOn,\n      );\n      bootstrapContextRegistry.provide({ a: DefaultNamespaceAliaser, by: newNamespaceAliaser });\n      bootstrapContextRegistry.provide({ a: BootstrapContext, is: this });\n    }\n\n    whenDefined<T extends object>(componentType: ComponentClass<T>): OnEvent<[DefinitionContext<T>]> {\n      return whenDefined(this, componentType);\n    }\n\n    load(feature: Class, user?: SupplyPeer): FeatureRef {\n\n      const module = FeatureModule.of(feature);\n      const supply = bootstrapContextRegistry.provide(module);\n\n      if (user) {\n        supply.needs(user);\n      } else {\n        user = supply;\n      }\n\n      const use = this.get(module).use(user);\n      const read = FeatureRef$read(feature, use);\n\n      return {\n        read,\n        whenReady: read.do(\n            valueOn_(status => status.ready && status),\n            onceOn,\n        ),\n        [AfterEvent__symbol]: valueProvider(read),\n        supply,\n      };\n    }\n\n  }\n\n  const bootstrapContext = new BootstrapContext$();\n\n  return {\n    bootstrapContext,\n    complete(): void {\n      stage.it = BootstrapStage.Ready;\n    },\n  };\n}\n\nfunction FeatureRef$read(\n    feature: Class,\n    use: ContextModule.Use,\n): AfterEvent<[FeatureStatus]> {\n\n  const status = trackValue<FeatureStatus>({ feature, ready: false });\n\n  use.read(({ module, ready }) => {\n\n    const feature = (module as FeatureModule).feature;\n    const lastStatus = status.it;\n\n    if (!lastStatus || lastStatus.feature !== feature || lastStatus.ready !== ready) {\n      status.it = {\n        feature,\n        ready,\n      };\n    }\n  }).needs(use);\n  status.supply.needs(use);\n\n  return status.read;\n}\n"],"names":["arrayOfElements","value","Array","isArray","areTheSame","first","second","valueProvider","valuesProvider","values","lazyValue","provider","get","lazyValue$recurrent","TypeError","valueByRecipe","recipe","args","valueRecipe","arrayElementsAreEqual","elementsAreEqual","fromOrLength","to","start","end","undefined","Math","max","length","i","elementOrArray","source","array","from","setOfElements","elements","Set","extendSetOfElements","set","forEach","element","add","superClassOf","type","satisfying","prototype","Object","getPrototypeOf","superType","constructor","asis","countArgs","len","idx","mergeFunctions","merge","_f","s","apply","this","noop","isPresent","isDefined","PushIterator__symbol","Symbol","isPushIterable","iterable","iteratorOf","iterator","makePushIterable","iterate","[object Object]","PushIterable$iterator","pushIterated","accept","isOver","makePushIterator","forNext","over","PushIterator$dontIterate","PushIterator$iterator","next","PushIterator$next","result","done","PushIterator$noNext","_accept","emptyPushIterator","pushHead","iterateOverIndexed","indexed","elementOf","goOn","arrayElementOf","index","iterateOverArray","overArray","itsIterated","it","status","itsEach","action","itsElements$defaultConverter","itsElements","convert","pushedElements","push","pushedEmpty","isEmpty","_element","itsEvery","test","allMatch","itsFirst","pushedFirst","rawFirst","toPushIterator","res","rawIteratorPusher","itsHead","arrayHead","rawIterableHead","itsIterator","itsReduction","reducer","initialValue","reduced","overNone","overIterator","iterateOverRawIterator","overElementsOf","sources","src","srcTail","iterateOverSubElements","overOne","iterateOverOneValue","overKeys","Reflect","ownKeys","filterArray","iterateOverFilteredIndexed","filterIt","filterPusher","filterRawPusher","tail","flatMapArray","elementsOf","flatMapArray$defaultElementOf","subs","subsTail","flatMapIt","flatMapIt$defaultConverter","flatMapPusher","flatMapRawPusher","lastSrc","sourceTail","mapIt","mapPusher","mapRawPusher","valueIt","valueOf","valuePusher","valueRawPusher","overEntries","key","Supply$unexpectedAbort","Supply$unexpectedAbort$byDefault","reason","console","error","Supply$off$unexpected$reasons","Supply$off","Supply$off$start","prevOff","Supply$off$end","reasons","SupplyState__symbol","SupplyState$done","isOff","off","SupplyState$done$off","_supply","callback","SupplyState$off","_reason","SupplyState$noCallback","supply","Supply$off$unexpected","SupplyState$withCallback","prev","Supply","handler","Supply$unexpectedAbort$handle","whenOff","Promise","resolve","reject","another","needs","cuts","AlwaysSupply","_callback","_another","alwaysSupply$","alwaysSupply","isAlwaysSupply","NeverSupply","neverSupply$","neverSupply","ContextKeyError","Error","message","super","ContextKey__symbol","ContextKey","name","ContextSeedKey","seedKey","opts","seeder","seed","hasFallback","insert","ContextValues","Contextual__symbol","isContextual","IterativeContextSeeder","Map","_providers","delete","context","initial","providers","bind","iterativeSeed","itsEmpty","IterativeSeedKey","IterativeContextKey","MultiContextKey","byDefault","slot","defaultSources","SimpleContextSeeder","entry","unshift","splice","lastIndexOf","makeSeed","seeds","map","combineSimpleSeeds","SimpleSeedKey","SimpleContextKey","SingleContextKey","ContextSupplyKey","or","ContextSupply","ContextBuilder__symbol","ContextSeeders","_initial","found","_issuers","issuer","factory","isValueSpecWithDeps","spec","ContextValueSlot$","seeders","_opts","newSeed","_constructed","grow","setup","prevSetup","_setup","ContextRegistry","_seeders","isContextBuilder","a","by","isValueSpecByProvider","with","deps","dep","isConstantValueSpec","is","isValueSpecViaAlias","via","ctx","isValueSpecAsInstance","isSelfInstanceValueSpec","as","toAsInstance","Type","DepType","JSON","stringify","contextValueSpec","provide","newValues","registry","cached","constructed","_grow","newContextValues","other","otherSeeds","combine","Naming","nsAlias","local","ns","DefaultNaming","alias","default__naming","html__naming","XmlNaming","id__naming","CssNaming","css__naming","NamespaceDef","url","aliases","naming","applyAlias","isQualifiedName","isNameAndNamespace","compareNames","compareStrings","firstName","firstUrl","newNamespaceAliaser","aliasesByNs","nsNumPerAlias","mostPreferred","nsNumRegistered","preferred","ids","generated","AfterEvent__symbol","isEventKeeper","eventReceiver","receiver","receive","_context","event","EventReceiver$doDonReceive","_event","receiveByEach","receivers","send","sendNonRecurrent","actualReceivers","received","recurrent","processEvent","shift","recurrentReceivers","recurrentReceiver","recurrentEvent","EventNotifier","rcs","_rcs","clear","size","generic","OnEvent__symbol","isEventSender","NoEventsError","sendEventsTo","AfterEvent$noFallback","digEvents","input","extract","nestedSupply","prevSupply","extracted","OnEvent$do","processors","reduce","arg","OnEvent$supplier","onceEvent","supplier","OnEvent$then","onEvent","onCutOff","e","_ctx","shareEvents","sharer","EventSharer","on","_on","_onInit","initialEvents","sharedSupply","onFirst","_onFirst","dispatch","_onNext","_addReceiver","supplyEvents","required","dependentSupply","translateEvents","translate","neverReceive","onEventBy","register","do","then","afterEventBy","fallback","cleanup","AfterEvent$noCleanup","lastEvent","numReceivers","afterEvent","dest","reported","isAfterEvent","isOnEvent","afterAll","keys","afterEach","afterSent","sender","afterSupplied","afterThe","afterValue","consumeEvents","consume","consumerSupply","shareAfter","deduplicateAfter$default","deduplicateAfter_$default","deduplicateAfter","isSimilar","getCue","deduplicateAfter$create","processor","deduplicateAfter_","deduplicateAfter_$create","deduplicateAfter$noPrior","deduplicateAfter$isDuplicate","prior","nextEvent","_","compareOrFromOrLength","digAfter","digAfter_","extractKeeper","events","EventEmitter","onNever","onSupplied","onAny","suppliers","remained","removeSupplier","onPromise","promise","alwaysReceiveValue","catch","shareOn","digOn_","extractSender","translateOn","mapper","translateOn_","mapAfter","mapAfter_","mapOn","mapOn_","onceAfter","onceOn","supplyOn","resolveOnOrdered","sourceSupply","numInProcess","numSent","numReceived","lastIndex","resolveOn","toSend","supplyAfter","translateAfter","translateAfter_","valueOn","valueOn_","statePath","path","PathEntry","_drop","emitter","newValue","oldValue","nested","_nested","slice","_dropIfEmpty","dontCreateMissing","created","_remove","Trackers","_entry","_root","nest","SubStateTracker","_trackers","_path","update","_tracker","onUpdate","StateTracker","subTracker","track","ValueTracker","valueReceiver","onRecurrent","recurrentValue","read","acceptValuesFrom","byNone","container","_by","TrackedValue","_it","trackValue","trackValueBy","ValueSync","old","third","syncWithTracker","tracker","syncTrackers","extractTracker","tracker1","tracker2","supply1","supply2","WorkDoneError","workload","work","workName","Workload","allocator","_work","OrderedTasks","_allotment","task","queue","_queues","TaskQueue","enqueue","run","finally","_tasks","_runNext","WorkOrdering","allotment","WorkStage","workbench","runner","WorkStageRunner","stage","_whenAllDone","_end","_task","_start","_addTask","taskPromise","taskDone","_whenTaskDone","all","whenStarted","_awaitDeps","async","addDep","$","runAfter","after","Workbench$impl__symbol","Workbench$","options","_run","Workbench$run","_works","has","ensureWorking","runWorkTask","setWork","runTask","whenWork","newWork","_workload","Workbench","contextDestroyed","flatUpSources","ContextUpSeeder","providersTracker","prov","toUpSrcKeeper","upSrcKeepers","ContextSeed$UpKey","upKey","ContextUpKey$UpKey","_key","fillBy","ContextUpKey","applyContextAfter","applyContextAfter_","FnContextKey","createUpKey","fns","delegated","fn","ContextModuleDependencyError","module","dependencies","out","contextModuleDependencyErrorMessage","ContextModuleUsage","_impl","_rev","provided","used","settled","ready","contextSupply","_load","handle","use","user","_use","rev","_updateStatus","moduleInit","ContextModuleInit","request","init","initBy","loadContextModule","whenReady","impl","_useCounter","whenSettled","ContextModule$Use$when","isContextModuleSettled","isContextModuleReady","_module","_ready","_whenDone","_done","_init","ContextModuleKey","usage","createHandle","implementBy","candidates","ContextModule$impl__symbol","ContextModule$","replaced","contextModuleDeps","loadContextModuleDeps","whenContextModuleSettled","whenContextModuleReady","whenLoaded","notLoaded","whenDone","race","results","failures","filter","ContextModule","replace","OnDomEvent$sample","OnDomEvent$context","DomEventDispatcher","target","_target","onDomEvent","listener","onDomEventBy","domListener","addEventListener","removeEventListener","dispatchEvent","nodeDocument","node","ownerDocument","isElementNode","nodeType","nodeHost","parentNode","getRootNode","host","RenderScheduleConfig","win","window","defaultView","messages","RenderQ__symbol","RenderQ","q","ref","schedule","doSchedule","shot","config","postponed","execution","reset","suspend","exec","postpone","post","resume","pull","scheduled","customRenderScheduler","scheduleOptions","queueRef","newQueue","enqueued","lastQueue","executed","nextQueue","activeQueue","nextEnqueued","RenderQueue","shots","animationRenderQueues","WeakMap","animationRenderScheduler","existing","requestAnimationFrame","replacement","immediateRenderScheduler","execute","last","pop","immediateRenderQueue","queuedRenderScheduler","defaultRenderScheduler","newRenderSchedule","DrekPlacement$Status__symbol","DrekPlacement$Status","placement","onceConnected","readStatus","connected","eventCtx","whenConnected","DrekPlacement","DrekContext","DrekContext__symbol","DrekContext$State","scheduler","_nsAlias","_scheduler","DrekContext$ofDocument","document","state","view","drekContextOf","root","composed","DrekContext$ofRoot","lift","derivedCtx","newRoot","lifted","DrekContext$OfRootNode","DrekContext$ofRootNode","DrekCssClasses__symbol","DrekCssClasses$","className","_add","delta","counter","_counters","n","classList","contains","remove","_has","renderIn","newContext","escapeCSS","text","charCodeAt","toString","c","escapeCSSVal","uppercasePattern","toHyphenLower","letters","offset","str","lowerCase","toLowerCase","hyphenateCSSName$cache","hyphenateName","hyphenateDecapName","hyphenated","startsWith","substr","BootstrapContext__key","BootstrapContext","bootstrapDefault","bootstrapContext","decoratePropertyAccessor","propertyKey","desc","updateDescriptor","isField","updatedDesc","writable","isPropertyAccessorDescriptor","value__symbol","accessorDesc","toPropertyAccessorDescriptor","fieldKey","String","configurable","enumerable","fieldAccessorDescriptor","defineProperty","MetaAccessor","symbol","hasOwnProperty","ownDef","own","superDef","of","prevMeta","updates","meta","newMeta","mergeInitMethods","target1","method1","target2","method2","m1","m2","FeatureDef__symbol","FeatureMeta","defs","def","featureMeta","noFeatureDef","FeatureDef","featureType","for","define","Feature","FeatureContext__key","FeatureContext","componentType","whenDefined","feature","load","BootstrapWorkbench","featureSetupStage","featureInitStage","componentDefStage","ComponentDef__symbol","ComponentMeta","componentMeta","noComponentDef","ComponentDef","Component","decorator","ComponentContext__key","ComponentEventDispatcher__key","dispatcher","ContentRoot","StateUpdaterKey","combined","StateUpdater","ComponentContext__symbol","ComponentContext","updateState","component","contentRoot","AnonymousComponentProperty__symbol","ComponentProperty","decorateWith","accessor","defineBy","definer","readable","componentDef","ComponentProperty$defineBy","By","proto","descriptor","getValue","setValue","call","ComponentProperty$notReadable","ComponentProperty$notWritable","updated","ComponentProperty$updateDescriptor","With","access","As","Bind","binder","accessor__symbol","ComponentSlot__symbol","ComponentSlot","ComponentSlot$","BootstrapContextRegistry__key","BootstrapContextRegistry","PerComponentRegistry","ComponentContextRegistry","PerDefinitionRegistry","bsContext","DefinitionContextRegistry","PostDefSetup__symbol","postDefSetup","superPostDefSetup","BootstrapWindow","DefaultNamespaceAliaser","DefaultRenderSchedulerKey","toDefaultRenderScheduler","DefaultRenderScheduler","DefaultRenderKit","docs","doc","DefinitionContext__symbol","definitionContextOf","CustomElements__key","customElements","CustomElements","componentTypeOrName","elementType","defContext","tagName","extend","elementDef","extends","componentResolver","ComponentResolver__symbol","resolvePromise","rejectPromise","buildPromise","settle","resolution","newPromiseResolver","DefinitionContext__key","ElementDef","elementExtend","HTMLElement","DefinitionContext","ComponentConstructor__symbol","newComponent","context__symbol","defaultContext","prevContext","newComponentConstructor","ComponentStatus","_val","onceReady","ComponentStatus$once","onceSettled","_canSettle","componentCtx","ComponentContext$","_definitionContext","_newComponentRegistry","_status","contextOf","_drekCtx","_component","isReady","isSettled","isConnected","componentDestroyed","unbind","removeChild","removeElement","whenComponent","_whenComponent","lastRev","readNotifier","notifier","_elementBuilder","components","connect","create","ComponentContext$Mounted","mounted","ComponentContext$Custom","WhenComponent","currentRev","onCreated","receiverRev","eventContext","componentContext","notifiedRev","recurrentContext","DefinitionContext$","_bsContext","_whenReady","_def","definitionContextRegistry","parentPerComponentRegistry","append","_perComponentRegistry","definitionSetup","perDefinition","perComponent","_elementType","_createComponent","_connect","_created","definitions","definitionContext","CustomElement$","connectedCallback","destroy","disconnectedCallback","customElementType","ElementBuilder","_define","ComponentRegistry","_components","_defineAll","elementBuilder","buildElement","FeatureContext$","_componentRegistry","onDefinition","_onDefinition","onComponent","_onComponent","onPostDefSetup","FeatureModule__symbol","FeatureModule","featureDef","featureContext","whenInit","FeatureModule$options","WhenDefined__symbol","AttributePath__root","attributePathTo","attributeStateUpdate","updateAttributeState","AttributeRegistry","AttributeRegistry$","mount","change","attrs","observedAttributes","attributeChangedCallback","attributeFilter","MutationObserver","records","record","attributeName","getAttribute","observe","attributes","attributeOldValue","alreadyObserved","newAttrs","attr","prevCallback","attrChanged","Attribute","parseAttributeDescriptor","declareAttribute","setAttribute","removeAttribute","ComponentStateKey","ComponentState","ComponentState__key","AttributeTracker","_name","trackAttribute","RenderPath__root","RenderDef","base","defaults","trigger","ElementRenderCtl$","renderer","fulfill","when","scheduleRenderer","immediateSchedule","_renders","renderNow","renderElement","newRenderer","render","ElementRenderCtl","ElementRenderScheduler","renderCtl","recentShot","renderBy","Render","ShadowContentRoot","ShadowRootBuilder","attachShadow","shadowRoot","shadowRootOf","defaultShadowContentDef","mode","AttachShadow","Wesib__NS","DeltaSet","_added","_removed","deltaSetDeltaReceiver","removed","added","nullInAspect$","instance","convertTo","nullInAspect","knownInAspect","inconvertibleInAspect","control","aspectKey","builtInAspect$","builtInAspect","build","origin","attachTo","aspect","InAspect__symbol","InputAspects__NS","InNamespaceAliaser__aspect","applyTo","InNamespaceAliaser","applyAspect","InRenderScheduler__aspect","InRenderScheduler","InRole__aspect","InControlRole","InRole","InRole$Active","roles","active","role","_defaultSupply","isDefault","named","defaultSupply","activateBy","activator","prevActivator","_activate","_control","_active","activate","modify","activators","_activators","activatedSupply","isAspectKey","noopInConversion","_aspect","noopInConverter","intoConvertedBy","valueOrAspectConverter","converters","converter","inConverter","aspectConverters","conversion","acf","cv","isInAspectConversion","intoConvertedAspects","aspects","InBuilder$Impl__symbol","InBuilder$Impl","_aspectsByKey","_commonAspects","_aspects","byKey","intoConvertedByKey","InBuilder","addAspect","addAspects","aspectKeyOrSetup","aspectSetup","InControl$Aspects__symbol","InControl$Aspects","applied","_byKey","application","_applyAspect","InControl","aspectList","InControl$SameValued","and","InControl$Converted","backward","convertAspect","prevValue","prevRev","InContainer__aspect","InContainer","InParents__aspect","InControlParents","InParents","allParents","_map","existingSupply","parent","InElement__aspect","InElement","InMode__aspect","InMode","ctrl","InControlMode","OwnModeTracker","initialInMode","DerivedInModes","_all","mergeInModes","derive","InParentsAspect","parentsInMode","derived","_derived","substring","lastUpdate","applyInMode","parents","parentList","modes","inModeValue","ro","InData__aspect","InData","hasData","InGroup__aspect","InGroup","RequireNothing$","requireNothing","dontRemove","InValidationMessages","validators","validatorMessages","validate","_messages","resultSupply","validator","validatorSupply","entries","inValidator","InValidation__aspect","InValidation","validation","InControlValidation","noInValidationErrors","ok","hasBut","InValidationErrors","nonEmpty","code","codePresent","_byCode","codes","some","every","inValidationResult","controls","nestedInValidationMessages","numValidators","requireAll","requirePresent","missing","InSubmit__aspect","InSubmit","InControlSubmit","InSubmitError","errors","submit","InSubmitRejectedError","rejected","submitted","busy","flags","_flags","data","_errors","submitter","d","submitData","toInSubmitMessages","AbstractInElement","self","_get","_set","_value","doUpdate","_update","correction","_input","listenForInput","onInput","inText","InFocus__aspect","InFocus","InControlFocus","inElement","owner","activeElement","focus","blur","InStatus__aspect","InStatus","InContainerStatus","InControlStatus","defaultInStatusFlags","hasFocus","touched","edited","updateInStatusFlags","elementInStatusFlags","_container","snapshot","inControlStatuses","combineInStatusFlags","markEdited","markTouched","inFormElement","form","notReady","invalid","inModeByForm","InStyledElement__aspect","InStyledElement","InCssClasses__aspect","InControlCssClasses","InCssClasses","UnsubscribeReason__symbol","isUnsubscribeReason","_sources","classes","mergeInCssClassesMap","classesSent","flag","redelta","undelta","_schedule","controlSchedule","specs","names","inSupply","classesSupply","updateClasses","inCssError","mark","hasError","defaultInCssHasError","defaultInCssErrorMarks","marks","inCssErrorMarks","inCssInfo","cls","md","vl","st","valid","hthvItem","t","v","x","p","pl","addParam","param","parseNone","datePattern","dateTimeParser","dateTime","parseDateTime","nextInItem","delimiterOf","itemParser","tagged","extra","parseAngleBrackets","angleBracketsParser","parseQuotedString","unquoted","quotedStringParser","parseExtra","tag","item","extraItem","nextInComment","spacesParser","paramParser","skipSpaces","parseItem","defaultDelimit"," ","\t",",",";","\"","\\","<",">","=","(",")","/",":","?","@","[","]","{","}","buildParserConfig","delimit","delimitConfig","defaultParserConfig","commentParserConfig","newHthvParser","parserConfig","parseItemDelimit","itemDelimitParser","parseParam","parseComment","comments","commentParser","headerValue","hthvParse","hthvQuote","string","escaped","quote","delimiter","FetchAgentKey","agents","fetch","agentIdx","agentRequest","agent","nextRequest","combineFetchAgents","defaultFetchAgent","HttpFetchAgent","HttpFetchAborted","HttpFetch","Request","responseEmitter","abortController","AbortController","signal","abort","response","customSignal","aborted","getHashURL","URL","hash","PageParam__symbol","PageParam","_page","NavigationAgentKey","navigate","agentTo","nextURL","title","nextTitle","nextData","baseURI","visited","current","put","defaultNavigationAgent","_when","_from","NavigationAgent","PageParamContext","NavHistory__key","NavHistory","extractNavData","_document","_location","location","_history","history","_uid","btoa","random","newEntry","href","_entries","id","enter","replaceState","_historyState","PageEntry","_lastId","toEntry","page","pushState","_enter","fromEntry","_forget","leave","popState","_changeHash","uid","pageId","existingEntry","transfer","oldEntry","forget","wesib:navigation:data","_params","newHandle","_newContext","transferred","at","stay","EnterPageEvent","Event","cancelable","LeavePageEvent","StayOnPageEvent","Navigation__key","navHistory","nav","nextEntry","hashChange","Navigation","onEnter","onLeave","onStay","go","toURL","withParam","applyParams","open","targetOrCallback","navTarget","navTargetOf","applyAgent","whenLeave","doNavigate","prepared","leavePage","prepare","navigated","NavElement$activeClass","navElement","getHref","activeClass","anchor","ownerSupply","navigation","handleClick","pageURL","preventDefault","eventDispatcher","css","drekCssClassesOf","initialNsAlias","initialScheduler","deriveDrekContext","NavMenu$Links__symbol","NavMenu","links","NavMenu$Links","bindTo","_menu","_navLinks","_links","weigh","_weigh","defaultNavLinkWeight","afterLinks","linkValues","_replace","_updateActive","toAdd","linkOrProvider","link","toRemove","_deactivate","toDeactivate","toActivate","_selectActive","deactivated","activated","maxWeight","weight","menu","calcNavLinkWeight","linkURL","linkDir","navLinkPath2dir","pageDir","searchParamWeight","navLinkSearchParamsWeight","pathname","endsWith","searchParams","linkParams","pageParams","isIgnoredSearchParam","getAll","includes","importNode","beforeOrImport","importContent","importNodeContent","before","elementClone","createElement","getAttributeNames","insertBefore","nodeClone","childNodes","cachingPageLoader","loader","pageUrl","sup","tracked","onLoad","trackSupply","resp","num","requested","PageLoadAbortError","PageLoadRequestsParam","requests","PageLoadRequests","_navigation","_loader","_requests","fragments","fragment","pageSupply","loadSupply","_transfer","responseReceiver","getElementsByTagName","getElementById","onFragment","req","list","PageLoadAgent","PageLoadURLModifier","PageLoader","httpFetch","modifyURL","parser","DOMParser","credentials","headers","Headers","Accept","fetchRequest","header","requestPageFragments","batch","parsePageDocument","parseFromString","head","querySelector","newBase","appendChild","PageLoadParam$","PageLoadParam","PageCacheBuster__key","PageCacheBuster","appRev","urlModifier","newRev","reload","pageScriptsAgent","allScripts","externalScripts","scripts","querySelectorAll","script","pageStyleAgent","newStyles","oldStyles","oldStylesByHref","firstOldStyle","newStyle","oldStyle","nextSibling","style","pageTitleAgent","textContent","PageLoadSupport__feature","buster","PageLoadSupport","defaultPageContentKey","Share__symbol","isShareRef","ShareRegistry__key","ShareRegistry","share","elementName","sharers","_sharers","Sharers$addSharer","Sharers$addName","Sharers$new","ShareKey","_share","selectValue","Share$impl__symbol","Share$","_aliases","addSharer","registrar","shareAs","priorityOffset","priority","shareValue","withPriority","SharedValue__symbol","SharedValue","hasDetails","SharedValue$Registrar","SharedValue$BoundRegistrar","applyContextTo","SharedValue$bindProvider","newPriority","SharedValue$detailedProvider","SharedValue$bareProvider","Share","consumer","b","Share$consumerStatus","Share$sharedValue","selected","details","shareLocator","locator","defaultSpec","valueFor","localByDefault","shareByDefault","shareRef","Shareable$Internals__symbol","Shareable","body","Shareable$Internals","_source","_notBound","ShareAccessor","dynSync","val","_syncDyn","_syncVal","_valSupply","Shared","shr","accessorKey","createRegistrar","SharedValue$ContextBuilder","DefaultFormPreset","DefaultFormPreset$setup","builder","nsAliaser","renderScheduler","FormPresetKey","FormPreset","FormPreset__key","FormPreset$rules__symbol","rules","setupField","FormPreset$setupField","setupForm","FormPreset$setupForm","FormPreset$noFieldSetup","_builder","FormPreset$noFormSetup","FormUnit","Field","providerBy","field","preset","Field$isDuplicateControls","FieldShare$map","FieldShare","FormShare$map","FormShare","adjacentField","adjacentTo","adjacentLocator","_sharer","adjusted","Field$nameByKey","FieldName","locateForm","defaultForm","defaultName","fieldName","autoName","unit","group","FormUnitName","Form__aspect","Form","elementFactory","formAspect","Form$isDuplicateControls","Form$provider","duplicate","FormScope","scope","defaultRole","AbstractFormPreset$map","AbstractFormPreset","ScopedFormConfig","createSetup","rest","ScopedFormConfig$isOptions","SharedField","defOrDefiner","definers","formLocator","SharedFormUnit","isReadonlyArray","isNotEmptyArray","StypValueStruct","prioritize","stypValuesEqual","StypColorStruct","StypRGB","coords","r","intCoord","g","coord","rgb","hsl","min","l","round","StypHSL","h","StypColor","hueAsFraction","hueToRgb","newT","mixStypColors","color1","color2","w","rgba1","rgba2","aDiff","w1","w2","StypNumericStruct","dim","toFormula","StypMapper","mappings","mapped","mappedValue","mapping","mappingBy","stypSplitPriority","trim","StypDimension","thisDim","pt","noPt","addendum","stypDimension","stypAddSub","subtrahend","multiplier","divisor","zero","StypCalcBase","left","op","right","usual","stypMul","stypDiv","StypAddSub","toDim","negate","StypMulDiv","Zero","_byPriority","important","ZeroByPriority","unitlessZeroDimensionKind","dimension","StypDimension_","isStypNumeric","StypLength","StypLengthPt","StypURL","noStypProperties","noStypPropertiesSpec","stypPropertiesBySpec","rule","preventDuplicates","propertiesKeeper","senderOrProperties","propertiesMap","properties","isDuplicateProperties","cloneProperties","$$css","propertyEntries","sentry","mergeStypProperties","baseProperties","addendumProperties","k","priorityOf","addValue","addValues","isCombinator","normalizeStypSelector","selector","normalizeKey","normalized","combinator","prevCombinator","part","normalizeStypSelectorPart","sort","normalizeClasses","u","isSubSelectorsArray","normalizeSubSelector","normalizeSubSelectors","isPseudoSubSelector","normalizeQualifiers","sub","prefix","params","qualifiers","exposeQualifier","noQualifiers","qualifier","eqIdx","indexOf","exposed","lastExposed","split","noKeyAndTail","stypRuleKeyAndTail","rootSelector","classesMatch","query","qClass","find","mClass","namesEqual","stypSelector","ruleKeyTextOpts","qualify","stypRuleKeyText","formatStypSelector","defaultFormat","format","hasProperties","subFormat","attrName","attrOp","attrVal","attrFlag","formatSubSelector","xmlNs","qualifyElement","formatItem","AtRulesRenderer","_rule","outer","onlyAtProperties","producer","writer","isGroup","sheet","atSelectors","extractPartAtSelectors","extractAtSelectors","restSelector","atSelector","buildAtSelector","addStyle","addGroup","customQuery","addQuery","namedQuery","stypRenderAtRules","order","isAtEntry","restQualifies","addAtSelector","colonIdx","prevQuery","stypRenderGlobals","FIRST_RENDER_ORDER","rootRule","importIndex","nsIndex","importDelta","renderImport","renderDefaultNamespace","renderNamespacePrefix","addGlobal","stypRenderProperties","notCustomProperty","hyphenateCSSName","stypRenderText","stypRenderXmlNs","xmlNsDefs","declareNs","rendererFactory","isRendererFactory","rendererSpec","compareRenderers","firstOrder","secondOrder","stypRenderScheduler","removeStyleElement","defaultPrettyPrint","indent","compactStypTextFormatter","nv","eol","pre","StypTextFormatter$","_config","StypStyleTextWriter","f","nf","afterBody","AbstractStypGroupTextWriter","StypGroupTextWriter","StypSheetTextWriter","stypDomFormat","textFormat","pretty","formatter","idSeq","onSheet","addSheet","stypTextFormat","StypStyleObjectWriter","setProperty","cssText","StypGroupObjectWriter","ruleText","cssRules","insertRule","StypSheetObjectWriter","deleteRule","produceBasicStyle","selectorFormat","factories","addRenderers","renderers","addRenderer","stypRenderFactories","renderSupply","renderRule","trackRules","styleProducer","production","_selector","stypSelectorText","reader","renderAt","nextIndex","nextRenderer","nextProducer","rendererForRule","ruleSelector","lastSheet","defaultStypRenderers","produceStyle","StypRule","StypRuleList","StypRuleHierarchy","Rules","_list","ruleMatches","_buildList","_ruleSet","returnSelf","grabRules","stypQuery","stypSelectorMatches","AllRules","Self","selfRuleList","iterateAllRules","_updates","extendRule","propertiesSupply","sendUpdate","_spec","NestedRules","StypRule$","_outer","outerSelector","stypOuterSelector","empty","targetSelector","oldSpec","extendSpec","keyText","newNested","StypRuleRef","StypRuleRef$","ms","ps","watch","_mappings","_properties","RefStypRule","mappingsKeeper","StypRuleRefs","refs","fromAll","flattenProperties","referrers","noStypRules","stypRules","rulesByList","rulesFromSource","getRules","rulesByValue","evalRules","lazyStypRules","lazyRulesFromSource","ruleSet","reportExistingRules","lazyRules","asyncRules","ComponentStyleProducer","componentStypDomFormatConfig","defaultStypRenderScheduler","ComponentStypRenderer","ElementIdClass__NS","ElementIdClass","contextValues","aliaser","uniqueClassSeq","qualified","ComponentStypFormat__symbol","ComponentStypObjectFormat","ComponentStypFormat","newProducer","componentSupply","hostSelector","extractHostSelector","extendHostSelector","shadowRenderer","noShadowRenderer","restParts","createTextNode","stypObjectFormat","ComponentStypDomFormat","ProduceStyle","produce","StyleProducerSupport__feature","ThemeStyleKey","isId","prevProvider","hasId","combineStyles","ThemeStyle","theme","Theme__key","Theme$","Theme","referrer","_styles","styles","_rules","Examples__NS","ThemeSettings","$color","$bgColor","$fontFace","$fontSize","$lineHeight","$fontWeight","$linkFontWeight","$layoutBreakpoint","mediaStyle","@media:sm","LinkStyle","settings","linkStyle","textDecoration","color","fontWeight","DefaultStyle","defaultStyle","font","BodyStyle","height","margin","padding","bodyStyle","backgroundColor","FormThemeSettings","global","formMappings","$roBgColor","$errorFontSize","mul","$borderColor","$marginV","div","$marginH","$paddingV","$paddingH","$borderW","FieldErrorComponent","_code","indicator","adjacentToField","InErrorStyle","__decorate","hasError__cssClass","borderW","display","fontSize","borderLeft","paddingLeft","FormsSupport","_byValidity","byValidity","ignore","validity","inModeByValidity","_byForm","byForm","_info","info","_error","MainComponent","mainStyle","flex","onResponse","contentKey","detectFragment","lastPageURL","range","createRange","selectNodeContents","newPageURL","deleteContents","createDocumentFragment","insertNode","handleResponse","IncludePage","NavComponent","_theme","mapIndexed","el","navAnchor","NavStyle","navStyle","sts","background","navLinkBackground","navLinkStyle","activeNavLinkStyle","border","outline","ContainerComponent","mainName","flexFlow","alignItems","alignContent","ContainerStyle","LayoutSupportFeature","BodyStyleSupport","AppFeature","FormStyle","formSettings","inStyle","readonlyInStyle","focusedInStyle","invalidInStyle","outlineStyle","boxShadow","boxSizing","width","outlineColor","examplesContext","features","bootstrapContextRegistry","complete","BootstrapContext$","bsStage","lastStatus","FeatureRef$read","initBootstrap","bootstrapComponents"],"mappings":"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"}