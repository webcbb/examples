{"version":3,"file":"lib.2b11c7cc.s.js","sources":["../../../../node_modules/hyphenate-style-name/index.js","../../../../node_modules/cssesc/cssesc.js"],"sourcesContent":["/* eslint-disable no-var, prefer-template */\nvar uppercasePattern = /[A-Z]/g\nvar msPattern = /^ms-/\nvar cache = {}\n\nfunction toHyphenLower(match) {\n  return '-' + match.toLowerCase()\n}\n\nfunction hyphenateStyleName(name) {\n  if (cache.hasOwnProperty(name)) {\n    return cache[name]\n  }\n\n  var hName = name.replace(uppercasePattern, toHyphenLower)\n  return (cache[name] = msPattern.test(hName) ? '-' + hName : hName)\n}\n\nexport default hyphenateStyleName\n","/*! https://mths.be/cssesc v3.0.0 by @mathias */\n'use strict';\n\nvar object = {};\nvar hasOwnProperty = object.hasOwnProperty;\nvar merge = function merge(options, defaults) {\n\tif (!options) {\n\t\treturn defaults;\n\t}\n\tvar result = {};\n\tfor (var key in defaults) {\n\t\t// `if (defaults.hasOwnProperty(key) { … }` is not needed here, since\n\t\t// only recognized option names are used.\n\t\tresult[key] = hasOwnProperty.call(options, key) ? options[key] : defaults[key];\n\t}\n\treturn result;\n};\n\nvar regexAnySingleEscape = /[ -,\\.\\/:-@\\[-\\^`\\{-~]/;\nvar regexSingleEscape = /[ -,\\.\\/:-@\\[\\]\\^`\\{-~]/;\nvar regexAlwaysEscape = /['\"\\\\]/;\nvar regexExcessiveSpaces = /(^|\\\\+)?(\\\\[A-F0-9]{1,6})\\x20(?![a-fA-F0-9\\x20])/g;\n\n// https://mathiasbynens.be/notes/css-escapes#css\nvar cssesc = function cssesc(string, options) {\n\toptions = merge(options, cssesc.options);\n\tif (options.quotes != 'single' && options.quotes != 'double') {\n\t\toptions.quotes = 'single';\n\t}\n\tvar quote = options.quotes == 'double' ? '\"' : '\\'';\n\tvar isIdentifier = options.isIdentifier;\n\n\tvar firstChar = string.charAt(0);\n\tvar output = '';\n\tvar counter = 0;\n\tvar length = string.length;\n\twhile (counter < length) {\n\t\tvar character = string.charAt(counter++);\n\t\tvar codePoint = character.charCodeAt();\n\t\tvar value = void 0;\n\t\t// If it’s not a printable ASCII character…\n\t\tif (codePoint < 0x20 || codePoint > 0x7E) {\n\t\t\tif (codePoint >= 0xD800 && codePoint <= 0xDBFF && counter < length) {\n\t\t\t\t// It’s a high surrogate, and there is a next character.\n\t\t\t\tvar extra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) {\n\t\t\t\t\t// next character is low surrogate\n\t\t\t\t\tcodePoint = ((codePoint & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000;\n\t\t\t\t} else {\n\t\t\t\t\t// It’s an unmatched surrogate; only append this code unit, in case\n\t\t\t\t\t// the next code unit is the high surrogate of a surrogate pair.\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t}\n\t\t\tvalue = '\\\\' + codePoint.toString(16).toUpperCase() + ' ';\n\t\t} else {\n\t\t\tif (options.escapeEverything) {\n\t\t\t\tif (regexAnySingleEscape.test(character)) {\n\t\t\t\t\tvalue = '\\\\' + character;\n\t\t\t\t} else {\n\t\t\t\t\tvalue = '\\\\' + codePoint.toString(16).toUpperCase() + ' ';\n\t\t\t\t}\n\t\t\t} else if (/[\\t\\n\\f\\r\\x0B]/.test(character)) {\n\t\t\t\tvalue = '\\\\' + codePoint.toString(16).toUpperCase() + ' ';\n\t\t\t} else if (character == '\\\\' || !isIdentifier && (character == '\"' && quote == character || character == '\\'' && quote == character) || isIdentifier && regexSingleEscape.test(character)) {\n\t\t\t\tvalue = '\\\\' + character;\n\t\t\t} else {\n\t\t\t\tvalue = character;\n\t\t\t}\n\t\t}\n\t\toutput += value;\n\t}\n\n\tif (isIdentifier) {\n\t\tif (/^-[-\\d]/.test(output)) {\n\t\t\toutput = '\\\\-' + output.slice(1);\n\t\t} else if (/\\d/.test(firstChar)) {\n\t\t\toutput = '\\\\3' + firstChar + ' ' + output.slice(1);\n\t\t}\n\t}\n\n\t// Remove spaces after `\\HEX` escapes that are not followed by a hex digit,\n\t// since they’re redundant. Note that this is only possible if the escape\n\t// sequence isn’t preceded by an odd number of backslashes.\n\toutput = output.replace(regexExcessiveSpaces, function ($0, $1, $2) {\n\t\tif ($1 && $1.length % 2) {\n\t\t\t// It’s not safe to remove the space, so don’t.\n\t\t\treturn $0;\n\t\t}\n\t\t// Strip the space.\n\t\treturn ($1 || '') + $2;\n\t});\n\n\tif (!isIdentifier && options.wrap) {\n\t\treturn quote + output + quote;\n\t}\n\treturn output;\n};\n\n// Expose default options (so they can be overridden globally).\ncssesc.options = {\n\t'escapeEverything': false,\n\t'isIdentifier': false,\n\t'quotes': 'single',\n\t'wrap': false\n};\n\ncssesc.version = '3.0.0';\n\nmodule.exports = cssesc;\n"],"names":["toHyphenLower","match","toLowerCase","name","cache","hasOwnProperty","hName","replace","uppercasePattern","msPattern","test","merge","options","defaults","result","key","call","regexAnySingleEscape","regexSingleEscape","regexExcessiveSpaces","cssesc","string","quotes","quote","isIdentifier","firstChar","charAt","output","counter","length","character","codePoint","charCodeAt","value","extra","toString","toUpperCase","escapeEverything","slice","$0","$1","$2","wrap","version"],"mappings":"mTAKSA,EAAcC,SACd,IAAMA,EAAMC,gZAGOC,MACtBC,EAAMC,eAAeF,UAChBC,EAAMD,OAGXG,EAAQH,EAAKI,QAAQC,EAAkBR,UACnCI,EAAMD,GAAQM,EAAUC,KAAKJ,GAAS,IAAMA,EAAQA,oCCX1DD,EADS,GACeA,eACxBM,EAAQ,SAAeC,EAASC,OAC9BD,SACGC,MAEJC,EAAS,OACR,IAAIC,KAAOF,EAGfC,EAAOC,GAAOV,EAAeW,KAAKJ,EAASG,GAAOH,EAAQG,GAAOF,EAASE,UAEpED,GAGJG,EAAuB,yBACvBC,EAAoB,0BAEpBC,EAAuB,qDAGvBC,EAAS,SAASA,EAAOC,EAAQT,GAEd,WADtBA,EAAUD,EAAMC,EAASQ,EAAOR,UACpBU,QAAwC,UAAlBV,EAAQU,SACzCV,EAAQU,OAAS,kBAEdC,EAA0B,UAAlBX,EAAQU,OAAqB,IAAM,IAC3CE,EAAeZ,EAAQY,aAEvBC,EAAYJ,EAAOK,OAAO,GAC1BC,EAAS,GACTC,EAAU,EACVC,EAASR,EAAOQ,OACbD,EAAUC,GAAQ,KACpBC,EAAYT,EAAOK,OAAOE,KAC1BG,EAAYD,EAAUE,aACtBC,OAAQ,KAERF,EAAY,IAAQA,EAAY,IAAM,IACrCA,GAAa,OAAUA,GAAa,OAAUH,EAAUC,EAAQ,KAE/DK,EAAQb,EAAOW,WAAWJ,KACN,QAAX,MAARM,GAEJH,IAA0B,KAAZA,IAAsB,KAAe,KAARG,GAAiB,MAI5DN,IAGFK,EAAQ,KAAOF,EAAUI,SAAS,IAAIC,cAAgB,SAIpDH,EAFErB,EAAQyB,iBACPpB,EAAqBP,KAAKoB,GACrB,KAAOA,EAEP,KAAOC,EAAUI,SAAS,IAAIC,cAAgB,IAE7C,iBAAiB1B,KAAKoB,GACxB,KAAOC,EAAUI,SAAS,IAAIC,cAAgB,IAC/B,MAAbN,IAAsBN,IAA8B,KAAbM,GAAoBP,GAASO,GAA0B,KAAbA,GAAqBP,GAASO,IAAcN,GAAgBN,EAAkBR,KAAKoB,GACtK,KAAOA,EAEPA,EAGVH,GAAUM,SAGPT,IACC,UAAUd,KAAKiB,GAClBA,EAAS,MAAQA,EAAOW,MAAM,GACpB,KAAK5B,KAAKe,KACpBE,EAAS,MAAQF,EAAY,IAAME,EAAOW,MAAM,KAOlDX,EAASA,EAAOpB,QAAQY,GAAsB,SAAUoB,EAAIC,EAAIC,UAC3DD,GAAMA,EAAGX,OAAS,EAEdU,GAGAC,GAAM,IAAMC,MAGhBjB,GAAgBZ,EAAQ8B,KACrBnB,EAAQI,EAASJ,EAElBI,IAIDf,QAAU,mBACI,gBACJ,SACN,eACF,GAGTQ,EAAOuB,QAAU,cAEAvB,GD5GbZ,EAAmB,SACnBC,EAAY,OACZL,EAAQ"}