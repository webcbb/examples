{"version":3,"file":"lib.c491fb55.m.js","sources":["../../node_modules/call-thru/src/next-call.ts","../../node_modules/call-thru/src/passed-thru.ts","../../node_modules/call-thru/src/call-thru.ts","../../node_modules/call-thru/src/misc/asis.ts","../../node_modules/call-thru/src/misc/noop.ts","../../node_modules/call-thru/src/misc/presence.ts","../../node_modules/call-thru/src/misc/value-providers.ts","../../node_modules/call-thru/src/passes/args.ts","../../node_modules/call-thru/src/passes/each.ts","../../node_modules/call-thru/src/passes/iteration.ts","../../node_modules/call-thru/src/passes/skip.ts","../../node_modules/a-iterable/src/api.ts","../../node_modules/a-iterable/src/revertible-iterable.ts","../../node_modules/a-iterable/src/util.ts","../../node_modules/a-iterable/src/reverse.ts","../../node_modules/a-iterable/src/termination.ts","../../node_modules/a-iterable/src/thru.ts","../../node_modules/a-iterable/src/transform.ts","../../node_modules/a-iterable/src/a-iterable.ts","../../node_modules/a-iterable/src/construction.ts","../../node_modules/a-iterable/src/objects.ts","../../node_modules/fun-events/src/event-keeper.ts","../../node_modules/fun-events/src/event-supply.ts","../../node_modules/fun-events/src/event-receiver.ts","../../node_modules/fun-events/src/event-sender.ts","../../node_modules/fun-events/src/impl/once.ts","../../node_modules/fun-events/src/event-notifier.ts","../../node_modules/fun-events/src/impl/share.ts","../../node_modules/fun-events/src/impl/till-off.ts","../../node_modules/fun-events/src/on-event.ts","../../node_modules/fun-events/src/after-event.ts","../../node_modules/fun-events/src/dom/on-dom-event.ts","../../node_modules/fun-events/src/dom/dom-event-dispatcher.ts","../../node_modules/fun-events/src/event-emitter.ts","../../node_modules/fun-events/src/keepers/after-all.ts","../../node_modules/fun-events/src/keepers/after-each.ts","../../node_modules/fun-events/src/senders/on-any.ts","../../node_modules/fun-events/src/state/state-path.ts","../../node_modules/fun-events/src/state/state-tracker.ts","../../node_modules/fun-events/src/value/value-tracker.ts","../../node_modules/fun-events/src/value/track-value.ts","../../node_modules/fun-events/src/value/value-sync.ts","../../node_modules/context-values/src/context-key.ts","../../node_modules/context-values/src/context-key-error.ts","../../node_modules/context-values/src/context-value-spec.ts","../../node_modules/context-values/src/context-values.ts","../../node_modules/context-values/src/context-registry.ts","../../node_modules/context-values/src/context-up-key.ts","../../node_modules/context-values/src/fn-context-key.ts","../../node_modules/context-values/src/simple-context-key.ts","../../node_modules/namespace-aliaser/src/naming.ts","../../node_modules/namespace-aliaser/src/namings.ts","../../node_modules/namespace-aliaser/src/namespace.ts","../../node_modules/namespace-aliaser/src/default.ns.ts","../../node_modules/namespace-aliaser/src/name.ts","../../node_modules/namespace-aliaser/src/namespace-aliaser.ts","../../node_modules/http-header-value/src/hthv-partial.impl.ts","../../node_modules/http-header-value/src/parser/add-param.ts","../../node_modules/http-header-value/src/parser/next-in-item.ts","../../node_modules/http-header-value/src/parser/parse-date-time.ts","../../node_modules/http-header-value/src/parser/parse-none.ts","../../node_modules/http-header-value/src/parser/item-parser.ts","../../node_modules/http-header-value/src/parser/quoted-string-parser.ts","../../node_modules/http-header-value/src/parser/angle-brackets-parser.ts","../../node_modules/http-header-value/src/parser/next-in-comment.ts","../../node_modules/http-header-value/src/parser/spaces-parser.ts","../../node_modules/http-header-value/src/parser/param-parser.ts","../../node_modules/http-header-value/src/parser/parser-config.ts","../../node_modules/http-header-value/src/hthv-parser.ts","../../node_modules/http-header-value/src/parser/item-delimit-parser.ts","../../node_modules/http-header-value/src/parser/comment-parser.ts","../../node_modules/http-header-value/src/custom/hthv-parse-commented.ts","../../node_modules/http-header-value/src/custom/hthv-parse-directives.ts","../../node_modules/http-header-value/src/custom/hthv-parse-uris.ts","../../node_modules/http-header-value/src/hthv-parse.ts","../../node_modules/http-header-value/src/hthv-quote.ts","../../node_modules/cssesc/cssesc.js","../../node_modules/hyphenate-style-name/index.js","../../node_modules/style-producer/src/internal/css.ts","../../node_modules/style-producer/src/internal/types.ts","../../node_modules/style-producer/src/value/value.ts","../../node_modules/style-producer/src/value/color/color.ts","../../node_modules/style-producer/src/value/color/mix.ts","../../node_modules/style-producer/src/value/numeric/numeric.ts","../../node_modules/style-producer/src/value/mapper.ts","../../node_modules/style-producer/src/value/priority.ts","../../node_modules/style-producer/src/value/numeric/numeric.impl.ts","../../node_modules/style-producer/src/value/numeric/zero.impl.ts","../../node_modules/style-producer/src/value/numeric/dimension-kind.impl.ts","../../node_modules/style-producer/src/value/unit/angle.ts","../../node_modules/style-producer/src/value/unit/frequency.ts","../../node_modules/style-producer/src/value/unit/length.ts","../../node_modules/style-producer/src/value/url.ts","../../node_modules/style-producer/src/rule/properties.impl.ts","../../node_modules/style-producer/src/selector/selector.impl.ts","../../node_modules/style-producer/src/selector/query.ts","../../node_modules/style-producer/src/selector/selector-constructor.ts","../../node_modules/style-producer/src/selector/selector-text.impl.ts","../../node_modules/style-producer/src/producer/render.impl.ts","../../node_modules/style-producer/src/producer/at-rules.render.ts","../../node_modules/style-producer/src/producer/globals.render.ts","../../node_modules/style-producer/src/producer/properties.render.ts","../../node_modules/style-producer/src/producer/options.impl.ts","../../node_modules/style-producer/src/producer/produce-basic-style.ts","../../node_modules/style-producer/src/selector/selector-text.ts","../../node_modules/style-producer/src/producer/text.render.ts","../../node_modules/style-producer/src/producer/xml-ns.render.ts","../../node_modules/style-producer/src/producer/produce-style.ts","../../node_modules/style-producer/src/rule/rule.ts","../../node_modules/style-producer/src/rule/rules.impl.ts","../../node_modules/style-producer/src/rule/rule.impl.ts","../../node_modules/style-producer/src/rule/root.ts","../../node_modules/style-producer/src/rule/rule-ref.ts","../../node_modules/style-producer/src/rule/rule-refs.ts","../../node_modules/style-producer/src/rule/rules.ts","../../node_modules/input-aspects/src/aspect.ts","../../node_modules/input-aspects/src/aspect.impl.ts","../../node_modules/input-aspects/src/control.ts","../../node_modules/input-aspects/src/container/container.control.ts","../../node_modules/input-aspects/src/container/parents.aspect.ts","../../node_modules/input-aspects/src/element.control.ts","../../node_modules/input-aspects/src/data/mode.aspect.ts","../../node_modules/input-aspects/src/data/data.aspect.ts","../../node_modules/input-aspects/src/container/group.control.ts","../../node_modules/input-aspects/src/validation/require-nothing.validator.ts","../../node_modules/input-aspects/src/validation/validator.ts","../../node_modules/input-aspects/src/validation/validator.impl.ts","../../node_modules/input-aspects/src/validation/validation.aspect.ts","../../node_modules/input-aspects/src/validation/require-all.validator.ts","../../node_modules/input-aspects/src/validation/require-present.validator.ts","../../node_modules/input-aspects/src/element/element.impl.ts","../../node_modules/input-aspects/src/element/text.control.ts","../../node_modules/input-aspects/src/focus/focus.aspect.ts","../../node_modules/input-aspects/src/focus/status.aspect.ts","../../node_modules/input-aspects/src/style/styled-element.aspect.ts","../../node_modules/input-aspects/src/style/css-classes.aspect.ts","../../node_modules/input-aspects/src/style/css-info.ts"],"sourcesContent":["/**\n * @module call-thru\n */\nimport { CallOutcome } from './call-outcome';\n\n/**\n * A key of a [[NextCall]] method responsible for calling the next function in chain.\n */\nexport const NextCall__symbol = /*#__PURE__*/ Symbol('next-call');\n\n/**\n * A key of a [[NextCall]] method responsible for returning the outcome of the las pass in chain.\n */\nexport const NextCall_lastOutcome__symbol = /*#__PURE__*/ Symbol('next-call:last-outcome');\n\n/**\n * A call of the next function in chain.\n *\n * This is basically a function with additional method, which is treated specially by call chaining functions.\n * When previous function in chain returns a [[NextCall]] instance, it will be used to call the next function in chain.\n * Otherwise the next function will be called with single argument containing a value returned.\n *\n * A [[NextCall]] is a function returning itself. So it can be chained like any other function.\n *\n * A [[nextCall]] function can be used to construct a next call.\n *\n * @typeparam OutKind  A kind of the call outcome.\n * @typeparam NextThis  A type of `this` context object reference of the next function.\n * @typeparam NextArgs  A type of argument tuple of the next function.\n * @typeparam NextReturn  A return type of the next function.\n * @typeparam Out  A type of the next function call outcome.\n * @typeparam Last  A type of the outcome of the next call returned from the last pass in chain.\n */\nexport abstract class NextCall<\n    OutKind extends CallOutcome.Kind,\n    NextArgs extends any[],\n    NextReturn,\n    Out = NextReturn,\n    Last = CallOutcome.OfKind<OutKind, NextArgs[0], Out>> extends Function {\n\n  /**\n   * Checks whether the `target` value is a next function call.\n   *\n   * @param target  A value to check.\n   *\n   * @returns `true`.\n   */\n  static is<V extends NextCall.Any>(target: V): target is V;\n\n  /**\n   * Checks whether the `target` value is a next function call.\n   *\n   * @param target  A value to check.\n   *\n   * @returns `true` if the `target` value is a function with a `[NextCall.mark]` property, or `false` otherwise.\n   */\n  static is(target: any): target is NextCall.Any;\n\n  static is(target: any): target is NextCall.Any {\n    return typeof target === 'function' && NextCall__symbol in target;\n  }\n\n  /**\n   * Converts a value returned from previous chained function call to the call of the next function in chain.\n   *\n   * @param nextCall  A next function call to return.\n   *\n   * @returns A `nextCall` itself.\n   */\n  static of<V extends NextCall.Any>(nextCall: V): V;\n\n  /**\n   * Converts a value returned from previous chained function call to the call of the next function in chain.\n   *\n   * @param value  A value to convert.\n   *\n   * @returns Either a `value` itself if it is a next function call, or a new next function call instance that passes\n   * a `value` as the only argument to the callee.\n   */\n  static of<V, Out>(value: V): NextCall<'default', [V], Out, Out, Out>;\n\n  static of<V, NextReturn>(value: V): NextCall<any, NextCall.Callee.Args<V>, NextReturn> {\n    if (NextCall.is(value)) {\n      return value;\n    }\n    return nextCall((callee: any) => callee(value));\n  }\n\n  /**\n   * Calls the next function in chain.\n   *\n   * This is invoked only when there _is_ a next function. When next call is returned by the last pass a\n   * `[NextCall_lastOutcome__symbol]()` is invoked instead.\n   *\n   * @param callee  A function to call.\n   *\n   * @returns A call outcome.\n   */\n  abstract [NextCall__symbol](callee: (this: void, ...args: NextArgs) => NextReturn): Out;\n\n  /**\n   * Builds an outcome of the last pass in chain.\n   *\n   * This is invoked for the last pass in chain only. If there is the next pass, a `[NextCall__symbol]()` is invoked\n   * instead.\n   */\n  abstract [NextCall_lastOutcome__symbol](): Last;\n\n}\n\nexport interface NextCall<\n    OutKind extends CallOutcome.Kind,\n    NextArgs extends any[],\n    NextReturn,\n    Out = NextReturn,\n    Last = CallOutcome.OfKind<OutKind, NextArgs[0], Out>> {\n\n  /**\n   * Returns itself to add it to functions chain.\n   */\n  (): NextCall<OutKind, NextArgs, NextReturn, Out, Last>; // tslint:disable-line:callable-types\n\n}\n\nexport namespace NextCall {\n\n  /**\n   * Any call of the next function.\n   */\n  export type Any = NextCall<any, any, any, any, any>;\n\n  export namespace Callee {\n\n    /**\n     * Arguments tuple type of a callee. Either extracted from [[NextCall]], or consisting of single argument of type\n     * `V`.\n     */\n    export type Args<V> = V extends NextCall<any, infer NextArgs, any, any, any> ? NextArgs : [V];\n\n    /**\n     * A return type of a callee. Either extracted from [[NextCall]], or `V` itself.\n     */\n    export type Return<V> = V extends NextCall<any, any, infer NextReturn, any, any> ? NextReturn : V;\n\n  }\n\n  /**\n   * A type of next call outcome. Either extracted from [[NextCall]], or `Return`.\n   */\n  export type Outcome<V, Return> = V extends NextCall<infer OutKind, any, any, infer Out, any>\n      ? CallOutcome.OfKind<OutKind, Return, Out>\n      : Return;\n\n  /**\n   * A type of last call outcome. Either extracted from the last call, or the value itself.\n   */\n  export type LastOutcome<V> = V extends NextCall<any, any, any, any, infer Last> ? Last : V;\n\n  /**\n   * A type of the result returned from chained function call, except for the last one.\n   *\n   * This may be either a [[NextCall]] instance, or single value.\n   *\n   * In any case the result provides arguments for the next pass in chain and thus should be compatible with next\n   * function signature.\n   *\n   * @typeparam NextArgs  A type of argument tuple of the next function in chain.\n   */\n  export type CallResult<NextArgs extends any[]> =\n      NextArgs extends [infer Result]\n          // Next function expects single argument.\n          // So the previous one may return either a single value, or a [[NextCall]] with compatible argument.\n          ? (Result | NextCall<any, NextArgs, any, any, any>)\n          // Next function expects multiple arguments.\n          // So the previous one should always return a [[NextCall]] instance with compatible arguments.\n          : NextCall<any, NextArgs, any, any, any>;\n\n  /**\n   * A result returned by last function in chain.\n   *\n   * This may be either a [[NextCall]] instance, or single value.\n   *\n   * @typeparam Last  A type of outcome of the last pass in chain.\n   */\n  export type LastResult<Last> =\n      Last | NextCall<any, any, any, any, Last>;\n\n}\n\nconst firstArg: (...args: any[]) => any = (arg: any) => arg;\n\n/**\n * Constructs a call to the next function.\n *\n * @param callNext  A next function caller function.\n * @param lastOutcome  A function building an outcome of the last pass in chain.\n *\n * @returns A next function call performed by the given `callNext` function.\n */\nexport function nextCall<OutKind extends CallOutcome.Kind, NextArgs extends any[], NextReturn, Out, Last>(\n    callNext: (this: void, callee: (this: void, ...args: NextArgs) => NextReturn) => Out,\n    lastOutcome: (this: void) => Last):\n    NextCall<OutKind, NextArgs, NextReturn, Out, Last>;\n\n/**\n * Constructs a call to the next function with default last pass outcome implementation.\n *\n * The last pass outcome is detected by passing to `callNext` a function that just returns its first argument.\n *\n * @param callNext  A next function caller function.\n *\n * @returns A next function call performed by the given `callNext` function.\n */\nexport function nextCall<OutKind extends CallOutcome.Kind, NextArgs extends any[], NextReturn, Out>(\n    callNext: (this: void, callee: (this: void, ...args: NextArgs) => NextReturn) => Out):\n    NextCall<OutKind, NextArgs, NextReturn, Out>;\n\nexport function nextCall<OutKind extends CallOutcome.Kind, NextArgs extends any[], NextReturn, Out, Last>(\n    callNext: (this: void, callee: (this: void, ...args: NextArgs) => NextReturn) => Out,\n    lastOutcome: (this: void) => Last = () => callNext(firstArg) as any):\n    NextCall<OutKind, NextArgs, NextReturn, Out, Last> {\n\n  const result = (() => result) as NextCall<OutKind, NextArgs, NextReturn, Out, Last>;\n\n  result[NextCall__symbol] = callee => callNext(callee);\n  result[NextCall_lastOutcome__symbol] = lastOutcome;\n\n  return result;\n}\n","/**\n * @module call-thru\n */\n/**\n * A key of a [[PassedThru]] property containing the actual outcome value.\n */\nexport const PassedThru__symbol = /*#__PURE__*/ Symbol('passed-thru');\n\n/**\n * An chained pass outcome value wrapping the actual outcome.\n *\n * When the outcome of the last chained pass is a [[PassedThru]] instance, it is be replaced with the value of its\n * [[PassedThru__symbol]] property.\n *\n * Also extends an `Iterable` interface, so that e.g. [[nextEach]] and [[nextFlatEach]] unwrap the passed through value\n * to convert it to arbitrary number of elements. Including zero, which is the case when `nextSkip()` is returned.\n */\nexport abstract class PassedThru<V, I = V> implements Iterable<I> {\n\n  /**\n   * The actual passed thru value.\n   */\n  abstract readonly [PassedThru__symbol]: V;\n\n  /**\n   * Checks whether `target` value is a [[PassedThru]] instance.\n   *\n   * @param target  A value to check.\n   *\n   * @returns `true`.\n   */\n  static is<V extends PassedThru<any, any>>(target: V): target is V;\n\n  /**\n   * Checks whether `target` value is a [[PassedThru]] instance.\n   *\n   * @param target  A value to check.\n   *\n   * @returns `true` if the `target` value is an object with a [[PassedThru__symbol]] property, or `false` otherwise.\n   */\n  static is<V>(target: any): target is PassedThru<V, any>;\n\n  static is(target: any): target is PassedThru<any, any> {\n    return typeof target === 'object' && PassedThru__symbol in target;\n  }\n\n  /**\n   * Extracts the passed through value.\n   *\n   * @param outcome  The outcome to extract the value from.\n   *\n   * @returns A [[PassedThru__symbol]] property value is the given `outcome` is a [[PassedThru]] instance, or `outcome`\n   * itself otherwise.\n   */\n  static get<V>(outcome: V): PassedThru.Value<V> {\n    if (PassedThru.is<V>(outcome)) {\n      return outcome[PassedThru__symbol] as PassedThru.Value<V>;\n    }\n    return outcome as PassedThru.Value<V>;\n  }\n\n  /**\n   * Extracts the passed through items.\n   *\n   * @param outcome  The outcome to extract the items from.\n   *\n   * @return An iterable of passed through items if the the given `outcome` is a [[PassedThru]] instance, or an iterable\n   * containing the `outcome` itself otherwise.\n   */\n  static items<V>(outcome: V): Iterable<PassedThru.Item<V>> {\n    if (PassedThru.is<V>(outcome)) {\n      return outcome;\n    }\n    return {\n      * [Symbol.iterator]() {\n        yield outcome as PassedThru.Item<V>;\n      }\n    };\n  }\n\n  abstract [Symbol.iterator](): Iterator<I>;\n\n}\n\nexport namespace PassedThru {\n\n  /**\n   * A type of the passed though value.\n   */\n  export type Value<V> = V extends PassedThru<infer T, any> ? T : V;\n\n  /**\n   * A type of the passed though item.\n   */\n  export type Item<V> = V extends PassedThru<any, infer I> ? I : V;\n\n}\n","/**\n * @module call-thru\n */\nimport { NextCall, NextCall__symbol, NextCall_lastOutcome__symbol } from './next-call';\nimport { PassedThru } from './passed-thru';\nimport Last = NextCall.LastResult;\nimport Out = NextCall.Outcome;\nimport Result = NextCall.CallResult;\n\n/**\n * Constructs a function that invokes the chained passes.\n *\n * Each pass is function accepts argument(s) passed from the previous one.\n *\n * The value returned from the pass is treated the following way:\n *\n * - When a [[NextCall]] is returned, this instance is used to perform the next function call.\n * - When plain value returned, this value is passed to the next function as the only argument.\n * - When a [[NextCall]] is returned by the last pass, it is used to construct the outcome.\n * - When a plain value is returned by the last pass, it is used as outcome.\n *\n * A [[NextCall]] instance returned the pass is responsible for next function call and may modify the call outcome.\n */\nexport function callThru<P extends any[], R>(\n    fn: (this: void, ...args: P) => Last<R>,\n): (this: void, ...args: P) =>\n    PassedThru.Value<R>;\n\nexport function callThru<\n    P1 extends any[], R1 extends Result<P2>,\n    P2 extends any[], R2>(\n    fn1: (this: void, ...args: P1) => R1,\n    fn2: (this: void, ...args: P2) => Last<R2>,\n): (this: void, ...args: P1) =>\n    PassedThru.Value<Out<R1, R2>>;\n\nexport function callThru<\n    P1 extends any[], R1 extends Result<P2>,\n    P2 extends any[], R2 extends Result<P3>,\n    P3 extends any[], R3>(\n    fn1: (this: void, ...args: P1) => R1,\n    fn2: (this: void, ...args: P2) => R2,\n    fn3: (this: void, ...args: P3) => Last<R3>,\n): (this: void, ...args: P1) =>\n    PassedThru.Value<Out<R1, Out<R2, R3>>>;\n\nexport function callThru<\n    P1 extends any[], R1 extends Result<P2>,\n    P2 extends any[], R2 extends Result<P3>,\n    P3 extends any[], R3 extends Result<P4>,\n    P4 extends any[], R4>(\n    fn1: (this: void, ...args: P1) => R1,\n    fn2: (this: void, ...args: P2) => R2,\n    fn3: (this: void, ...args: P3) => R3,\n    fn4: (this: void, ...args: P4) => Last<R4>,\n): (this: void, ...args: P1) =>\n    PassedThru.Value<Out<R1, Out<R2, Out<R3, R4>>>>;\n\nexport function callThru<\n    P1 extends any[], R1 extends Result<P2>,\n    P2 extends any[], R2 extends Result<P3>,\n    P3 extends any[], R3 extends Result<P4>,\n    P4 extends any[], R4 extends Result<P5>,\n    P5 extends any[], R5>(\n    fn1: (this: void, ...args: P1) => R1,\n    fn2: (this: void, ...args: P2) => R2,\n    fn3: (this: void, ...args: P3) => R3,\n    fn4: (this: void, ...args: P4) => R4,\n    fn5: (this: void, ...args: P5) => Last<R5>,\n): (this: void, ...args: P1) =>\n    PassedThru.Value<Out<R1, Out<R2, Out<R3, Out<R4, R5>>>>>;\n\nexport function callThru<\n    P1 extends any[], R1 extends Result<P2>,\n    P2 extends any[], R2 extends Result<P3>,\n    P3 extends any[], R3 extends Result<P4>,\n    P4 extends any[], R4 extends Result<P5>,\n    P5 extends any[], R5 extends Result<P6>,\n    P6 extends any[], R6>(\n    fn1: (this: void, ...args: P1) => R1,\n    fn2: (this: void, ...args: P2) => R2,\n    fn3: (this: void, ...args: P3) => R3,\n    fn4: (this: void, ...args: P4) => R4,\n    fn5: (this: void, ...args: P5) => R5,\n    fn6: (this: void, ...args: P6) => Last<R6>,\n): (this: void, ...args: P1) =>\n    PassedThru.Value<Out<R1, Out<R2, Out<R3, Out<R4,\n        Out<R5, R6>>>>>>;\n\nexport function callThru<\n    P1 extends any[], R1 extends Result<P2>,\n    P2 extends any[], R2 extends Result<P3>,\n    P3 extends any[], R3 extends Result<P4>,\n    P4 extends any[], R4 extends Result<P5>,\n    P5 extends any[], R5 extends Result<P6>,\n    P6 extends any[], R6 extends Result<P7>,\n    P7 extends any[], R7>(\n    fn1: (this: void, ...args: P1) => R1,\n    fn2: (this: void, ...args: P2) => R2,\n    fn3: (this: void, ...args: P3) => R3,\n    fn4: (this: void, ...args: P4) => R4,\n    fn5: (this: void, ...args: P5) => R5,\n    fn6: (this: void, ...args: P7) => R6,\n    fn7: (this: void, ...args: P7) => Last<R7>,\n): (this: void, ...args: P1) =>\n    PassedThru.Value<Out<R1, Out<R2, Out<R3, Out<R4,\n        Out<R5, Out<R6, R7>>>>>>>;\n\nexport function callThru<\n    P1 extends any[], R1 extends Result<P2>,\n    P2 extends any[], R2 extends Result<P3>,\n    P3 extends any[], R3 extends Result<P4>,\n    P4 extends any[], R4 extends Result<P5>,\n    P5 extends any[], R5 extends Result<P6>,\n    P6 extends any[], R6 extends Result<P7>,\n    P7 extends any[], R7 extends Result<P8>,\n    P8 extends any[], R8>(\n    fn1: (this: void, ...args: P1) => R1,\n    fn2: (this: void, ...args: P2) => R2,\n    fn3: (this: void, ...args: P3) => R3,\n    fn4: (this: void, ...args: P4) => R4,\n    fn5: (this: void, ...args: P5) => R5,\n    fn6: (this: void, ...args: P7) => R6,\n    fn7: (this: void, ...args: P7) => R7,\n    fn8: (this: void, ...args: P8) => Last<R8>,\n): (this: void, ...args: P1) =>\n    PassedThru.Value<Out<R1, Out<R2, Out<R3, Out<R4,\n        Out<R5, Out<R6, Out<R7, R8>>>>>>>>;\n\nexport function callThru<\n    P1 extends any[], R1 extends Result<P2>,\n    P2 extends any[], R2 extends Result<P3>,\n    P3 extends any[], R3 extends Result<P4>,\n    P4 extends any[], R4 extends Result<P5>,\n    P5 extends any[], R5 extends Result<P6>,\n    P6 extends any[], R6 extends Result<P7>,\n    P7 extends any[], R7 extends Result<P8>,\n    P8 extends any[], R8 extends Result<P9>,\n    P9 extends any[], R9>(\n    fn1: (this: void, ...args: P1) => R1,\n    fn2: (this: void, ...args: P2) => R2,\n    fn3: (this: void, ...args: P3) => R3,\n    fn4: (this: void, ...args: P4) => R4,\n    fn5: (this: void, ...args: P5) => R5,\n    fn6: (this: void, ...args: P7) => R6,\n    fn7: (this: void, ...args: P7) => R7,\n    fn8: (this: void, ...args: P8) => R8,\n    fn9: (this: void, ...args: P9) => Last<R9>,\n): (this: void, ...args: P1) =>\n    PassedThru.Value<Out<R1, Out<R2, Out<R3, Out<R4,\n        Out<R5, Out<R6, Out<R7, Out<R8, R9>>>>>>>>>;\n\nexport function callThru<\n    P1 extends any[], R1 extends Result<P2>,\n    P2 extends any[], R2 extends Result<P3>,\n    P3 extends any[], R3 extends Result<P4>,\n    P4 extends any[], R4 extends Result<P5>,\n    P5 extends any[], R5 extends Result<P6>,\n    P6 extends any[], R6 extends Result<P7>,\n    P7 extends any[], R7 extends Result<P8>,\n    P8 extends any[], R8 extends Result<P9>,\n    P9 extends any[], R9 extends Result<P10>,\n    P10 extends any[], R10>(\n    fn1: (this: void, ...args: P1) => R1,\n    fn2: (this: void, ...args: P2) => R2,\n    fn3: (this: void, ...args: P3) => R3,\n    fn4: (this: void, ...args: P4) => R4,\n    fn5: (this: void, ...args: P5) => R5,\n    fn6: (this: void, ...args: P7) => R6,\n    fn7: (this: void, ...args: P7) => R7,\n    fn8: (this: void, ...args: P8) => R8,\n    fn9: (this: void, ...args: P9) => R9,\n    fn10: (this: void, ...args: P10) => Last<R10>):\n    (this: void, ...args: P1) => PassedThru.Value<Out<R1, Out<R2, Out<R3, Out<R4,\n        Out<R5, Out<R6, Out<R7, Out<R8, Out<R9, R10>>>>>>>>>>;\n\nexport function callThru<\n    P1 extends any[], R1 extends Result<P2>,\n    P2 extends any[], R2 extends Result<P3>,\n    P3 extends any[], R3 extends Result<P4>,\n    P4 extends any[], R4 extends Result<P5>,\n    P5 extends any[], R5 extends Result<P6>,\n    P6 extends any[], R6 extends Result<P7>,\n    P7 extends any[], R7 extends Result<P8>,\n    P8 extends any[], R8 extends Result<P9>,\n    P9 extends any[], R9 extends Result<P10>,\n    P10 extends any[], R10 extends Result<P11>,\n    P11 extends any[], R11>(\n    fn1: (this: void, ...args: P1) => R1,\n    fn2: (this: void, ...args: P2) => R2,\n    fn3: (this: void, ...args: P3) => R3,\n    fn4: (this: void, ...args: P4) => R4,\n    fn5: (this: void, ...args: P5) => R5,\n    fn6: (this: void, ...args: P7) => R6,\n    fn7: (this: void, ...args: P7) => R7,\n    fn8: (this: void, ...args: P8) => R8,\n    fn9: (this: void, ...args: P9) => R9,\n    fn10: (this: void, ...args: P10) => R10,\n    fn11: (this: void, ...args: P11) => Last<R11>,\n): (this: void, ...args: P1) =>\n    PassedThru.Value<Out<R1, Out<R2, Out<R3, Out<R4,\n        Out<R5, Out<R6, Out<R7, Out<R8, Out<R9,\n            Out<R10, R11>>>>>>>>>>>;\n\nexport function callThru<\n    P1 extends any[], R1 extends Result<P2>,\n    P2 extends any[], R2 extends Result<P3>,\n    P3 extends any[], R3 extends Result<P4>,\n    P4 extends any[], R4 extends Result<P5>,\n    P5 extends any[], R5 extends Result<P6>,\n    P6 extends any[], R6 extends Result<P7>,\n    P7 extends any[], R7 extends Result<P8>,\n    P8 extends any[], R8 extends Result<P9>,\n    P9 extends any[], R9 extends Result<P10>,\n    P10 extends any[], R10 extends Result<P11>,\n    P11 extends any[], R11 extends Result<P12>,\n    P12 extends any[], R12>(\n    fn1: (this: void, ...args: P1) => R1,\n    fn2: (this: void, ...args: P2) => R2,\n    fn3: (this: void, ...args: P3) => R3,\n    fn4: (this: void, ...args: P4) => R4,\n    fn5: (this: void, ...args: P5) => R5,\n    fn6: (this: void, ...args: P7) => R6,\n    fn7: (this: void, ...args: P7) => R7,\n    fn8: (this: void, ...args: P8) => R8,\n    fn9: (this: void, ...args: P9) => R9,\n    fn10: (this: void, ...args: P10) => R10,\n    fn11: (this: void, ...args: P11) => R11,\n    fn12: (this: void, ...args: P12) => Last<R12>,\n): (this: void, ...args: P1) =>\n    PassedThru.Value<Out<R1, Out<R2, Out<R3, Out<R4,\n        Out<R5, Out<R6, Out<R7, Out<R8, Out<R9,\n            Out<R10, Out<R11, R12>>>>>>>>>>>>;\n\nexport function callThru<\n    P1 extends any[], R1 extends Result<P2>,\n    P2 extends any[], R2 extends Result<P3>,\n    P3 extends any[], R3 extends Result<P4>,\n    P4 extends any[], R4 extends Result<P5>,\n    P5 extends any[], R5 extends Result<P6>,\n    P6 extends any[], R6 extends Result<P7>,\n    P7 extends any[], R7 extends Result<P8>,\n    P8 extends any[], R8 extends Result<P9>,\n    P9 extends any[], R9 extends Result<P10>,\n    P10 extends any[], R10 extends Result<P11>,\n    P11 extends any[], R11 extends Result<P12>,\n    P12 extends any[], R12 extends Result<P13>,\n    P13 extends any[], R13>(\n    fn1: (this: void, ...args: P1) => R1,\n    fn2: (this: void, ...args: P2) => R2,\n    fn3: (this: void, ...args: P3) => R3,\n    fn4: (this: void, ...args: P4) => R4,\n    fn5: (this: void, ...args: P5) => R5,\n    fn6: (this: void, ...args: P7) => R6,\n    fn7: (this: void, ...args: P7) => R7,\n    fn8: (this: void, ...args: P8) => R8,\n    fn9: (this: void, ...args: P9) => R9,\n    fn10: (this: void, ...args: P10) => R10,\n    fn11: (this: void, ...args: P11) => R11,\n    fn12: (this: void, ...args: P12) => R12,\n    fn13: (this: void, ...args: P13) => Last<R13>,\n): (this: void, ...args: P1) =>\n    PassedThru.Value<Out<R1, Out<R2, Out<R3, Out<R4,\n        Out<R5, Out<R6, Out<R7, Out<R8, Out<R9,\n            Out<R10, Out<R11, Out<R12, R13>>>>>>>>>>>>>;\n\nexport function callThru<R>(...fns: ((...args: any[]) => any)[]): (...args: any[]) => R {\n\n  function callNext(idx: number, prev: any): any {\n\n    const len = fns.length;\n\n    if (idx < len) {\n      // There is a next pass in chain\n      if (!NextCall.is(prev)) {\n        return callNext(idx + 1, fns[idx].call(null, prev));\n      }\n      return prev[NextCall__symbol](function (this: any, ...args: any[]) {\n        return callNext(idx + 1, fns[idx].apply(this, args));\n      });\n    }\n\n    // Last in chain\n    if (!NextCall.is(prev)) {\n      return prev;\n    }\n\n    return prev[NextCall_lastOutcome__symbol]();\n  }\n\n  return function (this: any, ...args: any[]) {\n    return PassedThru.get(callNext(1, fns[0].apply(this, args)));\n  };\n}\n","/**\n * @module call-thru\n */\n/**\n * A function that returns its argument as is.\n *\n * @param value  A value to return.\n *\n * @returns `value`.\n */\nexport function asis<T>(value: T): T {\n  return value;\n}\n","/**\n * @module call-thru\n */\n/**\n * A function that does nothing.\n *\n * @returns `undefined`.\n */\nexport function noop(): undefined {\n  return;\n}\n","/**\n * @module call-thru\n */\n/**\n * A function that checks whether the given value is present.\n *\n * @param value  A value to check.\n *\n * @returns `true` when the given `value` is not `null` or `undefined`, or `false` otherwise.\n */\nexport function isPresent<T>(value: T | undefined | null): value is T {\n  return value != null;\n}\n\n/**\n * A function that checks whether the given value is not present.\n *\n * This is a direct opposite to `isPresent()`.\n *\n * @param value  A value to check.\n *\n * @returns `true` when the given `value` is `null` or `undefined`, or `false` otherwise.\n */\nexport function isNotPresent<T>(value: T | undefined | null): value is T {\n  return value == null;\n}\n\n/**\n * A function that checks whether the given value is defined.\n *\n * @param value  A value to check.\n *\n * @returns `true` when the given `value` is not `undefined`, or `false` otherwise.\n */\nexport function isDefined<T>(value: T | undefined): value is T {\n  return value !== undefined;\n}\n\n/**\n * A function that checks whether the given value is undefined.\n *\n * This is a direct opposite to `isDefined()`.\n *\n * @param value  A value to check.\n *\n * @returns `true` when the given `value` is `undefined`, or `false` otherwise.\n */\nexport function isUndefined<T>(value: T | undefined): value is T {\n  return value === undefined;\n}\n","/**\n * @module call-thru\n */\n/**\n * Creates a provider of the only argument.\n *\n * @param value  A value to return.\n *\n * @returns A function that returns `value`.\n */\nexport function valueProvider<T>(value: T): (this: void) => T {\n  return () => value;\n}\n\n/**\n * Creates a provider of arguments tuple.\n *\n * The returned tuple should never be modified as it is not cloned.\n *\n * @param values  Values to return.\n *\n * @returns A function that returns `values` tuple.\n */\nexport function valuesProvider<T extends readonly any[]>(...values: T): (this: void) => T {\n  return () => values;\n}\n\n/**\n * Creates a provider of cloned arguments tuple.\n *\n * The returned tuple can be modified as it is cloned before the return.\n *\n * @param values  Values to return.\n *\n * @returns A function that returns a clone of `values` tuple.\n */\nexport function valuesCloner<T extends any[]>(...values: T): (this: void) => T {\n  return () => [...values] as T;\n}\n","/**\n * @module call-thru\n */\nimport { NextCall, nextCall, NextCall__symbol, NextCall_lastOutcome__symbol } from '../next-call';\n\nexport interface NextArgs<Args extends any[], NextReturn>\n    extends NextCall<'default', Args, NextReturn, NextReturn, Args> {\n\n  (): NextArgs<Args, NextReturn>;\n\n  [NextCall__symbol](callee: (this: void, ...args: Args) => NextReturn): NextReturn;\n\n  [NextCall_lastOutcome__symbol](): Args;\n\n}\n\n/**\n * Constructs arguments for the next function call.\n *\n * When returned from the lass pass, the outcome will contain a tuple containing `args`.\n *\n * @param args  Next function call arguments.\n *\n * @return A next function call with the given arguments.\n */\nexport function nextArgs<Args extends any[], NextReturn>(...args: Args): NextArgs<Args, NextReturn> {\n  return nextCall(callee => callee.apply(undefined, args), () => args);\n}\n","/**\n * @module call-thru\n */\nimport { NextCall, nextCall, NextCall__symbol, NextCall_lastOutcome__symbol } from '../next-call';\nimport { PassedThru } from '../passed-thru';\nimport { forEachItem, lastItems } from './iteration';\n\ndeclare module '../call-outcome' {\n  export namespace CallOutcome {\n    export interface Map<Return, Out> {\n\n      /**\n       * Iterable outcome type.\n       */\n      each(): Iterable<PassedThru.Item<NextCall.Callee.Return<Return>>>;\n\n    }\n  }\n}\n\nexport interface NextEach<NextItem, NextReturn> extends NextCall<\n    'each',\n    NextCall.Callee.Args<NextItem>,\n    NextReturn,\n    Iterable<PassedThru.Item<NextCall.Callee.Return<NextReturn>>>,\n    Iterable<PassedThru.Item<NextCall.LastOutcome<NextItem>>>> {\n\n  (): NextEach<NextItem, NextReturn>;\n\n  [NextCall__symbol](callee: (this: void, ...args: NextCall.Callee.Args<NextItem>) => NextReturn):\n      Iterable<PassedThru.Item<NextCall.Callee.Return<NextReturn>>>;\n\n  [NextCall_lastOutcome__symbol](): Iterable<PassedThru.Item<NextCall.LastOutcome<NextItem>>>;\n\n}\n\n/**\n * Creates an next call that invokes subsequent passes for each item in the given iterable.\n *\n * If `items` are [[NextCall]] implementations, then the next pass will be processed by them.\n *\n * When returned from the last pass, the chain outcome will be an iterable of the last pass outcomes of the `items`.\n * Or an iterable of `items` if they are not implementing [[NextCall]].\n *\n * @param items  An iterable of items to invoke the passes for.\n */\nexport function nextEach<NextItem, NextReturn>(items: Iterable<NextItem>): NextEach<NextItem, NextReturn> {\n  return nextCall(\n      callee => ({\n        [Symbol.iterator]() {\n          return forEachItem(items, callee);\n        },\n      }),\n      () => ({\n        [Symbol.iterator]() {\n          return lastItems(items);\n        },\n      }));\n}\n","/**\n * @module call-thru\n */\nimport { NextCall, NextCall__symbol, NextCall_lastOutcome__symbol } from '../next-call';\nimport { PassedThru } from '../passed-thru';\n\nexport function *forEachItem<NextItem, NextReturn>(\n    items: Iterable<NextItem>,\n    callee: (this: void, ...args: NextCall.Callee.Args<NextItem>) => NextReturn) {\n  for (const item of items) {\n    yield* PassedThru.items(\n        NextCall.is(item)\n            ? item[NextCall__symbol](callee)\n            : (callee as (arg: NextItem) => NextReturn)(item));\n  }\n}\n\nexport function *lastItems<NextItem>(items: Iterable<NextItem>) {\n  for (const item of items) {\n    yield* PassedThru.items(\n        NextCall.is(item)\n            ? item[NextCall_lastOutcome__symbol]()\n            : item);\n  }\n}\n\nexport function *flatItems<I>(items: Iterable<unknown>, depth: number): IterableIterator<any> {\n  if (!depth) {\n    yield *items;\n    return;\n  }\n  for (const item of items) {\n    if (isIterable(item)) {\n      yield *flatItems(item, depth - 1);\n    } else {\n      yield item;\n    }\n  }\n}\n\nfunction isIterable<I>(value: any): value is Iterable<I> {\n\n  const type = typeof value;\n\n  return (type === 'object' || type === 'function') && Symbol.iterator in value;\n}\n","/**\n * @module call-thru\n */\nimport { NextCall, nextCall, NextCall__symbol, NextCall_lastOutcome__symbol } from '../next-call';\nimport { PassedThru, PassedThru__symbol } from '../passed-thru';\n\ndeclare module '../call-outcome' {\n  export namespace CallOutcome {\n    export interface Map<Return, Out> {\n\n      /**\n       * Skipped call outcome type. Always `undefined`.\n       */\n      skip(): PassedThru<undefined, never>;\n\n    }\n  }\n}\n\nexport type SkippedThru = PassedThru<undefined, never>;\n\nexport interface NextSkip<NextArgs extends any[], NextReturn>\n    extends NextCall<'skip', NextArgs, NextReturn, SkippedThru> {\n\n  (): NextSkip<NextArgs, NextReturn>;\n\n  [NextCall__symbol](callee: (this: void, ...args: NextArgs) => NextReturn): SkippedThru;\n\n  [NextCall_lastOutcome__symbol](): SkippedThru;\n\n}\n\nconst SKIP: SkippedThru = {\n  [PassedThru__symbol]: undefined,\n  * [Symbol.iterator](): Iterator<never> {},\n};\n\nfunction _skip(): SkippedThru {\n  return SKIP;\n}\n\nconst _nextSkip: NextCall<'skip', any[], any, SkippedThru> = nextCall(_skip, _skip);\n\n/**\n * Constructs a next call that skips the rest of the chain.\n *\n * This has the same effect as `nextReturn(undefined)`.\n */\nexport function nextSkip<NextArgs extends any[], NextReturn>(): NextSkip<NextArgs, NextReturn> {\n  return _nextSkip as NextCall<'skip', NextArgs, NextReturn, SkippedThru>;\n}\n","/**\n * @module a-iterable\n */\n/**\n * A type of elements of iterable.\n *\n * @typeparam T  A type of iterable.\n */\nexport type IterableElement<T extends Iterable<any>> = T extends Iterable<infer E> ? E : never;\n\n/**\n * Arbitrary class implementing `Iterable` interface.\n *\n * @typeparam T  A type of iterable.\n * @typeparam E  A type of elements to iterate.\n */\nexport interface IterableClass<T extends Iterable<E>, E = IterableElement<T>> extends Function {\n  prototype: T;\n  new (...args: any[]): T;\n}\n\n/**\n * Checks whether the given value is array-like.\n *\n * @param target  A value to check.\n *\n * @returns `true` if the `value` has a `length` property, or `false` otherwise.\n */\nexport function isArrayLike<T>(target: any): target is ArrayLike<T> {\n  return 'length' in target;\n}\n","/**\n * @module a-iterable\n */\n/**\n * An iterable which elements order can be reversed.\n *\n * Arrays implement this interface.\n */\nexport interface RevertibleIterable<T> extends Iterable<T> {\n\n  /**\n   * Returns an iterable containing this iterable's elements in reverse order.\n   *\n   * Corresponds to `Array.prototype.reverse()`. Note however, that the array counterpart reverses elements _in place_\n   * rather than creating a new array.\n   *\n   * @return Reversed iterable instance.\n   */\n  reverse(): Iterable<T>;\n\n}\n\n/**\n * Checks whether the given iterable is revertible.\n *\n * This is always `true` for arrays.\n *\n * @param iterable  Iterable to check.\n *\n * @returns `true` if `iterable` has a `reverse` property, or `false` otherwise.\n */\nexport function itsRevertible<T>(iterable: Iterable<T>): iterable is RevertibleIterable<T> {\n  return 'reverse' in iterable;\n}\n","/**\n * @module a-iterable\n */\nimport { RevertibleIterable } from './revertible-iterable';\n\n/**\n * Starts iteration over the given `iterable`.\n *\n * This is a shortcut for `iterable[Symbol.iterator]` to make it friendlier to minification.\n *\n * @param iterable  An iterable to iterate over.\n *\n * @return An iterator.\n */\nexport function itsIterator<T>(iterable: Iterable<T>): Iterator<T> {\n  return iterable[Symbol.iterator]();\n}\n\n/**\n * Builds an iterable iterator over the given `iterable`.\n *\n * @param iterable  An iterable to iterate over.\n *\n * @return An iterator.\n */\nexport function itsIterable<T>(iterable: Iterable<T>): IterableIterator<T> {\n  return function* () { yield* iterable; }();\n}\n\n/**\n * Creates custom iterable.\n *\n * @param iterate  A no-arg function constructing an iterator.\n * @param reverse  When `undefined` or unspecified the created iterable won't be reversible.\n *\n * @returns New iterable.\n */\nexport function makeIt<T>(iterate: (this: Iterable<T>) => Iterator<T>, reverse?: undefined): Iterable<T>;\n\n/**\n * Creates custom revertible iterable.\n *\n * @param iterate  A no-arg function constructing an iterator.\n * @param reverse  A no-arg function constructing a reverse iterable.\n *\n * @returns New reversible iterable.\n */\nexport function makeIt<T>(\n    iterate: (this: RevertibleIterable<T>) => Iterator<T>,\n    reverse: (this: RevertibleIterable<T>) => Iterable<T>): RevertibleIterable<T>;\n\nexport function makeIt<T>(\n    iterate: (this: RevertibleIterable<T>) => Iterator<T>,\n    reverse?: (this: RevertibleIterable<T>) => Iterable<T>): Iterable<T> {\n\n  const iterable: Iterable<T> = {\n    [Symbol.iterator]: iterate,\n  };\n\n  if (!reverse) {\n    return iterable;\n  }\n\n  const reversible = iterable as RevertibleIterable<T>;\n\n  reversible.reverse = reverse;\n\n  return reversible;\n}\n","/**\n * @module a-iterable\n */\nimport { isArrayLike } from './api';\nimport { itsRevertible, RevertibleIterable } from './revertible-iterable';\nimport { itsIterator, makeIt } from './util';\n\n/**\n * Constructs a reversed iterable.\n *\n * If the `source` iterable is an array-like structure, then uses `reverseArray()` function to revert the constructed\n * iterable.\n * If the `source` iterable is revertible, then uses its `reverse()` method to revert the constructed one.\n * Otherwise stores elements to array and reverts them with `reverseArray()` function.\n *\n * @param source  A source iterable.\n *\n * @returns An iterable of the `source` elements in reverse order.\n */\nexport function reverseIt<T>(source: Iterable<T> | RevertibleIterable<T> | ArrayLike<T>): Iterable<T> {\n  if (isArrayLike(source)) {\n    return reverseArray(source);\n  }\n  if (itsRevertible(source)) {\n\n    const reversed = source.reverse();\n\n    return makeIt(() => itsIterator(reversed));\n  }\n  return reverseArray([...source]);\n}\n\n/**\n * Constructs an iterable of array-like structure elements in reverse order.\n *\n * @param array  Source array.\n *\n * @returns An iterable of the `source` elements in reverse order.\n */\nexport function reverseArray<T>(array: ArrayLike<T>): Iterable<T> {\n  return makeIt(\n      function* () {\n\n        const len = array.length;\n\n        for (let i = len - 1; i >= 0; --i) {\n          yield array[i];\n        }\n      });\n}\n","/**\n * @module a-iterable\n */\nimport { isArrayLike } from './api';\nimport { itsRevertible, RevertibleIterable } from './revertible-iterable';\nimport { itsIterator } from './util';\n\n/**\n * Performs the given `action` for each element of the given `iterable`.\n *\n * @typeparam T  A type of `iterable` elements.\n * @param iterable  An iterable of elements to perform actions on.\n * @param action  An action to perform on each iterable element. This is a function accepting an element as its only\n * parameter.\n */\nexport function itsEach<T>(iterable: Iterable<T>, action: (element: T) => void) {\n  for (const element of iterable) {\n    action(element);\n  }\n}\n\n/**\n * Checks whether the given `iterable` is empty.\n *\n * @param iterable  Iterable to check for elements.\n *\n * @return `true` if the given iterable contains at least one element, or `false` otherwise.\n */\nexport function itsEmpty(iterable: Iterable<any>): boolean {\n  return !!itsIterator(iterable).next().done;\n}\n\n/**\n * Tests whether all elements of the given `iterable` pass the test implemented by the provided function.\n *\n * @typeparam T  A type of `iterable` elements.\n * @param iterable  An iterable to test elements of.\n * @param test  A predicate function to test each element. Returns `true` to continue tests, or `false` to stop it\n * and return `false` from the method call. It accepts the tested element as the only parameter.\n *\n * @returns `true` if the `test` function returned a truthy value for every element, or `false` otherwise.\n * Returns `true` for empty iterable.\n */\nexport function itsEvery<T>(iterable: Iterable<T>, test: (element: T) => boolean): boolean {\n  for (const element of iterable) {\n    if (!test(element)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Returns the first element of the given `iterable`.\n *\n * @typeparam T  A type of `iterable` elements.\n * @param iterable  Iterable to extract element from.\n *\n * @return Either the first element, or `undefined` if the given `iterable` is empty.\n */\nexport function itsFirst<T>(iterable: Iterable<T>): T | undefined {\n  return itsIterator(iterable).next().value;\n}\n\n/**\n * Returns the last element of the given `iterable`.\n *\n * If the given `iterable` is an array-like structure, then just returns its last element. If it is revertible,\n * then extracts the first element of reverted one. Otherwise iterates over elements to find the last one.\n *\n * @typeparam T  A type of `iterable` elements.\n * @param iterable  Iterable to extract element from.\n *\n * @return Either the last element, or `undefined` if the given `iterable` is empty.\n */\nexport function itsLast<T>(iterable: Iterable<T> | RevertibleIterable<T> | ArrayLike<T>): T | undefined {\n  if (isArrayLike(iterable)) {\n    return iterable[iterable.length - 1];\n  }\n  if (itsRevertible(iterable)) {\n    return itsFirst(iterable.reverse());\n  }\n\n  let last: T | undefined;\n\n  for (const element of iterable) {\n    last = element;\n  }\n\n  return last;\n}\n\n/**\n * Applies a function against an accumulator and each element of the given `iterable` to reduce elements to a single\n * value.\n *\n * @typeparam T  A type of `iterable` elements.\n * @typeparam R  A type of reduced value.\n * @param iterable  An iterable to reduce values of.\n * @param reducer  A function to apply the value returned from the previous `reducer` call and to each element.\n * @param initialValue  Initial value passed to the first `reducer` call.\n *\n * @return Reduced value returned from the last `reducer` call, or `initialValue` if there is no elements in the given\n * `iterable`.\n */\nexport function itsReduction<T, R>(\n    iterable: Iterable<T>,\n    reducer: (prev: R, element: T) => R,\n    initialValue: R): R {\n\n  let reduced = initialValue;\n\n  for (const element of iterable) {\n    reduced = reducer(reduced, element);\n  }\n\n  return reduced;\n}\n","/**\n * @module a-iterable\n */\nimport { callThru, NextCall, nextEach, PassedThru } from 'call-thru';\nimport Last = NextCall.LastResult;\nimport Out = NextCall.Outcome;\nimport Result = NextCall.CallResult;\n\n/**\n * Passes each element of the given iterable trough a chain of transformation passes.\n *\n * The passes are preformed by `callThru()` function.\n *\n * @returns Next iterable of transformed elements.\n */\nexport function thruIt<T, R1>(\n    it: Iterable<T>,\n    fn: (this: void, arg: T) => Last<R1>,\n): Iterable<PassedThru.Item<R1>>;\n\nexport function thruIt<\n    T, R1 extends Result<P2>,\n    P2 extends any[], R2>(\n    it: Iterable<T>,\n    fn1: (this: void, arg: T) => R1,\n    fn2: (this: void, ...args: P2) => Last<R2>,\n): Iterable<PassedThru.Item<Out<R1, R2>>>;\n\nexport function thruIt<\n    T, R1 extends Result<P2>,\n    P2 extends any[], R2 extends Result<P3>,\n    P3 extends any[], R3>(\n    it: Iterable<T>,\n    fn1: (this: void, arg: T) => R1,\n    fn2: (this: void, ...args: P2) => R2,\n    fn3: (this: void, ...args: P3) => Last<R3>,\n): Iterable<PassedThru.Item<Out<R1, Out<R2, R3>>>>;\n\nexport function thruIt<\n    T, R1 extends Result<P2>,\n    P2 extends any[], R2 extends Result<P3>,\n    P3 extends any[], R3 extends Result<P4>,\n    P4 extends any[], R4>(\n    it: Iterable<T>,\n    fn1: (this: void, arg: T) => R1,\n    fn2: (this: void, ...args: P2) => R2,\n    fn3: (this: void, ...args: P3) => R3,\n    fn4: (this: void, ...args: P4) => Last<R4>,\n): Iterable<PassedThru.Item<Out<R1, Out<R2, Out<R3, Last<R4>>>>>>;\n\nexport function thruIt<\n    T, R1 extends Result<P2>,\n    P2 extends any[], R2 extends Result<P3>,\n    P3 extends any[], R3 extends Result<P4>,\n    P4 extends any[], R4 extends Result<P5>,\n    P5 extends any[], R5>(\n    it: Iterable<T>,\n    fn1: (this: void, arg: T) => R1,\n    fn2: (this: void, ...args: P2) => R2,\n    fn3: (this: void, ...args: P3) => R3,\n    fn4: (this: void, ...args: P4) => R4,\n    fn5: (this: void, ...args: P5) => Last<R5>,\n): Iterable<PassedThru.Item<Out<R1, Out<R2, Out<R3, Out<R4, R5>>>>>>;\n\nexport function thruIt<\n    T, R1 extends Result<P2>,\n    P2 extends any[], R2 extends Result<P3>,\n    P3 extends any[], R3 extends Result<P4>,\n    P4 extends any[], R4 extends Result<P5>,\n    P5 extends any[], R5 extends Result<P6>,\n    P6 extends any[], R6>(\n    it: Iterable<T>,\n    fn1: (this: void, arg: T) => R1,\n    fn2: (this: void, ...args: P2) => R2,\n    fn3: (this: void, ...args: P3) => R3,\n    fn4: (this: void, ...args: P4) => R4,\n    fn5: (this: void, ...args: P5) => R5,\n    fn6: (this: void, ...args: P6) => Last<R6>,\n): Iterable<PassedThru.Item<Out<R1, Out<R2, Out<R3, Out<R4, Out<R5,\n    R6>>>>>>>;\n\nexport function thruIt<\n    T, R1 extends Result<P2>,\n    P2 extends any[], R2 extends Result<P3>,\n    P3 extends any[], R3 extends Result<P4>,\n    P4 extends any[], R4 extends Result<P5>,\n    P5 extends any[], R5 extends Result<P6>,\n    P6 extends any[], R6 extends Result<P7>,\n    P7 extends any[], R7>(\n    it: Iterable<T>,\n    fn1: (this: void, arg: T) => R1,\n    fn2: (this: void, ...args: P2) => R2,\n    fn3: (this: void, ...args: P3) => R3,\n    fn4: (this: void, ...args: P4) => R4,\n    fn5: (this: void, ...args: P5) => R5,\n    fn6: (this: void, ...args: P6) => R6,\n    fn7: (this: void, ...args: P7) => Last<R7>,\n): Iterable<PassedThru.Item<Out<R1, Out<R2, Out<R3, Out<R4, Out<R5,\n    Out<R6, R7>>>>>>>>;\n\nexport function thruIt<\n    T, R1 extends Result<P2>,\n    P2 extends any[], R2 extends Result<P3>,\n    P3 extends any[], R3 extends Result<P4>,\n    P4 extends any[], R4 extends Result<P5>,\n    P5 extends any[], R5 extends Result<P6>,\n    P6 extends any[], R6 extends Result<P7>,\n    P7 extends any[], R7 extends Result<P8>,\n    P8 extends any[], R8>(\n    it: Iterable<T>,\n    fn1: (this: void, arg: T) => R1,\n    fn2: (this: void, ...args: P2) => R2,\n    fn3: (this: void, ...args: P3) => R3,\n    fn4: (this: void, ...args: P4) => R4,\n    fn5: (this: void, ...args: P5) => R5,\n    fn6: (this: void, ...args: P6) => R6,\n    fn7: (this: void, ...args: P7) => R7,\n    fn8: (this: void, ...args: P8) => Last<R8>,\n): Iterable<PassedThru.Item<Out<R1, Out<R2, Out<R3, Out<R4, Out<R5,\n    Out<R6, Out<R7, R8>>>>>>>>>;\n\nexport function thruIt<\n    T, R1 extends Result<P2>,\n    P2 extends any[], R2 extends Result<P3>,\n    P3 extends any[], R3 extends Result<P4>,\n    P4 extends any[], R4 extends Result<P5>,\n    P5 extends any[], R5 extends Result<P6>,\n    P6 extends any[], R6 extends Result<P7>,\n    P7 extends any[], R7 extends Result<P8>,\n    P8 extends any[], R8 extends Result<P9>,\n    P9 extends any[], R9>(\n    it: Iterable<T>,\n    fn1: (this: void, arg: T) => R1,\n    fn2: (this: void, ...args: P2) => R2,\n    fn3: (this: void, ...args: P3) => R3,\n    fn4: (this: void, ...args: P4) => R4,\n    fn5: (this: void, ...args: P5) => R5,\n    fn6: (this: void, ...args: P6) => R6,\n    fn7: (this: void, ...args: P7) => R7,\n    fn8: (this: void, ...args: P8) => R8,\n    fn9: (this: void, ...args: P9) => Last<R9>,\n): Iterable<PassedThru.Item<Out<R1, Out<R2, Out<R3, Out<R4, Out<R5,\n    Out<R6, Out<R7, Out<R8, R9>>>>>>>>>>;\n\nexport function thruIt<\n    T, R1 extends Result<P2>,\n    P2 extends any[], R2 extends Result<P3>,\n    P3 extends any[], R3 extends Result<P4>,\n    P4 extends any[], R4 extends Result<P5>,\n    P5 extends any[], R5 extends Result<P6>,\n    P6 extends any[], R6 extends Result<P7>,\n    P7 extends any[], R7 extends Result<P8>,\n    P8 extends any[], R8 extends Result<P9>,\n    P9 extends any[], R9 extends Result<P10>,\n    P10 extends any[], R10>(\n    it: Iterable<T>,\n    fn1: (this: void, arg: T) => R1,\n    fn2: (this: void, ...args: P2) => R2,\n    fn3: (this: void, ...args: P3) => R3,\n    fn4: (this: void, ...args: P4) => R4,\n    fn5: (this: void, ...args: P5) => R5,\n    fn6: (this: void, ...args: P6) => R6,\n    fn7: (this: void, ...args: P7) => R7,\n    fn8: (this: void, ...args: P8) => R8,\n    fn9: (this: void, ...args: P9) => R9,\n    fn10: (this: void, ...args: P10) => Last<R10>,\n): Iterable<PassedThru.Item<Out<R1, Out<R2, Out<R3, Out<R4, Out<R5,\n    Out<R6, Out<R7, Out<R8, Out<R9, R10>>>>>>>>>>>;\n\nexport function thruIt<\n    T, R1 extends Result<P2>,\n    P2 extends any[], R2 extends Result<P3>,\n    P3 extends any[], R3 extends Result<P4>,\n    P4 extends any[], R4 extends Result<P5>,\n    P5 extends any[], R5 extends Result<P6>,\n    P6 extends any[], R6 extends Result<P7>,\n    P7 extends any[], R7 extends Result<P8>,\n    P8 extends any[], R8 extends Result<P9>,\n    P9 extends any[], R9 extends Result<P10>,\n    P10 extends any[], R10 extends Result<P11>,\n    P11 extends any[], R11>(\n    it: Iterable<T>,\n    fn1: (this: void, arg: T) => R1,\n    fn2: (this: void, ...args: P2) => R2,\n    fn3: (this: void, ...args: P3) => R3,\n    fn4: (this: void, ...args: P4) => R4,\n    fn5: (this: void, ...args: P5) => R5,\n    fn6: (this: void, ...args: P6) => R6,\n    fn7: (this: void, ...args: P7) => R7,\n    fn8: (this: void, ...args: P8) => R8,\n    fn9: (this: void, ...args: P9) => R9,\n    fn10: (this: void, ...args: P10) => R10,\n    fn11: (this: void, ...args: P11) => Last<R11>,\n): Iterable<PassedThru.Item<Out<R1, Out<R2, Out<R3, Out<R4, Out<R5,\n    Out<R6, Out<R7, Out<R8, Out<R9, Out<R10,\n        R11>>>>>>>>>>>>;\n\nexport function thruIt<\n    T, R1 extends Result<P2>,\n    P2 extends any[], R2 extends Result<P3>,\n    P3 extends any[], R3 extends Result<P4>,\n    P4 extends any[], R4 extends Result<P5>,\n    P5 extends any[], R5 extends Result<P6>,\n    P6 extends any[], R6 extends Result<P7>,\n    P7 extends any[], R7 extends Result<P8>,\n    P8 extends any[], R8 extends Result<P9>,\n    P9 extends any[], R9 extends Result<P10>,\n    P10 extends any[], R10 extends Result<P11>,\n    P11 extends any[], R11 extends Result<P12>,\n    P12 extends any[], R12>(\n    it: Iterable<T>,\n    fn1: (this: void, arg: T) => R1,\n    fn2: (this: void, ...args: P2) => R2,\n    fn3: (this: void, ...args: P3) => R3,\n    fn4: (this: void, ...args: P4) => R4,\n    fn5: (this: void, ...args: P5) => R5,\n    fn6: (this: void, ...args: P6) => R6,\n    fn7: (this: void, ...args: P7) => R7,\n    fn8: (this: void, ...args: P8) => R8,\n    fn9: (this: void, ...args: P9) => R9,\n    fn10: (this: void, ...args: P10) => R10,\n    fn11: (this: void, ...args: P11) => R11,\n    fn12: (this: void, ...args: P12) => Last<R12>,\n): Iterable<PassedThru.Item<Out<R1, Out<R2, Out<R3, Out<R4, Out<R5,\n    Out<R6, Out<R7, Out<R8, Out<R9, Out<R10,\n        Out<R11, R12>>>>>>>>>>>>>;\n\nexport function thruIt<\n    T, R1 extends Result<P2>,\n    P2 extends any[], R2 extends Result<P3>,\n    P3 extends any[], R3 extends Result<P4>,\n    P4 extends any[], R4 extends Result<P5>,\n    P5 extends any[], R5 extends Result<P6>,\n    P6 extends any[], R6 extends Result<P7>,\n    P7 extends any[], R7 extends Result<P8>,\n    P8 extends any[], R8 extends Result<P9>,\n    P9 extends any[], R9 extends Result<P10>,\n    P10 extends any[], R10 extends Result<P11>,\n    P11 extends any[], R11 extends Result<P12>,\n    P12 extends any[], R12 extends Result<P13>,\n    P13 extends any[], R13>(\n    it: Iterable<T>,\n    fn1: (this: void, arg: T) => R1,\n    fn2: (this: void, ...args: P2) => R2,\n    fn3: (this: void, ...args: P3) => R3,\n    fn4: (this: void, ...args: P4) => R4,\n    fn5: (this: void, ...args: P5) => R5,\n    fn6: (this: void, ...args: P6) => R6,\n    fn7: (this: void, ...args: P7) => R7,\n    fn8: (this: void, ...args: P8) => R8,\n    fn9: (this: void, ...args: P9) => R9,\n    fn10: (this: void, ...args: P10) => R10,\n    fn11: (this: void, ...args: P11) => R11,\n    fn12: (this: void, ...args: P12) => R12,\n    fn13: (this: void, ...args: P13) => Last<R13>,\n): Iterable<PassedThru.Item<Out<R1, Out<R2, Out<R3, Out<R4, Out<R5,\n    Out<R6, Out<R7, Out<R8, Out<R9, Out<R10,\n        Out<R11, Out<R12, R13>>>>>>>>>>>>>>;\n\nexport function thruIt<T, R>(\n    it: Iterable<T>,\n    ...fns: ((...args: any[]) => any)[]): Iterable<PassedThru.Item<R>> {\n\n  const thru: () => Iterable<PassedThru.Item<R>> = (callThru as any)(\n      nextEach(it),\n      ...fns);\n\n  return thru();\n}\n","/**\n * @module a-iterable\n */\nimport { makeIt } from './util';\n\n/**\n * Creates an iterable with all `source` iterable elements that pass the test implemented by the provided function.\n *\n * @typeparam T  A type of source elements.\n * @param source  A source iterable.\n * @param test  A predicate function to test each element. Returns `true` to keep the element, or `false` otherwise.\n * It accepts the tested element as the only parameter.\n *\n * @return A new iterable with the elements that pass the test. If no elements passed the test, an empty iterable will\n * be returned.\n */\nexport function filterIt<T>(source: Iterable<T>, test: (element: T) => boolean): Iterable<T>;\n\n/**\n * Creates an iterable with all `source` iterable elements extending the given type.\n *\n * @typeparam T  A type of source elements\n * @typeparam R  Target type.\n * @param source  A source iterable.\n * @param test  A predicate function to test that element extends the type `R`. Returns `true` to keep the element, or\n * `false` otherwise. It accepts the tested element as the only parameter.\n *\n * @return A new iterable with the elements that pass the test. If no elements passed the test, an empty iterable will\n * be returned.\n */\nexport function filterIt<T, R extends T>(source: Iterable<T>, test: (element: T) => element is R): Iterable<R>;\n\nexport function filterIt<T>(source: Iterable<T>, test: (element: T) => boolean): Iterable<T> {\n  return makeIt(function* () {\n    for (const element of source) {\n      if (test(element)) {\n        yield element;\n      }\n    }\n  });\n}\n\n/**\n * First maps each element of the `source` iterable using a mapping function, then flattens the result into a new\n * iterable.\n *\n * @typeparam T  A type of source elements.\n * @typeparam R  A type of converted elements.\n * @param source  A source iterable.\n * @param convert  A function that produces a new iterable, taking the source element as the only parameter.\n *\n * @returns A new iterable with each element being the flattened result of the `convert` function call.\n */\nexport function flatMapIt<T, R>(source: Iterable<T>, convert: (element: T) => Iterable<R>): Iterable<R> {\n  return makeIt(function* () {\n    for (const element of source) {\n      yield* convert(element);\n    }\n  });\n}\n\n/**\n * Creates a new iterable with the results of calling a provided function on every element of the `source` one.\n *\n * @typeparam T  A type of source elements.\n * @typeparam R  A type of converted elements.\n * @param source  A source iterable.\n * @param convert  A function that produces an element of the new iterable, taking the source element as the only\n * parameter.\n */\nexport function mapIt<T, R>(source: Iterable<T>, convert: (element: T) => R): Iterable<R> {\n  return makeIt(function* () {\n    for (const element of source) {\n      yield convert(element);\n    }\n  });\n}\n","/**\n * @module a-iterable\n */\nimport { NextCall, PassedThru } from 'call-thru';\nimport { IterableClass, IterableElement } from './api';\nimport { ArrayLikeIterable } from './array-like-iterable';\nimport { reverseArray, reverseIt } from './reverse';\nimport { RevertibleIterable } from './revertible-iterable';\nimport { itsEach, itsEvery, itsReduction } from './termination';\nimport { thruIt } from './thru';\nimport { filterIt, flatMapIt, mapIt } from './transform';\nimport { itsIterator, makeIt } from './util';\nimport Result = NextCall.CallResult;\nimport Last = NextCall.LastResult;\nimport Out = NextCall.Outcome;\n\nconst API_METHODS: (keyof ArrayLikeIterable<any>)[] = [\n  'every',\n  'filter',\n  'flatMap',\n  'forEach',\n  'map',\n  'reduce',\n  'reverse',\n];\n\n/**\n * Abstract `Iterable` implementation with array-like iteration operations.\n *\n * @typeparam T  A type of elements.\n */\nexport abstract class AIterable<T> implements ArrayLikeIterable<T> {\n\n  /**\n   * Returns an iterable without elements.\n   *\n   * @returns An empty iterable instance.\n   */\n  static none<T>(): AIterable<T> {\n    return NONE; // tslint:disable-line:no-use-before-declare\n  }\n\n  /**\n   * Checks whether the given iterable is an array-like one.\n   *\n   * @param source  An iterable to check.\n   *\n   * @returns `true` is the `source` has all `ArrayLikeIterable` methods (like `Array` or `AIterable` instance),\n   * or `false` otherwise.\n   */\n  static is<T>(source: Iterable<T>): source is ArrayLikeIterable<T> {\n    return API_METHODS.every(name => name in source);\n  }\n\n  /**\n   * Creates an [[AIterable]] instance that iterates over the same elements as the given one if necessary.\n   *\n   * @param source  A source array-like iterable.\n   *\n   * @return A `source` itself.\n   */\n  static of<T>(source: ArrayLikeIterable<T>): typeof source;\n\n  /**\n   * Creates an [[AIterable]] instance that iterates over the same elements as the given one if necessary.\n   *\n   * @param source  A source iterable.\n   *\n   * @return Either `source` itself if it implements `ArrayLikeIterable` already (see `is()` method),\n   * or new [[AIterable]] instance iterating over the `source`.\n   */\n  static of<T>(source: Iterable<T>): AIterable<T>;\n\n  static of<T>(source: Iterable<T> | RevertibleIterable<T> | T[]): ArrayLikeIterable<T> {\n    if (AIterable.is(source)) {\n      return source;\n    }\n    return AIterable.from(source);\n  }\n\n  /**\n   * Creates an `AIterable` instance that iterates over the same elements as the given one.\n   *\n   * Uses [[reverseIt]] function to reverse the constructed iterable.\n   *\n   * @param source  A source iterable.\n   *\n   * @return Always new `AIterable` instance.\n   */\n  static from<T>(source: Iterable<T> | RevertibleIterable<T> | T[]): AIterable<T> {\n    return make(() => source, () => reverseIt(source));\n  }\n\n  abstract [Symbol.iterator](): Iterator<T>;\n\n  /**\n   * Tests whether all elements pass the test implemented by the provided function.\n   *\n   * Corresponds to `Array.prototype.every()`.\n   *\n   * @param test  A predicate function to test each element. Returns `true` to continue tests, or `false` to stop it\n   * and return `false` from the method call. It accepts the tested element as the only parameter.\n   *\n   * @returns `true` if the `test` function returned a truthy value for every element, or `false` otherwise.\n   * Returns `true` for empty iterable.\n   */\n  every(test: (element: T) => boolean): boolean {\n    return itsEvery(this, test);\n  }\n\n  /**\n   * Creates an iterable with all elements that pass the test implemented by the provided function.\n   *\n   * Corresponds to `Array.prototype.filter()`.\n   *\n   * @param test  A predicate function to test each element. Returns `true` to keep the element, or `false` otherwise.\n   * It accepts the tested element as the only parameter.\n   *\n   * @return A new [[AIterable]] with the elements that pass the test. If no elements passed the test, an empty iterable\n   * will be returned.\n   */\n  filter(test: (element: T) => boolean): AIterable<T>;\n\n  /**\n   * Creates an iterable with all elements extending the given type.\n   *\n   * Corresponds to `Array.prototype.filter()`.\n   *\n   * @typeparam R  Target type.\n   * @param test  A predicate function to test that element extends the type R. Returns `true` to keep the element, or\n   * `false` otherwise. It accepts the tested element as the only parameter.\n   *\n   * @return A new [[AIterable]] with the elements that pass the test. If no elements passed the test, an empty iterable\n   * will be returned.\n   */\n  filter<R extends T>(test: (element: T) => element is R): AIterable<R>;\n\n  filter(test: (element: T) => boolean): AIterable<T> {\n    return make(\n        () => filterIt(this, test),\n        () => filterIt(this.reverse(), test));\n  }\n\n  /**\n   * First maps each element using a mapping function, then flattens the result into a new iterable.\n   *\n   * Corresponds to `Array.prototype.flatMap()`.\n   *\n   * Note that the overridden `flatMap` method of `ArrayLikeIterable` expects an array to be returned from `convert`\n   * callback, while in this method it may return arbitrary iterable.\n   *\n   * @typeparam R  A type of converted elements.\n   * @param convert  A function that produces a new iterable, taking the source element as the only parameter.\n   *\n   * @returns A new [[AIterable]] with each element being the flattened result of the `convert` function call.\n   */\n  flatMap<R>(convert: (element: T) => Iterable<R>): AIterable<R> {\n    return make(\n        () => flatMapIt(this, convert),\n        () => flatMapIt(this.reverse(), element => reverseIt(convert(element))));\n  }\n\n  /**\n   * Performs the given `action` for each element.\n   *\n   * Corresponds to `Array.prototype.forEach()`.\n   *\n   * @param action  An action to perform on each iterable element. This is a function accepting an element as its only\n   * parameter.\n   */\n  forEach(action: (element: T) => void) {\n    itsEach(this, action);\n  }\n\n  /**\n   * Creates a new iterable with the results of calling a provided function on every element.\n   *\n   * Corresponds to `Array.prototype.map()`.\n   *\n   * @typeparam R  A type of converted elements.\n   * @param convert  A function that produces an element of the new iterable, taking the source element as the only\n   * parameter.\n   *\n   * @return A new [[AIterable]] with each element being the result of the `convert` function call.\n   */\n  map<R>(convert: (element: T) => R): AIterable<R> {\n    return make(\n        () => mapIt(this, convert),\n        () => mapIt(this.reverse(), convert));\n  }\n\n  /**\n   * Applies a function against an accumulator and each element to reduce elements to a single value.\n   *\n   * Corresponds to `Array.prototype.reduce()`.\n   *\n   * @typeparam R  A type of reduced value.\n   * @param reducer  A function to apply the value returned from the previous `reducer` call and to each element.\n   * @param initialValue  Initial value passed to the first `reducer` call.\n   *\n   * @return Reduced value returned from the last `reducer` call, or `initialValue` if there is no elements in this\n   * iterable.\n   */\n  reduce<R>(reducer: (prev: R, element: T) => R, initialValue: R): R {\n    return itsReduction(this, reducer, initialValue);\n  }\n\n  /**\n   * Constructs an iterable containing this iterable's elements in reverse order.\n   *\n   * By default this method converts iterable to array and then reverts its elements with [[reverseArray]] function.\n   *\n   * @return Reversed [[AIterable]] instance.\n   */\n  reverse(): AIterable<T> {\n\n    const elements = this;\n\n    return make(() => reverseArray([...elements]), () => this);\n  }\n\n  /**\n   * Passes each element of this iterable trough a chain of transformation passes.\n   *\n   * The passes are preformed by `callThru()` function.\n   *\n   * @returns Next iterable of transformed elements.\n   */\n  thru<R1>(\n      fn: (this: void, arg: T) => Last<R1>,\n  ): AIterable<PassedThru.Item<R1>>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2>(\n      fn1: (this: void, arg: T) => R1,\n      fn2: (this: void, ...args: P2) => Last<R2>,\n  ): AIterable<PassedThru.Item<Out<R1, R2>>>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3>(\n      fn1: (this: void, arg: T) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => Last<R3>,\n  ): AIterable<PassedThru.Item<Out<R1, Out<R2, R3>>>>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4>(\n      fn1: (this: void, arg: T) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => Last<R4>,\n  ): AIterable<PassedThru.Item<Out<R1, Out<R2, Out<R3, Last<R4>>>>>>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5>(\n      fn1: (this: void, arg: T) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => Last<R5>,\n  ): AIterable<PassedThru.Item<Out<R1, Out<R2, Out<R3, Out<R4, R5>>>>>>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6>(\n      fn1: (this: void, arg: T) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => Last<R6>,\n  ): AIterable<PassedThru.Item<Out<R1, Out<R2, Out<R3, Out<R4, Out<R5,\n      R6>>>>>>>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7>(\n      fn1: (this: void, arg: T) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => Last<R7>,\n  ): AIterable<PassedThru.Item<Out<R1, Out<R2, Out<R3, Out<R4, Out<R5,\n      Out<R6, R7>>>>>>>>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8>(\n      fn1: (this: void, arg: T) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => Last<R8>,\n  ): AIterable<PassedThru.Item<Out<R1, Out<R2, Out<R3, Out<R4, Out<R5,\n      Out<R6, Out<R7, R8>>>>>>>>>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9>(\n      fn1: (this: void, arg: T) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => Last<R9>,\n  ): AIterable<PassedThru.Item<Out<R1, Out<R2, Out<R3, Out<R4, Out<R5,\n      Out<R6, Out<R7, Out<R8, R9>>>>>>>>>>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10>(\n      fn1: (this: void, arg: T) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => Last<R10>,\n  ): AIterable<PassedThru.Item<Out<R1, Out<R2, Out<R3, Out<R4, Out<R5,\n      Out<R6, Out<R7, Out<R8, Out<R9, R10>>>>>>>>>>>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10 extends Result<P11>,\n      P11 extends any[], R11>(\n      fn1: (this: void, arg: T) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => R10,\n      fn11: (this: void, ...args: P11) => Last<R11>,\n  ): AIterable<PassedThru.Item<Out<R1, Out<R2, Out<R3, Out<R4, Out<R5,\n      Out<R6, Out<R7, Out<R8, Out<R9, Out<R10,\n          R11>>>>>>>>>>>>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10 extends Result<P11>,\n      P11 extends any[], R11 extends Result<P12>,\n      P12 extends any[], R12>(\n      fn1: (this: void, arg: T) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => R10,\n      fn11: (this: void, ...args: P11) => R11,\n      fn12: (this: void, ...args: P12) => Last<R12>,\n  ): AIterable<PassedThru.Item<Out<R1, Out<R2, Out<R3, Out<R4, Out<R5,\n      Out<R6, Out<R7, Out<R8, Out<R9, Out<R10,\n          Out<R11, R12>>>>>>>>>>>>>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10 extends Result<P11>,\n      P11 extends any[], R11 extends Result<P12>,\n      P12 extends any[], R12 extends Result<P13>,\n      P13 extends any[], R13>(\n      fn1: (this: void, arg: T) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => R10,\n      fn11: (this: void, ...args: P11) => R11,\n      fn12: (this: void, ...args: P12) => R12,\n      fn13: (this: void, ...args: P13) => Last<R13>,\n  ): AIterable<PassedThru.Item<Out<R1, Out<R2, Out<R3, Out<R4, Out<R5,\n      Out<R6, Out<R7, Out<R8, Out<R9, Out<R10,\n          Out<R11, Out<R12, R13>>>>>>>>>>>>>>;\n\n  thru<R>(...fns: ((...args: any[]) => any)[]): AIterable<PassedThru.Item<R>> {\n\n    const thru = thruIt as any;\n\n    return make(() => thru(this, ...fns));\n  }\n\n}\n\nclass None extends AIterable<any> {\n\n  *[Symbol.iterator](): Iterator<any> {}\n\n  reverse() {\n    return this;\n  }\n\n}\n\nconst NONE = /*#__PURE__*/ new None();\n\nfunction make<T>(iterate: () => Iterable<T>, reverse?: () => Iterable<T>): AIterable<T> {\n\n  class Iterable extends AIterable<T> {\n\n    [Symbol.iterator]() {\n      return itsIterator(iterate());\n    }\n\n    reverse(): Iterable {\n      if (!reverse) {\n        return super.reverse();\n      }\n      return AIterable.from(makeIt(() => itsIterator(reverse()), () => this));\n    }\n\n  }\n\n  return new Iterable();\n}\n\n/**\n * Extends an iterable class with `AIterable` API.\n *\n * @typeparam C  A type of iterable class to extend.\n * @typeparam E  A type of elements to iterate.\n * @param iterableClass  A class to extend.\n *\n * @returns A new class extending original `iterableClass` and implementing the missing [[AIterable]] methods.\n */\nexport function toAIterable<C extends IterableClass<any, E>, E = IterableElement<InstanceType<C>>>(\n    iterableClass: C):\n    C & IterableClass<AIterable<E>, E> {\n\n  class ExtendedIterable extends iterableClass {\n  }\n\n  const extended = ExtendedIterable;\n  const proto = extended.prototype;\n\n  API_METHODS.forEach(name => {\n    if (!(name in proto)) {\n      Object.defineProperty(proto, name, {\n        configurable: true,\n        value: AIterable.prototype[name],\n      });\n    }\n  });\n\n  return extended as C & IterableClass<AIterable<E>, E>;\n}\n","/**\n * @module a-iterable\n */\nimport { reverseArray } from './reverse';\nimport { RevertibleIterable } from './revertible-iterable';\nimport { makeIt } from './util';\n\n/**\n * Builds an iterable over elements of array-like structure.\n *\n * @param array  An array-like structure. E.g. `Array`, DOM `NodeList`, etc.\n *\n * @returns A revertible iterable over array elements.\n */\nexport function overArray<T>(array: ArrayLike<T>): RevertibleIterable<T> {\n  return makeIt<T>(\n      function* () {\n        for (let i = 0; i < array.length; ++i) {\n          yield array[i];\n        }\n      },\n      () => reverseArray(array));\n}\n\nconst NONE: RevertibleIterable<any> = {\n\n  *[Symbol.iterator](): Iterator<any> {},\n\n  reverse() { return this; }\n\n};\n\n/**\n * Returns an iterable without elements.\n *\n * @typeparam T  A type of constructed iterable elements.\n *\n * @returns An empty iterable instance revertible to itself.\n */\nexport function overNone<T>(): RevertibleIterable<T> {\n  return NONE;\n}\n","/**\n * @module a-iterable\n */\nimport { overArray } from './construction';\nimport { RevertibleIterable } from './revertible-iterable';\nimport { mapIt } from './transform';\nimport { itsIterator, makeIt } from './util';\n\n/**\n * Builds an iterable over the keys of the given object.\n *\n * A list of keys is constructed using `Reflect.ownKeys()`.\n *\n * @param target  An object to select keys from.\n */\nexport function overKeys<T extends object>(target: T): RevertibleIterable<keyof T> {\n  return overArray(Reflect.ownKeys(target) as (keyof T)[]);\n}\n\n/**\n * Object property entry. This is a tuple consisting of property key and value.\n */\nexport type ObjectEntry<T, K extends keyof T = keyof T> = [K, T[K]];\n\n/**\n * Builds an iterable over the key/value entries of the given object.\n *\n * A list of keys is constructed using `Reflect.ownKeys()`.\n *\n * @param target  An object to select keys and values from.\n */\nexport function overEntries<T extends object>(target: T): RevertibleIterable<ObjectEntry<T>> {\n\n  const keys = overKeys(target);\n\n  function mapToEntries(_keys: Iterable<keyof T>): Iterable<ObjectEntry<T>> {\n    return mapIt(_keys, key => [key, target[key]] as ObjectEntry<T>);\n  }\n\n  return makeIt(() => itsIterator(mapToEntries(keys)), () => mapToEntries(keys.reverse()));\n}\n","/**\n * @module fun-events\n */\nimport { EventReceiver } from './event-receiver';\nimport { EventSupply } from './event-supply';\n\n/**\n * A key of event receiver registration method of [[EventKeeper]].\n *\n * @category Core\n */\nexport const AfterEvent__symbol = /*#__PURE__*/ Symbol('after-event');\n\n/**\n * An event supplier that keeps the last event sent.\n *\n * The registered event receiver would receive the kept event immediately upon registration, and all upcoming events\n * after that.\n *\n * @category Core\n * @typeparam E  An event type. This is a list of event receiver parameter types.\n */\nexport interface EventKeeper<E extends any[]> {\n\n  /**\n   * Registers a receiver of events kept and sent by this keeper.\n   *\n   * @param receiver  A receiver of events to register.\n   *\n   * @returns A supply of events from this keeper to the given `receiver`.\n   */\n  [AfterEvent__symbol](receiver: EventReceiver<E>): EventSupply;\n\n}\n\nexport namespace EventKeeper {\n\n  /**\n   * A type of events sent by the given event keeper.\n   *\n   * @typeparam T  Target event keeper.\n   */\n  export type Event<T extends EventKeeper<any>> = T extends EventKeeper<infer E> ? E : never;\n\n}\n\n/**\n * Checks whether the given object implements an [[EventKeeper]] interface.\n *\n * @category Core\n * @typeparam E  An event type. This is a list of event receiver parameter types.\n * @param value  An object to check.\n *\n * @returns `true` if `value` contains an `[AfterEvent__symbol]` property, or `false` otherwise.\n */\nexport function isEventKeeper<E extends any[]>(value: object): value is EventKeeper<E> {\n  return AfterEvent__symbol in value;\n}\n","/**\n * @module fun-events\n */\nimport { noop } from 'call-thru';\n\n/**\n * A supply of events from {@link EventSupplier event supplier} to {@link EventReceiver event receiver}.\n *\n * When no longer needed the supply may be {@link off cut off}.\n *\n * May be constructed using [[eventSupply]] function.\n *\n * @category Core\n */\nexport abstract class EventSupply {\n\n  /**\n   * Whether this supply is {@link off cut off} already.\n   *\n   * `true` means the events will no longer be supplied.\n   */\n  abstract readonly isOff: boolean;\n\n  /**\n   * Cuts off the supply of events.\n   *\n   * After this method call the receiver will no longer receive events.\n   *\n   * Calling this method for the second time has no effect.\n   *\n   * @param reason  An optional reason why supply is cut off. It will be reported to [[whenOff]] callbacks.\n   * @returns A cut off event supply instance.\n   */\n  abstract off(reason?: any): EventSupply;\n\n  /**\n   * Registers a callback function that will be called as soon as this supply is {@link off cut off}. This callback\n   * will be called immediately if [[isOff]] is `true`.\n   *\n   * @param callback  A callback function accepting optional cut off reason as its only parameter.\n   * By convenience an `undefined` reason means normal completion.\n   *\n   * @returns `this` instance.\n   */\n  abstract whenOff(callback: (this: void, reason?: any) => void): this;\n\n  /**\n   * Declares this event supply depends on another one.\n   *\n   * Once `another` supply is {@link off cut off}, this one is will be cut off with the same reason.\n   *\n   * @param another  An event supply this one depends on.\n   *\n   * @return `this` instance.\n   */\n  needs(another: EventSupply): this {\n    another.whenOff(reason => this.off(reason));\n    return this;\n  }\n\n}\n\n/**\n * Constructs new {@link EventSupply event supply}.\n *\n * @category Core\n * @param off  A function to call when supply will supply is {@link EventSupply.off cut off}. Accepts optional\n * cut off reason as its only parameter. No-op by default.\n */\nexport function eventSupply(off: (this: void, reason?: any) => void = noop): EventSupply {\n\n  let whenOff: (callback: (reason?: any) => void) => void;\n  let cutOff: (reason?: any) => void = reason => {\n    whenOff = callback => callback(reason);\n    cutOff = noop;\n    off(reason);\n  };\n\n  whenOff = callback => {\n\n    const prev = cutOff;\n\n    cutOff = reason => {\n      prev(reason);\n      callback(reason);\n    };\n  };\n\n  class Supply extends EventSupply {\n\n    get isOff() {\n      return cutOff === noop;\n    }\n\n    off(reason?: any): EventSupply {\n      cutOff(reason);\n      return this;\n    }\n\n    whenOff(callback: (reason?: any) => void): this {\n      whenOff(callback);\n      return this;\n    }\n\n  }\n\n  return new Supply();\n}\n\nclass NoSupply extends EventSupply {\n\n  get isOff() {\n    return true;\n  }\n\n  off() {\n    return this;\n  }\n\n  whenOff(callback: (reason?: any) => void): this {\n    callback();\n    return this;\n  }\n\n}\n\nconst noSupply = /*#__PURE__*/ new NoSupply();\n\n/**\n * Returns a no-event supply.\n *\n * @category Core\n *\n * @returns An event supply that is already cut off without any particular reason.\n */\nexport function noEventSupply(): EventSupply {\n  return noSupply;\n}\n","/**\n * @module fun-events\n */\nimport { noop } from 'call-thru';\nimport { eventSupply, EventSupply } from './event-supply';\n\n/**\n * Event receiver is called on each event sent by [[EventSender]] when registered.\n *\n * A receiver may be represented either by {@link EventReceiver.Function function}, or by\n * {@link EventReceiver.Object object}. The former is a simplest form. The latter allows control all aspects of event\n * processing.\n *\n * To register an event receiver just call the event sender's `[OnEvent__symbol]` or event keeper's\n * `[AfterEvent__symbol]` method with this event receiver as argument.\n *\n * A _recurrent event_ is an event sent from inside event receiver and targeted the same receiver. Recurrent event\n * processing is scheduled until after the current event processing finishes. To handle recurrent events in a specific\n * way the event receiver may utilize an {@link EventReceiver.Context event processing context} available as\n * a first parameter of [[EventReceiver.Object.receive]] method.\n *\n * @category Core\n * @typeparam E  An event type. This is a tuple of event receiver parameter types.\n */\nexport type EventReceiver<E extends any[]> = EventReceiver.Function<E> | EventReceiver.Object<E>;\n\nexport namespace EventReceiver {\n\n  /**\n   * Event receiver function signature.\n   *\n   * It never receives event processing context.\n   *\n   * @typeparam E  An event type. This is a tuple of event receiver parameter types.\n   */\n  export type Function<E extends any[]> =\n  /**\n   * @param event  An event represented by function call arguments.\n   */\n      (this: void, ...event: E) => void;\n\n  /**\n   * Event receiver object.\n   *\n   * @typeparam E  An event type. This is a tuple of event receiver parameter types.\n   */\n  export interface Object<E extends any[]> {\n\n    /**\n     * Event supply to this receiver.\n     *\n     * Events will be supplied to this receiver until this supply is {@link EventSupply.off cut off}.\n     *\n     * When omitted a new supply will be created per receiver registration within event supplier.\n     */\n    readonly supply?: EventSupply;\n\n    /**\n     * Receives an event.\n     *\n     * @param context  An event processing context.\n     * @param event  An event represented as the rest of arguments.\n     */\n    receive(context: Context<E>, ...event: E): void;\n\n  }\n\n  /**\n   * The most generic event receiver form.\n   *\n   * Any event receiver may be converted to generic form by [[eventReceiver]] function.\n   *\n   * In contrast to [[Object]] this one always has a supply.\n   *\n   * @typeparam E  An event type. This is a tuple of event receiver parameter types.\n   */\n  export interface Generic<E extends any[]> extends Object<E> {\n\n    readonly supply: EventSupply;\n\n  }\n\n  /**\n   * Event processing context.\n   *\n   * It is passed to [[Object]] receivers.\n   *\n   * @typeparam E  An event type. This is a tuple of event receiver parameter types.\n   */\n  export interface Context<E extends any[]> {\n\n    /**\n     * Schedules the given event receiver to be called to process recurrent event(s).\n     *\n     * If called during event processing the recurrent events will be sent to the given `receiver` after current event\n     * processed instead of original one.\n     *\n     * If called multiple times the latest `receiver` will be used.\n     *\n     * If not called the recurrent events will be sent to original event receiver.\n     *\n     * > This method should be called __before__ the recurrent event issued. Otherwise it may happen that recurrent\n     * > event will be ignored in some situations. E.g. when it is issued during receiver registration.\n     *\n     * @param receiver  Recurrent events receiver function.\n     */\n    onRecurrent(receiver: Function<E>): void;\n\n  }\n\n}\n\n/**\n * Converts arbitrary event receiver to generic form.\n *\n * The returned event receiver would never send events to original receiver after event supply is cut off.\n *\n * @category Core\n * @typeparam E  An event type. This is a tuple of event receiver parameter types.\n * @param receiver  An event receiver to convert.\n *\n * @returns Event `receiver` in most generic form.\n */\nexport function eventReceiver<E extends any[]>(receiver: EventReceiver<E>): EventReceiver.Generic<E> {\n\n  let generic: {\n    readonly supply: EventSupply;\n    receive: (context: EventReceiver.Context<E>, ...event: E) => void;\n  };\n\n  if (typeof receiver === 'function') {\n    generic = {\n      supply: eventSupply(),\n      receive(_context, ...event) {\n        receiver(...event);\n      },\n    };\n  } else {\n    generic = {\n      supply: receiver.supply || eventSupply(),\n      receive(context, ...event) {\n        if (!this.supply.isOff) {\n          // Supply cut off callback may be called before the receiver disabled.\n          // Such callback may send an event that should not be received.\n          receiver.receive(context, ...event);\n        }\n      },\n    };\n  }\n\n  // Disable receiver when event supply is cut off. But see the comment above.\n  // For function receiver this callback is always the first one.\n  generic.supply.whenOff(() => generic.receive = noop);\n\n  return generic;\n}\n","/**\n * @module fun-events\n */\nimport { EventReceiver } from './event-receiver';\nimport { EventSupply } from './event-supply';\n\n/**\n * A key of event receiver registration method of [[EventSender]].\n *\n * @category Core\n */\nexport const OnEvent__symbol = /*#__PURE__*/ Symbol('on-event');\n\n/**\n * A sender of events.\n *\n * It is able to register event receivers.\n *\n * @category Core\n * @typeparam E  An event type. This is a tuple of event receiver parameter types.\n */\nexport interface EventSender<E extends any[]> {\n\n  /**\n   * Registers a receiver of events sent by this sender.\n   *\n   * @param receiver  A receiver of events to register.\n   *\n   * @returns A supply of events from this sender to the given `receiver`.\n   */\n  [OnEvent__symbol](receiver: EventReceiver<E>): EventSupply;\n\n}\n\nexport namespace EventSender {\n\n  /**\n   * A type of events sent by the given event sender.\n   *\n   * @typeparam T  Target event sender.\n   */\n  export type Event<T extends EventSender<any>> = T extends EventSender<infer E> ? E : never;\n\n}\n\n/**\n * Checks whether the given object implements an [[EventSender]] interface.\n *\n * @category Core\n * @typeparam E  An event type. This is a list of event receiver parameter types.\n * @param value  An object to check.\n *\n * @returns `true` if `value` contains `[OnEvent__symbol]` property, or `false` otherwise.\n */\nexport function isEventSender<E extends any[]>(value: object): value is EventSender<E> {\n  return OnEvent__symbol in value;\n}\n","import { EventReceiver } from '../event-receiver';\n\n/**\n * @internal\n */\nexport function once<E extends any[]>(\n    register: (receiver: EventReceiver.Generic<E>) => void,\n): (receiver: EventReceiver.Generic<E>) => void {\n  return receiver => register({\n    supply: receiver.supply,\n    receive: (context, ...event) => {\n      receiver.receive(context, ...event);\n      receiver.supply.off();\n    },\n  });\n}\n","/**\n * @module fun-events\n */\nimport { eventReceiver, EventReceiver } from './event-receiver';\nimport { EventSender, OnEvent__symbol } from './event-sender';\nimport { EventSupply } from './event-supply';\n\n/**\n * Event notifier can be used to register event receivers and send events to them.\n *\n * It does not implement an [[OnEvent]] interface though. Use an [[EventEmitter]] if you need one.\n *\n * Manages a list of registered event receivers, and removes them from the list once their supplies\n * are {@link EventSupply.off cut off}.\n *\n * Can be used as [[EventSender]].\n *\n * @category Core\n * @typeparam E  An event type. This is a list of event receiver parameter types.\n */\nexport class EventNotifier<E extends any[]> implements EventSender<E> {\n\n  /**\n   * @internal\n   */\n  private readonly _rcvs = new Set<EventReceiver.Generic<E>>();\n\n  /**\n   * Sends the given `event` to all registered receivers.\n   *\n   * @param event  An event to send represented by function call arguments.\n   */\n  readonly send: (this: this, ...event: E) => void = receiveEventsByEach(this._rcvs);\n\n  /**\n   * The number of currently registered event receivers.\n   */\n  get size(): number {\n    return this._rcvs.size;\n  }\n\n  [OnEvent__symbol](receiver: EventReceiver<E>): EventSupply {\n    return this.on(receiver);\n  }\n\n  /**\n   * Registers an event receiver.\n   *\n   * Receivers registered with this method will receive the {@link send emitted} events.\n   *\n   * The `[OnEvent__symbol]` method is an alias of this one.\n   *\n   * @param receiver  A receiver of events to register.\n   *\n   * @returns A supply of events to the given `receiver`.\n   */\n  on(receiver: EventReceiver<E>): EventSupply {\n\n    const generic = eventReceiver(receiver);\n\n    this._rcvs.add(generic);\n\n    return generic.supply.whenOff(() => this._rcvs.delete(generic));\n  }\n\n  /**\n   * Removes all registered event receivers and cuts off corresponding event supplies.\n   *\n   * After this method call they won't receive any events.\n   *\n   * @param reason  A reason to stop sending events.\n   *\n   * @returns `this` instance.\n   */\n  done(reason?: any): this {\n    this._rcvs.forEach(({ supply }) => supply.off(reason));\n    return this;\n  }\n\n}\n\n/**\n * Creates an event receiver function that dispatches events to each of the given event receivers.\n *\n * @category Core\n * @param receivers  An iterable of event receivers to dispatch event to.\n *\n * @returns An event receiver function that does not utilize event processing context an thus can be called directly.\n */\nfunction receiveEventsByEach<E extends any[]>(\n    receivers: Iterable<EventReceiver.Generic<E>>,\n): (this: void, ...event: E) => void  {\n\n  let send: (this: void, event: E) => void = sendNonRecurrent;\n\n  return (...event) => send(event);\n\n  function sendNonRecurrent(event: E) {\n\n    let actualReceivers = receivers;\n    const received: E[] = [];\n\n    send = sendRecurrent;\n\n    try {\n      for (; ;) {\n        actualReceivers = processEvent(actualReceivers, event);\n\n        const recurrent = received.shift();\n\n        if (!recurrent) {\n          break;\n        }\n\n        event = recurrent;\n      }\n    } finally {\n      send = sendNonRecurrent;\n    }\n\n    function sendRecurrent(recurrent: E) {\n      received.push(recurrent);\n    }\n  }\n}\n\nfunction processEvent<E extends any[]>(\n    receivers: Iterable<EventReceiver.Generic<E>>,\n    event: E,\n): EventReceiver.Generic<E>[] {\n\n  const recurrentReceivers: EventReceiver.Generic<E>[] = [];\n\n  for (const receiver of receivers) {\n\n    const idx = recurrentReceivers.length;\n\n    recurrentReceivers.push(receiver);\n\n    const context: EventReceiver.Context<E> = {\n      onRecurrent(recurrentReceiver) {\n        recurrentReceivers[idx] = eventReceiver({\n          supply: receiver.supply,\n          receive(_context, ...recurrentEvent) {\n            recurrentReceiver(...recurrentEvent);\n          },\n        });\n      },\n    };\n\n    receiver.receive(context, ...event);\n  }\n\n  return recurrentReceivers;\n}\n","import { EventNotifier } from '../event-notifier';\nimport { EventReceiver } from '../event-receiver';\nimport { eventSupply, EventSupply } from '../event-supply';\n\n/**\n * @internal\n */\nexport function share<E extends any[]>(\n    register: (receiver: EventReceiver.Generic<E>) => EventSupply,\n): (receiver: EventReceiver.Generic<E>) => void {\n\n  const shared = new EventNotifier<E>();\n  let sharedSupply: EventSupply;\n  let initialEvents: E[] | undefined;\n\n  return receiver => {\n    if (!shared.size) {\n      initialEvents = [];\n      sharedSupply = eventSupply(() => initialEvents = undefined);\n\n      register({\n        supply: sharedSupply,\n        receive(_ctx, ...event) {\n          if (initialEvents) {\n            if (shared.size) {\n              // More events received\n              // Stop sending initial ones\n              initialEvents = undefined;\n            } else {\n              // Record events received during first receiver registration\n              // to send them to all receivers until more event received\n              initialEvents.push(event);\n            }\n          }\n          shared.send(...event);\n        },\n      });\n    }\n\n    receiver.supply.needs(sharedSupply);\n    shared.on(receiver).whenOff((reason?: any) => {\n      if (!shared.size) {\n        sharedSupply.off(reason);\n      }\n    });\n\n    if (initialEvents) {\n      // Send initial events to just registered receiver\n\n      const dispatcher = new EventNotifier<E>();\n\n      dispatcher.on(receiver);\n      initialEvents.forEach(event => dispatcher.send(...event));\n    }\n  };\n}\n","import { EventReceiver } from '../event-receiver';\nimport { EventSupply } from '../event-supply';\n\n/**\n * @internal\n */\nexport function tillOff<E extends any[]>(\n    register: (receiver: EventReceiver.Generic<E>) => void,\n    supply: EventSupply,\n): (receiver: EventReceiver.Generic<E>) => void {\n  return receiver => {\n    receiver.supply.needs(supply);\n    register(receiver);\n  };\n}\n","/**\n * @module fun-events\n */\nimport { callThru, NextCall } from 'call-thru';\nimport { AfterEvent__symbol } from './event-keeper';\nimport { eventReceiver, EventReceiver } from './event-receiver';\nimport { EventSender, isEventSender, OnEvent__symbol } from './event-sender';\nimport { EventSupplier } from './event-supplier';\nimport { eventSupply, EventSupply, noEventSupply } from './event-supply';\nimport { once, share, tillOff } from './impl';\nimport Result = NextCall.CallResult;\n\n/**\n * An event receiver registration function interface.\n *\n * A registered event receiver would receive upcoming events, until the returned event supply will be\n * {@link EventSupply.off cut off}.\n *\n * An [[OnEvent]] function also has a set of handy methods. More could be added later. It also can be used as\n * [[EventSender]].\n *\n * To convert a plain event receiver registration function to [[OnEvent]] an [[onEventBy]] function can be used.\n *\n * @category Core\n * @typeparam E  An event type. This is a list of event receiver parameter types.\n */\nexport abstract class OnEvent<E extends any[]> extends Function implements EventSender<E> {\n\n  get [OnEvent__symbol](): this {\n    return this;\n  }\n\n  /**\n   * An [[OnEvent]] sender derived from this one that stops sending events to registered receiver after the first one.\n   */\n  get once(): OnEvent<E> {\n    return onEventBy(once(this));\n  }\n\n  /**\n   * Builds an [[OnEvent]] sender that sends events from this one until the required `supply` is cut off.\n   *\n   * @param supply  The required event supply.\n   *\n   * @returns New event sender.\n   */\n  tillOff(supply: EventSupply): OnEvent<E> {\n    return onEventBy(tillOff(this, supply));\n  }\n\n  /**\n   * Extracts event suppliers from incoming events.\n   *\n   * @typeparam F  Extracted event type.\n   * @param extract  A function extracting event supplier from incoming event. May return `undefined` when nothing\n   * extracted.\n   *\n   * @returns An [[OnEvent]] sender of events from extracted suppliers. The events supply is cut off once the incoming\n   * events supply do. The returned sender shares the supply of extracted events among receivers.\n   */\n  dig<F extends any[]>(\n      extract: (this: void, ...event: E) => EventSupplier<F> | void | undefined,\n  ): OnEvent<F> {\n    return onEventBy(share(this.dig_(extract)));\n  }\n\n  /**\n   * Extracts event suppliers from incoming events without sharing extracted events supply.\n   *\n   * This method does the same as [[OnEvent.dig]] one, except it does not share the supply of extracted events among\n   * receivers. This may be useful e.g. when the result will be further transformed. It is wise to {@link share share}\n   * the supply of events from final result in this case.\n   *\n   * @typeparam F  Extracted event type.\n   * @param extract  A function extracting event supplier from incoming event. May return `undefined` when\n   * nothing extracted.\n   *\n   * @returns An [[OnEvent]] sender of events from extracted suppliers. The events supply is cut off once the incoming\n   * events supply do.\n   */\n  dig_<F extends any[]>(\n      extract: (this: void, ...event: E) => EventSupplier<F> | void | undefined,\n  ): OnEvent<F> {\n    return onEventBy((receiver: EventReceiver.Generic<F>) => {\n\n      let nestedSupply = noEventSupply();\n\n      this({\n        supply: receiver.supply,\n        receive(_context, ...event: E)  {\n\n          const prevSupply = nestedSupply;\n          const extracted = extract(...event);\n\n          try {\n            nestedSupply = extracted\n                ? onSupplied(extracted)({\n                  supply: eventSupply().needs(receiver.supply),\n                  receive(context, ...nestedEvent) {\n                    receiver.receive(context, ...nestedEvent);\n                  },\n                })\n                : noEventSupply();\n          } finally {\n            prevSupply.off();\n          }\n        },\n      });\n    });\n  }\n\n  /**\n   * Consumes events.\n   *\n   * @param consume  A function consuming events. This function may return an {@link EventSupply event supply} instance\n   * when registers a nested event receiver. This supply will be cut of on new event.\n   *\n   * @returns An event supply that will stop consuming events once {@link EventSupply.off cut off}.\n   */\n  consume(consume: (...event: E) => EventSupply | void | undefined): EventSupply {\n\n    let consumerSupply = noEventSupply();\n    const senderSupply = this((...event: E) => {\n\n      const prevSupply = consumerSupply;\n\n      try {\n        consumerSupply = consume(...event) || noEventSupply();\n      } finally {\n        prevSupply.off();\n      }\n    });\n\n    return eventSupply(reason => {\n      consumerSupply.off(reason);\n      senderSupply.off(reason);\n    }).needs(senderSupply);\n  }\n\n  /**\n   * Constructs an [[OnEvent]] sender that shares events supply among all registered receivers.\n   *\n   * The created sender receives events from this one and sends to registered receivers. The shared sender registers\n   * a receiver in this one only once, when first receiver registered. And cuts off original events supply once all\n   * supplies do.\n   *\n   * @returns An [[OnEvent]] sender sharing a common supply of events originated from this sender.\n   */\n  share(): OnEvent<E> {\n    return onEventBy(share(this));\n  }\n\n  /**\n   * Constructs an [[OnEvent]] sender of original events passed trough the chain of transformations.\n   *\n   * The passes are preformed by `callThru()` function. The event receivers registered by resulting event sender\n   * are called by the last pass in chain. Thus they can be e.g. filtered out or called multiple times.\n   *\n   * @returns An [[OnEvent]] sender of events transformed with provided passes. The returned sender shares the supply\n   * of transformed events among receivers.\n   */\n  thru<R1 extends any[]>(\n      fn1: (this: void, ...args: E) => NextCall<any, R1, void, void, void>,\n  ): OnEvent<R1>;\n\n  thru<R1>(\n      fn1: (this: void, ...args: E) => R1,\n  ): OnEvent<[R1]>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => NextCall<any, R2, void, void, void>,\n  ): OnEvent<R2>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n  ): OnEvent<[R2]>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n  ): OnEvent<R3>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], RE>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => RE,\n  ): OnEvent<[RE]>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n  ): OnEvent<[R4]>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => NextCall<any, R5, void, void, void>,\n  ): OnEvent<R5>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n  ): OnEvent<[R5]>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => NextCall<any, R6, void, void, void>,\n  ): OnEvent<R6>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n  ): OnEvent<[R6]>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => NextCall<any, R7, void, void, void>,\n  ): OnEvent<R7>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n  ): OnEvent<[R7]>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => NextCall<any, R8, void, void, void>,\n  ): OnEvent<R8>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n  ): OnEvent<[R8]>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => NextCall<any, R9, void, void, void>,\n  ): OnEvent<R9>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n  ): OnEvent<[R9]>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => NextCall<any, R10, void, void, void>,\n  ): OnEvent<R10>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => R10,\n  ): OnEvent<[R10]>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10 extends Result<P11>,\n      P11 extends any[], R11 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => R10,\n      fn11: (this: void, ...args: P11) => NextCall<any, R11, void, void, void>,\n  ): OnEvent<R11>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10 extends Result<P11>,\n      P11 extends any[], R11>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => R10,\n      fn11: (this: void, ...args: P11) => R11,\n  ): OnEvent<[R11]>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10 extends Result<P11>,\n      P11 extends any[], R11 extends Result<P12>,\n      P12 extends any[], R12 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => R10,\n      fn11: (this: void, ...args: P11) => R11,\n      fn12: (this: void, ...args: P12) => NextCall<any, R12, void, void, void>,\n  ): OnEvent<R12>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10 extends Result<P11>,\n      P11 extends any[], R11 extends Result<P12>,\n      P12 extends any[], R12>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => R10,\n      fn11: (this: void, ...args: P11) => R11,\n      fn12: (this: void, ...args: P12) => R12,\n  ): OnEvent<[R12]>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10 extends Result<P11>,\n      P11 extends any[], R11 extends Result<P12>,\n      P12 extends any[], R12 extends Result<P13>,\n      P13 extends any[], R13 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => R10,\n      fn11: (this: void, ...args: P11) => R11,\n      fn12: (this: void, ...args: P12) => R12,\n      fn13: (this: void, ...args: P13) => NextCall<any, R13, void, void, void>,\n  ): OnEvent<R13>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10 extends Result<P11>,\n      P11 extends any[], R11 extends Result<P12>,\n      P12 extends any[], R12 extends Result<P13>,\n      P13 extends any[], R13>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => R10,\n      fn11: (this: void, ...args: P11) => R11,\n      fn12: (this: void, ...args: P12) => R12,\n      fn13: (this: void, ...args: P13) => R13,\n  ): OnEvent<[R13]>;\n\n  thru(...fns: any[]): OnEvent<any[]> {\n    return onEventBy(share((this as any).thru_(...fns)));\n  }\n\n  /**\n   * Constructs an [[OnEvent]] sender of original events passed trough the chain of transformations without sharing\n   * the transformed events supply.\n   *\n   * This method does the same as [[OnEvent.thru]] one, except it does not share the supply of transformed events\n   * among receivers. This may be useful e.g. when the result will be further transformed anyway. It is wise to\n   * {@link share share} the supply of events from final result in this case.\n   *\n   * @returns An [[OnEvent]] sender of events transformed with provided passes.\n   */\n  thru_<R1 extends any[]>(\n      fn1: (this: void, ...args: E) => NextCall<any, R1, void, void, void>,\n  ): OnEvent<R1>;\n\n  thru_<R1>(\n      fn1: (this: void, ...args: E) => R1,\n  ): OnEvent<[R1]>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => NextCall<any, R2, void, void, void>,\n  ): OnEvent<R2>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n  ): OnEvent<[R2]>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n  ): OnEvent<R3>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], RE>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => RE,\n  ): OnEvent<[RE]>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n  ): OnEvent<[R4]>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => NextCall<any, R5, void, void, void>,\n  ): OnEvent<R5>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n  ): OnEvent<[R5]>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => NextCall<any, R6, void, void, void>,\n  ): OnEvent<R6>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n  ): OnEvent<[R6]>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => NextCall<any, R7, void, void, void>,\n  ): OnEvent<R7>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n  ): OnEvent<[R7]>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => NextCall<any, R8, void, void, void>,\n  ): OnEvent<R8>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n  ): OnEvent<[R8]>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => NextCall<any, R9, void, void, void>,\n  ): OnEvent<R9>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n  ): OnEvent<[R9]>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => NextCall<any, R10, void, void, void>,\n  ): OnEvent<R10>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => R10,\n  ): OnEvent<[R10]>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10 extends Result<P11>,\n      P11 extends any[], R11 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => R10,\n      fn11: (this: void, ...args: P11) => NextCall<any, R11, void, void, void>,\n  ): OnEvent<R11>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10 extends Result<P11>,\n      P11 extends any[], R11>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => R10,\n      fn11: (this: void, ...args: P11) => R11,\n  ): OnEvent<[R11]>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10 extends Result<P11>,\n      P11 extends any[], R11 extends Result<P12>,\n      P12 extends any[], R12 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => R10,\n      fn11: (this: void, ...args: P11) => R11,\n      fn12: (this: void, ...args: P12) => NextCall<any, R12, void, void, void>,\n  ): OnEvent<R12>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10 extends Result<P11>,\n      P11 extends any[], R11 extends Result<P12>,\n      P12 extends any[], R12>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => R10,\n      fn11: (this: void, ...args: P11) => R11,\n      fn12: (this: void, ...args: P12) => R12,\n  ): OnEvent<[R12]>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10 extends Result<P11>,\n      P11 extends any[], R11 extends Result<P12>,\n      P12 extends any[], R12 extends Result<P13>,\n      P13 extends any[], R13 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => R10,\n      fn11: (this: void, ...args: P11) => R11,\n      fn12: (this: void, ...args: P12) => R12,\n      fn13: (this: void, ...args: P13) => NextCall<any, R13, void, void, void>,\n  ): OnEvent<R13>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10 extends Result<P11>,\n      P11 extends any[], R11 extends Result<P12>,\n      P12 extends any[], R12 extends Result<P13>,\n      P13 extends any[], R13>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => R10,\n      fn11: (this: void, ...args: P11) => R11,\n      fn12: (this: void, ...args: P12) => R12,\n      fn13: (this: void, ...args: P13) => R13,\n  ): OnEvent<[R13]>;\n\n  thru_(...fns: any[]): OnEvent<any[]> {\n\n    const thru = callThru as any;\n\n    return onEventBy(receiver =>\n        this({\n          supply: receiver.supply,\n          receive(context, ...event) {\n            thru(\n                ...fns,\n                (...transformed: any[]) => receiver.receive(context, ...transformed),\n            )(...event);\n          },\n        }));\n  }\n\n}\n\nexport interface OnEvent<E extends any[]> {\n\n  /**\n   * Registers a receiver of events sent by this sender.\n   *\n   * @param receiver  A receiver of events to register.\n   *\n   * @returns A supply of events from this sender to the given `receiver`.\n   */\n  (this: void, receiver: EventReceiver<E>): EventSupply; // tslint:disable-line:callable-types\n\n}\n\n/**\n * Converts a plain event receiver registration function to [[OnEvent]] sender.\n *\n * @category Core\n * @typeparam E  An event type. This is a list of event receiver parameter types.\n * @param register  Generic event receiver registration function. It will be called on each receiver registration,\n * unless the receiver's {@link EventReceiver.Generic.supply event supply} is cut off already.\n *\n * @returns An [[OnEvent]] sender registering event receivers with the given `register` function.\n */\nexport function onEventBy<E extends any[]>(\n    register: (this: void, receiver: EventReceiver.Generic<E>) => void,\n): OnEvent<E> {\n\n  const onEvent = ((receiver: EventReceiver<E>) => {\n\n    const generic = eventReceiver(receiver);\n    const { supply } = generic;\n\n    if (!supply.isOff) {\n      register(generic);\n    }\n\n    return supply;\n  }) as OnEvent<E>;\n\n  Object.setPrototypeOf(onEvent, OnEvent.prototype);\n\n  return onEvent;\n}\n\n/**\n * Builds an [[OnEvent]] sender of events supplied by the given `supplier`.\n *\n * @category Core\n * @typeparam E  An event type. This is a list of event receiver parameter types.\n * @param supplier  An event supplier.\n *\n * @returns An [[OnEvent]] sender of events originated from the given `supplier`.\n */\nexport function onSupplied<E extends any[]>(supplier: EventSupplier<E>): OnEvent<E> {\n\n  const onEvent = isEventSender(supplier) ? supplier[OnEvent__symbol] : supplier[AfterEvent__symbol];\n\n  if (onEvent instanceof OnEvent) {\n    return onEvent;\n  }\n\n  return onEventBy(onEvent.bind(supplier));\n}\n\n/**\n * An [[OnEvent]] sender that never sends any events.\n *\n * @category Core\n */\nexport const onNever: OnEvent<any> = /*#__PURE__*/ onEventBy(({ supply }) => supply.off());\n","/**\n * @module fun-events\n */\nimport { NextCall, noop, valueProvider } from 'call-thru';\nimport { AfterEvent__symbol, EventKeeper, isEventKeeper } from './event-keeper';\nimport { eventReceiver, EventReceiver } from './event-receiver';\nimport { EventSender, OnEvent__symbol } from './event-sender';\nimport { EventSupplier } from './event-supplier';\nimport { EventSupply, eventSupply } from './event-supply';\nimport { once, share, tillOff } from './impl';\nimport { OnEvent } from './on-event';\nimport Result = NextCall.CallResult;\n\n/**\n * A subset of [[AfterEvent]] transformation methods inherited that return [[AfterEvent]] keepers instead of\n * [[OnEvent]] senders.\n *\n * This can not be done automatically, as not every transformation results to [[EventKeeper]]. E.g. when some events\n * are filtered out.\n *\n * An instance of this class can be obtained from [[AfterEvent.keep]] property.\n *\n * @category Core\n */\nexport class AfterEventKeep<E extends any[]> {\n\n  /**\n   * @internal\n   */\n  private readonly _keeper: AfterEvent<E>;\n\n  constructor(keeper: AfterEvent<E>) {\n    this._keeper = keeper;\n  }\n\n  /**\n   * Extracts event keepers from incoming events.\n   *\n   * @typeparam F  Extracted event type.\n   * @param extract  A function extracting event keeper from incoming event.\n   *\n   * @returns An [[AfterEvent]] keeper of extracted events. The events supply is cut off once the incoming events supply\n   * do. The returned keeper shares the supply of extracted events among receivers.\n   */\n  dig<F extends any[]>(extract: (this: void, ...event: E) => EventKeeper<F>): AfterEvent<F> {\n    return this.dig_(extract).share();\n  }\n\n  /**\n   * Extracts event keepers from incoming events without sharing extracted events supply.\n   *\n   * This method does the same as [[AfterEventKeep.dig]] one, except it does not share the supply of extracted events\n   * among receivers. This may be useful e.g. when the result will be further transformed. It is wise to\n   * {@link AfterEvent.share share} the supply of events from the final result in this case.\n   *\n   * @typeparam F  Extracted event type.\n   * @param extract  A function extracting event keeper from incoming event.\n   *\n   * @returns An [[AfterEvent]] keeper of extracted events. The events supply is cut off once the incoming events\n   * supply do.\n   */\n  dig_<F extends any[]>(extract: (this: void, ...event: E) => EventKeeper<F>): AfterEvent<F> {\n    return afterSupplied(this._keeper.dig_((...event) => afterSupplied(extract(...event))));\n  }\n\n  /**\n   * Constructs an [[AfterEvent]] keeper of original events passed trough the chain of transformations.\n   *\n   * The passes are preformed by `callThru()` function. The event receivers registered by resulting event keeper\n   * are called by the last pass in chain. Thus they can be e.g. filtered out or called multiple times.\n   *\n   * @returns An [[AfterEvent]] keeper of events transformed with provided passes. The returned keeper shares the supply\n   * of transformed events among receivers.\n   */\n  thru<R1 extends any[]>(\n      fn1: (this: void, ...args: E) => NextCall<any, R1, void, void, void>,\n  ): AfterEvent<R1>;\n\n  thru<R1>(\n      fn1: (this: void, ...args: E) => R1,\n  ): AfterEvent<[R1]>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => NextCall<any, R2, void, void, void>,\n  ): AfterEvent<R2>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n  ): AfterEvent<[R2]>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n  ): AfterEvent<R3>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], RE>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => RE,\n  ): AfterEvent<[RE]>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n  ): AfterEvent<[R4]>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => NextCall<any, R5, void, void, void>,\n  ): AfterEvent<R5>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n  ): AfterEvent<[R5]>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => NextCall<any, R6, void, void, void>,\n  ): AfterEvent<R6>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n  ): AfterEvent<[R6]>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => NextCall<any, R7, void, void, void>,\n  ): AfterEvent<R7>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n  ): AfterEvent<[R7]>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => NextCall<any, R8, void, void, void>,\n  ): AfterEvent<R8>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n  ): AfterEvent<[R8]>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => NextCall<any, R9, void, void, void>,\n  ): AfterEvent<R9>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n  ): AfterEvent<[R9]>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => NextCall<any, R10, void, void, void>,\n  ): AfterEvent<R10>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => R10,\n  ): AfterEvent<[R10]>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10 extends Result<P11>,\n      P11 extends any[], R11 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => R10,\n      fn11: (this: void, ...args: P11) => NextCall<any, R11, void, void, void>,\n  ): AfterEvent<R11>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10 extends Result<P11>,\n      P11 extends any[], R11>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => R10,\n      fn11: (this: void, ...args: P11) => R11,\n  ): AfterEvent<[R11]>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10 extends Result<P11>,\n      P11 extends any[], R11 extends Result<P12>,\n      P12 extends any[], R12 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => R10,\n      fn11: (this: void, ...args: P11) => R11,\n      fn12: (this: void, ...args: P12) => NextCall<any, R12, void, void, void>,\n  ): AfterEvent<R12>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10 extends Result<P11>,\n      P11 extends any[], R11 extends Result<P12>,\n      P12 extends any[], R12>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => R10,\n      fn11: (this: void, ...args: P11) => R11,\n      fn12: (this: void, ...args: P12) => R12,\n  ): AfterEvent<[R12]>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10 extends Result<P11>,\n      P11 extends any[], R11 extends Result<P12>,\n      P12 extends any[], R12 extends Result<P13>,\n      P13 extends any[], R13 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => R10,\n      fn11: (this: void, ...args: P11) => R11,\n      fn12: (this: void, ...args: P12) => R12,\n      fn13: (this: void, ...args: P13) => NextCall<any, R13, void, void, void>,\n  ): AfterEvent<R13>;\n\n  thru<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10 extends Result<P11>,\n      P11 extends any[], R11 extends Result<P12>,\n      P12 extends any[], R12 extends Result<P13>,\n      P13 extends any[], R13>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => R10,\n      fn11: (this: void, ...args: P11) => R11,\n      fn12: (this: void, ...args: P12) => R12,\n      fn13: (this: void, ...args: P13) => R13,\n  ): AfterEvent<[R13]>;\n\n  thru(...fns: any[]): AfterEvent<any[]> {\n    return (this as any).thru_(...fns).share();\n  }\n\n  /**\n   * Constructs an [[AfterEvent]] keeper of original events passed trough the chain of transformations without sharing\n   * the transformed events supply.\n   *\n   * This method does the same as [[AfterEventKeep.thru]] one, except it does not share the supply of transformed\n   * events among receivers. This may be useful e.g. when the result will be further transformed anyway.\n   * It is wise to {@link AfterEvent.share share} the supply of events from final result in this case.\n   *\n   * @returns An [[AfterEvent]] keeper of events transformed with provided passes.\n   */\n  thru_<R1 extends any[]>(\n      fn1: (this: void, ...args: E) => NextCall<any, R1, void, void, void>,\n  ): AfterEvent<R1>;\n\n  thru_<R1>(\n      fn1: (this: void, ...args: E) => R1,\n  ): AfterEvent<[R1]>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => NextCall<any, R2, void, void, void>,\n  ): AfterEvent<R2>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n  ): AfterEvent<[R2]>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n  ): AfterEvent<R3>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], RE>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => RE,\n  ): AfterEvent<[RE]>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n  ): AfterEvent<[R4]>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => NextCall<any, R5, void, void, void>,\n  ): AfterEvent<R5>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n  ): AfterEvent<[R5]>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => NextCall<any, R6, void, void, void>,\n  ): AfterEvent<R6>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n  ): AfterEvent<[R6]>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => NextCall<any, R7, void, void, void>,\n  ): AfterEvent<R7>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n  ): AfterEvent<[R7]>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => NextCall<any, R8, void, void, void>,\n  ): AfterEvent<R8>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n  ): AfterEvent<[R8]>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => NextCall<any, R9, void, void, void>,\n  ): AfterEvent<R9>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n  ): AfterEvent<[R9]>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => NextCall<any, R10, void, void, void>,\n  ): AfterEvent<R10>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => R10,\n  ): AfterEvent<[R10]>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10 extends Result<P11>,\n      P11 extends any[], R11 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => R10,\n      fn11: (this: void, ...args: P11) => NextCall<any, R11, void, void, void>,\n  ): AfterEvent<R11>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10 extends Result<P11>,\n      P11 extends any[], R11>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => R10,\n      fn11: (this: void, ...args: P11) => R11,\n  ): AfterEvent<[R11]>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10 extends Result<P11>,\n      P11 extends any[], R11 extends Result<P12>,\n      P12 extends any[], R12 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => R10,\n      fn11: (this: void, ...args: P11) => R11,\n      fn12: (this: void, ...args: P12) => NextCall<any, R12, void, void, void>,\n  ): AfterEvent<R12>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10 extends Result<P11>,\n      P11 extends any[], R11 extends Result<P12>,\n      P12 extends any[], R12>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => R10,\n      fn11: (this: void, ...args: P11) => R11,\n      fn12: (this: void, ...args: P12) => R12,\n  ): AfterEvent<[R12]>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10 extends Result<P11>,\n      P11 extends any[], R11 extends Result<P12>,\n      P12 extends any[], R12 extends Result<P13>,\n      P13 extends any[], R13 extends any[]>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => R10,\n      fn11: (this: void, ...args: P11) => R11,\n      fn12: (this: void, ...args: P12) => R12,\n      fn13: (this: void, ...args: P13) => NextCall<any, R13, void, void, void>,\n  ): AfterEvent<R13>;\n\n  thru_<\n      R1 extends Result<P2>,\n      P2 extends any[], R2 extends Result<P3>,\n      P3 extends any[], R3 extends Result<P4>,\n      P4 extends any[], R4 extends Result<P5>,\n      P5 extends any[], R5 extends Result<P6>,\n      P6 extends any[], R6 extends Result<P7>,\n      P7 extends any[], R7 extends Result<P8>,\n      P8 extends any[], R8 extends Result<P9>,\n      P9 extends any[], R9 extends Result<P10>,\n      P10 extends any[], R10 extends Result<P11>,\n      P11 extends any[], R11 extends Result<P12>,\n      P12 extends any[], R12 extends Result<P13>,\n      P13 extends any[], R13>(\n      fn1: (this: void, ...args: E) => R1,\n      fn2: (this: void, ...args: P2) => R2,\n      fn3: (this: void, ...args: P3) => R3,\n      fn4: (this: void, ...args: P4) => R4,\n      fn5: (this: void, ...args: P5) => R5,\n      fn6: (this: void, ...args: P6) => R6,\n      fn7: (this: void, ...args: P7) => R7,\n      fn8: (this: void, ...args: P8) => R8,\n      fn9: (this: void, ...args: P9) => R9,\n      fn10: (this: void, ...args: P10) => R10,\n      fn11: (this: void, ...args: P11) => R11,\n      fn12: (this: void, ...args: P12) => R12,\n      fn13: (this: void, ...args: P13) => R13,\n  ): AfterEvent<[R13]>;\n\n  thru_(...fns: any[]): AfterEvent<any[]> {\n    return afterSupplied((this._keeper as any).thru_(...fns));\n  }\n\n}\n\n/**\n * A kept and upcoming events receiver registration function interface.\n *\n * A registered event receiver would receive the kept event immediately upon registration, and all upcoming events\n * after that.\n *\n * To convert a plain event receiver registration function to [[AfterEvent]] an [[afterEventBy]] function can be used.\n *\n * @category Core\n * @typeparam E  An event type. This is a list of event receiver parameter types.\n */\nexport abstract class AfterEvent<E extends any[]> extends OnEvent<E> implements EventKeeper<E> {\n\n  get [AfterEvent__symbol](): this {\n    return this;\n  }\n\n  /**\n   * A subset of [[AfterEvent]] transformation methods that return [[AfterEvent]] keepers instead of [[OnEvent]]\n   * senders.\n   *\n   * Note that not every transformation can properly result to [[EventKeeper]]. E.g. some events may be filtered out and\n   * the resulting [[AfterEvent]] would rise an exception on receiver registration, as it won't have any events to send.\n   */\n  get keep(): AfterEventKeep<E> {\n    return new AfterEventKeep(this);\n  }\n\n  /**\n   * An [[AfterEvent]] keeper derived from this one that sends currently the kept event to registered receiver\n   * and stops sending them after that.\n   */\n  get once(): AfterEvent<E> {\n    return afterEventBy(once(this));\n  }\n\n  /**\n   * Builds an [[AfterEvent]] keeper that sends events from this one until the required `supply` is cut off.\n   *\n   * @param supply  The required event supply.\n   *\n   * @returns New event keeper.\n   */\n  tillOff(supply: EventSupply): AfterEvent<E> {\n    return afterEventBy(tillOff(this, supply));\n  }\n\n  /**\n   * Constructs an [[AfterEvent]] keeper that shares events supply among all registered receivers.\n   *\n   * The created keeper receives events from this one and sends to registered receivers. The shared keeper registers\n   * a receiver in this one only once, when first receiver registered. And cuts off original events supply once all\n   * event supplies do.\n   *\n   * @returns An [[AfterEvent]] keeper sharing a common supply of events originating from this keeper.\n   */\n  share(): AfterEvent<E> {\n    return afterEventBy(share(this));\n  }\n\n}\n\n/**\n * Converts a plain event receiver registration function to [[AfterEvent]] keeper with a fallback.\n *\n * The event generated by `fallback` will be sent to the registered first receiver, unless `register` function sends\n * one.\n *\n * @category Core\n * @typeparam E  An event type. This is a list of event receiver parameter types.\n * @param register  Generic event receiver registration function. It will be called on each receiver registration,\n * unless the receiver's {@link EventReceiver.Generic.supply event supply} is cut off already.\n * @param fallback  A function creating fallback event. When omitted, the initial event is expected to be sent by\n * `register` function. A receiver registration would lead to an error otherwise.\n *\n * @returns An [[AfterEvent]] keeper registering event receivers with the given `register` function.\n */\nexport function afterEventBy<E extends any[]>(\n    register: (this: void, receiver: EventReceiver.Generic<E>) => void,\n    fallback: (this: void) => E = noEvent,\n): AfterEvent<E> {\n\n  let lastEvent: E | undefined;\n  let numReceivers = 0;\n\n  const afterEvent = ((receiver: EventReceiver<E>) => {\n\n    let dest: (context: EventReceiver.Context<E>, ...event: E) => void = noop;\n    const generic = eventReceiver(receiver);\n\n    if (generic.supply.isOff) {\n      return generic.supply;\n    }\n\n    const supply = eventSupply().needs(generic.supply);\n    let reported = false;\n\n    register({\n      supply,\n      receive(context, ...event: E) {\n        reported = true;\n        lastEvent = event;\n        dest(context, ...event);\n      },\n    });\n    ++numReceivers;\n\n    if (!supply.isOff || reported) {\n      generic.receive(\n          {\n            onRecurrent(recurrent) {\n              dest = (_context, ...event) => recurrent(...event);\n            },\n          },\n          ...(lastEvent || (lastEvent = fallback())),\n      );\n      dest = (context, ...event) => generic.receive(context, ...event);\n    }\n\n    supply.whenOff(reason => {\n      if (!--numReceivers) {\n        lastEvent = undefined;\n      }\n      generic.supply.off(reason);\n    });\n\n    return supply;\n  }) as AfterEvent<E>;\n\n  Object.setPrototypeOf(afterEvent, AfterEvent.prototype);\n\n  return afterEvent;\n}\n\n/**\n * Builds an [[AfterEvent]] keeper of events sent by the given `keeper`.\n *\n * @category Core\n * @typeparam E  An event type. This is a list of event receiver parameter types.\n * @param keeper  A keeper of events.\n *\n * @returns An [[AfterEvent]] keeper of events originated from the given `keeper`.\n */\nexport function afterSupplied<E extends any[]>(keeper: EventKeeper<E>): AfterEvent<E>;\n\n/**\n * Builds an [[AfterEvent]] keeper of events sent by the given `sender`.\n *\n * The event generated by `fallback` will be sent to the registered first receiver, unless `register` function sends\n * one.\n *\n * This is a synonym of [[afterSent]], unless `sender` is an [[EventKeeper]].\n *\n * @typeparam E  An event type. This is a list of event receiver parameter types.\n * @param sender  An event sender.\n * @param fallback  A function creating fallback event. When omitted, the initial event is expected to be sent by\n * `register` function. A receiver registration would lead to an error otherwise.\n *\n * @returns An [[AfterEvent]] keeper of events either originated from the given `sender`, or `initial` one.\n */\nexport function afterSupplied<E extends any[]>(\n    sender: EventSender<E>,\n    fallback?: (this: void) => E,\n): AfterEvent<E>;\n\nexport function afterSupplied<E extends any[]>(\n    supplier: EventSupplier<E>,\n    fallback?: (this: void) => E,\n): AfterEvent<E> {\n  if (!isEventKeeper(supplier)) {\n    return afterSent(supplier, fallback);\n  }\n\n  const afterEvent = supplier[AfterEvent__symbol];\n\n  if (afterEvent instanceof AfterEvent) {\n    return afterEvent;\n  }\n\n  return afterEventBy(afterEvent.bind(supplier));\n}\n\n/**\n * Builds an [[AfterEvent]] keeper of events sent by the given `sender`.\n *\n * The event generated by `fallback` will be sent to the registered first receiver, unless `register` function sends\n * one.\n *\n * @typeparam E  An event type. This is a list of event receiver parameter types.\n * @param sender  An event sender.\n * @param fallback  A function creating fallback event. When omitted, the initial event is expected to be sent by\n * `register` function. A receiver registration would lead to an error otherwise.\n *\n * @returns An [[AfterEvent]] keeper of events either originated from the given `sender`, or `initial` one.\n */\nexport function afterSent<E extends any[]>(\n    sender: EventSender<E>,\n    fallback?: (this: void) => E,\n): AfterEvent<E> {\n  return afterEventBy(receiver => sender[OnEvent__symbol](receiver), fallback);\n}\n\n/**\n * Builds an [[AfterEvent]] keeper of the given `event`.\n *\n * @category Core\n * @param event  An event that will be sent to all receivers upon registration.\n *\n * @returns An [[AfterEvent]] keeper that always sends the given `event`.\n */\nexport function afterThe<E extends any[]>(...event: E): AfterEvent<E> {\n  return afterEventBy(() => eventSupply(), valueProvider(event));\n}\n\n/**\n * An [[AfterEvent]] keeper that never sends any events.\n *\n * @category Core\n */\nexport const afterNever: AfterEvent<any> = /*#__PURE__*/ afterEventBy(({ supply }) => supply.off());\n\nfunction noEvent(): never {\n  throw new Error('No events to send');\n}\n","/**\n * @module fun-events\n */\nimport { eventReceiver, EventReceiver } from '../event-receiver';\nimport { EventSupply } from '../event-supply';\nimport { once, tillOff } from '../impl';\nimport { OnEvent } from '../on-event';\n\n/**\n * DOM event listener.\n *\n * DOM events are never recurrent.\n *\n * @category DOM\n * @typeparam E  Supported DOM event type.\n */\nexport type DomEventListener<E extends Event> = EventReceiver<[E]>;\n\n/**\n * A DOM event listener registrar signature.\n *\n * @category DOM\n * @typeparam E  Supported DOM event type.\n */\nexport abstract class OnDomEvent<E extends Event> extends OnEvent<[E]> {\n\n  /**\n   * An [[OnDomEvent]] sender derived from this one that stops sending events to registered listener after the first\n   * one.\n   */\n  get once(): OnDomEvent<E> {\n    return onDomEventBy(once(this));\n  }\n\n  /**\n   * Builds an [[OnDomEvent]] sender that sends events from this one until the required `supply` is cut off.\n   *\n   * @param supply  The required event supply.\n   *\n   * @returns New DOM event sender.\n   */\n  tillOff(supply: EventSupply): OnDomEvent<E> {\n    return onDomEventBy(tillOff(this, supply));\n  }\n\n  /**\n   * An [[OnDomEvent]] sender derived from this one that enables event capturing by default.\n   *\n   * This corresponds to specifying `true` or `{ capture: true }` as a second argument to\n   * `EventTarget.addEventListener()`.\n   */\n  get capture(): OnDomEvent<E> {\n    return onDomEventBy((\n        listener: DomEventListener<E>,\n        opts?: AddEventListenerOptions | boolean,\n    ) => {\n      if (opts == null) {\n        return this(listener, true);\n      }\n      if (typeof opts === 'object' && opts.capture == null) {\n        return this(listener, { ...opts, capture: true });\n      }\n      return this(listener, opts);\n    });\n  }\n\n  /**\n   * An [[OnDomEvent]] sender derived from this one that registers listeners to invoke instead of the default action.\n   *\n   * It invokes an `Event.preventDefault()` method prior to calling the registered listeners.\n   */\n  get instead(): OnDomEvent<E> {\n    return onDomEventBy((\n        listener: DomEventListener<E>,\n        opts?: AddEventListenerOptions | boolean,\n    ) => {\n\n      const receiver = eventReceiver(listener);\n\n      return this(\n          {\n            supply: receiver.supply,\n            receive(context, event) {\n              event.preventDefault();\n              receiver.receive(context, event);\n            },\n          },\n          opts,\n      );\n    });\n  }\n\n  /**\n   * An [[OnDomEvent]] sender derived from this one that registers listeners preventing further propagation of\n   * current event in the capturing and bubbling phases.\n   *\n   * It invokes an `Event.stopPropagation()` method prior to calling the registered listeners.\n   */\n  get just(): OnDomEvent<E> {\n    return onDomEventBy((\n        listener: DomEventListener<E>,\n        opts?: AddEventListenerOptions | boolean,\n    ) => {\n\n      const receiver = eventReceiver(listener);\n\n      return this(\n          {\n            supply: receiver.supply,\n            receive(context, event) {\n              event.stopPropagation();\n              receiver.receive(context, event);\n            },\n          },\n          opts,\n      );\n    });\n  }\n\n  /**\n   * An [[OnDomEvent]] sender derived from this one that registers the last event listener.\n   *\n   * It invokes an `Event.stopImmediatePropagation()` method prior to calling the registered listeners.\n   */\n  get last(): OnDomEvent<E> {\n    return onDomEventBy((\n        listener: DomEventListener<E>,\n        opts?: AddEventListenerOptions | boolean,\n    ) => {\n\n      const receiver = eventReceiver(listener);\n\n      return this(\n          {\n            supply: receiver.supply,\n            receive(context, event) {\n              event.stopImmediatePropagation();\n              receiver.receive(context, event);\n            },\n          },\n          opts,\n      );\n    });\n  }\n\n  /**\n   * An [[OnDomEvent]] sender derived from this one that accepts listeners never calling `Event.preventDefault()`.\n   *\n   * This corresponds to specifying `{ passive: true }` as a second argument to `EventTarget.addEventListener()`.\n   */\n  get passive(): OnDomEvent<E> {\n    return onDomEventBy((\n        listener: DomEventListener<E>,\n        opts?: AddEventListenerOptions | boolean,\n    ) => {\n      if (opts == null) {\n        return this(listener, { passive: true });\n      }\n      if (typeof opts === 'boolean') {\n        return this(listener, { capture: opts, passive: true });\n      }\n      if (opts.passive == null) {\n        return this(listener, { ...opts, passive: true });\n      }\n      return this(listener, opts);\n    });\n  }\n\n}\n\nexport interface OnDomEvent<E extends Event> {\n\n  /**\n   * Registers a DOM event listener.\n   *\n   * @param listener  A DOM event listener to register.\n   * @param opts  DOM event listener options to pass to `EventTarget.addEventListener()`.\n   *\n   * @return A DOM events supply.\n   */\n  // tslint:disable-next-line:callable-types\n  (this: void, listener: DomEventListener<E>, opts?: AddEventListenerOptions | boolean): EventSupply;\n\n}\n\n/**\n * Converts a plain DOM event listener registration function to [[OnDomEvent]] sender.\n *\n * @category DOM\n * @typeparam E  Supported DOM event type.\n * @param register  A generic DOM event listener registration function.\n *\n * @returns An [[OnDomEvent]] sender registering event listeners with the given `register` function.\n */\nexport function onDomEventBy<E extends Event>(\n    register: (\n        this: void,\n        listener: EventReceiver.Generic<[E]>,\n        opts?: AddEventListenerOptions | boolean,\n    ) => void,\n): OnDomEvent<E> {\n\n  const onDomEvent = (\n      (\n          listener: DomEventListener<E>,\n          opts?: AddEventListenerOptions | boolean,\n      ) => {\n\n        const receiver = eventReceiver(listener);\n\n        register(receiver, opts);\n\n        return receiver.supply;\n      }\n  ) as OnDomEvent<E>;\n\n  Object.setPrototypeOf(onDomEvent, OnDomEvent.prototype);\n\n  return onDomEvent;\n}\n","/**\n * @module fun-events\n */\nimport { noop } from 'call-thru';\nimport { EventReceiver } from '../event-receiver';\nimport { OnDomEvent, onDomEventBy } from './on-dom-event';\n\nconst domEventContext: EventReceiver.Context<any> = {\n  onRecurrent: noop,\n};\n\n/**\n * DOM event dispatcher can be used to register event listeners and dispatch events.\n *\n * @category DOM\n */\nexport class DomEventDispatcher {\n\n  /**\n   * @internal\n   */\n  private readonly _target: EventTarget;\n\n  /**\n   * Constructs DOM event dispatcher for the given event target.\n   *\n   * @param target  Event target to construct event dispatcher for.\n   */\n  constructor(target: EventTarget) {\n    this._target = target;\n  }\n\n  /**\n   * Returns a sender of DOM events of the given `type`.\n   *\n   * The returned DOM event sender calls an `EventTarget.addEventListener()` to register listeners.\n   * But, in contrast, it allows to register the same listener many times.\n   *\n   * The {@link EventSupply event supply} returned upon event listener registration unregisters it with\n   * `EventTarget.removeEventListener()` once {@link EventSupply.off cut off}.\n   *\n   * @typeparam E  Supported DOM event type.\n   * @param type  DOM event type name.\n   *\n   * @returns [[OnDomEvent]] sender of DOM events of the given `type`.\n   */\n  on<E extends Event>(type: string): OnDomEvent<E> {\n    return onDomEventBy<E>((listener, opts) => {\n\n      // Create unique DOM listener instance\n      const domListener: EventListener = event => listener.receive(domEventContext, event as E);\n\n      this._target.addEventListener(type, domListener, opts);\n      listener.supply.whenOff(() => this._target.removeEventListener(type, domListener));\n    });\n  }\n\n  /**\n   * Dispatches the given DOM event to event target.\n   *\n   * Calls `EventTarget.dispatchEvent()` method.\n   *\n   * @param event  An event to dispatch.\n   *\n   * @returns `true` if either event's `cancelable` attribute value is `false` or its `preventDefault()` method was not\n   * invoked, or `false` otherwise.\n   */\n  dispatch(event: Event): boolean {\n    return this._target.dispatchEvent(event);\n  }\n\n}\n","/**\n * @module fun-events\n */\nimport { EventNotifier } from './event-notifier';\nimport { EventSender, OnEvent__symbol } from './event-sender';\nimport { OnEvent, onEventBy } from './on-event';\n\n/**\n * Event emitter is a handy implementation of [[OnEvent]] sender.\n *\n * Extends [[EventNotifier]] by making its [[EventNotifier.on]] method implement an [[OnEvent]] interface.\n *\n * @category Core\n * @typeparam E  An event type. This is a list of event receiver parameter types.\n */\nexport class EventEmitter<E extends any[]> extends EventNotifier<E> implements EventSender<E> {\n\n  /**\n   * An [[OnEvent]] sender.\n   *\n   * The `[OnEvent__symbol]` property is an alias of this one.\n   */\n  readonly on = onEventBy<E>(receiver => super.on(receiver));\n\n  readonly [OnEvent__symbol]: OnEvent<E> = this.on;\n\n}\n","/**\n * @module fun-events\n */\nimport { noop } from 'call-thru';\nimport { AfterEvent, afterEventBy, afterNever, afterSupplied } from '../after-event';\nimport { AfterEvent__symbol, EventKeeper } from '../event-keeper';\nimport { EventNotifier } from '../event-notifier';\nimport { EventReceiver } from '../event-receiver';\n\n/**\n * Builds an [[AfterEvent]] keeper of events sent by all event keepers in `sources` map.\n *\n * @category Core\n * @typeparam S  A type of `sources` map.\n * @param sources  A map of named event keepers the events are originated from.\n *\n * @returns An event keeper sending a map of events received from each event keeper. Each event in this map has the\n * same name as its originating event keeper in `sources`.\n */\nexport function afterAll<S extends { readonly [key: string]: EventKeeper<any> }>(\n    sources: S,\n): AfterEvent<[{ readonly [K in keyof S]: EventKeeper.Event<S[K]> }]> {\n\n  const keys = Object.keys(sources);\n\n  if (!keys.length) {\n    return afterNever;\n  }\n\n  return afterEventBy(registerReceiver, latestEvent).share();\n\n  function registerReceiver(\n      receiver: EventReceiver.Generic<[{ readonly [K in keyof S]: EventKeeper.Event<S[K]> }]>,\n  ): void {\n\n    const notifier = new EventNotifier<[{ readonly [K in keyof S]: EventKeeper.Event<S[K]> }]>();\n    const supply = notifier.on(receiver);\n    let send: () => void = noop;\n    const result: { [K in keyof S]: EventKeeper.Event<S[K]> } = {} as any;\n\n    keys.forEach(readFrom);\n\n    if (!supply.isOff) {\n      send = () => notifier.send(result);\n    }\n\n    function readFrom(key: keyof S) {\n      supply.needs(sources[key][AfterEvent__symbol]((...event) => {\n        result[key] = event;\n        send();\n      }).needs(supply));\n    }\n  }\n\n  function latestEvent(): [{ readonly [K in keyof S]: EventKeeper.Event<S[K]> }] {\n\n    const result: { [K in keyof S]: EventKeeper.Event<S[K]> } = {} as any;\n\n    keys.forEach(key =>\n        afterSupplied(sources[key])\n            .once((...event) => result[key as keyof S] = event));\n\n    return [result];\n  }\n}\n","/**\n * @module fun-events\n */\nimport { noop } from 'call-thru';\nimport { AfterEvent, afterEventBy, afterNever, afterSupplied } from '../after-event';\nimport { AfterEvent__symbol, EventKeeper } from '../event-keeper';\nimport { EventNotifier } from '../event-notifier';\nimport { EventReceiver } from '../event-receiver';\n\n/**\n * Builds an [[AfterEvent]] keeper of events sent by each of the `sources`.\n *\n * @category Core\n * @typeparam E  A type of events sent by each source.\n * @param sources  An array of source event keepers.\n *\n * @returns An event keeper sending events received from each event keeper. Each event item is an event tuple originated\n * from event keeper under the same index in `sources` array.\n */\nexport function afterEach<E extends any[]>(...sources: EventKeeper<E>[]): AfterEvent<E[]> {\n  if (!sources.length) {\n    return afterNever;\n  }\n\n  return afterEventBy(registerReceiver, latestEvent).share();\n\n  function registerReceiver(receiver: EventReceiver.Generic<E[]>): void {\n\n    const notifier = new EventNotifier<E[]>();\n    const supply = notifier.on(receiver);\n    let send: () => void = noop;\n    const result: E[] = [];\n\n    sources.forEach(readFrom);\n\n    if (!supply.isOff) {\n      send = () => notifier.send(...result);\n    }\n\n    function readFrom(source: EventKeeper<E>, index: number) {\n      supply.needs(source[AfterEvent__symbol]((...event) => {\n        result[index] = event;\n        send();\n      }).needs(supply));\n    }\n  }\n\n  function latestEvent() {\n\n    const result: E[] = [];\n\n    sources.forEach(source =>\n        afterSupplied(source)\n            .once((...event) => result.push(event)));\n\n    return result;\n  }\n}\n","/**\n * @module fun-events\n */\nimport { EventReceiver } from '../event-receiver';\nimport { EventSupplier } from '../event-supplier';\nimport { eventSupply } from '../event-supply';\nimport { OnEvent, onEventBy, onNever, onSupplied } from '../on-event';\n\n/**\n * Builds an [[OnEvent]] sender of events sent by any of the given `suppliers`.\n *\n * The resulting event supply is cut off as soon as all source supplies do.\n *\n * @category Core\n * @typeparam E  An event type. This is a list of event receiver parameter types.\n * @param suppliers  Original event suppliers.\n *\n * @returns An [[OnEvent]] sender of all supplied events.\n */\nexport function onAny<E extends any[]>(...suppliers: EventSupplier<E>[]): OnEvent<E> {\n  if (!suppliers.length) {\n    return onNever;\n  }\n\n  return onEventBy<E>(receiver => {\n\n    const { supply } = receiver;\n    let remained = suppliers.length;\n    const removeSupplier = (reason?: any) => {\n      if (!--remained) {\n        supply.off(reason);\n      }\n    };\n    const receive = (context: EventReceiver.Context<E>, ...event: E) => {\n      receiver.receive(context, ...event);\n    };\n\n    suppliers.forEach(\n        supplier => onSupplied(supplier)({\n          supply: eventSupply(removeSupplier).needs(supply),\n          receive,\n        }),\n    );\n  }).share();\n}\n","/**\n * @module fun-events\n */\n/**\n * A path to state or its part. E.g. property value.\n *\n * May consist of one or more property keys.\n *\n * An array consisting of the only one property key is the same as this property key.\n *\n * An empty array is a path to the state itself.\n *\n * @category State Tracking\n */\nexport type StatePath = PropertyKey | StatePath.Normalized;\n\nexport namespace StatePath {\n\n  /**\n   * Normalized state path.\n   *\n   * This is always an array of property keys.\n   */\n  export type Normalized = readonly PropertyKey[];\n\n}\n\n/**\n * Normalizes a state path consisting of single key.\n *\n * @category State Tracking\n * @param key  A path key.\n *\n * @return Normalized state path.\n */\nexport function statePath<K extends PropertyKey>(key: K): [K];\n\n/**\n * Normalizes arbitrary state path. I.e. converts it to array.\n *\n * @param path  Arbitrary state path.\n *\n * @return Normalized state path.\n */\nexport function statePath(path: StatePath): StatePath.Normalized;\n\nexport function statePath(path: StatePath): StatePath.Normalized {\n  return Array.isArray(path) ? path : [path];\n}\n","/**\n * @module fun-events\n */\nimport { noop } from 'call-thru';\nimport { EventEmitter } from '../event-emitter';\nimport { EventSender, OnEvent__symbol } from '../event-sender';\nimport { eventSupply, EventSupply } from '../event-supply';\nimport { onEventBy } from '../on-event';\nimport { OnStateUpdate } from './on-state-update';\nimport { statePath, StatePath } from './state-path';\nimport { StateUpdateReceiver } from './state-update-receiver';\n\nclass PathEntry {\n\n  readonly emitter = new EventEmitter<[StatePath, any, any]>();\n  private readonly _nested = new Map<PropertyKey, PathEntry>();\n\n  constructor(private readonly _drop: () => void) {\n    this.emitter.on((path, newValue, oldValue) => {\n      path = statePath(path);\n\n      const key = path[0];\n      const nested = this._nested.get(key);\n\n      if (nested) {\n        nested.emitter.send(path.slice(1), newValue, oldValue);\n      }\n    });\n  }\n\n  on(receiver: StateUpdateReceiver): EventSupply {\n\n    const entry = this;\n    const supply = this.emitter.on(receiver);\n\n    return eventSupply(reason => {\n      supply.off(reason);\n      entry._dropIfEmpty();\n    }).needs(supply);\n  }\n\n  nest(key: PropertyKey): PathEntry;\n\n  nest(key: PropertyKey, dontCreateMissing: true): PathEntry | undefined;\n\n  nest(key: PropertyKey, dontCreateMissing?: true): PathEntry | undefined;\n\n  nest(key: PropertyKey, dontCreateMissing?: true): PathEntry | undefined {\n\n    const found = this._nested.get(key);\n\n    if (found || dontCreateMissing) {\n      return found;\n    }\n\n    const created = new PathEntry(() => this._remove(key));\n\n    this._nested.set(key, created);\n\n    return created;\n  }\n\n  done(reason?: any) {\n    for (const nested of this._nested.values()) {\n      nested.done(reason);\n    }\n    this.emitter.done(reason);\n  }\n\n  private _remove(key: PropertyKey) {\n    this._nested.delete(key);\n    this._dropIfEmpty();\n  }\n\n  private _dropIfEmpty() {\n    if (!this._nested.size && this.emitter.size <= 1) {\n      this._drop();\n    }\n  }\n\n}\n\nclass Trackers {\n\n  private readonly _root = new PathEntry(noop);\n\n  on(path: StatePath.Normalized, receiver: StateUpdateReceiver): EventSupply {\n    return this._entry(path).on(receiver);\n  }\n\n  send<V>(path: StatePath.Normalized, newValue: V, oldValue: V) {\n    this._root.emitter.send(path, newValue, oldValue);\n  }\n\n  done(path: StatePath.Normalized, reason?: any) {\n\n    const entry = this._entry(path, true);\n\n    if (entry) {\n      entry.done(reason);\n    }\n  }\n\n  private _entry(path: StatePath.Normalized): PathEntry;\n\n  private _entry(path: StatePath.Normalized, dontCreateMissing: true): PathEntry | undefined;\n\n  private _entry(path: StatePath.Normalized, dontCreateMissing?: true): PathEntry | undefined {\n\n    let entry = this._root;\n\n    for (const key of path) {\n\n      const nested = entry.nest(key, dontCreateMissing);\n\n      if (!nested) {\n        return;\n      }\n\n      entry = nested;\n    }\n\n    return entry;\n  }\n\n}\n\nclass SubStateTracker implements StateTracker {\n\n  readonly update: <V>(\n      this: void,\n      path: StatePath,\n      newValue: V,\n      oldValue: V,\n  ) => void = (<V>(path: StatePath, newValue: V, oldValue: V) => {\n    this._trackers.send([...this._path, ...statePath(path)], newValue, oldValue);\n  });\n\n  readonly onUpdate: OnStateUpdate =\n      onEventBy<[StatePath, any, any]>(receiver => this._trackers.on(this._path, receiver));\n\n  constructor(private readonly _trackers: Trackers, private readonly _path: StatePath.Normalized) {\n  }\n\n  // noinspection JSUnusedGlobalSymbols\n  get _tracker() {\n    return this;\n  }\n\n  get [OnEvent__symbol](): OnStateUpdate {\n    return this.onUpdate;\n  }\n\n  track(path: StatePath): SubStateTracker {\n    path = statePath(path);\n    if (!path.length) {\n      return this; // Path to itself.\n    }\n    return new SubStateTracker(this._trackers, [...this._path, ...path]);\n  }\n\n  done(reason?: any) {\n    this._trackers.done(this._path, reason);\n  }\n\n}\n\n/**\n * State changes tracker.\n *\n * A state is a tree-like structure of sub-states (nodes) available under [[StatePath]].\n *\n * When node modified a [[StateTracker.update]] should be called. Then all state update receivers registered by\n * [[StateTracker.onUpdate]] will receive this update.\n *\n * @category State Tracking\n */\nexport class StateTracker implements EventSender<[StatePath, any, any]> {\n\n  /**\n   * @internal\n   */\n  readonly _tracker: SubStateTracker = new SubStateTracker(new Trackers(), []);\n\n  /**\n   * A {@link OnStateUpdate state updates sender}.\n   *\n   * A state update will be sent to it whenever an `update()` function is called.\n   */\n  get onUpdate(): OnStateUpdate {\n    return this._tracker.onUpdate;\n  }\n\n  get [OnEvent__symbol](): OnStateUpdate {\n    return this.onUpdate;\n  }\n\n  // noinspection JSCommentMatchesSignature\n  /**\n   * Updates the component state.\n   *\n   * All receivers registered with [[onUpdate]] will receive this update.\n   *\n   * @typeparam V  A type of changed value.\n   * @param key  Changed value key.\n   * @param newValue  New value.\n   * @param oldValue  Previous value.\n   */\n  get update(): <V>(\n      this: void,\n      path: StatePath,\n      newValue: V,\n      oldValue: V,\n  ) => void {\n    return this._tracker.update;\n  }\n\n  /**\n   * Starts tracking of partial state under the given path.\n   *\n   * @param path  A path to state part.\n   *\n   * @return New partial state tracker.\n   */\n  track(path: StatePath): StateTracker {\n\n    const subTracker = this._tracker.track(path);\n\n    return subTracker === this._tracker ? this : subTracker;\n  }\n\n  /**\n   * Unregisters updates receivers and cuts off their supplies.\n   *\n   * After this method call the updates receivers of this partial state and all nested states won't receive any updates.\n   *\n   * @param reason  An optional reason to stop tracking.\n   */\n  done(reason?: any) {\n    this._tracker.done(reason);\n  }\n\n}\n","/**\n * @module fun-events\n */\nimport { AfterEvent, afterEventBy } from '../after-event';\nimport { AfterEvent__symbol, EventKeeper, isEventKeeper } from '../event-keeper';\nimport { EventReceiver } from '../event-receiver';\nimport { EventSender, OnEvent__symbol } from '../event-sender';\nimport { EventSupplier } from '../event-supplier';\nimport { EventSupply, noEventSupply } from '../event-supply';\nimport { OnEvent, onSupplied } from '../on-event';\n\n/**\n * Value accessor and changes tracker.\n *\n * Implements an [[EventSender]] interface by sending value changes to registered receivers as a pair of new and old\n * values.\n *\n * Implements an [[EventKeeper]] interface by sending current value and its updates.\n *\n * @category Value Tracking\n * @typeparam T  Tracked value type.\n * @typeparam N  New (updated) value type.\n */\nexport abstract class ValueTracker<T = any, N extends T = T> implements EventSender<[N, T]>, EventKeeper<[T]> {\n\n  /**\n   * @internal\n   */\n  private _by = noEventSupply();\n\n  /**\n   * An [[OnEvent]] sender of value changes. The new value is sent as first argument, and the old value as a second one.\n   *\n   * The `[OnEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly on: OnEvent<[N, T]>;\n\n  /**\n   * An [[AfterEvent]] keeper of current value.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   */\n  readonly read: AfterEvent<[T]> = afterEventBy<[T]>(\n      receiver => this.on(receiveNewValue(receiver)),\n      () => [this.it],\n  );\n\n  get [OnEvent__symbol](): OnEvent<[N, T]> {\n    return this.on;\n  }\n\n  get [AfterEvent__symbol](): AfterEvent<[T]> {\n    return this.read;\n  }\n\n  /**\n   * The tracked value.\n   */\n  abstract it: T;\n\n  /**\n   * Updates the tracked value by the given value `supplier`.\n   *\n   * If the value is already updated by another supplier, then unbinds from the old one first.\n   *\n   * Call the [[ValueTracker.byNone]] method to unbind the tracked value from the `source`.\n   *\n   * Note that explicitly updating the value would override the value received from the `source`.\n   *\n   * @param supplier  The source value sender or keeper.\n   *\n   * @returns `this` instance.\n   */\n  by(supplier: EventSupplier<[T]>): this;\n\n  /**\n   * Updates the tracked value by value suppliers extracted from events sent by the given `supplier`.\n   *\n   * If the value is already updated by another value supplier, then unbinds from the old one first.\n   *\n   * Call the [[ValueTracker.byNone]] method to unbind the tracked value from the `source`.\n   *\n   * Note that explicitly updating the value would override the value received from the `source`.\n   *\n   * @typeparam S  Source value type.\n   * @param supplier  The event supplier to extract value suppliers from.\n   * @param extract  A function extracting value supplier from event received from `supplier`.\n   * May return `undefined` to suspend receiving values.\n   *\n   * @returns `this` instance.\n   */\n  by<S extends any[]>(\n      supplier: EventSupplier<S>,\n      extract: (this: void, ...event: S) => EventSupplier<[T]> | undefined,\n  ): this;\n\n  by<S extends any[]>(\n      supplier: EventSupplier<S> | EventSupplier<[T]>,\n      extract?: (this: void, ...event: S) => EventSupplier<[T]> | undefined,\n  ): this {\n\n    const self = this;\n\n    this.byNone();\n\n    if (!extract) {\n\n      const sender = supplier as EventSupplier<[T]>;\n\n      this._by = acceptValuesFrom(sender);\n    } else {\n\n      const container = supplier as EventSupplier<S>;\n\n      this._by = onSupplied(container).consume((...event: S) => {\n\n        const sender = extract(...event);\n\n        if (sender) {\n          return acceptValuesFrom(sender);\n        }\n\n        return;\n      });\n    }\n    this._by.whenOff(() => this._by = noEventSupply());\n\n    return this;\n\n    function acceptValuesFrom(sender: EventSupplier<[T]>): EventSupply {\n\n      const registrar = isEventKeeper(sender) ? sender[AfterEvent__symbol] : sender[OnEvent__symbol];\n\n      return registrar(value => self.it = value);\n    }\n  }\n\n  /**\n   * Unbinds the tracked value from any value supplier this tracker is {@link ValueTracker.by updated by}.\n   *\n   * If the tracker is not bound then does nothing.\n   *\n   * @param reason  Arbitrary reason of unbinding the value.\n   *\n   * @returns `this` instance.\n   */\n  byNone(reason?: any): this {\n    this._by.off(reason);\n    return this;\n  }\n\n  /**\n   * Removes all registered event receivers and cuts off corresponding event supplies.\n   *\n   * After this method call they won't receive events.\n\n   * @param reason  A reason to stop sending events.\n   *\n   * @returns `this` instance.\n   */\n  abstract done(reason?: any): this;\n\n}\n\nfunction receiveNewValue<T, N extends T>(\n    valueReceiver: EventReceiver.Generic<[T]>,\n): EventReceiver.Generic<[N, T]> {\n  return {\n    supply: valueReceiver.supply,\n    receive(context, newValue) {\n      valueReceiver.receive(\n          {\n            onRecurrent(recurrentReceiver) {\n              context.onRecurrent(recurrentValue => recurrentReceiver(recurrentValue));\n            },\n          },\n          newValue,\n      );\n    },\n  };\n}\n","/**\n * @module fun-events\n */\nimport { EventEmitter } from '../event-emitter';\nimport { EventKeeper } from '../event-keeper';\nimport { ValueTracker } from './value-tracker';\n\nclass TrackedValue<T> extends ValueTracker<T> {\n\n  private readonly _on = new EventEmitter<[T, T]>();\n\n  constructor(private _it: T) {\n    super();\n  }\n\n  get on() {\n    return this._on.on;\n  }\n\n  get it(): T {\n    return this._it;\n  }\n\n  set it(value: T) {\n\n    const oldValue = this._it;\n\n    if (oldValue !== value) {\n      this._it = value;\n      this._on.send(value, oldValue);\n    }\n  }\n\n  done(reason?: any): this {\n    this._on.done(reason);\n    return this;\n  }\n\n}\n\n/**\n * Constructs a value which changes can be tracked.\n *\n * @category Value Tracking\n * @param initial  Initial value.\n *\n * @returns Value tracker instance.\n */\nexport function trackValue<T>(initial: T): ValueTracker<T>;\n\n/**\n * Constructs an optional value which changes can be tracked.\n *\n * @param initial  Initial value.\n *\n * @returns Value tracker instance.\n */\nexport function trackValue<T>(initial?: T): ValueTracker<T | undefined>;\n\nexport function trackValue<T>(initial: T): ValueTracker<T> {\n  return new TrackedValue<T>(initial);\n}\n\n/**\n * Constructs a tracked value updated by the given value `supplier`.\n *\n * If the value is already updated by another supplier, then unbinds from the old one first.\n *\n * Call the [[ValueTracker.byNone]] method to unbind the tracked value from the `source`.\n *\n * Note that explicitly updating the value would override the value received from the `source`.\n *\n * @category Value Tracking\n * @param supplier  The source value keeper.\n *\n * @returns `this` instance.\n */\nexport function trackValueBy<T>(supplier: EventKeeper<[T]>): ValueTracker<T>;\n\n/**\n * Constructs a tracked value updated by value keepers extracted from events sent by the given `supplier`.\n *\n * If the value is already updated by another value supplier, then unbinds from the old one first.\n *\n * Call the [[ValueTracker.byNone]] method to unbind the tracked value from the `source`.\n *\n * Note that explicitly updating the value would override the value received from the `source`.\n *\n * @typeparam S  Source value type.\n * @param supplier  The event keeper to extract value keepers from.\n * @param extract  A function extracting value keeper from event received from `supplier`.\n *\n * @returns `this` instance.\n */\nexport function trackValueBy<T, S extends any[]>(\n    supplier: EventKeeper<S>,\n    extract: (this: void, ...event: S) => EventKeeper<[T]>,\n): ValueTracker<T>;\n\nexport function trackValueBy<T, S extends any[]>(\n    supplier: EventKeeper<S> | EventKeeper<[T]>,\n    extract?: (this: void, ...event: S) => EventKeeper<[T]>,\n): ValueTracker<T> {\n  return (trackValue() as any).by(supplier, extract);\n}\n","/**\n * @module fun-events\n */\nimport { afterSupplied } from '../after-event';\nimport { EventEmitter } from '../event-emitter';\nimport { EventKeeper, isEventKeeper } from '../event-keeper';\nimport { EventSender } from '../event-sender';\nimport { EventSupplier } from '../event-supplier';\nimport { eventSupply, EventSupply } from '../event-supply';\nimport { OnEvent, onSupplied } from '../on-event';\nimport { ValueTracker } from './value-tracker';\n\n/**\n * Synchronizes tracked values with each other.\n *\n * Any change to any of the added tracked values would update all the others.\n *\n * @category Value Tracking\n */\nexport class ValueSync<T> extends ValueTracker<T> {\n\n  /**\n   * @internal\n   */\n  private readonly _on = new EventEmitter<[T, T]>();\n\n  /**\n   * @internal\n   */\n  private _it: T;\n\n  constructor(initial: T) {\n    super();\n    this._it = initial;\n  }\n\n  get on(): OnEvent<[T, T]> {\n    return this._on.on;\n  }\n\n  get it(): T {\n    return this._it;\n  }\n\n  set it(value: T) {\n\n    const old = this.it;\n\n    if (old !== value) {\n      this._it = value;\n      this._on.send(value, old);\n    }\n  }\n\n  /**\n   * Synchronizes the tracked value with the others.\n   *\n   * Applies the value from this sync to the given tracker first.\n   *\n   * @param tracker  A value tracker to keep in sync.\n   *\n   * @returns An event supply. {@link EventSupply.off Cut it off} to break synchronization.\n   */\n  sync(tracker: ValueTracker<T, any>): EventSupply;\n\n  /**\n   * Synchronizes the tracked value with the others in the given direction.\n   *\n   * @param direction  If set to `\"in\"` the value from the given tracker takes precedence over the one in [[ValueSync]].\n   * Otherwise the value from the sync is applied to the given tracker first.\n   * @param tracker  A value tracker to keep in sync.\n   *\n   * @returns An event supply. {@link EventSupply.off Cut it off} to break synchronization.\n   */\n  sync(direction: 'in' | 'out', tracker: ValueTracker<T, any>): EventSupply;\n\n  /**\n   * Synchronizes the tracked value with the ones extracted from the events sent by the given `supplier`.\n   *\n   * Once next value tracker extracted the previous one becomes out of sync.\n   *\n   * Applies the value from this sync to extracted trackers.\n   *\n   * @param supplier  The event supplier to extract value trackers from.\n   * @param extract  A function extracting the value tracker to keep in sync from the event received from `supplier`.\n   * May return `undefined` to just break the sync with previous tracker.\n   *\n   * @returns An event supply. {@link EventSupply.off Cut it off} to break synchronization.\n   */\n  sync<U extends any[]>(\n      supplier: EventSupplier<U>,\n      extract: (this: void, ...event: U) => ValueTracker<T, any> | undefined,\n  ): EventSupply;\n\n  /**\n   * Synchronizes the tracked value with the ones extracted from the events sent by the given `supplier`\n   * in the given direction.\n   *\n   * Once next value tracker extracted the previous one becomes out of sync.\n   *\n   * @param direction  If set to `\"in\"` the value from extracted tracker takes precedence over the one in\n   * [[ValueSync]]. Otherwise the value from the sync is applied to extracted trackers first.\n   * @param supplier  The event supplier to extract value trackers from.\n   * @param extract  A function extracting the value tracker to keep in sync from the event received from `supplier`.\n   * May return `undefined` to just break the sync with previous tracker.\n   *\n   * @returns An event supply. {@link EventSupply.off Cut it off} to break synchronization.\n   */\n  sync<U extends any[]>(\n      direction: 'in' | 'out',\n      supplier: EventSupplier<U>,\n      extract: (this: void, ...event: U) => ValueTracker<T, any> | undefined,\n  ): EventSupply;\n\n  sync<U extends any[]>(\n      first: 'in' | 'out' | ValueTracker<T, any> | EventSupplier<U>,\n      second?: ValueTracker<T, any>\n          | EventSender<U>\n          | EventKeeper<U>\n          | ((this: void, ...event: U) => ValueTracker<T, any> | undefined),\n      third?: (this: void, ...event: U) => ValueTracker<T, any> | undefined,\n  ): EventSupply {\n\n    let syncWithTracker = (tracker: ValueTracker<T, any>) => syncTrackers(this, tracker);\n    let source: ValueTracker<T, any> | EventSupplier<U>;\n    let extract: ((this: void, ...event: U) => ValueTracker<T, any> | undefined) | undefined;\n\n    if (typeof first === 'string') {\n      if (first === 'in') {\n        syncWithTracker = tracker => syncTrackers(tracker, this);\n      }\n      source = second as ValueTracker<T, any> | EventSender<U> | EventKeeper<U>;\n      extract = third;\n    } else {\n      source = first;\n      extract = second as (this: void, ...event: U) => ValueTracker<T, any> | undefined;\n    }\n\n    const extractTracker = extract;\n\n    if (!extractTracker) {\n      return syncWithTracker(source as ValueTracker<T, any>);\n    }\n\n    const supplier = source as EventSupplier<U>;\n\n    return (isEventKeeper(supplier) ? afterSupplied(supplier) : onSupplied(supplier)).consume((...event) => {\n\n      const tracker = extractTracker(...event);\n\n      return tracker && syncWithTracker(tracker);\n    });\n\n    function syncTrackers(tracker1: ValueTracker<T, any>, tracker2: ValueTracker<T, any>) {\n\n      const supply1 = tracker1.read(value => {\n        tracker2.it = value;\n      });\n      const supply2 = tracker2.on(value => {\n        tracker1.it = value;\n      });\n\n      return eventSupply(reason => {\n        supply2.off(reason);\n        supply1.off(reason);\n      }).needs(supply1).needs(supply2);\n    }\n  }\n\n  done(reason?: any): this {\n    this._on.done(reason);\n    return this;\n  }\n\n}\n","/**\n * @module context-values\n */\nimport { ContextRef } from './context-ref';\nimport { ContextSeeder } from './context-seeder';\nimport { ContextValues } from './context-values';\n\n/**\n * A symbol of the property containing a [[ContextKey]] instance.\n */\nexport const ContextKey__symbol = /*#__PURE__*/ Symbol('context-key');\n\n/**\n * Context value key.\n *\n * Every key should be an unique instance of this class.\n *\n * Multiple source values pay be provided per per value key. They all grouped into single seed.\n * The value is grown from this seed by [[ContextKey.grow]] method.\n *\n * @typeparam Value  Context value type.\n * @typeparam Src  Source value type.\n * @typeparam Seed  Value seed type.\n */\nexport abstract class ContextKey<Value, Src = Value, Seed = unknown> implements ContextRef<Value, Src, Seed> {\n\n  /**\n   * Human-readable key name.\n   *\n   * This is not necessarily unique.\n   */\n  readonly name: string;\n\n  /**\n   * A key of context value holding a seed of the value associated with this key.\n   *\n   * Different context value keys may have the same [[seedKey]] to grow them from the same seed.\n   */\n  abstract readonly seedKey: ContextSeedKey<Src, Seed>;\n\n  /**\n   * Constructs context value key.\n   *\n   * @param name  Human-readable key name.\n   */\n  protected constructor(name: string) {\n    this.name = name;\n  }\n\n  /**\n   * Always the key itself.\n   *\n   * This is to use this context value key both as a context value request and its definition target.\n   */\n  get [ContextKey__symbol](): this {\n    return this;\n  }\n\n  /**\n   * Grows context value out of its seed.\n   *\n   * @typeparam Ctx  Context type.\n   * @param opts  Context value growth options.\n   *\n   * @returns Single context value, or `undefined` if there is no default value.\n   */\n  abstract grow<Ctx extends ContextValues>(opts: ContextValueOpts<Ctx, Value, Src, Seed>): Value | null | undefined;\n\n  toString(): string {\n    return `ContextKey(${this.name})`;\n  }\n\n}\n\n/**\n * Context value growth options.\n *\n * An instance of these options is passed to [[ContextKey.grow]] method to provide the necessary value growth context.\n *\n * @typeparam Ctx  Context type.\n * @typeparam Value  Context value type.\n * @typeparam Src  Source value type.\n * @typeparam Seed  Value seed type.\n */\nexport interface ContextValueOpts<Ctx extends ContextValues, Value, Src, Seed> {\n\n  /**\n   * Target context.\n   */\n  readonly context: Ctx;\n\n  /**\n   * Context value seeder.\n   */\n  readonly seeder: ContextSeeder<Ctx, Src, Seed>;\n\n  /**\n   * Context value seed.\n   */\n  readonly seed: Seed;\n\n  /**\n   * Handles missing context value.\n   *\n   * It can be called to prefer a fallback value over the default one specified in the value key.\n   *\n   * @param defaultProvider  Default value provider. It is called unless a fallback value is specified.\n   * If it returns a non-null/non-undefined value, then the returned value will be associated with the context key.\n   */\n  byDefault(defaultProvider: () => Value | null | undefined): Value | null | undefined;\n\n}\n\n/**\n * A provider of default value of context key.\n *\n * This is typically passed as `byDefault` option to context value key constructor.\n *\n * @typeparam Ctx  Context type.\n * @typeparam Value  Context value type.\n * @typeparam Key  Context key type.\n */\nexport type ContextKeyDefault<Value, Key extends ContextKey<any, any, any>> =\n/**\n * @param context  Target context.\n * @param key  Context value key the default value is provided for.\n *\n * @return Either constructed value, or `null`/`undefined` if unknown.\n */\n    (this: void, context: ContextValues, key: Key) => Value | null | undefined;\n\n/**\n * A key of context value holding a seed of context value.\n *\n * @typeparam Src  Source value type.\n * @typeparam Seed  Value seed type.\n */\nexport abstract class ContextSeedKey<Src, Seed> extends ContextKey<Seed, Src, Seed> {\n\n  /**\n   * Constructs context value sources key.\n   *\n   * @param key  A key of context value having its sources associated with this key.\n   */\n  constructor(key: ContextKey<any, Src>) {\n    super(`${key.name}:seed`);\n  }\n\n  /**\n   * Always refers to itself.\n   */\n  get seedKey(): this {\n    return this;\n  }\n\n  /**\n   * Creates a seeder for values associated with this key.\n   *\n   * @typeparam Ctx  Context type.\n   *\n   * @returns New value seeder instance.\n   */\n  abstract seeder<Ctx extends ContextValues>(): ContextSeeder<Ctx, Src, Seed>;\n\n  grow<Ctx extends ContextValues>(opts: ContextValueOpts<Ctx, Seed, Src, Seed>): Seed | null | undefined {\n\n    const { seeder, seed } = opts;\n\n    return seeder.isEmpty(seed) ? opts.byDefault(() => seed) : seed;\n  }\n\n}\n","/**\n * @module context-values\n */\nimport { ContextKey } from './context-key';\n\n/**\n * An error indicating the absence of context value with the given key.\n */\nexport class ContextKeyError extends Error {\n\n  /**\n   * A missing value key.\n   */\n  readonly key: ContextKey<any, any, any>;\n\n  /**\n   * Constructs an invalid context key error.\n   *\n   * @param key  Missing value key.\n   * @param message  Arbitrary error message.\n   */\n  constructor(key: ContextKey<any, any, any>, message: string = `There is no value with key ${key}`) {\n    super(message);\n    this.key = key;\n  }\n\n}\n","/**\n * @module context-values\n */\nimport { valueProvider } from 'call-thru';\nimport { ContextRequest, ContextTarget } from './context-ref';\nimport { ContextValues } from './context-values';\n\n/**\n * Context value provider.\n *\n * It is responsible for constructing the values associated with particular key for the given context. Note that\n * provider generates source value, not the context values themselves.\n *\n * @typeparam Ctx  Context type.\n * @typeparam Src  Source value type.\n */\nexport type ContextValueProvider<Ctx extends ContextValues, Src> =\n/**\n * @param context  Target context.\n *\n * @return Either constructed value source, or `null`/`undefined` if unknown.\n */\n    (this: void, context: Ctx) => Src | null | undefined;\n\n/**\n * Context value specifier.\n *\n * @typeparam Ctx  Context type.\n * @typeparam Value  Context value type.\n * @typeparam Deps  Dependencies tuple type.\n * @typeparam Src  Source value type.\n * @typeparam Seed  Value seed type.\n */\nexport type ContextValueSpec<\n    Ctx extends ContextValues,\n    Value,\n    Deps extends any[] = unknown[],\n    Src = Value,\n    Seed = unknown> =\n    | ContextValueSpec.IsConstant<Src, Seed>\n    | ContextValueSpec.ViaAlias<Src, Seed>\n    | ContextValueSpec.ByProvider<Ctx, Src, Seed>\n    | ContextValueSpec.ByProviderWithDeps<Deps, Src, Seed>\n    | ContextValueSpec.AsInstance<Ctx, Src, Seed>\n    | ContextValueSpec.SelfInstance<Ctx, Src, Seed>\n    | ContextValueSpec.AsInstanceWithDeps<Deps, Src, Seed>\n    | ContextValueSpec.SelfInstanceWithDeps<Deps, Src, Seed>;\n\nexport namespace ContextValueSpec {\n\n  /**\n   * A specifier defining a context value is constant.\n   *\n   * @typeparam Src  Source value type.\n   * @typeparam Seed  Value seed type.\n   */\n  export interface IsConstant<Src, Seed = unknown> {\n\n    /**\n     * Target value to define.\n     */\n    a: ContextTarget<Src, Seed>;\n\n    /**\n     * Constant context value.\n     */\n    is: Src;\n\n  }\n\n  /**\n   * A specifier defining a context value via another one (alias).\n   *\n   * @typeparam Sec  Source value type.\n   * @typeparam Seed  Value seed type.\n   */\n  export interface ViaAlias<Src, Seed = unknown> {\n\n    /**\n     * Target value to define.\n     */\n    a: ContextTarget<Src, Seed>;\n\n    /**\n     * Context value request for the another value that will be used instead as provided one.\n     */\n    via: ContextRequest<Src, Seed>;\n\n  }\n\n  /**\n   * A specifier of context value defined by provider function.\n   *\n   * @typeparam Ctx  Context type.\n   * @typeparam Src  Source value type.\n   * @typeparam Seed  Value seed type.\n   */\n  export interface ByProvider<Ctx extends ContextValues, Src, Seed = unknown> {\n\n    /**\n     * Target value to define.\n     */\n    a: ContextTarget<Src, Seed>;\n\n    /**\n     * Context value provider.\n     */\n    by: ContextValueProvider<Ctx, Src>;\n\n  }\n\n  /**\n   * A specifier of context value defined by provider function depending on other context values.\n   *\n   * @typeparam Deps  Dependencies tuple type.\n   * @typeparam Src  Source value type.\n   * @typeparam Seed  Value seed type.\n   */\n  export interface ByProviderWithDeps<Deps extends any[], Src, Seed = unknown> {\n\n    /**\n     * Target value to define.\n     */\n    a: ContextTarget<Src, Seed>;\n\n    /**\n     * Context value provider function.\n     */\n    by: (this: void, ...args: Deps) => Src | null | undefined;\n\n    /**\n     * Context value requests for corresponding value provider function arguments.\n     */\n    with: DepsRequests<Deps>;\n\n  }\n\n  /**\n   * A specifier of context value defined as instance of some class.\n   *\n   * @typeparam Ctx  Context type.\n   * @typeparam Src  Source value type.\n   * @typeparam Seed  Value seed type.\n   */\n  export interface AsInstance<Ctx extends ContextValues, Src, Seed = unknown> {\n\n    /**\n     * Target value to define.\n     */\n    a: ContextTarget<Src, Seed>;\n\n    /**\n     * Context value class constructor.\n     */\n    as: new (context: Ctx) => Src;\n\n  }\n\n  /**\n   * A specifier of context value defined as instance of the same class as value.\n   *\n   * @typeparam Ctx  Context type.\n   * @typeparam Src  Source value type.\n   * @typeparam Seed  Value seed type.\n   */\n  export interface SelfInstance<Ctx extends ContextValues, Src, Seed = unknown> {\n\n    /**\n     * Target value to define as its class constructor.\n     */\n    as: ContextTarget<Src, Seed> & (new (context: Ctx) => Src);\n\n  }\n\n  /**\n   * A specifier of context value defined as instance of some class with constructor depending on other context values.\n   *\n   * @typeparam Deps  Dependencies tuple type.\n   * @typeparam Src  Source value type.\n   * @typeparam Seed  Value seed type.\n   */\n  export interface AsInstanceWithDeps<Deps extends any[], Src, Seed = unknown> {\n\n    /**\n     * Target value to define.\n     */\n    a: ContextTarget<Src, Seed>;\n\n    /**\n     * Context value class constructor.\n     */\n    as: new (...args: Deps) => Src;\n\n    /**\n     * Context value requests for corresponding constructor arguments.\n     */\n    with: DepsRequests<Deps>;\n\n  }\n\n  /**\n   * A specifier of context value defined as instance of the same class as value with constructor depending on other\n   * context values.\n   *\n   * @typeparam Deps  Dependencies tuple type.\n   * @typeparam Src  Source value type.\n   * @typeparam Seed  Value seed type.\n   */\n  export interface SelfInstanceWithDeps<Deps extends any[], Src, Seed = unknown> {\n\n    /**\n     * Target value to define as its class constructor.\n     */\n    as: ContextTarget<Src, Seed> & (new (...args: Deps) => Src);\n\n    /**\n     * Context value requests for corresponding constructor arguments.\n     */\n    with: DepsRequests<Deps>;\n\n  }\n\n  /**\n   * Dependencies requests.\n   *\n   * This is a tuple of context value requests, each of which corresponds to dependency.\n   *\n   * @typeparam Deps  Dependencies tuple type.\n   */\n  export type DepsRequests<Deps extends any[]> = {\n    [K in keyof Deps]: ContextRequest<Deps[K]>;\n  };\n\n}\n\n/**\n * Constructs a specifier of context value defined by provider out of arbitrary one.\n *\n * @typeparam Ctx  Context type.\n * @typeparam Value  Context value type.\n * @typeparam Deps  Dependencies tuple type.\n * @typeparam Src  Source value type.\n * @param spec  Context value specifier to convert.\n *\n * @returns A specifier of context value defined by provider function.\n *\n * @throws TypeError  On malformed context value specifier.\n */\nexport function contextValueSpec<Ctx extends ContextValues, Value, Deps extends any[], Src, Seed>(\n    spec: ContextValueSpec<Ctx, Value, Deps, Src, Seed>,\n): ContextValueSpec.ByProvider<Ctx, Src, Seed> {\n  if (byProvider(spec)) {\n    if (!withDeps<Ctx, Deps, Src, Seed>(spec)) {\n      return spec;\n    }\n\n    const { a, by, with: deps } = spec;\n\n    return {\n      a,\n      by(this: void, context: Ctx) {\n        return by(...deps.map(dep => context.get(dep)) as Deps);\n      },\n    };\n  }\n  if (isConstant<Src, Seed>(spec)) {\n\n    const { a, is: value } = spec;\n\n    return {\n      a,\n      by: valueProvider(value),\n    };\n  }\n  if (viaAlias(spec)) {\n\n    const { a, via } = spec;\n\n    return {\n      a,\n      by(ctx: Ctx) {\n        return ctx.get(via);\n      },\n    };\n  }\n  if (asInstance<Ctx, Deps, Src, Seed>(spec)) {\n    if (selfInstance<Ctx, Deps, Src, Seed>(spec)) {\n      spec = toAsInstance(spec);\n    }\n    if (!withDeps<Ctx, Deps, Src, Seed>(spec)) {\n\n      const { a, as: type } = spec;\n\n      return {\n        a,\n        by(ctx: Ctx) {\n          return new type(ctx);\n        },\n      };\n    } else {\n\n      const { a, as: type, with: deps } = spec;\n\n      return {\n        a,\n        by(this: void, context: Ctx) {\n          return new type(...deps.map(dep => context.get(dep)) as Deps);\n        },\n      };\n    }\n  }\n\n  throw new TypeError(`Malformed context value specifier: ${spec}`);\n}\n\nfunction byProvider<Ctx extends ContextValues, Deps extends any[], Src, Seed>(\n    spec: ContextValueSpec<Ctx, any, Deps, Src, Seed>,\n): spec is ContextValueSpec.ByProvider<Ctx, Src, Seed> | ContextValueSpec.ByProviderWithDeps<Deps, Src, Seed> {\n  return 'by' in spec;\n}\n\nfunction asInstance<Ctx extends ContextValues, Deps extends any[], Src, Seed>(\n    spec: ContextValueSpec<Ctx, any, Deps, Src, Seed>,\n): spec is ContextValueSpec.AsInstance<Ctx, Src, Seed> | ContextValueSpec.AsInstanceWithDeps<Deps, Src, Seed> {\n  return 'as' in spec;\n}\n\nfunction selfInstance<Ctx extends ContextValues, Deps extends any[], Src, Seed>(\n    spec: ContextValueSpec<Ctx, any, Deps, Src, Seed>,\n): spec is ContextValueSpec.SelfInstance<Ctx, Src, Seed> | ContextValueSpec.SelfInstanceWithDeps<Deps, Src, Seed> {\n  return !('a' in spec);\n}\n\nfunction toAsInstance<Ctx extends ContextValues, Deps extends any[], Src, Seed>(\n    spec: ContextValueSpec.SelfInstance<Ctx, Src, Seed> | ContextValueSpec.SelfInstanceWithDeps<Deps, Src, Seed>,\n): ContextValueSpec.AsInstance<Ctx, Src, Seed> | ContextValueSpec.AsInstanceWithDeps<Deps, Src, Seed> {\n  return {\n    ...spec,\n    a: spec.as,\n  } as ContextValueSpec.AsInstance<Ctx, Src, Seed> | ContextValueSpec.AsInstanceWithDeps<Deps, Src, Seed>;\n}\n\nfunction isConstant<Src, Seed>(\n    spec: ContextValueSpec<any, any, any, Src, Seed>,\n): spec is ContextValueSpec.IsConstant<Src, Seed> {\n  return 'is' in spec;\n}\n\nfunction viaAlias<Src, Seed>(\n    spec: ContextValueSpec<any, any, any, Src, Seed>,\n): spec is ContextValueSpec.ViaAlias<Src, Seed> {\n  return 'via' in spec;\n}\nfunction withDeps<Ctx extends ContextValues, Deps extends any[], Src, Seed>(\n    spec: ContextValueSpec.ByProvider<Ctx, Src, Seed> | ContextValueSpec.ByProviderWithDeps<Deps, Src, Seed>,\n): spec is ContextValueSpec.ByProviderWithDeps<Deps, Src, Seed>;\n\nfunction withDeps<Ctx extends ContextValues, Deps extends any[], Src, Seed>(\n    spec: ContextValueSpec.AsInstance<Ctx, Src, Seed> | ContextValueSpec.AsInstanceWithDeps<Deps, Src, Seed>,\n): spec is ContextValueSpec.AsInstanceWithDeps<Deps, Src, Seed>;\n\nfunction withDeps<Ctx extends ContextValues, Deps extends any[], Src, Seed>(\n    spec: ContextValueSpec<Ctx, any, Deps, Src, Seed>,\n): boolean {\n  return 'with' in spec;\n}\n","/**\n * @module context-values\n */\nimport { ContextRequest } from './context-ref';\n\n/**\n * The values available from context.\n *\n * The values are available by their keys.\n */\nexport abstract class ContextValues {\n\n  /**\n   * Returns a value associated with the given key.\n   *\n   * @typeparam Value  A type of associated value.\n   * @param request  Context value request with target key.\n   * @param opts  Context value request options.\n   *\n   * @returns Associated value or `null` when there is no associated value.\n   */\n  abstract get<Value>(request: ContextRequest<Value>, opts: ContextRequest.OrNull<Value>): Value | null;\n\n  /**\n   * Returns a value associated with the given key.\n   *\n   * @typeparam Value  A type of associated value.\n   * @param request  Context value request with target key.\n   * @param opts  Context value request options.\n   *\n   * @returns Associated value or `undefined` when there is no associated value.\n   */\n  abstract get<Value>(request: ContextRequest<Value>, opts: ContextRequest.OrUndefined<Value>): Value | undefined;\n\n  /**\n   * Returns a value associated with the given key.\n   *\n   * @typeparam Value  A type of associated value.\n   * @param request  Context value request with target key.\n   * @param opts  Context value request options.\n   *\n   * @returns Associated value. Or the default one when there is no associated value. Or key default when there is\n   * neither.\n   *\n   * @throws Error  If there is no value associated with the given key, the default value is not provided,\n   * and the key has no default value.\n   */\n  abstract get<Value>(request: ContextRequest<Value>, opts?: ContextRequest.OrFallback<Value>): Value;\n\n}\n","/**\n * @module context-values\n */\nimport { noop } from 'call-thru';\nimport { ContextKey, ContextKey__symbol, ContextSeedKey, ContextValueOpts } from './context-key';\nimport { ContextKeyError } from './context-key-error';\nimport { ContextRef, ContextRequest } from './context-ref';\nimport { ContextSeeder, ContextSeeds } from './context-seeder';\nimport { contextValueSpec, ContextValueSpec } from './context-value-spec';\nimport { ContextValues } from './context-values';\n\ntype SeedFactory<Ctx extends ContextValues, Seed> = (this: void, context: Ctx) => Seed;\n\ntype Seeding<Ctx extends ContextValues, Src, Seed> = [ContextSeeder<Ctx, Src, Seed>, SeedFactory<Ctx, Seed>];\n\n/**\n * A registry of context value providers.\n *\n * @typeparam Ctx  Context type.\n */\nexport class ContextRegistry<Ctx extends ContextValues = ContextValues> {\n\n  /** @internal */\n  private readonly _initial: ContextSeeds<Ctx>;\n\n  /** @internal */\n  private readonly _seeds = new Map<ContextSeedKey<any, any>, Seeding<Ctx, any, any>>();\n\n  /** @internal */\n  private _nonCachedValues?: ContextValues;\n\n  /**\n   * Constructs a registry for context value providers.\n   *\n   * It can be chained with another registry by providing an initially known source of known context values.\n   *\n   * @param initial  An optional source of initially known context values. This can be either a function, or\n   * `ContextValues` instance.\n   */\n  constructor(initial?: ContextSeeds<Ctx> | ContextValues) {\n    if (initial == null) {\n      this._initial = noop;\n    } else if (typeof initial === 'function') {\n      this._initial = initial;\n    } else {\n      this._initial = seedKey => initial.get(seedKey);\n    }\n  }\n\n  /**\n   * Provides context value.\n   *\n   * @typeparam Deps  Dependencies tuple type.\n   * @typeparam Src  Source value type.\n   * @typeparam Seed  Value seed type.\n   * @param spec  Context value specifier.\n   *\n   * @returns A function that removes the given context value specifier when called.\n   */\n  provide<Deps extends any[], Src, Seed>(spec: ContextValueSpec<Ctx, any, Deps, Src, Seed>): () => void {\n\n    const { a: { [ContextKey__symbol]: { seedKey } }, by } = contextValueSpec(spec);\n    const [seeder] = this._seeding<Src, Seed>(seedKey);\n\n    return seeder.provide(by);\n  }\n\n  /**\n   * @internal\n   */\n  private _seeding<Src, Seed>(seedKey: ContextSeedKey<Src, Seed>): Seeding<Ctx, Src, Seed> {\n\n    const found: Seeding<Ctx, Src, Seed> | undefined = this._seeds.get(seedKey);\n\n    if (found) {\n      return found;\n    }\n\n    const seeder: ContextSeeder<Ctx, Src, Seed> = seedKey.seeder();\n    const factory: SeedFactory<Ctx, Seed> = context => seeder.seed(context, this._initial(seedKey, context));\n    const seeding: Seeding<Ctx, Src, Seed> = [seeder, factory];\n\n    this._seeds.set(seedKey, seeding);\n\n    return seeding;\n  }\n\n  /**\n   * Creates a seed for the given key in target context.\n   *\n   * @param context  Target context.\n   * @param key  Context value seed key.\n   *\n   * @returns New context value seed.\n   */\n  seed<Src, Seed>(context: Ctx, key: ContextSeedKey<Src, Seed>): Seed {\n\n    const [, factory] = this._seeding(key);\n\n    return factory(context);\n  }\n\n  /**\n   * Builds context seeds provider that binds seeds to target `context`.\n   *\n   * @param context  Target value context.\n   * @param cache  Whether to cache context values. When `false` the value providers may be called multiple times.\n   *\n   * @returns A provider of context value seeds bound to the given `context`.\n   */\n  seedIn(context: Ctx, cache?: boolean): <Src, Seed>(this: void, key: ContextSeedKey<Src, Seed>) => Seed | undefined {\n\n    const values = this.newValues(cache);\n\n    return <Src, Seed>(key: ContextSeedKey<Src, Seed>) =>\n        values.get.call<Ctx, [ContextSeedKey<Src, Seed>], Seed>(context, key);\n  }\n\n  /**\n   * Creates new context values instance consulting this registry for value providers.\n   *\n   * @param cache  Whether to cache context values. When `false` the value providers may be called multiple times.\n   *\n   * @returns New context values instance which methods expect `this` instance to be a context the values provided for.\n   */\n  newValues(cache = true): ContextValues & ThisType<Ctx> {\n    if (!cache && this._nonCachedValues) {\n      return this._nonCachedValues;\n    }\n\n    const values = new Map<ContextKey<any>, any>();\n    const registry = this;\n\n    class Values extends ContextValues {\n\n      get<Value, Src>(\n          this: Ctx,\n          { [ContextKey__symbol]: key }: ContextRef<Value, Src>,\n          opts?: ContextRequest.Opts<Value>,\n      ): Value | null | undefined {\n\n        const context = this;\n        const cached: Value | undefined = values.get(key);\n\n        if (cached != null) {\n          return cached;\n        }\n\n        const [constructed, defaultUsed] = growValue(context, key, opts);\n\n        if (cache && !defaultUsed) {\n          values.set(key, constructed);\n        }\n\n        return constructed;\n      }\n\n    }\n\n    if (!cache) {\n      return this._nonCachedValues = new Values();\n    }\n\n    return new Values();\n\n    function growValue<Value, Src, Seed>(\n        context: Ctx,\n        key: ContextKey<Value, Src, Seed>,\n        opts: ContextRequest.Opts<Value> | undefined,\n    ): [Value | null | undefined, boolean] {\n\n      const [seeder, seed] = findSeed<Src, Seed>(context, key);\n      let defaultUsed = false;\n\n      const valueOpts: ContextValueOpts<Ctx, Value, Src, Seed> = {\n        context,\n        seeder,\n        seed,\n        byDefault: (opts && 'or' in opts)\n            ? () => {\n              defaultUsed = true;\n              return opts.or;\n            } : defaultProvider => {\n\n              const defaultValue = defaultProvider();\n\n              if (defaultValue == null) {\n                throw new ContextKeyError(key);\n              }\n\n              return defaultValue;\n            }\n      };\n\n      return [\n        key.grow(valueOpts),\n        defaultUsed,\n      ];\n    }\n\n    function findSeed<Src, Seed>(\n        context: Ctx,\n        key: ContextKey<any, Src, Seed>,\n    ): [ContextSeeder<Ctx, Src, Seed>, Seed] {\n\n      const { seedKey } = key;\n      const [seeder, factory] = registry._seeding(seedKey);\n\n      if (seedKey !== key as any) {\n        // This is not a seed key\n        // Retrieve the seed by seed key\n        return [seeder, context.get(seedKey)];\n      }\n\n      return [seeder, factory(context)];\n    }\n  }\n\n  /**\n   * Appends values provided by another value registry to the ones provided by this one.\n   *\n   * @param other  Another context value registry.\n   *\n   * @return New context value registry which values provided by both registries.\n   */\n  append(other: ContextRegistry<Ctx>): ContextRegistry<Ctx> {\n\n    const self = this;\n\n    return new ContextRegistry<Ctx>(combine);\n\n    function combine<Src, Seed>(key: ContextSeedKey<Src, Seed>, context: Ctx): Seed {\n\n      const [seeder] = self._seeding(key);\n\n      return seeder.combine(self.seed(context, key), other.seed(context, key), context);\n    }\n  }\n\n}\n","/**\n * @module context-values\n */\nimport { flatMapIt, mapIt, overArray } from 'a-iterable';\nimport { asis, NextArgs, nextArgs, noop } from 'call-thru';\nimport {\n  afterEach,\n  AfterEvent,\n  afterEventBy,\n  afterSupplied,\n  afterThe,\n  EventKeeper,\n  isEventKeeper,\n  trackValue,\n  ValueTracker,\n} from 'fun-events';\nimport { ContextKey, ContextKeyDefault, ContextSeedKey, ContextValueOpts } from './context-key';\nimport { ContextKeyError } from './context-key-error';\nimport { ContextRef } from './context-ref';\nimport { ContextSeeder } from './context-seeder';\nimport { ContextValueProvider } from './context-value-spec';\nimport { ContextValues } from './context-values';\n\nclass ContextUpSeeder<Ctx extends ContextValues, Src>\n    implements ContextSeeder<Ctx, Src | EventKeeper<Src[]>, AfterEvent<Src[]>> {\n\n  private readonly _providers: ValueTracker<ContextValueProvider<Ctx, Src | EventKeeper<Src[]>>[]> = trackValue([]);\n\n  provide(provider: ContextValueProvider<Ctx, Src | EventKeeper<Src[]>>): () => void {\n    this._providers.it = [...this._providers.it, provider];\n    return () => {\n\n      const providers = this._providers.it;\n      const found = providers.indexOf(provider);\n\n      if (found >= 0) {\n        this._providers.it = providers.slice(0, found).concat(providers.slice(found + 1));\n      }\n    };\n  }\n\n  seed(context: Ctx, initial: AfterEvent<Src[]> = afterThe<Src[]>()): AfterEvent<Src[]> {\n    return this.combine(initial, upSrcKeepers(context, this._providers));\n  }\n\n  isEmpty(): boolean {\n    return false;\n  }\n\n  combine(first: AfterEvent<Src[]>, second: AfterEvent<Src[]>): AfterEvent<Src[]> {\n    return afterEach(\n        first,\n        second,\n    ).keep.thru(\n        (...sources) => flatUpSources(sources),\n    );\n  }\n\n}\n\nfunction upSrcKeepers<Ctx extends ContextValues, Src>(\n    context: Ctx,\n    providersTracker: ValueTracker<ContextValueProvider<Ctx, Src | EventKeeper<Src[]>>[]>,\n): AfterEvent<Src[]> {\n  return providersTracker.read.keep.dig(\n      providers => !providers.length ? afterThe() : afterEach(\n          ...mapIt(\n              mapIt(\n                  overArray(providers),\n                  prov => prov(context),\n              ),\n              toUpSrcKeeper,\n          ),\n      ).keep.thru(\n          (...sources) => flatUpSources(sources),\n      ));\n}\n\nfunction toUpSrcKeeper<Src>(src: null | undefined | Src | EventKeeper<Src[]>): AfterEvent<Src[]> {\n  return src == null ? afterThe() : isUpSrcKeeper(src) ? afterSupplied(src) : afterThe(src);\n}\n\nfunction isUpSrcKeeper<Src>(src: Src | EventKeeper<Src[]>): src is EventKeeper<Src[]> {\n  return (typeof src === 'object' || typeof src === 'function') && isEventKeeper(src as (object | Function));\n}\n\nfunction flatUpSources<Src, NextReturn>(sources: Src[][]): NextArgs<Src[], NextReturn> {\n  return nextArgs<Src[], NextReturn>(\n      ...flatMapIt(overArray(sources), asis)\n  );\n}\n\nclass ContextSeedUpKey<Src> extends ContextSeedKey<Src | EventKeeper<Src[]>, AfterEvent<Src[]>> {\n\n  seeder<Ctx extends ContextValues>(): ContextSeeder<Ctx, Src | EventKeeper<Src[]>, AfterEvent<Src[]>> {\n    return new ContextUpSeeder();\n  }\n\n}\n\n/**\n * Updatable context value reference.\n *\n * @typeparam Value  Context value type.\n * @typeparam Src  Source value type.\n * @typeparam Seed  Value seed type.\n */\nexport type ContextUpRef<Value, Src, Seed = unknown> = ContextRef<Value, Src | EventKeeper<Src[]>, Seed>;\n\n/**\n * Abstract implementation of updatable context value key.\n *\n * Accepts single value sources and `EventKeeper`s of value source arrays.\n *\n * Collects value sources into `AfterEvent` keeper of source values.\n *\n * @typeparam Value  Context value type.\n * @typeparam Src  Source value type.\n */\nexport abstract class ContextUpKey<Value, Src>\n    extends ContextKey<Value, Src | EventKeeper<Src[]>, AfterEvent<Src[]>>\n    implements ContextUpRef<Value, Src, AfterEvent<Src[]>> {\n\n  readonly seedKey: ContextSeedKey<Src | EventKeeper<Src[]>, AfterEvent<Src[]>>;\n\n  /**\n   * Constructs simple context value key.\n   *\n   * @param name  Human-readable key name.\n   * @param seedKey  Value seed key. A new one will be constructed when omitted.\n   */\n  constructor(name: string, seedKey?: ContextSeedKey<Src | EventKeeper<Src[]>, AfterEvent<Src[]>>) {\n    super(name);\n    this.seedKey = seedKey || new ContextSeedUpKey(this);\n  }\n\n}\n\n/**\n * Single updatable context value reference.\n *\n * @typeparam Value  Context value type.\n * @typeparam Seed  Value seed type.\n */\nexport type SingleContextUpRef<Value, Seed = unknown> = ContextUpRef<AfterEvent<[Value]>, Value, Seed>;\n\n/**\n * Single updatable context value key.\n *\n * The associated value is an `AfterEvent` keeper of the last source value. It is always present,\n * but signals an [[ContextKeyError]] error on attempt to receive an absent value.\n *\n * It is an error to provide a `null` or `undefined` {@link ContextRequest.Opts.or fallback value} when requesting\n * an associated value. Use an `afterThe()` result as a fallback instead.\n *\n * @typeparam Value  Context value type.\n */\nexport class SingleContextUpKey<Value>\n    extends ContextUpKey<AfterEvent<[Value]>, Value>\n    implements SingleContextUpRef<Value, AfterEvent<Value[]>> {\n\n  /**\n   * A provider of context value used when there is no value associated with this key.\n   */\n  readonly byDefault: ContextKeyDefault<Value, ContextUpKey<AfterEvent<[Value]>, Value>>;\n\n  /**\n   * Constructs single updatable context value key.\n   *\n   * @param name  Human-readable key name.\n   * @param seedKey  Value seed key. A new one will be constructed when omitted.\n   * @param byDefault  Optional default value provider. If unspecified or `undefined` the key has no default\n   * value.\n   */\n  constructor(\n      name: string,\n      {\n        seedKey,\n        byDefault = noop,\n      }: {\n        seedKey?: ContextSeedKey<Value | EventKeeper<Value[]>, AfterEvent<Value[]>>,\n        byDefault?: ContextKeyDefault<Value, ContextUpKey<AfterEvent<[Value]>, Value>>,\n      } = {},\n  ) {\n    super(name, seedKey);\n    this.byDefault = byDefault;\n  }\n\n  grow<Ctx extends ContextValues>(\n      opts: ContextValueOpts<Ctx, AfterEvent<[Value]>, EventKeeper<Value[]> | Value, AfterEvent<Value[]>>,\n  ): AfterEvent<[Value]> {\n    return opts.seed.keep.dig((...sources) => {\n      if (sources.length) {\n        // Sources present. Take the last one.\n        return afterThe(sources[sources.length - 1]);\n      }\n\n      // Sources absent. Attempt to detect the backup value.\n      const backup = opts.byDefault(() => {\n\n        const defaultValue = this.byDefault(opts.context, this);\n\n        return defaultValue && afterThe(defaultValue);\n      });\n\n      if (backup != null) {\n        return backup; // Backup value found.\n      }\n\n      // Backup value is absent. Construct an error response.\n      return afterEventBy<[Value]>(() => {\n        throw new ContextKeyError(this);\n      });\n    });\n  }\n\n}\n\n/**\n * Single updatable context value reference.\n *\n * @typeparam Src  Source value type.\n * @typeparam Seed  Value seed type.\n */\nexport type MultiContextUpRef<Src, Seed = unknown> = ContextUpRef<AfterEvent<Src[]>, Src, Seed>;\n\n/**\n * Multiple updatable context values key.\n *\n * The associated value is an `AfterEvent` keeper of the source values. It is always present, even though\n * the array can be empty.\n *\n * It is an error to provide a `null` or `undefined` {@link ContextRequest.Opts.or fallback value} when requesting\n * an associated value. Use an `afterThe()` result as a fallback instead.\n *\n * @typeparam Src  Source value type.\n */\nexport class MultiContextUpKey<Src>\n    extends ContextUpKey<AfterEvent<Src[]>, Src>\n    implements MultiContextUpRef<Src, AfterEvent<Src[]>> {\n\n  /**\n   * A provider of context value used when there is no value associated with this key.\n   */\n  readonly byDefault: ContextKeyDefault<readonly Src[], ContextUpKey<AfterEvent<Src[]>, Src>>;\n\n  /**\n   * Constructs multiple updatable context value key.\n   *\n   * @param name  Human-readable key name.\n   * @param seedKey  Value seed key. A new one will be constructed when omitted.\n   * @param byDefault  Optional default value provider. If unspecified or `undefined` the key has no default\n   * value.\n   */\n  constructor(\n      name: string,\n      {\n        seedKey,\n        byDefault = noop,\n      }: {\n        seedKey?: ContextSeedKey<Src | EventKeeper<Src[]>, AfterEvent<Src[]>>,\n        byDefault?: ContextKeyDefault<readonly Src[], ContextUpKey<AfterEvent<Src[]>, Src>>,\n      } = {},\n  ) {\n    super(name, seedKey);\n    this.byDefault = byDefault;\n  }\n\n  grow<Ctx extends ContextValues>(\n      opts: ContextValueOpts<Ctx, AfterEvent<Src[]>, EventKeeper<Src[]> | Src, AfterEvent<Src[]>>,\n  ): AfterEvent<Src[]> {\n    return opts.seed.keep.dig((...sources) => {\n      if (sources.length) {\n        // Sources present. Use them.\n        return afterThe(...sources);\n      }\n\n      // Sources absent. Attempt to detect the backup value.\n      const backup = opts.byDefault(() => {\n\n        const defaultValue = this.byDefault(opts.context, this);\n\n        return defaultValue ? afterThe(...defaultValue) : afterThe();\n      });\n\n      if (backup != null) {\n        return backup; // Backup value found.\n      }\n\n      // Backup value is absent. Construct an error response.\n      return afterEventBy<Src[]>(() => {\n        throw new ContextKeyError(this);\n      });\n    });\n  }\n\n}\n","import { noop } from 'call-thru';\nimport { AfterEvent, EventKeeper } from 'fun-events';\nimport { ContextKeyDefault, ContextSeedKey, ContextValueOpts } from './context-key';\nimport { ContextKeyError } from './context-key-error';\nimport { ContextUpKey, ContextUpRef } from './context-up-key';\nimport { ContextValues } from './context-values';\n\n/**\n * A reference to updatable context function value.\n *\n * @typeparam Args  Function arguments tuple type.\n * @typeparam Ret  Function return value type.\n * @typeparam Seed  Value seed type.\n */\nexport type FnContextRef<Args extends any[], Ret = void, Seed = unknown> =\n    ContextUpRef<(this: void, ...args: Args) => Ret, (this: void, ...args: Args) => Ret, Seed>;\n\n/**\n * A key of updatable context function value.\n *\n * The value associated with this key is a function that delegates to the last provided function. The target function\n * may be updated.\n *\n * The value is always present. But if the function to delegate is not provided, and no default/fallback function\n * provided, an attempt to call the delegate would throw an [[ContextKeyError]].\n *\n * It is an error to provide a `null` or `undefined` {@link ContextRequest.Opts.or fallback value} when requesting\n * an associated value. Use an `afterThe()` result as a fallback instead.\n *\n * @typeparam Args  Function arguments tuple type.\n * @typeparam Ret  Function return value type.\n */\nexport class FnContextKey<Args extends any[], Ret = void>\n    extends ContextUpKey<(this: void, ...args: Args) => Ret, (this: void, ...args: Args) => Ret>\n    implements FnContextRef<Args, Ret, AfterEvent<((this: void, ...args: Args) => Ret)[]>> {\n\n  /**\n   * Constructs a function that will be called unless fallback provided.\n   */\n  readonly byDefault: (this: void, context: ContextValues, key: FnContextKey<Args, Ret>) =>\n      (this: void, ...args: Args) => Ret;\n\n  /**\n   * Constructs updatable context function key.\n   *\n   * @param name  Human-readable key name.\n   * @param seedKey  Value seed key. A new one will be constructed when omitted.\n   * @param byDefault  Constructs a default function to call. If unspecified then the default function would raise\n   * an error.\n   */\n  constructor(\n      name: string,\n      {\n        seedKey,\n        byDefault = noop,\n      }: {\n        seedKey?: ContextSeedKey<\n            ((this: void, ...args: Args) => Ret) | EventKeeper<((this: void, ...args: Args) => Ret)[]>,\n            AfterEvent<((this: void, ...args: Args) => Ret)[]>>,\n        byDefault?: ContextKeyDefault<(this: void, ...args: Args) => Ret, FnContextKey<Args, Ret>>,\n      } = {},\n  ) {\n    super(name, seedKey);\n    this.byDefault = (context, key) => byDefault(context, key) || (() => { throw new ContextKeyError(this); });\n  }\n\n  grow<Ctx extends ContextValues>(\n      opts: ContextValueOpts<\n          Ctx,\n          (this: void, ...args: Args) => Ret,\n          EventKeeper<((this: void, ...args: Args) => Ret)[]> | ((this: void, ...args: Args) => Ret),\n          AfterEvent<((this: void, ...args: Args) => Ret)[]>>,\n  ): (this: void, ...args: Args) => Ret {\n\n    let delegated!: (this: void, ...args: Args) => Ret;\n\n    opts.seed((...fns) => {\n      if (fns.length) {\n        delegated = fns[fns.length - 1];\n      } else {\n\n        const defaultProvider = () => this.byDefault(opts.context, this);\n        const fallback = opts.byDefault(defaultProvider);\n\n        delegated = fallback || defaultProvider();\n      }\n    });\n\n    return (...args) => delegated(...args);\n  }\n\n}\n","/**\n * @module context-values\n */\nimport { AIterable, itsEmpty, itsLast, overArray, overNone } from 'a-iterable';\nimport { asis, isPresent, noop, valuesProvider } from 'call-thru';\nimport { ContextKey, ContextKeyDefault, ContextSeedKey, ContextValueOpts } from './context-key';\nimport { ContextRef } from './context-ref';\nimport { ContextSeeder } from './context-seeder';\nimport { ContextValueProvider } from './context-value-spec';\nimport { ContextValues } from './context-values';\n\nclass SimpleContextSeeder<Ctx extends ContextValues, Src> implements ContextSeeder<Ctx, Src, AIterable<Src>> {\n\n  private readonly _providers: ContextValueProvider<Ctx, Src>[] = [];\n\n  provide(provider: ContextValueProvider<Ctx, Src>): () => void {\n    this._providers.push(provider);\n    return () => {\n\n      const found = this._providers.indexOf(provider);\n\n      if (found >= 0) {\n        this._providers.splice(found, 1);\n      }\n    };\n  }\n\n  seed(context: Ctx, initial: AIterable<Src> = AIterable.from(overNone())): AIterable<Src> {\n    return AIterable.from([\n      initial,\n      sourceValues(context, this._providers),\n    ]).flatMap(asis);\n  }\n\n  isEmpty(seed: AIterable<Src>): boolean {\n    return itsEmpty(seed);\n  }\n\n  combine(first: AIterable<Src>, second: AIterable<Src>): AIterable<Src> {\n    return AIterable.from([first, second]).flatMap(asis);\n  }\n\n}\n\nclass SimpleSeedKey<Src> extends ContextSeedKey<Src, AIterable<Src>> {\n\n  seeder<Ctx extends ContextValues>(): SimpleContextSeeder<Ctx, Src> {\n    return new SimpleContextSeeder();\n  }\n\n}\n\n/**\n * Simple context value key implementation.\n *\n * Collects value sources into iterable instance.\n *\n * A context value associated with this key is never changes once constructed.\n *\n * @typeparam Value  Context value type.\n * @typeparam Src  Source value type.\n */\nexport abstract class SimpleContextKey<Value, Src = Value> extends ContextKey<Value, Src, AIterable<Src>> {\n\n  readonly seedKey: ContextSeedKey<Src, AIterable<Src>>;\n\n  /**\n   * Constructs simple context value key.\n   *\n   * @param name  Human-readable key name.\n   * @param seedKey  Value seed key. A new one will be constructed when omitted.\n   */\n  constructor(name: string, seedKey?: ContextSeedKey<Src, AIterable<Src>>) {\n    super(name);\n    this.seedKey = seedKey || new SimpleSeedKey(this);\n  }\n\n}\n\n/**\n * Single context value reference.\n *\n * @typeparam Value  Context value type.\n * @typeparam Seed  Value seed type.\n */\nexport type SingleContextRef<Value, Seed = unknown> = ContextRef<Value, Value, Seed>;\n\n/**\n * Single context value key.\n *\n * Treats the last source value as context one and ignores the rest of them.\n *\n * @typeparam Value  Context value type.\n */\nexport class SingleContextKey<Value>\n    extends SimpleContextKey<Value>\n    implements SingleContextRef<Value, AIterable<Value>> {\n\n  /**\n   * A provider of context value used when there is no value associated with this key.\n   */\n  readonly byDefault: ContextKeyDefault<Value, ContextKey<Value>>;\n\n  /**\n   * Constructs single context value key.\n   *\n   * @param name  Human-readable key name.\n   * @param seedKey  Value seed key. A new one will be constructed when omitted.\n   * @param byDefault  Optional default value provider. If unspecified or `undefined` the key has no default\n   * value.\n   */\n  constructor(\n      name: string,\n      {\n        seedKey,\n        byDefault = noop,\n      }: {\n        seedKey?: ContextSeedKey<Value, AIterable<Value>>,\n        byDefault?: ContextKeyDefault<Value, ContextKey<Value>>,\n      } = {},\n  ) {\n    super(name, seedKey);\n    this.byDefault = byDefault;\n  }\n\n  grow<Ctx extends ContextValues>(\n      opts: ContextValueOpts<Ctx, Value, Value, AIterable<Value>>,\n  ): Value | null | undefined {\n\n    const value = itsLast(opts.seed);\n\n    if (value != null) {\n      return value;\n    }\n\n    return opts.byDefault(() => this.byDefault(opts.context, this));\n  }\n\n}\n\n/**\n * Multiple context value reference.\n *\n * Represents context value as read-only array of source values.\n *\n * @typeparam Src  Value source type and context value item type.\n * @typeparam Seed  Value seed type.\n */\nexport type MultiContextRef<Src, Seed = unknown> = ContextRef<readonly Src[], Src, Seed>;\n\n/**\n * Multiple context values key.\n *\n * Represents context value as read-only array of source values.\n *\n * Associated with empty array by default.\n *\n * @typeparam Src  Value source type and context value item type.\n */\nexport class MultiContextKey<Src>\n    extends SimpleContextKey<readonly Src[], Src>\n    implements MultiContextRef<Src, AIterable<Src>> {\n\n  /**\n   * A provider of context value used when there is no value associated with this key.\n   */\n  readonly byDefault: ContextKeyDefault<readonly Src[], ContextKey<readonly Src[], Src>>;\n\n  /**\n   * Constructs multiple context values key.\n   *\n   * @param name  Human-readable key name.\n   * @param seedKey  Value seed key. A new one will be constructed when omitted.\n   * @param byDefault  Optional default value provider. If unspecified then the default value is empty array.\n   */\n  constructor(\n      name: string,\n      {\n        seedKey,\n        byDefault = valuesProvider(),\n      }: {\n        seedKey?: ContextSeedKey<Src, AIterable<Src>>,\n        byDefault?: ContextKeyDefault<readonly Src[], ContextKey<readonly Src[], Src>>,\n      } = {},\n  ) {\n    super(name, seedKey);\n    this.byDefault = byDefault;\n  }\n\n  grow<Ctx extends ContextValues>(\n      opts: ContextValueOpts<Ctx, readonly Src[], Src, AIterable<Src>>,\n  ): readonly Src[] | null | undefined {\n\n    const result = [...opts.seed];\n\n    if (result.length) {\n      return result;\n    }\n\n    return opts.byDefault(() => {\n\n      const defaultSources = this.byDefault(opts.context, this);\n\n      if (defaultSources) {\n        return [...defaultSources];\n      }\n\n      return;\n    });\n  }\n\n}\n\n// Context value provider and cached context value source.\ntype SourceEntry<Ctx extends ContextValues, Src> = [ContextValueProvider<Ctx, Src>, (Src | null | undefined)?];\n\nfunction sourceValues<Ctx extends ContextValues, Src>(\n    context: Ctx,\n    providers: ContextValueProvider<Ctx, Src>[],\n): AIterable<Src> {\n  return AIterable.from(overArray(providers.map<SourceEntry<Ctx, Src>>(provider => [provider])))\n      .map(entry => {\n        if (entry.length > 1) {\n          return entry[1];\n        }\n\n        const source = entry[0](context);\n\n        entry.push(source);\n\n        return source;\n      })\n      .filter<Src>(isPresent);\n}\n","/**\n * @module namespace-aliaser\n */\nimport { QualifiedName } from './name';\nimport { NamespaceDef } from './namespace';\nimport { NamespaceAliaser } from './namespace-aliaser';\n\n/**\n * Naming schema is responsible for applying namespace aliases to simple names. E.g. by appending alias as prefix or\n * suffix of the name.\n */\nexport abstract class Naming {\n\n  /**\n   * Applies the given namespace `alias` to the given local `name`.\n   *\n   * @param name Local name to apply namespace alias to.\n   * @param alias Namespace alias to apply.\n   * @param namespace Aliased namespace definition.\n   *\n   * @returns A string containing the `name` with `alias` applied to it.\n   */\n  abstract applyAlias(name: string, alias: string, namespace: NamespaceDef): string;\n\n  /**\n   * Converts the given qualified `name` into simple one accordingly to this naming schema.\n   *\n   * @param name Qualified name to convert.\n   * @param nsAlias Namespace aliaser to use.\n   */\n  name(name: QualifiedName, nsAlias: NamespaceAliaser): string {\n    if (typeof name === 'string') {\n      return name;\n    }\n\n    const [local, ns] = name;\n\n    return ns.name(nsAlias(ns), local, this);\n  }\n\n}\n","/**\n * @module namespace-aliaser\n */\nimport { Naming } from './naming';\n\nclass DefaultNaming extends Naming {\n\n  applyAlias(name: string, alias: string): string {\n    return `${alias}-${name}`;\n  }\n\n}\n\n/**\n * Default naming schema.\n *\n * Prefixes a name with namespace alias separating them by dash.\n *\n * The result looks like `<alias>-<name>`.\n */\nexport const default__naming: Naming = /*#__PURE__*/ new DefaultNaming();\n\n/**\n * HTML elements naming schema.\n *\n * Prefixes a name with namespace alias separating them by dash.\n *\n * The result looks like `<alias>-<name>`.\n */\nexport const html__naming: Naming = /*#__PURE__*/ new DefaultNaming();\n\nclass XmlNaming extends Naming {\n\n  applyAlias(name: string, alias: string): string {\n    return `${alias}:${name}`;\n  }\n\n}\n\n/**\n * XML elements naming schema.\n *\n * Prefixes a name with namespace alias separating them by colon.\n *\n * The result looks like `<alias>:<name>`.\n */\nexport const xml__naming: Naming = /*#__PURE__*/ new XmlNaming();\n\n/**\n * Element identifiers naming schema.\n *\n * Prefixes a name with namespace alias separating them by colon.\n *\n * The result looks like `<alias>:<name>`.\n */\nexport const id__naming: Naming = /*#__PURE__*/ new XmlNaming();\n\nclass CssNaming extends Naming {\n\n  applyAlias(name: string, alias: string): string {\n    return `${name}@${alias}`;\n  }\n\n}\n\n/**\n * CSS classes naming scheme.\n *\n * Appends namespace alias as a name suffix separated by `@` sign.\n *\n * The result looks like `<name>@<alias>`.\n */\nexport const css__naming: Naming = /*#__PURE__*/ new CssNaming();\n","/**\n * @module namespace-aliaser\n */\nimport { Naming } from './naming';\nimport { default__naming } from './namings';\n\n/**\n * Namespace definition.\n *\n * Namespaces are identified by their URLs.\n */\nexport class NamespaceDef {\n\n  /**\n   * Unique namespace URL.\n   */\n  readonly url: string;\n\n  /**\n   * Preferred namespace aliases.\n   */\n  readonly aliases: readonly string[];\n\n  /**\n   * The most preferred namespace alias.\n   *\n   * By default this is the first preferred alias, or `ns` if there is no preferred aliases.\n   */\n  get alias(): string {\n    return this.aliases[0] || 'ns';\n  }\n\n  /**\n   * Constructs new namespace definition.\n   *\n   * @param url  Unique namespace URL.\n   * @param aliases  Preferred namespace aliases. It is expected that each alias is an ASCII letter followed by\n   * any number of ASCII letters, digits, `-`, or `_` signs. Aliases starting with `xml` are reserved. Empty alias\n   * is reserved for [default namespace][[DEFAULT__NS]].\n   */\n  constructor(url: string, ...aliases: string[]) {\n    this.url = url;\n    this.aliases = aliases;\n  }\n\n  /**\n   * Converts a local `name` belonging to this namespace to simple one according to the given `naming` schema.\n   *\n   * Calls [[Naming.applyAlias]] by default.\n   *\n   * @param alias  Namespace alias to apply to the name.\n   * @param name  A name to convert.\n   * @param naming  Naming schema to use. {@link default__naming default naming schema} is used when omitted.\n   *\n   * @returns A simple name with this namespace alias applied.\n   */\n  name(alias: string, name: string, naming: Naming = default__naming): string {\n    return naming.applyAlias(name, alias, this);\n  }\n\n}\n","/**\n * @module namespace-aliaser\n */\nimport { NamespaceDef } from './namespace';\n\nclass DefaultNs extends NamespaceDef {\n\n  constructor() {\n    super('');\n  }\n\n  name(_alias: string, name: string): string {\n    return name;\n  }\n\n}\n\n/**\n * Default namespace.\n *\n * This namespace is assumed for names without namespace specified.\n *\n * Its URL is empty. And it does not alter names, i.e. its [[NamespaceDef.name]] method returns the name as is.\n */\nexport const DEFAULT__NS: NamespaceDef = /*#__PURE__*/ new DefaultNs();\n","/**\n * @module namespace-aliaser\n */\nimport { DEFAULT__NS } from './default.ns';\nimport { NamespaceDef } from './namespace';\n\n/**\n * A name qualified with namespace.\n *\n * This can be either:\n * - a simple name string, which means a name in default namespace, or\n * - a name+namespace tuple.\n */\nexport type QualifiedName = string | NameAndNamespace;\n\n/**\n * A local name and namespace tuple.\n *\n * Consists of a local name string and namespace definition this name belongs to.\n */\nexport type NameAndNamespace = readonly [string, NamespaceDef];\n\n/**\n * Checks whether the given `value` is a name+namespace tuple.\n *\n * @param value  A value to check.\n *\n * @returns `true` if the given `value` is an array consisting of exactly two elements, where the first element is a\n * non-empty string, and the second element is an instance of [[NamespaceDef]]. Or `false` otherwise.\n */\nexport function isNameAndNamespace(value: any): value is NameAndNamespace {\n  return Array.isArray(value)\n      && value.length === 2\n      && typeof value[0] === 'string'\n      && value[1] instanceof NamespaceDef;\n}\n\n/**\n * Checks whether the given `value` is a qualified name.\n *\n * @param value  A value to check.\n *\n * @returns `true` if the given `value` is a non-empty string or an array consisting of exactly two elements,\n * where the first element is a non-empty string, and the second element is an instance of [[NamespaceDef]].\n * Or `false` otherwise.\n */\nexport function isQualifiedName(value: any): value is QualifiedName {\n  return typeof value === 'string' || isNameAndNamespace(value);\n}\n\n/**\n * Detects a namespace of the given qualified `name`\n *\n * @param name  Qualified name to detect a namespace of.\n *\n * @returns A namespace if the given `name` has it, or {@link DEFAULT__NS default namespace} otherwise.\n */\nexport function namespaceOf(name: QualifiedName): NamespaceDef {\n  return typeof name !== 'string' ? name[1] : DEFAULT__NS;\n}\n\n/**\n * Converts the given qualified `name` to local name and namespace tuple.\n *\n * @param name  Qualified name to convert.\n *\n * @returns The `name` itself if it has a namespace, or a tuple consisting of `name` and\n * {@link DEFAULT__NS default namespace} otherwise.\n */\nexport function nameAndNamespace(name: QualifiedName): NameAndNamespace {\n  return typeof name !== 'string' ? name : [name, DEFAULT__NS];\n}\n\n/**\n * Checks whether two qualified names are equal to each other.\n *\n * @param first  First qualified name to compare.\n * @param second  Second qualified name to compare.\n *\n * @returns `true` if both names are equal, or `false` otherwise.\n */\nexport function namesEqual(first: QualifiedName, second: QualifiedName): boolean {\n  if (typeof first === 'string') {\n    return typeof second === 'string' ? first === second : !second[1].url && second[0] === first;\n  }\n\n  const [firstName, { url: firstUrl }] = first;\n\n  if (typeof second === 'string') {\n    return !firstUrl && firstName === second;\n  }\n\n  return firstName === second[0] && firstUrl === second[1].url;\n}\n\n/**\n * Compares two qualified names.\n *\n * Names in default namespace considered less than other names. Namespaces are compared by their URLs.\n *\n * @param first  First qualified name to compare.\n * @param second  Second qualified name to compare.\n *\n * @returns `-1` if the `first` name is less than the `second` one, `0` if they are equal, or `1` if the `first` name\n * is greater than the `second` one.\n */\nexport function compareNames(first: QualifiedName, second: QualifiedName): -1 | 0 | 1 {\n  if (typeof first === 'string') {\n    if (typeof second === 'string') {\n      return compareStrings(first, second);\n    }\n    if (!second[1].url) {\n      return compareStrings(first, second[0]);\n    }\n    return -1;\n  }\n\n  const [firstName, { url: firstUrl }] = first;\n\n  if (typeof second === 'string') {\n    if (!firstUrl) {\n      return compareStrings(firstName, second);\n    }\n    return 1;\n  }\n\n  return compareStrings(firstUrl, second[1].url) || compareStrings(firstName, second[0]);\n}\n\nfunction compareStrings(first: string, second: string): -1 | 0 | 1 {\n  return first < second ? -1 : first > second ? 1 : 0;\n}\n","/**\n * @module namespace-aliaser\n */\nimport { NamespaceDef } from './namespace';\n\n/**\n * Namespace aliaser function interface.\n *\n * Maps namespaces to their unique aliases.\n */\nexport type NamespaceAliaser =\n/**\n * @param ns  A definition of namespace to find alias for.\n *\n * @returns Namespace alias.\n */\n    (ns: NamespaceDef) => string;\n\n/**\n * Creates a namespace aliaser.\n *\n * The returned function tries to find a registered alias for the given namespace. If not found then tries to use one\n * of its preferred aliases. If all of them are reserved already for another namespaces, generates a new unique alias.\n *\n * @returns New instance of namespace aliaser.\n */\nexport function newNamespaceAliaser(): NamespaceAliaser {\n\n  const aliasesByNs = new Map<string, string>();\n  const nsNumPerAlias = new Map<string, number>();\n\n  return function nsAlias(ns: NamespaceDef): string {\n\n    const found = aliasesByNs.get(ns.url);\n\n    if (found) {\n      return found;\n    }\n\n    const mostPreferred = ns.alias;\n    let nsNumRegistered = 0;\n\n    for (const preferred of [mostPreferred, ...ns.aliases]) {\n\n      const ids = nsNumPerAlias.get(preferred);\n\n      if (!ids) {\n        aliasesByNs.set(ns.url, preferred);\n        nsNumPerAlias.set(preferred, 1);\n        return preferred;\n      }\n      if (!nsNumRegistered) {\n        // Use the first one\n        nsNumRegistered = ids;\n      }\n    }\n\n    const generated = mostPreferred + (++nsNumRegistered);\n\n    aliasesByNs.set(ns.url, generated);\n    nsNumPerAlias.set(mostPreferred, nsNumRegistered);\n\n    return generated;\n  };\n}\n","import { HthvItem } from './hthv-item';\n\n/**\n * @internal\n */\nexport interface HthvPartial<I extends HthvItem<any, any, any> = HthvItem> {\n  $: I['$'];\n  n?: I['n'];\n  t?: I['t'];\n  v: I['v'];\n  x?: I['x'];\n  p?: I['p'];\n  pl?: I['pl'];\n}\n\n/**\n * @internal\n */\nexport function hthvItem<I extends HthvItem<any, any, any>>(\n    {\n      $,\n      n,\n      t,\n      v,\n      x = [],\n      p = {},\n      pl = [],\n    }: HthvPartial<I>,\n): I {\n  return {\n    $,\n    n,\n    t,\n    v,\n    x,\n    p,\n    pl,\n  } as I;\n}\n","import { HthvItem, HthvParamItem } from '../hthv-item';\n\n/**\n * @internal\n */\nexport function addParam({ p, pl }: HthvItem, param: HthvParamItem) {\n\n  const key = param.n || param.v;\n  const prev = p[key];\n\n  if (!prev || !prev.n && param.n) {\n    p[key] = param;\n  }\n  pl.push(param);\n}\n","import { ParserConfig } from './parser-config';\nimport { ParserInput } from './parser-input';\n\n/**\n * @internal\n */\nexport function nextInItem(config: ParserConfig): (input: ParserInput) => string {\n  return input => {\n\n    const c = input.s[input.i];\n\n    input.d = config.delimiterOf(c);\n\n    return c;\n  };\n}\n","// tslint:disable-next-line:max-line-length\nimport { ParserInput } from './parser-input';\n\nconst datePattern = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d\\d (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d\\d\\d\\d \\d\\d:\\d\\d:\\d\\d GMT/;\n\n/**\n * @internal\n */\nexport function parseDateTime(input: ParserInput, out: (value: string) => void): boolean {\n  input.s = input.s.substring(input.i);\n  input.i = 0;\n  if (input.s.match(datePattern)) {\n    out(input.s.substring(input.i, input.i += 29));\n    return true;\n  }\n  return false;\n}\n","/**\n * @internal\n */\nexport const parseNone = () => false;\n","import { HthvDelimiter } from '../hthv-delimiter';\nimport { HthvExtraItem, HthvItem, HthvItemType } from '../hthv-item';\nimport { hthvItem } from '../hthv-partial.impl';\nimport { angleBracketsParser } from './angle-brackets-parser';\nimport { nextInItem } from './next-in-item';\nimport { parseDateTime } from './parse-date-time';\nimport { parseNone } from './parse-none';\nimport { quotedStringParser } from './quoted-string-parser';\nimport { ParserConfig } from './parser-config';\nimport { ParserInput } from './parser-input';\n\n/**\n * @internal\n */\nexport interface ItemParserOpts {\n  named?: boolean;\n  tagged?: boolean;\n  extra?: boolean;\n  next?: (input: ParserInput) => string;\n}\n\n/**\n * @internal\n */\nexport function itemParser(\n    config: ParserConfig,\n    {\n      named = true,\n      tagged = true,\n      extra = true,\n      next = nextInItem(config),\n    }: ItemParserOpts = {}\n): (input: ParserInput, out: (param: HthvItem<any, any, any>) => void) => boolean {\n\n  const parseQuotedString = quotedStringParser(config);\n  const parseAngleBrackets = angleBracketsParser(config);\n  const parseExtra = extra ? itemParser(config, { next, tagged: false, named: false, extra: false }) : parseNone;\n\n  return (input, out) => {\n\n    let name = '';\n    let type: HthvItemType = 'raw';\n    let tag: string | undefined;\n    let value: string | undefined;\n\n    while (input.i < input.s.length) {\n\n      const c = next(input);\n\n      if (input.d) {\n        if (input.d & (HthvDelimiter.Item | HthvDelimiter.Parameter)) {\n          break;\n        }\n        if (value == null) {\n          if (input.d & HthvDelimiter.Assignment) {\n            value = name ? '' : c;\n            ++input.i;\n            continue;\n          }\n          if (input.d & HthvDelimiter.Quote) {\n            if (tagged || !name) {\n              parseQuotedString(input, v => {\n                if (name) {\n                  type = 'tagged-string';\n                  tag = name;\n                } else {\n                  type = 'quoted-string';\n                }\n                name = '';\n                value = v;\n              });\n            }\n            break;\n          }\n          if (!name && parseAngleBrackets(input, v => {\n            type = 'angle-bracketed-string';\n            value = v;\n          })) {\n            break;\n          }\n          value = name;\n          name = '';\n        } else if (input.d & HthvDelimiter.Quote) {\n          if (tagged || !value) {\n            parseQuotedString(input, v => {\n              if (value) {\n                type = 'tagged-string';\n                tag = value;\n              } else {\n                type = 'quoted-string';\n              }\n              value = v;\n            });\n          }\n          break;\n        } else if (!value && parseAngleBrackets(input, v => {\n          type = 'angle-bracketed-string';\n          value = v;\n        })) {\n          break;\n        }\n      }\n\n      if (value == null) {\n        if (!name && parseDateTime(input, v => value = v)) {\n          type = 'date-time';\n          break;\n        }\n        if (named) {\n          name += c;\n        } else {\n          value = c;\n        }\n      } else if (!value && parseDateTime(input, v => value = v)) {\n        type = 'date-time';\n        break;\n      } else {\n        value += c;\n      }\n\n      ++input.i;\n    }\n\n    let item: HthvItem<any, any>;\n\n    if (value == null) {\n      if (!name) {\n        return false;\n      }\n      item = hthvItem({ $: type, v: name });\n    } else {\n      item = hthvItem({ $: type, n: name || undefined, t: tag, v: value });\n    }\n\n    // noinspection StatementWithEmptyBodyJS\n    while (parseExtra(input, extraItem => item.x.push(extraItem as HthvExtraItem),\n    )) ; // tslint:disable-line:curly\n\n    out(item);\n\n    return true;\n  };\n}\n","import { HthvDelimiter } from '../hthv-delimiter';\nimport { ParserConfig } from './parser-config';\nimport { ParserInput } from './parser-input';\n\n/**\n * @internal\n */\nexport function quotedStringParser(\n    config: ParserConfig,\n): (input: ParserInput, out: (value: string) => void) => void {\n  return (input, out) => {\n\n    let unquoted = '';\n\n    ++input.i;\n    for (; input.i < input.s.length; ++input.i) {\n\n      const c = input.s[input.i];\n\n      if (c === '\\\\') {\n\n        const next = input.s[++input.i];\n\n        if (next) {\n          unquoted += next;\n        } else {\n          unquoted += c;\n        }\n      } else if (config.delimiterOf(c) & HthvDelimiter.Quote) {\n        ++input.i;\n        out(unquoted);\n        return;\n      } else {\n        unquoted += c;\n      }\n    }\n\n    out(unquoted);\n  };\n}\n","import { HthvDelimiter } from '../hthv-delimiter';\nimport { ParserConfig } from './parser-config';\nimport { ParserInput } from './parser-input';\n\n/**\n * @internal\n */\nexport function angleBracketsParser(\n    config: ParserConfig,\n): (input: ParserInput, out: (v: string) => void) => boolean {\n  return (input, out) => {\n     if (!(config.delimiterOf(input.s[input.i]) & HthvDelimiter.AngleBracketStart)) {\n       return false;\n     }\n\n     let result = '';\n\n     ++input.i;\n     while (input.i < input.s.length) {\n\n       const c = input.s[input.i++];\n\n       if (config.delimiterOf(c) & HthvDelimiter.AngleBracketEnd) {\n         break;\n       }\n       result += c;\n     }\n\n     out(result);\n\n     return true;\n  };\n}\n","import { HthvDelimiter } from '../hthv-delimiter';\nimport { ParserConfig } from './parser-config';\nimport { ParserInput } from './parser-input';\n\n/**\n * @internal\n */\nexport function nextInComment(config: ParserConfig): (input: ParserInput) => string {\n  return input => {\n\n    let c = input.s[input.i];\n\n    if (c !== '\\\\') {\n      input.d = config.delimiterOf(c);\n      return c;\n    }\n\n    ++input.i;\n    if (input.i < input.s.length) {\n      c = input.s[input.i];\n      input.d = config.delimiterOf(c) ? HthvDelimiter.NonToken : HthvDelimiter.None;\n    } else {\n      input.d = HthvDelimiter.NonToken;\n    }\n\n    return c;\n  };\n}\n","import { HthvDelimiter } from '../hthv-delimiter';\nimport { ParserConfig } from './parser-config';\nimport { ParserInput } from './parser-input';\n\n/**\n * @internal\n */\nexport function spacesParser(config: ParserConfig): (input: ParserInput) => boolean {\n  return input => {\n\n    const start = input.i;\n\n    do {\n\n      const c = input.s[input.i];\n\n      if (!(config.delimiterOf(c) & HthvDelimiter.Space)) {\n        break;\n      }\n      input.i++;\n    } while (input.i < input.s.length);\n\n    return input.i !== start;\n  };\n}\n","import { HthvDelimiter } from '../hthv-delimiter';\nimport { HthvParamItem } from '../hthv-item';\nimport { itemParser, ItemParserOpts } from './item-parser';\nimport { ParserConfig } from './parser-config';\nimport { ParserInput } from './parser-input';\nimport { spacesParser } from './spaces-parser';\n\n/**\n * @internal\n */\nexport function paramParser(\n    config: ParserConfig,\n    opts: ItemParserOpts = {},\n): (input: ParserInput, out: (param: HthvParamItem) => void) => boolean {\n\n  const skipSpaces = spacesParser(config);\n  const parseItem = itemParser(config, { ...opts, tagged: false });\n\n  return (input, out) => {\n    if (!(config.delimiterOf(input.s[input.i]) & HthvDelimiter.Parameter)) {\n      return false;\n    }\n\n    ++input.i;\n    skipSpaces(input);\n\n    return parseItem(input, out);\n  };\n}\n","import { HthvDelimiter, HthvDelimiterChar } from '../hthv-delimiter';\nimport { HthvDelimitConfig } from '../hthv-parser';\n\n/**\n * @internal\n */\nexport interface ParserConfig {\n  delimiterOf(char: string): number;\n}\n\n/**\n * @internal\n */\nexport type DelimitConfig = { [char in HthvDelimiterChar]: number };\n\n/**\n * @internal\n */\nexport const defaultDelimit: DelimitConfig = {\n  ' ': HthvDelimiter.NonToken | HthvDelimiter.Space | HthvDelimiter.Item,\n  '\\t': HthvDelimiter.NonToken | HthvDelimiter.Space | HthvDelimiter.Item,\n  ',': HthvDelimiter.NonToken | HthvDelimiter.Item,\n  ';': HthvDelimiter.NonToken | HthvDelimiter.Parameter,\n  '\"': HthvDelimiter.NonToken | HthvDelimiter.Escaped | HthvDelimiter.Quote,\n  '\\\\': HthvDelimiter.NonToken | HthvDelimiter.Escaped,\n  '<': HthvDelimiter.NonToken | HthvDelimiter.AngleBracketStart,\n  '>': HthvDelimiter.NonToken | HthvDelimiter.AngleBracketEnd,\n  '=': HthvDelimiter.NonToken | HthvDelimiter.Assignment,\n  '(': HthvDelimiter.NonToken,\n  ')': HthvDelimiter.NonToken,\n  '/': HthvDelimiter.NonToken,\n  ':': HthvDelimiter.NonToken,\n  '?': HthvDelimiter.NonToken,\n  '@': HthvDelimiter.NonToken,\n  '[': HthvDelimiter.NonToken,\n  ']': HthvDelimiter.NonToken,\n  '{': HthvDelimiter.NonToken,\n  '}': HthvDelimiter.NonToken,\n};\n\n/**\n * @internal\n */\nexport function buildParserConfig(\n    {\n      delimit,\n    }: {\n      delimit?: HthvDelimitConfig;\n    } = {}): ParserConfig {\n\n  const delimitConfig: DelimitConfig = delimit ? { ...defaultDelimit, ...delimit } : defaultDelimit;\n\n  return {\n    delimiterOf(c) {\n      return delimitConfig[c as HthvDelimiterChar]\n          || (c >= '\\u0000' && c <= ' ' || c === '\\u007f' ? HthvDelimiter.NonToken : HthvDelimiter.None);\n    },\n  };\n}\n\n/**\n * @internal\n */\nexport const defaultParserConfig = /*#__PURE__*/ buildParserConfig();\n\n/**\n * @internal\n */\nexport const commentParserConfig = /*#__PURE__*/ buildParserConfig({\n  delimit: {\n    ':': HthvDelimiter.NonToken | HthvDelimiter.Assignment,\n    '(': HthvDelimiter.NonToken | HthvDelimiter.Escaped | HthvDelimiter.Comment,\n    ')': HthvDelimiter.NonToken | HthvDelimiter.Escaped | HthvDelimiter.Item,\n    ' ': HthvDelimiter.NonToken | HthvDelimiter.Space,\n    '\\t': HthvDelimiter.NonToken | HthvDelimiter.Space,\n    '=': HthvDelimiter.NonToken,\n    ',': HthvDelimiter.NonToken,\n  },\n});\n","/**\n * @module http-header-value\n */\nimport { HthvDelimiterChar } from './hthv-delimiter';\nimport { HthvItem } from './hthv-item';\nimport { hthvItem } from './hthv-partial.impl';\nimport {\n  addParam,\n  buildParserConfig,\n  commentParser,\n  commentParserConfig,\n  defaultParserConfig,\n  itemDelimitParser,\n  itemParser,\n  paramParser,\n  parseNone,\n  ParserInput,\n} from './parser';\n\n/**\n * HTTP header value parser signature.\n *\n * Splits the value onto {@link HthvItem items}.\n *\n * @typeparam N  Whether parsed items have {@link HthvItem.n names}.\n * @typeparam T  Whether parsed items have {@link HthvItem.t tags}.\n * @typeparam P  Whether parsed items have {@link HthvItem.p parameters}.\n */\nexport type HthvParser<\n    N extends 'has-name' | 'no-name' = 'has-name' | 'no-name',\n    T extends 'has-tag' | 'no-tag' = 'has-tag' | 'no-tag',\n    P extends 'has-params' | 'no-params' = 'has-params' | 'no-params'> =\n/**\n * @param value  HTTP header value to parse.\n *\n * @returns An array of parsed value items.\n */\n    (this: void, value: string) => HthvItem<N, T, P>[];\n\n/**\n * A configuration of HTTP header value parser.\n *\n * This is used to {@link newHthvParser configure new parser}.\n */\nexport interface HthvParserConfig {\n\n  /**\n   * Delimits configuration.\n   *\n   * An object literal with {@link HthvDelimiterChar supported delimiter characters} as keys\n   * and corresponding {@link HthvDelimiter delimiters} as values.\n   */\n  readonly delimit?: HthvDelimitConfig;\n\n  /**\n   * Whether to parse comments.\n   *\n   * `false` by default.\n   */\n  readonly comments?: boolean;\n\n}\n\n/**\n * Delimits configuration for HTTP header value parser.\n *\n * This is an object literal with {@link HthvDelimiterChar supported delimiter characters} as keys\n * and corresponding {@link HthvDelimiter delimiters} as values.\n *\n * The default delimiter configuration is used for omitted characters.\n */\nexport type HthvDelimitConfig = { readonly [char in HthvDelimiterChar]?: number };\n\n/**\n * Creates and configures new HTTP header value parser.\n *\n * @param config  New parser configuration.\n *\n * @returns New HTTP header value parser function.\n */\nexport function newHthvParser(config?: HthvParserConfig): HthvParser {\n\n  const parserConfig = config ? buildParserConfig(config) : defaultParserConfig;\n  const parseItemDelimit = itemDelimitParser(parserConfig);\n  const parseParam = paramParser(parserConfig);\n  const parseItem = itemParser(parserConfig);\n  const parseComment = config?.comments ? commentParser(commentParserConfig) : parseNone;\n\n  return headerValue => {\n\n    const result: HthvItem[] = [];\n    const input: ParserInput = { i: 0, s: headerValue };\n\n    // noinspection StatementWithEmptyBodyJS\n    while (parseTopLevelItem()); // tslint:disable-line\n\n    return result;\n\n    function parseTopLevelItem(): boolean {\n      return input.i < input.s.length && (\n          parseItemDelimit(input)\n          || parseParam(\n              input,\n              param => {\n                if (!result.length) {\n                  result.push(hthvItem({ $: 'raw', v: '' }));\n                }\n                addParam(result[result.length - 1], param);\n              },\n          )\n          || parseComment(input, item => result.push(item))\n          || parseItem(input, item => result.push(item))\n      );\n    }\n  };\n}\n","import { HthvDelimiter } from '../hthv-delimiter';\nimport { ParserConfig } from './parser-config';\nimport { ParserInput } from './parser-input';\nimport { spacesParser } from './spaces-parser';\n\n/**\n * @internal\n */\nexport function itemDelimitParser(config: ParserConfig): (input: ParserInput) => boolean {\n\n  const skipSpaces = spacesParser(config);\n\n  return input => {\n    if (config.delimiterOf(input.s[input.i]) & HthvDelimiter.Item) {\n      input.i++;\n      skipSpaces(input);\n      return true;\n    }\n    return false;\n  };\n}\n","import { HthvDelimiter } from '../hthv-delimiter';\nimport { HthvItem } from '../hthv-item';\nimport { hthvItem } from '../hthv-partial.impl';\nimport { addParam } from './add-param';\nimport { itemParser, ItemParserOpts } from './item-parser';\nimport { nextInComment } from './next-in-comment';\nimport { paramParser } from './param-parser';\nimport { spacesParser } from './spaces-parser';\nimport { ParserConfig } from './parser-config';\nimport { ParserInput } from './parser-input';\n\n/**\n * @internal\n */\nexport function commentParser(config: ParserConfig): (input: ParserInput, out: (item: HthvItem) => void) => boolean {\n\n  const skipSpaces = spacesParser(config);\n  const commentParserOpts: ItemParserOpts = {\n    next: nextInComment(config),\n  };\n  const parseItem = itemParser(config, commentParserOpts);\n  const parseParam = paramParser(config, commentParserOpts);\n\n  return (input, out) => {\n    if (!(config.delimiterOf(input.s[input.i]) & HthvDelimiter.Comment)) {\n      return false;\n    }\n\n    ++input.i;\n\n    let result: HthvItem | undefined;\n\n    // noinspection StatementWithEmptyBodyJS\n    while (\n        skipSpaces(input)\n        || parseParam(\n            input,\n            param => {\n              if (!result) {\n                result = hthvItem({ $: 'raw', v: '' });\n              }\n              addParam(result, param);\n            }\n        )\n        || parseItem(input, item => result = item)\n        ) ; /* tslint:disable-line:curly */\n\n    ++input.i; // closing parent\n    out(result || hthvItem({ $: 'raw', v: '' }));\n\n    return true;\n  };\n}\n","import { HthvParser, newHthvParser } from '../hthv-parser';\n\n/**\n * Parses HTTP header value that may contain comments.\n *\n * This is particularly useful when parsing headers such as:\n * - `User-Agent`\n * - `Server`\n */\nexport const hthvParseCommented: HthvParser = /*#__PURE__*/ newHthvParser({ comments: true });\n","/**\n * @module http-header-value\n */\nimport { HthvDelimiter } from '../hthv-delimiter';\nimport { HthvParser, newHthvParser } from '../hthv-parser';\n\n/**\n * Parses HTTP header values containing directives.\n *\n * Directives are parameterized items using spaces instead of semicolons to delimit parameters. While semicolons and\n * colons are used to delimit items.\n *\n * This is particularly useful when parsing headers such as:\n * - `Content-Security-Policy`\n * - `Content-Security-Policy-Report-Only`\n * - `Feature-Policy`\n * - `Via`\n * - `Warning`\n *\n * @param value  HTTP header value to parse.\n *\n * @returns An array of comma-separated value items with space-separated parameters.\n */\nexport const hthvParseDirectives: HthvParser = /*#__PURE__*/ newHthvParser({\n  delimit: {\n    ' ': HthvDelimiter.NonToken | HthvDelimiter.Space | HthvDelimiter.Parameter,\n    '\\t': HthvDelimiter.NonToken | HthvDelimiter.Space | HthvDelimiter.Parameter,\n    ';': HthvDelimiter.NonToken | HthvDelimiter.Item,\n  },\n});\n","/**\n * @module http-header-value\n */\nimport { HthvDelimiter } from '../hthv-delimiter';\nimport { HthvParser, newHthvParser } from '../hthv-parser';\n\n/**\n * Parses HTTP header value containing URI(s) without parameters.\n *\n * `,`, `;`, '(', ')', and `=` symbols can be part of URI. This function returns multiple items only if URIs are\n * space-separated.\n *\n * This is particularly useful when parsing headers such as:\n * - `Content-Location`\n * - `Location`\n * - `Referef`\n *\n * @param value  HTTP header value to parse.\n *\n * @returns An array of space-separated value items without parameters.\n */\nexport const hthvParseURIs: HthvParser<'no-name', 'no-tag', 'no-params'> = /*#__PURE__*/ newHthvParser({\n  delimit: {\n    ',': HthvDelimiter.NonToken,\n    ';': HthvDelimiter.NonToken,\n    '=': HthvDelimiter.NonToken,\n  },\n}) as HthvParser<'no-name', 'no-tag', 'no-params'>;\n","/**\n * @module http-header-value\n */\nimport { HthvParser, newHthvParser } from './hthv-parser';\n\n/**\n * Parses HTTP header value.\n *\n * Splits the value onto {@link HthvItem items}.\n *\n * Parser is configured with default {@link HthvParserConfig config}.\n *\n * Does not recognize comments.\n *\n * Handles date/time values in [IMF-fixdate] format only.\n *\n * Treats illegal characters as ASCII letters.\n *\n * [IMF-fixdate]: https://tools.ietf.org/html/rfc7231#section-7.1.1.1\n *\n * @param value  HTTP header value to parse.\n *\n * @returns An array of comma- or space- separated value items.\n */\nexport const hthvParse: HthvParser = /*#__PURE__*/ newHthvParser();\n","/**\n * @module http-header-value\n */\nimport { HthvDelimiter } from './hthv-delimiter';\nimport { defaultParserConfig } from './parser';\n\n/**\n * Conditionally encloses HTTP header value or its part into double quotes.\n *\n * Quotes will be added if delimiter or special character is present in input `string`, or the input `string` is empty.\n * {@link hthvEscapeQ Escapes} `\"` and `\\` symbols.\n *\n * @param string  A string to quote.\n *\n * @returns Either a string enclosed in double quotes, or original `string` if there is no need to quote it.\n */\nexport function hthvQuote(string: string): string {\n  if (!string) {\n    return '\"\"';\n  }\n\n  let escaped: undefined | string;\n  let quote = false;\n\n  for (let i = 0; i < string.length; ++i) {\n\n    const c = string[i];\n    const delimiter = defaultParserConfig.delimiterOf(c);\n\n    if (delimiter) {\n      if (delimiter & HthvDelimiter.Escaped) {\n        if (!escaped) {\n          escaped = string.substring(0, i);\n        }\n        escaped += '\\\\' + c;\n      }\n      quote = true;\n    } else if (escaped) {\n      escaped += c;\n    }\n  }\n\n  return quote ? `\"${escaped || string}\"` : string;\n}\n","/*! https://mths.be/cssesc v3.0.0 by @mathias */\n'use strict';\n\nvar object = {};\nvar hasOwnProperty = object.hasOwnProperty;\nvar merge = function merge(options, defaults) {\n\tif (!options) {\n\t\treturn defaults;\n\t}\n\tvar result = {};\n\tfor (var key in defaults) {\n\t\t// `if (defaults.hasOwnProperty(key) { … }` is not needed here, since\n\t\t// only recognized option names are used.\n\t\tresult[key] = hasOwnProperty.call(options, key) ? options[key] : defaults[key];\n\t}\n\treturn result;\n};\n\nvar regexAnySingleEscape = /[ -,\\.\\/:-@\\[-\\^`\\{-~]/;\nvar regexSingleEscape = /[ -,\\.\\/:-@\\[\\]\\^`\\{-~]/;\nvar regexAlwaysEscape = /['\"\\\\]/;\nvar regexExcessiveSpaces = /(^|\\\\+)?(\\\\[A-F0-9]{1,6})\\x20(?![a-fA-F0-9\\x20])/g;\n\n// https://mathiasbynens.be/notes/css-escapes#css\nvar cssesc = function cssesc(string, options) {\n\toptions = merge(options, cssesc.options);\n\tif (options.quotes != 'single' && options.quotes != 'double') {\n\t\toptions.quotes = 'single';\n\t}\n\tvar quote = options.quotes == 'double' ? '\"' : '\\'';\n\tvar isIdentifier = options.isIdentifier;\n\n\tvar firstChar = string.charAt(0);\n\tvar output = '';\n\tvar counter = 0;\n\tvar length = string.length;\n\twhile (counter < length) {\n\t\tvar character = string.charAt(counter++);\n\t\tvar codePoint = character.charCodeAt();\n\t\tvar value = void 0;\n\t\t// If it’s not a printable ASCII character…\n\t\tif (codePoint < 0x20 || codePoint > 0x7E) {\n\t\t\tif (codePoint >= 0xD800 && codePoint <= 0xDBFF && counter < length) {\n\t\t\t\t// It’s a high surrogate, and there is a next character.\n\t\t\t\tvar extra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) {\n\t\t\t\t\t// next character is low surrogate\n\t\t\t\t\tcodePoint = ((codePoint & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000;\n\t\t\t\t} else {\n\t\t\t\t\t// It’s an unmatched surrogate; only append this code unit, in case\n\t\t\t\t\t// the next code unit is the high surrogate of a surrogate pair.\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t}\n\t\t\tvalue = '\\\\' + codePoint.toString(16).toUpperCase() + ' ';\n\t\t} else {\n\t\t\tif (options.escapeEverything) {\n\t\t\t\tif (regexAnySingleEscape.test(character)) {\n\t\t\t\t\tvalue = '\\\\' + character;\n\t\t\t\t} else {\n\t\t\t\t\tvalue = '\\\\' + codePoint.toString(16).toUpperCase() + ' ';\n\t\t\t\t}\n\t\t\t} else if (/[\\t\\n\\f\\r\\x0B]/.test(character)) {\n\t\t\t\tvalue = '\\\\' + codePoint.toString(16).toUpperCase() + ' ';\n\t\t\t} else if (character == '\\\\' || !isIdentifier && (character == '\"' && quote == character || character == '\\'' && quote == character) || isIdentifier && regexSingleEscape.test(character)) {\n\t\t\t\tvalue = '\\\\' + character;\n\t\t\t} else {\n\t\t\t\tvalue = character;\n\t\t\t}\n\t\t}\n\t\toutput += value;\n\t}\n\n\tif (isIdentifier) {\n\t\tif (/^-[-\\d]/.test(output)) {\n\t\t\toutput = '\\\\-' + output.slice(1);\n\t\t} else if (/\\d/.test(firstChar)) {\n\t\t\toutput = '\\\\3' + firstChar + ' ' + output.slice(1);\n\t\t}\n\t}\n\n\t// Remove spaces after `\\HEX` escapes that are not followed by a hex digit,\n\t// since they’re redundant. Note that this is only possible if the escape\n\t// sequence isn’t preceded by an odd number of backslashes.\n\toutput = output.replace(regexExcessiveSpaces, function ($0, $1, $2) {\n\t\tif ($1 && $1.length % 2) {\n\t\t\t// It’s not safe to remove the space, so don’t.\n\t\t\treturn $0;\n\t\t}\n\t\t// Strip the space.\n\t\treturn ($1 || '') + $2;\n\t});\n\n\tif (!isIdentifier && options.wrap) {\n\t\treturn quote + output + quote;\n\t}\n\treturn output;\n};\n\n// Expose default options (so they can be overridden globally).\ncssesc.options = {\n\t'escapeEverything': false,\n\t'isIdentifier': false,\n\t'quotes': 'single',\n\t'wrap': false\n};\n\ncssesc.version = '3.0.0';\n\nmodule.exports = cssesc;\n","/* eslint-disable no-var, prefer-template */\nvar uppercasePattern = /[A-Z]/g\nvar msPattern = /^ms-/\nvar cache = {}\n\nfunction toHyphenLower(match) {\n  return '-' + match.toLowerCase()\n}\n\nfunction hyphenateStyleName(name) {\n  if (cache.hasOwnProperty(name)) {\n    return cache[name]\n  }\n\n  var hName = name.replace(uppercasePattern, toHyphenLower)\n  return (cache[name] = msPattern.test(hName) ? '-' + hName : hName)\n}\n\nexport default hyphenateStyleName\n","import cssesc from 'cssesc';\n\n/**\n * @internal\n */\nexport function cssescId(id: string): string {\n  return cssesc(id, { isIdentifier: true });\n}\n\nexport const IMPORTANT_CSS_SUFFIX = '!important';\n","/**\n * @internal\n */\nexport function isReadonlyArray<T>(value: any): value is readonly T[] {\n  return Array.isArray(value);\n}\n\n/**\n * @internal\n */\nexport function isNotEmptyArray<T>(array: readonly T[]): array is readonly [T, ...T[]];\n\n/**\n * @internal\n */\nexport function isNotEmptyArray<T>(array: T[]): array is [T, ...T[]];\n\n/**\n * @internal\n */\nexport function isNotEmptyArray<T>(array: readonly T[]): boolean {\n  return !!array.length;\n}\n","/**\n * @module style-producer\n */\nimport { StypColor } from './color';\nimport { StypNumeric } from './numeric';\nimport { StypPriority } from './priority';\nimport { StypURL } from './url';\n\n/**\n * CSS property value.\n *\n * This is either a scalar value, or {@link StypValueStruct structured} one.\n *\n * @category CSS Value\n */\nexport type StypValue =\n    | string\n    | number\n    | boolean\n    | undefined\n    | StypNumeric<any>\n    | StypURL\n    | StypColor;\n\n/**\n * Structured property CSS value. E.g. [length](https://developer.mozilla.org/en-US/docs/Web/CSS/length),\n * [percentage](https://developer.mozilla.org/en-US/docs/Web/CSS/percentage),\n * [color](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value), etc.\n *\n * @category CSS Value\n * @typeparam Self  A type of itself.\n */\nexport abstract class StypValueStruct<Self extends StypValueStruct<Self>> {\n\n  /**\n   * CSS property value priority.\n   *\n   * The value [[StypPriority.Important]] and above means the property is `!important`. Everything else means normal\n   * priority.\n   *\n   * The property value with higher priority number takes precedence over the one with lower one.\n   */\n  readonly priority: number;\n\n  /**\n   * Constructs structured CSS property value.\n   *\n   * @param opts  Construction options.\n   */\n  protected constructor(opts?: StypValue.Opts) {\n    this.priority = opts && opts.priority || StypPriority.Default;\n  }\n\n  /**\n   * Checks whether this value equals to CSS property value.\n   *\n   * @param other  CSS property value to compare with.\n   */\n  abstract is(other: StypValue): boolean;\n\n  /**\n   * Creates structured CSS value with the given `priority`.\n   *\n   * @param priority  New priority.\n   *\n   * @returns Either a new value equal to this one but having the given `priority`, or this one if `priority` did\n   * not change.\n   */\n  abstract prioritize(priority: number): Self;\n\n  /**\n   * Creates `!important` variant of this value.\n   *\n   * @returns Either a new value equal to this one but having `priority` equal to [[StypPriority.Important]],\n   * or this one if already the case.\n   */\n  important(): Self {\n    return this.prioritize(StypPriority.Important);\n  }\n\n  /**\n   * Creates usual (not `!important`) variant of this value.\n   *\n   * @returns Either a new value equal to this one but having `priority` equal to [[StypPriority.Usual]],\n   * or this one if already the case.\n   */\n  usual(): Self {\n    return this.prioritize(StypPriority.Usual);\n  }\n\n  /**\n   * Maps the given CSS property value to the value of this one's type. Defaults to this value if mapping is not\n   * possible.\n   *\n   * This method allows to use an structured value instance as {@link StypMapper.Mapping CSS property mapping}.\n   *\n   * @param source  A raw property value that should be converted.\n   *\n   * @returns Mapped property value.\n   */\n  abstract by(source: StypValue): StypValue;\n\n  /**\n   * Returns textual representation of this value.\n   *\n   * Textual representation never contains an `!important` suffix.\n   *\n   * @returns A textual representation of this value to use as CSS property value.\n   */\n  abstract toString(): string;\n\n}\n\nexport namespace StypValue {\n\n  /**\n   * Construction options of structured property CSS value.\n   */\n  export interface Opts {\n\n    /**\n     * Constructed value priority.\n     *\n     * The value [[StypPriority.Important]] and above means the property is `!important`. Everything else means normal\n     * priority.\n     */\n    readonly priority?: number;\n\n  }\n\n}\n\n/**\n * Checks whether two CSS property values are equal.\n *\n * Compares scalar values verbatim. Compares structured values using their [[StypValueStruct.is]] method. The latter\n * method is applied when at least one of the values is structured.\n *\n * @category CSS Value\n * @param first  The first CSS property value to compare.\n * @param second  The second CSS property value to compare.\n *\n * @returns `true` if `first` equals to `second`, or `false otherwise.\n */\nexport function stypValuesEqual(first: StypValue, second: StypValue): boolean {\n  if (first === second) {\n    return true;\n  }\n  if (typeof first === 'object') {\n    return first.is(second);\n  }\n  if (typeof second === 'object') {\n    return second.is(first);\n  }\n  return false;\n}\n","/**\n * @module style-producer\n */\nimport { StypValue, StypValueStruct } from '../value';\n\n/**\n * Structured [color](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value) CSS property value.\n *\n * Colors are represented by either `rgb()`, or `hsl()` functional notations.\n *\n * @category CSS Value\n */\nexport type StypColor = StypRGB | StypHSL;\n\n/**\n * Structured color CSS property value base.\n *\n * @category CSS Value\n */\nexport abstract class StypColorStruct<Self extends StypColorStruct<Self, Coords>, Coords>\n    extends StypValueStruct<Self> {\n\n  /**\n   * Color value type corresponding to color coordinates. Either `rgb` or `hsl`\n   */\n  abstract readonly type: 'rgb' | 'hsl';\n\n  /**\n   * This color in RGB coordinates.\n   */\n  abstract readonly rgb: StypRGB;\n\n  /**\n   * This color in HSL coordinates.\n   */\n  abstract readonly hsl: StypHSL;\n\n  /**\n   * Constructs another color value with updated coordinates.\n   *\n   * @param coords  Either partial color coordinates to apply or a function returning them and accepting this color\n   * instance as its only argument. Missing values are taken from this color.\n   *\n   * @returns Updated color value.\n   */\n  abstract set(coords: Partial<Coords> | ((this: void, color: this) => Partial<Coords>)): Self;\n\n}\n\n/**\n * CSS property value representing [RGB color](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#RGB_colors)\n * in `rgb()` or `rgba()` functional notation.\n *\n * @category CSS Value\n */\nexport class StypRGB extends StypColorStruct<StypRGB, StypRGB.Coords> implements StypRGB.Coords {\n\n  // noinspection JSMethodCanBeStatic\n  /**\n   * `rgb` value type.\n   */\n  get type(): 'rgb' {\n    return 'rgb';\n  }\n\n  /**\n   * Red color value between `0` and `255`.\n   */\n  readonly r: number;\n\n  /**\n   * Green color value between `0` and `255`.\n   */\n  readonly g: number;\n\n  /**\n   * Blue color value between `0` and `255`.\n   */\n  readonly b: number;\n\n  /**\n   * Alpha value between `0` and `1`.\n   */\n  readonly a: number;\n\n  /**\n   * Constructs RGB color value.\n   *\n   * @param coords  Color coordinates.\n   * @param opts  Construction options.\n   */\n  constructor(coords: StypRGB.Coords, opts?: StypValue.Opts) {\n    super(opts);\n    this.r = intCoord(coords.r, 255);\n    this.g = intCoord(coords.g, 255);\n    this.b = intCoord(coords.b, 255);\n    this.a = coords.a != null ? coord(coords.a, 1) : 1;\n  }\n\n  /**\n   * This color in RGB coordinates.\n   *\n   * Always the same as `this`.\n   */\n  get rgb(): this {\n    return this;\n  }\n\n  /**\n   * This color in HSL coordinates.\n   */\n  get hsl(): StypHSL {\n\n    const { a } = this;\n    const r = this.r * 100 / 255;\n    const g = this.g * 100 / 255;\n    const b = this.b * 100 / 255;\n    const max = Math.max(r, g, b);\n    const min = Math.min(r, g, b);\n    const l = Math.round((max + min) / 2);\n\n    if (max === min) {\n      return new StypHSL({ h: 0, s: 0, l, a }, this);\n    }\n\n    const d = max - min;\n    const s = Math.round(l > 50 ? d * 100 / (200 - max - min) : d * 100 / (max + min));\n    let h: number;\n\n    switch (max) {\n      case r:\n        h = ((g - b) / d) + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = ((b - r) / d) + 2;\n        break;\n      default:\n        h = ((r - g) / d) + 4;\n        break;\n    }\n    h *= 60;\n    h = Math.round(h);\n\n    return new StypHSL({ h, s, l, a }, this);\n  }\n\n  by(source: StypValue): StypColor {\n    return StypColor.by(source) || this;\n  }\n\n  is(other: StypValue): boolean {\n    return typeof other === 'object'\n        && other.type === this.type\n        && other.r === this.r\n        && other.g === this.g\n        && other.b === this.b\n        && other.a === this.a\n        && other.priority === this.priority;\n  }\n\n  prioritize(priority: number): StypRGB {\n    return this.priority === priority ? this : new StypRGB(this, { priority });\n  }\n\n  set(coords: Partial<StypRGB.Coords> | ((this: void, color: this) => Partial<StypRGB.Coords>)): StypRGB {\n    if (typeof coords === 'function') {\n      coords = coords(this);\n    }\n\n    const { r = this.r, g = this.g, b = this.b, a = this.a } = coords;\n\n    return new StypRGB({ r, g, b, a }, this);\n  }\n\n  toString(): string {\n\n    const rgb = `${this.r}, ${this.g}, ${this.b}`;\n\n    return this.a === 1 ? `rgb(${rgb})` : `rgba(${rgb}, ${this.a})`;\n\n  }\n\n}\n\nexport namespace StypRGB {\n\n  /**\n   * [RGB color](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#RGB_colors) coordinates.\n   */\n  export interface Coords {\n\n    /**\n     * Red color value between `0` and `255`.\n     */\n    r: number;\n\n    /**\n     * Green color value between `0` and `255`.\n     */\n    g: number;\n\n    /**\n     * Blue color value between `0` and `255`.\n     */\n    b: number;\n\n    /**\n     * Alpha value between `0` and `1`. `1` (full opacity) by default.\n     */\n    a?: number;\n  }\n\n}\n\n/**\n * CSS property value representing [HSL color](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#HSL_colors)\n * in `hsl()` or `hsla()` functional notation.\n *\n * @category CSS Value\n */\nexport class StypHSL extends StypColorStruct<StypHSL, StypHSL.Coords> implements StypHSL.Coords {\n\n  // noinspection JSMethodCanBeStatic\n  get type(): 'hsl' {\n    return 'hsl';\n  }\n\n  /**\n   * Hue angle value in degrees between `0` and `360`.\n   */\n  readonly h: number;\n\n  /**\n   * Saturation percentage.\n   */\n  readonly s: number;\n\n  /**\n   * Lightness percentage.\n   */\n  readonly l: number;\n\n  /**\n   * Alpha value between `0` and `1`.\n   */\n  readonly a: number;\n\n  /**\n   * Constructs HSL color value.\n   *\n   * @param coords  Color coordinates.\n   * @param opts  Construction options.\n   */\n  constructor(coords: StypHSL.Coords, opts?: StypValue.Opts) {\n    super(opts);\n    this.h = angleCoord(coords.h);\n    this.s = coord(coords.s, 100);\n    this.l = coord(coords.l, 100);\n    this.a = coords.a != null ? coord(coords.a, 1) : 1;\n  }\n\n  /**\n   * This color in RGB coordinates.\n   */\n  get rgb(): StypRGB {\n\n    const { a } = this;\n    const s = this.s / 100;\n    const l = this.l / 100;\n\n    if (!s) {\n\n      const c = l * 255;\n\n      return new StypRGB({ r: c, g: c, b: c, a }, this);\n    }\n\n    const q = l < 0.5 ? l * (1 + s) : (l + s) - (l * s);\n    const p = (2 * l) - q;\n    const hueAsFraction = this.h / 360;\n\n    return new StypRGB(\n        {\n          r: hueToRgb(p, q, hueAsFraction + (1.0 / 3.0)),\n          g: hueToRgb(p, q, hueAsFraction),\n          b: hueToRgb(p, q, hueAsFraction - (1.0 / 3.0)),\n          a,\n        },\n        this);\n  }\n\n  /**\n   * This color in HSL coordinates.\n   *\n   * Always the same as `this`.\n   */\n  get hsl(): this {\n    return this;\n  }\n\n  by(source: StypValue): StypColor {\n    return StypColor.by(source) || this;\n  }\n\n  is(other: StypValue): boolean {\n    return typeof other === 'object'\n        && other.type === this.type\n        && other.h === this.h\n        && other.s === this.s\n        && other.l === this.l\n        && other.a === this.a\n        && other.priority === this.priority;\n  }\n\n  prioritize(priority: number): StypHSL {\n    return this.priority === priority ? this : new StypHSL(this, { priority });\n  }\n\n  set(coords: Partial<StypHSL.Coords> | ((this: void, color: this) => Partial<StypHSL.Coords>)): StypHSL {\n    if (typeof coords === 'function') {\n      coords = coords(this);\n    }\n\n    const { h = this.h, s = this.s, l = this.l, a = this.a } = coords;\n\n    return new StypHSL({ h, s, l, a }, this);\n  }\n\n  toString(): string {\n\n    const hsl = `${this.h}, ${this.s}%, ${this.l}%`;\n\n    return this.a === 1 ? `hsl(${hsl})` : `hsla(${hsl}, ${this.a})`;\n  }\n\n}\n\nexport namespace StypHSL {\n\n  /**\n   * [HSL color](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#HSL_colors) coordinates.\n   */\n  export interface Coords {\n\n    /**\n     * Hue angle value in degrees.\n     */\n    h: number;\n\n    /**\n     * Saturation percentage.\n     */\n    s: number;\n\n    /**\n     * Lightness percentage.\n     */\n    l: number;\n\n    /**\n     * Alpha value between `0` and `1`. `1` (full opacity) by default.\n     */\n    a?: number;\n  }\n\n}\n\n/**\n * @category CSS Value\n */\nexport const StypColor = {\n\n  /**\n   * Maps the given CSS property value to color. Defaults to `undefined` if mapping is not possible.\n   *\n   * This method allows to use a [[StypColor]] object as {@link StypMapper.Mapping CSS property mapping}.\n   *\n   * @param source  A raw property value that should be converted.\n   *\n   * @returns Mapped property value or `undefined`.\n   */\n  by(source: StypValue): StypColor | undefined {\n    if (typeof source === 'object' && (source.type === 'rgb' || source.type === 'hsl')) {\n      return source;\n    }\n    return;\n  },\n\n};\n\nfunction angleCoord(value: number): number {\n  value = value % 360;\n  return value < 0 ? 360 + value : value;\n}\n\nfunction intCoord(value: number, max: number): number {\n  return coord(Math.round(value), max);\n}\n\nfunction coord(value: number, max: number): number {\n  return Math.max(Math.min(value, max), 0);\n}\n\nfunction hueToRgb(p: number, q: number, t: number) {\n\n  let newT = t;\n\n  if (newT < 0) {\n    newT += 1;\n  } else if (newT > 1) {\n    newT -= 1;\n  }\n\n  let result;\n\n  if (newT < 1.0 / 6.0) {\n    result = p + ((q - p) * (6 * newT));\n  } else if (newT < 1.0 / 2.0) {\n    result = q;\n  } else if (newT < 2.0 / 3.0) {\n    result = p + (((q - p) * ((2.0 / 3.0) - newT)) * 6);\n  } else {\n    result = p;\n  }\n\n  return result * 255;\n}\n","/**\n * @module style-producer\n */\nimport { StypColor, StypRGB } from './color';\n\n/**\n * Mixes two colors.\n *\n * Both the `weight` and the relative opacity of each color determines how much of each color is in the result.\n *\n * @category CSS Value\n * @param color1  First color to mix\n * @param color2  Second color to mix.\n * @param weight  A number between `0` and `1`. A larger weight indicates that more of `color1` should be used, and a\n * smaller weight indicates that more of `color2` should be used.\n *\n * @returns Mixed color.\n */\nexport function mixStypColors(color1: StypColor, color2: StypColor, weight: number): StypColor {\n\n  const w = weight * 2 - 1;\n  const rgba1 = color1.rgb;\n  const rgba2 = color2.rgb;\n  const aDiff = rgba1.a - rgba2.a;\n  const w1 = (((w * aDiff === -1) ? w : (w + aDiff) / (1 + w * aDiff)) + 1) / 2.0;\n  const w2 = 1 - w1;\n  return new StypRGB(\n      {\n        r: rgba1.r * w1 + rgba2.r * w2,\n        g: rgba1.g * w1 + rgba2.g * w2,\n        b: rgba1.b * w1 + rgba2.b * w2,\n        a: rgba1.a * weight + rgba2.a * (1 - weight),\n      },\n      color1);\n}\n","/**\n * @module style-producer\n */\nimport { StypValue, StypValueStruct } from '../value';\nimport { StypZero } from './zero';\n\n/**\n * Structured numeric CSS property value.\n *\n * This represents either dimension, zero value, or a `calc()` CSS function call.\n *\n * @category CSS Value\n * @typeparam Unit  Allowed unit type.\n * @typeparam Zero  A type of zero value. [[StypZero]] by default.\n */\nexport type StypNumeric<Unit extends string, Zero extends StypZero<Unit> | StypDimension<Unit> = StypZero<Unit>> =\n    | StypDimension<Unit>\n    | StypCalc<Unit>\n    | Zero;\n\n/**\n * Base implementation of structured numeric CSS property value.\n *\n * @category CSS Value\n * @typeparam Self  A type of itself.\n * @typeparam Unit  Allowed unit type.\n */\nexport abstract class StypNumericStruct<Self extends StypNumericStruct<Self, Unit>, Unit extends string>\n    extends StypValueStruct<Self> {\n\n  /**\n   * A type of structured numeric CSS property value.\n   */\n  abstract type: 'dimension' | 'calc' | 0;\n\n  readonly dim: StypDimension.Kind<Unit>;\n\n  constructor(opts: StypDimension.Opts<Unit>) {\n    super(opts);\n    this.dim = opts.dim;\n  }\n\n  /**\n   * Tries to converts this numeric value to another dimension.\n   *\n   * Does not actually construct a value in another dimension, as long as dimension unit supported by both dimensions.\n   *\n   * @typeparam U  A unit type allowed in target dimension.\n   * @param dim  Target dimension.\n   *\n   * @returns Either a value in dimension compatible with `dim`, or `undefined` if this value's unit is not supported\n   * by `dim`.\n   */\n  abstract toDim<U extends string>(dim: StypDimension.Kind<U>): StypNumeric<U> | undefined;\n\n  abstract add(addendum: StypNumeric<Unit>): StypNumeric<Unit>;\n\n  abstract add(addendum: number, unit: Unit): StypNumeric<Unit>;\n\n  abstract sub(subtrahend: StypNumeric<Unit>): StypNumeric<Unit>;\n\n  abstract sub(subtrahend: number, unit: Unit): StypNumeric<Unit>;\n\n  abstract mul(multiplier: number): StypNumeric<Unit>;\n\n  abstract div(divisor: number): StypNumeric<Unit>;\n\n  abstract negate(): StypNumeric<Unit>;\n\n  by(source: StypValue): StypNumeric<Unit> {\n    return this.dim.by(source) || this as StypNumeric<Unit>;\n  }\n\n  /**\n   * Returns a textual representation of this value to be used within CSS `calc()` function.\n   *\n   * @returns CSS value text without `!important` or `calc()`.\n   */\n  abstract toFormula(): string;\n\n  toString() {\n    return this.toFormula();\n  }\n\n}\n\n/**\n * Structured [dimension](https://developer.mozilla.org/en-US/docs/Web/CSS/dimension) value with unit.\n *\n * @category CSS Value\n * @typeparam Unit  Allowed units type.\n */\nexport interface StypDimension<Unit extends string>\n    extends StypValueStruct<StypDimension<Unit>>, StypNumericStruct<StypDimension<Unit>, Unit> {\n\n  readonly type: 'dimension';\n\n  readonly dim: StypDimension.Kind<Unit>;\n\n  /**\n   * Dimension value.\n   */\n  readonly val: number;\n\n  /**\n   * Dimension unit.\n   */\n  readonly unit: Unit;\n\n  add(addendum: StypNumeric<Unit>): StypNumeric<Unit>;\n\n  add(addendum: number, unit?: Unit): StypNumeric<Unit>;\n\n  sub(subtrahend: StypNumeric<Unit>): StypNumeric<Unit>;\n\n  sub(subtrahend: number, unit?: Unit): StypNumeric<Unit>;\n\n  by(source: StypValue): StypNumeric<Unit>;\n\n}\n\nexport namespace StypDimension {\n\n  /**\n   * A kind of dimensions. E.g. angle, length, percentage, etc.\n   *\n   * It is perfectly fine to use dimensions interchangeably as long as dimension units are compatible.\n   *\n   * @typeparam Unit  Allowed units type.\n   */\n  export interface Kind<Unit extends string> {\n\n    /**\n     * A similar kind of dimensions supporting all units this one supports and, in addition, supporting percents (`%`).\n     *\n     * `undefined` if there is no such dimension kind. Refers itself if supports percents.\n     */\n    readonly pt?: Kind<Unit | '%'>;\n\n    /**\n     * A similar kind of dimensions supporting all units this one supports, except percents (`%`).\n     *\n     * `undefined` if there is no such dimension kind. Refers itself if does not support percents.\n     */\n    readonly noPt: Kind<Exclude<Unit, '%'>>;\n\n    /**\n     * Zero value of this kind.\n     *\n     * Typically, this is unit-less [[StypZero]]. But some dimensions require units.\n     */\n    readonly zero: StypDimension<Unit> | StypZero<Unit>;\n\n    /**\n     * Constructs dimension value.\n     *\n     * @param val  Numeric dimension value.\n     * @param unit  Dimension unit.\n     *\n     * @returns Constructed dimension value. Either [[StypDimension]] instance, or [[StypZero]] if `val` is `0` and\n     * this dimension kind supports unitless zero.\n     */\n    of(val: number, unit: Unit): StypDimension<Unit> | StypZero<Unit>;\n\n    /**\n     * Maps the given CSS property value to the one compatible with this dimension kind. Defaults to `undefined`\n     * if mapping is not possible.\n     *\n     * This method allows to use a dimension kind as {@link StypMapper.Mapping CSS property mapping}.\n     *\n     * Any scalar or non-numeric value is mapped to `undefined`. A numeric value is converted to this dimension by\n     * [[StypNumeric.toDim]] method.\n     *\n     * @param source  A raw property value that should be converted.\n     *\n     * @returns Mapped property value or `undefined`.\n     */\n    by(source: StypValue): StypNumeric<Unit, StypDimension<Unit> | StypZero<Unit>> | undefined;\n\n  }\n\n  export namespace Kind {\n\n    /**\n     * A kind of dimension with unit-less zero. E.g. angle or length.\n     *\n     * @typeparam Unit  Allowed units type.\n     */\n    export interface UnitlessZero<Unit extends string> extends Kind<Unit> {\n\n      readonly pt?: UnitlessZero<Unit | '%'>;\n\n      readonly noPt: UnitlessZero<Exclude<Unit, '%'>>;\n\n      /**\n       * Zero value of this kind without unit.\n       */\n      readonly zero: StypZero<Unit>;\n\n      /**\n       * Constructs dimension value.\n       *\n       * @param val  Numeric dimension value.\n       * @param unit  Dimension unit.\n       *\n       * @returns Constructed dimension value. Either [[StypDimension]] instance, or [[StypZero]] if `val` is `0`.\n       */\n      of(val: number, unit: Unit): StypDimension<Unit> | StypZero<Unit>;\n\n      by(source: StypValue): StypNumeric<Unit> | undefined;\n\n    }\n\n    /**\n     * A kind of dimension which zero value has unit. E.g. frequency or resolution.\n     *\n     * @typeparam Unit  Allowed units type.\n     */\n    export interface UnitZero<Unit extends string> extends Kind<Unit> {\n\n      readonly pt?: UnitZero<Unit | '%'>;\n\n      readonly noPt: UnitZero<Exclude<Unit, '%'>>;\n\n      /**\n       * Zero value of this kind that has unit.\n       */\n      readonly zero: StypDimension<Unit>;\n\n      /**\n       * Constructs dimension value.\n       *\n       * @param val  Numeric dimension value.\n       * @param unit  Dimension unit.\n       *\n       * @returns Constructed dimension value as a [[StypDimension]] instance.\n       */\n      of(val: number, unit: Unit): StypDimension<Unit>;\n\n      by(source: StypValue): StypNumeric<Unit, StypDimension<Unit>> | undefined;\n\n    }\n\n  }\n\n  /**\n   * Construction options of dimensions.\n   *\n   * @typeparam Unit  Allowed units type.\n   */\n  export interface Opts<Unit extends string> extends StypValue.Opts {\n\n    /**\n     * A kind of dimension.\n     */\n    dim: Kind<Unit>;\n\n  }\n\n}\n\n/**\n * CSS `calc()` function call representation.\n *\n * This is either a {@link StypAddSub addition/subtraction}, or {@link StypMulDiv multiplication/division}.\n *\n * @category CSS Value\n * @typeparam Unit  Allowed unit type.\n */\nexport type StypCalc<Unit extends string> = StypAddSub<Unit> | StypMulDiv<Unit>;\n\n/**\n * CSS `calc()` function call representation containing either addition or subtraction.\n *\n * @category CSS Value\n * @typeparam Unit  Allowed unit type.\n */\nexport interface StypAddSub<Unit extends string> extends StypNumericStruct<StypAddSub<Unit>, Unit> {\n\n  readonly type: 'calc';\n\n  /**\n   * Left operand.\n   */\n  readonly left: StypNumeric<Unit>;\n\n  /**\n   * Operator.\n   */\n  readonly op: '+' | '-';\n\n  /**\n   * Right operand.\n   */\n  readonly right: StypNumeric<Unit>;\n\n}\n\n/**\n * CSS `calc()` function call representation containing either multiplication or division.\n *\n * @category CSS Value\n * @typeparam Unit  Allowed unit type.\n */\nexport interface StypMulDiv<Unit extends string> extends StypNumericStruct<StypMulDiv<Unit>, Unit> {\n\n  readonly type: 'calc';\n\n  /**\n   * Left operand.\n   */\n  readonly left: StypNumeric<Unit>;\n\n  /**\n   * Operator.\n   */\n  readonly op: '*' | '/';\n\n  /**\n   * Right operand.\n   */\n  readonly right: number;\n\n}\n","/**\n * @module style-producer\n */\nimport { itsEach, overKeys } from 'a-iterable';\nimport { StypProperties } from '../rule';\nimport { StypValue } from './value';\n\n/**\n * A type of function that maps CSS properties to something else.\n *\n * @category CSS Value\n * @typeparam R  A type of mapped properties. This is a mapping result type.\n */\nexport type StypMapper<R> =\n/**\n * @param from  CSS properties to map.\n *\n * @returns Mapping result.\n */\n    (this: void, from: StypProperties) => R;\n\nexport namespace StypMapper {\n\n  /**\n   * CSS property mapping.\n   *\n   * It is used to recognize raw property value and convert it to the one of the given type.\n   *\n   * It is one of:\n   * - Default property value. Replaces the source property value, unless the the have the same type.\n   * - A mapping function. Replaces the source property value with the result of this function call.\n   * - An object containing mapping method called `by()`. Replaces the source property value with the result of this\n   *   method call.\n   *\n   * @typeparam R  A type of mapped properties. This is an object containing mapped properties.\n   * @typeparam K  Type of mapped properties keys.\n   */\n  export type Mapping<R, K extends keyof R> =\n      | MappingFunction<R, K>\n      | MappingObject<R, K>\n      | R[K];\n\n  /**\n   * CSS property mapping function.\n   *\n   * @typeparam R  A type of mapped properties. This is a mapping result type.\n   * @typeparam K  Type of mapped properties keys.\n   */\n  export type MappingFunction<R, K extends keyof R> =\n  /**\n   * @param source  A raw property value that should be converted.\n   * @param mapped  An object granting access to other mapped properties.\n   * @param key  A key of converted property.\n   *\n   * @returns Mapped property value.\n   */\n      (this: void, source: StypValue, mapped: Mapped<R>, key: K) => R[K];\n\n  /**\n   * CSS property mapping object.\n   *\n   * @typeparam R  A type of mapped properties. This is a mapping result type.\n   * @typeparam K  Type of mapped properties keys.\n   */\n  export interface MappingObject<R, K extends keyof R> {\n\n    /**\n     * Maps CSS property value.\n     *\n     * @param source  A raw property value that should be converted.\n     * @param mapped  An object granting access to other mapped properties.\n     * @param key  A key of converted property.\n     *\n     * @returns Mapped property value.\n     */\n    by(source: StypValue, mapped: Mapped<R>, key: K): R[K];\n\n  }\n\n  /**\n   * Grants access to mapped values.\n   *\n   * Passed as a second argument to mapping function.\n   *\n   * @typeparam R  A type of mapped properties. This is a mapping result type.\n   */\n  export interface Mapped<R> {\n\n    /**\n     * Original properties to convert.\n     */\n    from: StypProperties;\n\n    /**\n     * Maps the property with the given type accordingly to mapping instruction.\n     *\n     * The mapping is performed at most once per property.\n     *\n     * @param key  Mapped property key.\n     *\n     * @returns Mapped property value.\n     */\n    get<K extends keyof R>(key: K): R[K];\n\n  }\n\n  /**\n   * Mappings of CSS properties.\n   *\n   * Contains mappings for each mapped CSS property with that property name as a key.\n   *\n   * @typeparam R  A type of mapped properties. This is a mapping result type.\n   */\n  export type Mappings<R> = { readonly [key in keyof R]: Mapping<R, key>; };\n\n}\n\nexport const StypMapper = {\n\n  /**\n   * Maps CSS properties accordingly to the given `mappings`.\n   *\n   * @typeparam R  A type of mapped properties. This is a mapping result type.\n   *\n   * @param mappings  Mappings of CSS properties.\n   * @param from  Raw CSS properties to map.\n   *\n   * @returns Mapped properties.\n   */\n  map<R>(mappings: StypMapper.Mappings<R>, from: StypProperties): R {\n\n    const result: { [key in keyof R]: R[key] } = {} as any;\n    const mapped = {\n      from,\n      get<K extends keyof R>(key: K): R[K] {\n        if (key in result) {\n          return result[key];\n        }\n\n        const mapper = mappingBy<R, K>(mappings[key]);\n        const mappedValue = mapper(from[key as string], this, key);\n\n        result[key] = mappedValue;\n\n        return mappedValue;\n      }\n    };\n\n    itsEach(overKeys(mappings), key => mapped.get(key));\n\n    return result;\n  },\n\n  /**\n   * Creates CSS properties mapper function.\n   *\n   * @typeparam R  A type of mapped properties. This is a mapping result type.\n   * @param mappings  Mappings of CSS properties.\n   *\n   * @returns A function that maps CSS properties accordingly to the given `mappings`.\n   */\n  by<R>(mappings: StypMapper.Mappings<R>): StypMapper<R> {\n    return StypMapper.map.bind<void, StypMapper.Mappings<R>, [StypProperties], R>(undefined, mappings);\n  },\n\n};\n\nfunction mappingBy<R, K extends keyof R>(\n    mapping: StypMapper.Mapping<R, K> | undefined):\n    StypMapper.MappingFunction<R, K> {\n  switch (typeof mapping) {\n  case 'function':\n    return mapping as StypMapper.MappingFunction<R, K>;\n  case 'object':\n    return (mapping as StypMapper.MappingObject<R, K>).by.bind(mapping);\n  }\n\n  const type = typeof mapping;\n\n  return (from: StypValue): R[K] => {\n    return typeof from === type ? from as any : mapping;\n  };\n}\n","/**\n * @module style-producer\n */\nimport { IMPORTANT_CSS_SUFFIX } from '../internal';\nimport { StypValue } from './value';\n\n/**\n * Predefined CSS property value priorities.\n *\n * @category CSS Value\n */\nexport const enum StypPriority {\n\n  /**\n   * Usual, non-important priority.\n   *\n   * This priority is assigned to values by [[StypValueStruct.usual]] method.\n   */\n  Usual = 0,\n\n  /**\n   * Default priority.\n   *\n   * The same as `Usual`. This priority is assigned to values by default.\n   */\n  Default = Usual,\n\n  /**\n   * Important priority.\n   *\n   * This priority corresponds to values with `!important` suffix. It is applied to string values with `!important`\n   * suffix, and can be assigned to structured values using [[StypValueStruct.important]] method.\n   *\n   * All numeric priorities with higher values are rendered as `!important` ones.\n   */\n  Important = 1,\n\n}\n\n/**\n * Splits undefined CSS property value onto non-prioritized value and priority.\n *\n * @category CSS Value\n * @param value  Undefined CSS property value to split.\n *\n * @returns An `[undefined, 0]` tuple.\n */\nexport function stypSplitPriority<T extends StypValue>(value: undefined): [undefined, 0];\n\n/**\n * Splits string CSS property value onto non-prioritized value and priority.\n *\n * @param value  CSS property value to split.\n *\n * @returns A tuple containing the value without `!priority` suffix, and numeric priority (0 or 1).\n */\nexport function stypSplitPriority(value: string): [string, 0 | 1];\n\n/**\n * Splits scalar CSS property value onto non-prioritized value and priority.\n *\n * @param value  CSS property value to split.\n *\n * @returns A tuple containing the value and `0` priority.\n */\nexport function stypSplitPriority<T extends number | boolean>(value: T): [T, 0];\n\n/**\n * Splits arbitrary CSS property value onto value non-prioritized value and priority.\n *\n * @param value  CSS property value to split.\n *\n * @returns A tuple containing the value and numeric priority.\n */\nexport function stypSplitPriority<T extends StypValue>(value: T): [T, number];\n\nexport function stypSplitPriority<T extends StypValue>(value: T): [T, number] {\n  if (value == null) {\n    return [undefined as T, StypPriority.Default];\n  }\n\n  switch (typeof value) {\n    case 'object':\n      return [value, value.priority];\n    case 'string':\n      if (value.endsWith(IMPORTANT_CSS_SUFFIX)) {\n        return[value.substring(0, value.length - IMPORTANT_CSS_SUFFIX.length).trim() as T, StypPriority.Important];\n      }\n  }\n\n  return [value, StypPriority.Default];\n}\n","import { StypPriority } from '../priority';\nimport { StypValue, stypValuesEqual } from '../value';\nimport {\n  StypAddSub as StypAddSub_,\n  StypDimension as StypDimension_,\n  StypMulDiv as StypMulDiv_,\n  StypNumeric,\n  StypNumericStruct,\n} from './numeric';\nimport { StypZero } from './zero';\n\n/**\n * @internal\n */\nexport class StypDimension<Unit extends string>\n    extends StypNumericStruct<StypDimension<Unit>, Unit>\n    implements StypDimension_<Unit> {\n\n  // noinspection JSMethodCanBeStatic\n  get type(): 'dimension' {\n    return 'dimension';\n  }\n\n  /**\n   * The number value.\n   */\n  readonly val: number;\n\n  /**\n   * The unit.\n   */\n  readonly unit: Unit;\n\n  /**\n   * Constructs new structured dimension value.\n   *\n   * @param val  The numeric value.\n   * @param unit  The unit.\n   * @param opts  CSS value options.\n   */\n  constructor(val: number, unit: Unit, opts: StypDimension_.Opts<Unit>) {\n    super(opts);\n    this.val = val;\n    this.unit = unit;\n  }\n\n  toDim<U extends string>(dim: StypDimension_.Kind<U>): StypDimension_<U> | undefined {\n\n    const thisDim: StypDimension_.Kind<any> = this.dim;\n\n    if (dim === thisDim /* same dimension */\n        || dim === thisDim.pt /* !% to compatible +% */\n        || dim === (this.unit === '%' ? dim.pt /* % to any +% */ : thisDim.noPt /* !% to compatible -% */)) {\n      return this as StypDimension_<any>;\n    }\n\n    return;\n  }\n\n  is(other: StypValue): boolean {\n    if (other === this) {\n      return true;\n    }\n    return typeof other === 'object'\n        && other.type === this.type\n        && this.unit === other.unit\n        && this.val === other.val\n        && this.priority === other.priority;\n  }\n\n  prioritize(priority: number): StypDimension<Unit> {\n    return this.priority === priority\n        ? this\n        : new StypDimension(this.val, this.unit, { dim: this.dim, priority });\n  }\n\n  add(addendum: StypNumeric<Unit>): StypNumeric<Unit>;\n\n  add(addendum: number, unit?: Unit): StypNumeric<Unit>;\n\n  add(addendum: StypNumeric<Unit> | number, unit?: Unit): StypNumeric<Unit> {\n    if (typeof addendum === 'number') {\n      addendum = stypDimension(addendum, unit || this.unit, this);\n    }\n    if (addendum.type === 'dimension' && this.unit === addendum.unit) {\n      return stypDimension(this.val + addendum.val, this.unit, this);\n    }\n    return stypAddSub(this, '+', addendum);\n  }\n\n  sub(subtrahend: StypNumeric<Unit>): StypNumeric<Unit>;\n\n  sub(subtrahend: number, unit?: Unit): StypNumeric<Unit>;\n\n  sub(subtrahend: StypNumeric<Unit> | number, unit?: Unit): StypNumeric<Unit> {\n    if (typeof subtrahend === 'number') {\n      subtrahend = stypDimension(subtrahend, unit || this.unit, this);\n    }\n    if (subtrahend.type === 'dimension' && this.unit === subtrahend.unit) {\n      return stypDimension(this.val - subtrahend.val, this.unit, this);\n    }\n    return stypAddSub(this, '-', subtrahend);\n  }\n\n  mul(multiplier: number): StypNumeric<Unit> {\n    return multiplier === 1 ? this : stypDimension(this.val * multiplier, this.unit, this);\n  }\n\n  div(divisor: number): StypNumeric<Unit> {\n    return divisor === 1 ? this : stypDimension(this.val / divisor, this.unit, this);\n  }\n\n  negate(): StypNumeric<Unit> {\n    return stypDimension(-this.val, this.unit, this);\n  }\n\n  /**\n   * Returns a textual representation of this value to be used within CSS `calc()` function.\n   *\n   * @returns `<value><unit>` or just `0`.\n   */\n  toFormula(): string {\n    return this.val + this.unit;\n  }\n\n}\n\n/**\n * Constructs structured [dimension] CSS property value.\n *\n * @param val  Numeric value.\n * @param unit  Value unit.\n * @param opts  Construction options.\n *\n * @returns Either [[StypDimension]], or [[StypZero]] if `val === 0`.\n *\n * [dimension]: https://developer.mozilla.org/en-US/docs/Web/CSS/dimension\n *\n * @internal\n */\nexport function stypDimension<Unit extends string>(\n    val: number,\n    unit: Unit,\n    opts: StypDimension_.Opts<Unit>): StypDimension_<Unit> | StypZero<Unit> {\n  return val\n      ? new StypDimension<Unit>(val, unit, opts)\n      : opts.dim.zero.prioritize(opts.priority || StypPriority.Default);\n}\n\n/**\n * @internal\n */\nexport abstract class StypCalcBase<\n    Self extends StypCalcBase<Self, Op, Right, Unit>,\n    Op extends '+' | '-' | '*' | '/',\n    Right extends number | StypNumeric<Unit>,\n    Unit extends string>\n    extends StypNumericStruct<Self, Unit> {\n\n  // noinspection JSMethodCanBeStatic\n  get type(): 'calc' {\n    return 'calc';\n  }\n\n  readonly left: StypNumeric<Unit>;\n  readonly op: Op;\n  readonly right: Right;\n\n  // noinspection TypeScriptAbstractClassConstructorCanBeMadeProtected\n  constructor(\n      left: StypNumeric<Unit>,\n      op: Op,\n      right: Right,\n      opts: StypDimension_.Opts<Unit>) {\n    super(opts);\n    this.left = left.usual();\n    this.op = op;\n    this.right = right;\n  }\n\n  is(other: StypValue): boolean {\n    if (this === other) {\n      return true;\n    }\n    if (typeof other === 'object' && other.type === this.type) {\n      return this.op === other.op\n          && this.left.is(other.left)\n          && stypValuesEqual(this.right, other.right)\n          && this.priority === other.priority;\n    }\n    return false;\n  }\n\n  add(addendum: StypNumeric<Unit>): StypNumeric<Unit>;\n\n  add(addendum: number, unit: Unit): StypNumeric<Unit>;\n\n  add(addendum: StypNumeric<Unit> | number, unit?: Unit): StypNumeric<Unit> {\n    if (typeof addendum === 'number') {\n      addendum = stypDimension(addendum, unit as Unit, this);\n    }\n    return stypAddSub(this as StypNumeric<Unit>, '+', addendum);\n  }\n\n  sub(subtrahend: StypNumeric<Unit>): StypNumeric<Unit>;\n\n  sub(subtrahend: number, unit: Unit): StypNumeric<Unit>;\n\n  sub(subtrahend: StypNumeric<Unit> | number, unit?: Unit): StypNumeric<Unit> {\n    if (typeof subtrahend === 'number') {\n      subtrahend = stypDimension(subtrahend, unit as Unit, this);\n    }\n    return stypAddSub(this as StypNumeric<Unit>, '-', subtrahend);\n  }\n\n  mul(multiplier: number): StypNumeric<Unit> {\n    return stypMul(this as StypNumeric<Unit>, multiplier);\n  }\n\n  div(divisor: number): StypNumeric<Unit> {\n    return stypDiv(this as StypNumeric<Unit>, divisor);\n  }\n\n  abstract negate(): StypNumeric<Unit>;\n\n  abstract prioritize(priority: number): Self;\n\n  abstract toFormula(): string;\n\n  toString() {\n    return 'calc' + super.toString();\n  }\n\n}\n\n/**\n * CSS `calc()` function call representation containing either addition or subtraction.\n *\n * @typeparam Unit  Allowed unit type.\n *\n * @internal\n */\nexport class StypAddSub<Unit extends string>\n    extends StypCalcBase<StypAddSub<Unit>, '+' | '-', StypNumeric<Unit>, Unit>\n    implements StypAddSub_<Unit> {\n\n  constructor(left: StypNumeric<Unit>, op: '+' | '-', right: StypNumeric<Unit>, opts: StypDimension_.Opts<Unit>) {\n    super(left, op, right.usual(), opts);\n  }\n\n  prioritize(priority: number): StypAddSub<Unit> {\n    return this.priority === priority\n        ? this\n        : new StypAddSub(this.left, this.op, this.right, { dim: this.dim, priority });\n  }\n\n  toDim<U extends string>(dim: StypDimension_.Kind<U>): StypAddSub<U> | undefined {\n\n    const left = this.left.toDim(dim);\n\n    if (!left) {\n      return;\n    }\n\n    const right = this.right.toDim(dim);\n\n    if (!right) {\n      return;\n    }\n\n    if (left === this.left as StypNumeric<any> && right === this.right as StypNumeric<any>) {\n      return this as StypAddSub<any>;\n    }\n\n    return new StypAddSub<U>(left, this.op, right, { dim, priority: this.priority });\n  }\n\n  negate(): StypNumeric<Unit> {\n    return this.op === '-'\n        ? new StypAddSub(this.right, this.op, this.left, this)\n        : new StypAddSub(this.left.negate(), '-', this.right, this);\n  }\n\n  /**\n   * Returns a textual representation of this value to be used within CSS `calc()` function.\n   *\n   * @returns `(<left> <op> <right>)`.\n   */\n  toFormula(): string {\n    return `(${this.left.toFormula()} ${this.op} ${this.right.toFormula()})`;\n  }\n\n}\n\nfunction stypAddSub<Unit extends string>(\n    left: StypNumeric<Unit>,\n    op: '+' | '-',\n    right: StypNumeric<Unit>): StypNumeric<Unit> {\n  return !right.type ? left : new StypAddSub(left, op, right, left);\n}\n\n/**\n * CSS `calc()` function call representation containing either multiplication or division.\n *\n * @typeparam Unit  Allowed unit type.\n *\n * @internal\n */\nexport class StypMulDiv<Unit extends string>\n    extends StypCalcBase<StypMulDiv<Unit>, '*' | '/', number, Unit>\n    implements StypMulDiv_<Unit> {\n\n  prioritize(priority: number): StypMulDiv<Unit> {\n    return this.priority === priority\n        ? this\n        : new StypMulDiv(this.left, this.op, this.right, { dim: this.dim, priority });\n  }\n\n  toDim<U extends string>(dim: StypDimension_.Kind<U>): StypMulDiv<U> | undefined {\n\n    const left = this.left.toDim(dim);\n\n    if (!left) {\n      return;\n    }\n\n    if (left === this.left as StypNumeric<any>) {\n      return this as StypMulDiv<any>;\n    }\n\n    return new StypMulDiv<U>(left, this.op, this.right, { dim, priority: this.priority });\n  }\n\n  mul(multiplier: number): StypNumeric<Unit> {\n    return (this.op === '*'\n        ? stypMul(this.left, this.right * multiplier)\n        : stypDiv(this.left, this.right / multiplier))\n        .prioritize(this.priority);\n  }\n\n  div(divisor: number): StypNumeric<Unit> {\n    return (this.op === '/'\n        ? stypDiv(this.left, this.right * divisor)\n        : stypMul(this.left, this.right / divisor))\n        .prioritize(this.priority);\n  }\n\n  negate(): StypNumeric<Unit> {\n    return new StypMulDiv(this.left, this.op, -this.right, this);\n  }\n\n  /**\n   * Returns a textual representation of this value to be used within CSS `calc()` function.\n   *\n   * @returns `(<left> <op> <right>)`.\n   */\n  toFormula(): string {\n    return `(${this.left.toFormula()} ${this.op} ${this.right})`;\n  }\n\n}\n\nfunction stypMul<Unit extends string>(left: StypNumeric<Unit>, right: number): StypNumeric<Unit> {\n  return !right\n      ? left.dim.zero.prioritize(left.priority)\n      : right === 1\n          ? left.prioritize(left.priority)\n          : new StypMulDiv(left, '*', right, left);\n}\n\nfunction stypDiv<Unit extends string>(left: StypNumeric<Unit>, right: number): StypNumeric<Unit> {\n  return right === 1\n      ? left.prioritize(left.priority)\n      : new StypMulDiv(left, '/', right, left);\n}\n\n/**\n * @internal\n */\nexport function isStypNumeric(source: StypValue): source is StypNumeric<any, any> {\n  return typeof source === 'object' && (source.type === 'dimension' || source.type === 'calc' || source.type === 0);\n}\n","import { StypPriority } from '../priority';\nimport { StypValue } from '../value';\nimport { StypDimension, StypNumeric, StypNumericStruct } from './';\nimport { stypDimension } from './numeric.impl';\nimport { StypZero } from './zero';\n\nclass Zero<Unit extends string> extends StypNumericStruct<Zero<Unit>, Unit> implements StypZero<Unit> {\n\n  constructor(private readonly _byPriority: ZeroByPriority<Unit>, opts: StypDimension.Opts<Unit>) {\n    super(opts);\n  }\n\n  get type(): 0 {\n    return 0;\n  }\n\n  toDim<U extends string>(dim: StypDimension.Kind<U>): StypDimension<U> | StypZero<U> {\n    return dim.zero.prioritize(this.priority);\n  }\n\n  is(other: StypValue): boolean {\n    if (this === other) {\n      return true;\n    }\n    if (typeof other === 'object') {\n      return other.type === this.type && other.priority === this.priority;\n    }\n    if (other === 0 || other === '0') {\n      return this.priority === StypPriority.Usual;\n    }\n    if (other === '0 !important') {\n      return this.priority === StypPriority.Important;\n    }\n    return false;\n  }\n\n  add(addendum: StypNumeric<Unit>): StypNumeric<Unit>;\n\n  add(addendum: number, unit?: Unit): StypNumeric<Unit>;\n\n  add(addendum: StypNumeric<Unit> | number, unit?: Unit): StypNumeric<Unit> {\n    if (typeof addendum === 'number') {\n      addendum = stypDimension(addendum, unit as Unit, this);\n    }\n    return addendum.prioritize(this.priority);\n  }\n\n  sub(subtrahend: StypNumeric<Unit>): StypNumeric<Unit>;\n\n  sub(subtrahend: number, unit: Unit): StypNumeric<Unit>;\n\n  sub(subtrahend: StypNumeric<Unit> | number, unit?: Unit): StypNumeric<Unit> {\n    if (typeof subtrahend === 'number') {\n      subtrahend = stypDimension(subtrahend, unit as Unit, this);\n    }\n    return subtrahend.negate().prioritize(this.priority);\n  }\n\n  mul(): this {\n    return this;\n  }\n\n  div(): this {\n    return this;\n  }\n\n  negate(): this {\n    return this;\n  }\n\n  prioritize(priority: number): Zero<Unit> {\n    return this._byPriority.get(priority);\n  }\n\n  important(): Zero<Unit> {\n    return this._byPriority.important;\n  }\n\n  usual(): Zero<Unit> {\n    return this._byPriority.usual;\n  }\n\n  toFormula(): string {\n    return '0';\n  }\n\n}\n\nclass ZeroByPriority<Unit extends string> {\n\n  readonly usual: Zero<Unit>;\n  readonly important: Zero<Unit>;\n\n  constructor(readonly dim: StypDimension.Kind<Unit>) {\n    this.usual = new Zero(this, { dim });\n    this.important = new Zero(this, { dim, priority: StypPriority.Important });\n  }\n\n  get(priority: number): Zero<Unit> {\n    switch (priority) {\n      case StypPriority.Usual: return this.usual;\n      case StypPriority.Important: return this.important;\n    }\n    return new Zero(this, { dim: this.dim, priority });\n  }\n\n}\n\n/**\n * @internal\n */\nexport function newStypZero<Unit extends string>(dim: StypDimension.Kind.UnitlessZero<Unit>): StypZero<Unit> {\n  return new ZeroByPriority<Unit>(dim).usual;\n}\n","import { StypValue } from '../value';\nimport { StypDimension, StypNumeric } from './numeric';\nimport { isStypNumeric, StypDimension as StypDimension_ } from './numeric.impl';\nimport { StypZero } from './zero';\nimport { newStypZero } from './zero.impl';\n\n/**\n * @internal\n */\nexport function unitlessZeroDimensionKind<Unit extends string>(\n    {\n      pt,\n      noPt,\n    }: {\n      pt: () => StypDimension.Kind.UnitlessZero<Unit | '%'>,\n      noPt: () => StypDimension.Kind.UnitlessZero<Exclude<Unit, '%'>>,\n    }\n): StypDimension.Kind.UnitlessZero<Unit> {\n\n  const dimension: StypDimension.Kind.UnitlessZero<Unit> = {\n\n    get zero(): StypZero<Unit> {\n      return zero;\n    },\n\n    get pt() {\n      return pt();\n    },\n\n    get noPt() {\n      return noPt();\n    },\n\n    of(val: number, unit: Unit): StypDimension<Unit> | StypZero<Unit> {\n      return val ? new StypDimension_(val, unit, { dim: this }) : zero;\n    },\n\n    by(source: StypValue): StypNumeric<Unit> | undefined {\n      if (!isStypNumeric(source)) {\n        return;\n      }\n\n      const numeric: StypNumeric<any, any> = source;\n\n      return numeric.toDim(this);\n    }\n\n  };\n\n  const zero = newStypZero<Unit>(dimension);\n\n  return dimension;\n}\n\n/**\n * @internal\n */\nexport function unitZeroDimensionKind<Unit extends string>(\n    {\n      zeroUnit,\n      withPercent,\n      noPercent,\n    }: {\n      zeroUnit: Unit,\n      withPercent?: () => StypDimension.Kind.UnitZero<Unit | '%'>,\n      noPercent?: () => StypDimension.Kind.UnitZero<Exclude<Unit, '%'>>,\n    }): StypDimension.Kind.UnitZero<Unit> {\n\n  const dimension: StypDimension.Kind.UnitZero<Unit> = {\n\n    get pt() {\n      return withPercent && withPercent();\n    },\n\n    get noPt() {\n      return noPercent ? noPercent() : this as StypDimension.Kind.UnitZero<Exclude<Unit, '%'>>;\n    },\n\n    get zero(): StypDimension<Unit> {\n      return zero;\n    },\n\n    of(val: number, unit: Unit): StypDimension<Unit> {\n      return new StypDimension_(val, unit, { dim: this });\n    },\n\n    by(source: StypValue): StypNumeric<Unit, StypDimension<Unit>> | undefined {\n      if (!isStypNumeric(source)) {\n        return;\n      }\n\n      const numeric: StypNumeric<any, any> = source;\n\n      return numeric.toDim(this);\n    },\n\n  };\n\n  const zero = new StypDimension_(0, zeroUnit, { dim: dimension });\n\n  return dimension;\n}\n","/**\n * @module style-producer\n */\nimport { StypDimension, StypNumeric } from '../numeric';\nimport { unitlessZeroDimensionKind } from '../numeric/dimension-kind.impl';\n\n/**\n * Structured [angle](https://developer.mozilla.org/en-US/docs/Web/CSS/angle) property value.\n *\n * Can be constructed using `StypAngle.of()` function.\n *\n * @category CSS Value\n */\nexport type StypAngle = StypNumeric<StypAngle.Unit>;\n\nexport namespace StypAngle {\n\n  /**\n   * Supported angle units, excluding percent.\n   */\n  export type Unit = 'deg' | 'grad' | 'rad' | 'turn';\n\n}\n\nexport const StypAngle: StypDimension.Kind.UnitlessZero<StypAngle.Unit> = /*#__PURE__*/ unitlessZeroDimensionKind({\n  pt() {\n    return StypAnglePt;\n  },\n  noPt() {\n    return StypAngle;\n  },\n});\n\n/**\n * Structured [angle-percentage](https://developer.mozilla.org/en-US/docs/Web/CSS/angle-percentage) CSS property value.\n *\n * Can be constructed using `StypAnglePt.of()` function.\n *\n * @category CSS Value\n */\nexport type StypAnglePt = StypNumeric<StypAnglePt.Unit>;\n\nexport namespace StypAnglePt {\n\n  /**\n   * Supported angle units, including percent.\n   */\n  export type Unit = StypAngle.Unit | '%';\n\n}\n\nexport const StypAnglePt: StypDimension.Kind.UnitlessZero<StypAnglePt.Unit> =\n    /*#__PURE__*/ unitlessZeroDimensionKind({\n  pt() {\n    return StypAnglePt;\n  },\n  noPt() {\n    return StypAngle;\n  },\n});\n","/**\n * @module style-producer\n */\nimport { StypDimension, StypNumeric } from '../numeric';\nimport { unitZeroDimensionKind } from '../numeric/dimension-kind.impl';\n\n/**\n * Structured [frequency](https://developer.mozilla.org/en-US/docs/Web/CSS/frequency) CSS property value.\n *\n * Can be constructed using `StypFrequency.of()` function.\n *\n * @category CSS Value\n */\nexport type StypFrequency = StypNumeric<StypFrequency.Unit, StypDimension<StypFrequency.Unit>>;\n\nexport namespace StypFrequency {\n\n  /**\n   * Supported frequency units, excluding percent.\n   */\n  export type Unit = 'Hz' | 'kHz';\n\n}\n\nexport const StypFrequency: StypDimension.Kind.UnitZero<StypFrequency.Unit> = /*#__PURE__*/ unitZeroDimensionKind({\n  zeroUnit: 'kHz',\n  withPercent() {\n    return StypFrequencyPt;\n  },\n  noPercent() {\n    return StypFrequency;\n  },\n});\n\n/**\n * Structured [frequency-percentage](https://developer.mozilla.org/en-US/docs/Web/CSS/frequency-percentage) CSS\n * property value.\n *\n * Can be constructed using `StypFrequencyPt.of()` function.\n *\n * @category CSS Value\n */\nexport type StypFrequencyPt = StypNumeric<StypFrequencyPt.Unit, StypDimension<StypFrequencyPt.Unit>>;\n\nexport namespace StypFrequencyPt {\n\n  /**\n   * Supported frequency units, including percent.\n   */\n  export type Unit = StypFrequency.Unit | '%';\n\n}\n\nexport const StypFrequencyPt: StypDimension.Kind.UnitZero<StypFrequencyPt.Unit> = /*#__PURE__*/ unitZeroDimensionKind({\n  zeroUnit: 'kHz',\n  withPercent() {\n    return StypFrequencyPt;\n  },\n  noPercent() {\n    return StypFrequency;\n  },\n});\n","/**\n * @module style-producer\n */\nimport { StypDimension, StypNumeric } from '../numeric';\nimport { unitlessZeroDimensionKind } from '../numeric/dimension-kind.impl';\n\n/**\n * Structured [length](https://developer.mozilla.org/en-US/docs/Web/CSS/length) property value.\n *\n * Can be constructed using `StypLength.of()` function.\n *\n * @category CSS Value\n */\nexport type StypLength = StypNumeric<StypLength.Unit>;\n\nexport namespace StypLength {\n\n  /**\n   * Supported length units, excluding percent.\n   */\n  export type Unit = 'cap' | 'ch' | 'em' | 'ex' | 'ic' | 'lh' | 'rem' | 'rlh'\n      | 'vh' | 'vw' | 'vi' | 'vb' | 'vmin' | 'vmax'\n      | 'px' | 'cm' | 'mm' | 'Q' | 'in' | 'pc' | 'pt';\n\n}\n\nexport const StypLength: StypDimension.Kind.UnitlessZero<StypLength.Unit> =\n    /*#__PURE__*/ unitlessZeroDimensionKind({\n  pt() {\n    return StypLengthPt;\n  },\n  noPt() {\n    return StypLength;\n  },\n});\n\n/**\n * Structured [length-percentage](https://developer.mozilla.org/en-US/docs/Web/CSS/length-percentage) CSS property\n * value.\n *\n * Can be constructed using `StypLengthPt.of()` function.\n *\n * @category CSS Value\n */\nexport type StypLengthPt = StypNumeric<StypLengthPt.Unit>;\n\nexport namespace StypLengthPt {\n\n  /**\n   * Supported length units, including percent.\n   */\n  export type Unit = StypLength.Unit | '%';\n\n}\n\nexport const StypLengthPt: StypDimension.Kind.UnitlessZero<StypLengthPt.Unit> =\n    /*#__PURE__*/ unitlessZeroDimensionKind({\n  pt() {\n    return StypLengthPt;\n  },\n  noPt() {\n    return StypLength;\n  },\n});\n","/**\n * @module style-producer\n */\nimport cssesc from 'cssesc';\nimport { stypSplitPriority } from './priority';\nimport { StypValue, StypValueStruct } from './value';\n\n/**\n * Structured [URL](https://developer.mozilla.org/en-US/docs/Web/CSS/url) CSS property value.\n *\n * @category CSS Value\n */\nexport class StypURL extends StypValueStruct<StypURL> {\n\n  /**\n   * Target URL.\n   */\n  readonly url: string;\n\n  // noinspection JSMethodCanBeStatic\n  /**\n   * `url` value type.\n   */\n  get type(): 'url' {\n    return 'url';\n  }\n\n  /**\n   * Maps the given CSS property value to URL. Defaults to `undefined` if mapping is not possible.\n   *\n   * This method allows to use a [[StypURL]] class as [CSS property mapping][[StypMapper.Mapping]].\n   *\n   * Strings are treated as URLs (without `url()` functional syntax). `!important` suffix is respected.\n   *\n   * @param source  A raw property value that should be converted.\n   *\n   * @returns Mapped property value or `undefined`.\n   */\n  static by(source: StypValue): StypURL | undefined {\n    switch (typeof source) {\n      case 'string':\n\n        const [url, priority] = stypSplitPriority(source);\n\n        return new StypURL(url, { priority });\n      case 'object':\n        if (source.type === 'url') {\n          return source;\n        }\n    }\n    return;\n  }\n\n  /**\n   * Constructs URL value.\n   *\n   * @param url  Target URL.\n   * @param opts  Construction options.\n   */\n  constructor(url: string, opts?: StypValue.Opts) {\n    super(opts);\n    this.url = url;\n  }\n\n  by(source: StypValue): StypURL {\n    return StypURL.by(source) || this;\n  }\n\n  prioritize(priority: number): StypURL {\n    return priority === this.priority ? this : new StypURL(this.url, { priority });\n  }\n\n  is(other: StypValue): boolean {\n    return typeof other === 'object'\n        && other.type === 'url'\n        && other.url === this.url\n        && other.priority === this.priority;\n  }\n\n  toString(): string {\n    return `url('${cssesc(this.url)}')`;\n  }\n\n}\n","import { filterIt, itsIterator, itsReduction, overEntries } from 'a-iterable';\nimport { asis, isPresent, nextSkip, NextSkip, valuesProvider } from 'call-thru';\nimport {\n  afterAll,\n  AfterEvent,\n  afterSupplied,\n  afterThe,\n  EventKeeper,\n  EventSender,\n  isEventKeeper,\n  isEventSender,\n} from 'fun-events';\nimport { IMPORTANT_CSS_SUFFIX } from '../internal';\nimport { StypValue, stypValuesEqual } from '../value';\nimport { StypProperties } from './properties';\nimport { StypRule } from './rule';\n\n/**\n * @internal\n */\nexport const noStypProperties: AfterEvent<[StypProperties]> = /*#__PURE__*/ afterThe({});\n\n/**\n * @internal\n */\nexport function noStypPropertiesSpec() {\n  return noStypProperties;\n}\n\n/**\n * @internal\n */\nexport function stypPropertiesBySpec(rule: StypRule, spec?: StypProperties.Spec): AfterEvent<[StypProperties]> {\n  if (!spec) {\n    return noStypProperties;\n  }\n  if (typeof spec !== 'string') {\n    if (isEventKeeper(spec)) {\n      return preventDuplicates(spec);\n    }\n    if (isEventSender(spec)) {\n      return preventDuplicates(propertiesKeeper(spec));\n    }\n    if (typeof spec === 'function') {\n\n      const senderOrProperties = spec(rule);\n\n      if (typeof senderOrProperties !== 'string') {\n        if (isEventKeeper(senderOrProperties)) {\n          return preventDuplicates(senderOrProperties);\n        }\n        if (isEventSender(senderOrProperties)) {\n          return preventDuplicates(propertiesKeeper(senderOrProperties));\n        }\n      }\n\n      return afterThe(propertiesMap(senderOrProperties));\n    }\n  }\n\n  return afterThe(propertiesMap(spec));\n}\n\nfunction propertiesKeeper(sender: EventSender<[string | StypProperties]>): AfterEvent<[string | StypProperties]> {\n  return afterSupplied(sender, valuesProvider({}));\n}\n\nfunction preventDuplicates(properties: EventKeeper<[string | StypProperties]>): AfterEvent<[StypProperties]> {\n  return afterSupplied(properties).keep.thru(\n      propertiesMap,\n      passNonDuplicate(),\n      asis as (props: StypProperties) => StypProperties, // Needed to satisfy signature\n  );\n}\n\nfunction passNonDuplicate(): (update: StypProperties) => StypProperties | NextSkip<[StypProperties], StypProperties> {\n\n  let stored: StypProperties | undefined;\n\n  return update => {\n    if (stored && propertiesEqual(update, stored)) {\n      return nextSkip();\n    }\n    return stored = { ...update };\n  };\n}\n\nfunction propertiesMap(properties: string | StypProperties): StypProperties {\n  return typeof properties === 'string' ? { $$css: properties } : properties;\n}\n\nfunction propertiesEqual(first: StypProperties, second: StypProperties): boolean {\n\n  const s = itsIterator(propertyEntries(second));\n\n  for (const [key, value] of propertyEntries(first)) {\n\n    const { value: sentry } = s.next();\n\n    if (!sentry || key !== sentry[0] || !stypValuesEqual(value, sentry[1])) {\n      return false;\n    }\n  }\n\n  return !s.next().value;\n}\n\nfunction propertyEntries(properties: StypProperties): Iterable<[keyof StypProperties, StypValue]> {\n  return filterIt(overEntries(properties), isPresent);\n}\n\n/**\n * @internal\n */\nexport function mergeStypProperties(\n    base: AfterEvent<[StypProperties]>,\n    addendum: AfterEvent<[StypProperties]>):\n    AfterEvent<[StypProperties]> {\n  return preventDuplicates(\n      afterAll({ base, addendum })\n          .keep.thru(({ base: [baseProperties], addendum: [addendumProperties] }) =>\n              addValues(baseProperties, addendumProperties)));\n}\n\nfunction addValues(base: StypProperties, addendum: StypProperties): StypProperties {\n  return itsReduction(\n      overEntries(addendum),\n      (result, [k, v]) => addValue(result, k, v),\n      { ...base });\n}\n\nfunction addValue(\n    properties: StypProperties.Mutable,\n    key: keyof StypProperties,\n    value: StypValue): StypProperties.Mutable {\n  if (priorityOf(properties[key]) <= priorityOf(value)) {\n    delete properties[key];\n    properties[key] = value;\n  }\n  return properties;\n}\n\nfunction priorityOf(value: StypValue): number {\n  switch (typeof value) {\n    case 'string':\n      return value.endsWith(IMPORTANT_CSS_SUFFIX) ? 1 : 0;\n    case 'object':\n      return value.priority;\n  }\n  return 0;\n}\n","import { flatMapIt, itsReduction } from 'a-iterable';\nimport { compareNames, isQualifiedName, QualifiedName } from 'namespace-aliaser';\nimport { isNotEmptyArray, isReadonlyArray } from '../internal';\nimport { StypRuleKey } from './rule-key';\nimport { StypSelector } from './selector';\n\n/**\n * @internal\n */\nexport function isCombinator(item: string | StypSelector.Part | StypSelector.Combinator):\n    item is StypSelector.Combinator {\n  return item === '>' || item === '+' || item === '~';\n}\n\n/**\n * @internal\n */\nexport function normalizeStypSelectorPart(part: StypSelector.Part): StypSelector.NormalizedPart {\n  return {\n    ns: part.ns || undefined,\n    e: normalizeElement(part.e),\n    i: part.i || undefined,\n    s: part.s || undefined,\n    c: normalizeClasses(part.c),\n    $: normalizeQualifiers(part.$)\n  };\n}\n\nfunction normalizeElement(e: QualifiedName | undefined): QualifiedName | undefined {\n  return e !== '*' && e || undefined;\n}\n\nfunction normalizeClasses(classes: QualifiedName | readonly QualifiedName[] | undefined):\n    readonly [QualifiedName, ...QualifiedName[]] | undefined {\n  if (!classes) {\n    return;\n  }\n  if (isQualifiedName(classes)) {\n    return [classes];\n  }\n\n  const result = classes.filter(c => !!c);\n\n  return isNotEmptyArray(result) ? result.sort(compareNames) : undefined;\n}\n\nfunction normalizeQualifiers(qualifiers: string | readonly string[] | undefined):\n    readonly [string, ...string[]] | undefined {\n  if (!qualifiers) {\n    return;\n  }\n\n  if (!isReadonlyArray(qualifiers)) {\n    qualifiers = [...exposeQualifier(qualifiers)];\n  } else {\n    qualifiers = [\n      ...itsReduction(\n          flatMapIt(qualifiers, exposeQualifier),\n          (set, qualifier) => set.add(qualifier),\n          new Set<string>())\n    ].sort();\n  }\n\n  return isNotEmptyArray(qualifiers) ? qualifiers : undefined;\n}\n\nconst noQualifiers: Set<string> = new Set();\n\nfunction exposeQualifier(qualifier: string): Set<string> {\n  if (!qualifier) {\n    return noQualifiers;\n  }\n\n  const eqIdx = qualifier.indexOf('=');\n  const name = eqIdx < 0 ? qualifier : qualifier.substring(0, eqIdx);\n  const exposed = new Set<string>();\n  let lastExposed: string | undefined;\n\n  for (const part of name.split(':')) {\n    if (lastExposed) {\n      lastExposed += ':' + part;\n    } else {\n      lastExposed = part;\n    }\n    exposed.add(lastExposed);\n  }\n  if (eqIdx >= 0) {\n    exposed.add(qualifier);\n  }\n\n  return exposed;\n}\n\nconst noKeyAndTail: [[]] = [[]];\n\n/**\n * @internal\n */\nexport function stypRuleKeyAndTail(\n    selector: StypSelector.Normalized):\n    [[]] | [StypRuleKey.Nested, StypSelector.Normalized?] {\n  if (!selector.length) {\n    return noKeyAndTail;\n  }\n\n  let i = 0;\n  let combinator: StypSelector.Combinator | undefined;\n\n  for (;;) {\n\n    const part = selector[i++];\n\n    if (isCombinator(part)) {\n      combinator = part;\n      continue;\n    }\n\n    const key: StypRuleKey = combinator ? [combinator, part] : [part];\n\n    return [key, selector.slice(i)];\n  }\n}\n\nconst rootSelector: StypSelector.Normalized = [];\n\n/**\n * @internal\n */\nexport function stypOuterSelector(selector: StypSelector.Normalized): StypSelector.Normalized | undefined {\n\n  let i = selector.length - 1;\n\n  if (i <= 0) {\n    return i ? undefined : rootSelector;\n  }\n\n  do {\n    --i;\n    switch (selector[i]) {\n      case '>':\n        return selector.slice(0, i);\n      case '+':\n      case '~':\n        --i;\n        continue;\n      default:\n        return selector.slice(0, i + 1);\n    }\n  } while (i > 0);\n\n  return;\n}\n","/**\n * @module style-producer\n */\nimport { namesEqual, NamespaceDef, QualifiedName } from 'namespace-aliaser';\nimport { StypSelector } from './selector';\nimport { normalizeStypSelectorPart } from './selector.impl';\n\n/**\n * CSS rule query.\n *\n * It may represent a selector like `element-name#id.class1.classN` with any of sub-parts omitted.\n *\n * Queries are used to grab a subset of matching rules from `StypRule`.\n *\n * All of its properties are optional.\n *\n * @category CSS Rule\n */\nexport interface StypQuery {\n\n  /**\n   * Element namespace.\n   */\n  readonly ns?: string | NamespaceDef;\n\n  /**\n   * Element name.\n   *\n   * This is the same as `*` when absent.\n   */\n  readonly e?: QualifiedName;\n\n  /**\n   * Element identifier.\n   */\n  readonly i?: QualifiedName;\n\n  /**\n   * Element class name or names.\n   */\n  readonly c?: QualifiedName | readonly QualifiedName[];\n\n  /**\n   * Qualifier or qualifiers.\n   */\n  readonly $?: string | readonly string[];\n\n}\n\nexport namespace StypQuery {\n\n  /**\n   * Normalized CSS rule query.\n   */\n  export type Normalized = StypQuery & StypSelector.NormalizedPart;\n\n}\n\n/**\n * Normalizes arbitrary CSS rule query.\n *\n * @category CSS Rule\n * @param query  CSS rule query to normalize.\n *\n * @returns Normalized CSS rule query.\n */\nexport function stypQuery(query: StypQuery): StypQuery.Normalized {\n  return normalizeStypSelectorPart(query);\n}\n\n/**\n * Checks whether the given structured CSS `selector` matches the target `query`.\n *\n * @category CSS Rule\n * @param selector  Normalized structured CSS selector.\n * @param query  Normalized CSS rule query.\n *\n * @returns `true` if `selector` matches the `query`, or `false` otherwise.\n */\nexport function stypSelectorMatches(selector: StypSelector.Normalized, query: StypQuery.Normalized): boolean {\n  if (!selector.length) {\n    return false;\n  }\n\n  const part = selector[selector.length - 1] as StypSelector.NormalizedPart;\n\n  if (query.ns && part.ns !== query.ns) {\n    return false;\n  }\n  if (query.e && part.e !== query.e) {\n    return false;\n  }\n  if (query.i && part.i !== query.i) {\n    return false;\n  }\n  if (query.c && !classesMatch(part.c, query.c)) {\n    return false;\n  }\n  // noinspection RedundantIfStatementJS\n  if (query.$ && !classesMatch(part.$, query.$)) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction classesMatch(classes: readonly QualifiedName[] | undefined, query: readonly QualifiedName[]) {\n  return classes && query.every(qClass => classes.find(mClass => namesEqual(qClass, mClass)));\n}\n","import { isReadonlyArray } from '../internal';\nimport { StypSelector } from './index';\nimport { isCombinator, normalizeStypSelectorPart } from './selector.impl';\n\n/**\n * Converts normalized CSS selector part to normalized CSS selector.\n *\n * @category CSS Rule\n * @param selector  Normalized CSS selector part.\n *\n * @returns Normalized structured CSS selector. An array containing `selector` as its only item.\n */\nexport function stypSelector(selector: StypSelector.NormalizedPart): [StypSelector.NormalizedPart];\n\n/**\n * Normalizes arbitrary structured CSS selector.\n *\n * @param selector  CSS selector to normalize.\n *\n * @returns Normalized structured CSS selector.\n */\nexport function stypSelector(selector: StypSelector): StypSelector.Normalized;\n\nexport function stypSelector(selector: StypSelector): StypSelector.Normalized {\n  if (!isReadonlyArray(selector)) {\n    return [normalizeKey(selector)];\n  }\n\n  const normalized: StypSelector.Mutable = [];\n  let combinator: StypSelector.Combinator | undefined;\n\n  for (const item of selector) {\n\n    const prevCombinator = combinator;\n\n    if (combinator) {\n      normalized.push(combinator);\n      combinator = undefined;\n    }\n\n    let part: StypSelector.NormalizedPart;\n\n    if (isCombinator(item)) {\n      combinator = item;\n      if (!prevCombinator) {\n        continue;\n      }\n      part = {};\n    } else {\n      part = normalizeKey(item);\n    }\n\n    normalized.push(part);\n  }\n  if (combinator) {\n    normalized.push(combinator, {});\n  }\n\n  return normalized;\n}\n\nfunction normalizeKey(key: StypSelector.Part | string): StypSelector.NormalizedPart {\n  if (typeof key === 'string') {\n    if (!key) {\n      return {};\n    }\n    return { s: key };\n  }\n  return normalizeStypSelectorPart(key);\n}\n","import {\n  css__naming,\n  html__naming,\n  id__naming,\n  NamespaceAliaser,\n  NamespaceDef,\n  newNamespaceAliaser,\n} from 'namespace-aliaser';\nimport { cssescId } from '../internal';\nimport { StypRuleKey } from './rule-key';\nimport { StypSelector } from './selector';\nimport { StypSelectorFormat } from './selector-text';\nimport { isCombinator } from './selector.impl';\n\nconst ruleKeyTextOpts: StypSelectorFormat = {\n  qualify(qualifier: string) {\n    return `@${cssescId(qualifier)}`;\n  }\n};\n\n/**\n * @internal\n */\nexport function stypRuleKeyText(key: StypRuleKey): string {\n  return formatStypSelector(key, ruleKeyTextOpts);\n}\n\nconst displayTextOpts: StypSelectorFormat = {\n  qualify(qualifier: string) {\n    return `@${qualifier}`;\n  }\n};\n\n/**\n * @internal\n */\nexport function stypSelectorDisplayText(selector: StypSelector.Normalized): string {\n  return formatStypSelector(selector, displayTextOpts);\n}\n\nconst defaultFormat: StypSelectorFormat = {};\n\n/**\n * @internal\n */\nexport function formatStypSelector(\n    selector: StypSelector.Normalized,\n    {\n      qualify,\n      nsAlias = newNamespaceAliaser(),\n    }: StypSelectorFormat = defaultFormat): string {\n\n  const format: ItemFormat = { qualify, nsAlias };\n\n  return selector.reduce(\n      (result, item) => {\n        if (isCombinator(item)) {\n          return result + item;\n        }\n        if (result && !isCombinator(result[result.length - 1])) {\n          result += ' ';\n        }\n        return result + formatItem(item, format);\n      },\n      '');\n}\n\ninterface ItemFormat extends StypSelectorFormat {\n  nsAlias: NamespaceAliaser;\n}\n\nfunction formatItem(\n    item: StypSelector.NormalizedPart,\n    {\n      qualify,\n      nsAlias,\n    }: ItemFormat): string {\n\n  const { ns, e, i, c, s, $ } = item;\n  let hasProperties = false;\n  let string = '';\n\n  if (i) {\n    hasProperties = true;\n    string += `#${cssescId(id__naming.name(i, nsAlias))}`;\n  }\n  if (c) {\n    hasProperties = true;\n    string = c.reduce<string>(\n        (result, className) => `${result}.${cssescId(css__naming.name(className, nsAlias))}`,\n        string);\n  }\n  if (s) {\n    hasProperties = true;\n    string += s;\n  }\n  if (qualify && $) {\n    string = $.reduce((result, qualifier) => result + qualify(qualifier), string);\n  }\n  if (ns) {\n\n    const alias = xmlNs(ns, nsAlias);\n\n    if (alias) {\n      string = `${alias}|${e || '*'}${string}`;\n    } else {\n      string = qualifyElement();\n    }\n  } else {\n    string = qualifyElement();\n  }\n\n  return string;\n\n  function qualifyElement(): string {\n    if (hasProperties) {\n      return `${e ? html__naming.name(e, nsAlias) : ''}${string}`;\n    }\n    return `${e ? html__naming.name(e, nsAlias) : '*'}${string}`;\n  }\n}\n\nfunction xmlNs(ns: string | NamespaceDef, nsAlias: NamespaceAliaser): string | undefined {\n  return typeof ns === 'string' ? ns : ns.url ? nsAlias(ns) : undefined;\n}\n","/**\n * @internal\n */\nexport const FIRST_RENDER_ORDER = -0xffff;\n\n/**\n * @internal\n */\nexport function isCSSRuleGroup(sheetOrRule: CSSStyleSheet | CSSRule): sheetOrRule is (CSSGroupingRule | CSSStyleSheet) {\n  return 'cssRules' in sheetOrRule;\n}\n","/**\n * @module style-producer\n */\nimport { filterIt, itsReduction, ObjectEntry, overEntries } from 'a-iterable';\nimport { AfterEvent } from 'fun-events';\nimport { isNotEmptyArray } from '../internal';\nimport { StypProperties, StypRule } from '../rule';\nimport { mergeStypProperties } from '../rule/properties.impl';\nimport { StypSelector, stypSelector } from '../selector';\nimport { isCombinator } from '../selector/selector.impl';\nimport { stypSplitPriority, StypValue } from '../value';\nimport { StypRender } from './render';\nimport { FIRST_RENDER_ORDER, isCSSRuleGroup } from './render.impl';\nimport { StyleProducer } from './style-producer';\n\nclass AtRulesRender implements StypRender.Spec {\n\n  constructor(private readonly _rule: StypRule) {\n  }\n\n  read(properties: AfterEvent<[StypProperties]>) {\n\n    let outer = this._rule.outer;\n\n    while (outer) {\n      properties = mergeStypProperties(outer.read.keep.thru(onlyAtProperties), properties);\n      outer = outer.outer;\n    }\n\n    return properties;\n  }\n\n  render(producer: StyleProducer, properties: StypProperties) {\n\n    const { selector } = producer;\n    let { target } = producer;\n\n    if (!isCSSRuleGroup(target)) {\n      producer.render(properties);\n      return;\n    }\n\n    let sheet: CSSGroupingRule | CSSStyleSheet = target;\n    const extracted = extractAtSelectors(selector);\n\n    if (!extracted) {\n      producer.render(properties);\n      return;\n    }\n\n    const [atSelectors, restSelector] = extracted;\n\n    for (const atSelector of atSelectors) {\n\n      const ruleIdx = sheet.insertRule(`${buildAtSelector(properties, atSelector)}{}`, sheet.cssRules.length);\n      const nested: CSSRule = sheet.cssRules[ruleIdx];\n\n      target = nested;\n      if (isCSSRuleGroup(nested)) {\n        sheet = nested;\n      }\n    }\n\n    producer.render(properties, { target, selector: restSelector });\n  }\n\n}\n\nfunction buildAtSelector(\n    properties: StypProperties,\n    [key, [names, customQuery]]: [string, [Set<string>, string?]]) {\n\n  let query = '';\n\n  for (const name of names) {\n\n    const [namedQuery] = stypSplitPriority(properties[name]);\n\n    addQuery(namedQuery);\n  }\n\n  addQuery(customQuery);\n\n  return query ? `${key} ${query}` : key;\n\n  function addQuery(q?: StypValue) {\n    if (q) {\n      if (query) {\n        query += ' and ';\n      }\n      query += q;\n    }\n  }\n}\n\n/**\n * CSS stylesheet render of at-rules like `@media` queries.\n *\n * At-rules are represented by qualifiers which names start with `@` symbol. Qualifier names are used as at-rules keys,\n * and their values - as queries. If the rest of the selector is not empty, then properties are rendered in CSS\n * rule nested inside at-rule. Otherwise the properties are rendered in at-rule.\n *\n * So, for example CSS rule with `{ c: 'screen-only', $: '@media=screen' }` selector would be rendered as\n * ```css\n * @media screen {\n *   .screen-only {\n *      \\/* CSS properties *\\/\n *   }\n * }\n * ```\n *\n * Another option is to use named at-rules qualifiers. When named qualifier is used, the corresponding property is\n * searched in CSS rule and all of its outer rules. The values of all matching properties are used as queries.\n *\n * So the above example could be written as: `{ c: 'screen-only', $: '@media:screen' }` if CSS rule (or its outer\n * one) contains property `@media:screen` with value `screen`.\n *\n * Enabled by default in [[produceStyle]] function.\n *\n * @category Rendering\n */\nexport const stypRenderAtRules: StypRender = {\n\n  order: FIRST_RENDER_ORDER,\n\n  create(rule) {\n    return new AtRulesRender(rule);\n  },\n\n};\n\nfunction onlyAtProperties(properties: StypProperties): StypProperties {\n  return itsReduction(\n      filterIt<ObjectEntry<StypProperties>, ObjectEntry<StypProperties, string>>(\n          overEntries(properties),\n          isAtEntry),\n      (result: StypProperties.Mutable, [key, value]: ObjectEntry<StypProperties, string>) => {\n        result[key] = value;\n        return result;\n      },\n      {});\n\n}\n\nfunction isAtEntry(entry: ObjectEntry<StypProperties>): entry is ObjectEntry<StypProperties, string> {\n  return String(entry[0])[0] === '@';\n}\n\nfunction extractAtSelectors(\n    selector: StypSelector.Normalized):\n    [Map<string, [Set<string>, string?]>, StypSelector.Normalized] | undefined {\n\n  const atSelectors = new Map<string, [Set<string>, string?]>();\n  const rest: StypSelector.Mutable = [];\n\n  for (const part of selector) {\n    if (isCombinator(part)) {\n      rest.push(part);\n    } else {\n      rest.push(extractPartAtSelectors(part, atSelectors));\n    }\n  }\n\n  if (!atSelectors.size) {\n    return; // No at-rule qualifiers found.\n  }\n\n  return [atSelectors, stypSelector(rest)];\n}\n\nfunction extractPartAtSelectors(\n    part: StypSelector.NormalizedPart,\n    atSelectors: Map<string, [Set<string>, string?]>):\n    StypSelector.NormalizedPart {\n\n  const qualifiers = part.$;\n\n  if (!qualifiers) {\n    return part;\n  }\n\n  const restQualifies: string[] = [];\n\n  for (const qualifier of qualifiers) {\n    if (qualifier[0] === '@') {\n      addAtSelector(atSelectors, qualifier);\n    } else {\n      restQualifies.push(qualifier);\n    }\n  }\n\n  if (restQualifies.length === qualifiers.length) {\n    return part; // No at-rule qualifiers found\n  }\n  if (isNotEmptyArray(restQualifies)) {\n    return { ...part, $: restQualifies };\n  }\n\n  return { ...part, $: undefined };\n}\n\nfunction addAtSelector(atSelectors: Map<string, [Set<string>, string?]>, qualifier: string) {\n\n  const eqIdx = qualifier.indexOf('=');\n  let name: string;\n  let query: string | undefined;\n\n  if (eqIdx < 0) {\n    name = qualifier;\n  } else {\n    name = qualifier.substring(0, eqIdx);\n    query = qualifier.substring(eqIdx + 1);\n  }\n\n  const colonIdx = name.indexOf(':');\n  const key = colonIdx < 0 ? name : name.substring(0, colonIdx);\n  const atSelector = atSelectors.get(key);\n\n  if (!atSelector) {\n    atSelectors.set(key, [new Set<string>().add(name), query]);\n  } else {\n\n    const [names, prevQuery] = atSelector;\n\n    names.add(name);\n    if (query) {\n      atSelector[1] = prevQuery ? `${prevQuery} and ${query}` : query;\n    }\n  }\n}\n","/**\n * @module style-producer\n */\nimport { overEntries } from 'a-iterable';\nimport { StypProperties } from '../rule';\nimport { stypSplitPriority, StypURL, StypValue } from '../value';\nimport { stypRenderAtRules } from './at-rules.render';\nimport { StypRender } from './render';\nimport { FIRST_RENDER_ORDER } from './render.impl';\nimport { StyleProducer } from './style-producer';\n\n/**\n * CSS stylesheet render of global at-rules.\n *\n * It renders at-rules that should stay at the top level:\n * - `@namespace`\n * - `@import`\n *\n * At-rule parameters are taken from root CSS rule properties and treated as following rules.\n *\n * **`@import:url`** property value is treated as media query and appended after stylesheet URL. I.e.\n * ```json\n * {\n *     \"@import:path/to/included.css\": \"screen\"\n * }\n * ```\n * becomes\n * ```css\n * @import url(path/to/included.css) screen;\n * ```\n *\n * **`@namespace`** property value is treated as default namespace URL. I.e.\n * ```json\n * {\n *     \"@namespace\": \"http://www.w3.org/1999/xhtml\"\n * }\n * ```\n * becomes\n * ```css\n * @namespace url(http://www.w3.org/1999/xhtml);\n * ```\n *\n * **`@namespace:prefix`** property value is treated as namespace URL with the given prefix. I.e\n * ```json\n * {\n *     \"@namespace:svg\": \"http://www.w3.org/2000/svg\"\n * }\n * ```\n * becomes\n * ```css\n * @namespace svg url(http://www.w3.org/2000/svg);\n * ```\n *\n * Enabled by default in [[produceStyle]] function.\n *\n * @category Rendering\n */\nexport const stypRenderGlobals: StypRender = {\n\n  order: FIRST_RENDER_ORDER + 1,\n\n  needs: stypRenderAtRules,\n\n  render(producer: StyleProducer, properties: StypProperties) {\n\n    const sheet = producer.styleSheet;\n    let importIndex = 0;\n    let nsIndex = 0;\n\n    for (const [k, v] of overEntries(properties)) {\n\n      const key = String(k);\n\n      if (key[0] === '@') {\n\n        const [value] = stypSplitPriority(v);\n        const importDelta = renderImport(sheet, importIndex, key, value);\n\n        importIndex += importDelta;\n        nsIndex += importDelta;\n\n        const url = StypURL.by(value);\n\n        if (url) {\n          nsIndex += renderDefaultNamespace(sheet, nsIndex, key, url);\n          nsIndex += renderNamespacePrefix(sheet, nsIndex, key, url);\n        }\n      }\n    }\n\n    producer.render(properties);\n  },\n\n};\n\nconst IMPORT_PREFIX = '@import:';\n\nfunction renderImport(\n    sheet: CSSStyleSheet,\n    index: number,\n    key: string,\n    value: StypValue): number {\n  if (!key.startsWith(IMPORT_PREFIX)) {\n    return 0;\n  }\n\n  const url = new StypURL(key.substring(IMPORT_PREFIX.length));\n  let css = `@import ${url}`;\n\n  if (value) {\n    css += ' ' + value;\n  }\n\n  sheet.insertRule(css + ';', index);\n\n  return 1;\n}\n\nfunction renderDefaultNamespace(\n    sheet: CSSStyleSheet,\n    index: number,\n    key: string,\n    url: StypURL): number {\n  if (key !== '@namespace') {\n    return 0;\n  }\n\n  sheet.insertRule(`@namespace ${url};`, index);\n\n  return 1;\n}\n\nconst NS_PREFIX = '@namespace:';\n\nfunction renderNamespacePrefix(\n    sheet: CSSStyleSheet,\n    index: number,\n    key: string,\n    url: StypURL): number {\n  if (!key.startsWith(NS_PREFIX)) {\n    return 0;\n  }\n\n  const prefix = key.substring(NS_PREFIX.length);\n\n  sheet.insertRule(`@namespace ${prefix} ${url};`, index);\n\n  return 1;\n}\n","/**\n * @module style-producer\n */\nimport { filterIt, itsEach, ObjectEntry, overEntries } from 'a-iterable';\nimport hyphenateStyleName from 'hyphenate-style-name';\nimport { StypProperties } from '../rule';\nimport { StypPriority, stypSplitPriority } from '../value';\nimport { StyleProducer } from './style-producer';\n\n/**\n * Renders CSS properties.\n *\n * This render is always present, so there is typically no need to use it explicitly.\n *\n * @category Rendering\n */\nexport function stypRenderProperties(producer: StyleProducer, properties: StypProperties): void {\n\n  const cssRule = producer.addRule() as CSSStyleRule;\n  const { style } = cssRule;\n\n  itsEach(\n      filterIt<ObjectEntry<StypProperties>, ObjectEntry<StypProperties, string>>(\n          overEntries(properties),\n          notCustomProperty),\n      ([k, v]) => {\n\n        const [value, priority] = stypSplitPriority(v);\n\n        style.setProperty(\n            hyphenateStyleName(k),\n            `${value}`,\n            priority >= StypPriority.Important ? 'important' : undefined);\n      });\n\n  producer.render(properties, { target: cssRule });\n}\n\nfunction notCustomProperty(entry: ObjectEntry<StypProperties>): entry is ObjectEntry<Required<StypProperties>, string> {\n\n  const [key, value] = entry;\n\n  if (value == null) {\n    return false;\n  }\n\n  const first = String(key)[0];\n\n  return first >= 'a' && first <= 'z' || first >= 'A' && first <= 'Z';\n}\n","import { isReadonlyArray } from '../internal';\nimport { StypRule } from '../rule';\nimport { stypRenderProperties } from './properties.render';\nimport { StypRender } from './render';\nimport { StypOptions } from './style-producer';\n\nexport interface StypRenderSpecFactory extends StypRender.Factory {\n  create(rule: StypRule): StypRender.Spec;\n}\n\n/**\n * @internal\n */\nexport function stypRenderFactories(opts: StypOptions): readonly StypRenderSpecFactory[] {\n\n  const factories = new Map<StypRender, StypRenderSpecFactory>();\n\n  addRenders(opts.render);\n  factories.delete(stypRenderProperties);\n\n  return [...factories.values(), renderFactory(stypRenderProperties)].sort(compareRenders);\n\n  function addRenders(renders: StypRender | readonly StypRender[] | undefined) {\n    if (renders) {\n      if (isReadonlyArray(renders)) {\n        renders.forEach(addRender);\n      } else {\n        addRender(renders);\n      }\n    }\n  }\n\n  function addRender(render: StypRender) {\n    if (factories.has(render)) {\n      return;\n    }\n\n    const factory = renderFactory(render);\n\n    factories.set(render, factory);\n    addRenders(factory.needs);\n  }\n}\n\nfunction renderFactory(render: StypRender): StypRenderSpecFactory {\n  if (typeof render === 'function') {\n    return {\n      create() {\n        return { render: render as StypRender.Function<any> };\n      }\n    };\n  }\n  if (isFactory(render)) {\n    return {\n      order: render.order,\n      needs: render.needs,\n      create(rule) {\n        return renderSpec(render.create(rule));\n      },\n    };\n  }\n\n  const doRender = render.render.bind(render);\n\n  return {\n    order: render.order,\n    needs: render.needs,\n    create() {\n      return { render: doRender };\n    },\n  };\n}\n\nfunction isFactory(render: StypRender): render is StypRender.Factory {\n  return 'create' in render;\n}\n\nfunction compareRenders(first: StypRender.Factory, second: StypRender.Factory): number {\n\n  const firstOrder = first.order || 0;\n  const secondOrder = second.order || 0;\n\n  return firstOrder > secondOrder ? 1 : firstOrder < secondOrder ? -1 : 0;\n}\n\nfunction renderSpec(render: ReturnType<StypRender.Factory['create']>): StypRender.Spec {\n  return typeof render === 'function' ? { render: render as StypRender.Function<any> } : render;\n}\n","/**\n * @module style-producer\n */\nimport { itsEach, itsReduction, mapIt } from 'a-iterable';\nimport { noop } from 'call-thru';\nimport { AfterEvent, afterSupplied, eventSupply, EventSupply, onSupplied } from 'fun-events';\nimport { NamespaceDef, newNamespaceAliaser } from 'namespace-aliaser';\nimport { StypProperties, StypRule, StypRules } from '../rule';\nimport { StypSelector, stypSelector, StypSelectorFormat, stypSelectorText } from '../selector';\nimport { isCombinator } from '../selector/selector.impl';\nimport { stypRenderFactories } from './options.impl';\nimport { StypRender } from './render';\nimport { isCSSRuleGroup } from './render.impl';\nimport { StyleProducer, StyleSheetRef, StypOptions } from './style-producer';\n\n/**\n * Produces and dynamically updates basic CSS stylesheets based on the given CSS rules.\n *\n * Unlike [[produceStyle]], this function does not enable renders but the basic one which just renders CSS properties.\n * You can enable only renders you need. This is useful only if you are not going to use all of them and want to save\n * the bundle size.\n *\n * @category Rendering\n * @param rules  CSS rules to produce stylesheets for. This can be e.g. a [[StypRule.rules]] to render all rules,\n * or a result of [[StypRuleList.grab]] method call to render only matching ones.\n * @param opts  Production options.\n *\n * @returns Styles supply. Once cut off (i.e. its `off()` method is called) the produced stylesheets are removed.\n */\nexport function produceBasicStyle(rules: StypRules, opts: StypOptions = {}): EventSupply {\n\n  const {\n    document = window.document,\n    rootSelector = { e: 'body' },\n    addStyleSheet = addStyleElement,\n    schedule = scheduleInAnimationFrame,\n    nsAlias = newNamespaceAliaser(),\n  } = opts;\n  const {\n    parent = document.head,\n  } = opts;\n  const view = document.defaultView || window;\n  const format: StypSelectorFormat = { nsAlias };\n  const factories = stypRenderFactories(opts);\n  const renderSupply = renderRules(rules);\n  const trackSupply = trackRules();\n\n  return eventSupply(reason => {\n    trackSupply.off(reason);\n    renderSupply.off(reason);\n  }).needs(renderSupply).needs(trackSupply);\n\n  function styleProducer(\n      rule: StypRule,\n      render: StypRender.Function,\n      production: {\n        styleSheet: CSSStyleSheet,\n        target: CSSStyleSheet | CSSRule,\n        selector: StypSelector.Normalized,\n      }) {\n\n    class Styp implements StyleProducer {\n\n      constructor() {\n      }\n\n      get document() {\n        return document;\n      }\n\n      get parent() {\n        return parent;\n      }\n\n      get rule() {\n        return rule;\n      }\n\n      get styleSheet() {\n        return production.styleSheet;\n      }\n\n      get target() {\n        return production.target;\n      }\n\n      get selector() {\n        return production.selector;\n      }\n\n      nsAlias(ns: NamespaceDef): string {\n        return nsAlias(ns);\n      }\n\n      render(properties: StypProperties, options?: StypRender.Options): void {\n        if (!options) {\n          render(this, properties);\n        } else {\n          render(\n              styleProducer(rule, render, {\n                styleSheet: production.styleSheet,\n                target: options.target || production.target,\n                selector: options.selector || production.selector,\n              }),\n              properties);\n        }\n      }\n\n      addRule(_selector: StypSelector.Normalized = production.selector): CSSRule {\n\n        const target = production.target;\n\n        if (!isCSSRuleGroup(target)) {\n          return target;\n        }\n\n        const ruleIndex = target.insertRule(`${selectorText(_selector)}{}`, target.cssRules.length);\n\n        return target.cssRules[ruleIndex];\n      }\n\n    }\n\n    return new Styp();\n  }\n\n  function selectorText(selector: StypSelector.Normalized) {\n    return stypSelectorText(selector, format);\n  }\n\n  function renderRules(rulesToRender: Iterable<StypRule>): EventSupply {\n    return itsReduction<EventSupply, EventSupply>(\n        mapIt(rulesToRender, renderRule),\n        (prev, supply) => eventSupply(reason => {\n          supply.off(reason);\n          prev.off(reason);\n        }),\n        eventSupply(),\n    );\n  }\n\n  function trackRules(): EventSupply {\n\n    const tracked = new Map<StypRule, EventSupply>();\n    const supply = onSupplied(rules)((added, removed) => {\n      added.forEach(r => tracked.set(r, renderRule(r)));\n      removed.forEach(r => tracked.delete(r));\n    });\n\n    return eventSupply(reason => {\n      supply.off(reason);\n      itsEach(tracked.values(), i => i.off(reason));\n      tracked.clear();\n    }).needs(supply);\n  }\n\n  function renderRule(rule: StypRule): EventSupply {\n\n    const [ reader, render ] = renderForRule(rule);\n    let _sheetRef: StyleSheetRef | undefined;\n    let _rev = 0;\n    const selector = ruleSelector(rule);\n\n    return reader(renderProperties).whenOff(removeStyle);\n\n    function renderProperties(properties: StypProperties) {\n\n      const rev = ++_rev;\n\n      schedule(renderScheduled);\n\n      function renderScheduled() {\n        if (_rev !== rev) {\n          // Properties changed since this operation scheduled.\n          // Skip their rendering.\n          return;\n        }\n\n        if (_sheetRef) {\n          clearProperties(_sheetRef.styleSheet);\n        }\n\n        const producer = styleProducer(\n            rule,\n            render,\n            {\n              get styleSheet() {\n                if (!_sheetRef) {\n                  _sheetRef = addStyleSheet(producer);\n                }\n                return _sheetRef.styleSheet;\n              },\n              get target() {\n                return this.styleSheet;\n              },\n              selector,\n            });\n\n        producer.render(properties);\n      }\n    }\n\n    function removeStyle() {\n      ++_rev;\n\n      const sheetRef = _sheetRef;\n\n      if (sheetRef) {\n        // Element removed before anything rendered.\n        // Should never happen for properly constructed rule.\n        _sheetRef = undefined;\n        return sheetRef.remove();\n      }\n    }\n\n    function clearProperties(sheet: CSSStyleSheet) {\n      while (sheet.cssRules.length) {\n        sheet.deleteRule(sheet.cssRules.length - 1);\n      }\n    }\n  }\n\n  function ruleSelector(rule: StypRule): StypSelector.Normalized {\n\n    const selector = rule.selector;\n\n    if (!selector.length) {\n      // Use configured root selector\n      return stypSelector(rootSelector);\n    }\n    if (isCombinator(selector[0])) {\n      // First combinator is relative to root selector\n      return [...stypSelector(rootSelector), ...selector];\n    }\n\n    return selector;\n  }\n\n  function renderForRule(rule: StypRule): [AfterEvent<[StypProperties]>, StypRender.Function] {\n\n    const specs = factories.map(factory => factory.create(rule));\n    const reader = specs.reduce(\n        (read, spec) => spec.read ? afterSupplied(spec.read(read)) : read,\n        rule.read);\n\n    return [reader, renderAt(0)];\n\n    function renderAt(index: number): StypRender.Function {\n      return (producer, properties) => {\n\n        const nextIndex = index + 1;\n        let nextRender: StypRender.Function;\n\n        if (nextIndex === factories.length) {\n          nextRender = noop;\n        } else {\n          nextRender = renderAt(nextIndex);\n        }\n\n        const nextProducer = styleProducer(producer.rule, nextRender, producer);\n\n        specs[index].render(nextProducer, properties);\n      };\n    }\n  }\n\n  function scheduleInAnimationFrame(operation: () => void) {\n    view.requestAnimationFrame(operation);\n  }\n}\n\nfunction addStyleElement(producer: StyleProducer): StyleSheetRef {\n\n  const { document, parent } = producer;\n  const element = document.createElement('style');\n\n  element.setAttribute('type', 'text/css');\n  element.append(document.createTextNode(''));\n\n  parent.append(element);\n\n  return {\n    styleSheet: element.sheet as CSSStyleSheet,\n    remove() {\n      element.parentElement!.removeChild(element);\n    }\n  };\n}\n","/**\n * @module style-producer\n */\nimport { NamespaceAliaser } from 'namespace-aliaser';\nimport { StypSelector } from './selector';\nimport { stypSelector } from './selector-constructor';\nimport { formatStypSelector } from './selector-text.impl';\n\n/**\n * Structured CSS selector textual format.\n *\n * @category CSS Rule\n */\nexport interface StypSelectorFormat {\n\n  /**\n   * Qualifier formatting function. When present, it is called for each qualifier to build its\n   * textual representation. When unspecified, the qualifiers won't be attached to resulting CSS selector text.\n   *\n   * @param qualifier  Qualifier to format.\n   *\n   * @returns Textual representation of `qualifier`.\n   */\n  qualify?: (qualifier: string) => string;\n\n  /**\n   * Namespace aliaser to use.\n   *\n   * New instance will be created if not specified.\n   */\n  nsAlias?: NamespaceAliaser;\n\n}\n\n/**\n * Converts structured CSS selector to its textual representation.\n *\n * @category CSS Rule\n * @param selector  Target CSS selector.\n * @param format  CSS selector format.\n *\n * @returns CSS selector string.\n */\nexport function stypSelectorText(selector: StypSelector, format?: StypSelectorFormat): string {\n  return formatStypSelector(stypSelector(selector), format);\n}\n","/**\n * @module style-producer\n */\nimport { StypProperties } from '../rule';\nimport { StyleProducer } from './style-producer';\n\n/**\n * Renders raw CSS text. I.e. the contents of [[StypProperties.Generic.$$css]] property.\n *\n * It should be rendered before CSS properties normally to add the rendered rule as a first one.\n *\n * Enabled by default in [[produceStyle]] function.\n *\n * @category Rendering\n */\nexport function stypRenderText(producer: StyleProducer, properties: StypProperties) {\n\n  const css = properties.$$css;\n\n  if (!css) {\n    producer.render(properties);\n  } else {\n\n    const cssRule = producer.addRule() as CSSStyleRule;\n\n    cssRule.style.cssText = css;\n    producer.render(properties, { target: cssRule });\n  }\n}\n","/**\n * @module style-producer\n */\nimport { filterIt, itsEmpty, itsReduction, mapIt, overArray } from 'a-iterable';\nimport { isPresent } from 'call-thru';\nimport { NamespaceDef } from 'namespace-aliaser';\nimport { StypProperties } from '../rule';\nimport { StypSelector } from '../selector';\nimport { isCombinator } from '../selector/selector.impl';\nimport { StypURL } from '../value';\nimport { stypRenderGlobals } from './globals.render';\nimport { StypRender } from './render';\nimport { FIRST_RENDER_ORDER } from './render.impl';\nimport { StyleProducer } from './style-producer';\n\n/**\n * CSS stylesheet render of global XML namespace definitions.\n *\n * Renders `@namespace` declarations for CSS selectors containing namespace definitions.\n *\n * Enabled by default in [[produceStyle]] function.\n *\n * @category Rendering\n */\nexport const stypRenderXmlNs: StypRender = {\n\n  order: FIRST_RENDER_ORDER,\n\n  needs: stypRenderGlobals,\n\n  render(producer: StyleProducer, properties: StypProperties) {\n\n    const xmlNsDefs = extractXmlNsDefs(producer.selector);\n\n    producer.render(itsEmpty(xmlNsDefs) ? properties : declareNss());\n\n    function declareNss(): StypProperties {\n      return itsReduction(xmlNsDefs, declareNs, { ...properties });\n    }\n\n    function declareNs(result: StypProperties.Mutable, ns: NamespaceDef): StypProperties.Mutable {\n\n      const alias = producer.nsAlias(ns);\n\n      result[`@namespace:${alias}`] = new StypURL(ns.url);\n\n      return result;\n    }\n  },\n\n};\n\nfunction extractXmlNsDefs(selector: StypSelector.Normalized): Iterable<NamespaceDef> {\n  return filterIt<NamespaceDef | null, NamespaceDef>(\n      mapIt(\n          overArray(selector),\n          part => !isCombinator(part) && part.ns && typeof part.ns !== 'string' ? part.ns : null),\n      isPresent);\n}\n","/**\n * @module style-producer\n */\nimport { EventSupply } from 'fun-events';\nimport { isReadonlyArray } from '../internal';\nimport { StypRules } from '../rule';\nimport { stypRenderAtRules } from './at-rules.render';\nimport { stypRenderGlobals } from './globals.render';\nimport { produceBasicStyle } from './produce-basic-style';\nimport { StypRender } from './render';\nimport { StypOptions } from './style-producer';\nimport { stypRenderText } from './text.render';\nimport { stypRenderXmlNs } from './xml-ns.render';\n\n/**\n * Produces and dynamically updates CSS stylesheets based on the given CSS rules.\n *\n * Appends `<style>` element(s) to the given parent DOM node (`document.head` by default) and updates them when CSS\n * rules change.\n *\n * This function enables all default renders. E.g. the one supporting raw CSS text rules. If you don't need all of them\n * you may prefer a [[produceBasicStyle]] variant of this function.\n *\n * @category Rendering\n * @param rules  CSS rules to produce stylesheets for. This can be e.g. a [[StypRule.rules]] to render all rules,\n * or a result of [[StypRuleList.grab]] method call to render only matching ones.\n * @param opts  Production options.\n *\n * @returns Styles supply. Once cut off (i.e. its `off()` method is called) the produced stylesheets are removed.\n */\nexport function produceStyle(rules: StypRules, opts: StypOptions = {}): EventSupply {\n  return produceBasicStyle(rules, { ...opts, render: defaultRenders(opts.render) });\n}\n\nfunction defaultRenders(render: StypRender | readonly StypRender[] | undefined): readonly StypRender[] {\n\n  const result: StypRender[] = [\n    stypRenderAtRules,\n    stypRenderXmlNs,\n    stypRenderGlobals,\n    stypRenderText,\n  ];\n\n  if (render) {\n    if (isReadonlyArray(render)) {\n      result.push(...render);\n    } else {\n      result.push(render);\n    }\n  }\n\n  return result;\n}\n","/**\n * @module style-producer\n */\nimport { AfterEvent, AfterEvent__symbol, EventKeeper, OnEvent, OnEvent__symbol } from 'fun-events';\nimport { StypQuery, StypRuleKey, StypSelector } from '../selector';\nimport { StypProperties } from './properties';\nimport { StypRules } from './rules';\n\n/**\n * CSS rule.\n *\n * Represents CSS selector and corresponding CSS properties.\n *\n * @category CSS Rule\n */\nexport abstract class StypRule implements EventKeeper<[StypProperties]> {\n\n  /**\n   * A reference to the root CSS rule.\n   */\n  abstract readonly root: StypRule;\n\n  /**\n   * A reference to outer CSS rule.\n   *\n   * The outer rule is the one for enclosing element.\n   * I.e. for the rule with selector is `a b+c` the parent one is `a b`, while the outer one is `a`.\n   *\n   * This is `null` for the root rule and may be `null` for the rule removed from hierarchy.\n   */\n  abstract readonly outer: StypRule | null;\n\n  /**\n   * CSS selector of this rule.\n   */\n  abstract readonly selector: StypSelector.Normalized;\n\n  /**\n   * A key of this rule in the enclosing one.\n   */\n  abstract readonly key: StypRuleKey;\n\n  /**\n   * Whether this rule's properties are empty.\n   *\n   * This is `true` when the rule properties are constant and empty.\n   *\n   * Empty CSS rules returned from `rule()` method when there is no matching rule found.\n   */\n  abstract readonly empty: boolean;\n\n  /**\n   * `AfterEvent` CSS properties receiver registrar.\n   */\n  abstract readonly read: AfterEvent<[StypProperties]>;\n\n  get [AfterEvent__symbol](): AfterEvent<[StypProperties]> {\n    return this.read;\n  }\n\n  /**\n   * Dynamic list of all CSS rules in hierarchy starting from this one.\n   */\n  abstract readonly rules: StypRuleHierarchy;\n\n  /**\n   * Sets CSS properties of this rule.\n   *\n   * @param properties  CSS properties specifier. Or nothing to clear them.\n   *\n   * @returns `this` rule instance.\n   */\n  abstract set(properties?: StypProperties.Spec): this;\n\n  /**\n   * Appends CSS properties to this rule.\n   *\n   * @param properties  CSS properties specifier.\n   *\n   * @returns `this` rule instance.\n   */\n  add(properties: StypProperties.Spec): this {\n    return this.rules.add([], properties) as this;\n  }\n\n  /**\n   * Clears CSS properties of this rule.\n   *\n   * Calling this method is the same as calling `set()` without properties.\n   *\n   * @returns `this` rule instance.\n   */\n  clear(): this {\n    return this.set();\n  }\n\n  /**\n   * Removes this rule from hierarchy along with all nested rules.\n   *\n   * @param reason  Optional removal reason.\n   *\n   * @returns `this` (just removed) rule instance.\n   */\n  abstract remove(reason?: any): this;\n\n}\n\n/**\n * Dynamically updated list of CSS rules.\n *\n * This is an iterable of rules, an EventSender` of their updates, and an `EventKeeper` of itself.\n *\n * @category CSS Rule\n */\nexport abstract class StypRuleList implements StypRules, EventKeeper<[StypRuleList]> {\n\n  /**\n   * An `AfterEvent` registrar of rule list receiver.\n   *\n   * An `[AfterEvent__symbol]` property is just an alias of this one.\n   */\n  abstract readonly read: AfterEvent<[StypRuleList]>;\n\n  get [AfterEvent__symbol](): AfterEvent<[StypRuleList]> {\n    return this.read;\n  }\n\n  /**\n   * An `OnEvent` registrar of list updates receiver.\n   *\n   * The list updates receiver accepts two arguments:\n   * - An array of added rules\n   * - An array of removed rules.\n   *\n   * An `[OnEvent__symbol]` property is just an alias of this one.\n   */\n  abstract readonly onUpdate: OnEvent<[StypRule[], StypRule[]]>;\n\n  get [OnEvent__symbol](): OnEvent<[StypRule[], StypRule[]]> {\n    return this.onUpdate;\n  }\n\n  abstract [Symbol.iterator](): IterableIterator<StypRule>;\n\n  /**\n   * Grabs rules from this list matching the given `query`.\n   *\n   * @param query  CSS rule query to match.\n   *\n   * @returns Dynamic list of rules in this list matching the given query.\n   */\n  abstract grab(query: StypQuery): StypRuleList;\n\n}\n\n/**\n * Dynamic list of all CSS rules in hierarchy starting from its root.\n *\n * @category CSS Rule\n */\nexport abstract class StypRuleHierarchy extends StypRuleList {\n\n  /**\n   * Dynamic list containing only root CSS rule.\n   *\n   * This list never changes actually.\n   */\n  abstract readonly self: StypRuleList;\n\n  /**\n   * Dynamic list of all CSS rules directly nested within the root one.\n   */\n  abstract readonly nested: StypRuleList;\n\n  /**\n   * Appends CSS properties to nested rule.\n   *\n   * Creates target rule if necessary.\n   *\n   * @param selector  Target rule selector.\n   * @param properties  Optional CSS properties specifier.\n   *\n   * @returns Modified CSS rule.\n   */\n  abstract add(selector: StypSelector, properties?: StypProperties.Spec): StypRule;\n\n  /**\n   * Returns nested CSS rule matching the given `selector`.\n   *\n   * @param selector  Target rule selector.\n   *\n   * @returns Either matching CSS rule, or `undefined` if not found.\n   */\n  abstract get(selector: StypSelector): StypRule | undefined;\n\n  /**\n   * Watches for CSS rule properties.\n   *\n   * The properties are empty when the watched rule does not exist.\n   *\n   * @param selector  CSS selector of watched rule.\n   *\n   * @returns An `AfterEvent` registrar of CSS properties receiver.\n   */\n  abstract watch(selector: StypSelector): AfterEvent<[StypProperties]>;\n\n}\n","import { filterIt, itsIterable } from 'a-iterable';\nimport { asis, valueProvider, valuesProvider } from 'call-thru';\nimport { AfterEvent, afterSupplied, OnEvent, onEventBy, onSupplied } from 'fun-events';\nimport { stypQuery, StypQuery, stypSelectorMatches } from '../selector';\nimport { StypRule, StypRuleList } from './rule';\nimport { StypRules } from './rules';\n\n/**\n * @internal\n */\nexport class Rules extends StypRuleList {\n\n  readonly onUpdate: OnEvent<[StypRule[], StypRule[]]>;\n  readonly read: AfterEvent<[Rules]>;\n  readonly [Symbol.iterator]: () => IterableIterator<StypRule>;\n\n  constructor(list: StypRules, ruleMatches?: (rule: StypRule) => boolean) {\n    super();\n\n    let buildList: () => Iterable<StypRule>;\n    let filterArray: (rules: StypRule[]) => StypRule[];\n\n    if (ruleMatches) {\n      buildList = () => filterIt(list, ruleMatches);\n      filterArray = rules => rules.filter(ruleMatches);\n    } else {\n      buildList = () => list;\n      filterArray = asis;\n    }\n\n    let ruleSet: Set<StypRule> | undefined; // `undefined` updates are not tracked\n\n    this.onUpdate = onEventBy<[StypRule[], StypRule[]]>(receiver => {\n\n      const rules = ruleSet || (ruleSet = new Set(buildList()));\n\n      onSupplied(list)({\n        supply: receiver.supply.whenOff(() => ruleSet = undefined),\n        receive(context, added, removed) {\n          added = filterArray(added);\n          removed = filterArray(removed);\n          if (removed.length || added.length) {\n            removed.forEach(rule => rules.delete(rule));\n            added.forEach(rule => rules.add(rule));\n            receiver.receive(context, added, removed);\n          }\n        },\n      });\n    }).share();\n\n    this.read = afterSupplied<[Rules]>(this.onUpdate.thru(valueProvider(this)), valuesProvider(this));\n\n    this[Symbol.iterator] = () => {\n      if (ruleSet) {\n        // List changes are tracked.\n        return ruleSet.values();\n      }\n      // List changes are not currently tracked.\n      // Request the rules explicitly.\n      return itsIterable(buildList());\n    };\n\n  }\n\n  grab(query: StypQuery): StypRuleList {\n    return grabRules(this, query);\n  }\n\n}\n\n/**\n * @internal\n */\nexport function grabRules(list: StypRuleList, query: StypQuery): StypRuleList {\n\n  const q = stypQuery(query);\n\n  return new Rules(list, rule => stypSelectorMatches(rule.selector, q));\n}\n","import { itsIterable } from 'a-iterable';\nimport { valueProvider, valuesProvider } from 'call-thru';\nimport {\n  AfterEvent,\n  afterEventBy,\n  afterSupplied,\n  EventEmitter,\n  OnEvent__symbol,\n  trackValue,\n  ValueTracker,\n} from 'fun-events';\nimport { StypQuery, StypRuleKey, stypSelector, StypSelector } from '../selector';\nimport { stypRuleKeyText } from '../selector/selector-text.impl';\nimport { stypOuterSelector, stypRuleKeyAndTail } from '../selector/selector.impl';\nimport { StypProperties } from './properties';\nimport { mergeStypProperties, noStypPropertiesSpec, stypPropertiesBySpec } from './properties.impl';\nimport { StypRule as StypRule_, StypRuleHierarchy, StypRuleList } from './rule';\nimport { StypRules } from './rules';\nimport { grabRules, Rules } from './rules.impl';\n\nclass AllRules extends StypRuleHierarchy {\n\n  private readonly _updates = new EventEmitter<[StypRule[], StypRule[]]>();\n  readonly self: StypRuleList;\n  readonly read: AfterEvent<[AllRules]>;\n\n  get onUpdate() {\n    return this._updates.on;\n  }\n\n  constructor(private readonly _root: StypRule, readonly nested: NestedRules) {\n    super();\n    this.self = selfRuleList(_root, this);\n    this.read = afterSupplied<[AllRules]>(this._updates.on.thru(valueProvider(this)), valuesProvider(this));\n  }\n\n  [Symbol.iterator](): IterableIterator<StypRule> {\n    return iterateAllRules(this._root);\n  }\n\n  grab(query: StypQuery): StypRuleList {\n    return grabRules(this, query);\n  }\n\n  add(selector: StypSelector, properties?: StypProperties.Spec): StypRule {\n    return extendRule(this._root, stypSelector(selector), properties, true);\n  }\n\n  get(selector: StypSelector): StypRule | undefined {\n    return this._get(stypSelector(selector));\n  }\n\n  private _get(selector: StypSelector.Normalized): StypRule | undefined {\n\n    const [key, tail] = stypRuleKeyAndTail(selector);\n\n    if (!tail) {\n      return this._root;\n    }\n\n    const found = this.nested._rule(stypRuleKeyText(key));\n\n    if (!found) {\n      return;\n    }\n\n    return found.rules.get(tail);\n  }\n\n  watch(selector: StypSelector): AfterEvent<[StypProperties]> {\n\n    const request = stypSelector(selector);\n\n    return afterEventBy<[StypProperties]>(receiver => {\n\n      const tracker = trackValue<StypProperties>({});\n      const propertiesSupply = this.read.consume(() => {\n\n        const found = this._get(request);\n\n        return found && found\n            .read(properties => tracker.it = properties)\n            .whenOff(() => tracker.it = {});\n      });\n\n      const supply = tracker.read(receiver);\n\n      propertiesSupply.needs(supply);\n\n      return supply;\n    }).share();\n  }\n\n  _add(rule: StypRule, sendUpdate: boolean) {\n    rule.rules.onUpdate((added, removed) => this._updates.send(added, removed));\n    if (sendUpdate) {\n      this._updates.send(allRules(rule), []);\n    }\n  }\n\n  _remove(reason?: any) {\n\n    const removed = allRules(this._root);\n\n    this._updates.send([], removed);\n    removed.forEach(rule => {\n      rule.rules._updates.done(reason);\n      rule._spec.done(reason);\n    });\n  }\n\n}\n\nfunction selfRuleList(rule: StypRule, all: AllRules): StypRuleList {\n\n  const onUpdate = new EventEmitter<[StypRule[], StypRule[]]>();\n  const rules = [rule];\n\n  all.onUpdate((_added, removed) => {\n    if (removed[0] === rule) {\n      rules.length = 0;\n      onUpdate.send([], [rule]);\n    }\n  }).whenOff(reason => onUpdate.done(reason));\n\n  class Self implements StypRules {\n\n    get [OnEvent__symbol]() {\n      return onUpdate.on;\n    }\n\n    [Symbol.iterator](): IterableIterator<StypRule> {\n      return itsIterable(rules);\n    }\n\n  }\n\n  return new Rules(new Self());\n}\n\nfunction allRules(rule: StypRule): StypRule[] {\n  return [...iterateAllRules(rule)];\n}\n\nfunction *iterateAllRules(rule: StypRule): IterableIterator<StypRule> {\n  yield rule;\n  for (const nested of rule.rules.nested) {\n    yield *allRules(nested);\n  }\n}\n\nclass NestedRules extends StypRuleList {\n\n  readonly _all: AllRules;\n  readonly read: AfterEvent<[NestedRules]>;\n  private readonly _updates = new EventEmitter<[StypRule[], StypRule[]]>();\n  private readonly _byKey = new Map<string, StypRule>();\n\n  get onUpdate() {\n    return this._updates.on;\n  }\n\n  constructor(root: StypRule) {\n    super();\n    this._all = new AllRules(root, this);\n    this.read = afterSupplied<[NestedRules]>(this._updates.on.thru(valueProvider(this)), valuesProvider(this));\n  }\n\n  [Symbol.iterator](): IterableIterator<StypRule> {\n    return this._byKey.values();\n  }\n\n  grab(query: StypQuery): StypRuleList {\n    return grabRules(this, query);\n  }\n\n  _rule(key: string): StypRule | undefined {\n    return this._byKey.get(key);\n  }\n\n  _add(key: string, rule: StypRule, sendUpdate: boolean) {\n    this._byKey.set(key, rule);\n    rule.rules.onUpdate((_added, removed) => {\n      if (removed[0] === rule) {\n        this._byKey.delete(key);\n        this._updates.send([], [rule]);\n      }\n    });\n    if (sendUpdate) {\n      this._updates.send([rule], []);\n    }\n    this._all._add(rule, sendUpdate);\n  }\n\n}\n\n/**\n * @internal\n */\nexport class StypRule extends StypRule_ {\n\n  private readonly _root: StypRule;\n  private _outer?: StypRule | null;\n  private readonly _selector: StypSelector.Normalized;\n  private readonly _key: StypRuleKey;\n  readonly _spec: ValueTracker<StypProperties.Builder>;\n  private readonly _read: AfterEvent<[StypProperties]>;\n  private readonly _nested: NestedRules;\n\n  get root(): StypRule {\n    return this._root;\n  }\n\n  get outer(): StypRule | null {\n    if (this._outer !== undefined) {\n      return this._outer;\n    }\n\n    const outerSelector = stypOuterSelector(this.selector);\n\n    return this._outer = outerSelector && this.root.rules.get(outerSelector) || null;\n  }\n\n  get selector(): StypSelector.Normalized {\n    return this._selector;\n  }\n\n  get key(): StypRuleKey {\n    return this._key;\n  }\n\n  get empty() {\n    return this._spec.it === noStypPropertiesSpec;\n  }\n\n  get read(): AfterEvent<[StypProperties]> {\n    return this._read;\n  }\n\n  get rules(): AllRules {\n    return this._nested._all;\n  }\n\n  constructor(\n      root: StypRule | undefined,\n      selector: StypSelector.Normalized,\n      key: StypRuleKey,\n      spec: StypProperties.Builder = noStypPropertiesSpec) {\n    super();\n    this._root = root || this;\n    this._selector = selector;\n    this._key = key;\n    this._spec = trackValue(spec);\n    this._read = this._spec.read.keep.dig(builder => builder(this));\n    this._nested = new NestedRules(this);\n  }\n\n  set(properties?: StypProperties.Spec): this {\n    this._spec.it = properties ? r => stypPropertiesBySpec(r, properties) : noStypPropertiesSpec;\n    return this;\n  }\n\n  remove(reason?: any) {\n    this.rules._remove(reason);\n    return this;\n  }\n\n}\n\nfunction extendRule(\n    rule: StypRule,\n    targetSelector: StypSelector.Normalized,\n    properties: StypProperties.Spec | undefined,\n    sendUpdate: boolean): StypRule {\n\n  const [key, tail] = stypRuleKeyAndTail(targetSelector);\n\n  if (!tail) {\n    // Target rule\n    rule._spec.it = extendSpec(rule, properties);\n    return rule;\n  }\n\n  const keyText = stypRuleKeyText(key);\n  const found = rule.rules.nested._rule(keyText);\n\n  if (found) {\n    return extendRule(found, tail, properties, sendUpdate);\n  }\n\n  const newNested = new StypRule(rule.root, [...rule.selector, ...key], key);\n  const result = extendRule(newNested, tail, properties, false); // Send only a top-level update\n\n  rule.rules.nested._add(keyText, newNested, sendUpdate);\n\n  return result;\n}\n\nfunction extendSpec(rule: StypRule, properties: StypProperties.Spec | undefined): StypProperties.Builder {\n\n  const oldSpec = rule._spec.it;\n\n  if (!properties) {\n    return oldSpec;\n  }\n\n  if (rule.empty) {\n    return r => stypPropertiesBySpec(r, properties);\n  }\n\n  return r => mergeStypProperties(oldSpec(r), stypPropertiesBySpec(r, properties));\n}\n","/**\n * @module style-producer\n */\nimport { StypSelector } from '../selector';\nimport { StypProperties } from './properties';\nimport { stypPropertiesBySpec } from './properties.impl';\nimport { StypRule } from './rule';\nimport { StypRule as StypRule_ } from './rule.impl';\n\nconst rootSelector: StypSelector.Normalized = [];\n\n/**\n * Constructs root CSS rule representing global CSS declarations.\n *\n * All other rules are nested within single root.\n *\n * The root CSS rule selector is empty.\n *\n * @category CSS Rule\n * @param properties  Initial CSS rule properties specifier.\n *\n * @returns New root CSS rule.\n */\nexport function stypRoot(properties?: StypProperties.Spec): StypRule {\n  return new StypRule_(undefined, rootSelector, [], properties ? r => stypPropertiesBySpec(r, properties) : undefined);\n}\n","/**\n * @module style-producer\n */\nimport { valueProvider } from 'call-thru';\nimport { afterAll, AfterEvent, AfterEvent__symbol, afterThe, EventKeeper, isEventKeeper } from 'fun-events';\nimport { StypSelector } from '../selector';\nimport { StypMapper } from '../value';\nimport { StypProperties } from './properties';\nimport { StypRule } from './rule';\n\n/**\n * A type safe reference to CSS rule.\n *\n * Allows to access an modify CSS properties of the rule in a type safe manner.\n *\n * @category CSS Rule\n * @typeparam T  CSS properties structure of referenced rule.\n */\nexport abstract class StypRuleRef<T extends StypProperties<T>> implements EventKeeper<[T]> {\n\n  /**\n   * `AfterEvent` CSS properties receiver registrar.\n   */\n  abstract readonly read: AfterEvent<[T]>;\n\n  get [AfterEvent__symbol](): AfterEvent<[T]> {\n    return this.read;\n  }\n\n  /**\n   * Sets CSS properties of the referenced rule.\n   *\n   * @param properties  CSS properties specifier. Or nothing to clear them.\n   *\n   * @returns `this` rule instance.\n   */\n  abstract set(properties?: Partial<StypProperties<T>> | EventKeeper<[Partial<StypProperties<T>>]>): this;\n\n  /**\n   * Appends CSS properties to the references CSS rule.\n   *\n   * @param properties  CSS properties specifier.\n   *\n   * @returns `this` rule instance.\n   */\n  abstract add(properties: Partial<StypProperties<T>> | EventKeeper<[Partial<StypProperties<T>>]>): this;\n\n  /**\n   * Clears CSS properties of the referenced rule.\n   *\n   * Calling this method is the same as calling `set()` without properties.\n   *\n   * @returns `this` rule instance.\n   */\n  clear(): this {\n    return this.set();\n  }\n\n}\n\n/**\n * CSS rule referrer.\n *\n * This is a function that obtains CSS rule reference relative to the given root.\n *\n * @category CSS Rule\n * @typeparam T  CSS properties interface of referenced rule.\n */\nexport type RefStypRule<T extends StypProperties<T>> =\n/**\n * @param root  Root CSS rule the constructed reference will be relative to.\n *\n * @returns CSS rule reference.\n */\n    (this: void, root: StypRule) => StypRuleRef<T>;\n\n/**\n * @category CSS Rule\n */\nexport const RefStypRule = {\n\n  /**\n   * Constructs a CSS rule referrer that maps original CSS properties accordingly to the given `mappings`.\n   *\n   * @typeparam T  CSS properties structure of referenced rule.\n   * @param selector  CSS selector of target rule.\n   * @param mappings  Either a mappings of CSS properties, an event keeper sending such mappings, or a function\n   * returning one of them and accepting a root CSS rule as its only argument.\n   * The constructed reference will be relative to as its only parameter.\n   *\n   * @returns New CSS rule key instance.\n   */\n  by<T extends StypProperties<T>>(\n      selector: StypSelector,\n      mappings:\n          | StypMapper.Mappings<T>\n          | EventKeeper<[StypMapper.Mappings<T>]>\n          | ((this: void, root: StypRule) => StypMapper.Mappings<T> | EventKeeper<[StypMapper.Mappings<T>]>)\n  ): RefStypRule<T> {\n\n    let createMappings: (root: StypRule) => EventKeeper<[StypMapper.Mappings<T>]>;\n\n    if (typeof mappings === 'function') {\n      createMappings = root => mappingsKeeper(mappings(root));\n    } else {\n      createMappings = valueProvider(mappingsKeeper(mappings));\n    }\n\n    return ref;\n\n    function ref(root: StypRule): StypRuleRef<T> {\n\n      const read = afterAll({\n        ms: createMappings(root),\n        ps: root.rules.watch(selector),\n      }).keep.thru(\n          ({\n             ms: [_mappings],\n             ps: [_properties],\n           }) => StypMapper.map(_mappings, _properties)\n      );\n\n      class Ref extends StypRuleRef<T> {\n\n        // noinspection JSMethodCanBeStatic\n        get read() {\n          return read;\n        }\n\n        add(properties: EventKeeper<[Partial<StypProperties<T>>]> | Partial<StypProperties<T>>): this {\n          root.rules.add(selector, properties);\n          return this;\n        }\n\n        set(properties?: EventKeeper<[Partial<StypProperties<T>>]> | Partial<StypProperties<T>>): this {\n          root.rules.add(selector).set(properties);\n          return this;\n        }\n\n      }\n\n      return new Ref();\n    }\n  },\n\n};\n\nfunction mappingsKeeper<T extends StypProperties<T>>(\n    mappings: StypMapper.Mappings<T> | EventKeeper<[StypMapper.Mappings<T>]>):\n    EventKeeper<[StypMapper.Mappings<T>]> {\n  return isEventKeeper(mappings) ? mappings : afterThe(mappings);\n}\n","/**\n * @module style-producer\n */\nimport { afterAll, AfterEvent, AfterEvent__symbol, EventKeeper } from 'fun-events';\nimport { StypProperties } from './properties';\nimport { StypRule } from './rule';\nimport { RefStypRule, StypRuleRef } from './rule-ref';\n\n/**\n * Named CSS rule references complying to the CSS properties structure.\n *\n * Implements an event keeper interface by sending named CSS properties structures for each CSS rule reference.\n *\n * @category CSS Rule\n * @typeparam R  A type of target map of named CSS properties structures.\n */\nexport class StypRuleRefs<R extends StypRuleRefs.Struct<R>> implements EventKeeper<[R]> {\n\n  private _read?: AfterEvent<[R]>;\n\n  /**\n   * CSS rule references by name.\n   *\n   * Each property in this map is a CSS rule reference corresponding to the same named property in properties structure.\n   * I.e. it has the same name and the same properties structure of referenced rule.\n   */\n  readonly refs: { readonly [K in keyof R]: StypRuleRef<R[K]> };\n\n  /**\n   * Constructs named CSS rules by resolving CSS rule referrers.\n   *\n   * @typeparam R  A type of target map of named CSS properties structures.\n   * @param referrers  Named CSS rule referrers to resolve.\n   * @param root  A root CSS rule the references will be relative to.\n   *\n   * @returns New names CSS rules instance.\n   */\n  static by<R extends StypRuleRefs.Struct<R>>(\n      referrers: { readonly [K in keyof R]: RefStypRule<R[K]> },\n      root: StypRule): StypRuleRefs<R>;\n\n  static by<R extends StypRuleRefs.Struct<R>>(\n      referrers: { readonly [name: string]: RefStypRule<any> },\n      root: StypRule): StypRuleRefs<R> {\n\n    const refs: { [K in keyof R]?: StypRuleRef<any> } = {};\n\n    for (const key of Object.keys(referrers)) {\n      refs[key as keyof R] = referrers[key](root) as StypRuleRef<any>;\n    }\n\n    return new StypRuleRefs<R>(refs as { [K in keyof R]: StypRuleRef<R[K]> });\n  }\n\n  /**\n   * Constructs named CSS rules.\n   *\n   * @param refs  A map of named CSS rule references.\n   */\n  constructor(refs: { readonly [K in keyof R]: StypRuleRef<R[K]> }) {\n    this.refs = refs;\n  }\n\n  /**\n   * An `AfterEvent` registrar of the receivers of named CSS properties structures for each CSS rule reference.\n   */\n  get read(): AfterEvent<[R]> {\n    if (this._read) {\n      return this._read;\n    }\n\n    const fromAll: AfterEvent<[{ [K in keyof R]: [StypProperties<any>] }]> = afterAll(this.refs);\n\n    return this._read = fromAll.keep.thru(flattenProperties) as AfterEvent<[R]>;\n  }\n\n  get [AfterEvent__symbol](): AfterEvent<[R]> {\n    return this.read;\n  }\n\n}\n\nfunction flattenProperties<R extends StypRuleRefs.Struct<R>>(\n    propertiesMap: { readonly [name: string]: [StypProperties<any>] }): R {\n\n  const result: { [name: string]: StypProperties<any> } = {};\n\n  for (const name of Object.keys(propertiesMap)) {\n    result[name] = propertiesMap[name][0];\n  }\n\n  return result as R;\n}\n\nexport namespace StypRuleRefs {\n\n  /**\n   * A map of named CSS properties structures.\n   *\n   * Each property in this map corresponds to CSS rule reference with the same CSS properties structure.\n   */\n  export type Struct<R = { readonly [name: string]: StypProperties<any> }> = {\n    readonly [K in keyof R]: StypProperties<any>;\n  };\n\n  /**\n   * A map of named CSS rule referrers.\n   *\n   * These referrers then resolved to the same named CSS rule references.\n   *\n   * @typeparam R  A type of target map of named CSS properties structures.\n   */\n  export type Referrers<R extends Struct<R>> = {\n    readonly [K in keyof R]: RefStypRule<R[K]>;\n  };\n\n}\n","/**\n * @module style-producer\n */\nimport { itsEach } from 'a-iterable';\nimport {\n  EventNotifier,\n  EventReceiver,\n  EventSender,\n  eventSupply,\n  isEventSender,\n  noEventSupply,\n  OnEvent,\n  OnEvent__symbol,\n  onEventBy, onNever,\n  onSupplied,\n} from 'fun-events';\nimport { StypRule, StypRuleList } from './rule';\nimport { Rules } from './rules.impl';\n\n/**\n * Dynamically updated CSS rule set.\n *\n * This is an iterable of rules, and an `EventSender` of their updates.\n *\n * @category CSS Rule\n */\nexport interface StypRules extends Iterable<StypRule>, EventSender<[StypRule[], StypRule[]]> {\n\n  [Symbol.iterator](): IterableIterator<StypRule>;\n\n}\n\nexport namespace StypRules {\n\n  /**\n   * A source of CSS rules.\n   *\n   * A dynamically updated CSS rule set can be constructed out of one or more sources by [[stypRules]] and\n   * [[lazyStypRules]] functions.\n   *\n   * This can be one of:\n   * - Single `StypRule` instance.\n   *   A `StypRule.rules.self` is used instead. I.e. a list containing only the rule itself.\n   * - A `StypRules` instance.\n   *   It is used as is.\n   * - A promise of one of the above.\n   *   The resolved value is used as an actual source.\n   *   No rules are available until resolution.\n   * - A function returning one of the above.\n   *   The function call result is used as an actual source.\n   *   The function will be called lazily upon rules access.\n   */\n  export type Source =\n      | StypRule\n      | StypRules\n      | Promise<StypRule | StypRules>\n      | ((this: void) => StypRule | StypRules | Promise<StypRule | StypRules>);\n\n}\n\nconst noStypRules: StypRuleList = /*#__PURE__*/ new Rules({\n  [OnEvent__symbol]: onNever,\n  [Symbol.iterator](): IterableIterator<StypRule> {\n    return [][Symbol.iterator]();\n  },\n});\n\n/**\n * Constructs dynamically updated CSS rule list out of rule sources.\n *\n * @category CSS Rule\n * @param sources  CSS rule sources.\n *\n * @returns Dynamic CSS rule list.\n */\nexport function stypRules(...sources: StypRules.Source[]): StypRuleList {\n  return sources.length ? rulesByList(sources.map(rulesFromSource)) : noStypRules;\n}\n\nfunction rulesFromSource(source: StypRules.Source): StypRules {\n  return typeof source === 'function' ? evalRules(source) : rulesByValue(source);\n}\n\n/**\n * Constructs lazily updated CSS rule list out of rule sources.\n *\n * In contrast to [[stypRules]] this one does not evaluate sources (e.g. does not call source functions) until there\n * is an updates receiver registered.\n *\n * This means that the constructed rule set won't necessary contain the rules from all sources originally. It will\n * report them as updates instead.\n *\n * @category CSS Rule\n * @param sources  CSS rule sources.\n *\n * @returns Dynamic CSS rule list.\n */\nexport function lazyStypRules(...sources: StypRules.Source[]): StypRuleList {\n  return sources.length ? rulesByList(sources.map(lazyRulesFromSource)) : noStypRules;\n}\n\nfunction lazyRulesFromSource(source: StypRules.Source): StypRules {\n  return typeof source === 'function' ? lazyRules(source) : rulesByValue(source);\n}\n\nfunction rulesByList(sources: StypRules[]): StypRuleList {\n  if (sources.length === 1) {\n\n    const source = sources[0];\n\n    return source instanceof StypRuleList ? source : new Rules(source);\n  }\n  return new Rules({\n    * [Symbol.iterator](): IterableIterator<StypRule> {\n      for (const rules of sources) {\n        yield* rules;\n      }\n    },\n    get [OnEvent__symbol](): OnEvent<[StypRule[], StypRule[]]> {\n      return onEventBy<[StypRule[], StypRule[]]>(receiver => {\n        sources.forEach(source => onSupplied(source)({\n          supply: eventSupply().needs(receiver.supply),\n          receive(context, added, removed) {\n            receiver.receive(context, added, removed);\n          }\n        }));\n      }).share();\n    },\n  });\n}\n\nfunction evalRules(source: (this: void) => StypRule | StypRules | Promise<StypRule | StypRules>): StypRules {\n\n  let _rules: StypRules | undefined;\n\n  return {\n    [Symbol.iterator](): IterableIterator<StypRule> {\n      return rules()[Symbol.iterator]();\n    },\n    get [OnEvent__symbol]() {\n      return rules()[OnEvent__symbol];\n    }\n  };\n\n  function rules(): StypRules {\n    return _rules || (_rules = rulesByValue(source()));\n  }\n}\n\nfunction lazyRules(source: (this: void) => StypRule | StypRules | Promise<StypRule | StypRules>): StypRules {\n\n  const ruleSet = new Set<StypRule>();\n  const onEvent = onEventBy(receiver => {\n\n    const rules = rulesByValue(source());\n\n    reportExistingRules(rules, ruleSet, receiver);\n    rules[OnEvent__symbol]({\n      supply: receiver.supply.whenOff(() => ruleSet.clear()),\n      receive(context, added, removed) {\n        removed.forEach(rule => ruleSet.delete(rule));\n        added.forEach(rule => ruleSet.add(rule));\n        receiver.receive(context, added, removed);\n      },\n    });\n  }).share();\n\n  return {\n    [OnEvent__symbol]: onEvent,\n    [Symbol.iterator](): IterableIterator<StypRule> {\n      return ruleSet.values();\n    },\n  };\n}\n\nfunction rulesByValue(source: StypRule | StypRules | Promise<StypRule | StypRules>): StypRules {\n  return source instanceof StypRule ? source.rules.self : isEventSender(source) ? source : asyncRules(source);\n}\n\nfunction asyncRules(source: Promise<StypRule | StypRules>): StypRules {\n\n  const ruleSet = new Set<StypRule>();\n  const onEvent = onEventBy<[StypRule[], StypRule[]]>(receiver => {\n\n    let sourceSupply = noEventSupply();\n    const { supply } = receiver;\n\n    supply.whenOff(reason => {\n      sourceSupply.off(reason);\n      ruleSet.clear();\n    });\n\n    source.then(resolution => {\n      if (!supply.isOff) {\n\n        const rules = resolution instanceof StypRule ? resolution.rules : resolution;\n\n        reportExistingRules(rules, ruleSet, receiver);\n\n        sourceSupply = onSupplied(rules)({\n          receive(context, added, removed) {\n            removed.forEach(rule => ruleSet.delete(rule));\n            added.forEach(rule => ruleSet.add(rule));\n            receiver.receive(context, added, removed);\n          }\n        }).needs(supply);\n      }\n    });\n  }).share();\n\n  return {\n    [OnEvent__symbol]: onEvent,\n    [Symbol.iterator](): IterableIterator<StypRule> {\n      return ruleSet.values();\n    },\n  };\n}\n\nfunction reportExistingRules(\n    rules: StypRules,\n    ruleSet: Set<StypRule>,\n    receiver: EventReceiver.Generic<[StypRule[], StypRule[]]>,\n) {\n\n  const existing: StypRule[] = [];\n\n  itsEach(rules, rule => {\n    existing.push(rule);\n    ruleSet.add(rule);\n  });\n  if (existing.length) {\n\n    const dispatcher = new EventNotifier<[StypRule[], StypRule[]]>();\n\n    dispatcher.on(receiver);\n    dispatcher.send(existing, []); // Report existing rules as just added\n  }\n}\n","/**\n * @module input-aspects\n */\nimport { InControl } from './control';\n\n/**\n * Some aspect of the user input. Such as input focus or validity.\n *\n * An aspect is applied to input control first. This creates an aspect instance bound to that control. All\n * aspect-related operations are performed by that instance.\n *\n * @category Aspect\n * @typeparam Instance  Aspect instance type.\n * @typeparam Kind  Aspect application kind.\n */\nexport interface InAspect<Instance, Kind extends InAspect.Application.Kind = 'default'> {\n\n  /**\n   * Applies this aspect to the given input `control`.\n   *\n   * This method is called at most once per control when requested aspect is not applied to the control yet.\n   *\n   * @typeparam Value  Input value type.\n   * @param control  Input control to apply aspect to.\n   *\n   * @returns An aspect applied to the given `control`.\n   */\n  applyTo<Value>(control: InControl<Value>): InAspect.Applied<Instance>;\n\n}\n\n/**\n * A symbol of aspect key property containing a reference to aspect.\n *\n * @category Aspect\n */\nexport const InAspect__symbol = /*#__PURE__*/ Symbol('in-aspect');\n\nexport namespace InAspect {\n\n  /**\n   * A key of the aspect of user input.\n   *\n   * It is passed to `InControl.aspect()` method in order to apply target aspect to that control.\n   *\n   * This interface is typically implemented by aspect instance class object. I.e. by its static methods.\n   *\n   * @typeparam Instance  Aspect instance type.\n   * @typeparam Kind  Aspect application kind.\n   */\n  export interface Key<Instance, Kind extends Application.Kind = 'default'> {\n\n    /**\n     * A referenced aspect of user input.\n     */\n    [InAspect__symbol]: InAspect<Instance, Kind>;\n\n  }\n\n  /**\n   * An input aspect applied to control.\n   *\n   * This is what returned from `InAspect.applyTo()` method. Contains aspect instance and its manipulation methods.\n   *\n   * @typeparam Instance  Aspect instance type.\n   * @typeparam ConvertedInstance  A type of aspect instance applied to converted control.\n   * The same as `Instance` by default.\n   */\n  export interface Applied<Instance, ConvertedInstance extends Instance = Instance> {\n\n    /**\n     * Input aspect instance.\n     */\n    readonly instance: Instance;\n\n    /**\n     * Converts an aspect to another value type.\n     *\n     * This method is called by input control created by `InControl.convert()` method.\n     *\n     * @typeparam To  Converted input value type.\n     * @param target  Target input control.\n     *\n     * @returns The same aspect applied to `target` control, or `undefined` if aspect can not be converted.\n     */\n    convertTo<To>(target: InControl<To>): Applied<ConvertedInstance> | undefined;\n\n  }\n\n  export namespace Application {\n\n    /**\n     * A kind of input aspect application.\n     *\n     * This is a key of `InAspect.Application.Map` type.\n     */\n    export type Kind = keyof Map<unknown, unknown>;\n\n    /**\n     * A type of input aspect application result of the given application kind and input value type.\n     *\n     * @typeparam OfInstance  Aspect instance type.\n     * @typeparam OfValue  Input value type.\n     * @typeparam OfKind  Aspect application kind.\n     */\n    export type Result<OfInstance, OfValue, OfKind extends Kind> =\n        Applied<Instance<OfInstance, OfValue, OfKind>>;\n\n    /**\n     * A type of applied aspect instance of the given application kind and input value type.\n     *\n     * @typeparam OfInstance  Aspect instance type.\n     * @typeparam OfValue  Input value type.\n     * @typeparam OfKind  Aspect application kind.\n     */\n    export type Instance<OfInstance, OfValue, OfKind extends Kind> =\n        ReturnType<Map<OfInstance, OfValue>[OfKind]>;\n\n    /**\n     * A map implementing application result detection algorithms.\n     *\n     * Each method name here is a kind of aspect application, while the return value of this method is an aspect\n     * instance type.\n     *\n     * @typeparam OfInstance  Aspect instance type.\n     * @typeparam OfValue  Input value type.\n     */\n    export interface Map<OfInstance, OfValue> {\n\n      /**\n       * Default aspect application type. Just an aspect instance type.\n       */\n      default(): OfInstance;\n\n    }\n\n  }\n\n}\n","import { noop } from 'call-thru';\nimport { InAspect } from './aspect';\n\n/**\n * @internal\n */\nexport const inAspectNull: InAspect.Applied<any, any> = {\n  instance: null,\n  convertTo: noop,\n};\n\n/**\n * @internal\n */\nexport function inAspectValue<Instance>(instance: Instance): InAspect.Applied<Instance> {\n  return {\n    instance,\n    convertTo() {\n      return this;\n    },\n  };\n}\n","/**\n * @module input-aspects\n */\nimport { noop, valueProvider } from 'call-thru';\nimport { EventEmitter, OnEvent, trackValue, ValueTracker } from 'fun-events';\nimport { InAspect, InAspect__symbol } from './aspect';\n\n/**\n * User input control.\n *\n * Maintains input value and various aspects of the user input, such as input focus, validity, etc.\n *\n * @category Control\n * @typeparam Value  Input value type.\n */\nexport abstract class InControl<Value> extends ValueTracker<Value> {\n\n  /**\n   * @internal\n   */\n  private readonly _aspects = new Map<InAspect<any, any>, InAspect.Applied<any, any>>();\n\n  /**\n   * Input value.\n   */\n  abstract it: Value;\n\n  /**\n   * Retrieves an aspect instance applied to this control.\n   *\n   * If the given `aspect` is not applied yet, then applies it first.\n   *\n   * @typeparam Instance  Aspect instance type.\n   * @typeparam Kind  Aspect application kind.\n   * @param aspectKey  A key of aspect to apply to this control.\n   *\n   * @returns An applied aspect instance.\n   */\n  aspect<Instance, Kind extends InAspect.Application.Kind>(\n      aspectKey: InAspect.Key<Instance, Kind>,\n  ): InAspect.Application.Instance<Instance, Value, Kind> {\n    return this._aspect(aspectKey[InAspect__symbol]).instance;\n  }\n\n  /**\n   * Performs additional setup of this control.\n   *\n   * @param setup  A function that accepts this control as its only parameter to configure it.\n   *\n   * @returns `this` control instance.\n   */\n  setup(setup: (this: void, control: this) => void): this;\n\n  /**\n   * Performs additional setup of this control's aspect.\n   *\n   * @typeparam Instance  Aspect instance type.\n   * @typeparam Kind  Aspect application kind.\n   * @param aspectKey  A key of aspect to set up.\n   * @param setup  A function that accepts the aspect and this control as parameters to configure them.\n   *\n   * @returns `this` control instance.\n   */\n  setup<Instance, Kind extends InAspect.Application.Kind>(\n      aspectKey: InAspect.Key<Instance, Kind>,\n      setup?: (this: void, aspect: InAspect.Application.Instance<Instance, Value, Kind>, control: this) => void,\n  ): this;\n\n  setup<Instance, Kind extends InAspect.Application.Kind>(\n      aspectKeyOrSetup: InAspect.Key<Instance, Kind> | ((this: void, control: this) => void),\n      aspectSetup: (\n          this: void,\n          aspect: InAspect.Application.Instance<Instance, Value, Kind>,\n          control: this,\n      ) => void = noop,\n  ): this {\n    if (isAspectKey(aspectKeyOrSetup)) {\n      aspectSetup(this.aspect(aspectKeyOrSetup), this);\n    } else {\n      aspectKeyOrSetup(this);\n    }\n    return this;\n  }\n\n  /**\n   * Converts this control to another one with value of different type.\n   *\n   * The converted control's value bound to this one and wise versa.\n   *\n   * @typeparam To  Converted input value type.\n   * @param set  Value conversion function accepting this control's value an returning converted one.\n   * @param get  Reverse value conversion function accepting converted value and returning this control's one.\n   *\n   * @returns Converted control.\n   */\n  convert<To>(\n      set: (this: void, value: Value) => To,\n      get: (this: void, value: To) => Value,\n  ): InControl<To>;\n\n  /**\n   * Converts this control to another one with value of different type potentially depending on various input aspects.\n   *\n   * @typeparam To  Converted input value type.\n   * @param by  Input control converter.\n   *\n   * @returns Converted control.\n   */\n  convert<To>(by: InControl.Converter<Value, To>): InControl<To>;\n\n  convert<To>(\n      setOrBy: ((this: void, value: Value) => To) | InControl.Converter<Value, To>,\n      get?: (this: void, value: To) => Value,\n  ): InControl<To> {\n\n    let by: InControl.Converter<Value, To>;\n\n    if (!get) {\n      by = setOrBy as InControl.Converter<Value, To>;\n    } else {\n      by = valueProvider({ set: setOrBy as (value: Value) => To, get });\n    }\n\n    return new InConverted(this, by);\n  }\n\n  /**\n   * @internal\n   */\n  _aspect<Instance, Kind extends InAspect.Application.Kind>(\n      aspect: InAspect<Instance, Kind>\n  ): InAspect.Application.Result<Instance, Value, Kind> {\n\n    const existing = this._aspects.get(aspect);\n\n    if (existing) {\n      return existing as InAspect.Application.Result<Instance, Value, Kind>;\n    }\n\n    const applied = this._applyAspect(aspect) || aspect.applyTo(this);\n\n    this._aspects.set(aspect, applied);\n\n    return applied as InAspect.Application.Result<Instance, Value, Kind>;\n  }\n\n  /**\n   * Applies the given aspect to this control in a custom way.\n   *\n   * @typeparam Instance  Aspect instance type.\n   * @typeparam Kind  Aspect application kind.\n   * @param _aspect  An aspect to apply.\n   *\n   * @returns Either applied aspect instance or `undefined` to apply the aspect in standard way (i.e. using\n   * `InAspect.applyTo()` method).\n   */\n  protected _applyAspect<Instance, Kind extends InAspect.Application.Kind>(\n      _aspect: InAspect<Instance, Kind>\n  ): InAspect.Application.Result<Instance, Value, Kind> | undefined {\n    return;\n  }\n\n}\n\nfunction isAspectKey<Instance, Kind extends InAspect.Application.Kind>(\n    value: any,\n): value is InAspect.Key<Instance, Kind> {\n  return InAspect__symbol in value;\n}\n\nexport namespace InControl {\n\n  /**\n   * Input control converter.\n   *\n   * It is a function called by `InControl.convert()` method to construct value converters.\n   *\n   * This function should not access converted control value as the one does not exist at calling time.\n   *\n   * @typeparam From  Original input value type.\n   * @typeparam To  Converted input value type.\n   */\n  export type Converter<From, To> =\n  /**\n   * @param from  Original input control.\n   * @param to  Converted input control.\n   *\n   * @returns A tuple containing value conversion function and reverse value conversion function.\n   */\n      (\n          this: void,\n          from: InControl<From>,\n          to: InControl<To>,\n      ) => Converters<From, To>;\n\n  /**\n   * Value converters.\n   *\n   * @typeparam From  Original input value type.\n   * @typeparam To  Converted input value type.\n   */\n  export interface Converters<From, To> {\n\n    /**\n     * Applies the given aspect to converted control in a custom way.\n     *\n     * @typeparam Instance  Aspect instance type.\n     * @typeparam Kind  Aspect application kind.\n     * @param aspect  An aspect to apply.\n     *\n     * @returns Either applied aspect instance or `undefined` to apply the aspect in standard way (i.e. by converting\n     * it from corresponding aspect of original control).\n     */\n    readonly applyAspect?: <Instance, Kind extends InAspect.Application.Kind>(\n        this: this,\n        aspect: InAspect<Instance, Kind>\n    ) => InAspect.Application.Result<Instance, To, Kind> | undefined;\n\n    /**\n     * Converts original value.\n     *\n     * @param value  Original value to convert.\n     *\n     * @returns New value of converted control.\n     */\n    set(this: void, value: From): To;\n\n    /**\n     * Restores an original control value by converted one.\n     *\n     * @param value  A converted value to restore the original one by.\n     *\n     * @returns New value of original control.\n     */\n    get(this: void, value: To): From;\n\n  }\n\n  /**\n   * A value type of the given input control type.\n   *\n   * @typeparam Control  Input control type.\n   */\n  export type ValueType<Control extends InControl<any>> = Control extends InControl<infer Value> ? Value : never;\n\n}\n\nclass InConverted<From, To> extends InControl<To> {\n\n  readonly on: OnEvent<[To, To]>;\n  private readonly _it: ValueTracker<[To, number]>;\n  protected readonly _applyAspect: <Instance, Kind extends InAspect.Application.Kind>(\n      this: this,\n      aspect: InAspect<Instance, Kind>\n  ) => InAspect.Application.Result<Instance, To, Kind> | undefined;\n\n  constructor(\n      src: InControl<From>,\n      by: InControl.Converter<From, To>,\n  ) {\n    super();\n\n    let lastRev = 0;\n    let backward: From | undefined;\n\n    const on = new EventEmitter<[To, To]>();\n\n    this.on = on.on;\n\n    const converters = by(src, this);\n    const { applyAspect } = converters;\n\n    this._applyAspect = applyAspect\n        ? function<Instance, Kind extends InAspect.Application.Kind>(\n            this: InConverted<From, To>,\n            aspect: InAspect<Instance, Kind>,\n        ) {\n          return (\n              applyAspect.call(converters, aspect) || convertAspect.call(this, aspect)\n          ) as InAspect.Application.Result<Instance, To, Kind> | undefined;\n        }\n        : convertAspect;\n\n    this._it = trackValue([converters.set(src.it), 0]);\n    this._it.on(([newValue], [oldValue]) => {\n      if (newValue !== oldValue) {\n        on.send(newValue, oldValue);\n      }\n    }).whenOff(reason => on.done(reason));\n    src.on(value => {\n      if (value !== backward) {\n        this._it.it = [converters.set(value), ++lastRev];\n      }\n    }).whenOff(reason => this.done(reason));\n    this._it.on(([value, rev]) => {\n      if (rev !== lastRev) {\n        lastRev = rev;\n        backward = converters.get(value);\n        try {\n          src.it = backward;\n        } finally {\n          backward = undefined;\n        }\n      }\n    });\n\n    function convertAspect<Instance, Kind extends InAspect.Application.Kind>(\n        this: InConverted<From, To>,\n        aspect: InAspect<Instance, Kind>,\n    ): InAspect.Application.Result<Instance, To, Kind> | undefined {\n\n      const applied: InAspect.Applied<any, any> = src._aspect(aspect);\n\n      return applied.convertTo<Instance>(this as any) as InAspect.Application.Result<Instance, To, Kind> | undefined;\n    }\n  }\n\n  get it(): To {\n    return this._it.it[0];\n  }\n\n  set it(value: To) {\n\n    const [prevValue, prevRev] = this._it.it;\n\n    if (value !== prevValue) {\n      this._it.it = [value, prevRev + 1];\n    }\n  }\n\n  done(reason?: any): this {\n    this._it.done(reason);\n    return this;\n  }\n\n}\n","/**\n * @module input-aspects\n */\nimport { AfterEvent, AfterEvent__symbol, EventKeeper, EventSender, OnEvent, OnEvent__symbol } from 'fun-events';\nimport { InAspect, InAspect__symbol } from '../aspect';\nimport { inAspectNull, inAspectValue } from '../aspect.impl';\nimport { InControl } from '../control';\n\nconst InContainer__aspect: InAspect<InContainer<any> | null, 'container'> = {\n  applyTo() {\n    return inAspectNull;\n  },\n};\n\n/**\n * An input control containing other controls.\n *\n * Container is available as aspect of itself.\n *\n * @category Control\n * @typeparam Value  Input value type.\n */\nexport abstract class InContainer<Value> extends InControl<Value> {\n\n  static get [InAspect__symbol](): InAspect<InContainer<any> | null, 'container'> {\n    return InContainer__aspect;\n  }\n\n  /**\n   * Controls of this input container.\n   */\n  abstract readonly controls: InContainerControls;\n\n  protected _applyAspect<Instance, Kind extends InAspect.Application.Kind>(\n      aspect: InAspect<Instance, Kind>,\n  ): InAspect.Application.Result<Instance, Value, Kind> | undefined {\n    return aspect === InContainer__aspect as InAspect<any>\n        ? inAspectValue(this) as InAspect.Application.Result<Instance, Value, Kind>\n        : undefined;\n  }\n\n}\n\nexport namespace InContainer {\n\n  /**\n   * Input controls container entry.\n   *\n   * This is a tuple containing control key and control itself.\n   *\n   * Container implementations may apply limitations on the type of keys and input values they support.\n   *\n   * @typeparam L  Input container layout interface.\n   */\n  export type Entry = readonly [PropertyKey, InControl<any>];\n\n  /**\n   * A snapshot of input controls within container.\n   *\n   * Extends an `Iterable` interface by iterating over all nested controls.\n   */\n  export interface Snapshot extends Iterable<InControl<any>> {\n\n    [Symbol.iterator](): IterableIterator<InControl<any>>;\n\n    /**\n     * Iterates over nested control entries.\n     *\n     * @returns An iterable iterator over entries.\n     */\n    entries(): IterableIterator<InContainer.Entry>;\n\n  }\n\n}\n\n/**\n * Controls of input container.\n *\n * Allows to track container contents. I.e. nested controls, their additions and removal.\n *\n * Implements `EventSender` interface by sending arrays of added and removed control entries.\n *\n * Implements `EventKeeper` interface by sending container contents instance each time it is changed.\n *\n * @category Control\n */\nexport abstract class InContainerControls\n     implements EventSender<[InContainer.Entry[], InContainer.Entry[]]>, EventKeeper<[InContainer.Snapshot]> {\n\n  /**\n   * An `OnEvent` sender of container updates.\n   *\n   * Sends two arrays on each container update: the first one contains added control entries, while the second one\n   * contains removed control entries.\n   *\n   * The `[OnEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly on: OnEvent<[InContainer.Entry[], InContainer.Entry[]]>;\n\n  get [OnEvent__symbol](): OnEvent<[InContainer.Entry[], InContainer.Entry[]]> {\n    return this.on;\n  }\n\n  /**\n   * An `AfterEvent` keeper of input container contents.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly read: AfterEvent<[InContainer.Snapshot]>;\n\n  get [AfterEvent__symbol](): AfterEvent<[InContainer.Snapshot]> {\n    return this.read;\n  }\n\n}\n\ndeclare module '../aspect' {\n\n  export namespace InAspect.Application {\n\n    export interface Map<OfInstance, OfValue> {\n\n      /**\n       * Input controls container application type.\n       */\n      container(): InContainer<OfValue>;\n\n    }\n\n  }\n\n}\n","/**\n * @module input-aspects\n */\nimport {\n  AfterEvent,\n  AfterEvent__symbol,\n  afterEventBy,\n  EventEmitter,\n  EventKeeper,\n  EventSender,\n  eventSupply,\n  EventSupply,\n  OnEvent,\n  OnEvent__symbol,\n} from 'fun-events';\nimport { InAspect, InAspect__symbol } from '../aspect';\nimport { inAspectValue } from '../aspect.impl';\nimport { InContainer } from './container.control';\n\nconst InParents__aspect: InAspect<InParents> = {\n  applyTo(): InAspect.Applied<InParents> {\n    return inAspectValue(new InControlParents());\n  }\n};\n\n/**\n * Parents of input control.\n *\n * Reflects all containers the control belongs to. Note that component may belong to multiple containers. Or even\n * to the same container multiple times.\n *\n * Implements `EventSender` interface by sending arrays of parent entries the control is added to and removed from.\n *\n * Implements `EventKeeper` interface by sending a snapshot of all parents each time it is updated.\n *\n * @category Aspect\n */\nexport abstract class InParents\n    implements EventKeeper<[Iterable<InParents.Entry>]>, EventSender<[InParents.Entry[], InParents.Entry[]]> {\n\n  static get [InAspect__symbol](): InAspect<InParents> {\n    return InParents__aspect;\n  }\n\n  /**\n   * An `OnEvent` sender of parent updates.\n   *\n   * Sends two arrays on each parents update: the first one contains added parent entries, while the second one\n   * contains removed parent entries.\n   *\n   * The `[OnEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly on: OnEvent<[InParents.Entry[], InParents.Entry[]]>;\n\n  get [OnEvent__symbol](): OnEvent<[InParents.Entry[], InParents.Entry[]]> {\n    return this.on;\n  }\n\n  /**\n   * An `AfterEvent` keeper of control parents.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly read: AfterEvent<[InParents.All]>;\n\n  get [AfterEvent__symbol](): AfterEvent<[InParents.All]> {\n    return this.read;\n  }\n\n  /**\n   * Adds the input control to the given parent container under the given key.\n   *\n   * @param entry  Parent container entry.\n   *\n   * @returns A parent container supply. Removes the control from the parent container once cut off.\n   */\n  abstract add(entry: InParents.Entry): EventSupply;\n\n}\n\nexport namespace InParents {\n\n  /**\n   * Parent container entry of input control.\n   */\n  export interface Entry {\n\n    /**\n     * Parent container.\n     */\n    readonly parent: InContainer<any>;\n\n  }\n\n  /**\n   * All control parents as iterable instance.\n   */\n  export interface All extends Iterable<Entry> {\n\n    [Symbol.iterator](): IterableIterator<Entry>;\n\n  }\n\n}\n\nclass InControlParents extends InParents {\n\n  private readonly _map = new Map<InParents.Entry, EventSupply>();\n  private readonly _on = new EventEmitter<[InParents.Entry[], InParents.Entry[]]>();\n  readonly read: AfterEvent<[InParents.All]>;\n\n  constructor() {\n    super();\n\n    const map = this._map;\n\n    this.read = afterEventBy(\n        this._on.on.thru(\n            allParents,\n        ),\n        () => [allParents()]);\n\n    function allParents(): IterableIterator<InParents.Entry> {\n      return map.keys();\n    }\n  }\n\n  get on() {\n    return this._on.on;\n  }\n\n  add(entry: InParents.Entry): EventSupply {\n\n    const existingSupply = this._map.get(entry);\n\n    if (existingSupply) {\n      // Parent entry already added. Doing nothing\n      return existingSupply;\n    }\n\n    // Adding new entry\n    const supply = eventSupply(() => {\n      this._map.delete(entry);\n      this._on.send([], [entry]);\n    });\n\n    this._map.set(entry, supply);\n    this._on.send([entry], []);\n\n    return supply;\n  }\n\n}\n","/**\n * @module input-aspects\n */\nimport { AfterEvent, DomEventDispatcher } from 'fun-events';\nimport { InAspect, InAspect__symbol } from './aspect';\nimport { inAspectNull, inAspectValue } from './aspect.impl';\nimport { InControl } from './control';\n\nconst InElement__aspect: InAspect<InElement<any> | null, 'element'> = {\n  applyTo() {\n    return inAspectNull;\n  },\n};\n\n/**\n * HTML input element control.\n *\n * It is also available as aspect of itself and converted controls. It is not available as aspect of other controls.\n *\n * @category Control\n * @typeparam Value  Input value type.\n * @typeparam Elt  A type of input HTML element.\n */\nexport abstract class InElement<Value, Elt = HTMLElement> extends InControl<Value> {\n\n  /**\n   * HTML input element this control is based on.\n   */\n  abstract readonly element: Elt;\n\n  /**\n   * An `AfterEvent` keeper of user input.\n   */\n  abstract readonly input: AfterEvent<[InElement.Input<Value>]>;\n\n  /**\n   * DOM event dispatcher of this element.\n   */\n  abstract readonly events: DomEventDispatcher;\n\n  static get [InAspect__symbol](): InAspect<InElement<any> | null, 'element'> {\n    return InElement__aspect;\n  }\n\n  protected _applyAspect<Instance, Kind extends InAspect.Application.Kind>(\n      aspect: InAspect<Instance, Kind>\n  ): InAspect.Application.Result<Instance, Value, Kind> | undefined {\n    return aspect === InElement__aspect as InAspect<any, any>\n        ? inAspectValue(this) as InAspect.Application.Result<Instance, Value, Kind>\n        : undefined;\n  }\n\n}\n\nexport namespace InElement {\n\n  /**\n   * User input.\n   *\n   * @typeparam Value  Input value type.\n   */\n  export interface Input<Value> {\n\n    /**\n     * The value user entered.\n     */\n    value: Value;\n\n    /**\n     * An event caused the value to be applied.\n     *\n     * The value has been applied programmatically if missing.\n     */\n    event?: Event;\n\n  }\n\n}\n\ndeclare module './aspect' {\n\n  export namespace InAspect.Application {\n\n    export interface Map<OfInstance, OfValue> {\n\n      /**\n       * Input element application type.\n       */\n      element(): InElement<OfValue>;\n\n    }\n\n  }\n\n}\n","/**\n * @module input-aspects\n */\nimport { nextArgs, nextSkip, valuesProvider } from 'call-thru';\nimport {\n  afterAll,\n  afterEach,\n  AfterEvent,\n  AfterEvent__symbol,\n  afterEventBy,\n  afterSupplied,\n  afterThe,\n  EventEmitter,\n  EventKeeper,\n  EventSender,\n  eventSupply,\n  EventSupply,\n  OnEvent,\n  OnEvent__symbol,\n  trackValue,\n  ValueTracker,\n} from 'fun-events';\nimport { InAspect, InAspect__symbol } from '../aspect';\nimport { inAspectValue } from '../aspect.impl';\nimport { InParents } from '../container/parents.aspect';\nimport { InControl } from '../control';\nimport { InElement } from '../element.control';\n\nconst InMode__aspect: InAspect<InMode> = {\n\n  applyTo<Value>(control: InControl<Value>): InAspect.Applied<InMode> {\n    return inAspectValue(new InControlMode(control));\n  }\n\n};\n\n/**\n * Input mode aspect of control.\n *\n * Control can be either enabled, disabled, or readonly.\n *\n * Each control maintains its own state, while nested controls respect container ones. I.e. when container is disabled\n * all nested ones are also disabled. When container is readonly, all nested ones are also readonly, unless explicitly\n * disabled.\n *\n * When applied to input element this aspect maintains its `disabled` and `readonly` attributes (not properties!).\n *\n * Implements `EventSender` interface by sending new and old mode values on each update.\n *\n * Implements `EventKeeper` interface by sending actual mode value.\n *\n * @category Aspect\n */\nexport abstract class InMode implements EventSender<[InMode.Value, InMode.Value]>, EventKeeper<[InMode.Value]> {\n\n  static get [InAspect__symbol](): InAspect<InMode> {\n    return InMode__aspect;\n  }\n\n  /**\n   * An `OnEvent` sender of input mode updates. Sends a new mode value along with old one as second parameter.\n   *\n   * The `[OnEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly on: OnEvent<[InMode.Value, InMode.Value]>;\n\n  get [OnEvent__symbol](): OnEvent<[InMode.Value, InMode.Value]> {\n    return this.on;\n  }\n\n  /**\n   * An `AfterEvent` keeper of input mode.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly read: AfterEvent<[InMode.Value]>;\n\n  get [AfterEvent__symbol](): AfterEvent<[InMode.Value]> {\n    return this.read;\n  }\n\n  /**\n   * Own input mode tracker.\n   */\n  abstract readonly own: ValueTracker<InMode.Value>;\n\n  /**\n   * Checks whether control in the given `mode` has data to submit.\n   *\n   * @param mode  Input control mode to check.\n   *\n   * @returns `true` if control in the given `mode` has data to submit, or `false` otherwise.\n   */\n  static hasData(mode: InMode.Value): boolean {\n    return mode !== 'off' && mode[0] !== '-';\n  }\n\n  /**\n   * Derives input mode from another `source`.\n   *\n   * If the `source` mode is disabled, this one would be disabled too. If the `source` mode is read-only, then this one\n   * would be read-only, unless disabled already.\n   *\n   * @param source  A source to derive input mode from.\n   *\n   * @returns Derived input mode supply. Disables `source` mode derivation once cut off.\n   */\n  abstract derive(source: EventKeeper<[InMode.Value]>): EventSupply;\n\n  /**\n   * Unregisters all receivers.\n   *\n   * @param reason  Optional reason.\n   *\n   * @returns `this` instance.\n   */\n  done(reason?: any): this {\n    this.own.done(reason);\n    return this;\n  }\n\n}\n\nexport namespace InMode {\n\n  /**\n   * Possible input control mode value:\n   *\n   * - `on` when control is writable. This is the default.\n   * - `ro` when control is read-only. Such control can not be edited, but still can be submitted.\n   * - `off` when control is disabled. Such control is not submitted.\n   * - `-on` when control is writable, but not submitted.\n   * - `-ro` when control is read-only, but not submitted.\n   */\n  export type Value = 'on' | 'ro' | 'off' | '-on' | '-ro';\n\n}\n\nclass OwnModeTracker extends ValueTracker<InMode.Value> {\n\n  private readonly _tracker: ValueTracker<InMode.Value>;\n\n  constructor(element?: InElement<any>) {\n    super();\n    this._tracker = trackValue(element ? initialMode(element.element) : 'on');\n  }\n\n  get on() {\n    return this._tracker.on;\n  }\n\n  get it(): InMode.Value {\n    return this._tracker.it;\n  }\n\n  set it(value: InMode.Value) {\n    switch (value) {\n      case 'off':\n      case 'ro':\n      case '-on':\n      case '-ro':\n        break;\n      default:\n        value = 'on'; // Correct the value.\n    }\n\n    this._tracker.it = value;\n  }\n\n  done(reason?: any): this {\n    this._tracker.done(reason);\n    return this;\n  }\n\n}\n\nclass DerivedModes {\n\n  readonly read: AfterEvent<[InMode.Value]>;\n  private readonly _all = new Set<AfterEvent<[InMode.Value]>>();\n  private readonly _on = new EventEmitter<[]>();\n\n  constructor() {\n\n    const sources: AfterEvent<[Set<AfterEvent<[InMode.Value]>>]> = afterEventBy(\n        this._on.on.thru(() => this._all),\n        valuesProvider(this._all),\n    );\n\n    this.read = sources.keep.dig(set => afterEach(...set).keep.thru(mergeModes));\n  }\n\n  add(source: EventKeeper<[InMode.Value]>): EventSupply {\n\n    const src = afterSupplied(source);\n    const supply = eventSupply(() => {\n      this._all.delete(src);\n      this._on.send();\n    });\n\n    this._all.add(src);\n    this._on.send();\n\n    return supply;\n  }\n\n}\n\nclass InControlMode extends InMode {\n\n  readonly own: OwnModeTracker;\n  readonly read: AfterEvent<[InMode.Value]>;\n  readonly on: OnEvent<[InMode.Value, InMode.Value]>;\n  private readonly _derived = new DerivedModes();\n\n  constructor(control: InControl<any>) {\n    super();\n\n    const element = control.aspect(InElement);\n\n    this.own = new OwnModeTracker(element);\n    this.derive(control.aspect(InParents).read.keep.dig_(parentsMode));\n\n    let last: InMode.Value = 'on';\n\n    this.read = afterEventBy<[InMode.Value]>(\n        afterAll({\n          derived: this._derived.read,\n          own: this.own,\n        }).thru(({ derived: [derived], own: [own] }) => {\n\n          let next: InMode.Value;\n\n          if (own === 'off' || derived === 'off') {\n            next = 'off';\n          } else {\n\n            let off = false;\n\n            if (own[0] === '-') {\n              off = true;\n              own = own.substring(1) as InMode.Value;\n            }\n            if (derived[0] === '-') {\n              off = true;\n              derived = derived.substring(1) as InMode.Value;\n            }\n            next = derived === 'ro' ? 'ro' : own;\n            if (off) {\n              next = '-' + next as InMode.Value;\n            }\n          }\n\n          return last === next ? nextSkip() : nextArgs(last = next);\n        }),\n        valuesProvider<[InMode.Value]>(last),\n    );\n    if (element) {\n      this.read(value => applyMode(element.element, value));\n    }\n\n    let lastUpdate: InMode.Value = 'on';\n\n    this.on = this.read.thru(value => {\n\n      const old = lastUpdate;\n\n      return old === value ? nextSkip() : nextArgs(lastUpdate = value, old);\n    });\n  }\n\n  derive(source: EventKeeper<[InMode.Value]>): EventSupply {\n    return this._derived.add(source);\n  }\n\n}\n\nfunction initialMode(element: HTMLElement): InMode.Value {\n  return element.getAttribute('disabled') != null\n      ? 'off' : (\n          element.getAttribute('readonly') != null ? 'ro' : 'on'\n      );\n}\n\nfunction applyMode(element: HTMLElement, value: InMode.Value) {\n  switch (value) {\n    case 'off':\n      element.setAttribute('disabled', '');\n      break;\n    case 'ro':\n    case '-ro':\n      // Workaround of https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/12087679/\n      element.setAttribute('disabled', '');\n      element.removeAttribute('disabled');\n      element.setAttribute('readonly', '');\n      break;\n    default:\n      // Workaround of https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/12087679/\n      element.setAttribute('disabled', '');\n      element.removeAttribute('disabled');\n      // Workaround of https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/12087679/\n      element.setAttribute('readonly', '');\n      element.removeAttribute('readonly');\n  }\n}\n\nfunction parentsMode(parents: InParents.All): AfterEvent<[InMode.Value]> {\n\n  const parentList = [...parents];\n\n  if (!parentList.length) {\n    return afterThe('on');\n  }\n\n  const parentModes = parentList.map(({ parent }) => parent.aspect(InMode));\n\n  return afterEach(...parentModes).keep.thru_(mergeModes);\n}\n\nfunction mergeModes(...modes: [InMode.Value][]) {\n\n  let ro = false;\n  let off = false;\n\n  for (const [mode] of modes) {\n    switch (mode) {\n      case 'off':\n        return 'off';\n      case 'ro':\n        ro = true;\n        break;\n      case '-on':\n        off = true;\n        break;\n      case '-ro':\n        off = true;\n        ro = true;\n        break;\n    }\n  }\n\n  return off ? (ro ? '-ro' : '-on') : (ro ? 'ro' : 'on');\n}\n","/**\n * @module input-aspects\n */\nimport { NextArgs, nextArgs, noop } from 'call-thru';\nimport { afterAll, AfterEvent } from 'fun-events';\nimport { InAspect, InAspect__symbol } from '../aspect';\nimport { InControl } from '../control';\nimport { InMode } from './mode.aspect';\n\n/**\n * A data aspect of the input.\n *\n * Represents input control data that will be submitted.\n *\n * Input data is typically the same as control value with respect to {@link InMode input mode}. I.e. when input mode is\n * `off` the data is `undefined`.\n *\n * An aspect interface is an `AfterEvent` keeper of input data.\n *\n * @category Aspect\n * @typeparam Value  Input value type.\n */\nexport type InData<Value> = AfterEvent<[InData.DataType<Value>?]>;\n\nconst InData__symbol: Aspect = {\n\n  applyTo<Value>(control: InControl<Value>): Applied<Value> {\n\n    const instance: InData<Value> = afterAll({\n      value: control,\n      mode: control.aspect(InMode),\n    }).keep.thru(\n        ({ value: [value], mode: [mode] }) => dataByValue(value, mode),\n    );\n\n    return {\n      instance,\n      convertTo: noop,\n    };\n  }\n\n};\n\nfunction dataByValue<Value, NextReturn>(\n    value: Value,\n    mode: InMode.Value,\n): NextArgs<[InData.DataType<Value>?], NextReturn> {\n  return InMode.hasData(mode) ? nextArgs(value as InData.DataType<Value>) : nextArgs();\n}\n\n/**\n * Input data aspect.\n */\ninterface Aspect extends InAspect<InData<any>, 'data'> {\n\n  applyTo<Value>(control: InControl<Value>): Applied<Value>;\n\n}\n\n/**\n * An input data aspect applied to control.\n */\ninterface Applied<Value> extends InAspect.Applied<InData<Value>, InData<any>> {\n\n  convertTo<To>(target: InControl<To>): Applied<To> | undefined;\n\n}\n\nexport const InData = {\n\n  get [InAspect__symbol](): InAspect<InData<any>, 'data'> {\n    return InData__symbol;\n  }\n\n};\n\n/**\n * @category Aspect\n */\nexport namespace InData {\n\n  /**\n   * Input data type.\n   *\n   * This is either a partial value (for the object), or the value itself (for everything else).\n   *\n   * @typeparam Value  Input value type.\n   */\n  export type DataType<Value> =\n      | (Value extends object ? { [K in keyof Value]?: DataType<Value[K]> } : Value)\n      | undefined;\n\n}\n\ndeclare module '../aspect' {\n\n  export namespace InAspect.Application {\n\n    export interface Map<OfInstance, OfValue> {\n\n      /**\n       * Input data aspect application type.\n       */\n      data(): InData<OfValue>;\n\n    }\n\n  }\n\n}\n","/**\n * @module input-aspects\n */\nimport { itsEach, itsIterable, mapIt, overEntries } from 'a-iterable';\nimport { nextArgs, noop } from 'call-thru';\nimport {\n  afterAll,\n  AfterEvent,\n  AfterEvent__symbol,\n  afterEventBy,\n  afterThe,\n  EventEmitter,\n  EventKeeper,\n  EventSender,\n  eventSupply,\n  EventSupply,\n  OnEvent,\n  OnEvent__symbol,\n  trackValue,\n  ValueTracker,\n} from 'fun-events';\nimport { InAspect, InAspect__symbol } from '../aspect';\nimport { InControl } from '../control';\nimport { InData, InMode } from '../data';\nimport { InContainer, InContainerControls } from './container.control';\nimport { InParents } from './parents.aspect';\n\n/**\n * A group of input controls.\n *\n * Nested controls are identified by keys and can be added and removed via `controls` property.\n *\n * Group value (called model) is an object formed by nested control values. The model property value is the one of the\n * control with the same key, if present. When model is updated corresponding controls are also updated.\n *\n * @category Control\n * @typeparam Model  Group model type, i.e. its value type.\n */\nexport abstract class InGroup<Model extends object> extends InContainer<Model> {\n\n  /**\n   * Input group controls.\n   */\n  abstract readonly controls: InGroupControls<Model>;\n\n}\n\nexport namespace InGroup {\n\n  /**\n   * Input group controls.\n   *\n   * This is a read-only object containing an input control per each model property under the same key.\n   *\n   * @typeparam Model  Group model type, i.e. its value type.\n   */\n  export type Controls<Model> = {\n    readonly [K in keyof Model]?: InControl<Model[K]>;\n  };\n\n  /**\n   * Input controls group entry.\n   *\n   * This is a tuple containing model key and corresponding control.\n   *\n   * @typeparam Model  Group model type, i.e. its value type.\n   */\n  export type Entry<Model, K extends keyof Model = any> = readonly [K, InControl<Model[K]>];\n\n  /**\n   * A snapshot of input control group controls.\n   *\n   * @typeparam Model  Group model type, i.e. its value type.\n   */\n  export interface Snapshot<Model> extends InContainer.Snapshot {\n\n    entries(): IterableIterator<Entry<Model>>;\n\n    /**\n     * Returns input control with the given key, if present.\n     *\n     * @param key  Control key, i.e. corresponding model property key.\n     *\n     * @returns Target control, or `undefined` if there is no control set for this key.\n     */\n    get<K extends keyof Model>(key: K): InGroup.Controls<Model>[K] | undefined;\n\n  }\n\n}\n\n/**\n * Input group controls.\n *\n * @category Control\n * @typeparam Model  Group model type, i.e. its value type.\n */\nexport abstract class InGroupControls<Model>\n    extends InContainerControls\n    implements EventSender<[InGroup.Entry<Model>[], InGroup.Entry<Model>[]]>, EventKeeper<[InGroup.Snapshot<Model>]> {\n\n  abstract readonly on: OnEvent<[InGroup.Entry<Model>[], InGroup.Entry<Model>[]]>;\n\n  abstract readonly read: AfterEvent<[InGroup.Snapshot<Model>]>;\n\n  /**\n   * Sets input control with the given key.\n   *\n   * Replaces existing control if already present.\n   *\n   * @param key  A key of input control to set. I.e. corresponding model property key.\n   * @param control  Input control to add, or `undefined` to remove control.\n   *\n   * @returns `this` controls instance.\n   */\n  abstract set<K extends keyof Model>(key: K, control: InControl<Model[K]> | undefined): this;\n\n  /**\n   * Sets multiple input controls at a time.\n   *\n   * @param controls  A map of controls under their keys. A value can be `undefined` to remove corresponding control.\n   *\n   * @returns `this` controls instance.\n   */\n  abstract set(controls: InGroup.Controls<Model>): this;\n\n  /**\n   * Removes input control with the given key.\n   *\n   * Calling this method is the same as calling `set(key, undefined)`\n   *\n   * @param key  A key of input control to remove. I.e. corresponding model property key.\n   *\n   * @returns `this` controls instance.\n   */\n  remove(key: keyof Model): this {\n    return this.set(key, undefined);\n  }\n\n}\n\nexport interface InGroupControls<Model> {\n\n  readonly [OnEvent__symbol]: OnEvent<[InGroup.Entry<Model>[], InGroup.Entry<Model>[]]>;\n\n  readonly [AfterEvent__symbol]: AfterEvent<[InGroup.Snapshot<Model>]>;\n\n}\n\ntype ControlEntry = readonly [InControl<any>, EventSupply]; // When event supply is done the control is unused\n\nconst controlReplacedReason = {};\n\nclass InGroupSnapshot<Model> implements InGroup.Snapshot<Model> {\n\n  constructor(private readonly _map: Map<keyof Model, ControlEntry>) {\n  }\n\n  get<K extends keyof Model>(key: K): InGroup.Controls<Model>[K] | undefined {\n\n    const entry = this._map.get(key);\n\n    return entry && entry[0] as InGroup.Controls<Model>[K];\n  }\n\n  [Symbol.iterator](): IterableIterator<InControl<any>> {\n    return itsIterable(mapIt(this._map.values(), ([control]) => control));\n  }\n\n  entries(): IterableIterator<InGroup.Entry<Model>> {\n    return itsIterable(mapIt(this._map.entries(), ([key, [control]]) => [key, control]));\n  }\n\n}\n\nclass InGroupMap<Model extends object> {\n\n  readonly _supply = eventSupply();\n  private _map = new Map<keyof Model, ControlEntry>();\n  private _shot?: InGroupSnapshot<Model>;\n\n  constructor(private readonly _controls: InGroupControlControls<Model>) {\n  }\n\n  set<K extends keyof Model>(\n      key: K,\n      control: InControl<Model[K]> | undefined,\n      added: [keyof Model, ControlEntry][],\n      removed: [keyof Model, ControlEntry][],\n  ) {\n\n    const self = this;\n    const replaced = this._map.get(key);\n\n    if (control) {\n      if (replaced) {\n        if (replaced[0] === control) {\n          // Do not replace control with itself\n          return;\n        }\n        removed.push([key, replaced]);\n      }\n\n      const entry: ControlEntry = [control, eventSupply(reason => {\n        if (reason !== controlReplacedReason) {\n          self._controls.remove(key);\n        }\n      }).needs(self._supply)];\n\n      modify().set(key, entry);\n      added.push([key, entry]);\n    } else if (replaced) {\n      removed.push([key, replaced]);\n      modify().delete(key);\n    }\n    if (replaced) {\n      replaced[1].off(controlReplacedReason);\n    }\n\n    function modify(): Map<keyof Model, ControlEntry> {\n      if (self._shot) {\n\n        const map = new Map<keyof Model, ControlEntry>();\n\n        itsEach(self._map.entries(), ([k, e]) => map.set(k, e));\n        self._shot = undefined;\n        self._map = map;\n      }\n\n      return self._map;\n    }\n  }\n\n  snapshot(): InGroup.Snapshot<Model> {\n    return this._shot || (this._shot = new InGroupSnapshot<Model>(this._map));\n  }\n\n}\n\nclass InGroupControlControls<Model extends object> extends InGroupControls<Model> {\n\n  private readonly _map: InGroupMap<Model>;\n  private readonly _updates = new EventEmitter<[[keyof Model, ControlEntry][], [keyof Model, ControlEntry][]]>();\n  readonly on: OnEvent<[InGroup.Entry<Model>[], InGroup.Entry<Model>[]]>;\n  readonly read: AfterEvent<[InGroup.Snapshot<Model>]>;\n\n  constructor(private readonly _group: InGroupControl<Model>) {\n    super();\n\n    const self = this;\n\n    this._map = new InGroupMap<Model>(this);\n    this.on = this._updates.on.thru(\n        (added, removed) => nextArgs(\n            added.map(controlEntryToGroupEntry),\n            removed.map(controlEntryToGroupEntry)),\n    );\n    this.read = afterEventBy(\n        this._updates.on.thru(\n            () => this._map.snapshot(),\n        ),\n        () => [this._map.snapshot()]);\n    this._map._supply.needs(_group.read(applyModelToControls));\n\n    function applyModelToControls(model: Model) {\n      self.read.once(snapshot => {\n\n        const withValues = new Set<keyof Model>();\n\n        itsEach(overEntries(model), ([key, value]) => {\n          withValues.add(key);\n\n          const control = snapshot.get(key);\n\n          if (control) {\n            control.it = value;\n          }\n        });\n\n        itsEach(snapshot.entries(), ([key, control]) => {\n          if (!withValues.has(key)) {\n            control.it = undefined!;\n          }\n        });\n      });\n    }\n  }\n\n  set<K extends keyof Model>(\n      keyOrControls: K | InGroup.Controls<Model>,\n      newControl?: InControl<Model[K]> | undefined): this {\n\n    const group = this._group;\n    const added: [keyof Model, ControlEntry][] = [];\n    const removed: [keyof Model, ControlEntry][] = [];\n\n    if (typeof keyOrControls === 'object') {\n      itsEach(overEntries(keyOrControls), ([key, value]) => {\n        this._map.set(key, value, added, removed);\n      });\n    } else {\n      this._map.set(keyOrControls, newControl, added, removed);\n    }\n    if (added.length || removed.length) {\n      this._updates.send(added, removed);\n      if (added.length) {\n        applyControlsToModel();\n      }\n    }\n\n    return this;\n\n    function applyControlsToModel() {\n\n      let newModel: Model | undefined;\n\n      added.forEach(([key, [control, supply]]) => {\n        supply.needs(control.aspect(InParents).add({ parent: group }).needs(supply));\n\n        const value = control.it;\n\n        if (newModel) {\n          newModel[key] = value;\n        } else {\n\n          const model = group.it;\n\n          if (model[key] !== value) {\n            newModel = { ...model, [key]: value };\n          }\n        }\n      });\n\n      if (newModel) {\n        group.it = newModel;\n      }\n\n      added.forEach(([key, [control, supply]]) => {\n        supply.needs(control.read(value => {\n          if (group.it[key] !== value) {\n            group.it = {\n              ...group.it,\n              [key]: value,\n            };\n          }\n        }).needs(supply));\n      });\n    }\n  }\n\n}\n\nfunction controlEntryToGroupEntry<Model extends object>(\n    [key, [control]]: [keyof Model, ControlEntry],\n): InGroup.Entry<Model> {\n  return [key, control];\n}\n\nclass InGroupControl<Model extends object> extends InGroup<Model> {\n\n  private readonly _model: ValueTracker<Model>;\n  readonly controls: InGroupControlControls<Model>;\n\n  constructor(model: Model) {\n    super();\n    this._model = trackValue(model);\n    this.controls = new InGroupControlControls(this);\n  }\n\n  get on() {\n    return this._model.on;\n  }\n\n  get it() {\n    return this._model.it;\n  }\n\n  set it(value: Model) {\n    this._model.it = value;\n  }\n\n  done(reason?: any): this {\n    this._model.done(reason);\n    return this;\n  }\n\n  protected _applyAspect<Instance, Kind extends InAspect.Application.Kind>(\n      aspect: InAspect<Instance, Kind>,\n  ): InAspect.Application.Result<Instance, Model, Kind> | undefined {\n    if (aspect as InAspect<any> === InData[InAspect__symbol]) {\n      return {\n        instance: groupData(this),\n        convertTo: noop,\n      } as InAspect.Application.Result<any, any, any>;\n    }\n    return super._applyAspect(aspect);\n  }\n\n}\n\nfunction groupData<Model extends object>(group: InGroup<Model>): InData<Model> {\n  return afterAll({\n    cs: group.controls,\n    model: group,\n    mode: group.aspect(InMode),\n  }).keep.dig_(\n      readGroupData,\n  );\n}\n\nfunction readGroupData<Model extends object>(\n    {\n      cs: [controls],\n      model: [model],\n      mode: [mode],\n    }: {\n      cs: [InGroup.Snapshot<Model>];\n      model: [Model];\n      mode: [InMode.Value];\n    }\n): InData<Model> {\n  if (!InMode.hasData(mode)) {\n    return afterThe();\n  }\n\n  const csData: { [key in keyof Model]: InData<any> } = {} as any;\n\n  itsEach(controls.entries(), ([key, control]) => {\n    csData[key as keyof Model] = control.aspect(InData);\n  });\n\n  return afterAll(csData).keep.thru(controlsData => {\n\n    const data: Partial<Model> = { ...model };\n\n    itsEach(overEntries(controlsData), ([key, [controlData]]) => {\n      data[key] = controlData;\n    });\n\n    return data as InData.DataType<Model>;\n  });\n}\n\n/**\n * Constructs input controls group.\n *\n * @category Control\n * @typeparam Model  Group model type, i.e. its value type.\n * @param model  Initial model of the group.\n *\n * @returns New input controls group.\n */\nexport function inGroup<Model extends object>(model: Model): InGroup<Model> {\n  return new InGroupControl(model);\n}\n","/**\n * @module input-aspects\n */\nimport { AfterEvent, afterThe } from 'fun-events';\n\nconst _requireNothing: AfterEvent<[]> = /*#__PURE__*/ afterThe<[]>();\n\n/**\n * Input validator that requires nothing.\n *\n * @category Validation\n */\nexport function requireNothing(): AfterEvent<[]> {\n  return _requireNothing;\n}\n","/**\n * @module input-aspects\n */\nimport { nextArgs, NextArgs, valueProvider } from 'call-thru';\nimport { AfterEvent, afterSupplied, EventKeeper, isEventKeeper } from 'fun-events';\nimport { InControl } from '../control';\nimport { InValidation } from './validation.aspect';\n\n/**\n * Input validator.\n *\n * Validator can be added to input validation aspect using `InValidation.by()` method. After that all validation\n * messages it sends are reported by validation aspect. Multiple messages could be sent at a time. These messages\n * replace the previously sent ones. To report the absence of error just send an empty event without messages.\n *\n * This can be one either a validation messages event keeper, a function returning one and accepting input control\n * as its only parameter, or simple validator instance.\n *\n * @category Validation\n * @typeparam Value  Input value type.\n */\nexport type InValidator<Value> =\n    | EventKeeper<InValidation.Message[]>\n    | ((this: void, control: InControl<Value>) => EventKeeper<InValidation.Message[]>)\n    | InValidator.Simple<Value>;\n\nexport namespace InValidator {\n\n  /**\n   * Simple input validator.\n   *\n   * @typeparam Value  Input value type.\n   */\n  export interface Simple<Value> {\n\n    /**\n     * Validates the user input.\n     *\n     * This method is called each time input value changes. The returned messages then reported by input validation\n     * aspect.\n     *\n     * @param control  Input control to validate.\n     *\n     * @returns Either validation message, array of validation messages, or `null`/`unknown` to indicate their absence.\n     */\n    validate(control: InControl<Value>): InValidation.Message | InValidation.Message[] | null | undefined;\n\n  }\n\n}\n\n/**\n * Converts arbitrary input validator to normalized form.\n *\n * @category Validation\n * @typeparam Value  Input value type.\n * @param validator  Validator to convert.\n *\n * @returns A function accepting input control as its only parameter and returning an `AfterEvent` keeper of validation\n * messages.\n */\nexport function inValidator<Value>(\n    validator: InValidator<Value>\n): (this: void, control: InControl<Value>) => AfterEvent<InValidation.Message[]> {\n  if (isEventKeeper(validator)) {\n    return valueProvider(afterSupplied(validator));\n  }\n  if (typeof validator === 'function') {\n    return control => afterSupplied(validator(control));\n  }\n  return control => control.read.keep.thru(simpleValidator(control, validator));\n}\n\nfunction simpleValidator<Value>(\n    control: InControl<Value>,\n    validator: InValidator.Simple<Value>,\n): <NextReturn>(value: Value) => NextArgs<InValidation.Message[], NextReturn> | InValidation.Message {\n  return () => {\n\n    const messages = validator.validate(control);\n\n    return messages == null\n        ? nextArgs()\n        : Array.isArray(messages)\n            ? nextArgs(...messages)\n            : messages;\n  };\n}\n","import { flatMapIt, itsEach } from 'a-iterable';\nimport { asis, noop, valuesProvider } from 'call-thru';\nimport {\n  AfterEvent,\n  AfterEvent__symbol,\n  afterEventBy,\n  afterSupplied,\n  EventEmitter,\n  EventKeeper,\n  EventSupply,\n  eventSupply,\n} from 'fun-events';\nimport { InControl } from '../control';\nimport { InValidation } from './validation.aspect';\nimport { inValidator, InValidator } from './validator';\n\nconst dontRemove = {};\n\n/**\n * @internal\n */\nexport class InValidationMessages<Value> implements EventKeeper<InValidation.Message[]> {\n\n  readonly [AfterEvent__symbol]: AfterEvent<InValidation.Message[]>;\n  readonly from: (this: void, validator: InValidator<Value>) => EventSupply;\n\n  constructor(control: InControl<Value>) {\n\n    const emitter = new EventEmitter<InValidation.Message[]>();\n    const validators = new Map<AfterEvent<InValidation.Message[]>, EventSupply>();\n    const validatorMessages = new Map<InValidator<Value>, InValidation.Message[]>();\n    // Sends validation messages\n    let send: () => void = noop;\n    // Validates using the given validator\n    let validate: (validator: AfterEvent<InValidation.Message[]>, validatorSupply: EventSupply) => void = noop;\n\n    this[AfterEvent__symbol] = afterEventBy(receiver => {\n\n      // A validation messages supply\n      const resultSupply = afterSupplied(emitter, valuesProvider())(receiver).whenOff(() => {\n        send = noop; // Disable message sending\n        validate = noop; // Disable validation\n      });\n\n      // Enable validation using the given validator\n      validate = (validator: AfterEvent<InValidation.Message[]>, validatorSupply: EventSupply) => {\n\n        const supply = validator(\n            (...messages) => {\n              if (messages.length) {\n                // Replace messages reported by validator.\n                validatorMessages.set(validator, messages);\n              } else if (!validatorMessages.delete(validator)) {\n                // Nothing removed. No need to send messages\n                return;\n              }\n              send(); // Send all messages.\n            },\n        )\n            .needs(validatorSupply)\n            .whenOff(reason => {\n              if (reason !== dontRemove) {\n                validatorSupply.off(reason);\n              }\n              if (validatorMessages.delete(validator)) {\n                // Send all messages only if the removed validator reported some messages earlier\n                send();\n              }\n            });\n\n        resultSupply.whenOff(() => supply.off(dontRemove));\n      };\n\n      // Enable each validator\n      itsEach(validators.entries(), ([validator, validatorSupply]) => validate(validator, validatorSupply));\n\n      // Enable message sending\n      send = () => {\n        emitter.send(...allMessages());\n      };\n\n      // Send messages if present already\n      if (validatorMessages.size) {\n        send();\n      }\n    }).share();\n\n    this.from = validator => {\n\n      const source = inValidator(validator)(control);\n      const validatorSupply = eventSupply(() => {\n        validators.delete(source);\n      });\n\n      validators.set(source, validatorSupply);\n      validate(source, validatorSupply); // Start validation using validator\n\n      return validatorSupply;\n    };\n\n    function allMessages(): Iterable<InValidation.Message> {\n      return flatMapIt(validatorMessages.values(), asis);\n    }\n  }\n\n}\n","/**\n * @module input-aspects\n */\nimport { flatMapIt, itsEach, mapIt, overEntries } from 'a-iterable';\nimport { asis, nextArgs } from 'call-thru';\nimport { afterEach, AfterEvent, AfterEvent__symbol, afterSupplied, EventKeeper, EventSupply } from 'fun-events';\nimport { InAspect, InAspect__symbol } from '../aspect';\nimport { InContainer } from '../container';\nimport { InControl } from '../control';\nimport { requireAll } from './require-all.validator';\nimport { InValidator } from './validator';\nimport { InValidationMessages } from './validator.impl';\n\nconst InValidation__aspect: Aspect = {\n  applyTo<Value>(control: InControl<Value>): Applied<Value> {\n\n    const instance = new InControlValidation(control);\n\n    return {\n      instance,\n      convertTo<To>(target: InControl<To>) {\n        return convert(instance, target);\n      },\n    };\n\n    function convert<To>(\n        from: InControlValidation<any>,\n        to: InControl<To>,\n    ): Applied<To> {\n\n      const converted = new InControlValidation<To>(to);\n\n      converted.by(from._messages);\n\n      return {\n        instance: converted,\n        convertTo<CC>(target: InControl<CC>) {\n          return convert<CC>(converted, target);\n        },\n      };\n    }\n  },\n};\n\n/**\n * Input validation aspect.\n */\ninterface Aspect extends InAspect<InValidation<any>, 'validation'> {\n\n  applyTo<Value>(control: InControl<Value>): Applied<Value>;\n\n}\n\n/**\n * An input validation aspect applied to control.\n */\ninterface Applied<Value> extends InAspect.Applied<InValidation<Value>, InValidation<any>> {\n\n  convertTo<To>(target: InControl<To>): Applied<To>;\n\n}\n\n/**\n * Validation aspect of the input.\n *\n * Reports validation messages sent by registered validators. To register validator call a `InValidation.by()` method.\n *\n * Implements an `EventKeeper` interface by sending validation result whenever validation messages reported.\n *\n * A validation aspect of converted control reports all messages from original control in addition to its own.\n *\n * A validation aspect of input controls container reports all messages from nested controls in addition to its own.\n *\n * @category Aspect\n * @typeparam Value  Input value type.\n */\nexport abstract class InValidation<Value> implements EventKeeper<[InValidation.Result]> {\n\n  /**\n   * Input validation aspect.\n   */\n  static get [InAspect__symbol](): InAspect<InValidation<any>, 'validation'> {\n    return InValidation__aspect;\n  }\n\n  get [AfterEvent__symbol](): AfterEvent<[InValidation.Result]> {\n    return this.read;\n  }\n\n  /**\n   * An `AfterEvent` keeper of input validation result.\n   *\n   * An `[AfterEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly read: AfterEvent<[InValidation.Result]>;\n\n  /**\n   * Validates the input using the given validators.\n   *\n   * Messages sent by each registered validator are handled independently. This means that every time the event received\n   * from validator, it replaces the list of validation messages reported previously by the same validator. But it never\n   * affects messages received from other validators.\n   *\n   * @param validators  Input validators to use.\n   *\n   * @returns Validators supply. Removes validators and their messages once cut off.\n   */\n  abstract by(...validators: InValidator<Value>[]): EventSupply;\n\n}\n\nexport namespace InValidation {\n\n  /**\n   * Input validation messages.\n   *\n   * This is a map of key/value pairs, where the key is a message code, while the value is arbitrary. Message codes\n   * are ignored when their values are falsy (i.e. `!message[code] === true`).\n   *\n   * Some message codes are treated specially by convenience.\n   */\n  export interface Message {\n\n    [code: string]: any;\n\n    /**\n     * Missing input.\n     */\n    missing?: any;\n\n    /**\n     * The message with this code would be reported by `requireNeeded()` validator despite there are messages with\n     * `missing` code.\n     */\n    despiteMissing?: any;\n\n    /**\n     * Incomplete input, except missing one.\n     */\n    incomplete?: any;\n\n    /**\n     * The message with this code would be reported by `requireNeeded()` validator despite there are messages with\n     * `incomplete` code.\n     */\n    despiteIncomplete?: any;\n\n    /**\n     * Invalid input, except missing or incomplete one.\n     */\n    invalid?: any;\n\n    /**\n     * Submit failure.\n     *\n     * This is set by input submit aspect.\n     */\n    submit?: any;\n\n  }\n\n  /**\n   * Input validation result.\n   *\n   * Combines messages sent by all registered validators.\n   *\n   * Implements `Iterable` interface by iterating over all validation messages.\n   */\n  export interface Result extends Iterable<Message> {\n\n    /**\n     * Whether validation succeed.\n     *\n     * This is `true` when there is no validation messages, or `false` otherwise.\n     */\n    readonly ok: boolean;\n\n    /**\n     * Returns messages with the given code.\n     *\n     * @param code  Target code. All messages reported when absent.\n     *\n     * @returns An array of matching messages. Possibly empty.\n     */\n    messages(code?: string): readonly Message[];\n\n    /**\n     * Checks whether there are errors with the given code.\n     *\n     * @param code  Target code. Any message matches when absent.\n     *\n     * @returns `true` if there is at least one message with the given code, or `false` otherwise.\n     */\n    has(code?: string): boolean;\n\n    [Symbol.iterator](): IterableIterator<Message>;\n\n  }\n\n  /**\n   * Successful input validation result.\n   */\n  export interface Ok extends Result {\n\n    readonly ok: true;\n\n  }\n\n  /**\n   * Unsuccessful input validation result.\n   */\n  export interface Errors extends Result {\n\n    readonly ok: false;\n\n  }\n\n}\n\nconst noValidationErrors: InValidation.Result = {\n  get ok() {\n    return true;\n  },\n  messages() {\n    return [];\n  },\n  has() {\n    return false;\n  },\n  [Symbol.iterator]() {\n    return [][Symbol.iterator]();\n  },\n};\n\nclass InValidationErrors implements InValidation.Result {\n\n  private readonly _all: InValidation.Message[];\n  private readonly _byCode = new Map<string, InValidation.Message[]>();\n\n  constructor(messages: InValidation.Message[]) {\n    this._all = [];\n    itsEach(\n        messages,\n        message => {\n\n          let nonEmpty = false;\n\n          itsEach(overEntries(message), ([code, codePresent]) => {\n            if (codePresent) {\n              nonEmpty = true;\n\n              const prev = this._byCode.get(code as string);\n\n              if (prev) {\n                prev.push(message);\n              } else {\n                this._byCode.set(code as string, [message]);\n              }\n            }\n          });\n\n          if (nonEmpty) {\n            this._all.push(message);\n          }\n        }\n    );\n  }\n\n  get ok() {\n    return !this._all.length;\n  }\n\n  messages(code?: string) {\n    return code == null ? this._all : this._byCode.get(code) || [];\n  }\n\n  has(code?: string) {\n    return code == null || this._byCode.has(code);\n  }\n\n  [Symbol.iterator]() {\n    return this._all[Symbol.iterator]();\n  }\n\n}\n\n/**\n * Returns successful input validation result.\n *\n * @category Validation\n * @returns Successful input validation result.\n */\nexport function inValidationResult(): InValidation.Ok;\n\n/**\n * Creates input validation result out of validation messages.\n *\n * @param messages  Input validation messages.\n *\n * @returns New input validation result containing the given `messages`.\n */\nexport function inValidationResult(...messages: InValidation.Message[]): InValidation.Result;\n\nexport function inValidationResult(...messages: InValidation.Message[]): InValidation.Result {\n  return messages.length ? new InValidationErrors(messages) : noValidationErrors;\n}\n\nclass InControlValidation<Value> extends InValidation<Value> {\n\n  readonly _messages: InValidationMessages<Value>;\n  readonly read: AfterEvent<[InValidation.Result]>;\n\n  constructor(control: InControl<Value>) {\n    super();\n    this._messages = new InValidationMessages(control);\n\n    const container = control.aspect(InContainer);\n\n    if (container) {\n      this._messages.from(nestedMessages(container));\n    }\n\n    this.read = afterSupplied(this._messages).keep.thru(inValidationResult);\n  }\n\n  by(...validators: InValidator<Value>[]): EventSupply {\n    return this._messages.from(requireAll(...validators));\n  }\n\n}\n\nfunction nestedMessages(container: InContainer<any>): EventKeeper<InValidation.Message[]> {\n  return container.controls.read.keep.dig_(\n      nestedValidations\n  ).keep.thru(\n      combineValidationResults,\n  );\n}\n\nfunction nestedValidations(controls: InContainer.Snapshot) {\n  return afterEach(...mapIt(controls, control => control.aspect(InValidation)));\n}\n\nfunction combineValidationResults<NextReturn>(...[messages]: [InValidation.Result][]) {\n\n  const msg: Iterable<InValidation.Message> = flatMapIt(messages, asis);\n\n  return nextArgs<InValidation.Message[], NextReturn>(...msg);\n}\n\ndeclare module '../aspect' {\n\n  export namespace InAspect.Application {\n\n    export interface Map<OfInstance, OfValue> {\n\n      /**\n       * Input validation aspect application type.\n       */\n      validation(): InValidation<OfValue>;\n\n    }\n\n  }\n\n}\n","/**\n * @module input-aspects\n */\nimport { InControl } from '../control';\nimport { requireNothing } from './require-nothing.validator';\nimport { InValidator } from './validator';\nimport { InValidationMessages } from './validator.impl';\n\n/**\n * Creates input validator that validates using all listed validators.\n *\n * @category Validation\n * @param validators  Validators to validate the input with.\n *\n * @returns Validator that requires all the given `validators`. Or just the given validator if it is the only one given.\n */\nexport function requireAll<Value>(...validators: InValidator<Value>[]): InValidator<Value> {\n\n  const numValidators = validators.length;\n\n  if (numValidators === 1) {\n    return validators[0];\n  }\n  if (!numValidators) {\n    return requireNothing;\n  }\n\n  return (control: InControl<Value>) => {\n\n    const messages = new InValidationMessages(control);\n\n    validators.forEach(validator => messages.from(validator));\n\n    return messages;\n  };\n}\n","/**\n * @module input-aspects\n */\nimport { nextArgs } from 'call-thru';\nimport { EventKeeper } from 'fun-events';\nimport { InControl } from '../control';\nimport { InValidation } from './validation.aspect';\nimport { InValidator } from './validator';\n\n/**\n * Creates input validator that requires value to present.\n *\n * Reports empty (falsy) values with `missing` message code.\n *\n * @category Validation\n */\nexport function requirePresent(): InValidator<any>;\n\n/**\n * Input validator that requires value to present.\n *\n * Reports empty (falsy) values with `missing` message code.\n */\nexport function requirePresent(control: InControl<any>): EventKeeper<InValidation.Message[]>;\n\nexport function requirePresent(\n    control?: InControl<any>,\n): InValidator<any> | EventKeeper<InValidation.Message[]> {\n  return control ? control.read.keep.thru(value => value ? nextArgs() : { missing: 'missing' }) : requirePresent;\n}\n","import { asis, nextArgs, nextSkip } from 'call-thru';\nimport {\n  AfterEvent,\n  afterSupplied,\n  DomEventDispatcher,\n  EventEmitter,\n  eventSupply,\n  EventSupply,\n  OnEvent,\n} from 'fun-events';\nimport { InElement } from '../element.control';\n\nexport class InElementControl<Value, Elt extends HTMLElement> extends InElement<Value, Elt> {\n\n  readonly input: AfterEvent<[InElement.Input<Value>]>;\n  readonly on: OnEvent<[Value, Value]>;\n  readonly events: DomEventDispatcher;\n  private readonly _get: (this: InElementControl<Value, Elt>) => Value;\n  private readonly _set: (this: InElementControl<Value, Elt>, value: Value) => void;\n  private readonly _input: EventEmitter<[InElement.Input<Value>, Value]> = new EventEmitter();\n  private readonly _supply: EventSupply;\n  private _value: Value;\n  // noinspection TypeScriptFieldCanBeMadeReadonly\n  private _update: (value: Value, oldValue: Value) => void;\n\n  constructor(\n      readonly element: Elt,\n      {\n        get,\n        set,\n      }: {\n        get: (this: InElementControl<Value, Elt>) => Value;\n        set: (this: InElementControl<Value, Elt>, value: Value) => void;\n      }) {\n    super();\n    this._get = get;\n    this._set = set;\n    this._value = this.it;\n    this._update = update;\n    this.input = afterSupplied<[InElement.Input<Value>]>(\n        this._input.on.thru(asis),\n        () => [{ value: this.it }]);\n    this.on = this._input.on.thru(\n        ({ value: newValue }, oldValue) => newValue === oldValue ? nextSkip() : nextArgs(newValue, oldValue),\n    );\n\n    this.events = new DomEventDispatcher(element);\n\n    const self = this;\n    const supply = this._supply = eventSupply(reason => this._input.done(reason));\n\n    this.events.on('input')(onInput).needs(supply);\n    this.events.on('change')(onInput).needs(supply);\n\n    function onInput(event: Event) {\n      send({ value: self.it, event }, self._value);\n    }\n\n    function update(value: Value, oldValue: Value) {\n      send({ value }, oldValue);\n    }\n\n    function send(input: InElement.Input<Value>, oldValue: Value) {\n      for (;;) {\n        self._value = input.value;\n\n        // Corrections are value updates performed by update event receivers\n        // The last correction is recorded and sent later, when all receivers receive current update\n        let correction: [InElement.Input<Value>, Value] | undefined;\n\n        // Record corrections\n        self._update = (newValue: Value, old: Value) => {\n          // Corrections retain the event instance\n          correction = [{ ...input, value: newValue }, old];\n        };\n        try {\n          self._input.send(input, oldValue);\n        } finally {\n          self._update = update;\n        }\n\n        if (!correction) {\n          break; // No more corrections\n        }\n\n        // Apply last correction\n        // noinspection JSUnusedAssignment\n        [input, oldValue] = correction;\n      }\n    }\n  }\n\n  get it(): Value {\n    return this._get();\n  }\n\n  set it(value: Value) {\n\n    const oldValue = this.it;\n\n    if (value !== oldValue) {\n      this._set(value);\n      this._update(this._get(), oldValue);\n    }\n  }\n\n  done(reason?: any): this {\n    this._supply.off(reason);\n    return this;\n  }\n\n}\n","/**\n * @module input-aspects\n */\nimport { InElement } from '../element.control';\nimport { InElementControl } from './element.impl';\n\n/**\n * Textual input control.\n *\n * @category Control\n */\nexport type InText = InElement<string, InText.Element>;\n\nexport namespace InText {\n\n  /**\n   * Text input element.\n   *\n   * Either `<input>`, `<textarea>`, or `<select>`.\n   */\n  export type Element = HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement;\n\n}\n\n/**\n * Creates control for the given textual input element.\n *\n * Note that this won't work for files, checkboxes, or radio buttons.\n *\n * For `<select multiple>` this would only reflect the first option. Consider to use `inSelect()` for multi-selects.\n *\n * @category Control\n * @param element  Target text input element.\n *\n * @return New textual input control instance.\n */\nexport function inText(element: InText.Element): InText {\n  return new InElementControl(\n      element,\n      {\n        get(): string {\n          return this.element.value;\n        },\n        set(value) {\n          this.element.value = value;\n        },\n      },\n  );\n}\n","/**\n * @module input-aspects\n */\nimport { EventEmitter, ValueTracker } from 'fun-events';\nimport { InAspect, InAspect__symbol } from '../aspect';\nimport { inAspectNull, inAspectValue } from '../aspect.impl';\nimport { InControl } from '../control';\nimport { InElement } from '../element.control';\n\nconst InFocus__aspect: InAspect<InFocus | null> = {\n\n  applyTo<Value>(control: InControl<Value>): InAspect.Applied<InFocus | null> {\n\n    const element = control.aspect(InElement);\n\n    if (!element) {\n      return inAspectNull;\n    }\n\n    return inAspectValue(new InControlFocus(element));\n  },\n\n};\n\n/**\n * Input focus aspect.\n *\n * This is a value tracker of element focus flag. Or `null` when [[InElement]] aspect is absent.\n *\n * @category Aspect\n */\nexport abstract class InFocus extends ValueTracker<boolean> {\n\n  static get [InAspect__symbol](): InAspect<InFocus | null> {\n    return InFocus__aspect;\n  }\n\n}\n\nclass InControlFocus extends InFocus {\n\n  private readonly _on = new EventEmitter<[boolean, boolean]>();\n\n  constructor(private readonly _element: InElement<any>) {\n    super();\n\n    const events = _element.events;\n\n    events.on('focus')(() => this._on.send(true, false));\n    events.on('blur')(() => this._on.send(false, true));\n  }\n\n  get on() {\n    return this._on.on;\n  }\n\n  get it(): boolean {\n\n    const element = this._element.element;\n    const owner: DocumentOrShadowRoot | null =\n        element.getRootNode ? element.getRootNode() as any : element.ownerDocument;\n\n    return !!owner && owner.activeElement === element;\n  }\n\n  set it(value: boolean) {\n    if (this.it !== value) {\n\n      const element = this._element.element;\n\n      if (value) {\n        element.focus();\n      } else {\n        element.blur();\n      }\n    }\n  }\n\n  done(reason?: any): this {\n    this._on.done(reason);\n    return this;\n  }\n\n}\n","/**\n * @module input-aspects\n */\nimport { itsEach, mapIt } from 'a-iterable';\nimport {\n  afterAll,\n  afterEach,\n  AfterEvent,\n  AfterEvent__symbol,\n  afterThe,\n  EventKeeper,\n  trackValue,\n  ValueTracker,\n} from 'fun-events';\nimport { InAspect, InAspect__symbol } from '../aspect';\nimport { inAspectValue } from '../aspect.impl';\nimport { InContainer } from '../container';\nimport { InControl } from '../control';\nimport { InElement } from '../element.control';\nimport { InFocus } from './focus.aspect';\n\nconst InStatus__aspect: InAspect<InStatus> = {\n\n  applyTo<Value>(control: InControl<Value>): InAspect.Applied<InStatus> {\n\n    const container = control.aspect(InContainer);\n\n    return inAspectValue(container ? new InContainerStatus(container) : new InControlStatus(control));\n  }\n\n};\n\n/**\n * Aggregate status aspect of user input.\n *\n * Collects and reports input status flags. Like whether the input ever had focus or being altered.\n *\n * Supports input elements and containers. For the rest of input controls always sends default status flags.\n *\n * Implements `EventKeeper` interface by sending collected status flags to receivers.\n *\n * @category Aspect\n */\nexport abstract class InStatus implements EventKeeper<[InStatus.Flags]> {\n\n  static get [InAspect__symbol](): InAspect<InStatus> {\n    return InStatus__aspect;\n  }\n\n  /**\n   * An `AfterEvent` keeper of input status flags.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly read: AfterEvent<[InStatus.Flags]>;\n\n  get [AfterEvent__symbol](): AfterEvent<[InStatus.Flags]> {\n    return this.read;\n  }\n\n  /**\n   * Marks the input as touched.\n   *\n   * For container invokes this method for each of the nested controls.\n   *\n   * @param touched  Whether to mark the input as touched or not. `true` by default. When `false` the input would be\n   * marked as non-edited too. Setting to `false` affects only edited flag when input has focus.\n   *\n   * @returns `this` aspect instance.\n   */\n  abstract markTouched(touched?: boolean): this;\n\n  /**\n   * Marks the input as edited by user.\n   *\n   * For container invokes this method for each of the nested controls.\n   *\n   * @param edited  Whether to mark the input as edited by user. `true` by default, in which case the input will be\n   * marked as touched as well.\n   *\n   * @returns `this` aspect instance.\n   */\n  abstract markEdited(edited?: boolean): this;\n\n}\n\nexport namespace InStatus {\n\n  /**\n   * A flags representing aggregated input status.\n   */\n  export interface Flags {\n\n    /**\n     * Whether the input has focus currently.\n     */\n    readonly hasFocus: boolean;\n\n    /**\n     * Whether the input had focus already.\n     *\n     * This flag can be set using `InStatus.markTouched()`.\n     */\n    readonly touched: boolean;\n\n    /**\n     * Whether the input has been edited by user.\n     *\n     * This flag can be set using `InStatus.markEdited()`.\n     */\n    readonly edited: boolean;\n\n  }\n\n}\n\nconst defaultFlags: InStatus.Flags = {\n  hasFocus: false,\n  touched: false,\n  edited: false,\n};\n\nclass InControlStatus extends InStatus {\n\n  private readonly _flags = trackValue<InStatus.Flags>(defaultFlags);\n\n  get read() {\n    return this._flags.read;\n  }\n\n  constructor(control: InControl<any>) {\n    super();\n    this._flags.by(elementFlags(this._flags, control));\n  }\n\n  markTouched(touched = true): this {\n\n    const flags = this._flags.it;\n\n    if (!touched) {\n      if (flags.touched) {\n        // Try to reset touched.\n        // Still touched if in focus. Not edited anyway.\n        this._flags.it = { ...flags, touched: flags.hasFocus, edited: false };\n      }\n    } else if (!flags.touched) {\n      // Do not modify if already touched.\n      this._flags.it = { ...flags, touched };\n    }\n\n    return this;\n  }\n\n  markEdited(edited = true): this {\n\n    const flags = this._flags.it;\n\n    if (edited) {\n      if (!flags.edited) {\n        // Touched if edited\n        this._flags.it = { ...flags, touched: true, edited };\n      }\n    } else if (flags.edited) {\n      // Assume not edited\n      this._flags.it = { ...flags, edited };\n    }\n\n    return this;\n  }\n\n}\n\nfunction elementFlags(\n    origin: ValueTracker<InStatus.Flags>,\n    control: InControl<any>,\n): AfterEvent<[InStatus.Flags]> {\n\n  const element = control.aspect(InElement);\n  const focus = control.aspect(InFocus);\n\n  return afterAll({\n    hasFocus: focus || afterThe(false),\n    edited: element ? element.input.keep.thru(({ event }) => !!event) : afterThe(false),\n  }).keep.thru(\n      ({ hasFocus: [hasFocus], edited: [edited] }) => updateFlags(origin.it, hasFocus, edited),\n  );\n}\n\nfunction updateFlags(flags: InStatus.Flags, hasFocus: boolean, edited: boolean): InStatus.Flags {\n  if (hasFocus) {\n    flags = { ...flags, hasFocus, touched: true };\n  } else {\n    flags = { ...flags, hasFocus };\n  }\n  if (edited) {\n    flags = { ...flags, edited, touched: true };\n  }\n  return flags;\n}\n\nclass InContainerStatus extends InStatus {\n\n  readonly read: AfterEvent<[InStatus.Flags]>;\n\n  constructor(private readonly _container: InContainer<any>) {\n    super();\n\n    this.read = containerFlags(_container);\n  }\n\n  markEdited(edited?: boolean): this {\n    this._container.controls.read.once(snapshot => itsEach(\n        snapshot,\n        control => control.aspect(InStatus).markEdited(edited)),\n    );\n    return this;\n  }\n\n  markTouched(touched?: boolean): this {\n    this._container.controls.read.once(snapshot => itsEach(\n        snapshot,\n        control => control.aspect(InStatus).markTouched(touched)),\n    );\n    return this;\n  }\n\n}\n\nfunction containerFlags(container: InContainer<any>): AfterEvent<[InStatus.Flags]> {\n  return container.controls.read.keep.dig_(\n      snapshot => afterEach(...controlStatuses(snapshot)),\n  ).keep.thru(\n      combineFlags,\n  );\n}\n\nfunction controlStatuses(snapshot: InContainer.Snapshot): Iterable<InStatus> {\n  return mapIt(snapshot, c => c.aspect(InStatus));\n}\n\nfunction combineFlags(...flags: [InStatus.Flags][]): InStatus.Flags {\n\n  const result: { -readonly [K in keyof InStatus.Flags]: InStatus.Flags[K] } = {\n    hasFocus: false,\n    touched: false,\n    edited: false,\n  };\n\n  itsEach(\n      flags,\n      (([{ hasFocus, touched, edited }]) => {\n            if (touched) {\n              result.touched = true;\n            }\n            if (hasFocus) {\n              result.hasFocus = result.touched = true;\n            }\n            if (edited) {\n              result.edited = result.touched = true;\n            }\n          }\n      )\n  );\n\n  return result;\n}\n","/**\n * @module input-aspects\n */\nimport { InAspect, InAspect__symbol } from '../aspect';\nimport { inAspectNull, inAspectValue } from '../aspect.impl';\nimport { InControl } from '../control';\nimport { InElement } from '../element.control';\n\n/**\n * An input aspect representing HTML element to apply styles to.\n *\n * This is a HTML element for input element control, and `null` for everything else by default.\n *\n * @category Aspect\n */\nexport type InStyledElement = HTMLElement;\n\nconst InStyledElement__aspect: InAspect<InStyledElement | null> = {\n\n  applyTo(control: InControl<any>): InAspect.Applied<InStyledElement | null> {\n\n    const element = control.aspect(InElement);\n\n    return element ? inAspectValue(element.element) : inAspectNull;\n  }\n\n};\n\n/**\n * @category Aspect\n */\nexport const InStyledElement = {\n\n  get [InAspect__symbol]() {\n    return InStyledElement__aspect;\n  }\n\n};\n","/**\n * @module input-aspects\n */\nimport { filterIt, itsEach, mapIt, overEntries } from 'a-iterable';\nimport { noop, valueProvider } from 'call-thru';\nimport {\n  afterEach,\n  AfterEvent,\n  AfterEvent__symbol,\n  afterEventBy,\n  afterThe,\n  EventKeeper,\n  eventSupply,\n  EventSupply,\n  isEventKeeper,\n  trackValue,\n  ValueTracker,\n} from 'fun-events';\nimport { InAspect, InAspect__symbol } from '../aspect';\nimport { InControl } from '../control';\nimport { InStyledElement } from './styled-element.aspect';\n\nconst InCssClasses__aspect: InAspect<InCssClasses> = {\n\n  applyTo(control: InControl<any>): InAspect.Applied<InCssClasses> {\n    return {\n      instance: new InControlCssClasses(control),\n      convertTo: noop,\n    };\n  }\n\n};\n\n/**\n * An aspect of the user input representing CSS classes to apply to styled element.\n *\n * Implements an `EventKeeper` interface by reporting all CSS classes applied to styled element.\n *\n * @category Aspect\n */\nexport abstract class InCssClasses implements EventKeeper<[InCssClasses.Map]> {\n\n  static get [InAspect__symbol](): InAspect<InCssClasses> {\n    return InCssClasses__aspect;\n  }\n\n  /**\n   * An `AfterEvent` keeper of CSS classes applied to styled element.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly read: AfterEvent<[InCssClasses.Map]>;\n\n  get [AfterEvent__symbol](): AfterEvent<[InCssClasses.Map]> {\n    return this.read;\n  }\n\n  /**\n   * Appends CSS classes from the given `source` to styled element.\n   *\n   * @param source  A source of CSS class names.\n   *\n   * @returns CSS class names supply. Removes `source` CSS classes from styled element once cut off.\n   */\n  abstract add(source: InCssClasses.Source): EventSupply;\n\n  /**\n   * Removes all CSS class sources and stops applying CSS classes to styled element.\n   *\n   * @param reason  An optional reason.\n   *\n   * @returns `this` instance.\n   */\n  abstract done(reason?: any): this;\n\n}\n\nexport namespace InCssClasses {\n\n  /**\n   * A source of CSS class names for input control.\n   *\n   * This is either an event keeper of CSS class names map, or a function returning one and accepting target input\n   * control as the only parameter.\n   */\n  export type Source =\n      | EventKeeper<[InCssClasses.Map]>\n      | ((control: InControl<any>) => EventKeeper<[InCssClasses.Map]>);\n\n  /**\n   * A map CSS class names to apply to styled element.\n   *\n   * The keys of this map are class names tpo apply.\n   * - When the value is `true` corresponding class name will be added.\n   * - When the value is `false` corresponding class name will not be added.\n   * - The `undefined` value is ignored.\n   */\n  export interface Map {\n    readonly [name: string]: boolean | undefined;\n  }\n\n}\n\nconst UnsubscribeReason__symbol = /*#__PURE__*/ Symbol('reason');\n\ninterface UnsubscribeReason {\n  readonly [UnsubscribeReason__symbol]?: any;\n}\n\nfunction isUnsubscribeReason(reason: any): reason is UnsubscribeReason {\n  return reason && typeof reason === 'object' && UnsubscribeReason__symbol in reason;\n}\n\nclass InControlCssClasses extends InCssClasses {\n\n  readonly read: AfterEvent<[InCssClasses.Map]>;\n  private readonly _sources: ValueTracker<[Map<AfterEvent<[InCssClasses.Map]>, EventSupply>]> =\n      trackValue([new Map()]);\n\n  constructor(private readonly _control: InControl<any>) {\n    super();\n    this.read = this._sources.read.keep.dig_(\n        ([sources]) => sources.size ? afterEach(...sources.keys()) : afterThe()\n    ).keep.thru((...classes) => {\n\n      const result: { [name: string]: boolean | undefined } = {};\n\n      classes.forEach(([map]) => {\n        itsEach(\n            overEntries(map),\n            ([name, flag]) => {\n              if (flag != null) {\n                result[name] = flag;\n              }\n            }\n        );\n      });\n\n      return result;\n    });\n\n    const element = _control.aspect(InStyledElement);\n\n    if (element) {\n\n      const { classList } = element;\n      const applied = new Set<string>();\n\n      this.read(map => {\n\n        const toRemove = new Set<string>(applied);\n        const toAdd = new Set<string>(\n            mapIt(\n                filterIt(\n                    overEntries(map),\n                    ([name, flag]) => !!flag && !toRemove.delete(name as string)\n                ),\n                ([name]) => name as string\n            )\n        );\n\n        toRemove.forEach(name => {\n          classList.remove(name);\n          applied.delete(name);\n        });\n        toAdd.forEach(name => {\n          classList.add(name);\n          applied.add(name);\n        });\n      });\n    }\n  }\n\n  add(source: InCssClasses.Source): EventSupply {\n\n    const keeper = inCssClassesSource(source)(this._control);\n    const classesSupply = eventSupply();\n    const src = afterEventBy<[InCssClasses.Map]>(receiver => {\n\n      const supply = keeper[AfterEvent__symbol]({\n        receive(context, ...event) {\n          receiver.receive(context, ...event);\n        },\n      });\n\n      receiver.supply.whenOff(reason => {\n        classesSupply.off({ [UnsubscribeReason__symbol]: reason });\n      });\n      classesSupply.needs(supply).whenOff(reason => {\n        if (isUnsubscribeReason(reason)) {\n          supply.off(reason[UnsubscribeReason__symbol]);\n        }\n      });\n    }).share();\n\n    const [sources] = this._sources.it;\n\n    sources.set(src, classesSupply);\n    classesSupply.whenOff(reason => {\n      if (!isUnsubscribeReason(reason)) {\n        sources.delete(src);\n        this._sources.it = [sources];\n      }\n    });\n\n    this._sources.it = [sources];\n\n    return classesSupply;\n  }\n\n  done(reason?: any): this {\n    itsEach(\n        this._sources.it[0].values(),\n        supply => supply.off(reason),\n    );\n    this._sources.done(reason);\n    return this;\n  }\n\n}\n\nfunction inCssClassesSource(source: InCssClasses.Source): (control: InControl<any>) => EventKeeper<[InCssClasses.Map]> {\n  if (isEventKeeper(source)) {\n    return valueProvider(source);\n  }\n  return source;\n}\n","/**\n * @module input-aspects\n */\nimport { afterAll } from 'fun-events';\nimport { InControl } from '../control';\nimport { InMode } from '../data';\nimport { InStatus } from '../focus';\nimport { InValidation } from '../validation';\nimport { InCssClasses } from './css-classes.aspect';\n\n/**\n * A source of informative CSS classes.\n *\n * Generates the following CSS classes:\n * - `disabled` when input control is disabled (i.e. has no data).\n * - `readonly` when input control is read-only,\n * - `invalid` when input control validation failed,\n * - `missing` when there are validation messages with `missing` code,\n * - `incomplete` when there are validation messages with `incomplete`,\n * - `hasFocus` when input control has input focus,\n * - `touched` when input control is touched (i.e. had focus already),\n * - `edited` when input control is edited by user.\n *\n * @category Style\n * @param prefix  Optional prefix to add to generated class names. `inas-` by default.\n * @param suffix  Optional suffix to add to generated class names.\n */\nexport function inCssInfo(\n    {\n      prefix = 'inap-',\n      suffix = '',\n    }: {\n      prefix?: string,\n      suffix?: string,\n    } = {}\n): InCssClasses.Source {\n  return (control: InControl<any>) => {\n    return afterAll({\n      md: control.aspect(InMode),\n      vl: control.aspect(InValidation),\n      st: control.aspect(InStatus),\n    }).keep.thru(\n        ({ md: [mode], vl: [valid], st: [{ hasFocus, touched, edited }] }) => {\n\n          return {\n            [cls('disabled')]: !InMode.hasData(mode),\n            [cls('readonly')]: mode === 'ro' || mode === '-ro',\n            [cls('invalid')]: !valid.ok,\n            [cls('missing')]: valid.has('missing'),\n            [cls('incomplete')]: valid.has('incomplete'),\n            [cls('has-focus')]: hasFocus,\n            [cls('touched')]: touched,\n            [cls('edited')]: edited,\n          } as InCssClasses.Map;\n        },\n    );\n  };\n\n  function cls(name: string): string {\n    return `${prefix}${name}${suffix}`;\n  }\n}\n"],"names":["NextCall__symbol","Symbol","NextCall_lastOutcome__symbol","NextCall","Function","[object Object]","target","value","is","nextCall","callee","firstArg","arg","callNext","lastOutcome","result","PassedThru__symbol","PassedThru","outcome","iterator","callThru","fns","args","get","idx","prev","len","length","apply","this","call","asis","noop","isPresent","valueProvider","valuesProvider","values","nextArgs","undefined","nextEach","items","item","forEachItem","lastItems","SKIP","_skip","_nextSkip","nextSkip","isArrayLike","itsRevertible","iterable","itsIterator","itsIterable","makeIt","iterate","reverse","reversible","reverseIt","source","reverseArray","reversed","array","i","itsEach","action","element","itsEmpty","next","done","itsFirst","itsReduction","reducer","initialValue","reduced","thruIt","it","thru","filterIt","test","flatMapIt","convert","mapIt","API_METHODS","AIterable","NONE","every","name","from","make","itsEvery","elements","None","super","overArray","overKeys","Reflect","ownKeys","overEntries","keys","mapToEntries","_keys","key","AfterEvent__symbol","isEventKeeper","EventSupply","another","whenOff","reason","off","eventSupply","cutOff","callback","isOff","NoSupply","noSupply","noEventSupply","eventReceiver","receiver","generic","supply","_context","event","context","receive","OnEvent__symbol","isEventSender","once","register","EventNotifier","Set","receivers","send","sendNonRecurrent","actualReceivers","received","recurrent","push","processEvent","shift","receiveEventsByEach","_rcvs","size","on","add","delete","forEach","recurrentReceivers","recurrentReceiver","recurrentEvent","share","shared","sharedSupply","initialEvents","_ctx","needs","dispatcher","tillOff","OnEvent","onEventBy","extract","dig_","nestedSupply","prevSupply","extracted","onSupplied","nestedEvent","consume","consumerSupply","senderSupply","thru_","transformed","onEvent","Object","setPrototypeOf","prototype","supplier","bind","onNever","AfterEventKeep","keeper","_keeper","afterSupplied","AfterEvent","keep","afterEventBy","fallback","noEvent","lastEvent","numReceivers","afterEvent","dest","reported","sender","afterSent","afterThe","afterNever","Error","OnDomEvent","onDomEventBy","capture","listener","opts","instead","preventDefault","just","stopPropagation","last","stopImmediatePropagation","passive","onDomEvent","domEventContext","onRecurrent","DomEventDispatcher","_target","type","domListener","addEventListener","removeEventListener","dispatchEvent","EventEmitter","afterAll","sources","notifier","afterEach","index","onAny","suppliers","remained","removeSupplier","statePath","path","Array","isArray","PathEntry","_drop","Map","emitter","newValue","oldValue","nested","_nested","slice","entry","_dropIfEmpty","dontCreateMissing","found","created","_remove","set","Trackers","_entry","_root","nest","SubStateTracker","_trackers","_path","_tracker","onUpdate","StateTracker","update","subTracker","track","ValueTracker","valueReceiver","recurrentValue","receiveNewValue","read","self","byNone","container","_by","acceptValuesFrom","TrackedValue","_it","_on","trackValue","initial","ValueSync","old","first","second","third","syncWithTracker","tracker","syncTrackers","extractTracker","tracker1","tracker2","supply1","supply2","ContextKey__symbol","ContextKey","ContextSeedKey","seedKey","seeder","seed","isEmpty","byDefault","ContextKeyError","message","contextValueSpec","spec","byProvider","withDeps","a","by","with","deps","map","dep","isConstant","viaAlias","via","ctx","asInstance","selfInstance","as","toAsInstance","TypeError","ContextValues","ContextRegistry","_initial","_seeding","provide","_seeds","seeding","factory","cache","newValues","_nonCachedValues","registry","Values","cached","constructed","defaultUsed","findSeed","valueOpts","or","defaultProvider","defaultValue","grow","growValue","other","combine","ContextUpSeeder","provider","_providers","providers","indexOf","concat","providersTracker","dig","prov","toUpSrcKeeper","flatUpSources","upSrcKeepers","src","isUpSrcKeeper","ContextSeedUpKey","ContextUpKey","FnContextKey","delegated","SimpleContextSeeder","splice","sourceValues","flatMap","SimpleSeedKey","SimpleContextKey","SingleContextKey","itsLast","MultiContextKey","defaultSources","filter","Naming","nsAlias","local","ns","DefaultNaming","alias","default__naming","html__naming","id__naming","css__naming","NamespaceDef","url","aliases","naming","applyAlias","_alias","isQualifiedName","isNameAndNamespace","compareNames","compareStrings","firstName","firstUrl","newNamespaceAliaser","aliasesByNs","nsNumPerAlias","mostPreferred","nsNumRegistered","preferred","ids","generated","hthvItem","$","n","t","v","x","p","pl","addParam","param","nextInItem","config","input","c","s","d","delimiterOf","datePattern","parseDateTime","out","substring","match","parseNone","itemParser","named","tagged","extra","parseQuotedString","unquoted","quotedStringParser","parseAngleBrackets","angleBracketsParser","parseExtra","tag","extraItem","nextInComment","spacesParser","start","paramParser","skipSpaces","parseItem","defaultDelimit"," ","\t",",",";","\"","\\","<",">","=","(",")","/",":","?","@","[","]","{","}","buildParserConfig","delimit","delimitConfig","defaultParserConfig","commentParserConfig","newHthvParser","parserConfig","parseItemDelimit","itemDelimitParser","parseParam","parseComment","comments","commentParserOpts","commentParser","headerValue","hthvParse","hthvQuote","string","escaped","quote","delimiter","hasOwnProperty","regexAnySingleEscape","regexSingleEscape","regexExcessiveSpaces","cssesc","options","defaults","merge","quotes","isIdentifier","firstChar","charAt","output","counter","character","codePoint","charCodeAt","toString","toUpperCase","escapeEverything","replace","$0","$1","$2","wrap","version","uppercasePattern","msPattern","toHyphenLower","toLowerCase","cssescId","id","IMPORTANT_CSS_SUFFIX","isReadonlyArray","isNotEmptyArray","StypValueStruct","priority","prioritize","stypValuesEqual","StypColorStruct","StypRGB","coords","r","intCoord","g","b","coord","rgb","hsl","max","Math","min","l","round","StypHSL","h","StypColor","q","hueAsFraction","hueToRgb","newT","mixStypColors","color1","color2","weight","w","rgba1","rgba2","aDiff","w1","w2","StypNumericStruct","dim","toFormula","StypMapper","mappings","mapped","mappedValue","mapping","mappingBy","mapper","stypSplitPriority","endsWith","trim","StypDimension","val","unit","thisDim","pt","noPt","addendum","stypDimension","stypAddSub","subtrahend","multiplier","divisor","zero","StypCalcBase","left","op","right","usual","stypMul","stypDiv","StypAddSub","toDim","negate","StypMulDiv","isStypNumeric","Zero","_byPriority","important","ZeroByPriority","unitlessZeroDimensionKind","dimension","StypDimension_","unitZeroDimensionKind","zeroUnit","withPercent","noPercent","StypAngle","StypAnglePt","StypFrequency","StypFrequencyPt","StypLength","StypLengthPt","StypURL","noStypProperties","noStypPropertiesSpec","stypPropertiesBySpec","rule","preventDuplicates","propertiesKeeper","senderOrProperties","propertiesMap","properties","stored","propertyEntries","sentry","propertiesEqual","passNonDuplicate","$$css","mergeStypProperties","base","baseProperties","addendumProperties","k","priorityOf","addValue","addValues","isCombinator","normalizeStypSelectorPart","part","e","normalizeClasses","normalizeQualifiers","classes","sort","qualifiers","exposeQualifier","qualifier","noQualifiers","eqIdx","exposed","lastExposed","split","noKeyAndTail","stypRuleKeyAndTail","selector","combinator","rootSelector","classesMatch","query","qClass","find","mClass","namesEqual","stypSelector","normalizeKey","normalized","prevCombinator","ruleKeyTextOpts","qualify","stypRuleKeyText","formatStypSelector","defaultFormat","format","reduce","hasProperties","className","xmlNs","qualifyElement","formatItem","isCSSRuleGroup","sheetOrRule","AtRulesRender","_rule","outer","onlyAtProperties","producer","render","sheet","atSelectors","rest","extractPartAtSelectors","extractAtSelectors","restSelector","atSelector","ruleIdx","insertRule","buildAtSelector","cssRules","names","customQuery","namedQuery","addQuery","stypRenderAtRules","order","create","isAtEntry","String","restQualifies","addAtSelector","colonIdx","prevQuery","stypRenderGlobals","FIRST_RENDER_ORDER","styleSheet","importIndex","nsIndex","importDelta","renderImport","renderDefaultNamespace","renderNamespacePrefix","IMPORT_PREFIX","startsWith","css","NS_PREFIX","prefix","stypRenderProperties","cssRule","addRule","style","notCustomProperty","setProperty","hName","hyphenateStyleName","renderFactory","isFactory","renderSpec","doRender","compareRenders","firstOrder","secondOrder","produceBasicStyle","rules","document","window","addStyleSheet","addStyleElement","schedule","scheduleInAnimationFrame","parent","head","view","defaultView","factories","addRenders","renders","addRender","has","stypRenderFactories","renderSupply","renderRule","trackSupply","tracked","added","removed","clear","trackRules","styleProducer","production","_selector","ruleIndex","stypSelectorText","reader","specs","renderAt","nextIndex","nextRender","nextProducer","renderForRule","_sheetRef","_rev","ruleSelector","rev","deleteRule","clearProperties","sheetRef","remove","operation","requestAnimationFrame","createElement","setAttribute","append","createTextNode","parentElement","removeChild","stypRenderText","cssText","stypRenderXmlNs","xmlNsDefs","declareNs","produceStyle","defaultRenders","StypRule","StypRuleList","StypRuleHierarchy","Rules","list","ruleMatches","buildList","filterArray","ruleSet","grabRules","stypQuery","stypSelectorMatches","AllRules","all","_added","selfRuleList","_updates","iterateAllRules","extendRule","targetSelector","sendUpdate","tail","_spec","oldSpec","empty","extendSpec","keyText","newNested","root","_add","_get","request","propertiesSupply","allRules","NestedRules","_all","_byKey","StypRule_","_key","_read","builder","_outer","outerSelector","stypOuterSelector","stypRoot","StypRuleRef","RefStypRule","createMappings","mappingsKeeper","ms","ps","watch","_mappings","_properties","StypRuleRefs","refs","referrers","fromAll","flattenProperties","noStypRules","stypRules","rulesByList","rulesFromSource","_rules","rulesByValue","evalRules","lazyStypRules","lazyRulesFromSource","reportExistingRules","lazyRules","sourceSupply","then","resolution","asyncRules","existing","InAspect__symbol","inAspectNull","instance","convertTo","inAspectValue","InControl","aspectKey","_aspect","aspectKeyOrSetup","aspectSetup","aspect","setOrBy","InConverted","_aspects","applied","_applyAspect","applyTo","backward","lastRev","converters","applyAspect","convertAspect","prevValue","prevRev","InContainer__aspect","InContainer","InContainerControls","InParents__aspect","InControlParents","InParents","_map","allParents","existingSupply","InElement__aspect","InElement","InMode__aspect","control","InControlMode","InMode","mode","own","OwnModeTracker","getAttribute","initialMode","DerivedModes","mergeModes","derive","parentsMode","derived","_derived","removeAttribute","applyMode","lastUpdate","parents","parentList","modes","ro","InData__symbol","hasData","dataByValue","InData","InGroup","InGroupControls","controlReplacedReason","InGroupSnapshot","entries","InGroupMap","_controls","replaced","_supply","modify","_shot","InGroupControlControls","_group","controlEntryToGroupEntry","snapshot","model","withValues","keyOrControls","newControl","group","newModel","applyControlsToModel","InGroupControl","_model","controls","cs","readGroupData","csData","controlsData","data","controlData","inGroup","_requireNothing","requireNothing","inValidator","validator","messages","validate","simpleValidator","dontRemove","InValidationMessages","validators","validatorMessages","resultSupply","validatorSupply","InValidation__aspect","InControlValidation","to","converted","_messages","InValidation","noValidationErrors","ok","InValidationErrors","nonEmpty","code","codePresent","_byCode","inValidationResult","nestedValidations","combineValidationResults","nestedMessages","numValidators","requireAll","requirePresent","missing","InElementControl","_set","_value","_update","_input","events","onInput","correction","inText","InFocus__aspect","InControlFocus","InFocus","_element","owner","getRootNode","ownerDocument","activeElement","focus","blur","InStatus__aspect","InContainerStatus","InControlStatus","InStatus","defaultFlags","hasFocus","touched","edited","_flags","origin","flags","updateFlags","elementFlags","_container","controlStatuses","combineFlags","markEdited","markTouched","InStyledElement__aspect","InStyledElement","InCssClasses__aspect","InControlCssClasses","InCssClasses","UnsubscribeReason__symbol","isUnsubscribeReason","_control","_sources","flag","classList","toRemove","toAdd","inCssClassesSource","classesSupply","inCssInfo","suffix","md","vl","st","valid","cls"],"mappings":"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"}