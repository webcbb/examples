{"version":3,"file":"wesib.bbda94b4.m.js","sources":["../../node_modules/@wesib/wesib/src/boot/bootstrap-context.key.impl.ts","../../node_modules/@wesib/wesib/src/boot/bootstrap-context.ts","../../node_modules/@wesib/wesib/src/boot/bootstrap-default.ts","../../node_modules/@wesib/wesib/src/component/definition/component-factory.ts","../../node_modules/@wesib/wesib/src/boot/globals/bootstrap-window.ts","../../node_modules/@wesib/wesib/src/boot/globals/bootstrap-root.ts","../../node_modules/@wesib/wesib/src/boot/globals/default-namespace-aliaser.ts","../../node_modules/@wesib/wesib/src/common/types.impl.ts","../../node_modules/@wesib/wesib/src/common/array-set.ts","../../node_modules/@wesib/wesib/src/common/classes.ts","../../node_modules/@wesib/wesib/src/common/functions.ts","../../node_modules/@wesib/wesib/src/common/is-element.ts","../../node_modules/@wesib/wesib/src/common/meta-accessor.ts","../../node_modules/@wesib/wesib/src/common/promises.ts","../../node_modules/@wesib/wesib/src/feature/feature-def.ts","../../node_modules/@wesib/wesib/src/feature/feature.decorator.ts","../../node_modules/@wesib/wesib/src/feature/feature-context.ts","../../node_modules/@wesib/wesib/src/feature/feature-needs-error.ts","../../node_modules/@wesib/wesib/src/component/component-def.ts","../../node_modules/@wesib/wesib/src/component/component.decorator.ts","../../node_modules/@wesib/wesib/src/component/component-context.key.impl.ts","../../node_modules/@wesib/wesib/src/component/component-event.key.impl.ts","../../node_modules/@wesib/wesib/src/component/content-root.ts","../../node_modules/@wesib/wesib/src/component/state-updater.ts","../../node_modules/@wesib/wesib/src/component/component-context.ts","../../node_modules/@wesib/wesib/src/component/component-event.ts","../../node_modules/@wesib/wesib/src/boot/globals/element-adapter.ts","../../node_modules/@wesib/wesib/src/boot/globals/element-observer.ts","../../node_modules/@wesib/wesib/src/boot/impl/component-factory.symbol.impl.ts","../../node_modules/@wesib/wesib/src/component/definition/custom-elements.ts","../../node_modules/@wesib/wesib/src/component/definition/definition.context.key.impl.ts","../../node_modules/@wesib/wesib/src/component/definition/element-def.ts","../../node_modules/@wesib/wesib/src/component/definition/definition-context.ts","../../node_modules/@wesib/wesib/src/boot/impl/bootstrap-context-registry.impl.ts","../../node_modules/@wesib/wesib/src/boot/impl/component-context-registry.impl.ts","../../node_modules/@wesib/wesib/src/boot/impl/definition-context-registry.impl.ts","../../node_modules/@wesib/wesib/src/boot/impl/post-def-setup.impl.ts","../../node_modules/@wesib/wesib/src/boot/impl/when-component.impl.ts","../../node_modules/@wesib/wesib/src/boot/impl/element-builder.impl.ts","../../node_modules/@wesib/wesib/src/component/component-mount.ts","../../node_modules/@wesib/wesib/src/boot/impl/unloader.impl.ts","../../node_modules/@wesib/wesib/src/feature/loader/component-registry.impl.ts","../../node_modules/@wesib/wesib/src/feature/loader/feature-loader.impl.ts","../../node_modules/@wesib/wesib/src/feature/loader/feature-request.impl.ts","../../node_modules/@wesib/wesib/src/feature/loader/feature-requester.impl.ts","../../node_modules/@wesib/wesib/src/boot/bootstrap/bootstrap-components.ts","../../node_modules/@wesib/wesib/src/feature/feature-ref.ts","../../node_modules/@wesib/wesib/src/feature/attributes/attribute-path.ts","../../node_modules/@wesib/wesib/src/feature/attributes/attribute-state-update.impl.ts","../../node_modules/@wesib/wesib/src/feature/attributes/attribute-def.impl.ts","../../node_modules/@wesib/wesib/src/feature/attributes/attribute-registrar.ts","../../node_modules/@wesib/wesib/src/feature/attributes/attribute-registry.impl.ts","../../node_modules/@wesib/wesib/src/feature/attributes/attributes-support.feature.ts","../../node_modules/@wesib/wesib/src/feature/attributes/attribute.decorator.ts","../../node_modules/@wesib/wesib/src/feature/attributes/attribute-changed.decorator.ts","../../node_modules/@wesib/wesib/src/feature/dom-properties/dom-property-path.ts","../../node_modules/@wesib/wesib/src/feature/state/component-state.ts","../../node_modules/@wesib/wesib/src/feature/state/state-support.feature.ts","../../node_modules/@wesib/wesib/src/feature/render/render-scheduler.ts","../../node_modules/@wesib/wesib/src/feature/render/element-render.ts","../../node_modules/@wesib/wesib/src/feature/render/render-support.feature.ts","../../node_modules/@wesib/wesib/src/feature/render/render.decorator.ts","../../node_modules/@wesib/wesib/src/feature/shadow-dom/shadow-content-root.ts","../../node_modules/@wesib/wesib/src/feature/shadow-dom/shadow-dom-event.ts","../../node_modules/@wesib/wesib/src/feature/shadow-dom/shadow-root-builder.ts","../../node_modules/@wesib/wesib/src/feature/shadow-dom/shadow-dom-support.feature.ts","../../node_modules/@wesib/wesib/src/feature/shadow-dom/shadow-content-def.ts","../../node_modules/@wesib/wesib/src/feature/shadow-dom/attach-shadow.decorator.ts","../../node_modules/@wesib/generic/src/fetch/fetch-agent-key.impl.ts","../../node_modules/@wesib/generic/src/fetch/http-fetch-agent.ts","../../node_modules/@wesib/generic/src/fetch/http-fetch.impl.ts","../../node_modules/@wesib/generic/src/fetch/http-fetch.ts","../../node_modules/@wesib/generic/src/hierarchy/hierarchy-updates.impl.ts","../../node_modules/@wesib/generic/src/hierarchy/hierarchy-context.ts","../../node_modules/@wesib/generic/src/hierarchy/hierarchy-registry.impl.ts","../../node_modules/@wesib/generic/src/tree/element-node.ts","../../node_modules/@wesib/generic/src/tree/element-node-list.ts","../../node_modules/@wesib/generic/src/tree/element-node-list.impl.ts","../../node_modules/@wesib/generic/src/tree/node-attributes.impl.ts","../../node_modules/@wesib/generic/src/tree/node-properties.impl.ts","../../node_modules/@wesib/generic/src/tree/element-node.impl.ts","../../node_modules/@wesib/generic/src/tree/component-tree-support.feature.ts","../../node_modules/@wesib/generic/src/input.new/input-from-control.ts","../../node_modules/@wesib/generic/src/input.new/input-validity.ts","../../node_modules/@wesib/generic/src/navigation/navigation.event.ts","../../node_modules/@wesib/generic/src/navigation/navigation.ts","../../node_modules/@wesib/generic/src/navigation/navigation-agent.ts","../../node_modules/@wesib/generic/src/navigation/page-param.ts","../../node_modules/@wesib/generic/src/navigation/page-param-context.ts","../../node_modules/@wesib/generic/src/navigation/nav-history.impl.ts","../../node_modules/@wesib/generic/src/navigation/navigation.impl.ts","../../node_modules/@wesib/generic/src/navigation/navigation-support.feature.ts","../../node_modules/@wesib/generic/src/navigation/page-load/caching-page-loader.impl.ts","../../node_modules/@wesib/generic/src/navigation/page-load/page-load-requests.impl.ts","../../node_modules/@wesib/generic/src/navigation/page-load/page-load-agent.ts","../../node_modules/@wesib/generic/src/navigation/page-load/page-load-url-modifier.ts","../../node_modules/@wesib/generic/src/navigation/page-load/page-loader.impl.ts","../../node_modules/@wesib/generic/src/navigation/page-load/page-load-param.ts","../../node_modules/@wesib/generic/src/navigation/page-load/page-cache-buster.impl.ts","../../node_modules/@wesib/generic/src/util/import-node.ts","../../node_modules/@wesib/generic/src/navigation/page-load/page-scripts-agent.impl.ts","../../node_modules/@wesib/generic/src/navigation/page-load/page-style-agent.impl.ts","../../node_modules/@wesib/generic/src/navigation/page-load/page-title-agent.impl.ts","../../node_modules/@wesib/generic/src/navigation/page-load/page-load-support.feature.ts","../../node_modules/@wesib/generic/src/styp/component-style-producer.ts","../../node_modules/@wesib/generic/src/styp/component-styp-render.ts","../../node_modules/@wesib/generic/src/styp/element-id-class.impl.ts","../../node_modules/@wesib/generic/src/styp/component-style-producer.impl.ts","../../node_modules/@wesib/generic/src/styp/basic-style-producer-support.feature.ts","../../node_modules/@wesib/generic/src/styp/component-styp-options.ts","../../node_modules/@wesib/generic/src/styp/produce-style.decorator.ts","../../node_modules/@wesib/generic/src/styp/style-producer-support.feature.ts","../../node_modules/@wesib/generic/src/theme/theme.ts","../../node_modules/@wesib/generic/src/theme/theme-factory.ts","../../node_modules/@wesib/generic/src/theme/theme-style.ts","../../node_modules/@wesib/generic/src/theme/theme.impl.ts","../../node_modules/@wesib/generic/src/theme/theme-factory.impl.ts","../../node_modules/@wesib/generic/src/theme/theme-support.feature.ts"],"sourcesContent":["import { SingleContextKey } from 'context-values';\nimport { BootstrapContext } from './bootstrap-context';\n\n/**\n * @internal\n */\nexport const BootstrapContext__key = (/*#__PURE__*/ new SingleContextKey<BootstrapContext>('bootstrap-context'));\n","/**\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKey__symbol, ContextValues } from 'context-values';\nimport { OnEvent } from 'fun-events';\nimport { Class } from '../common';\nimport { ComponentClass, ComponentFactory } from '../component/definition';\nimport { FeatureRef } from '../feature';\nimport { BootstrapContext__key } from './bootstrap-context.key.impl';\n\n/**\n * Components bootstrap context.\n *\n * An instance of this class is passed to [[FeatureDef.Options.init]] method so that the feature can configure itself.\n *\n * Extends `BootstrapValues` interface. The values could be {@link BootstrapSetup.provide pre-configured} in feature\n * definitions.\n *\n * @category Core\n */\nexport abstract class BootstrapContext extends ContextValues {\n\n  /**\n   * A key of bootstrap context value containing the bootstrap context itself.\n   */\n  static get [ContextKey__symbol](): ContextKey<BootstrapContext> {\n    return BootstrapContext__key;\n  }\n\n  /**\n   * An `OnEvent` sender of bootstrap readiness event.\n   *\n   * The registered receiver will be notified once bootstrap is complete.\n   *\n   * If bootstrap is complete already, the receiver will be notified immediately.\n   */\n  abstract readonly whenReady: OnEvent<[BootstrapContext]>;\n\n  /**\n   * Allows to wait for component definition.\n   *\n   * This corresponds to `window.customElements.whenDefined()` method.\n   *\n   * @param componentType  Component class constructor.\n   *\n   * @return A promise that is resolved to component factory when the given `componentType` is registered.\n   *\n   * @throws TypeError  If `componentType` does not contain a component definition.\n   */\n  abstract whenDefined<C extends object>(componentType: ComponentClass<C>): Promise<ComponentFactory<C>>;\n\n  /**\n   * Allows to loads the given `feature`.\n   *\n   * @param feature  The feature to load.\n   *\n   * @returns  Loaded feature reference.\n   */\n  abstract load(feature: Class): FeatureRef;\n\n}\n","/**\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKeyDefault } from 'context-values';\nimport { BootstrapContext } from './bootstrap-context';\n\n/**\n * Provides a default value for bootstrap context key.\n *\n * @category Core\n * @param provide  A function accepting bootstrap context and target key as parameters, and returning either a default\n * value, or `null`/`undefined` if unknown.\n *\n * @returns A provider of default value for bootstrap context value key.\n */\nexport function bootstrapDefault<Value, Key extends ContextKey<any, any, any>>(\n    provide: (this: void, context: BootstrapContext, key: Key) => Value | null | undefined,\n): ContextKeyDefault<Value, Key> {\n  return (context, key) => {\n\n    const bootstrapContext = context.get(BootstrapContext);\n\n    return context === bootstrapContext ? provide(bootstrapContext, key) : bootstrapContext.get(key);\n  };\n}\n","/**\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKey__symbol, SingleContextKey } from 'context-values';\nimport { Class } from '../../common';\nimport { ComponentMount } from '../component-mount';\nimport { ComponentClass } from './component-class';\nimport { ElementDef } from './element-def';\n\nconst ComponentFactory__key = (/*#__PURE__*/ new SingleContextKey<ComponentFactory>('component-factory'));\n\n/**\n * A factory of components of particular type.\n *\n * @category Core\n * @typeparam T  A type of component.\n */\nexport abstract class ComponentFactory<T extends object = any> {\n\n  /**\n   * A key of definition context value containing a component factory.\n   */\n  static get [ContextKey__symbol](): ContextKey<ComponentFactory> {\n    return ComponentFactory__key;\n  }\n\n  /**\n   * Component class constructor.\n   */\n  abstract readonly componentType: ComponentClass<T>;\n\n  /**\n   * Custom element class constructor.\n   *\n   * It is an error accessing this property before the element class is created, e.g. from inside of\n   * `DefinitionListener` or `ComponentDef.define()` function. In these cases you may wish to add a `whenReady()`\n   * callback.\n   */\n  abstract readonly elementType: Class;\n\n  /**\n   * Custom element definition.\n   */\n  abstract readonly elementDef: ElementDef;\n\n  /**\n   * Mounts a component to arbitrary element.\n   *\n   * This method creates a component, but instead of creating a custom element for, it mounts it to the target\n   * `element`.\n   *\n   * It is up to the features to update the target element. They can use a `ComponentContext.mount` property to check\n   * whether the component is mounted or is constructed in standard way.\n   *\n   * The constructed component will be in disconnected state. To update its connection state either update a\n   * `ComponentMount.connected` property, or use a `connectTo()` method.\n   *\n   * @param element  Target element to mount new component to.\n   *\n   * @returns New component mount.\n   *\n   * @throws Error If target element is already bound to some component.\n   */\n  abstract mountTo(element: any): ComponentMount<T>;\n\n  /**\n   * Connects a component to arbitrary element.\n   *\n   * This method does the same as `mountTo()`, but also marks the mounted component as connected.\n   *\n   * @param element  Target element to mount new component to.\n   *\n   * @returns New component mount.\n   *\n   * @throws Error If target element is already bound to some component.\n   */\n  connectTo(element: any): ComponentMount<T> {\n\n    const mount = this.mountTo(element);\n\n    mount.connected = true;\n\n    return mount;\n  }\n\n}\n","/**\n * @module @wesib/wesib\n */\nimport { SingleContextKey, SingleContextRef } from 'context-values';\n\n/**\n * A window the components bootstrap is performed against.\n *\n * @category Core\n */\nexport type BootstrapWindow = Window & typeof globalThis;\n\n/**\n * A key of bootstrap context value containing a window instance the bootstrap is performed against.\n *\n * Target value defaults to current window.\n *\n * @category Core\n */\nexport const BootstrapWindow: SingleContextRef<BootstrapWindow> = (/*#__PURE__*/ new SingleContextKey(\n    'window',\n    {\n      byDefault() {\n        return window;\n      },\n    },\n));\n","/**\n * @module @wesib/wesib\n */\nimport { SingleContextKey, SingleContextRef } from 'context-values';\nimport { BootstrapWindow } from './bootstrap-window';\n\n/**\n * A window (e.g. DOM) element all bootstrapped components belong to.\n *\n * @category Core\n */\nexport type BootstrapRoot = any;\n\n/**\n * A key of bootstrap context value containing a bootstrap root.\n *\n * Target value defaults to document body of [[BootstrapWindow]].\n *\n * @category Core\n */\nexport const BootstrapRoot: SingleContextRef<BootstrapRoot> = (/*#__PURE__*/ new SingleContextKey(\n    'bootstrap-root',\n    {\n      byDefault(ctx) {\n        return ctx.get(BootstrapWindow).document.body;\n      },\n    },\n));\n","/**\n * @module @wesib/wesib\n */\nimport { SingleContextKey, SingleContextRef } from 'context-values';\nimport { NamespaceAliaser } from 'namespace-aliaser';\n\n/**\n * Namespace aliaser used by default.\n *\n * Maps namespaces to their unique aliases.\n *\n * @category Core\n */\nexport type DefaultNamespaceAliaser = NamespaceAliaser;\n\n/**\n * A key of bootstrap context value containing the default namespace aliaser.\n *\n * @category Core\n */\nexport const DefaultNamespaceAliaser: SingleContextRef<DefaultNamespaceAliaser> =\n    (/*#__PURE__*/ new SingleContextKey<DefaultNamespaceAliaser>('default-namespace-aliaser'));\n","/**\n * @internal\n */\nexport function isArray<T>(value: T | T[]): value is T[];\n\n/**\n * @internal\n */\nexport function isArray<T>(value: T | readonly T[]): value is readonly T[];\n\nexport function isArray<T>(value: T | readonly T[]): value is T[] {\n  return Array.isArray(value);\n}\n","/**\n * @module @wesib/wesib\n */\nimport { AIterable } from 'a-iterable';\nimport { isArray } from './types.impl';\n\n/**\n * @category Utility\n */\nexport class ArraySet<T> extends AIterable<T> {\n\n  readonly items: Set<T>;\n\n  constructor(value?: T | readonly T[]) {\n    super();\n    this.items = value == null ? new Set() : isArray(value) ? new Set(value) : new Set([value]);\n  }\n\n  get value(): T | T[] | undefined {\n    switch (this.items.size) {\n    case 0: return;\n    case 1: return this.items[Symbol.iterator]().next().value;\n    default: return [...this.items];\n    }\n  }\n\n  [Symbol.iterator]() {\n    return this.items[Symbol.iterator]();\n  }\n\n  add(...items: T[]): this {\n    items.forEach(item => this.items.add(item));\n    return this;\n  }\n\n  get size(): number {\n    return this.items.size;\n  }\n\n  merge(items: readonly T[] | T | undefined): this {\n    if (items == null) {\n      return this;\n    }\n    if (isArray(items)) {\n      return this.add(...items);\n    }\n    return this.add(items);\n  }\n\n}\n","/**\n * @module @wesib/wesib\n */\n/**\n * Arbitrary class constructor.\n *\n * @category Utility\n * @typeparam T  A type of object.\n */\nexport interface Class<T extends object = any> extends Function {\n  new(...args: any[]): T;\n  prototype: T;\n}\n\n/**\n * Detects super class of the given class optionally satisfying the given criteria.\n *\n * Traverses all class ancestors until reaches the one satisfying the given criteria, or stops when there is no more\n * ancestors.\n *\n * @category Utility\n * @param type  The class constructor to find super class of.\n * @param satisfying  The criteria of super class matching. It is a function accepting a super class constructor\n * as the only parameter and returning `true` if the given super class matches, or `false` otherwise. Always returns\n * `true` by default.\n *\n * @return A super class `satisfying` the given criteria, or `undefined` if there is no such super class, or there is no\n * super class at all (e.g. when `Object` is passed in).\n */\nexport function superClassOf(type: Class, satisfying: (type: Class) => boolean = () => true): Class | undefined {\n\n  const prototype = Object.getPrototypeOf(type.prototype);\n\n  if (prototype == null) {\n    return;\n  }\n\n  const superType = prototype.constructor as Class;\n\n  if (satisfying(superType)) {\n    return superType;\n  }\n\n  return superClassOf(superType, satisfying);\n}\n","/**\n * @module @wesib/wesib\n */\n/**\n * Merges two functions by calling one after another.\n *\n * Optionally merges function call results.\n *\n * @category Utility\n * @typeparam P  Function parameter types as tuple.\n * @typeparam R  A type of function result.\n * @typeparam T  A type if `this` object expected by function.\n * @param first  The first function to call.\n * @param second  The second function to call.\n * @param merge  Optional function call results merger. Accepts two function results as arguments and returns the final\n * result. When omitted the first function call result is ignored and the second function's call result is returned.\n *\n * @return A function that calls both of the given ones and merges their results. If one of the functions is absent,\n * then just returns another one. If both are absent, then returns `undefined`.\n */\nexport function mergeFunctions<P extends any[], R, T>(\n    first: (this: T, ...args: P) => R,\n    second: ((this: T, ...args: P) => R) | undefined,\n    merge: (first: R, second: R) => R,\n): (this: T, ...args: P) => R;\n\nexport function mergeFunctions<P extends any[], R, T>(\n    first: ((this: T, ...args: P) => R) | undefined,\n    second: (this: T, ...args: P) => R,\n    merge?: (first: R, second: R) => R,\n): (this: T, ...args: P) => R;\n\nexport function mergeFunctions<P extends any[], R, T>(\n    first: ((this: T, ...args: P) => R) | undefined,\n    second: ((this: T, ...args: P) => R) | undefined,\n    merge?: (first: R, second: R) => R,\n): ((this: T, ...args: P) => R) | undefined;\n\nexport function mergeFunctions<P extends any[], R, T>(\n    first: ((this: T, ...args: P) => R) | undefined,\n    second: ((this: T, ...args: P) => R) | undefined,\n    merge: (first: R, second: R) => R = (_f, s) => s,\n): ((this: T, ...args: P) => R) | undefined {\n  if (!first) {\n    return second;\n  }\n  if (!second) {\n    return first;\n  }\n  return function(this: T, ...args: P) {\n    return merge(\n        first.apply(this, args),\n        second.apply(this, args),\n    );\n  };\n}\n","/**\n * Checks whether the given DOM node is element.\n *\n * @category Utility\n * @param node  A DOM node to check.\n *\n * @returns `true` is `node` is element, or `false` otherwise.\n */\nexport function isElement(node: Node): node is Element {\n  return node.nodeType === Node.ELEMENT_NODE;\n}\n","/**\n * @module @wesib/wesib\n */\nimport { flatMapIt, mapIt } from 'a-iterable';\nimport { asis } from 'call-thru';\nimport { Class, superClassOf } from './classes';\n\n/**\n * @category Utility\n */\nexport abstract class MetaAccessor<M, S = M> {\n\n  readonly symbol: symbol;\n\n  protected constructor(symbol: symbol) {\n    this.symbol = symbol;\n  }\n\n  own(type: Class): M | undefined {\n    return type.hasOwnProperty(this.symbol) ? (type as any)[this.symbol] : undefined;\n  }\n\n  of(type: Class): M | undefined {\n\n    const ownDef: M | undefined = this.own(type);\n    const superType = superClassOf(type);\n    const superDef = superType && this.of(superType);\n\n    return ownDef ? (superDef ? this.merge([superDef, ownDef]) : ownDef) : superDef;\n  }\n\n  define<C extends Class>(type: C, sources: Iterable<S>): C {\n\n    const prevMeta = this.own(type);\n    const updates = mapIt(sources, source => this.meta(source, type));\n    const newMeta: M = this.merge(prevMeta ? flatMapIt([[prevMeta], updates], asis) : updates);\n\n    Object.defineProperty(\n        type,\n        this.symbol,\n        {\n          configurable: true,\n          value: newMeta,\n        },\n    );\n\n    return type;\n  }\n\n  abstract merge(metas: Iterable<M>): M;\n\n  protected abstract meta(source: S, type: Class): M;\n\n}\n","/**\n * @module @wesib/wesib\n */\n/**\n * @category Utility\n */\nexport class PromiseResolver<T = void> {\n\n  readonly promise: Promise<T>;\n  private _resolve!: (value: T) => void;\n  private _reject!: (error: any) => void;\n\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n    });\n  }\n\n  resolve(value: T) {\n    this._resolve(value);\n  }\n\n  reject(error: any) {\n    this._reject(error);\n  }\n\n}\n","/**\n * @module @wesib/wesib\n */\nimport { itsReduction } from 'a-iterable';\nimport { BootstrapSetup } from '../boot';\nimport { ArraySet, Class, mergeFunctions, MetaAccessor } from '../common';\nimport { FeatureContext } from './feature-context';\n\n/**\n * A key of a property holding a feature definition within its class constructor.\n *\n * @category Core\n */\nexport const FeatureDef__symbol = (/*#__PURE__*/ Symbol('feature-def'));\n\n/**\n * Feature definition.\n *\n * This can be one of:\n * - feature definition options object,\n * - feature definition holder, or\n * - feature definition factory.\n *\n * @category Core\n */\nexport type FeatureDef =\n    | FeatureDef.Options\n    | FeatureDef.Holder\n    | FeatureDef.Factory;\n\nexport namespace FeatureDef {\n\n  /**\n   * Feature definition options.\n   */\n  export interface Options {\n\n    readonly [FeatureDef__symbol]?: undefined;\n\n    /**\n     * Features this one requires.\n     */\n    readonly needs?: Class | readonly Class[];\n\n    /**\n     * Features this one provides.\n     *\n     * The feature always provides itself.\n     */\n    readonly has?: Class | readonly Class[];\n\n    /**\n     * Sets up bootstrap.\n     *\n     * This method is called before bootstrap context created.\n     *\n     * @param setup  Bootstrap setup.\n     */\n    setup?(setup: BootstrapSetup): void;\n\n    /**\n     * Bootstraps this feature by calling the given bootstrap context constructed.\n     *\n     * @param context  Feature initialization context.\n     */\n    init?(context: FeatureContext): void;\n\n  }\n\n  /**\n   * Feature definition holder.\n   */\n  export interface Holder {\n\n    /**\n     * The feature definition this holder contains.\n     */\n    readonly [FeatureDef__symbol]: FeatureDef;\n\n  }\n\n  /**\n   * Feature definition factory.\n   */\n  export interface Factory {\n\n    /**\n     * Builds feature definition.\n     *\n     * @param featureType  A feature class constructor to build definition for.\n     *\n     * @returns Built feature definition.\n     */\n    [FeatureDef__symbol](featureType: Class): FeatureDef;\n\n  }\n\n}\n\nclass FeatureMeta extends MetaAccessor<FeatureDef.Options, FeatureDef> {\n\n  constructor() {\n    super(FeatureDef__symbol);\n  }\n\n  merge(defs: Iterable<FeatureDef.Options>): FeatureDef.Options {\n    return itsReduction<FeatureDef.Options, FeatureDef.Options>(\n        defs,\n        (prev, def) => ({\n          needs: new ArraySet(prev.needs).merge(def.needs).value,\n          has: new ArraySet(prev.has).merge(def.has).value,\n          setup: mergeFunctions<[BootstrapSetup], void, Class>(prev.setup, def.setup),\n          init: mergeFunctions<[FeatureContext], void, Class>(prev.init, def.init),\n        }),\n        {},\n    );\n  }\n\n  meta(source: FeatureDef, type: Class): FeatureDef.Options {\n\n    const def = source[FeatureDef__symbol];\n\n    return def == null\n        ? source as FeatureDef.Options\n        : this.meta(\n            typeof def === 'function' ? (source as FeatureDef.Factory)[FeatureDef__symbol](type) : def,\n            type,\n        );\n  }\n\n}\n\nconst meta = (/*#__PURE__*/ new FeatureMeta());\n\nconst noFeatureDef: FeatureDef.Factory = {\n  [FeatureDef__symbol]() {\n    return {};\n  },\n};\n\n/**\n * @category Core\n */\nexport const FeatureDef = {\n\n  /**\n   * Extracts feature definition options from its type.\n   *\n   * @param featureType  Target feature class constructor.\n   *\n   * @returns Feature definition options. May be empty when there is no feature definition found in the given\n   * `featureType`.\n   */\n  of(this: void, featureType: Class): FeatureDef.Options {\n    return meta.of(featureType) || {};\n  },\n\n  /**\n   * Builds feature definition options for the given feature class.\n   *\n   * @param featureType  Target feature class constructor.\n   * @param def  A feature definition.\n   *\n   * @returns Feature definition options.\n   */\n  for(this: void, featureType: Class, def: FeatureDef): FeatureDef.Options {\n    return meta.meta(def, featureType);\n  },\n\n  /**\n   * Merges multiple feature definition options.\n   *\n   * @param defs  Feature definition options to merge.\n   *\n   * @returns Merged feature definition options.\n   */\n  merge(this: void, ...defs: readonly FeatureDef.Options[]): FeatureDef.Options {\n    return meta.merge(defs);\n  },\n\n  /**\n   * Merges multiple feature definitions.\n   *\n   * @param defs  Feature definitions to merge.\n   *\n   * @returns Merged feature definition.\n   */\n  all(this: void, ...defs: readonly FeatureDef[]): FeatureDef {\n    return itsReduction<FeatureDef, FeatureDef.Factory>(\n        defs,\n        (prev, def) => ({\n          [FeatureDef__symbol](featureType: Class) {\n            return FeatureDef.merge(\n                FeatureDef.for(featureType, prev),\n                FeatureDef.for(featureType, def),\n            );\n          },\n        }),\n        noFeatureDef,\n    );\n  },\n\n  /**\n   * Defines a feature.\n   *\n   * Either creates new or extends an existing feature definition and stores it under `[FeatureDef__symbol]` key.\n   *\n   * @typeparam T  Feature type.\n   * @param featureType  Feature class constructor.\n   * @param defs  Feature definitions.\n   *\n   * @returns The `type` instance.\n   */\n  define<T extends Class>(this: void, featureType: T, ...defs: readonly FeatureDef[]): T {\n    return meta.define(featureType, defs);\n  },\n\n};\n","/**\n * @module @wesib/wesib\n */\nimport { Class, TypedClassDecorator } from '../common';\nimport { FeatureDef } from './feature-def';\n\n/**\n * Feature class decorator.\n *\n * Decorate a class with this decorator to define it as a feature like this:\n * ```TypeScript\n * @Feature({ needs: [OtherFeature, MyComponent] })\n * class MyFeature {\n *   // ...\n * }\n * ```\n *\n * Such feature can be passed to [[bootstrapComponents]] function or referenced by other features.\n *\n * This is an alternative to direct call to [[FeatureDef.define]] method.\n *\n * @category Core\n * @typeparam T  A type of decorated feature class.\n * @param defs  Feature definitions.\n *\n * @returns A feature class decorator.\n */\nexport function Feature<T extends Class = any>(...defs: FeatureDef[]): TypedClassDecorator<T> {\n  return (type: T) => FeatureDef.define(type, ...defs);\n}\n","/**\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKey__symbol, ContextValueSpec, SingleContextKey } from 'context-values';\nimport { OnEvent } from 'fun-events';\nimport { BootstrapContext, BootstrapSetup } from '../boot';\nimport { Class } from '../common';\nimport { ComponentContext } from '../component';\nimport { ComponentClass, ComponentFactory, DefinitionContext, DefinitionSetup } from '../component/definition';\nimport { FeatureRef } from './feature-ref';\n\nconst FeatureContext_key = new SingleContextKey<FeatureContext>('feature-context');\n\n/**\n * Feature initialization context.\n *\n * @category Core\n */\nexport abstract class FeatureContext extends BootstrapContext implements BootstrapSetup {\n\n  /**\n   * A key of feature context value containing the feature context itself.\n   */\n  static get [ContextKey__symbol](): ContextKey<FeatureContext> {\n    return FeatureContext_key;\n  }\n\n  /**\n   * Feature class this context is created for.\n   */\n  abstract readonly feature: Class;\n\n  abstract readonly whenReady: OnEvent<[FeatureContext]>;\n\n  abstract readonly onDefinition: OnEvent<[DefinitionContext]>;\n\n  abstract readonly onComponent: OnEvent<[ComponentContext]>;\n\n  /**\n   * Provides bootstrap context value.\n   *\n   * Note that this happens when bootstrap context already exists. To provide a value before bootstrap context created\n   * a [[BootstrapSetup.provide]] method can be used.\n   *\n   * @typeparam Deps  Dependencies tuple type.\n   * @typeparam Src  Source value type.\n   * @typeparam Seed  Value seed type.\n   * @param spec  Context value specifier.\n   *\n   * @returns A function that removes the given context value specifier when called.\n   */\n  abstract provide<Deps extends any[], Src, Seed>(\n      spec: ContextValueSpec<BootstrapContext, any, Deps, Src, Seed>,\n  ): () => void;\n\n  abstract perDefinition<Deps extends any[], Src, Seed>(\n      spec: ContextValueSpec<DefinitionContext, any, Deps, Src, Seed>,\n  ): () => void;\n\n  abstract perComponent<Deps extends any[], Src, Seed>(\n      spec: ContextValueSpec<ComponentContext, any, Deps, Src, Seed>,\n  ): () => void;\n\n  abstract setupDefinition<T extends object>(componentType: ComponentClass<T>): OnEvent<[DefinitionSetup]>;\n\n  /**\n   * Defines a component.\n   *\n   * Creates a custom element according to component definition, and registers it with custom elements registry.\n   *\n   * Note that custom element definition will happen only when all features configuration complete.\n   *\n   * @typeparam T  A type of component.\n   * @param componentType  Component class constructor.\n   *\n   * @return Custom element class constructor registered as custom element.\n   *\n   * @throws TypeError  If `componentType` does not contain a component definition.\n   */\n  abstract define<T extends object>(componentType: ComponentClass<T>): void;\n\n  whenDefined<C extends object>(componentType: ComponentClass<C>): Promise<ComponentFactory<C>> {\n    return this.get(BootstrapContext).whenDefined(componentType);\n  }\n\n  load(feature: Class): FeatureRef {\n    return this.get(BootstrapContext).load(feature);\n  }\n\n}\n","/**\n * @module @wesib/wesib\n */\nimport { Class } from '../common';\n\n/**\n * Feature need.\n *\n * Indicates why one feature needs another one. The reason can be one of:\n *\n * - `needs` when feature {@link FeatureDef.Options.needs depends} on another one, or\n * - `has` when feature {@link FeatureDef.Options.has provides} another one.\n *\n * @category Core\n */\nexport type FeatureNeed = [Class, 'needs' | 'has', Class];\n\n/**\n * An error in feature needs. I.e. circular dependency.\n *\n * @category Core\n */\nexport class FeatureNeedsError extends Error {\n\n  /**\n   * Feature needs causing this error.\n   */\n  readonly needs: readonly FeatureNeed[];\n\n  /**\n   * Constructs feature needs error.\n   *\n   * @param needs  Feature needs causing the error.\n   */\n  constructor(needs: readonly FeatureNeed[]) {\n    super(\n        'Circular feature needs: ' + needs.reduce(\n        (prev, [feature, reason, need]) =>\n            (prev ? prev : feature.name) + ` ${reason} ${need.name}`,\n        '',\n        ),\n    );\n    this.needs = needs;\n  }\n\n}\n","/**\n * @module @wesib/wesib\n */\nimport { itsReduction, mapIt } from 'a-iterable';\nimport { isQualifiedName, QualifiedName } from 'namespace-aliaser';\nimport { Class, mergeFunctions, MetaAccessor } from '../common';\nimport { FeatureDef, FeatureDef__symbol } from '../feature';\nimport { ComponentClass, DefinitionContext, DefinitionSetup, ElementDef } from './definition';\n\n/**\n * A key of a property holding a component definition within its class constructor.\n *\n * @category Core\n */\nexport const ComponentDef__symbol = (/*#__PURE__*/ Symbol('component-def'));\n\n/**\n * Component definition.\n *\n * A custom element class will be created for each registered component in accordance to this definition.\n *\n * This can be one of:\n * - custom element name (possibly qualified),\n * - component definition options,\n * - component definition holder,\n * - component definition factory,\n * - feature definition holder, or\n * - feature definition factory.\n *\n * @category Core\n * @typeparam T  A type of component.\n */\nexport type ComponentDef<T extends object = any> =\n    | QualifiedName\n    | ComponentDef.Options<T>\n    | ComponentDef.Holder<T>\n    | ComponentDef.Factory<T>\n    | FeatureDef.Holder\n    | FeatureDef.Factory;\n\nexport namespace ComponentDef {\n\n  /**\n   * Component definition options.\n   */\n  export interface Options<T extends object = any> {\n\n    readonly [ComponentDef__symbol]?: undefined;\n\n    /**\n     * Custom element name.\n     *\n     * The name may belong to some namespace to avoid naming conflicts. I.e. it can be either a string, or\n     * name/namespace tuple.\n     *\n     * When omitted an anonymous component will be registered. Such component is not bound to custom element, but it\n     * still can be mounted.\n     */\n    readonly name?: QualifiedName;\n\n    /**\n     * Existing element to extend by custom one.\n     */\n    readonly extend?: ElementDef.Extend;\n\n    /**\n     * Additional feature definition options.\n     */\n    readonly feature?: FeatureDef.Options;\n\n    /**\n     * Sets up component definition.\n     *\n     * This method is called before component definition context constructed.\n     *\n     * @param setup  Component definition setup.\n     */\n    setup?(setup: DefinitionSetup<T>): void;\n\n    /**\n     * Defines this component by calling the given component definition context methods.\n     *\n     * This function is called before the custom element is defined.\n     *\n     * @param context  Component definition context.\n     */\n    define?(context: DefinitionContext<T>): void;\n\n  }\n\n  /**\n   * Component definition holder.\n   *\n   * @typeparam T  A type of component.\n   */\n  export interface Holder<T extends object = any> {\n\n    /**\n     * The component definition this holder contains.\n     */\n    readonly [ComponentDef__symbol]: ComponentDef<T>;\n\n  }\n\n  /**\n   * Component definition factory.\n   *\n   * @typeparam T  A type of component.\n   */\n  export interface Factory<T extends object = any> {\n\n    /**\n     * Builds component definition.\n     *\n     * @param componentType  A component class constructor to build definition for.\n     *\n     * @returns Built component definition.\n     */\n    [ComponentDef__symbol](componentType: ComponentClass<T>): ComponentDef<T>;\n\n  }\n\n}\n\nclass ComponentMeta extends MetaAccessor<ComponentDef.Options, ComponentDef> {\n\n  constructor() {\n    super(ComponentDef__symbol);\n  }\n\n  merge<T extends object>(defs: Iterable<ComponentDef.Options<T>>): ComponentDef.Options<T> {\n    return itsReduction<ComponentDef.Options<T>, ComponentDef.Options<T>>(\n        defs,\n        (prev, def) => ({\n          ...prev,\n          ...def,\n          setup: mergeFunctions(prev.setup, def.setup),\n          define: mergeFunctions(prev.define, def.define),\n          feature: prev.feature\n              ? def.feature ? FeatureDef.merge(prev.feature, def.feature) : prev.feature\n              : def.feature,\n        }),\n        {},\n    );\n  }\n\n  meta<T extends object>(source: ComponentDef<T>, componentType: ComponentClass<T>): ComponentDef.Options<T> {\n\n    const def = (source as any)[ComponentDef__symbol];\n\n    if (def != null) {\n      return this.meta(\n          typeof def === 'function' ? (source as ComponentDef.Factory<T>)[ComponentDef__symbol](componentType) : def,\n          componentType,\n      );\n    }\n    if ((source as any)[FeatureDef__symbol] != null) {\n      return {\n        feature: FeatureDef.for(componentType, source as FeatureDef),\n      };\n    }\n    if (isQualifiedName(source)) {\n      return { name: source };\n    }\n\n    return source as ComponentDef.Options;\n  }\n\n}\n\nconst meta = (/*#__PURE__*/ new ComponentMeta());\nconst componentDefined = (/*#__PURE__*/ Symbol('component-defined'));\nconst noComponentDef: ComponentDef.Factory = {\n  [ComponentDef__symbol]() {\n    return {};\n  },\n};\n\n/**\n * @category Core\n */\nexport const ComponentDef = {\n\n  /**\n   * Extracts component definition options from its type.\n   *\n   * @typeparam T  A type of component.\n   * @param componentType  Target component class constructor.\n   *\n   * @returns Component definition options. May be empty if there is not definition attached to component type.\n   */\n  of<T extends object>(this: void, componentType: ComponentClass<T>): ComponentDef.Options<T> {\n    return meta.of(componentType) as ComponentDef.Options<T> || {};\n  },\n\n  /**\n   * Builds component definition options for the given component class.\n   *\n   * @param componentType  Target component class constructor.\n   * @param source  A source of component definition.\n   *\n   * @returns Component definition.\n   */\n  for<T extends object>(\n      this: void,\n      componentType: ComponentClass<T>,\n      source: ComponentDef<T>,\n  ): ComponentDef.Options<T> {\n    return meta.meta(source, componentType);\n  },\n\n  /**\n   * Merges multiple component definition options.\n   *\n   * @typeparam T  A type of component.\n   * @param defs  Component definition options to merge.\n   *\n   * @returns Merged component definition options.\n   */\n  merge<T extends object>(this: void, ...defs: ComponentDef.Options<T>[]): ComponentDef.Options<T> {\n    return meta.merge(defs);\n  },\n\n  /**\n   * Merges multiple component definitions.\n   *\n   * @typeparam T  A type of component.\n   * @param defs  Component definitions to merge.\n   *\n   * @returns Merged component definition.\n   */\n  all<T extends object>(this: void, ...defs: ComponentDef<T>[]): ComponentDef<T> {\n    return itsReduction<ComponentDef<T>, ComponentDef.Factory<T>>(\n        defs,\n        (prev, def) => ({\n          [ComponentDef__symbol](componentType: ComponentClass<T>) {\n            return ComponentDef.merge(\n                ComponentDef.for(componentType, prev),\n                ComponentDef.for(componentType, def),\n            );\n          },\n        }),\n        noComponentDef,\n    );\n  },\n\n  /**\n   * Defines a component.\n   *\n   * Either assigns new or extends an existing component definition and stores it under [[ComponentDef__symbol]] key.\n   *\n   * Note that each component is also a feature able to register itself, so it can be passed directly to\n   * [[bootstrapComponents]] function or added as a requirement of another feature.\n   *\n   * @typeparam T  A type of component.\n   * @param componentType  Component class constructor.\n   * @param defs  Component definitions.\n   *\n   * @returns The `type` instance.\n   */\n  define<T extends ComponentClass>(\n      this: void,\n      componentType: T,\n      ...defs: ComponentDef<InstanceType<T>>[]\n  ): T {\n\n    const def = meta.merge(mapIt(defs, source => ComponentDef.for(componentType, source)));\n\n    meta.define(componentType, [def]);\n    FeatureDef.define(componentType, ComponentDef.featureDef(def));\n\n    return componentType;\n  },\n\n  /**\n   * Builds feature definition for the given component definition.\n   *\n   * @param def  Component definition options.\n   *\n   * @returns Feature definition that defines the component and applies other definitions from\n   * [[ComponentDef.Options.feature]] property.\n   */\n  featureDef<T extends object>(this: void, def: ComponentDef.Options<T>): FeatureDef {\n    return {\n      [FeatureDef__symbol](featureType: Class) {\n\n        const registrar: FeatureDef = {\n          init(context) {\n            if (context.feature === featureType && !featureType.hasOwnProperty(componentDefined)) {\n              Object.defineProperty(featureType, componentDefined, { value: 1 });\n              context.define(featureType);\n            }\n          },\n        };\n        const { feature } = def;\n\n        return feature ? FeatureDef.merge(feature, registrar) : registrar;\n      },\n    };\n  },\n\n};\n","/**\n * @module @wesib/wesib\n */\nimport { TypedClassDecorator } from '../common';\nimport { ComponentDef } from './component-def';\nimport { ComponentClass } from './definition';\n\n/**\n * Component class decorator.\n *\n * Decorate a class with this decorator to define a component like this:\n * ```TypeScript\n * @Component({ name: 'my-element' })\n * class MyComponent {\n *   // ...\n * }\n * ```\n *\n * Such component can be registered with [[FeatureContext.define]] method or used as a feature, e.g. passed to\n * [[bootstrapComponents]] function, or added to [[FeatureDef.Options.needs]] property of another feature.\n *\n * This is an alternative to direct call to [[ComponentDef.Options.define]] method.\n *\n * @category Core\n * @typeparam T  A type of decorated component class.\n * @param defs  Component definitions.\n *\n * @returns A component class decorator.\n */\nexport function Component<T extends ComponentClass = any>(\n    ...defs: ComponentDef<InstanceType<T>>[]\n): TypedClassDecorator<T> {\n  return (type: T) => ComponentDef.define(type, ...defs);\n}\n","import { SingleContextKey } from 'context-values';\nimport { ComponentContext } from './component-context';\n\n/**\n * @internal\n */\nexport const ComponentContext__key = (/*#__PURE__*/ new SingleContextKey<ComponentContext>('component-context'));\n","import { SingleContextKey } from 'context-values';\nimport { DomEventDispatcher, OnDomEvent } from 'fun-events';\nimport { ComponentContext } from './component-context';\nimport { ComponentEventDispatcher } from './component-event';\n\n/**\n * @internal\n */\nexport const ComponentEventDispatcher__key = (/*#__PURE__*/ new SingleContextKey<ComponentEventDispatcher>(\n    'component-event-dispatcher',\n    {\n      byDefault() {\n        return {\n          dispatch(context: ComponentContext, event: Event): boolean {\n            return context.element.dispatchEvent(event);\n          },\n          on<E extends Event>(context: ComponentContext, type: string): OnDomEvent<E> {\n\n            const dispatcher = new DomEventDispatcher(context.element);\n\n            return dispatcher.on(type);\n          },\n        };\n      },\n    },\n));\n","/**\n * @module @wesib/wesib\n */\nimport { SingleContextKey, SingleContextRef } from 'context-values';\nimport { ComponentContext__key } from './component-context.key.impl';\n\n/**\n * Component content root node.\n *\n * @category Core\n */\nexport type ContentRoot = ParentNode;\n\n/**\n * A key of component context value containing a component root element.\n *\n * This is an element itself by default. But can be overridden e.g. by {@link AttachShadow @AttachShadow} decorator.\n *\n * @category Core\n */\nexport const ContentRoot: SingleContextRef<ContentRoot> = (/*#__PURE__*/ new SingleContextKey<ContentRoot>(\n    'content-root',\n    {\n      byDefault(ctx) {\n        return ctx.get(ComponentContext__key).element;\n      },\n    },\n));\n","/**\n * @module @wesib/wesib\n */\nimport { noop, valueProvider } from 'call-thru';\nimport { FnContextKey, FnContextRef } from 'context-values';\nimport { StatePath } from 'fun-events';\n\n/**\n * Component state updater function.\n *\n * @category Core\n */\nexport type StateUpdater =\n/**\n * @typeparam V  Updated value type\n * @param path  Updated state node path.\n * @param newValue  New value.\n * @param oldValue  Replaced value.\n */\n    <V>(this: void, path: StatePath, newValue: V, oldValue: V) => void;\n\n/**\n * A key of component context value containing a component state updates receiver function.\n *\n * Features are calling this function by default when component state changes, e.g. attribute value or DOM property\n * modified.\n *\n * Note that this value is not provided, unless the `StateSupport` feature is enabled.\n *\n * @category Core\n */\nexport const StateUpdater: FnContextRef<Parameters<StateUpdater>> = (/*#__PURE__*/ new FnContextKey(\n    'state-updater',\n    {\n      byDefault: valueProvider(noop),\n    },\n));\n","/**\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKey__symbol, ContextValues } from 'context-values';\nimport { EventSupply, OnDomEvent, OnEvent, StatePath } from 'fun-events';\nimport { BootstrapContext__key } from '../boot/bootstrap-context.key.impl';\nimport { ComponentContext__key } from './component-context.key.impl';\nimport { ComponentEventDispatcher__key } from './component-event.key.impl';\nimport { ComponentMount } from './component-mount';\nimport { ContentRoot } from './content-root';\nimport { ComponentClass } from './definition';\nimport { StateUpdater } from './state-updater';\n\n/**\n * A key of a custom element and component properties containing a reference to component context.\n *\n * @category Core\n */\nexport const ComponentContext__symbol = (/*#__PURE__*/ Symbol('component-context'));\n\n/**\n * Component context.\n *\n * Passed to component constructor as its only parameter.\n *\n * Extends `ContextValues` interface. The values are provided by corresponding providers registered with\n * [[BootstrapSetup.perComponent]] and [[DefinitionSetup.perComponent]] methods.\n *\n * @category Core\n * @typeparam T  A type of component.\n */\nexport abstract class ComponentContext<T extends object = any> extends ContextValues {\n\n  /**\n   * A key of component context value containing the component context instance itself.\n   */\n  static get [ContextKey__symbol](): ContextKey<ComponentContext> {\n    return ComponentContext__key;\n  }\n\n  /**\n   * Component class constructor.\n   */\n  abstract readonly componentType: ComponentClass<T>;\n\n  /**\n   * Custom element constructed for the component according to its type.\n   *\n   * E.g. `HTMLElement` instance.\n   */\n  abstract readonly element: any;\n\n  /**\n   * A component instance.\n   *\n   * It is an error accessing this property before the component is created, e.g. from inside of component constructor\n   * or {@link DefinitionContext.whenComponent component instantiation event} receiver. A [[whenReady]] callback could\n   * be utilized to work this around.\n   */\n  abstract readonly component: T;\n\n  /**\n   * Component mount.\n   *\n   * This is defined when component is mounted to arbitrary element by [[ComponentFactory.mountTo]]. Ot is `undefined`\n   * for components created in standard way.\n   */\n  abstract readonly mount: ComponentMount<T> | undefined;\n\n  /**\n   * Whether the custom element is connected.\n   *\n   * This becomes `true` right before [[whenOn]] event is sent, and becomes `false` right before [[whenOff]] event is\n   * sent.\n   */\n  abstract readonly connected: boolean;\n\n  /**\n   * An `OnEvent` sender of custom element connection events.\n   *\n   * The registered receivers are called when custom element is connected, i.e. its `connectedCallback()` method is\n   * called. If component is connected already the receiver is called immediately.\n   *\n   * Sends a connection supply that is cut off once custom element is disconnected.\n   */\n  abstract readonly whenOn: OnEvent<[EventSupply]>;\n\n  /**\n   * An `OnEvent` sender of custom element disconnection events.\n   *\n   * The registered receivers are called when custom element is disconnected, i.e. its `disconnectedCallback()` method\n   * is called. If component is ready but disconnected, the receiver is called immediately.\n   */\n  abstract readonly whenOff: OnEvent<[]>;\n\n  /**\n   * An `OnEvent` sender of component readiness event.\n   *\n   * The component is constructed shortly after custom element. So the component may not exist when requested\n   * e.g. inside component constructor or {@link DefinitionContext.whenComponent component instantiation event}\n   * receiver. The registered receiver will be notified when the component is constructed.\n   *\n   * If the component is constructed already, the receiver will be notified immediately.\n   */\n  abstract readonly whenReady: OnEvent<[this]>;\n\n  /**\n   * An `OnEvent` sender of component destruction reason event.\n   *\n   * The registered receiver is notified when [[destroy]] method is called. If the component is destroyed already\n   * the receiver is notified immediately.\n   */\n  abstract readonly whenDestroyed: OnEvent<[any]>;\n\n  /**\n   * Updates component's state.\n   *\n   * This is a shorthand for invoking a component {@link StateUpdater state updater} .\n   *\n   * Note that state update has no effect unless [[StateSupport]] feature is enabled or [[StateUpdater]] context value\n   * is provided by other means.\n   *\n   * @typeparam V  A type of changed value.\n   * @param key  Changed value key.\n   * @param newValue  New value.\n   * @param oldValue  Previous value.\n   */\n  readonly updateState: StateUpdater = updateComponentState.bind(this);\n\n  /**\n   * Extracts component context from its custom element or from component itself.\n   *\n   * @param element  Custom element instance created for the component or the component itself.\n   *\n   * @return Component context reference stored under [[ComponentContext__symbol]] key.\n   *\n   * @throws TypeError  When the given `element` does not contain component context reference.\n   */\n  static of<T extends object>(element: any): ComponentContext<T> {\n\n    const context = element[ComponentContext__symbol];\n\n    if (!context) {\n      throw TypeError(`No component context found in ${element}`);\n    }\n\n    return context;\n  }\n\n  /**\n   * Component content root.\n   *\n   * This is a shorthand for requesting a {@link ContentRoot content root} from component context.\n   */\n  get contentRoot(): ContentRoot {\n    return this.get(ContentRoot);\n  }\n\n  /**\n   * Returns a `super` property value inherited from custom element parent.\n   *\n   * @param key  Target property key.\n   */\n  abstract elementSuper(key: PropertyKey): any;\n\n  /**\n   * Returns a DOM event producer for the given event type.\n   *\n   * This is a shorthand for invoking a component event producer function available under\n   * `[ComponentEventProducer.key]` key.\n   *\n   * @param type  An event type to listen for.\n   *\n   * @returns A producer of DOM event events of the given type.\n   */\n  on<E extends Event>(type: string): OnDomEvent<E> {\n    return this.get(ComponentEventDispatcher__key).on(this, type);\n  }\n\n  /**\n   * Dispatches an event to component element.\n   *\n   * This is a shorthand for invoking a component {@link ComponentEventDispatcher event dispatcher}.\n   *\n   * @param event  An event to dispatch.\n   */\n  dispatchEvent(event: Event): void {\n    this.get(BootstrapContext__key).get(ComponentEventDispatcher__key).dispatch(this, event);\n  }\n\n  /**\n   * Destroys the component.\n   *\n   * Removes element from the DOM tree. I.e. disconnects custom element first.\n   *\n   * After this method call the component should no longer be used.\n   *\n   * Note that component destruction is virtual. It is up to developer to decide when component is no longer needed.\n   *\n   * @param reason  Optional reason of destruction.\n   */\n  abstract destroy(reason?: any): void;\n\n}\n\nfunction updateComponentState<V>(this: ComponentContext<any>, key: StatePath, newValue: V, oldValue: V) {\n  this.get(StateUpdater)(key, newValue, oldValue);\n}\n","/**\n * @module @wesib/wesib\n */\nimport { SingleContextRef } from 'context-values';\nimport { OnDomEvent } from 'fun-events';\nimport { ComponentContext } from './component-context';\nimport { ComponentEventDispatcher__key } from './component-event.key.impl';\n\n/**\n * Component event.\n *\n * Events of this type are thrown by various services to inform on component status changes.\n *\n * It is illegal to dispatch such events for elements not bound to components. It is reasonable to dispatch events\n * using [[ComponentEventDispatcher]] available in component context.\n *\n * The following event types supported:\n * - `wesib:component` is dispatched when component is bound to element. I.e. when HTML element is upgraded to custom\n *   one defined by component, or component is mounted to element. The event is dispatched when component is connected\n *   for the first time. I.e. when element is added to the document.\n *   This event bubbles and is not cancelable.\n *\n * @category Core\n * @event ComponentEvent#wesib:component\n */\nexport class ComponentEvent extends Event {\n\n  /**\n   * Constructs component event.\n   *\n   * @param type  Event type.\n   * @param eventInitDict  Event initialization dictionary.\n   */\n  constructor(type: string, eventInitDict?: EventInit) {\n    super(type, eventInitDict);\n  }\n\n  /**\n   * Target component context.\n   */\n  get context(): ComponentContext {\n    return ComponentContext.of(this.target);\n  }\n\n}\n\n/**\n * Component event dispatcher is used to listen for and dispatch component events.\n *\n * It is available in bootstrap context context.\n *\n * By default treats a component element as event target.\n *\n * @category Core\n */\nexport interface ComponentEventDispatcher {\n\n  /**\n   * Dispatches the DOM event for the given component.\n   *\n   * @param context  Target component context.\n   * @param event  An event to dispatch.\n   *\n   * @returns `true` if either event's `cancelable` attribute value is `false` or its `preventDefault()` method was not\n   * invoked, or `false` otherwise.\n   */\n  dispatch(context: ComponentContext, event: Event): boolean;\n\n  /**\n   * Returns an `OnDomEvent` sender of DOM events of the given type.\n   *\n   * @param context  Target component context.\n   * @param type  An event type to listen for.\n   *\n   * @returns A producer of DOM event events of the given type.\n   */\n  on<E extends Event>(context: ComponentContext, type: string): OnDomEvent<E>;\n\n}\n\n/**\n * A key of bootstrap context value containing component event dispatcher.\n *\n * @category Core\n */\nexport const ComponentEventDispatcher: SingleContextRef<ComponentEventDispatcher> =\n    (/*#__PURE__*/ ComponentEventDispatcher__key);\n","/**\n * @module @wesib/wesib\n */\nimport { ContextUpKey, ContextUpRef, ContextValueOpts, ContextValues } from 'context-values';\nimport { AfterEvent, EventKeeper } from 'fun-events';\nimport { ComponentContext, ComponentContext__symbol } from '../../component';\n\n/**\n * Element adapter is a function able to convert a raw element to component. E.g. mount a component to it.\n *\n * Features may use it internally. E.g. an `AutoConnectSupport` applies it to each added DOM element.\n *\n * Multiple element adapters can be registered in bootstrap context.\n *\n * @category Core\n */\nexport type ElementAdapter =\n/**\n * @param element  Target raw element to adapt.\n *\n * @returns An adapted component's context, or `undefined` if element can not be adapted.\n */\n    (this: void, element: any) => ComponentContext | undefined;\n\nclass ElementAdapterKey extends ContextUpKey<ElementAdapter, ElementAdapter> {\n\n  constructor() {\n    super('element-adapter');\n  }\n\n  grow<Ctx extends ContextValues>(\n      opts: ContextValueOpts<\n          Ctx,\n          ElementAdapter,\n          EventKeeper<ElementAdapter[]> | ElementAdapter, AfterEvent<ElementAdapter[]>>,\n  ): ElementAdapter {\n\n    const defaultElementAdapter = (element: any) => element[ComponentContext__symbol];\n\n    let result: ElementAdapter;\n\n    opts.seed((...adapters) => {\n\n      const combined = adapters.reduce(\n          (prev, adapter) => (element: any) => prev(element) || adapter(element),\n          defaultElementAdapter,\n      );\n\n      result = combined !== defaultElementAdapter\n          ? combined\n          : opts.byDefault(() => defaultElementAdapter) || defaultElementAdapter;\n    });\n\n    return element => result(element);\n  }\n\n}\n\n/**\n * A key of bootstrap context value containing combined [[ElementAdapter]] instance.\n *\n * @category Core\n */\nexport const ElementAdapter: ContextUpRef<ElementAdapter, ElementAdapter> = (/*#__PURE__*/ new ElementAdapterKey());\n","/**\n * @module wesib/wesib\n */\nimport { filterIt, itsEach, overArray } from 'a-iterable';\nimport { FnContextKey } from 'context-values';\nimport { isElement } from '../../common';\nimport { ComponentContext__symbol, ComponentMount } from '../../component';\nimport { bootstrapDefault } from '../bootstrap-default';\nimport { ElementAdapter } from './element-adapter';\n\n/**\n * Element mutations observer.\n *\n * It is a `MutationObserver` implementation that:\n * - always observes target's children,\n * - applies {@link ElementAdapter element adapter} to added elements,\n * - tracks mounted components {@link ComponentMount.connected connection state}.\n *\n * A function constructing element observer instance could be obtained from bootstrap context.\n *\n * @category Core\n */\nexport interface ElementObserver extends MutationObserver {\n\n  /**\n   * Configures the observer callback to begin receiving notifications of changes to the DOM that match the given\n   * options.\n   * To stop the MutationObserver (so that none of its callbacks will be triggered any longer), call\n   * [[disconnect]].\n   *\n   * @param target  A DOM node within the DOM tree to watch for changes, and to be the root of a subtree of nodes\n   * to be watched.\n   * @param options  An options that describe what DOM mutations should be reported to the observer's callback.\n   */\n  observe(target: Node, options?: ElementObserverInit): void;\n\n}\n\n/**\n * A key of bootstrap context value containing a function constructing a new [[ElementObserver]] instance.\n *\n * @category Core\n */\nexport const ElementObserver: FnContextKey<[MutationCallback], ElementObserver> = (/*#__PURE__*/ new FnContextKey(\n    'element-observer',\n    {\n      byDefault: bootstrapDefault(bsContext => {\n\n        const adapter = bsContext.get(ElementAdapter);\n        class DefaultElementObserver extends MutationObserver implements ElementObserver {\n\n          constructor(callback: MutationCallback) {\n            super(mutations => {\n              mutations.forEach(mutation => {\n                itsEach(\n                    overArray(mutation.removedNodes),\n                    node => mountOf(node)?.checkConnected(),\n                );\n                itsEach(\n                    filterIt(\n                        overArray(mutation.addedNodes),\n                        isElement,\n                    ),\n                    element => adapter(element)?.mount?.checkConnected(),\n                );\n              });\n              callback(mutations, this);\n            });\n          }\n\n          observe(target: Node, options?: ElementObserverInit): void {\n            super.observe(target, { ...options, childList: true });\n          }\n\n        }\n\n        return callback => new DefaultElementObserver(callback);\n      }),\n    },\n));\n\n/**\n * Element observer initialization options.\n *\n * @category Core\n */\nexport interface ElementObserverInit extends MutationObserverInit {\n\n  /**\n   * Whether mutations to target's children are to be observed.\n   *\n   * Always `true`.\n   */\n  childList?: true;\n\n}\n\nfunction mountOf(node: any): ComponentMount | undefined {\n  return node[ComponentContext__symbol]?.mount;\n}\n","import { ComponentClass, ComponentFactory } from '../../component/definition';\n\n/**\n * @internal\n */\nexport const ComponentFactory__symbol = (/*#__PURE__*/ Symbol('component-factory'));\n\n/**\n * @internal\n */\nexport function componentFactoryOf<T extends object>(componentType: ComponentClass<T>): ComponentFactory<T> {\n\n  const factory = (componentType as any)[ComponentFactory__symbol];\n\n  if (!factory) {\n    throw new TypeError(`Component is not defined: ${componentType}`);\n  }\n\n  return factory;\n}\n","/**\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKey__symbol, ContextValues, SingleContextKey } from 'context-values';\nimport { html__naming, isQualifiedName, QualifiedName } from 'namespace-aliaser';\nimport { BootstrapWindow, DefaultNamespaceAliaser } from '../../boot/globals';\nimport { componentFactoryOf } from '../../boot/impl/component-factory.symbol.impl';\nimport { Class, PromiseResolver } from '../../common';\nimport { ComponentClass } from './component-class';\n\nconst CustomElements__key = (/*#__PURE__*/ new SingleContextKey<CustomElements>(\n    'custom-elements',\n    {\n      byDefault: createCustomElements,\n    },\n));\n\n/**\n * Custom elements registry.\n *\n * This is used to register custom elements.\n *\n * Typically implemented by `window.customElements`.\n *\n * @category Core\n */\nexport abstract class CustomElements {\n\n  /**\n   * A key of bootstrap context value containing a `CustomElements` instance used to register custom\n   * elements.\n   *\n   * Target value defaults to `window.customElements` from the window provided under `[BootstrapWindow.key]`.\n   */\n  static get [ContextKey__symbol](): ContextKey<CustomElements> {\n    return CustomElements__key;\n  }\n\n  /**\n   * Defines custom element.\n   *\n   * @param componentTypeOrName  A component class constructor or custom element name. The latter may belong to\n   * namespace to avoid naming conflicts.\n   * @param elementType  A constructor of custom element to define.\n   */\n  abstract define(componentTypeOrName: ComponentClass | QualifiedName, elementType: Class): void;\n\n  /**\n   * Allows to wait for component definition.\n   *\n   * This corresponds to `window.customElements.whenDefined()` method.\n   *\n   * @param componentTypeOrName  Component class constructor or custom element name possibly belonging to some\n   * namespace.\n   *\n   * @return A promise that is resolved when custom element is registered.\n   *\n   * @throws TypeError If `componentType` does not contain a component definition.\n   */\n  abstract whenDefined(componentTypeOrName: ComponentClass | QualifiedName): Promise<void>;\n\n}\n\nfunction createCustomElements(values: ContextValues) {\n\n  const customElements: CustomElementRegistry = values.get(BootstrapWindow).customElements;\n  const nsAlias = values.get(DefaultNamespaceAliaser);\n\n  class WindowCustomElements extends CustomElements {\n\n    define(componentTypeOrName: ComponentClass | string, elementType: Class): void {\n      if (isQualifiedName(componentTypeOrName)) {\n        customElements.define(html__naming.name(componentTypeOrName, nsAlias), elementType);\n        return;\n      }\n\n      const factory = componentFactoryOf(componentTypeOrName);\n      const { name, extend } = factory.elementDef;\n\n      if (!name) {\n        componentResolver(componentTypeOrName).resolve(undefined);\n        return; // Anonymous component.\n      }\n      if (extend && extend.name) {\n        customElements.define(\n            html__naming.name(name, nsAlias),\n            elementType,\n            {\n              extends: extend.name,\n            },\n        );\n      } else {\n        customElements.define(html__naming.name(name, nsAlias), elementType);\n      }\n    }\n\n    whenDefined(componentTypeOrName: ComponentClass | string): Promise<void> {\n      if (isQualifiedName(componentTypeOrName)) {\n        return customElements.whenDefined(html__naming.name(componentTypeOrName, nsAlias));\n      }\n\n      const factory = componentFactoryOf(componentTypeOrName);\n      const { name } = factory.elementDef;\n\n      if (!name) {\n        return componentResolver(componentTypeOrName).promise;\n      }\n\n      return customElements.whenDefined(html__naming.name(name, nsAlias));\n    }\n\n  }\n\n  return new WindowCustomElements();\n}\n\nconst ComponentResolver__symbol = (/*#__PURE__*/ Symbol('component-resolver'));\n\nfunction componentResolver(componentType: ComponentClass): PromiseResolver<void> {\n  return (componentType as any)[ComponentResolver__symbol]\n      || ((componentType as any)[ComponentResolver__symbol] = new PromiseResolver());\n}\n","import { SingleContextKey } from 'context-values';\nimport { DefinitionContext } from './definition-context';\n\n/**\n * @internal\n */\nexport const DefinitionContext__key = (/*#__PURE__*/ new SingleContextKey<DefinitionContext>('definition-context'));\n","/**\n * @module @wesib/wesib\n */\nimport { SingleContextKey, SingleContextRef } from 'context-values';\nimport { QualifiedName } from 'namespace-aliaser';\nimport { BootstrapWindow } from '../../boot/globals';\nimport { Class } from '../../common';\nimport { ComponentDef } from '../component-def';\nimport { DefinitionContext__key } from './definition.context.key.impl';\n\n/**\n * Custom element definition meta.\n *\n * @category Core\n */\nexport interface ElementDef {\n\n  /**\n   * Custom element name.\n   *\n   * The name may belong to some namespace to avoid naming conflicts. I.e. it can be either a string, or\n   * name/namespace tuple.\n   *\n   * When omitted an anonymous component will be registered. Such component is not bound to custom element, but it\n   * still can be mounted.\n   */\n  readonly name?: QualifiedName;\n\n  /**\n   * Existing element to extend by custom one.\n   */\n  readonly extend: ElementDef.Extend;\n\n}\n\n/**\n * A key of definition context value containing a custom element definition.\n *\n * Target value defaults to `HTMLElement` from the window provided under `[BootstrapWindow.key]`,\n * unless `ComponentDef.extend.type` is specified.\n */\nexport const ElementDef: SingleContextRef<ElementDef> = (/*#__PURE__*/ new SingleContextKey<ElementDef>(\n    'element-def',\n    {\n      byDefault(values) {\n\n        const componentType = values.get(DefinitionContext__key).componentType;\n        const { name, extend } = ComponentDef.of(componentType);\n\n        const elementExtend: ElementDef.Extend = {\n          get type() {\n            return extend && extend.type || values.get(BootstrapWindow).HTMLElement;\n          },\n          get name() {\n            return extend && extend.name;\n          },\n        };\n\n        return {\n          get name() {\n            return name;\n          },\n          get extend() {\n            return elementExtend;\n          },\n        };\n      },\n    },\n));\n\n/**\n * @category Core\n */\nexport namespace ElementDef {\n\n  /**\n   * The definition of element to extend by custom one.\n   */\n  export interface Extend {\n\n    /**\n     * The class constructor of element to extend.\n     */\n    readonly type: Class;\n\n    /**\n     * The name of element to extend.\n     *\n     * This is to support `as` attribute of standard HTML element. Note that this is not supported by polyfills.\n     */\n    readonly name?: string;\n\n  }\n\n}\n","/**\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKey__symbol, ContextValues, ContextValueSpec } from 'context-values';\nimport { OnEvent } from 'fun-events';\nimport { Class } from '../../common';\nimport { ComponentContext } from '../component-context';\nimport { ComponentClass } from './component-class';\nimport { DefinitionContext__key } from './definition.context.key.impl';\nimport { ElementDef } from './element-def';\n\n/**\n * Component definition context.\n *\n * Extends `ContextValues` interface. The values are provided by corresponding providers registered with\n * [[BootstrapSetup.perDefinition]] and [[DefinitionSetup.perDefinition]] methods. All [[BootstrapContext]] values\n * are available too.\n *\n * @category Core\n * @typeparam T  A type of component.\n */\nexport abstract class DefinitionContext<T extends object = any> extends ContextValues {\n\n  /**\n   * A key of definition context value containing the definition context itself.\n   */\n  static get [ContextKey__symbol](): ContextKey<DefinitionContext> {\n    return DefinitionContext__key;\n  }\n\n  /**\n   * Component class constructor.\n   */\n  abstract readonly componentType: ComponentClass<T>;\n\n  /**\n   * Custom element class constructor.\n   *\n   * It is an error accessing this property before the element class is created, e.g. from inside of\n   * `DefinitionListener` or `ComponentDef.define()` function. In these cases you may wish to add a `whenReady()`\n   * callback.\n   */\n  abstract readonly elementType: Class;\n\n  /**\n   * An `OnEvent` sender of component definition context upon its readiness.\n   *\n   * The custom element class is not constructed until component definition is complete.\n   * The registered receiver will be notified when the custom element class is constructed.\n   *\n   * If the custom element class is constructed already, the receiver will be notified immediately.\n   */\n  abstract readonly whenReady: OnEvent<[this]>;\n\n  /**\n   * An `OnEvent` sender of component context upon its instantiation.\n   *\n   * If component instantiated after the receiver is registered, that receiver would receive an instantiated component's\n   * context immediately.\n   *\n   * If component already exists when the receiver is registered, that receiver would receive instantiated component's\n   * context only when/if component is {@link ComponentContext.whenOn connected}. This is to prevent resource leaking\n   * on disconnected components that may be never used again.\n   */\n  abstract readonly whenComponent: OnEvent<[ComponentContext<T>]>;\n\n  /**\n   * Custom element definition.\n   */\n  get elementDef(): ElementDef {\n    return this.get(ElementDef);\n  }\n\n  /**\n   * Provides a value available in the context of each component of the defined component type.\n   *\n   * @typeparam Deps  A type of dependencies.\n   * @typeparam Src  The type of context value sources.\n   * @typeparam Seed  Value seed type.\n   * @param spec  Component context value specifier.\n   *\n   * @returns A function that removes the given context value specifier when called.\n   */\n  abstract perComponent<Deps extends any[], Src, Seed>(\n      spec: ContextValueSpec<ComponentContext<T>, any, Deps, Src, Seed>,\n  ): () => void;\n\n}\n","import { ContextKey, ContextKey__symbol, ContextRegistry, ContextValues, SingleContextKey } from 'context-values';\nimport { BootstrapContext } from '../bootstrap-context';\n\nconst BootstrapContextRegistry__key =\n    (/*#__PURE__*/ new SingleContextKey<BootstrapContextRegistry>('bootstrap-context-registry'));\n\n/**\n * @internal\n */\nexport class BootstrapContextRegistry extends ContextRegistry<BootstrapContext> {\n\n  static get [ContextKey__symbol](): ContextKey<BootstrapContextRegistry> {\n    return BootstrapContextRegistry__key;\n  }\n\n  readonly values: ContextValues;\n\n  static create(): BootstrapContextRegistry {\n    return new BootstrapContextRegistry();\n  }\n\n  private constructor() {\n    super();\n    this.provide({ a: BootstrapContextRegistry, is: this });\n    this.values = this.newValues();\n  }\n\n}\n","import { ContextKey, ContextKey__symbol, ContextRegistry, ContextSeeds, SingleContextKey } from 'context-values';\nimport { ComponentContext } from '../../component';\nimport { bootstrapDefault } from '../bootstrap-default';\n\nconst ComponentContextRegistry__key = new SingleContextKey<ComponentContextRegistry>(\n    'component-context-registry',\n    {\n      byDefault: bootstrapDefault(() => new ComponentContextRegistry()),\n    },\n);\n\n/**\n * @internal\n */\nexport class ComponentContextRegistry extends ContextRegistry<ComponentContext> {\n\n  static get [ContextKey__symbol](): ContextKey<ComponentContextRegistry> {\n    return ComponentContextRegistry__key;\n  }\n\n  constructor(initial?: ContextSeeds<ComponentContext>) {\n    super(initial);\n  }\n\n}\n","import {\n  ContextKey,\n  ContextKey__symbol,\n  ContextRegistry,\n  ContextSeeds,\n  ContextValues,\n  SingleContextKey,\n} from 'context-values';\nimport { DefinitionContext } from '../../component/definition';\nimport { bootstrapDefault } from '../bootstrap-default';\n\nconst DefinitionContextRegistry__key = new SingleContextKey<DefinitionContextRegistry>(\n    'definition-context-registry',\n    {\n      byDefault: bootstrapDefault(context => new DefinitionContextRegistry(context)),\n    },\n);\n\n/**\n * @internal\n */\nexport class DefinitionContextRegistry extends ContextRegistry<DefinitionContext> {\n\n  static get [ContextKey__symbol](): ContextKey<DefinitionContextRegistry> {\n    return DefinitionContextRegistry__key;\n  }\n\n  constructor(initial?: ContextSeeds<DefinitionContext> | ContextValues) {\n    super(initial);\n  }\n\n}\n","import { nextArgs, nextSkip } from 'call-thru';\nimport { EventEmitter, onAny, OnEvent, onEventBy, trackValue } from 'fun-events';\nimport { superClassOf } from '../../common';\nimport { ComponentDef__symbol } from '../../component';\nimport { ComponentClass, DefinitionSetup } from '../../component/definition';\nimport { Unloader } from './unloader.impl';\n\n/**\n * @internal\n */\nexport function onPostDefSetup(\n    componentType: ComponentClass,\n    unloader: Unloader,\n): OnEvent<[DefinitionSetup]> {\n\n  const { on } = postDefSetup(componentType);\n\n  return onEventBy(receiver => {\n    on({\n      supply: receiver.supply.needs(unloader.supply),\n      receive(ctx, setup) {\n\n        const whenReady = setup.whenReady.tillOff(unloader.supply);\n        const whenComponent = setup.whenComponent.tillOff(unloader.supply);\n\n        receiver.receive(ctx, {\n          get componentType() {\n            return setup.componentType;\n          },\n          get whenReady() {\n            return whenReady;\n          },\n          get whenComponent() {\n            return whenComponent;\n          },\n          perDefinition(spec) {\n            return unloader.add(() => setup.perDefinition(spec));\n          },\n          perComponent(spec) {\n            return unloader.add(() => setup.perComponent(spec));\n          },\n        });\n      },\n    });\n  });\n}\n\n/**\n * @internal\n */\nexport interface PostDefSetup<T extends object = any> {\n  readonly on: OnEvent<[DefinitionSetup<T>]>;\n  send(setup: DefinitionSetup): void;\n  setup(setup: DefinitionSetup<T>): void;\n}\n\nconst PostDefSetup__symbol = (/*#__PURE__*/ Symbol('post-def-setup'));\n\n/**\n * @internal\n */\nexport function postDefSetup<T extends object>(componentType: ComponentClass<T>): PostDefSetup<T> {\n  if (componentType.hasOwnProperty(PostDefSetup__symbol)) {\n    return (componentType as any)[PostDefSetup__symbol];\n  }\n\n  const tracker = trackValue<DefinitionSetup<T>>();\n  const emitter = new EventEmitter<[DefinitionSetup]>();\n  const onSetup: OnEvent<[DefinitionSetup<T>]> = tracker.read.thru(setup => setup ? nextArgs(setup) : nextSkip());\n  const on = onAny(onSetup, emitter);\n  const superType = superClassOf(componentType, type => ComponentDef__symbol in type);\n\n  if (superType) {\n\n    const superPostDefSetup = postDefSetup(superType);\n\n    on(setup => superPostDefSetup.send(setup));\n  }\n\n  const result: PostDefSetup<T> = {\n    on,\n    send(setup) {\n      emitter.send(setup);\n    },\n    setup(setup) {\n      tracker.it = setup;\n    },\n  };\n\n  Object.defineProperty(componentType, PostDefSetup__symbol, { value: result });\n\n  return result;\n}\n","import { AfterEvent, EventEmitter, OnEvent, onEventBy, trackValue } from 'fun-events';\nimport { ComponentContext } from '../../component';\n\nexport class WhenComponent<T extends object> {\n\n  readonly onCreated: OnEvent<[ComponentContext<T>]>;\n  readonly readNotifier: AfterEvent<[ComponentNotifier<T>]>;\n\n  constructor() {\n\n    const currentRev = trackValue(0);\n    const created = new EventEmitter<[ComponentContext<T>, number]>();\n\n    this.onCreated = onEventBy(receiver => {\n\n      const receiverRev = currentRev.it + 1;\n\n      created.on({\n        supply: receiver.supply,\n        receive: (eventContext, componentContext, notifiedRev) => {\n          if (notifiedRev < receiverRev) {\n            // Notify only receivers added after the last notification\n            receiver.receive(\n                {\n                  onRecurrent(recurrentReceiver) {\n                    eventContext.onRecurrent(recurrentContext => recurrentReceiver(recurrentContext));\n                  },\n                },\n                componentContext,\n            );\n          }\n        },\n      });\n\n      ++currentRev.it;\n    });\n    this.readNotifier = currentRev.read.keep.thru_(\n        rev => (context, notifiedRev) => {\n          created.send(context, notifiedRev);\n          return rev;\n        },\n    );\n  }\n\n}\n\nexport type ComponentNotifier<T extends object> = (\n    this: void,\n    context: ComponentContext<T>,\n    notifiedRev: number,\n) => number;\n","import { nextArgs, nextSkip, noop } from 'call-thru';\nimport { ContextValues, ContextValueSpec, SingleContextKey, SingleContextRef } from 'context-values';\nimport { EventEmitter, eventSupply, EventSupply, OnEvent, trackValue, ValueTracker } from 'fun-events';\nimport { Class } from '../../common';\nimport {\n  ComponentContext as ComponentContext_,\n  ComponentContext__symbol,\n  ComponentDef,\n  ComponentEvent,\n  ComponentMount as ComponentMount_,\n} from '../../component';\nimport {\n  ComponentClass,\n  ComponentFactory as ComponentFactory_,\n  DefinitionContext as DefinitionContext_,\n  DefinitionSetup,\n  ElementDef,\n} from '../../component/definition';\nimport { BootstrapContext } from '../bootstrap-context';\nimport { bootstrapDefault } from '../bootstrap-default';\nimport { ComponentContextRegistry } from './component-context-registry.impl';\nimport { DefinitionContextRegistry } from './definition-context-registry.impl';\nimport { postDefSetup } from './post-def-setup.impl';\nimport { WhenComponent } from './when-component.impl';\n\n/**\n * @internal\n */\nexport interface ElementBuilder {\n  readonly definitions: EventEmitter<[DefinitionContext_]>;\n  readonly components: EventEmitter<[ComponentContext_]>;\n  buildElement<T extends object>(this: void, componentType: ComponentClass<T>): ComponentFactory_<T>;\n}\n\n/**\n * @internal\n */\nexport const ElementBuilder: SingleContextRef<ElementBuilder> = (/*#__PURE__*/ new SingleContextKey<ElementBuilder>(\n    'element-builder',\n    {\n      byDefault: bootstrapDefault(newElementBuilder),\n    },\n));\n\nfunction newElementBuilder(bsContext: BootstrapContext): ElementBuilder {\n\n  const definitionContextRegistry_global = bsContext.get(DefinitionContextRegistry);\n  const componentContextRegistry_global = bsContext.get(ComponentContextRegistry);\n  const definitions = new EventEmitter<[DefinitionContext_]>();\n  const components = new EventEmitter<[ComponentContext_]>();\n\n  return {\n    definitions,\n    components,\n    buildElement<T extends object>(componentType: ComponentClass<T>) {\n\n      const def = ComponentDef.of(componentType);\n      const whenComponent = new WhenComponent<T>();\n      let componentContextRegistry_perType!: ComponentContextRegistry;\n      const ready = trackValue(false);\n      const whenReady: OnEvent<[]> = ready.read.thru(cls => cls ? nextArgs() : nextSkip());\n      let definitionContext: DefinitionContext;\n\n      function createComponentContextRegistry() {\n        return componentContextRegistry_global.append(componentContextRegistry_perType);\n      }\n\n      class ComponentFactory extends ComponentFactory_ < T > {\n\n        get componentType() {\n          return definitionContext.componentType;\n        }\n\n        get elementType() {\n          return definitionContext.elementType;\n        }\n\n        get elementDef() {\n          return definitionContext.elementDef;\n        }\n\n        mountTo(element: any): ComponentMount_<T> {\n          if (element[ComponentContext__symbol]) {\n            throw new Error(`Element ${element} already bound to component`);\n          }\n\n          const mount = createComponent({\n            definitionContext,\n            whenComponent,\n            registry: createComponentContextRegistry(),\n            element,\n            elementSuper(key) {\n              return element[key];\n            },\n            createMount(context: ComponentContext_<T>) {\n\n              class ComponentMount extends ComponentMount_<T> {\n\n                get context() {\n                  return context;\n                }\n\n                get connected() {\n                  return elementStatus(element).it === ComponentStatus.On;\n                }\n\n                set connected(value: boolean) {\n                  elementStatus(element).it = value ? ComponentStatus.On : ComponentStatus.Off;\n                }\n\n                checkConnected(): boolean {\n\n                  const el: Element = element;\n                  const doc = el.ownerDocument;\n\n                  return this.connected = doc != null && doc.contains(el);\n                }\n\n              }\n\n              return new ComponentMount();\n            },\n          }).mount as ComponentMount_<T>;\n\n          mount.checkConnected();\n          componentCreated(mount.context);\n\n          return mount;\n        }\n\n      }\n\n      const componentFactory = new ComponentFactory();\n\n      class DefinitionContext extends DefinitionContext_<T> {\n\n        readonly get: ContextValues['get'];\n        readonly whenReady: OnEvent<[this]>;\n\n        get componentType() {\n          return componentType;\n        }\n\n        get whenComponent() {\n          return whenComponent.onCreated;\n        }\n\n        get elementType(): Class {\n          throw new Error('Custom element class is not constructed yet. Consider to use a `whenReady()` callback');\n        }\n\n        constructor() {\n          super();\n\n          const context = this;\n\n          this.whenReady = whenReady.thru_(() => this).once;\n\n          const definitionContextRegistry =\n              new DefinitionContextRegistry(definitionContextRegistry_global.seedIn(this));\n\n          definitionContextRegistry.provide({ a: DefinitionContext_, is: this });\n          definitionContextRegistry.provide({ a: ComponentFactory_, is: componentFactory });\n          this.get = definitionContextRegistry.newValues().get;\n          componentContextRegistry_perType = new ComponentContextRegistry(definitionContextRegistry.seedIn(this));\n\n          const definitionSetup: DefinitionSetup<T> = {\n            get componentType() {\n              return componentType;\n            },\n            get whenReady() {\n              return context.whenReady;\n            },\n            get whenComponent() {\n              return context.whenComponent;\n            },\n            perDefinition(spec) {\n              return definitionContextRegistry.provide(spec);\n            },\n            perComponent(spec) {\n              return componentContextRegistry_perType.provide(spec);\n            },\n          };\n\n          def.setup?.(definitionSetup);\n          postDefSetup(componentType).setup(definitionSetup);\n        }\n\n        perComponent<Deps extends any[], Src, Seed>(\n            spec: ContextValueSpec<ComponentContext_<T>, any, Deps, Src, Seed>,\n        ): () => void {\n          return componentContextRegistry_perType.provide(spec);\n        }\n\n      }\n\n      definitionContext = new DefinitionContext();\n\n      def.define?.(definitionContext);\n      definitions.send(definitionContext);\n\n      const elementType = createElementType(\n          definitionContext,\n          whenComponent,\n          createComponentContextRegistry(),\n      );\n\n      Object.defineProperty(definitionContext, 'elementType', {\n        configurable: true,\n        enumerable: true,\n        value: elementType,\n      });\n\n      ready.it = true;\n\n      return componentFactory;\n    },\n  };\n\n  function createElementType<T extends object>(\n      definitionContext: DefinitionContext_<T>,\n      whenComponent: WhenComponent<T>,\n      componentContextRegistry: ComponentContextRegistry,\n  ) {\n\n    const elementDef = definitionContext.get(ElementDef);\n\n    class Element extends elementDef.extend.type {\n\n      // Component context reference\n      [ComponentContext__symbol]: ComponentContext_<T>;\n\n      constructor() {\n        super();\n\n        const context = createComponent({\n          definitionContext,\n          whenComponent,\n          registry: componentContextRegistry,\n          element: this,\n          createMount: noop,\n          elementSuper: (key) => {\n            // @ts-ignore\n            return super[key] as any;\n          },\n        });\n\n        componentCreated(context);\n      }\n\n      // noinspection JSUnusedGlobalSymbols\n      connectedCallback() {\n        elementStatus(this).it = ComponentStatus.On;\n      }\n\n      // noinspection JSUnusedGlobalSymbols\n      disconnectedCallback() {\n        elementStatus(this).it = ComponentStatus.Off;\n      }\n\n    }\n\n    return Element;\n  }\n\n  function createComponent<T extends object>(\n      {\n        definitionContext,\n        whenComponent,\n        registry,\n        element,\n        createMount,\n        elementSuper,\n      }: {\n        definitionContext: DefinitionContext_<T>;\n        whenComponent: WhenComponent<T>,\n        registry: ComponentContextRegistry;\n        element: any;\n        elementSuper(name: PropertyKey): any;\n        createMount(context: ComponentContext_<T>): ComponentMount_<T> | undefined;\n      },\n  ): ComponentContext_<T> {\n\n    const status = trackValue<ComponentStatus>(ComponentStatus.Building);\n    const destructionReason = trackValue<[any] | undefined>();\n\n    status.on(noop).whenOff(reason => destructionReason.it = [reason]);\n\n    const destroyed: OnEvent<[any]> = destructionReason.read.thru(reason => reason ? nextArgs(reason[0]) : nextSkip());\n    const whenDestroyed: OnEvent<[any]> = destroyed.once;\n\n    const whenOff: OnEvent<[]> = status.read.thru_(sts => sts === ComponentStatus.Off ? nextArgs() : nextSkip());\n    const whenOn: OnEvent<[EventSupply]> = status.read.thru_(\n        sts => {\n          if (sts !== ComponentStatus.On) {\n            return nextSkip();\n          }\n\n          const offSupply = eventSupply();\n\n          whenOff.once(() => offSupply.off());\n\n          return nextArgs(offSupply);\n        },\n    );\n\n    let mount: ComponentMount_<T> | undefined;\n    const values = registry.newValues();\n\n    class ComponentContext extends ComponentContext_<T> {\n\n      readonly get = values.get;\n      readonly elementSuper = elementSuper;\n      readonly whenReady: OnEvent<[this]>;\n\n      constructor() {\n        super();\n\n        const whenReady: OnEvent<[this]> = status.read.thru(sts => sts ? nextArgs(this) : nextSkip());\n\n        this.whenReady = whenReady.once;\n      }\n\n      get componentType() {\n        return definitionContext.componentType;\n      }\n\n      get element() {\n        return element;\n      }\n\n      get component(): T {\n        throw new Error('The component is not constructed yet. Consider to use a `whenReady()` callback');\n      }\n\n      get mount(): ComponentMount_<T> | undefined {\n        return mount || (mount = createMount(this));\n      }\n\n      get connected(): boolean {\n        return status.it === ComponentStatus.On;\n      }\n\n      get whenOn(): OnEvent<[EventSupply]> {\n        return whenOn;\n      }\n\n      get whenOff(): OnEvent<[]> {\n        return whenOff;\n      }\n\n      get whenDestroyed() {\n        return whenDestroyed;\n      }\n\n      destroy(reason?: any): void {\n        status.done(reason);\n      }\n\n    }\n\n    const context = new ComponentContext();\n    let lastRev = 0;\n\n    context.whenDestroyed(() => removeElement(context));\n    registry.provide({ a: ComponentContext_, is: context });\n\n    augmentElement();\n\n    whenComponent.readNotifier.once(notifier => lastRev = notifier(context, lastRev));\n    context.whenOn(supply => {\n      whenComponent.readNotifier({\n        supply,\n        receive(_, notifier) {\n          lastRev = notifier(context, lastRev);\n        },\n      });\n    });\n    components.send(context);\n\n    const component = newComponent(definitionContext.componentType, context);\n\n    Object.defineProperty(context, 'component', {\n      configurable: true,\n      enumerable: true,\n      value: component,\n    });\n\n    status.it = ComponentStatus.Ready;\n\n    return context;\n\n    function augmentElement() {\n      Object.defineProperty(element, ComponentContext__symbol, { value: context });\n      Object.defineProperty(element, ComponentStatus__symbol, { writable: true, value: status });\n    }\n  }\n\n}\n\n/**\n * Creates new component of the given type.\n *\n * It makes component context available under `[ComponentContext__symbol]` key in constructed component.\n * The component context is also available inside component constructor by temporarily assigning it to component\n * prototype.\n *\n * @typeparam T  A type of component.\n * @param type  Component class constructor.\n * @param context  Target component context.\n */\nfunction newComponent<T extends object>(type: ComponentClass<T>, context: ComponentContext_<T>): T {\n\n  const proto = type.prototype as any;\n  const prevContext = proto[ComponentContext__symbol];\n\n  proto[ComponentContext__symbol] = context;\n  try {\n\n    const component = new type(context);\n\n    Object.defineProperty(component, ComponentContext__symbol, { value: context });\n\n    return component;\n  } finally {\n    proto[ComponentContext__symbol] = prevContext;\n  }\n}\n\nconst enum ComponentStatus {\n  Building,\n  Ready,\n  Off,\n  On,\n}\n\nconst ComponentStatus__symbol = (/*#__PURE__*/ Symbol('component-status'));\n\nfunction elementStatus(element: any): ValueTracker<ComponentStatus> {\n  return element[ComponentStatus__symbol];\n}\n\nfunction componentCreated(context: ComponentContext_) {\n  context.whenOn.once(\n      () => context.dispatchEvent(new ComponentEvent('wesib:component', { bubbles: true })),\n  );\n}\n\nfunction removeElement(context: ComponentContext_) {\n\n  const { element, mount } = context;\n\n  if (mount) {\n    mount.connected = false; // Disconnect mounted element\n  }\n\n  const parentNode: Element = element.parentElement;\n\n  if (parentNode) {\n    parentNode.removeChild(element);\n  }\n}\n","/**\n * @module @wesib/wesib\n */\nimport { ComponentContext } from './component-context';\n\n/**\n * A mount of the component to an element.\n *\n * This is constructed when a component is mounted to arbitrary element by [[ComponentFactory.mountTo]] method.\n *\n * Mounted components do not maintain their connection state automatically. It is a calling code responsibility to set\n * their connection state by updating [[ComponentMount.connected]] property. E.g. by calling a\n * [[ComponentMount.checkConnected]] method. An [[ElementObserver]] and [[AutoConnectSupport]] feature could be used to\n * do it automatically.\n *\n * @category Core\n * @typeparam T  A type of component.\n */\nexport abstract class ComponentMount<T extends object = any> {\n\n  /**\n   * Mounted component context.\n   */\n  abstract readonly context: ComponentContext<T>;\n\n  /**\n   * Component connection state.\n   *\n   * Updating this property triggers appropriate listeners registered in [[ComponentContext]].\n   *\n   * The initial state is set by [[checkConnected]] method.\n   */\n  abstract connected: boolean;\n\n  /**\n   * Mounted component.\n   */\n  get component(): T {\n    return this.context.component;\n  }\n\n  /**\n   * An element the component is mounted to.\n   */\n  get element(): any {\n    return this.context.element;\n  }\n\n  /**\n   * Checks whether the mounted component element is actually connected to its owning document.\n   *\n   * Updates the `connected` property and returns its value.\n   *\n   * @returns `true` if the component element is connected, or `false` otherwise.\n   */\n  abstract checkConnected(): boolean;\n\n}\n","import { itsEach, overArray } from 'a-iterable';\nimport { noop, valueProvider } from 'call-thru';\nimport { EventSupply, eventSupply } from 'fun-events';\n\n/**\n * @internal\n */\nexport interface Unloader {\n  readonly supply: EventSupply;\n  add(adder: () => () => void): () => void;\n}\n\nconst doNotAdd = valueProvider(noop);\n\n/**\n * @internal\n */\nexport function newUnloader(): Unloader {\n\n  const unloads: (() => void)[] = [];\n  let add = (adder: () => () => void) => {\n\n    const unload = adder();\n\n    unloads.push(unload);\n\n    return unload;\n  };\n  const supply = eventSupply(() => {\n    add = doNotAdd;\n    itsEach(\n        overArray(unloads).reverse(),\n        unload => unload(),\n    );\n    unloads.length = 0;\n  });\n\n  return {\n    supply,\n    add(adder) {\n      return add(adder);\n    },\n  };\n}\n","import { ElementBuilder } from '../../boot/impl';\nimport { ComponentFactory__symbol } from '../../boot/impl/component-factory.symbol.impl';\nimport { ComponentClass, CustomElements } from '../../component/definition';\nimport { FeatureContext } from '../feature-context';\n\n/**\n * @internal\n */\nexport class ComponentRegistry {\n\n  private _definitionQueue: (() => void)[] = [];\n\n  constructor(private readonly _context: FeatureContext) {\n    _context.whenReady(() => {\n      this._definitionQueue.forEach(definition => definition());\n      delete this._definitionQueue;\n    });\n  }\n\n  get customElements(): CustomElements {\n    return this._context.get(CustomElements);\n  }\n\n  define<T extends object>(componentType: ComponentClass<T>) {\n    this._definitionQueue.push(() => {\n\n      const elementBuilder = this._context.get(ElementBuilder);\n      const factory = elementBuilder.buildElement(componentType);\n\n      (componentType as any)[ComponentFactory__symbol] = factory;\n\n      this.customElements.define(componentType, factory.elementType);\n    });\n  }\n\n}\n","import { filterIt, mapIt } from 'a-iterable';\nimport { isPresent, NextArgs, nextArgs, NextSkip, nextSkip } from 'call-thru';\nimport { ContextRegistry, ContextUpKey, ContextValueOpts, ContextValues, ContextValueSpec } from 'context-values';\nimport {\n  afterAll,\n  afterEach,\n  AfterEvent,\n  afterEventBy,\n  afterThe,\n  EventKeeper,\n  EventSupply,\n  OnEvent,\n  trackValue,\n} from 'fun-events';\nimport { BootstrapContext } from '../../boot';\nimport {\n  BootstrapContextRegistry,\n  ComponentContextRegistry,\n  DefinitionContextRegistry,\n  ElementBuilder,\n  newUnloader,\n  onPostDefSetup,\n} from '../../boot/impl';\nimport { ArraySet, Class } from '../../common';\nimport { ComponentContext } from '../../component';\nimport { ComponentClass, DefinitionContext, DefinitionSetup } from '../../component/definition';\nimport { FeatureContext } from '../feature-context';\nimport { ComponentRegistry } from './component-registry.impl';\nimport { FeatureClause, FeatureRequest } from './feature-request.impl';\n\nconst FeatureKey__symbol = (/*#__PURE__*/ Symbol('feature-key'));\n\n/**\n * @internal\n */\nexport class FeatureKey extends ContextUpKey<AfterEvent<[FeatureLoader?]>, FeatureClause> {\n\n  static of(feature: Class): FeatureKey {\n    return feature.hasOwnProperty(FeatureKey__symbol)\n        ? (feature as any)[FeatureKey__symbol]\n        : ((feature as any)[FeatureKey__symbol] = new FeatureKey(feature));\n  }\n\n  private constructor(feature: Class) {\n    super(`feature:${feature.name}`);\n  }\n\n  grow<Ctx extends ContextValues>(\n      opts: ContextValueOpts<\n          Ctx,\n          AfterEvent<[FeatureLoader?]>,\n          EventKeeper<FeatureClause[]> | FeatureClause,\n          AfterEvent<FeatureClause[]>>,\n  ): AfterEvent<[FeatureLoader?]> | null | undefined {\n    return loadFeature(\n        opts.context.get(BootstrapContext),\n        opts.seed.keep.thru(preferredFeatureClause),\n    );\n  }\n\n}\n\nfunction preferredFeatureClause(...clauses: FeatureClause[]): FeatureClause | undefined {\n\n  let required = false;\n  let preferred: FeatureClause | undefined;\n\n  for (const clause of clauses) {\n    switch (clause[1]) {\n      case 'is':\n        required = true;\n        if (!preferred) {\n          preferred = clause;\n        }\n        break;\n      case 'has':\n        preferred = clause;\n        break;\n      case 'needs':\n        required = true;\n    }\n  }\n\n  return required ? preferred : undefined;\n}\n\nfunction loadFeature(\n    bsContext: BootstrapContext,\n    from: AfterEvent<[FeatureClause?]>,\n): AfterEvent<[FeatureLoader?]> {\n  return afterEventBy<[FeatureLoader?]>(receiver => {\n\n    let origin: Class | undefined;\n    let source: OnEvent<[FeatureLoader?]> = afterThe();\n    let stageId: Promise<FeatureStageId> = Promise.resolve('idle');\n\n    return afterAll({\n      clause: from,\n      deps: loadFeatureDeps(bsContext, from),\n    }).dig_(({ clause: [clause], deps }) => {\n      if (!clause) {\n        return afterThe();\n      }\n\n      const [request, , target] = clause;\n\n      if (request.feature === origin) {\n        return source; // Origin didn't change. Reuse the source.\n      }\n\n      origin = request.feature;\n\n      if (target !== origin) {\n        // Originated from replacement feature provider. Reuse its loader.\n        return source = bsContext.get(FeatureKey.of(origin)).thru_(\n            loader => {\n              loader!.to(stageId);\n              stageId = loader!.stage;\n              return loader;\n            },\n        );\n      }\n\n      // Create feature's own loader\n      const ownLoader = new FeatureLoader(bsContext, request, deps).to(stageId);\n      const ownSource = afterThe(ownLoader);\n\n      return source = afterEventBy<[FeatureLoader]>(\n          rcv => ownSource(rcv).whenOff(() => {\n            stageId = ownLoader.unload();\n          }),\n      ).share(); // Can be accessed again when reused\n    })(receiver);\n  }).keep.thru(\n      preventDuplicateLoader(),\n  );\n}\n\nfunction preventDuplicateLoader():\n    <NextReturn>(\n        loader?: FeatureLoader,\n    ) => NextArgs<[FeatureLoader?], NextReturn> | NextSkip<[FeatureLoader?], NextReturn> {\n\n  let lastLoader: FeatureLoader | null | undefined = null; // Initially `null` to differ from `undefined`\n\n  return <NextReturn>(loader?: FeatureLoader) => {\n    if (lastLoader === loader) {\n      return nextSkip();\n    }\n    lastLoader = loader;\n\n    if (!loader) {\n      return nextArgs<[FeatureLoader?], NextReturn>();\n    }\n\n    return nextArgs<[FeatureLoader?], NextReturn>(loader);\n  };\n}\n\nfunction loadFeatureDeps(\n    bsContext: BootstrapContext,\n    from: AfterEvent<[FeatureClause?]>,\n): AfterEvent<FeatureLoader[]> {\n  return from.keep.dig_(clause => {\n    if (!clause) {\n      return afterThe();\n    }\n\n    const [{ def }] = clause;\n    const needs = new ArraySet(def.needs);\n\n    if (!needs.size) {\n      return afterThe();\n    }\n\n    return afterEach(...needs.map(dep => bsContext.get(FeatureKey.of(dep))))\n        .keep.thru_(presentFeatureDeps);\n  });\n}\n\nfunction presentFeatureDeps<NextReturn>(...deps: [FeatureLoader?][]): NextArgs<FeatureLoader[], NextReturn> {\n  return nextArgs<FeatureLoader[], NextReturn>(\n      ...filterIt<FeatureLoader | undefined, FeatureLoader>(\n          mapIt(deps, dep => dep[0]),\n          isPresent,\n      ),\n  );\n}\n\n/**\n * @internal\n */\nexport class FeatureLoader {\n\n  readonly down: Promise<void>;\n  private _stage: Promise<FeatureStage>;\n  private _down!: () => void;\n  readonly state = trackValue(false);\n\n  constructor(\n      readonly bsContext: BootstrapContext,\n      readonly request: FeatureRequest,\n      readonly deps: FeatureLoader[],\n  ) {\n    this.down = new Promise(resolve => this._down = resolve);\n    this._stage = Promise.resolve(new SetupFeatureStage(this));\n  }\n\n  get stage(): Promise<FeatureStageId> {\n    return this._stage.then(stage => stage.after);\n  }\n\n  get ready(): boolean {\n    return this.state.it;\n  }\n\n  to(stageId: Promise<FeatureStageId>): this {\n\n    const lastStage = this._stage;\n\n    this._stage = stageId.then(id => lastStage.then(stage => stage[id]()));\n\n    return this;\n  }\n\n  async setup(): Promise<void> {\n    await (this._stage = this._stage.then(stage => stage.setup()));\n  }\n\n  async init(): Promise<void> {\n    await (this._stage = this._stage.then(stage => stage.init()));\n  }\n\n  async unload(): Promise<FeatureStageId> {\n\n    const prevStage = this._stage;\n\n    delete this._stage; // Unloaded feature should never be accessed again.\n\n    const stage = await prevStage;\n    const stageId = await stage.stop();\n\n    this._down();\n\n    return stageId;\n  }\n\n}\n\ntype FeatureStageId = 'idle' | 'setup' | 'init';\ntype FeatureStageStop = (this: void) => Promise<any>;\n\nabstract class FeatureStage {\n\n  abstract readonly after: FeatureStageId;\n\n  constructor(\n      readonly loader: FeatureLoader,\n      private readonly _stop: FeatureStageStop = () => Promise.resolve(),\n  ) {}\n\n  async idle(): Promise<this> {\n    return this;\n  }\n\n  abstract setup(): Promise<FeatureStage>;\n\n  abstract init(): Promise<FeatureStage>;\n\n  stop(): Promise<FeatureStageId> {\n    return this._stop().then(() => this.after);\n  }\n\n  protected perDep(action: (dep: FeatureLoader) => Promise<void>): Promise<any> {\n\n    const { deps } = this.loader;\n\n    return Promise.all(deps.map(dep => action(dep)));\n  }\n\n}\n\nclass SetupFeatureStage extends FeatureStage {\n\n  get after() {\n    return 'idle' as const;\n  }\n\n  async setup(): Promise<FeatureStage> {\n    await this.perDep(loader => loader.setup());\n\n    const { bsContext, request: { def } } = this.loader;\n    const [context, supply] = newFeatureContext(bsContext, this.loader);\n\n    def.setup?.(context);\n\n    return new InitFeatureStage(\n        this.loader,\n        context,\n        async () => supply.off(),\n    );\n  }\n\n  init(): Promise<FeatureStage> {\n    return this.setup().then(stage => stage.init());\n  }\n\n}\n\nclass InitFeatureStage extends FeatureStage {\n\n  get after() {\n    return 'setup' as const;\n  }\n\n  constructor(\n      state: FeatureLoader,\n      private readonly _context: FeatureContext,\n      stop: FeatureStageStop,\n  ) {\n    super(state, stop);\n  }\n\n  async setup(): Promise<FeatureStage> {\n    return this;\n  }\n\n  async init(): Promise<FeatureStage> {\n    await this.perDep(loader => loader.init());\n\n    const { request: { def } } = this.loader;\n\n    def.init?.(this._context);\n\n    return new ActiveFeatureStage(this);\n  }\n\n}\n\nclass ActiveFeatureStage extends FeatureStage {\n\n  get after() {\n    return 'init' as const;\n  }\n\n  constructor(prev: InitFeatureStage) {\n    super(prev.loader, () => prev.stop());\n    prev.loader.state.it = true;\n  }\n\n  async setup(): Promise<FeatureStage> {\n    return this;\n  }\n\n  async init(): Promise<FeatureStage> {\n    return this;\n  }\n\n}\n\nfunction newFeatureContext(\n    bsContext: BootstrapContext,\n    loader: FeatureLoader,\n): [FeatureContext, EventSupply] {\n\n  const unloader = newUnloader();\n  let componentRegistry: ComponentRegistry;\n  const definitionContextRegistry = bsContext.get(DefinitionContextRegistry);\n  const componentContextRegistry = bsContext.get(ComponentContextRegistry);\n  const registry = new ContextRegistry<FeatureContext>(bsContext);\n  const elementBuilder = bsContext.get(ElementBuilder);\n  const onDefinition = elementBuilder.definitions.on.tillOff(unloader.supply);\n  const onComponent = elementBuilder.components.on.tillOff(unloader.supply);\n\n  class Context extends FeatureContext {\n\n    readonly get = registry.newValues().get;\n    readonly whenReady: OnEvent<[FeatureContext]>;\n\n    constructor() {\n      super();\n\n      const whenReady: OnEvent<[FeatureContext]> = afterAll({\n        st: loader.state,\n        bs: trackValue<BootstrapContext>().by(bsContext.whenReady),\n      }).thru(\n          ({ st: [ready], bs: [bs] }) => bs && ready ? nextArgs(this) : nextSkip(),\n      );\n\n      this.whenReady = whenReady.once;\n      registry.provide({ a: FeatureContext, is: this });\n      componentRegistry = new ComponentRegistry(this);\n    }\n\n    get feature() {\n      return loader.request.feature;\n    }\n\n    get onDefinition() {\n      return onDefinition;\n    }\n\n    get onComponent() {\n      return onComponent;\n    }\n\n    provide<Deps extends any[], Src, Seed>(\n        spec: ContextValueSpec<BootstrapContext, any, Deps, Src, Seed>,\n    ): () => void {\n      return unloader.add(() => bsContext.get(BootstrapContextRegistry).provide(spec));\n    }\n\n    perDefinition<Deps extends any[], Src, Seed>(\n        spec: ContextValueSpec<DefinitionContext, any, Deps, Src, Seed>,\n    ): () => void {\n      return unloader.add(() => definitionContextRegistry.provide(spec));\n    }\n\n    perComponent<Deps extends any[], Src, Seed>(\n        spec: ContextValueSpec<ComponentContext, any, Deps, Src, Seed>,\n    ): () => void {\n      return unloader.add(() => componentContextRegistry.provide(spec));\n    }\n\n    setupDefinition<T extends object>(componentType: ComponentClass<T>): OnEvent<[DefinitionSetup]> {\n      return onPostDefSetup(componentType, unloader);\n    }\n\n    define<T extends object>(componentType: ComponentClass<T>): void {\n      componentRegistry.define(componentType);\n    }\n\n  }\n\n  return [new Context(), unloader.supply];\n}\n","import { ArraySet, Class, mergeFunctions } from '../../common';\nimport { FeatureDef } from '../feature-def';\nimport { FeatureNeedsError } from '../feature-needs-error';\nimport { FeatureKey } from './feature-loader.impl';\nimport { FeatureRequester } from './feature-requester.impl';\n\n/**\n * @internal\n */\nexport type FeatureClause = [FeatureRequest, 'is' | 'needs' | 'has', Class];\n\n/**\n * @internal\n */\nexport type FeatureNeedClause = [FeatureRequest, 'needs' | 'has', Class];\n\n/**\n * @internal\n */\nexport class FeatureRequest {\n\n  readonly def: FeatureDef.Options;\n  private _uses = 0;\n\n  constructor(\n      private readonly _requester: FeatureRequester,\n      readonly feature: Class,\n      private _revoke: () => void,\n  ) {\n    this.def = FeatureDef.of(feature);\n  }\n\n  request(clauses: readonly FeatureNeedClause[]): this {\n\n    const requester = this._requester;\n    const { registry } = requester;\n    const isClause: FeatureClause = [this, 'is', this.feature];\n\n    this._revokeBy(registry.provide({\n      a: FeatureKey.of(this.feature),\n      is: isClause,\n    }));\n\n    new ArraySet(this.def.has).forEach(feature => {\n\n      const clause: FeatureNeedClause = [this, 'has', feature];\n\n      this._revokeBy(registry.provide({ a: FeatureKey.of(feature), is: clause }));\n\n      // Request the provided feature _after_ provider\n      const request = requester.request(feature, [...clauses, clause]);\n\n      this._revokeBy(() => request.unuse());\n    });\n\n    new ArraySet(this.def.needs).forEach(feature => {\n\n      const clause: FeatureNeedClause = [this, 'needs', feature];\n\n      const request = requester.request(feature, [...clauses, clause]);\n\n      this._revokeBy(() => request.unuse());\n      this._revokeBy(registry.provide({ a: FeatureKey.of(feature), is: clause }));\n    });\n\n    this._uses = 1;\n\n    return this;\n  }\n\n  reuse(clauses: readonly FeatureNeedClause[]): this {\n    if (!this._uses) {\n      throw new FeatureNeedsError(clauses.map(([{ feature }, reason, need]) => [feature, reason, need]));\n    }\n\n    ++this._uses;\n\n    return this;\n  }\n\n  unuse() {\n    if (!--this._uses) {\n      this._revoke();\n    }\n  }\n\n  private _revokeBy(revoke: () => void) {\n    this._revoke = mergeFunctions(revoke, this._revoke);\n  }\n\n}\n","import { ContextKey, ContextKey__symbol, SingleContextKey } from 'context-values';\nimport { BootstrapContext, bootstrapDefault } from '../../boot';\nimport { BootstrapContextRegistry } from '../../boot/impl';\nimport { Class } from '../../common';\nimport { FeatureNeedClause, FeatureRequest } from './feature-request.impl';\n\nconst FeatureRequester__key = (/*#__PURE__*/ new SingleContextKey<FeatureRequester>(\n    'feature-requester',\n    {\n      byDefault: bootstrapDefault(context => new FeatureRequester(context)),\n    },\n));\n\n/**\n * @internal\n */\nexport class FeatureRequester {\n\n  static get [ContextKey__symbol](): ContextKey<FeatureRequester> {\n    return FeatureRequester__key;\n  }\n\n  readonly registry: BootstrapContextRegistry;\n  private readonly _map = new Map<Class, FeatureRequest>();\n\n  constructor(context: BootstrapContext) {\n    this.registry = context.get(BootstrapContextRegistry);\n  }\n\n  request(feature: Class, clauses: readonly FeatureNeedClause[] = []): FeatureRequest {\n\n    const existing = this._map.get(feature);\n\n    if (existing) {\n      return existing.reuse(clauses);\n    }\n\n    const request = new FeatureRequest(this, feature, () => this._map.delete(feature));\n\n    this._map.set(feature, request);\n\n    return request.request(clauses);\n  }\n\n}\n","/**\n * @module @wesib/wesib\n */\nimport { nextArgs, nextSkip } from 'call-thru';\nimport { AfterEvent, afterEventBy, OnEvent, trackValue } from 'fun-events';\nimport { newNamespaceAliaser } from 'namespace-aliaser';\nimport { Class } from '../../common';\nimport { ComponentClass, CustomElements } from '../../component/definition';\nimport { FeatureDef, FeatureRef, FeatureStatus } from '../../feature';\nimport { FeatureKey, FeatureLoader, FeatureRequester } from '../../feature/loader';\nimport { BootstrapContext } from '../bootstrap-context';\nimport { DefaultNamespaceAliaser } from '../globals';\nimport { BootstrapContextRegistry } from '../impl';\nimport { componentFactoryOf } from '../impl/component-factory.symbol.impl';\n\n/**\n * Bootstraps components.\n *\n * Note that both features and components can be passed as parameters to this function, as components are features too.\n *\n * @category Core\n * @param features  Features and components to enable.\n *\n * @returns Bootstrap context instance.\n */\nexport function bootstrapComponents(...features: Class[]): BootstrapContext {\n\n  const bootstrapContextRegistry = BootstrapContextRegistry.create();\n  const { bootstrapContext, complete } = initBootstrap(bootstrapContextRegistry);\n  const feature = features.length === 1 ? features[0] : bootstrapFeature(features);\n\n  bootstrapContext.get(FeatureRequester).request(feature);\n  bootstrapContext.get(FeatureKey.of(feature))(loader => {\n    loader!.init().then(complete);\n  });\n\n  return bootstrapContext;\n}\n\nfunction bootstrapFeature(needs: Class[]): Class {\n  return FeatureDef.define(class BootstrapFeature {}, { needs });\n}\n\nfunction initBootstrap(bootstrapContextRegistry: BootstrapContextRegistry) {\n\n  const stage = trackValue<BootstrapStage>(BootstrapStage.Init);\n  const values = bootstrapContextRegistry.values;\n\n  class Context extends BootstrapContext {\n\n    readonly get = values.get;\n    readonly whenReady: OnEvent<[BootstrapContext]>;\n\n    constructor() {\n      super();\n\n      const whenReady: OnEvent<[BootstrapContext]> = stage.read.thru(\n          s => s ? nextArgs(this) : nextSkip(),\n      );\n\n      this.whenReady = whenReady.once;\n      bootstrapContextRegistry.provide({ a: DefaultNamespaceAliaser, by: newNamespaceAliaser });\n      bootstrapContextRegistry.provide({ a: BootstrapContext, is: this });\n    }\n\n    async whenDefined<C extends object>(componentType: ComponentClass<C>) {\n      await new Promise(resolve => this.whenReady(resolve));\n      await this.get(CustomElements).whenDefined(componentType);\n      return componentFactoryOf(componentType);\n    }\n\n    load(feature: Class<any>): FeatureRef {\n\n      interface FeatureInfo {\n        status: FeatureStatus;\n        down?: Promise<void>;\n      }\n\n      const status = afterEventBy<[FeatureInfo]>(receiver => {\n\n        const request = bootstrapContext.get(FeatureRequester).request(feature);\n        const info = trackValue<FeatureInfo>({\n          status: {\n            feature,\n            ready: false,\n          },\n        });\n\n        this.get(FeatureKey.of(feature))({\n          supply: receiver.supply,\n          receive(_ctx, ldr) {\n\n            // Present until `request` revoked\n            // But that happens only when supply is cut off.\n            const loader = ldr as FeatureLoader;\n\n            info.it = {\n              status: {\n                feature: loader.request.feature,\n                ready: loader.ready,\n              },\n              down: loader.down,\n            };\n            if (!loader.ready) {\n              loader.init().then(() => {\n                info.it = {\n                  status: {\n                    feature: loader.request.feature,\n                    ready: true,\n                  },\n                  down: loader.down,\n                };\n              });\n            }\n          },\n        }).whenOff(() => {\n          request.unuse(); // Apply this callback _after_ registration complete,\n                           // to prevent receiver call.\n        });\n\n        info.read(receiver);\n      }).share();\n\n      let whenDown: Promise<void>;\n      const supply = status(({ down }) => whenDown = down!);\n      const read: AfterEvent<[FeatureStatus]> =\n          status.keep.thru(info => info.status).tillOff(supply);\n\n      class Ref extends FeatureRef {\n\n        get read() {\n          return read;\n        }\n\n        get down() {\n          return whenDown;\n        }\n\n        dismiss(reason?: any) {\n          supply.off(reason);\n          return whenDown;\n        }\n\n      }\n\n      return new Ref();\n    }\n\n  }\n\n  const bootstrapContext = new Context();\n\n  return {\n    bootstrapContext,\n    complete() {\n      stage.it = BootstrapStage.Ready;\n    },\n  };\n}\n\nconst enum BootstrapStage {\n  Init,\n  Ready,\n}\n","/**\n * @module wesib/wesib\n */\nimport { AfterEvent, AfterEvent__symbol, EventKeeper } from 'fun-events';\nimport { FeatureStatus } from './feature-status';\n\n/**\n * Dynamically loaded feature reference.\n *\n * It is returned from [[BootstrapContext.load]] and can be used to read feature load status and unload it.\n *\n * Implements an `EventKeeper` interface by sending a feature load status updates.\n *\n * @category Core\n */\nexport abstract class FeatureRef implements EventKeeper<[FeatureStatus]> {\n\n  /**\n   * An `AfterEvent` sender of feature load status updates.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly read: AfterEvent<[FeatureStatus]>;\n\n  get [AfterEvent__symbol](): AfterEvent<[FeatureStatus]> {\n    return this.read;\n  }\n\n  /**\n   * A promise resolved when feature is unloaded.\n   *\n   * This happens after all feature references dismissed.\n   */\n  abstract readonly down: Promise<void>;\n\n  /**\n   * Dismisses feature reference.\n   *\n   * When all feature references dismissed, then unloads the feature. This removes everything set up by the\n   * feature via [[BootstrapSetup]] and [[DefinitionSetup]].\n   *\n   * @param reason  Arbitrary reason of feature reference dismiss. This will be reported by load status supplies\n   * as their cut off reason.\n   *\n   * @returns A promise resolved when feature is unloaded. This happens only after all feature references dismissed.\n   */\n  abstract dismiss(reason?: any): Promise<void>;\n\n}\n","/**\n * @module @wesib/wesib\n */\n/**\n * A path to sub-state containing element an attributes.\n *\n * Thus, an attribute state path is always something like `[AttributePath__root, 'attribute-name']`.\n *\n * @category Feature\n */\nexport const AttributePath__root = (/*#__PURE__*/ Symbol('attribute'));\n\n/**\n * A path to the named attribute state.\n *\n * @category Feature\n */\nexport type AttributePath = readonly [keyof AttributePath__root_Keys, string];\n\n/**\n * Constructs a named attribute state path.\n *\n * @category Feature\n * @param name  Target attribute name.\n *\n * @return Attribute state path.\n */\nexport function attributePathTo(name: string): AttributePath {\n  return [AttributePath__root, name];\n}\n\n/**\n * @category Feature\n */\n// tslint:disable-next-line:class-name\nexport interface AttributePath__root_Keys {\n  [AttributePath__root]: true;\n}\n","/**\n * @module @wesib/wesib\n */\nimport { noop } from 'call-thru';\nimport { StatePath } from 'fun-events';\nimport { ComponentContext } from '../../component';\nimport { AttributeUpdateReceiver } from './attribute-def';\nimport { AttributePath, attributePathTo } from './attribute-path';\nimport { AttributeChangedCallback } from './attribute-registrar';\n\n/**\n * @internal\n */\nexport function attributeStateUpdate<T extends object>(\n    name: string,\n    updateState: boolean | AttributeUpdateReceiver<T> | StatePath = true,\n): AttributeChangedCallback<T> {\n  if (updateState === false) {\n    return noop;\n  }\n  if (updateState === true || typeof updateState === 'function') {\n\n    const key = attributePathTo(name);\n    const update: AttributeUpdateReceiver<T> = updateState === true ? defaultUpdateState : updateState;\n\n    return function (this: T, newValue, oldValue) {\n      update.call(this, key, newValue, oldValue);\n    };\n  }\n  return function (this: T, newValue, oldValue) {\n    ComponentContext.of(this).updateState(updateState, newValue, oldValue);\n  };\n}\n\nfunction defaultUpdateState<T extends object>(\n    this: T,\n    path: AttributePath,\n    newValue: string,\n    oldValue: string | null,\n) {\n  ComponentContext.of(this).updateState(path, newValue, oldValue);\n}\n","import { ComponentClass } from '../../component/definition';\nimport { AttributeDef } from './attribute-def';\nimport { AttributeChangedCallback } from './attribute-registrar';\nimport { attributeStateUpdate } from './attribute-state-update.impl';\n\n/**\n * @internal\n */\nexport function parseAttributeDef<T extends ComponentClass>(\n    target: InstanceType<T>,\n    propertyKey: string | symbol,\n    opts?: AttributeDef<InstanceType<T>> | string,\n) {\n\n  let name: string;\n  let updateState: AttributeChangedCallback<InstanceType<T>>;\n\n  if (typeof opts === 'string') {\n    name = opts;\n    updateState = attributeStateUpdate(name);\n  } else {\n    if (opts && opts.name) {\n      name = opts.name;\n    } else if (typeof propertyKey !== 'string') {\n      throw new TypeError(\n          'Attribute name is required, as property key is not a string: ' +\n          `${target.constructor.name}.${propertyKey.toString()}`,\n      );\n    } else {\n      name = propertyKey;\n    }\n\n    updateState = attributeStateUpdate(name, opts && opts.updateState);\n  }\n\n  return { name, updateState };\n}\n","/**\n * @module @wesib/wesib\n */\nimport { SingleContextKey, SingleContextRef } from 'context-values';\n\n/**\n * Custom element attribute change callback.\n *\n * This function is called whenever a new attribute value assigned.\n *\n * @category Feature\n * @typeparam T  A type of component.\n */\nexport type AttributeChangedCallback<T extends object = any> =\n/**\n * @param this  Component instance.\n * @param newValue  New attribute value.\n * @param oldValue  Previous attribute value, or `null` if there were no value assigned.\n */\n    (this: T, newValue: string, oldValue: string | null) => void;\n\n/**\n * @category Feature\n */\nexport type AttributeRegistrar<T extends object = any> = (name: string, callback: AttributeChangedCallback<T>) => void;\n\n/**\n * @category Feature\n */\nexport const AttributeRegistrar: SingleContextRef<AttributeRegistrar> =\n    (/*#__PURE__*/ new SingleContextKey<AttributeRegistrar>('attribute-registrar'));\n","import { ContextKey, ContextKey__symbol, SingleContextKey } from 'context-values';\nimport { BootstrapWindow } from '../../boot/globals';\nimport { Class, mergeFunctions } from '../../common';\nimport { ComponentContext, ComponentMount } from '../../component';\nimport { DefinitionContext } from '../../component/definition';\nimport { AttributeChangedCallback } from './attribute-registrar';\n\nconst AttributeRegistry__key = (/*#__PURE__*/ new SingleContextKey<AttributeRegistry>('attribute-registry'));\n\n/**\n * @internal\n */\nexport class AttributeRegistry<T extends object = any> {\n\n  static get [ContextKey__symbol](): ContextKey<AttributeRegistry> {\n    return AttributeRegistry__key;\n  }\n\n  private readonly _MutationObserver: typeof MutationObserver;\n  private readonly _attrs: { [name: string]: AttributeChangedCallback<T> } = {};\n\n  constructor(ctx: DefinitionContext) {\n    this._MutationObserver = ctx.get(BootstrapWindow).MutationObserver;\n  }\n\n  add(name: string, callback: AttributeChangedCallback<T>): void {\n    this._attrs[name] = mergeFunctions<[string, string | null], void, T>(this._attrs[name], callback);\n  }\n\n  define(elementType: Class) {\n\n    const attrs = this._attrs;\n    const observedAttributes = Object.keys(attrs);\n\n    if (!observedAttributes.length) {\n      return; // No attributes defined\n    }\n\n    Object.defineProperty(elementType, 'observedAttributes', {\n      configurable: true,\n      enumerable: true,\n      value: observedAttributes,\n    });\n    Object.defineProperty(elementType.prototype, 'attributeChangedCallback', {\n      configurable: true,\n      enumerable: true,\n      value: function (name: string, oldValue: string | null, newValue: string) {\n        (attrs[name] as any).call(ComponentContext.of(this).component, newValue, oldValue);\n      },\n    });\n  }\n\n  mount(mount: ComponentMount<T>) {\n\n    const element = mount.element;\n    const attrs = this._attrs;\n    const attributeFilter = Object.keys(attrs);\n\n    if (!attributeFilter.length) {\n      return; // No attributes defined\n    }\n\n    const observer = new this._MutationObserver(\n        records => records.forEach(\n            record => {\n\n              const attributeName = record.attributeName as string;\n\n              return (attrs[attributeName] as any).call(\n                  ComponentContext.of(element).component,\n                  element.getAttribute(attributeName),\n                  record.oldValue,\n              );\n            },\n        ),\n    );\n\n    observer.observe(element, {\n      attributes: true,\n      attributeFilter,\n      attributeOldValue: true,\n    });\n  }\n\n}\n","/**\n * @module @wesib/wesib\n */\nimport { FeatureDef, FeatureDef__symbol } from '../feature-def';\nimport { AttributeChangedCallback, AttributeRegistrar } from './attribute-registrar';\nimport { AttributeRegistry } from './attribute-registry.impl';\n\nconst AttributesSupport__feature: FeatureDef = {\n  setup(setup) {\n    setup.perDefinition({ as: AttributeRegistry });\n    setup.perDefinition({\n      a: AttributeRegistrar,\n      by(registry: AttributeRegistry) {\n        return <T extends object>(name: string, callback: AttributeChangedCallback<T>) =>\n            registry.add(name, callback);\n      },\n      with: [AttributeRegistry],\n    });\n    setup.onDefinition(definitionContext => {\n      // Define element prototype attributes\n      definitionContext.whenReady(({ elementType }) => definitionContext.get(AttributeRegistry).define(elementType));\n    });\n    setup.onComponent(componentContext => {\n\n      const mount = componentContext.mount;\n\n      if (mount) {\n        // Mount element attributes\n        componentContext.get(AttributeRegistry).mount(mount);\n      }\n    });\n  },\n};\n\n/**\n * A feature adding attributes to custom elements.\n *\n * This feature is enabled automatically whenever an `@Attribute`, `@Attributes`, or `@AttributeChanged` decorator\n * applied to component.\n *\n * @category Feature\n */\nexport class AttributesSupport {\n\n  static get [FeatureDef__symbol](): FeatureDef {\n    return AttributesSupport__feature;\n  }\n\n}\n","/**\n * @module @wesib/wesib\n */\nimport { TypedPropertyDecorator } from '../../common';\nimport { ComponentContext, ComponentDef } from '../../component';\nimport { ComponentClass } from '../../component/definition';\nimport { FeatureDef } from '../feature-def';\nimport { AttributeDef } from './attribute-def';\nimport { parseAttributeDef } from './attribute-def.impl';\nimport { AttributeRegistrar } from './attribute-registrar';\nimport { AttributesSupport } from './attributes-support.feature';\n\n/**\n * Creates a decorator for component's property that accesses custom element's attribute.\n *\n * The decorated property accesses corresponding attribute on read, and updates it on setting.\n *\n * This decorator automatically enables [[AttributesSupport]] feature.\n *\n * @category Feature\n * @typeparam T  A type of decorated component class.\n * @param def  Attribute definition or just an attribute name.\n *\n * @return Component property decorator.\n */\nexport function Attribute<T extends ComponentClass>(\n    def?: AttributeDef<InstanceType<T>> | string,\n): TypedPropertyDecorator<T> {\n  return <V>(target: InstanceType<T>, propertyKey: string | symbol, descriptor?: TypedPropertyDescriptor<V>) => {\n\n    const { name, updateState } = parseAttributeDef(target, propertyKey, def);\n    const componentType = target.constructor as T;\n\n    FeatureDef.define(componentType, { needs: AttributesSupport });\n    ComponentDef.define(\n        componentType,\n        {\n          define(definitionContext) {\n            definitionContext.get(AttributeRegistrar)(name, updateState);\n          },\n        },\n    );\n\n    const newDesc: TypedPropertyDescriptor<string | null> = {\n      get(this: InstanceType<T>): string | null {\n        return ComponentContext.of(this).element.getAttribute(name);\n      },\n      set(this: InstanceType<T>, newValue: string | null) {\n        ComponentContext.of(this).element.setAttribute(name, newValue as string);\n      },\n    };\n\n    if (descriptor == null) {\n      // Annotated field\n      Object.defineProperty(target, propertyKey, newDesc);\n      return;\n    }\n\n    return newDesc;\n  };\n}\n","/**\n * @module @wesib/wesib\n */\nimport { TypedPropertyDecorator } from '../../common';\nimport { ComponentDef } from '../../component';\nimport { ComponentClass } from '../../component/definition';\nimport { FeatureDef } from '../feature-def';\nimport { AttributeDef } from './attribute-def';\nimport { parseAttributeDef } from './attribute-def.impl';\nimport { AttributeChangedCallback, AttributeRegistrar } from './attribute-registrar';\nimport { AttributesSupport } from './attributes-support.feature';\n\n/**\n * Creates a component method decorator for custom element attribute change callback.\n *\n * The decorated method should have up to two parameters:\n *\n * - the first one accepts new attribute value.\n * - the second one accepts old attribute value (or `null`),\n *\n * Example:\n * ```TypeScript\n * @Component('my-component')\n * class MyComponent {\n *\n *   @AttributeChanged('my-attribute')\n *   myAttributeChanged(newValue: string, oldValue: string | null) {\n *     console.log(`my-attribute value changed from ${oldValue} to ${newValue}`);\n *   }\n *\n * }\n * ```\n *\n * This decorator automatically enables [[AttributesSupport]] feature.\n *\n * @category Feature\n * @typeparam T  A type of decorated component class.\n * @param def  Attribute definition or just an attribute name.\n *\n * @return Component method decorator.\n */\nexport function AttributeChanged<T extends ComponentClass>(\n    def?: AttributeDef<InstanceType<T>> | string,\n): TypedPropertyDecorator<T> {\n  return (target: InstanceType<T>, propertyKey: string | symbol) => {\n\n    const { name, updateState } = parseAttributeDef(target, propertyKey, def);\n    const componentType = target.constructor as T;\n\n    FeatureDef.define(componentType, { needs: AttributesSupport });\n    ComponentDef.define(\n        componentType,\n        {\n          define(defContext) {\n            defContext.get(AttributeRegistrar)(name, function (\n                this: InstanceType<T>,\n                newValue: string,\n                oldValue: string | null,\n            ) {\n\n              const callback: AttributeChangedCallback<InstanceType<T>> = (this as any)[propertyKey];\n\n              callback.call(this, newValue, oldValue);\n              updateState.call(this, newValue, oldValue);\n            });\n          },\n        },\n    );\n  };\n}\n","/**\n * @module @wesib/wesib\n */\n/**\n * A path to sub-state containing DOM properties.\n *\n * Thus a property state path is always something like `[DomPropertyPath__root, 'property-name']`.\n *\n * @category Feature\n */\nexport const DomPropertyPath__root = (/*#__PURE__*/ Symbol('dom-property'));\n\n/**\n * A path to the named DOM property state.\n *\n * @category Feature\n */\nexport type DomPropertyPath<K extends PropertyKey = PropertyKey> = readonly [keyof DomPropertyPath__root_Keys, K];\n\n/**\n * Constructs a named DOM property state path.\n *\n * @category Feature\n * @param key  Target property key.\n *\n * @return DOM property state path.\n */\nexport function domPropertyPathTo<K extends PropertyKey = PropertyKey>(key: K): DomPropertyPath<K> {\n  return [DomPropertyPath__root, key];\n}\n\n/**\n * @category Feature\n */\n// tslint:disable-next-line:class-name\nexport interface DomPropertyPath__root_Keys {\n  [DomPropertyPath__root]: true;\n}\n","/**\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKey__symbol, SingleContextKey } from 'context-values';\nimport { StateTracker } from 'fun-events';\n\nconst ComponentState__key = (/*#__PURE__*/ new SingleContextKey<ComponentState>('component-state'));\n\n/**\n * Component state tracker.\n *\n * @category Feature\n */\nexport class ComponentState extends StateTracker {\n\n  static get [ContextKey__symbol](): ContextKey<ComponentState> {\n    return ComponentState__key;\n  }\n\n}\n","/**\n * @module @wesib/wesib\n */\nimport { ComponentContext, StateUpdater } from '../../component';\nimport { FeatureDef, FeatureDef__symbol } from '../feature-def';\nimport { ComponentState } from './component-state';\n\nconst StateSupport__feature: FeatureDef = {\n  setup(setup) {\n    setup.perComponent({\n      a: ComponentState,\n      by(context: ComponentContext) {\n\n        const state = new ComponentState();\n\n        context.whenDestroyed(reason => state.done(reason));\n\n        return state;\n      },\n    });\n    setup.perComponent({\n      a: StateUpdater,\n      by(state: ComponentState) {\n        return state.update;\n      },\n      with: [ComponentState],\n    });\n  },\n};\n\n/**\n * Component state support feature.\n *\n * When enabled, it registers the following component context values:\n *\n * - [[StateUpdater]] that allows to update the component state, and\n * - [[ComponentState]] that allows to track component state changes.\n *\n * Other features would use this to notify when the state changes. E.g. [[DomPropertiesSupport]]\n * and [[AttributesSupport]] features issue state updates when needed.\n *\n * @category Feature\n */\nexport class StateSupport {\n\n  static get [FeatureDef__symbol](): FeatureDef {\n    return StateSupport__feature;\n  }\n\n}\n","/**\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKey__symbol, SingleContextKey } from 'context-values';\n\nconst RenderScheduler__key = (/*#__PURE__*/ new SingleContextKey<RenderScheduler>('render-scheduler'));\n\n/**\n * Rendering scheduler.\n *\n * Schedules components rendering in order to make it less often. E.g. by utilizing `requestAnimationFrame()`.\n *\n * @category Feature\n */\nexport abstract class RenderScheduler {\n\n  /**\n   * A key of bootstrap, definition, or component context value containing [[RenderScheduler]] instance.\n   */\n  static get [ContextKey__symbol](): ContextKey<RenderScheduler> {\n    return RenderScheduler__key;\n  }\n\n  /**\n   * Creates new render schedule.\n   *\n   * @returns New render schedule instance.\n   */\n  abstract newSchedule(): RenderSchedule;\n\n}\n\n/**\n * Render schedule.\n *\n * @category Feature\n */\nexport interface RenderSchedule {\n\n  /**\n   * Schedules component rendering.\n   *\n   * Only the latest rendering request has affect. I.e. if multiple rendering have been scheduled then the rendering\n   * will be performed by the latest one.\n   *\n   * @param render  A rendering function.\n   */\n  schedule(render: (this: void) => void): void;\n\n}\n","/**\n * @module @wesib/wesib\n */\nimport { ComponentContext } from '../../component';\nimport { ComponentState } from '../state';\nimport { RenderDef } from './render-def';\nimport { RenderScheduler } from './render-scheduler';\n\n/**\n * Component element render function interface.\n *\n * It has no arguments. It may return either nothing, or a function. In the latter case the returned function will be\n * called immediately to render the element. It may, in turn, return a render function, and so on.\n *\n * @category Feature\n */\nexport type ElementRender =\n/**\n * @returns Either delegated render, or nothing.\n */\n    (this: void) => void | ElementRender;\n\n/**\n * @category Feature\n */\nexport const ElementRender = {\n\n  /**\n   * Enables component element rendering.\n   *\n   * The `render` call will be scheduled by [[RenderScheduler]] once component state updated.\n   *\n   * @param context  Target component context.\n   * @param render  Element render function.\n   * @param def  Optional element render definition.\n   */\n  render(\n      this: void,\n      context: ComponentContext,\n      render: ElementRender,\n      def: RenderDef = {},\n  ): void {\n\n    const { offline, path = [] } = def;\n    const stateTracker = context.get(ComponentState).track(path);\n    const schedule = context.get(RenderScheduler).newSchedule();\n\n    let rendered = false;\n    const stateSupply = stateTracker.onUpdate(() => {\n      if (offline || context.connected) {\n        scheduleRender();\n      } else {\n        rendered = false;\n      }\n    });\n\n    if (offline) {\n      scheduleRender();\n    } else {\n      context.whenOn(() => {\n        if (!rendered) {\n          scheduleRender();\n        }\n      }).whenOff(reason => {\n        stateSupply.off(reason);\n        rendered = true;\n      });\n    }\n\n    function scheduleRender() {\n      rendered = true;\n      schedule.schedule(renderElement);\n    }\n\n    function renderElement() {\n      for (;;) {\n\n        const newRender = render();\n\n        if (newRender === render || typeof newRender !== 'function') {\n          break;\n        }\n\n        render = newRender;\n      }\n    }\n  },\n\n};\n","/**\n * @module @wesib/wesib\n */\nimport { noop } from 'call-thru';\nimport { BootstrapWindow } from '../../boot/globals';\nimport { FeatureDef, FeatureDef__symbol } from '../feature-def';\nimport { RenderSchedule as RenderSchedule_, RenderScheduler as RenderScheduler_ } from './render-scheduler';\n\nconst RenderSupport__feature: FeatureDef = {\n  setup(setup) {\n    setup.provide({\n      a: RenderScheduler_,\n      by: createRenderScheduler,\n      with: [BootstrapWindow],\n    });\n  },\n};\n\n/**\n * Rendering support feature.\n *\n * This feature is automatically enabled when {@link Render @Render} decorator is used.\n *\n * @category Feature\n */\nexport class RenderSupport {\n\n  static get [FeatureDef__symbol](): FeatureDef {\n    return RenderSupport__feature;\n  }\n\n}\n\nfunction createRenderScheduler(window: BootstrapWindow) {\n\n  class RenderScheduler extends RenderScheduler_ {\n\n    newSchedule() {\n\n      let scheduled: () => void = noop;\n\n      class RenderSchedule implements RenderSchedule_ {\n\n        schedule(render: (this: void) => void): void {\n\n          const previouslyScheduled = scheduled;\n\n          scheduled = render;\n          if (previouslyScheduled === noop) {\n            window.requestAnimationFrame(() => {\n              scheduled();\n              scheduled = noop;\n            });\n          }\n        }\n\n      }\n\n      return new RenderSchedule();\n    }\n  }\n\n  return new RenderScheduler();\n}\n","/**\n * @module @wesib/wesib\n */\nimport { TypedPropertyDecorator } from '../../common';\nimport { ComponentDef } from '../../component';\nimport { ComponentClass } from '../../component/definition';\nimport { StateSupport } from '../state';\nimport { ElementRender } from './element-render';\nimport { RenderDef } from './render-def';\nimport { RenderSupport } from './render-support.feature';\n\n/**\n * Component property decorator that declares a rendering method for the component.\n *\n * The decorated method call will be scheduled by [[RenderScheduler]] once component state updated.\n *\n * The decorated method should have no arguments. It may return either nothing, or a function. In the latter case the\n * returned function will be called immediately to render the element. It may, in turn, return a renderer function,\n * and so on.\n *\n * This decorator automatically enables [[StateSupport]] and [[RenderSupport]] features.\n *\n * Utilizes [[ElementRender.render]] function to define rendering.\n *\n * @category Feature\n * @typeparam T  A type of decorated component class.\n * @param def  Non-mandatory render definition.\n *\n * @returns Component method decorator.\n */\nexport function Render<T extends ComponentClass>(def?: RenderDef): TypedPropertyDecorator<T> {\n  return (target: InstanceType<T>, propertyKey: string | symbol) => {\n\n    const componentType = target.constructor as T;\n\n    ComponentDef.define(\n        componentType,\n        {\n          define(defContext) {\n            defContext.whenComponent(componentContext => {\n              componentContext.whenReady(() => {\n\n                const component = componentContext.component as any;\n                const render: () => any = component[propertyKey].bind(component);\n\n                ElementRender.render(componentContext, render, def);\n              });\n            });\n          },\n          feature: {\n            needs: [StateSupport, RenderSupport],\n          },\n        },\n    );\n  };\n}\n","/**\n * @module @wesib/wesib\n */\nimport { SingleContextKey, SingleContextRef } from 'context-values';\n\n/**\n * Component shadow content root.\n *\n * @category Feature\n */\nexport type ShadowContentRoot = ShadowRoot;\n\n/**\n * A key of component context value containing a shadow content root instance.\n *\n * This is only available when the component is decorated with {@link AttachShadow @AttachShadow} decorator.\n *\n * @category Feature\n */\nexport const ShadowContentRoot: SingleContextRef<ShadowContentRoot> =\n    (/*#__PURE__*/ new SingleContextKey<ShadowContentRoot>('shadow-content-root'));\n","/**\n * @module @wesib/wesib\n */\n/**\n * An event related to element's shadow DOM.\n *\n * The following event types supported:\n * - `wesib:shadowAttached` is thrown when a shadow root is attached to element.\n *   In particular, it is thrown for components decorated with {@link AttachShadow @AttachShadow}.\n *   This event bubbles and is not cancelable.\n *\n * @category Feature\n */\nexport class ShadowDomEvent extends Event {\n\n  /**\n   * Constructs shadow DOM event.\n   *\n   * @param type  Event type.\n   * @param eventInitDict  Event initialization dictionary.\n   */\n  constructor(type: string, eventInitDict?: EventInit) {\n    super(type, eventInitDict);\n  }\n\n  /**\n   * Shadow root this event relates to.\n   */\n  get shadowRoot(): ShadowRoot {\n    return (this.target as Element).shadowRoot as ShadowRoot;\n  }\n\n}\n","/**\n * @module @wesib/wesib\n */\nimport { FnContextKey, FnContextRef } from 'context-values';\nimport { ComponentContext } from '../../component';\nimport { ShadowContentDef } from './shadow-content-def';\n\n/**\n * Shadow root builder function type.\n *\n * An instance of this function is available in component context and is used by {@link AttachShadow @AttachShadow}\n * decorator to attach shadow root to decorated component's custom element.\n *\n * By default, if shadow root already exists for the component's element, it uses it.\n *\n * Dispatches a `wesib:shadowAttached` event for the found or attached shadow root.\n *\n * @category Feature\n */\nexport type ShadowRootBuilder =\n/**\n * @param context  Target component context.\n * @param init  Shadow root initialization options.\n *\n * @returns A shadow root instance for target component, or `null`/`undefined` if one can not be attached.\n */\n    (context: ComponentContext<any>, init: ShadowContentDef) => ShadowRoot | null | undefined;\n\n/**\n * A key of component context value containing a shadow root builder instance.\n *\n * @category Feature\n */\nexport const ShadowRootBuilder: FnContextRef<Parameters<ShadowRootBuilder>, ReturnType<ShadowRootBuilder>> =\n    (/*#__PURE__*/ new FnContextKey<Parameters<ShadowRootBuilder>, ReturnType<ShadowRootBuilder>>(\n        'shadow-root-builder',\n    ));\n","/**\n * @module @wesib/wesib\n */\nimport { ComponentContext, ComponentContext__symbol } from '../../component';\nimport { FeatureDef, FeatureDef__symbol } from '../feature-def';\nimport { ShadowDomEvent } from './shadow-dom-event';\nimport { ShadowRootBuilder } from './shadow-root-builder';\n\nconst ShadowDomSupport__feature: FeatureDef = {\n  setup(setup) {\n    setup.provide({ a: ShadowRootBuilder, is: attachShadow });\n  },\n};\n\n/**\n * Shadow root support feature.\n *\n * This feature is automatically enabled when {@link AttachShadow @AttachShadow} decorator is used.\n *\n * @category Feature\n */\nexport class ShadowDomSupport {\n\n  static get [FeatureDef__symbol](): FeatureDef {\n    return ShadowDomSupport__feature;\n  }\n\n}\n\nfunction attachShadow(context: ComponentContext, init: ShadowRootInit): ShadowRoot | undefined {\n\n  const element = context.element;\n  const shadowRoot = shadowRootOf(element, init);\n\n  if (shadowRoot) {\n    (shadowRoot as any)[ComponentContext__symbol] = context;\n    context.dispatchEvent(new ShadowDomEvent('wesib:shadowAttached', { bubbles: true }));\n    return shadowRoot;\n  }\n\n  return;\n}\n\nfunction shadowRootOf(element: Element, init: ShadowRootInit): ShadowRoot | undefined {\n\n  const existing = element.shadowRoot;\n\n  if (existing) {\n    // Shadow root already attached. Using it.\n    return existing;\n  }\n  if ('attachShadow' in element) {\n    return element.attachShadow(init);\n  }\n\n  return; // Unable to attach shadow root.\n}\n","/**\n * @module @wesib/wesib\n */\nimport { ComponentContext, ComponentDef, ContentRoot } from '../../component';\nimport { ShadowContentRoot } from './shadow-content-root';\nimport { ShadowDomSupport } from './shadow-dom-support.feature';\nimport { ShadowRootBuilder } from './shadow-root-builder';\n\n/**\n * Shadow content root definition.\n *\n * This is a readonly component shadow root initialization options.\n *\n * @category Feature\n */\nexport type ShadowContentDef = Readonly<ShadowRootInit>;\n\nconst defaultShadowContentDef: ShadowContentDef = { mode: 'open' };\n\n/**\n * @category Feature\n */\nexport const ShadowContentDef = {\n\n  /**\n   * Creates component definition for the given shadow content root definition.\n   *\n   * The returned component definition enables [[ShadowDomSupport]] feature and attaches shadow content root to the\n   * component.\n   *\n   * @typeparam T  A type of component.\n   * @param def  Shadow content root definition. Uses `mode: 'open'` by default.\n   *\n   * @returns Component definition.\n   */\n  componentDef<T extends object>(\n      this: void,\n      def: ShadowContentDef = defaultShadowContentDef,\n  ): ComponentDef<T> {\n    return {\n      setup(setup) {\n        setup.perComponent(\n            {\n              a: ShadowContentRoot,\n              by(ctx: ComponentContext<T>) {\n                return ctx.get(ShadowRootBuilder)(ctx, def);\n              },\n            },\n        );\n        setup.perComponent({ // Content root is an alias of shadow root when present.\n          a: ContentRoot,\n          by(context: ComponentContext<T>) {\n            return context.get(ShadowContentRoot, { or: null });\n          },\n        });\n      },\n      feature: { needs: ShadowDomSupport },\n    };\n  },\n\n};\n","/**\n * @module @wesib/wesib\n */\nimport { TypedClassDecorator } from '../../common';\nimport { ComponentDef } from '../../component';\nimport { ComponentClass } from '../../component/definition';\nimport { ShadowContentDef } from './shadow-content-def';\n\n/**\n * Component class decorator that attaches shadow root to decorated component instance.\n *\n * Applies component definition created by [[ShadowContentDef.componentDef]] function.\n *\n * @category Feature\n * @typeparam T  A type of decorated component class.\n * @param def  Shadow content root definition. Uses `mode: 'open'` by default.\n *\n * @return Component class decorator.\n */\nexport function AttachShadow<T extends ComponentClass = any>(\n    def?: ShadowContentDef,\n): TypedClassDecorator<T> {\n  return (type: T) => {\n    ComponentDef.define(type, ShadowContentDef.componentDef(def));\n  };\n}\n","import { ContextUpKey, ContextUpRef, ContextValueOpts, ContextValues } from 'context-values';\nimport { AfterEvent, EventKeeper, EventSender, OnEvent, onSupplied } from 'fun-events';\n\ntype FetchAgent<Res extends any[]> = (\n    this: void,\n    next: (this: void, request?: Request) => OnEvent<Res>,\n    request: Request,\n) => EventSender<Res>;\n\ntype CombinedFetchAgent<Res extends any[]> = (\n    this: void,\n    next: (this: void, request: Request) => OnEvent<Res>,\n    request: Request,\n) => OnEvent<Res>;\n\n/**\n * @internal\n */\nexport class FetchAgentKey<Res extends any[]>\n    extends ContextUpKey<CombinedFetchAgent<Res>, FetchAgent<Res>>\n    implements ContextUpRef<CombinedFetchAgent<Res>, FetchAgent<Res>, AfterEvent<FetchAgent<Res>[]>> {\n\n  constructor(name: string) {\n    super(name);\n  }\n\n  grow<Ctx extends ContextValues>(\n      opts: ContextValueOpts<\n          Ctx,\n          CombinedFetchAgent<Res>,\n          EventKeeper<FetchAgent<Res>[]> | FetchAgent<Res>,\n          AfterEvent<FetchAgent<Res>[]>>,\n  ): CombinedFetchAgent<Res> {\n\n    let agent!: CombinedFetchAgent<Res>;\n\n    opts.seed((...agents) => agent = combineFetchAgents(agents));\n\n    const fallback = opts.byDefault(() => (next, request) => agent(next, request));\n\n    return fallback || defaultFetchAgent;\n  }\n\n}\n\nfunction defaultFetchAgent<Res extends any[]>(\n    next: (this: void, request: Request) => OnEvent<Res>,\n    request: Request,\n): OnEvent<Res> {\n  return next(request);\n}\n\n/**\n * @internal\n */\nexport function combineFetchAgents<Res extends any[]>(agents: FetchAgent<Res>[]): CombinedFetchAgent<Res> {\n  return (next, request) => {\n\n    const fetch: (agentIdx: number, agentRequest: Request) => OnEvent<Res> = (agentIdx, agentRequest) => {\n\n      const agent = agents[agentIdx];\n\n      if (!agent) {\n        return next(agentRequest);\n      }\n\n      return onSupplied(\n          agent(\n              (nextRequest = agentRequest) => fetch(agentIdx + 1, nextRequest),\n              agentRequest,\n          ),\n      );\n    };\n\n    return fetch(0, request);\n  };\n}\n","/**\n * @module @wesib/generic\n */\nimport { ContextUpRef } from 'context-values';\nimport { EventSender, OnEvent } from 'fun-events';\nimport { FetchAgentKey } from './fetch-agent-key.impl';\n\n/**\n * HTTP fetch agent signature.\n *\n * The agent can be used to alter [[HttpFetch]] processing. For that it should be registered in appropriate context.\n *\n * All registered agents are organized into chain. The first agent in chain is called by [[HttpFetch]].\n */\nexport type HttpFetchAgent =\n/**\n * @param next  Either calls the next agent in chain, or actually fetches the data if this agent is the last one.\n * Accepts an optional `Request` parameter. The original request will be used instead when omitted.\n * @param request  HTTP request.\n *\n * @returns An `EventSender` of response object(s). It is returned either to preceding agent in chain, or as a result of\n * [[HttpFetch]] call.\n */\n    (\n        this: void,\n        next: (this: void, request?: Request) => OnEvent<[Response]>,\n        request: Request,\n    ) => EventSender<[Response]>;\n\nexport namespace HttpFetchAgent {\n\n  /**\n   * Combined HTTP fetch agent signature.\n   *\n   * This is what is available under [[HttpFetchAgent]] key.\n   */\n  export type Combined =\n  /**\n   * @param next  Either calls the next agent in chain, or actually fetches the data if this agent is the last one.\n   * Accepts `Request` parameter.\n   * @param request  HTTP request.\n   *\n   * @returns An `OnEvent` registrar of response object(s) receivers. It is returned as a result of [[HttpFetch]] call.\n   */\n      (\n          this: void,\n          next: (this: void, request: Request) => OnEvent<[Response]>,\n          request: Request,\n      ) => OnEvent<[Response]>;\n\n}\n\n/**\n * A key of context value containing an [[HttpFetchAgent]] instance.\n *\n * The agent returned combines all registered agents into one. If no agent registered it just performs the fetch.\n */\nexport const HttpFetchAgent: ContextUpRef<HttpFetchAgent.Combined, HttpFetchAgent> =\n    (/*#__PURE__*/ new FetchAgentKey<[Response]>('http-fetch-agent'));\n","import { BootstrapContext, BootstrapWindow } from '@wesib/wesib';\nimport { DomEventDispatcher, EventEmitter, EventSupply, eventSupply, OnEvent, onEventBy } from 'fun-events';\nimport { HttpFetch } from './http-fetch';\nimport { HttpFetchAgent } from './http-fetch-agent';\n\nconst HttpFetchAborted = {};\n\n/**\n * @internal\n */\nexport function newHttpFetch(context: BootstrapContext): HttpFetch {\n\n  const window = context.get(BootstrapWindow);\n  const agent = context.get(HttpFetchAgent);\n\n  return (input, init) => agent(fetch, new Request(input, init));\n\n  function fetch(request: Request): OnEvent<[Response]> {\n    return onEventBy(receiver => {\n\n      const responseEmitter = new EventEmitter<[Response]>();\n      let supply: EventSupply;\n\n      if ('AbortController' in window) {\n\n        const abortController = new (window as any).AbortController();\n        const { signal } = abortController;\n\n        supply = eventSupply(reason => {\n          if (reason === HttpFetchAborted) {\n            abortController.abort();\n          }\n        });\n        receiver.supply.whenOff(() => supply.off(HttpFetchAborted)).needs(supply);\n        responseEmitter.on({\n          supply,\n          receive(ctx, response) {\n            receiver.receive(ctx, response);\n          },\n        });\n\n        const customSignal = request.signal;\n\n        if (customSignal) {\n          new DomEventDispatcher(customSignal).on('abort').once(() => abortController.abort());\n          if (customSignal.aborted) {\n            abortController.abort();\n          }\n        }\n\n        request = new Request(request, { signal });\n      } else {\n        supply = responseEmitter.on(receiver);\n      }\n\n      window.fetch(request)\n          .then(response => {\n            responseEmitter.send(response);\n            supply.off();\n          })\n          .catch(reason => supply.off(reason));\n    });\n  }\n}\n","/**\n * @module @wesib/generic\n */\nimport { bootstrapDefault } from '@wesib/wesib';\nimport { FnContextKey, FnContextRef } from 'context-values';\nimport { OnEvent } from 'fun-events';\nimport { newHttpFetch } from './http-fetch.impl';\n\n/**\n * HTTP fetch function signature.\n *\n * This is a function that wraps browser's\n * [fetch()](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch) function and provides\n * additional functionality. E.g. request interception.\n *\n * This function returns an `OnEvent` sender instead of a `Promise`. This allows to report multiple responses.\n * E.g. when the resource refresh requested and delivered. The request is sent whenever a receiver is registered\n * in this sender. When the fetch completes the response supply is cut off, and callbacks registered with its\n * `whenOff()` method are notified. When fetch fails for whatever reason, this reason is passed to these callbacks.\n * The fetch can be aborted by cutting off the response supply. I.e. by calling its `off()` method.\n *\n * An instance of [[HttpFetch]] is available from bootstrap context.\n */\nexport type HttpFetch =\n/**\n * @param input  The resource to fetch. This can either an URL string, or a `Request` object.\n * @param init  Custom settings to apply to the request.\n *\n * @returns An `OnEvent` sender of responses.\n */\n    (this: void, input: RequestInfo, init?: RequestInit) => OnEvent<[Response]>;\n\n/**\n * A key of bootstrap context value containing an [[HttpFetch]] instance.\n */\nexport const HttpFetch: FnContextRef<Parameters<HttpFetch>, ReturnType<HttpFetch>> =\n    (/*#__PURE__*/ new FnContextKey<Parameters<HttpFetch>, ReturnType<HttpFetch>>(\n        'http-fetch',\n        {\n          byDefault: bootstrapDefault(newHttpFetch),\n        },\n    ));\n","import {\n  BootstrapContext,\n  BootstrapRoot,\n  ComponentContext,\n  ComponentContext__symbol,\n  ComponentEvent,\n} from '@wesib/wesib';\nimport { ContextKey, ContextKey__symbol, SingleContextKey } from 'context-values';\nimport { DomEventDispatcher, EventEmitter, OnEvent, trackValue, ValueTracker } from 'fun-events';\n\n/**\n * @internal\n */\nexport type HierarchyRoot = ValueTracker<ComponentContext | undefined>;\n\n/**\n * @internal\n */\nexport const HierarchyRoot = (/*#__PURE__*/ new SingleContextKey<HierarchyRoot>(\n    'hierarchy-root',\n    {\n      byDefault: bsContext => {\n\n        const root: Element = bsContext.get(BootstrapRoot);\n\n        new DomEventDispatcher(root).on<ComponentEvent>('wesib:component')(\n            ({ context }: ComponentEvent) => context.get(HierarchyUpdates).issue(),\n        );\n\n        return trackValue();\n      },\n    },\n));\n\nconst HierarchyUpdates__key = (/*#__PURE__*/ new SingleContextKey<HierarchyUpdates>(\n    'hierarchy-updates',\n    {\n      byDefault: context => new HierarchyUpdates(context.get(ComponentContext)),\n    },\n));\n\n/**\n * @internal\n */\nexport class HierarchyUpdates {\n\n  static get [ContextKey__symbol](): ContextKey<HierarchyUpdates> {\n    return HierarchyUpdates__key;\n  }\n\n  readonly on: OnEvent<[ComponentContext]>;\n  readonly send: (this: void) => void;\n  readonly issue: () => void;\n\n  constructor(context: ComponentContext) {\n\n    const updates = new EventEmitter<[ComponentContext]>();\n    const hierarchyRoot = context.get(BootstrapContext).get(HierarchyRoot);\n\n    this.on = updates.on;\n    this.send = () => updates.send(context);\n    this.issue = () => {\n\n      const parent = findParentContext(context);\n\n      if (parent) {\n        parent[0].get(HierarchyUpdates).send();\n      } else {\n        hierarchyRoot.it = context;\n      }\n    };\n  }\n\n}\n\n/**\n * @internal\n */\nexport function findParentContext(of: ComponentContext): [ComponentContext, boolean] | undefined {\n\n  const root = of.get(BootstrapContext).get(BootstrapRoot);\n  let element: Node = of.element;\n  let immediate = true;\n\n  if (element === root) {\n    return;\n  }\n  for (;;) {\n\n    const parent = element.parentNode;\n\n    if (!parent) {\n      return;\n    }\n\n    const ctx: ComponentContext = (parent as any)[ComponentContext__symbol];\n\n    if (ctx) {\n      return [ctx, immediate];\n    }\n    if (parent === root) {\n      return;\n    }\n\n    immediate = false;\n    element = parent;\n  }\n}\n","/**\n * @module @wesib/generic\n */\nimport { BootstrapContext, ComponentContext } from '@wesib/wesib';\nimport { ContextKey, ContextKey__symbol, ContextValues, ContextValueSpec, SingleContextKey } from 'context-values';\nimport { AfterEvent, afterEventBy, EventKeeper, eventSupply, trackValue } from 'fun-events';\nimport { newHierarchyRegistry } from './hierarchy-registry.impl';\nimport { findParentContext, HierarchyRoot, HierarchyUpdates } from './hierarchy-updates.impl';\n\nconst HierarchyContext__key = (/*#__PURE__*/ new SingleContextKey<HierarchyContext>(\n    'hierarchy-context',\n    {\n      byDefault: context => newHierarchyContext(context.get(ComponentContext)),\n    },\n));\n\n/**\n * Component's hierarchy context.\n *\n * Passes provided values to hierarchy contexts of nested components.\n *\n * Available as component context value.\n *\n * @typeparam T  A type of component.\n */\nexport abstract class HierarchyContext<T extends object = any> extends ContextValues {\n\n  /**\n   * A key of component context value containing its hierarchy context instance.\n   */\n  static get [ContextKey__symbol](): ContextKey<HierarchyContext> {\n    return HierarchyContext__key;\n  }\n\n  /**\n   * Component context.\n   */\n  abstract readonly context: ComponentContext<T>;\n\n  /**\n   * An `AfterEvent` keeper of enclosing component's hierarchy context.\n   *\n   * May send `undefined` when component is outside of hierarchy. E.g. when it is disconnected.\n   */\n  abstract readonly up: AfterEvent<[HierarchyContext?]>;\n\n  /**\n   * Provides hierarchy context value.\n   *\n   * The provided value will be available in context itself, as well as in all nested hierarchy contexts.\n   *\n   * Note that the provided value key has to `ContextUpKey`.\n   *\n   * @typeparam Deps  Dependencies tuple type.\n   * @typeparam Src  Source value type.\n   * @typeparam Seed  Value seed type.\n   * @param spec  Context value specifier.\n   *\n   * @returns A function that removes the given context value specifier when called.\n   */\n  abstract provide<Deps extends any[], Src, Seed>(\n      spec: ContextValueSpec<HierarchyContext<T>, any, Deps, Src | EventKeeper<Src[]>, Seed>,\n  ): () => void;\n\n}\n\nfunction newHierarchyContext<T extends object>(context: ComponentContext<T>): HierarchyContext<T> {\n\n  const hierarchyRoot = context.get(BootstrapContext).get(HierarchyRoot);\n  const up = afterEventBy<[HierarchyContext?]>(\n      receiver => {\n\n        const parentHierarchy = trackValue<HierarchyContext>();\n        const rootSupply = eventSupply().needs(receiver.supply);\n        const parentSupply = eventSupply().needs(receiver.supply);\n        const updateParent = () => {\n\n          const parent = findParentContext(context);\n\n          if (parent) {\n\n            const [parentCtx, immediate] = parent;\n\n            parentHierarchy.it = parentCtx.get(HierarchyContext);\n            rootSupply.off();\n            if (immediate) {\n              parentSupply.off();\n            }\n          } else {\n            parentHierarchy.it = undefined;\n          }\n        };\n\n        hierarchyRoot.read({\n          supply: rootSupply,\n          receive: () => context.connected && updateParent(),\n        });\n        parentHierarchy.read.consume(\n            newParent => newParent && newParent.context.get(HierarchyUpdates).on(updateParent),\n        ).needs(parentSupply);\n        parentHierarchy.read(receiver);\n        context.whenOn({\n          supply: receiver.supply,\n          receive: (_, onSupply) => {\n            updateParent();\n            onSupply.whenOff(\n                () => Promise.resolve().then(\n                    () => context.connected || (parentHierarchy.it = undefined),\n                ),\n            );\n          },\n        });\n      },\n  ).share();\n  const registry = newHierarchyRegistry<T>(up);\n  const values = registry.newValues();\n\n  class HierarchyCtx extends HierarchyContext<T> {\n\n    readonly get = values.get;\n\n    get context() {\n      return context;\n    }\n\n    get up() {\n      return up;\n    }\n\n    provide<Deps extends any[], Src, Seed>(\n        spec: ContextValueSpec<HierarchyContext<T>, any, Deps, Src | EventKeeper<Src[]>, Seed>,\n    ) {\n      return registry.provide(spec);\n    }\n\n  }\n\n  return new HierarchyCtx();\n}\n","import { ContextRegistry } from 'context-values';\nimport { AfterEvent, afterThe } from 'fun-events';\nimport { HierarchyContext } from './hierarchy-context';\n\n/**\n * @internal\n */\nexport function newHierarchyRegistry<T extends object>(\n    up: AfterEvent<[HierarchyContext?]>,\n): ContextRegistry<HierarchyContext<T>> {\n  return new ContextRegistry(\n      key => up.keep.dig(\n          upper => ((upper ? upper.get(key) : afterThe()) as any),\n      ) as any,\n  );\n}\n","/**\n * @module @wesib/generic\n */\nimport { ComponentClass, ComponentContext } from '@wesib/wesib';\nimport { SingleContextKey, SingleContextRef } from 'context-values';\nimport { ValueTracker } from 'fun-events';\nimport { ElementNodeList } from './element-node-list';\n\n/**\n * Arbitrary element node within component tree. Either bound to some component or not.\n */\nexport type ElementNode =\n    | RawElementNode\n    | ComponentNode;\n\n/**\n * Component tree node representing arbitrary element.\n *\n * This is a base interface of all element node implementations.\n */\nexport interface ComponentTreeNode {\n\n  /**\n   * The element itself.\n   */\n  readonly element: any;\n\n  /**\n   * A context of component bound to this element, if any.\n   */\n  readonly context?: ComponentContext<any>;\n\n  /**\n   * Parent element node, or `null` if element has no parent.\n   */\n  readonly parent: ElementNode | null;\n\n  /**\n   * Selects component nodes matching the given selector.\n   *\n   * @param selector  Simple CSS selector of nested components.\n   * @param mode  Component nodes pick mode.\n   *\n   * @returns Dynamically updatable list of matching component nodes.\n   */\n  select(\n      selector: string,\n      mode?: ComponentPickMode,\n  ): ElementNodeList<ComponentNode>;\n\n  /**\n   * Selects component nodes of the given type.\n   *\n   * @param componentType  Nested component type with custom element name.\n   * @param mode  Component nodes pick mode.\n   *\n   * @returns Dynamically updatable list of matching component nodes.\n   */\n  select<T extends object>(\n      componentType: ComponentClass<T>,\n      mode?: ComponentPickMode,\n  ): ElementNodeList<ComponentNode<T>>;\n\n  /**\n   * Selects element nodes matching the given selector.\n   *\n   * @param selector  Simple CSS selector of nested elements. E.g. CSS class selector.\n   * @param mode  A mode of node picking from component tree.\n   *\n   * @returns Dynamically updatable list of matching element nodes.\n   */\n  select(\n      selector: string,\n      mode: ElementPickMode,\n  ): ElementNodeList;\n\n  /**\n   * Tracks element attribute.\n   *\n   * @param name  Target attribute name.\n   *\n   * @returns Target attribute's value tracker.\n   */\n  attribute(name: string): ValueTracker<string | null, string>;\n\n  /**\n   * Tracks element element property.\n   *\n   * The changes are tracked with `StateTracker`. So it is expected that the target property notifies on its changes\n   * with state updater. E.g. when it is defined by `@DomProperty` decorator.\n   *\n   * @param key  Target property key.\n   *\n   * @returns Target property's value tracker.\n   */\n  property<V>(key: PropertyKey): ValueTracker<V>;\n\n}\n\n/**\n * Element node representing raw element not bound to any component.\n */\nexport interface RawElementNode extends ComponentTreeNode {\n\n  readonly context?: undefined;\n\n}\n\n/**\n * Element node representing an element bound to some component.\n */\nexport interface ComponentNode<T extends object = any> extends ComponentTreeNode {\n\n  readonly context: ComponentContext<T>;\n\n}\n\n/**\n * A key of component context value containing a component node instance.\n */\nexport const ComponentNode: SingleContextRef<ComponentNode> =\n    (/*#__PURE__*/ new SingleContextKey<ComponentNode>('component-node'));\n\n/**\n * A mode of node picking from component tree.\n */\nexport interface ElementPickMode {\n\n  /**\n   * Set to `true` to select arbitrary nodes. Otherwise - select only component nodes.\n   */\n  all?: boolean;\n\n  /**\n   * Set to `true` to select from entire subtree. Otherwise - select from element child nodes only.\n   */\n  deep?: boolean;\n\n}\n\n/**\n * A mode that picks component nodes from component tree.\n */\nexport interface ComponentPickMode extends ElementPickMode {\n\n  all?: false;\n\n}\n","/**\n * @module @wesib/generic\n */\nimport { AIterable, ArrayLikeIterable } from 'a-iterable';\nimport { AfterEvent, AfterEvent__symbol, EventKeeper, EventSender, OnEvent, OnEvent__symbol } from 'fun-events';\nimport { ElementNode } from './element-node';\n\n/**\n * Dynamically updatable list of selected element nodes.\n *\n * It is an iterable of nodes.\n *\n * Implements an `EventSender` interface by sending added and removed nodes arrays.\n *\n * Implements an `EventKeeper` interface by sending updated node list.\n */\nexport abstract class ElementNodeList<N extends ElementNode = ElementNode>\n    extends AIterable<N>\n    implements EventSender<[N[], N[]]>, EventKeeper<[ElementNodeList<N>]> {\n\n  /**\n   * An `OnEvent` sender of list changes. Sends arrays of added and removed nodes.\n   *\n   * The `[OnEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly onUpdate: OnEvent<[N[], N[]]>;\n\n  get [OnEvent__symbol](): OnEvent<[N[], N[]]> {\n    return this.onUpdate;\n  }\n\n  /**\n   * An `AfterEvent` keeper of current node list.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly read: AfterEvent<[ElementNodeList<N>]>;\n\n  get [AfterEvent__symbol](): AfterEvent<[ElementNodeList<N>]> {\n    return this.read;\n  }\n\n  /**\n   * An `AfterEvent` keeper of node list changes.\n   *\n   * Sends an iterables of added and removed nodes. Sends current nodes immediately upon receiver registration.\n   */\n  abstract readonly track: AfterEvent<[ArrayLikeIterable<N>, ArrayLikeIterable<N>]>;\n\n  /**\n   * An `AfterEvent` keeper of the first node in this list.\n   */\n  abstract readonly first: AfterEvent<[N?]>;\n\n}\n","import {\n  BootstrapContext,\n  ComponentClass,\n  DefaultNamespaceAliaser,\n  ElementObserver,\n  ElementObserverInit,\n  isElement,\n} from '@wesib/wesib';\nimport { AIterable, ArrayLikeIterable, filterIt, itsEach, itsFirst, itsIterator, mapIt, overArray } from 'a-iterable';\nimport { isPresent, nextArgs } from 'call-thru';\nimport { AfterEvent, afterEventBy, afterSupplied, EventEmitter, eventSupply, OnEvent, onEventBy } from 'fun-events';\nimport { html__naming } from 'namespace-aliaser';\nimport { ElementPickMode, ElementNode } from './element-node';\nimport { ElementNodeList as ElementNodeList_ } from './element-node-list';\n\nconst WATCH_DEEP: ElementObserverInit = { subtree: true };\n\n/**\n * @internal\n */\nexport function elementNodeList<N extends ElementNode>(\n    bsContext: BootstrapContext,\n    root: Element,\n    selectorOrType: string | ComponentClass<any>,\n    nodeOf: (node: Element, optional?: boolean) => N | undefined,\n    { deep, all }: ElementPickMode,\n): ElementNodeList_<N> {\n\n  const updates = new EventEmitter<[N[], N[]]>();\n  const init = deep ? WATCH_DEEP : undefined;\n  let cache = new Set<Element>();\n  let iterable: Iterable<N> | undefined;\n  let selector: string | undefined;\n\n  if (typeof selectorOrType === 'string') {\n    selector = selectorOrType;\n  } else {\n    bsContext.whenDefined(selectorOrType).then(({ elementDef: { name } }) => {\n      iterable = undefined;\n      if (name) {\n        selector = html__naming.name(name, bsContext.get(DefaultNamespaceAliaser));\n        if (updates.size) {\n\n          const selected = refresh();\n\n          if (selected.size) {\n\n            const added = [\n              ...filterIt<N | undefined, N>(\n                  mapIt(selected, node => nodeOf(node)),\n                  isPresent,\n              ),\n            ];\n\n            if (added.length) {\n              updates.send(added, []);\n            }\n          }\n        }\n      }\n    });\n  }\n\n  const observer = bsContext.get(ElementObserver)(update);\n  let nodeList: ElementNodeList;\n\n  const onUpdate = onEventBy<[N[], N[]]>(receiver => {\n\n    const firstReceiver = !updates.size;\n    const supply = updates.on(receiver);\n\n    if (firstReceiver) {\n      refresh();\n      observer.observe(root, init);\n    }\n\n    return eventSupply(reason => {\n      supply.off(reason);\n      if (!updates.size) {\n        observer.disconnect();\n      }\n    }).needs(supply);\n  });\n  const read = afterEventBy<[ElementNodeList]>(onUpdate.thru(() => nodeList), () => [nodeList]);\n  const onTrackUpdate: OnEvent<[ArrayLikeIterable<N>, ArrayLikeIterable<N>]> =\n      onUpdate.thru((added, removed) => nextArgs(AIterable.of(added), AIterable.of(removed)));\n  const track = afterEventBy<[ArrayLikeIterable<N>, ArrayLikeIterable<N>]>(receiver => {\n\n    const initialEmitter = new EventEmitter<[ArrayLikeIterable<N>, ArrayLikeIterable<N>]>();\n\n    initialEmitter.on(receiver);\n    initialEmitter.send(nodeList, AIterable.of([]));\n\n    onTrackUpdate(receiver);\n  });\n  const first: AfterEvent<[N?]> = afterSupplied(read).keep.thru(itsFirst);\n\n  if (!all) {\n    root.addEventListener('wesib:component', event => {\n\n      const element = event.target as Element;\n\n      if (cache.has(element)) {\n\n        const node = nodeOf(element) as N;\n\n        updates.send([node], []);\n      }\n    });\n  }\n\n  class ElementNodeList extends ElementNodeList_<N> {\n\n    get onUpdate() {\n      return onUpdate;\n    }\n\n    get read() {\n      return read;\n    }\n\n    get track() {\n      return track;\n    }\n\n    get first() {\n      return first;\n    }\n\n    [Symbol.iterator]() {\n      return itsIterator(iterable || (iterable = filterIt<N | undefined, N>(\n          mapIt(\n              elements(),\n              element => nodeOf(element),\n          ),\n          isPresent,\n      )));\n    }\n\n  }\n\n  return nodeList = new ElementNodeList();\n\n  function elements(): Set<Element> {\n    return updates.size ? cache : refresh();\n  }\n\n  function refresh(): Set<Element> {\n    iterable = undefined;\n    return cache = select();\n  }\n\n  function select(): Set<Element> {\n\n    const sel = selector;\n\n    if (!sel) {\n      return new Set();\n    }\n    if (deep) {\n      return new Set(overArray(root.querySelectorAll(sel)));\n    }\n    return new Set(\n        filterIt(\n            overArray(root.children),\n            item => item.matches(sel),\n        ),\n    );\n  }\n\n  function update(mutations: MutationRecord[]) {\n\n    const added: N[] = [];\n    const removed: N[] = [];\n\n    mutations.forEach(mutation => {\n      itsEach(\n          filterIt<N | undefined, N>(\n              mapIt(overArray(mutation.removedNodes), removeNode),\n              isPresent,\n          ),\n          node => removed.push(node),\n      );\n      itsEach(\n          filterIt<N | undefined, N>(\n              mapIt(overArray(mutation.addedNodes), addNode),\n              isPresent,\n          ),\n          node => added.push(node),\n      );\n    });\n    if (added.length || removed.length) {\n      updates.send(added, removed);\n    }\n  }\n\n  function addNode(node: Node): N | undefined {\n    if (!isElement(node)) {\n      return;\n    }\n    if (selector && node.matches(selector) && !cache.has(node)) {\n      cache.add(node);\n      return nodeOf(node);\n    }\n    return;\n  }\n\n  function removeNode(node: Node): N | undefined {\n    if (!isElement(node)) {\n      return;\n    }\n    if (!cache.delete(node)) {\n      return;\n    }\n    return nodeOf(node, true);\n  }\n\n}\n","import { BootstrapContext, BootstrapWindow } from '@wesib/wesib';\nimport {\n  EventEmitter,\n  eventReceiver,\n  EventReceiver, eventSupply,\n  EventSupply,\n  noEventSupply,\n  OnEvent,\n  onEventBy,\n  ValueTracker,\n} from 'fun-events';\n\nclass AttributesObserver {\n\n  private readonly _emitters = new Map<string, EventEmitter<[string, string | null]>>();\n  private _observer?: MutationObserver;\n\n  constructor(private readonly _bs: BootstrapContext, readonly element: Element) {\n  }\n\n  private get observer(): MutationObserver {\n    if (this._observer) {\n      return this._observer;\n    }\n\n    const Observer: typeof MutationObserver = (this._bs.get(BootstrapWindow) as any).MutationObserver;\n\n    return this._observer = new Observer(mutations => this._update(mutations));\n  }\n\n  observe(name: string, receiver: EventReceiver<[string, string | null]>): EventSupply {\n\n    const self = this;\n    const observer = this.observer;\n    const emitter = this._emitter(name);\n    const rcv = eventReceiver(receiver);\n    const supply = emitter.on({\n      supply: eventSupply(() => {\n        this._emitters.delete(name);\n        observer.disconnect();\n        if (this._emitters.size) {\n          reconnect();\n        } else {\n          this._observer = undefined;\n        }\n      }).needs(rcv.supply),\n      receive: (ctx, newValue, oldValue) => rcv.receive(ctx, newValue, oldValue),\n    });\n\n    observer.disconnect();\n    reconnect();\n\n    return supply;\n\n    function reconnect() {\n      self._update(observer.takeRecords());\n      observer.observe(self.element, {\n        attributes: true,\n        attributeOldValue: true,\n        attributeFilter: [...self._emitters.keys()],\n      });\n    }\n  }\n\n  private _update(mutations: MutationRecord[]) {\n    mutations.forEach(mutation => {\n\n      const attributeName = mutation.attributeName as string;\n      const emitter = this._emitters.get(attributeName);\n\n      if (emitter) {\n        emitter.send(this.element.getAttribute(attributeName) as string, mutation.oldValue);\n      }\n    });\n  }\n\n  private _emitter(name: string): EventEmitter<[string, string | null]> {\n\n    const emitter = new EventEmitter<[string, string | null]>();\n\n    this._emitters.set(name, emitter);\n\n    return emitter;\n  }\n\n}\n\nclass AttributeTracker extends ValueTracker<string | null, string> {\n\n  private readonly _updates = new EventEmitter<[string, string | null]>();\n  readonly on: OnEvent<[string, string | null]>;\n\n  constructor(\n      private readonly _observer: AttributesObserver,\n      private readonly _name: string,\n  ) {\n    super();\n\n    let observeSupply = noEventSupply();\n\n    this.on = onEventBy(receiver => {\n      if (!this._updates.size) {\n        observeSupply = this._observer.observe(\n            _name,\n            (newValue, oldValue) => this._updates.send(newValue, oldValue),\n        );\n      }\n      receiver.supply.needs(observeSupply);\n      this._updates.on(receiver).whenOff(reason => {\n        if (!this._updates.size) {\n          observeSupply.off(reason);\n        }\n      });\n    });\n  }\n\n  get it(): string | null {\n    return this._observer.element.getAttribute(this._name);\n  }\n\n  set it(value: string | null) {\n    this._observer.element.setAttribute(this._name, value as string);\n  }\n\n  done(reason?: any): this {\n    this._updates.done(reason);\n    return this;\n  }\n\n}\n\n/**\n * @internal\n */\nexport class NodeAttributes {\n\n  private readonly _attrs = new Map<string, AttributeTracker>();\n  private readonly _observer: AttributesObserver;\n\n  constructor(bs: BootstrapContext, element: any) {\n    this._observer = new AttributesObserver(bs, element);\n  }\n\n  get(name: string): ValueTracker<string | null, string> {\n\n    const existing = this._attrs.get(name);\n\n    if (existing) {\n      return existing;\n    }\n\n    const created = new AttributeTracker(this._observer, name);\n\n    this._attrs.set(name, created);\n\n    return created;\n  }\n\n}\n","import { ComponentContext, ComponentState, domPropertyPathTo } from '@wesib/wesib';\nimport { EventEmitter, eventSupply, noEventSupply, OnEvent, ValueTracker } from 'fun-events';\n\nclass PropertyTracker<T> extends ValueTracker<T> {\n\n  private readonly _updates = new EventEmitter<[T, T]>();\n  private _supply = noEventSupply();\n\n  constructor(\n      private readonly _element: any,\n      private readonly _key: PropertyKey,\n  ) {\n    super();\n  }\n\n  get on(): OnEvent<[T, T]> {\n    return this._updates.on;\n  }\n\n  bind(context: ComponentContext) {\n\n    const propertyState = context.get(ComponentState).track(domPropertyPathTo(this._key));\n\n    this._supply = propertyState.onUpdate({\n      supply: eventSupply().whenOff(reason => this._updates.done(reason)),\n      receive: (_ctx, _path, newValue: any, oldValue: any) => this._updates.send(newValue, oldValue),\n    });\n  }\n\n  get it(): T {\n    return this._element[this._key];\n  }\n\n  set it(value: T) {\n    this._element[this._key] = value;\n  }\n\n  done(reason?: any): this {\n    this._supply.off(reason);\n    return this;\n  }\n\n}\n\n/**\n * @internal\n */\nexport class NodeProperties {\n\n  private readonly _props = new Map<PropertyKey, PropertyTracker<any>>();\n  private _context?: ComponentContext<any>;\n\n  constructor(private readonly _element: any) {\n  }\n\n  bind(context: ComponentContext) {\n    this._context = context;\n    this._props.forEach(prop => prop.bind(context));\n  }\n\n  get<T>(key: PropertyKey): ValueTracker<T> {\n\n    const existing = this._props.get(key);\n\n    if (existing) {\n      return existing;\n    }\n\n    const created = new PropertyTracker<any>(this._element, key);\n\n    if (this._context) {\n      created.bind(this._context);\n    }\n    this._props.set(key, created);\n\n    return created;\n  }\n\n}\n","import {\n  BootstrapContext,\n  ComponentClass,\n  ComponentContext,\n  ComponentContext__symbol,\n  ComponentEvent,\n  ElementAdapter,\n} from '@wesib/wesib';\nimport { ValueTracker } from 'fun-events';\nimport { ComponentNode, ComponentTreeNode, ElementPickMode, ElementNode as ElementNode_ } from './element-node';\nimport { ElementNodeList } from './element-node-list';\nimport { elementNodeList } from './element-node-list.impl';\nimport { NodeAttributes } from './node-attributes.impl';\nimport { NodeProperties } from './node-properties.impl';\n\nconst ElementNode__symbol = (/*#__PURE__*/ Symbol('element-node'));\n\nclass ElementNode implements ComponentTreeNode {\n\n  private readonly _attrs: NodeAttributes;\n  private readonly _props: NodeProperties;\n\n  constructor(private readonly _bs: BootstrapContext, readonly element: Element) {\n    this._attrs = new NodeAttributes(_bs, element);\n    this._props = new NodeProperties(element);\n    (element as any)[ElementNode__symbol] = this;\n\n    const context = (element as any)[ComponentContext__symbol] as ComponentContext<any> | undefined;\n\n    if (context) {\n      this._bind(context);\n    } else {\n      element.addEventListener('wesib:component', event => this._bind((event as ComponentEvent).context));\n    }\n  }\n\n  get context(): ComponentContext<any> | undefined {\n    return (this.element as any)[ComponentContext__symbol];\n  }\n\n  get parent() {\n\n    const parent = this.element.parentElement;\n\n    return parent != null ? elementNodeOf(this._bs, parent) : null;\n  }\n\n  select(selector: string | ComponentClass<any>, mode?: ElementPickMode): ElementNodeList<any> {\n    return selectNodes(this._bs, this.element, selector, mode);\n  }\n\n  attribute(name: string): ValueTracker<string | null, string> {\n    return this._attrs.get(name);\n  }\n\n  property<V>(key: PropertyKey): ValueTracker<V> {\n    return this._props.get(key);\n  }\n\n  private _bind(context: ComponentContext) {\n    this._props.bind(context);\n  }\n\n}\n\n/**\n * @internal\n */\nexport function elementNodeOf(bsContext: BootstrapContext, element: Element, optional?: boolean): ElementNode_ {\n\n  const existing: ElementNode_ = (element as any)[ElementNode__symbol];\n\n  return (existing || optional) ? existing : new ElementNode(bsContext, element);\n}\n\nfunction selectNodes(\n    bsContext: BootstrapContext,\n    root: Element,\n    selector: string | ComponentClass<any>,\n    mode: ElementPickMode = {},\n): ElementNodeList<any> {\n  if (mode.all) {\n    return elementNodeList<ElementNode_>(\n        bsContext,\n        root,\n        selector,\n        (element, optional) => elementNodeOf(bsContext, element, optional),\n        mode,\n    );\n  }\n\n  const adapter = bsContext.get(ElementAdapter);\n\n  return elementNodeList<ComponentNode>(\n      bsContext,\n      root,\n      selector,\n      (element, optional) => adapter(element) && elementNodeOf(bsContext, element, optional) as ComponentNode,\n      mode,\n  );\n}\n","/**\n * @module @wesib/generic\n */\nimport { BootstrapContext, ComponentContext, FeatureDef, FeatureDef__symbol, StateSupport } from '@wesib/wesib';\nimport { ComponentNode } from './element-node';\nimport { elementNodeOf } from './element-node.impl';\n\nconst ComponentTreeSupport__feature: FeatureDef = {\n  needs: StateSupport,\n  setup(setup) {\n    setup.perComponent({\n      a: ComponentNode,\n      by(context: ComponentContext) {\n        return elementNodeOf(context.get(BootstrapContext), context.element) as ComponentNode;\n      },\n    });\n  },\n};\n\n/**\n * Component tree support feature.\n *\n * Provides a [[ComponentNode]] instance for each component.\n */\nexport class ComponentTreeSupport {\n\n  static get [FeatureDef__symbol](): FeatureDef {\n    return ComponentTreeSupport__feature;\n  }\n\n}\n","/**\n * @module @wesib/generic\n */\nimport { ComponentContext } from '@wesib/wesib';\nimport { SingleContextUpKey, SingleContextUpRef } from 'context-values';\nimport { eventSupply, EventSupply } from 'fun-events';\nimport { InControl } from 'input-aspects';\nimport { HierarchyContext } from '../hierarchy';\n\n/**\n * A user input originated from control.\n *\n * It is meant to be present in root {@link HierarchyContext hierarchy context}. Nested components may access it from\n * their hierarchy contexts to participate in user input.\n *\n * An [[inputFromControl]] function can be used to initiate user input.\n */\nexport interface InputFromControl<Value = any> {\n\n  /**\n   * Root component context the input is initiated for.\n   */\n  readonly root: ComponentContext;\n\n  /**\n   * User input control.\n   */\n  readonly control: InControl<Value>;\n\n}\n\n/**\n * A user input originated from nowhere.\n */\nexport interface InputFromNowhere {\n  control?: undefined;\n}\n\n/**\n * A key of hierarchy context value containing a user input originated from control. Potentially\n * {@link InputFromNowhere absent}.\n */\nexport const InputFromControl: SingleContextUpRef<InputFromControl | InputFromNowhere> =\n    (/*#__PURE__*/ new SingleContextUpKey<InputFromControl | InputFromNowhere>(\n        'input-receiver',\n        {\n          byDefault: () => ({}),\n        },\n    ));\n\n/**\n * Initiates user input from the given control for the given root component.\n *\n * Constructs an [[InputFromControl]] instance and makes it available in `root` component's hierarchy.\n *\n * @param root  Root component context to initiate user input for.\n * @param control  User input control.\n *\n * @returns User input supply. The user input would be stopped once this supply is cut off.\n */\nexport function inputFromControl<Value>(\n    root: ComponentContext,\n    control: InControl<Value>,\n): EventSupply {\n\n  const off = root.get(HierarchyContext).provide({\n    a: InputFromControl,\n    by: () => ({\n      root,\n      control,\n    }),\n  });\n\n  return eventSupply(off);\n}\n","import { ComponentContext } from '@wesib/wesib';\nimport { AfterEvent, afterThe } from 'fun-events';\nimport { InValidation, inValidationResult } from 'input-aspects';\nimport { HierarchyContext } from '../hierarchy';\nimport { InputFromControl, InputFromNowhere } from './input-from-control';\n\n/**\n * A validity of user input.\n *\n * This is an `AfterEvent` keeper of input validation result extracted from {@link InputFromControl input receiver}}\n * present in {@link HierarchyContext hierarchy context}.\n */\nexport type InputValidity = AfterEvent<[InValidation.Result]>;\n\n/**\n * Obtains user input validity from input receiver present in component's hierarchy context.\n *\n * @param context  Component context to obtain input validity from.\n *\n * @returns Obtained input validity. The input is always valid when there is no input receiver.\n */\nexport function inputValidity(context: ComponentContext): InputValidity {\n  return context.get(HierarchyContext).get(InputFromControl).keep.dig(\n      (inputReceiver: InputFromControl | InputFromNowhere) =>\n          inputReceiver.control?.aspect(InValidation) || afterThe(inValidationResult()),\n  );\n}\n","/**\n * @module @wesib/generic\n */\nimport { Navigation } from './navigation';\nimport { Page } from './page';\n\n/**\n * Navigation event.\n */\nexport type NavigationEvent = LeavePageEvent | EnterPageEvent | StayOnPageEvent;\n\n/**\n * Navigation event type.\n */\nexport const enum NavigationEventType {\n\n  /**\n   * {@link EnterPageEvent Enter page event} type.\n   */\n  EnterPage = 'wesib:enterPage',\n\n  /**\n   * {@link LeavePageEvent Leave page event} type.\n   */\n  LeavePage = 'wesib:leavePage',\n\n  /**\n   * {@link StayOnPageEvent Stay on page event} type.\n   */\n  StayOnPage = 'wesib:stayOnPage',\n\n}\n\n/**\n * An event fired when navigation target reached by entering destination page.\n *\n * @event EnterPageEvent#wesib:enterPage\n */\nexport class EnterPageEvent extends Event {\n\n  /**\n   * When navigation event occurred.\n   *\n   * Can be one of:\n   * - `open` when opening a new page,\n   * - `replace` when replacing navigation history entry,\n   * - `enter` when entering new page by user action (e.g. hashchange event),\n   * - `return` when navigated to previously visited entry in navigation history.\n   */\n  readonly when: 'open' | 'replace' | 'enter' | 'return';\n\n  /**\n   * Entered page.\n   */\n  readonly to: Page;\n\n  /**\n   * Constructs enter page event.\n   *\n   * @param type  Event type.\n   * @param init  Initialization options.\n   */\n  constructor(type: string, init: EnterPageEventInit) {\n    super(type, { ...init, cancelable: false });\n    this.when = init.when;\n    this.to = init.to;\n  }\n\n}\n\n/**\n * {@link EnterPageEvent Enter page event} initialization options.\n */\nexport interface EnterPageEventInit extends Omit<EventInit, 'cancelable'> {\n\n  /**\n   * When navigation event occurred.\n   *\n   * Can be one of:\n   * - `open` when opening a new page,\n   * - `replace` when replacing navigation history entry,\n   * - `enter` when entering new page by user action (e.g. hashchange event),\n   * - `return` when navigated to previously visited entry in navigation history.\n   */\n  readonly when: 'open' | 'replace' | 'enter' | 'return';\n\n  /**\n   * Entered page.\n   */\n  readonly to: Page;\n\n}\n\n/**\n * An event fired right before leaving the page in order to navigate to another one.\n *\n * This event can be cancelled in order to prevent actual navigation or history update. The navigation is also\n * cancelled when another navigation initiated by one of the handlers of this event.\n *\n * @event LeavePageEvent#wesib:leavePage\n */\nexport class LeavePageEvent extends Event {\n\n  /**\n   * When navigation event occurred. Either `pre-open` when leaving a page to open a new one, or `pre-replace` when\n   * leaving a page to replace it with another history entry.\n   */\n  readonly when: 'pre-open' | 'pre-replace';\n\n  /**\n   * The page to leave.\n   */\n  readonly from: Page;\n\n  /**\n   * Navigation target page.\n   */\n  readonly to: Page;\n\n  /**\n   * Constructs leave page event.\n   *\n   * @param type  Event type.\n   * @param init  Initialization options.\n   */\n  constructor(type: string, init: LeavePageEventInit) {\n    super(type, { ...init, cancelable: true });\n    this.when = init.when;\n    this.from = init.from;\n    this.to = init.to;\n  }\n\n}\n\n/**\n * {@link LeavePageEvent Leave page event} initialization options.\n */\nexport interface LeavePageEventInit extends Omit<EventInit, 'cancelable'> {\n\n  /**\n   * When navigation event occurred. Either `pre-open` when leaving a page to open a new one, or `pre-replace` when\n   * leaving a page to replace it with another history entry.\n   */\n  readonly when: 'pre-open' | 'pre-replace';\n\n  /**\n   * The page to leave.\n   */\n  readonly from: Page;\n\n  /**\n   * Navigation target page.\n   */\n  readonly to: Page;\n\n}\n\n/**\n * An event fired when navigation cancelled or failed.\n *\n * @event StayOnPageEvent#wesib:stayOnPage\n */\nexport class StayOnPageEvent extends Event {\n\n  /**\n   * When navigation event occurred. Always `stay`.\n   */\n  get when(): 'stay' {\n    return 'stay';\n  }\n\n  /**\n   * The page to stay at.\n   */\n  readonly from: Page;\n\n  /**\n   * Navigation target.\n   */\n  readonly to: Navigation.URLTarget;\n\n  /**\n   * A reason of navigation failure. This is set when navigation failed due to some error.\n   */\n  readonly reason?: any;\n\n  /**\n   * Constructs stay on page event.\n   *\n   * @param type  Event type.\n   * @param init  Initialization options.\n   */\n  constructor(type: string, init: StayOnPageEventInit) {\n    super(type, { ...init, cancelable: true });\n    this.from = init.from;\n    this.to = init.to;\n    this.reason = init.reason;\n  }\n\n}\n\n/**\n * {@link StayOnPageEvent Stay on page event} initialization options.\n */\nexport interface StayOnPageEventInit extends Omit<EventInit, 'cancelable'> {\n\n  /**\n   * The page to stay at.\n   */\n  readonly from: Page;\n\n  /**\n   * Navigation target.\n   */\n  readonly to: Navigation.URLTarget;\n\n  /**\n   * A reason of navigation failure. This is set when navigation failed due to some error.\n   */\n  readonly reason?: any;\n\n}\n","/**\n * @module @wesib/generic\n */\nimport { ContextKey, ContextKey__symbol, SingleContextKey } from 'context-values';\nimport {\n  AfterEvent,\n  AfterEvent__symbol,\n  EventKeeper,\n  EventSender,\n  OnDomEvent,\n  OnEvent,\n  OnEvent__symbol,\n} from 'fun-events';\nimport { EnterPageEvent, LeavePageEvent, NavigationEvent, StayOnPageEvent } from './navigation.event';\nimport { Page } from './page';\nimport { PageParam } from './page-param';\n\nconst Navigation__key = (/*#__PURE__*/ new SingleContextKey<Navigation>('navigation'));\n\n/**\n * Browser navigation service.\n *\n * Expected to be used as a [History] and [Location] APIs replacement.\n *\n * Fires additional navigation events the browser does not support natively.\n *\n * Implements an `EventSender` interface by sending {@link NavigationEvent navigation events} to registered receivers.\n *\n * Implements an `EventKeeper` interface by sending current {@link Page page} to registered receivers.\n *\n * Available as bootstrap context value when [[NavigationSupport]] feature is enabled.\n *\n * [History]: https://developer.mozilla.org/en-US/docs/Web/API/History\n * [Location]: https://developer.mozilla.org/en-US/docs/Web/API/Location\n */\nexport abstract class Navigation implements EventSender<[NavigationEvent]>, EventKeeper<[Page]> {\n\n  static get [ContextKey__symbol](): ContextKey<Navigation> {\n    return Navigation__key;\n  }\n\n  /**\n   * The number of element in navigation history.\n   */\n  abstract readonly length: number;\n\n  /**\n   * An `OnDomEvent` registrar of enter page event receivers.\n   */\n  abstract readonly onEnter: OnDomEvent<EnterPageEvent>;\n\n  /**\n   * An `OnDomEvent` registrar of leave page event receivers.\n   *\n   * These receivers may cancel navigation by calling `preventDefault()` method of received event.\n   */\n  abstract readonly onLeave: OnDomEvent<LeavePageEvent>;\n\n  /**\n   * An `OnDomEvent` registrar of stay on page event receivers.\n   *\n   * These receivers are informed when navigation has been cancelled by one of leave page event receivers,\n   * navigation failed due to e.g. invalid URL, or when another navigation request initiated before the page left.\n   */\n  abstract readonly onStay: OnDomEvent<StayOnPageEvent>;\n\n  /**\n   * An `OnEvent` registrar of navigation events receivers.\n   *\n   * The `[OnEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly on: OnEvent<[NavigationEvent]>;\n\n  get [OnEvent__symbol](): OnEvent<[NavigationEvent]> {\n    return this.on;\n  }\n\n  /**\n   * An `AfterEvent` registrar of current page receivers.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly read: AfterEvent<[Page]>;\n\n  get [AfterEvent__symbol](): AfterEvent<[Page]> {\n    return this.read;\n  }\n\n  /**\n   * Goes to the previous page in navigation history.\n   *\n   * Calling this method is the same as calling `go(-1)`.\n   */\n  back(): void {\n    this.go(-1);\n  }\n\n  /**\n   * Goes to the next page in navigation history.\n   *\n   * Calling this method is the same as calling `go(1)`.\n   */\n  forward(): void {\n    this.go(1);\n  }\n\n  /**\n   * Loads a page from navigation history, identified by its relative location to the current page.\n   *\n   * For example `-1` navigates to previous page, while `1` navigates to the next one. If you specify an out-of-bounds\n   * value (for instance, specifying -1 when there are no previously-visited pages in navigation history), this method\n   * silently has no effect.\n   *\n   * @param delta  Relative location in navigation history to navigate to. The absent value or value of `0` reloads\n   * the current page.\n   */\n  abstract go(delta?: number): void;\n\n  /**\n   * Reloads current page.\n   *\n   * Calling this method is the same as calling `go()`.\n   */\n  reload(): void {\n    this.go();\n  }\n\n  /**\n   * Opens a page by navigating to the given `target`.\n   *\n   * Appends an entry to navigation history.\n   *\n   * @param target  Either navigation target or URL to navigate to.\n   * @fires PreNavigateEvent#wesib:preNavigate  On window object prior to actually navigate.\n   * Then navigates to the `target`, unless the event cancelled.\n   * @fires NavigateEvent@wesib:navigate  On window object when navigation succeed.\n   *\n   * @returns A promise resolved to navigated page, or to `null` otherwise.\n   */\n  abstract open(target: Navigation.Target | string | URL): Promise<Page | null>;\n\n  /**\n   * Replaces current navigation history entry with the given `target`.\n   *\n   * @param target  Either navigation target or URL to replace current history entry with.\n   * @fires PreNavigateEvent#wesib:preNavigate  On window object prior to actually update the history.\n   * Then navigates to the `target`, unless the event cancelled.\n   * @fires NavigateEvent@wesib:navigate  On window object when history updated.\n   *\n   * @returns A promise resolved to navigated page, or to `null` otherwise.\n   */\n  abstract replace(target: Navigation.Target | string | URL): Promise<Page | null>;\n\n  /**\n   * Replaces current page URL with the given one.\n   *\n   * Does not alter current page state, and does not trigger any events.\n   *\n   * @param url  An URL to replace the\n   *\n   * @returns Current page with updated URL.\n   */\n  abstract update(url: string | URL): Page;\n\n  /**\n   * Creates parameterized navigation instance and assigns a page parameter to apply to target page.\n   *\n   * @typeparam T  Parameter value type.\n   * @typeparam I  Parameter input type.\n   * @param ref  A reference to page navigation parameter to apply.\n   * @param input  Parameter input to use when constructing its value.\n   *\n   * @returns New parameterized navigation instance.\n   */\n  abstract with<T, I>(ref: PageParam.Ref<T, I>, input: I): Navigation.Parameterized;\n\n}\n\nexport namespace Navigation {\n\n  /**\n   * Parameterized navigation.\n   *\n   * Allows to assign target page parameters prior to navigating to it.\n   */\n  export interface Parameterized {\n\n    /**\n     * Applies parameter to navigation target page.\n     *\n     * @typeparam T  Parameter value type.\n     * @typeparam I  Parameter input type.\n     * @param ref  A reference to page navigation parameter to apply.\n     * @param input  Parameter input to use when constructing its value.\n     *\n     * @returns New parameterized navigation instance.\n     */\n    with<T, I>(ref: PageParam.Ref<T, I>, input: I): Parameterized;\n\n    /**\n     * Opens a page by navigating to the given `target` with provided page parameters.\n     *\n     * Appends an entry to navigation history.\n     *\n     * @param target  Either navigation target or URL to navigate to.\n     * @fires PreNavigateEvent#wesib:preNavigate  On window object prior to actually navigate.\n     * Then navigates to the `target`, unless the event cancelled.\n     * @fires NavigateEvent@wesib:navigate  On window object when navigation succeed.\n     *\n     * @returns A promise resolved to navigated page, or to `null` otherwise.\n     */\n    open(target: Navigation.Target | string | URL): Promise<Page | null>;\n\n    /**\n     * Replaces the most recent entry in navigation history with the given `target` and provided page parameters.\n     *\n     * @param target  Either navigation target or URL to replace the latest history entry with.\n     * @fires PreNavigateEvent#wesib:preNavigate  On window object prior to actually update the history.\n     * Then navigates to the `target`, unless the event cancelled.\n     * @fires NavigateEvent@wesib:navigate  On window object when history updated.\n     *\n     * @returns A promise resolved to navigated page, or to `null` otherwise.\n     */\n    replace(target: Navigation.Target | string | URL): Promise<Page | null>;\n\n  }\n\n  /**\n   * Navigation target.\n   *\n   * This is passed to [[Navigation.open]] and [[Navigation.replace]] methods.\n   */\n  export interface Target {\n\n    /**\n     * An URL to update the browser location string to.\n     */\n    readonly url?: string | URL;\n\n    /**\n     * Opaque data to apply to session history. I.e. either push or replace.\n     */\n    readonly data?: any;\n\n    /**\n     * New window title.\n     */\n    readonly title?: string;\n\n  }\n\n  /**\n   * Navigation target with URL value.\n   */\n  export interface URLTarget extends Target {\n\n    readonly url: URL;\n\n  }\n\n}\n","/**\n * @module @wesib/generic\n */\nimport { BootstrapWindow } from '@wesib/wesib';\nimport { ContextUpKey, ContextUpRef, ContextValueOpts, ContextValues } from 'context-values';\nimport { AfterEvent, EventKeeper } from 'fun-events';\nimport { Navigation } from './navigation';\nimport { Page } from './page';\nimport Target = Navigation.Target;\n\n/**\n * Navigation agent signature.\n *\n * The agent is called by navigation methods when leaving current page and may alter navigation processing.\n * E.g. change navigation target. For that it should be registered in appropriate context.\n *\n * All registered agents are organized into chain. The first agent in chain is called by navigation method.\n */\nexport type NavigationAgent =\n/**\n * @param next  Either calls the next agent in chain, or applies the final navigation target if this agent is the last\n * one. Not calling this function effectively prevents navigation.\n * Accepts an optional [[Navigation.Target]] parameter. The original target will be used instead when omitted.\n * @param when  When navigation occurred. Either `pre-open`, or `pre-replace`.\n * @param from  The page to leave.\n * @param to  Navigation target page.\n */\n    (\n        this: void,\n        next: (this: void, target?: Target) => void,\n        when: 'pre-open' | 'pre-replace',\n        from: Page,\n        to: Page,\n    ) => void;\n\nclass NavigationAgentKey\n    extends ContextUpKey<NavigationAgent.Combined, NavigationAgent>\n    implements ContextUpRef<NavigationAgent.Combined, NavigationAgent, AfterEvent<NavigationAgent[]>> {\n\n  constructor(name: string) {\n    super(name);\n  }\n\n  grow<Ctx extends ContextValues>(\n      opts: ContextValueOpts<\n          Ctx,\n          NavigationAgent.Combined,\n          EventKeeper<NavigationAgent[]> | NavigationAgent,\n          AfterEvent<NavigationAgent[]>>,\n  ): NavigationAgent.Combined {\n\n    const { document } = opts.context.get(BootstrapWindow);\n\n    return (next, when, from, to) => {\n\n      const result = opts.byDefault(() => combinedAgent);\n\n      return result ? result(next, when, from, to) : next(to);\n    };\n\n    function combinedAgent(\n        next: (this: void, target: Navigation.URLTarget) => void,\n        when: 'pre-open' | 'pre-replace',\n        from: Page,\n        to: Page,\n    ): void {\n\n      let agents!: NavigationAgent[];\n\n      opts.seed.once((...sources) => agents = sources);\n\n      return navigate(0, to);\n\n      function navigate(agentIdx: number, agentTo: Page): void {\n\n        const agent = agents[agentIdx];\n\n        if (!agent) {\n          return next(agentTo);\n        }\n\n        agent(\n            (\n                {\n                  url: nextURL = agentTo.url,\n                  title: nextTitle = agentTo.title,\n                  data: nextData = agentTo.data,\n                }: Navigation.Target = agentTo,\n            ) => navigate(\n                agentIdx + 1,\n                {\n                  url: new URL(String(nextURL), document.baseURI),\n                  title: nextTitle,\n                  data: nextData,\n                  get visited() {\n                    return agentTo.visited;\n                  },\n                  get current() {\n                    return agentTo.current;\n                  },\n                  get(ref) {\n                    return agentTo.get(ref);\n                  },\n                  put(ref, input) {\n                    agentTo.put(ref, input);\n                  },\n                },\n            ),\n            when,\n            from,\n            agentTo,\n        );\n      }\n    }\n  }\n\n}\n\nexport namespace NavigationAgent {\n\n  /**\n   * Combined navigation agent signature.\n   *\n   * This is what is available under [[NavigationAgent]] key.\n   */\n  export type Combined =\n  /**\n   * @param next  Either calls the next agent in chain, or applies the final navigation target if this agent is the last\n   * one. Not calling this function effectively prevents navigation.\n   * Accepts an optional [[Navigation.Target]] parameter. The original target will be used instead when omitted.\n   * @param when  When navigation occurred. Either `pre-open`, or `pre-replace`.\n   * @param from  The page to leave.\n   * @param to  Navigation target page.\n   */\n      (\n          this: void,\n          next: (this: void, target: Navigation.URLTarget) => void,\n          when: 'pre-open' | 'pre-replace',\n          from: Page,\n          to: Page,\n      ) => void;\n\n}\n\n/**\n * A key of context value containing an [[NavigationAgent]] instance.\n *\n * The agent returned combines all registered agents into one. If no agent registered it just performs the navigation.\n */\nexport const NavigationAgent: ContextUpRef<NavigationAgent.Combined, NavigationAgent> =\n    (/*#__PURE__*/ new NavigationAgentKey('navigation-agent'));\n","/**\n * @module @wesib/generic\n */\nimport { Page } from './page';\nimport { PageParamContext } from './page-param-context';\n\n/**\n * A key of {@link PageParam.Ref page parameter request} property containing requested page parameter.\n */\nexport const PageParam__symbol = (/*#__PURE__*/ Symbol('page-param'));\n\n/**\n * Page navigation parameter.\n *\n * Can applied before navigation happened (i.e. to [[LeavePageEvent]]). Then it will be available to the target page\n * both before and after navigation.\n *\n * @typeparam T  Parameter value type.\n * @typaparam I  Parameter input type.\n */\nexport abstract class PageParam<T, I> implements PageParam.Ref<T, I> {\n\n  get [PageParam__symbol](): this {\n    return this;\n  }\n\n  /**\n   * Creates page parameter handle.\n   *\n   * This method is called when {@link Page.put assigning new page parameter}.It is called at most once per request,\n   * unless this parameter is assigned already. A {@link PageParam.Handle.put} method will be called instead\n   * in the latter case.\n   *\n   * @param page  A page to assign navigation parameter to.\n   * @param input  Parameter input used to construct its initial value.\n   * @param context  Page parameter context.\n   *\n   * @returns New page parameter value handle.\n   */\n  abstract create(page: Page, input: I, context: PageParamContext): PageParam.Handle<T, I>;\n\n}\n\nexport namespace PageParam {\n\n  /**\n   * Page navigation parameter reference.\n   *\n   * @typeparam T  Parameter value type.\n   * @typaparam I  Parameter input type.\n   */\n  export interface Ref<T, I> {\n\n    /**\n     * Referred page navigation parameter instance.\n     */\n    readonly [PageParam__symbol]: PageParam<T, I>;\n\n  }\n\n  /**\n   * Page navigation parameter value handle.\n   *\n   * Holds and maintains parameter value.\n   *\n   * Created by {@link PageParam.create} method.\n   *\n   * @typeparam T  Parameter value type.\n   * @typaparam I  Parameter input type.\n   */\n  export interface Handle<T, I> {\n\n    /**\n     * Returns current parameter value.\n     *\n     * @returns Parameter value.\n     */\n    get(): T;\n\n    /**\n     * Puts page parameter value.\n     *\n     * This method is called when {@link Page.put re-assigning page parameter}. It is called when page parameter\n     * is assigned already and can be used to update it. The update logic is up to the implementation.\n     *\n     * @param input  Parameter input to use when updating its value.\n     */\n    put(input: I): void;\n\n    /**\n     * Transfers parameter to target page.\n     *\n     * This is called right before [[LeavePageEvent]] is fired for each parameter handle of current page.\n     *\n     * @param to  A page to transfer parameter to.\n     * @param when  When the transfer happens. Either `pre-open`, `pre-replace`, `open`, or `return`. The latter is used\n     * when return to page generated by another app version. E.g. from the page that has been reloaded.\n     *\n     * @returns New parameter handle instance for target page, or `undefined` if nothing to transfer.\n     */\n    transfer?(to: Page, when: 'pre-open' | 'pre-replace' | 'enter' | 'return'): Handle<T, I> | undefined;\n\n    /**\n     * This method is called when the page this parameter created for is entered.\n     *\n     * @param page  Entered page.\n     * @param when  When the page is entered. Either `init`, `open`, `replace`, `enter`, or `return`.\n     */\n    enter?(page: Page, when: 'init' | 'open' | 'replace' | 'enter' | 'return'): void;\n\n    /**\n     * This method is called when the page this parameter created for is left.\n     */\n    leave?(): void;\n\n    /**\n     * This method is called when page navigation aborted and target page won't be reached.\n     *\n     * The handle won't be accessed after this method call.\n     *\n     * @param at  The page the browser remains at.\n     */\n    stay?(at: Page): void;\n\n    /**\n     * This method is called when the page this parameter is created for is removed from navigation history.\n     *\n     * The handle won't be accessed after this method call.\n     */\n    forget?(): void;\n\n  }\n\n}\n","/**\n * @module @wesib/generic\n */\nimport { ContextValues } from 'context-values';\n\n/**\n * Page parameter context.\n *\n * Provides values available in bootstrap context.\n */\nexport abstract class PageParamContext extends ContextValues {\n}\n","import { BootstrapContext, bootstrapDefault, BootstrapWindow } from '@wesib/wesib';\nimport { itsEach } from 'a-iterable';\nimport { noop } from 'call-thru';\nimport { ContextKey__symbol, ContextRegistry, SingleContextKey } from 'context-values';\nimport { ValueTracker } from 'fun-events';\nimport { Navigation } from './navigation';\nimport { Page } from './page';\nimport { PageParam, PageParam__symbol } from './page-param';\nimport { PageParamContext } from './page-param-context';\n\nconst RoutingHistory__key = (/*#__PURE__*/ new SingleContextKey<NavHistory>(\n    'navigation-history',\n    {\n      byDefault: bootstrapDefault(ctx => new NavHistory(ctx)),\n    },\n));\n\n/**\n * @internal\n */\nexport class NavHistory {\n\n  static get [ContextKey__symbol]() {\n    return RoutingHistory__key;\n  }\n\n  private readonly _document: Document;\n  private readonly _location: Location;\n  private readonly _history: History;\n  private readonly _entries = new Map<number, PageEntry>();\n  private readonly _uid: string;\n  private _lastId = 0;\n\n  constructor(private readonly _context: BootstrapContext) {\n    const window = _context.get(BootstrapWindow);\n\n    this._document = window.document;\n    this._location = window.location;\n    this._history = window.history;\n    this._uid = btoa(String(Math.random()));\n  }\n\n  init(): PageEntry {\n\n    const { data } = extractNavData(this._history.state);\n    const entry = this.newEntry({\n      url: new URL(this._location.href),\n      data,\n      title: this._document.title,\n    });\n\n    this._entries.set(entry.id, entry);\n    entry.schedule(() => {\n      entry.enter('init');\n      this._history.replaceState(this._historyState(entry), '');\n    });\n\n    return entry;\n  }\n\n  newEntry(target: Navigation.URLTarget): PageEntry {\n    return new PageEntry(this._context, ++this._lastId, target);\n  }\n\n  open(\n      toEntry: PageEntry,\n      tracker: ValueTracker<PageEntry>,\n  ) {\n\n    const { page: { title = '', url } } = toEntry;\n\n    this._history.pushState(\n        this._historyState(toEntry),\n        title,\n        url.href,\n    );\n\n    this._enter('open', toEntry, tracker);\n  }\n\n  private _enter(\n      when: 'open' | 'enter',\n      toEntry: PageEntry,\n      tracker: ValueTracker<PageEntry>,\n  ) {\n\n    const fromEntry = tracker.it;\n\n    this._entries.set(toEntry.id, toEntry);\n\n    try {\n      // Forget all entries starting from next one\n      for (let e = fromEntry.next; e; e = e.next) {\n        this._forget(e);\n      }\n    } finally {\n      toEntry.prev = fromEntry;\n      fromEntry.next = toEntry;\n      toEntry.schedule(() => {\n        try {\n          fromEntry.leave();\n        } finally {\n          toEntry.enter(when);\n        }\n      });\n      tracker.it = toEntry;\n    }\n  }\n\n  replace(\n      toEntry: PageEntry,\n      tracker: ValueTracker<PageEntry>,\n  ) {\n\n    const fromEntry = tracker.it;\n    const { page: { title = '', url } } = toEntry;\n\n    this._history.replaceState(\n        this._historyState(toEntry),\n        title,\n        url.href,\n    );\n\n    this._entries.set(toEntry.id, toEntry);\n\n    const prev = fromEntry.prev;\n\n    if (prev) {\n      toEntry.prev = prev;\n      prev.next = toEntry;\n    }\n\n    toEntry.schedule(() => {\n      try {\n        fromEntry.leave();\n      } finally {\n        try {\n          this._forget(fromEntry);\n        } finally {\n          toEntry.enter('replace');\n        }\n      }\n    });\n    tracker.it = toEntry;\n  }\n\n  popState(\n      popState: PopStateEvent,\n      tracker: ValueTracker<PageEntry>,\n  ): PageEntry | undefined {\n\n    const { state } = popState;\n\n    if (state == null) {\n      // Hash change\n      if (this._history.state == null) {\n        // Not a return\n        return this._changeHash(tracker);\n      }\n      return; // Already handled by `hashchange` handler\n    }\n\n    const fromEntry = tracker.it;\n    const { uid, data, id: pageId } = extractNavData(state);\n    let toEntry: PageEntry;\n\n    const existingEntry = uid === this._uid && pageId != null ? this._entries.get(pageId) : undefined;\n\n    if (existingEntry) {\n      toEntry = existingEntry;\n    } else {\n      // Returning to page existed in previous app version\n      toEntry = this.newEntry({\n        url: new URL(this._location.href),\n        data,\n        title: this._document.title,\n      });\n      fromEntry.transfer(toEntry, 'return');\n      this._entries.set(toEntry.id, toEntry);\n      this._history.replaceState(this._historyState(toEntry), '');\n    }\n\n    toEntry.schedule(() => {\n      try {\n        fromEntry.leave();\n      } finally {\n        toEntry.enter('return');\n      }\n    });\n\n    tracker.it = toEntry;\n\n    return toEntry;\n  }\n\n  public hashChange(tracker: ValueTracker<PageEntry>): PageEntry | void {\n    if (this._history.state == null) {\n      // Not a return\n      return this._changeHash(tracker);\n    }\n    // Otherwise, a `popstate` event is also triggered,\n    // and its handler would do the job (or already did).\n  }\n\n  public update(tracker: ValueTracker<PageEntry>, url: URL): PageEntry {\n\n    const oldEntry = tracker.it;\n    const newEntry = new PageEntry(this._context, ++this._lastId, { ...oldEntry.page, url }, oldEntry);\n\n    this._entries.set(newEntry.id, newEntry);\n    this._history.replaceState(this._historyState(newEntry), '', url.href);\n    this._entries.delete(oldEntry.id);\n\n    return tracker.it = newEntry;\n  }\n\n  private _changeHash(tracker: ValueTracker<PageEntry>): PageEntry {\n\n    const fromEntry = tracker.it;\n    const toEntry = this.newEntry({\n      url: new URL(this._location.href),\n      data: null,\n      title: this._document.title,\n    });\n\n    try {\n      fromEntry.transfer(toEntry, 'enter');\n    } finally {\n      this._history.replaceState(this._historyState(toEntry), '');\n      this._enter('enter', toEntry, tracker);\n    }\n\n    return toEntry;\n  }\n\n  private _forget(entry: PageEntry) {\n    this._entries.delete(entry.id);\n    entry.forget();\n  }\n\n  private _historyState({ id, page: { data } }: PageEntry): NavDataEnvelope {\n    return {\n      [NAV_DATA_KEY]: {\n        uid: this._uid,\n        id,\n        data,\n      },\n    };\n  }\n\n}\n\n/**\n * @internal\n */\nexport interface PartialNavData {\n  readonly uid?: string;\n  readonly id?: number;\n  readonly data: any;\n}\n\n/**\n * @internal\n */\nexport interface NavData extends PartialNavData {\n  readonly uid: string;\n  readonly id: number;\n}\n\n/**\n * @internal\n */\nexport const NAV_DATA_KEY = 'wesib:navigation:data' as const;\n\n/**\n * @internal\n */\nexport interface NavDataEnvelope {\n  readonly [NAV_DATA_KEY]: NavData;\n}\n\nfunction extractNavData(state: any): PartialNavData {\n  return state == null || typeof state !== 'object' ? { data: state } : state[NAV_DATA_KEY];\n}\n\n/**\n * @internal\n */\nexport class PageEntry {\n\n  next?: PageEntry;\n  prev?: PageEntry;\n  private _status: PageStatus = PageStatus.New;\n  readonly page: Page;\n  private readonly _params: Map<PageParam<any, any>, PageParam.Handle<any, any>>;\n  private _update: () => void = noop;\n\n  constructor(\n      private readonly _context: BootstrapContext,\n      readonly id: number,\n      target: Navigation.URLTarget,\n      proto?: PageEntry,\n  ) {\n    this._params = proto ? proto._params : new Map<PageParam<any, any>, PageParam.Handle<any, any>>();\n\n    const entry = this;\n\n    this.page = {\n      url: target.url,\n      title: target.title,\n      data: target.data,\n      get visited() {\n        return !!entry._status;\n      },\n      get current() {\n        return entry._status === PageStatus.Current;\n      },\n      get(ref) {\n        return entry.get(ref);\n      },\n      put(ref, input) {\n        entry.put(ref, input);\n      },\n    };\n  }\n\n  get<T>(ref: PageParam.Ref<T, unknown>): T | undefined {\n\n    const handle: PageParam.Handle<T, unknown> | undefined = this._params.get(ref[PageParam__symbol]);\n\n    return handle && handle.get();\n  }\n\n  put<T, I>(ref: PageParam.Ref<T, I>, input: I): T {\n\n    const param = ref[PageParam__symbol];\n    const handle: PageParam.Handle<T, I> | undefined = this._params.get(param);\n\n    if (handle) {\n      handle.put(input);\n      return handle.get();\n    }\n\n    const registry = new ContextRegistry<ParamContext>(this._context);\n\n    class ParamContext extends PageParamContext {\n      readonly get: PageParamContext['get'] = registry.newValues().get;\n    }\n\n    const newHandle = param.create(this.page, input, new ParamContext());\n\n    this._params.set(param, newHandle);\n    if (this.page.current && newHandle.enter) {\n      newHandle.enter(this.page, 'init');\n    }\n\n    return newHandle.get();\n  }\n\n  transfer(to: PageEntry, when: 'pre-open' | 'pre-replace' | 'enter' | 'return') {\n    itsEach(this._params.entries(), ([param, handle]) => {\n      if (handle.transfer) {\n\n        const transferred = handle.transfer(to.page, when);\n\n        if (transferred) {\n          to._params.set(param, transferred);\n        }\n      }\n    });\n  }\n\n  stay(at: Page) {\n    itsEach(this._params.values(), handle => handle.stay && handle.stay(at));\n  }\n\n  enter(when: 'init' | 'open' | 'replace' | 'enter' | 'return') {\n    this._status = PageStatus.Current;\n    itsEach(this._params.values(), handle => handle.enter && handle.enter(this.page, when));\n  }\n\n  leave() {\n    this._status = PageStatus.Visited;\n    itsEach(this._params.values(), handle => handle.leave && handle.leave());\n  }\n\n  forget() {\n    itsEach(this._params.values(), handle => handle.forget && handle.forget());\n    this._params.clear();\n  }\n\n  schedule(update: () => void) {\n    this._update = update;\n  }\n\n  apply() {\n\n    const update = this._update;\n\n    this._update = noop;\n    update();\n  }\n\n}\n\nconst enum PageStatus {\n  New,\n  Visited,\n  Current,\n}\n","import { BootstrapContext, BootstrapWindow, mergeFunctions } from '@wesib/wesib';\nimport { noop } from 'call-thru';\nimport { AfterEvent, DomEventDispatcher, onAny, trackValue } from 'fun-events';\nimport { NavHistory, PageEntry } from './nav-history.impl';\nimport { Navigation as Navigation_ } from './navigation';\nimport { NavigationAgent } from './navigation-agent';\nimport {\n  EnterPageEvent,\n  LeavePageEvent,\n  NavigationEvent,\n  NavigationEventType,\n  StayOnPageEvent,\n} from './navigation.event';\nimport { Page } from './page';\nimport { PageParam } from './page-param';\n\nexport function createNavigation(context: BootstrapContext): Navigation_ {\n\n  const window = context.get(BootstrapWindow);\n  const { document, history } = window;\n  const dispatcher = new DomEventDispatcher(window);\n  const navHistory = context.get(NavHistory);\n  const agent = context.get(NavigationAgent);\n  const onEnter = dispatcher.on<EnterPageEvent>(NavigationEventType.EnterPage);\n  const onLeave = dispatcher.on<LeavePageEvent>(NavigationEventType.LeavePage);\n  const onStay = dispatcher.on<StayOnPageEvent>(NavigationEventType.StayOnPage);\n  const onEvent = onAny<[NavigationEvent]>(onEnter, onLeave, onStay);\n  const nav = trackValue<PageEntry>(navHistory.init());\n\n  nav.read(nextEntry => nextEntry.apply()); // The very first page entry receiver applies scheduled updates to page\n\n  const readPage: AfterEvent<[Page]> = nav.read.keep.thru(entry => entry.page);\n  let next: Promise<any> = Promise.resolve();\n\n  dispatcher.on<PopStateEvent>('popstate')(popState => {\n\n    const entry = navHistory.popState(popState, nav);\n\n    if (entry) {\n      dispatcher.dispatch(new EnterPageEvent(\n          NavigationEventType.EnterPage,\n          {\n            when: popState.state != null ? 'return' : 'enter',\n            to: entry.page,\n          },\n      ));\n    }\n  });\n\n  dispatcher.on('hashchange')(() => {\n\n    const entry = navHistory.hashChange(nav);\n\n    if (entry) {\n      dispatcher.dispatch(new EnterPageEvent(\n          NavigationEventType.EnterPage,\n          {\n            when: 'enter',\n            to: entry.page,\n          },\n      ));\n    }\n  });\n\n  class Navigation extends Navigation_ {\n\n    get length() {\n      return history.length;\n    }\n\n    get onEnter() {\n      return onEnter;\n    }\n\n    get onLeave() {\n      return onLeave;\n    }\n\n    get onStay() {\n      return onStay;\n    }\n\n    get on() {\n      return onEvent;\n    }\n\n    get read() {\n      return readPage;\n    }\n\n    go(delta?: number): void {\n      history.go(delta);\n    }\n\n    open(target: Navigation_.Target | string | URL) {\n      return navigate('pre-open', 'open', target);\n    }\n\n    replace(target: Navigation_.Target | string | URL) {\n      return navigate('pre-replace', 'replace', target);\n    }\n\n    update(url: string | URL): Page {\n      return navHistory.update(nav, toURL(url)).page;\n    }\n\n    with<T, I>(ref: PageParam.Ref<T, I>, input: I): Navigation_.Parameterized {\n      return withParam(page => page.put(ref, input));\n    }\n\n  }\n\n  return new Navigation();\n\n  function withParam(applyParams: (page: Page) => void): Navigation_.Parameterized {\n    return {\n      with<TT, II>(ref: PageParam.Ref<TT, II>, input: II): Navigation_.Parameterized {\n        return withParam(mergeFunctions(applyParams, page => page.put(ref, input)));\n      },\n      open(target: Navigation_.Target | string | URL) {\n        return navigate('pre-open', 'open', target, applyParams);\n      },\n      replace(target: Navigation_.Target | string | URL) {\n        return navigate('pre-replace', 'replace', target, applyParams);\n      },\n    };\n  }\n\n  function toURL(url: string | URL | undefined): URL {\n    if (typeof url === 'string') {\n      return new URL(url, document.baseURI);\n    }\n    return url || nav.it.page.url;\n  }\n\n  function urlTargetOf(target: Navigation_.Target | string | URL): Navigation_.URLTarget {\n    if (typeof target === 'string' || target instanceof URL) {\n      return { url: toURL(target) };\n    }\n    if (target.url instanceof URL) {\n      return target as Navigation_.URLTarget;\n    }\n    return { ...target, url: toURL(target.url) };\n  }\n\n  function navigate(\n      whenLeave: 'pre-open' | 'pre-replace',\n      when: 'open' | 'replace',\n      target: Navigation_.Target | string | URL,\n      applyParams: (page: Page) => void = noop,\n  ): Promise<Page | null> {\n\n    const urlTarget = urlTargetOf(target);\n    const promise = next = next.then(doNavigate, doNavigate);\n\n    return promise;\n\n    function doNavigate(): Page | null {\n\n      let toEntry: PageEntry | undefined;\n\n      try {\n\n        const prepared = prepare();\n\n        if (!prepared) {\n          return prepared; // Navigation cancelled\n        }\n\n        toEntry = prepared;\n\n        navHistory[when](toEntry, nav);\n\n        dispatcher.dispatch(new EnterPageEvent(\n            NavigationEventType.EnterPage,\n            {\n              when,\n              to: toEntry.page,\n            },\n        ));\n\n        return toEntry.page;\n      } catch (e) {\n        stay(toEntry, e);\n        throw e;\n      }\n    }\n\n    function prepare(): PageEntry | null {\n      if (next !== promise) {\n        return stay();\n      }\n\n      const fromEntry = nav.it;\n      const toEntry = navHistory.newEntry(urlTarget);\n\n      fromEntry.transfer(toEntry, whenLeave);\n\n      const leavePage = new LeavePageEvent(\n          NavigationEventType.LeavePage,\n          {\n            when: whenLeave,\n            from: fromEntry.page,\n            to: toEntry.page,\n          },\n      );\n\n      applyParams(toEntry.page);\n      if (!dispatcher.dispatch(leavePage) || next !== promise) {\n        return stay(toEntry);\n      }\n\n      let finalTarget: Navigation_.URLTarget | undefined;\n\n      agent(t => finalTarget = t, whenLeave, leavePage.from, leavePage.to);\n\n      if (!finalTarget) {\n        return stay(toEntry); // Some agent didn't call `next()`.\n      }\n\n      return toEntry;\n    }\n\n    function stay(toEntry?: PageEntry, reason?: any): null {\n      if (toEntry) {\n        toEntry.stay(nav.it.page);\n      }\n\n      dispatcher.dispatch(new StayOnPageEvent(\n          NavigationEventType.StayOnPage,\n          {\n            from: nav.it.page,\n            to: urlTarget,\n            reason,\n          },\n      ));\n\n      return null;\n    }\n\n  }\n}\n","/**\n * @module @wesib/generic\n */\nimport { FeatureDef, FeatureDef__symbol } from '@wesib/wesib';\nimport { Navigation } from './navigation';\nimport { createNavigation } from './navigation.impl';\n\nconst NavigationSupport__feature: FeatureDef = {\n  setup(setup) {\n    setup.provide({ a: Navigation, by: createNavigation });\n  },\n};\n\n/**\n * Browser navigation support feature.\n *\n * Makes [[Navigation]] available in bootstrap context.\n */\nexport class NavigationSupport {\n\n  static get [FeatureDef__symbol](): FeatureDef {\n    return NavigationSupport__feature;\n  }\n\n}\n","import { nextArgs, nextSkip } from 'call-thru';\nimport { eventSupply, EventSupply, OnEvent, onEventBy, trackValue } from 'fun-events';\nimport { Page } from '../page';\nimport { PageLoadResponse } from './page-load-response';\nimport { PageLoader } from './page-loader.impl';\n\n/**\n * @internal\n */\nexport function cachingPageLoader(loader: PageLoader): PageLoader {\n\n  let state: {\n    readonly url: string;\n    readonly on: OnEvent<[PageLoadResponse]>;\n    readonly sup: EventSupply;\n  } | undefined;\n\n  return page => {\n\n    const url = pageUrl(page);\n\n    if (state) {\n      if (state.url === url) {\n        return state.on;\n      }\n      state.sup.off();\n    }\n\n    let tracked: {\n      readonly on: OnEvent<[PageLoadResponse]>;\n      num: number;\n    } | undefined;\n    const supply = eventSupply().whenOff(() => {\n      state = undefined;\n      tracked = undefined;\n    });\n\n    const on = onEventBy<[PageLoadResponse]>(receiver => {\n      if (!tracked) {\n\n        const onLoad = loader(page);\n        const tracker = trackValue<PageLoadResponse>();\n        const trackSupply = onLoad(resp => {\n          tracker.it = resp;\n        }).whenOff(reason => {\n          // Error drops page cache, unlike successful page load.\n          if (reason != null) {\n            supply.off(reason);\n          }\n        });\n\n        supply.whenOff(reason => {\n          trackSupply.off(reason);\n          tracker.done(reason);\n        });\n\n        tracked = {\n          on: tracker.read.thru_(\n              response => response ? nextArgs(response) : nextSkip(),\n          ),\n          num: 0,\n        };\n      }\n\n      const requested = tracked;\n\n      ++requested.num;\n\n      return requested.on(receiver).needs(supply).whenOff(reason => {\n        if (!--requested.num) {\n          // Allow to request the same page again\n          Promise.resolve().then(() => {\n            if (!requested.num && requested === tracked) {\n              supply.off(reason);\n            }\n          });\n        }\n      });\n    });\n\n    state = { url, on, sup: supply };\n\n    return on;\n  };\n}\n\nfunction pageUrl(page: Page): string {\n  return new URL('', page.url).href;\n}\n","import { flatMapIt, itsEach, itsIterator } from 'a-iterable';\nimport { asis, noop } from 'call-thru';\nimport {\n  EventEmitter,\n  eventReceiver,\n  EventReceiver,\n  eventSupply,\n  EventSupply,\n  noEventSupply,\n  OnEvent,\n  onEventBy,\n} from 'fun-events';\nimport { Navigation } from '../navigation';\nimport { Page } from '../page';\nimport { PageParam } from '../page-param';\nimport { PageFragmentRequest, PageLoadRequest } from './page-load-request';\nimport { PageLoadResponse } from './page-load-response';\nimport { PageLoader } from './page-loader.impl';\n\n/**\n * @internal\n */\nexport interface PageLoadReq extends PageLoadRequest {\n\n  readonly receiver: EventReceiver.Generic<[PageLoadResponse]>;\n\n}\n\nclass PageLoadAbortError extends Error {}\n\n/**\n * @internal\n */\nexport class PageLoadRequests implements Iterable<PageLoadReq> {\n\n  private readonly _map = new Map<EventSupply, PageLoadReq[]>();\n\n  constructor(\n      private readonly _navigation: Navigation,\n      private readonly _loader: PageLoader,\n  ) {}\n\n  get fragments(): readonly PageFragmentRequest[] {\n\n    const result: PageFragmentRequest[] = [];\n\n    for (const request of this) {\n      if (!request.fragment) {\n        return [];\n      }\n      result.push(request.fragment);\n    }\n\n    return result;\n  }\n\n  [Symbol.iterator](): Iterator<PageLoadReq> {\n    return itsIterator(flatMapIt(this._map.values(), asis));\n  }\n\n  handle(): PageParam.Handle<void, PageLoadRequest> {\n\n    const self = this;\n    const pageSupply = eventSupply();\n    let loadSupply = noEventSupply();\n\n    return {\n      get() {},\n      put(request: PageLoadRequest): void {\n        self._add(request);\n      },\n      transfer(to: Page) {\n\n        const transferred = self._transfer();\n\n        to.put(pageLoadRequestsParam, transferred);\n\n        return transferred.handle();\n      },\n      enter(page: Page, when: 'init' | 'open' | 'replace' | 'return'): void {\n        if (when === 'init') {\n          // The page is loaded already. No need to fetch it.\n          return;\n        }\n\n        loadSupply = eventSupply().needs(pageSupply);\n\n        const onLoad = onEventBy<[PageLoadResponse]>(responseReceiver => {\n\n          const emitter = new EventEmitter<[PageLoadResponse]>();\n          const supply = emitter.on(responseReceiver);\n\n          self._loader(page)(response => emitter.send(response)).whenOff(error => {\n            if (error !== undefined && !(error instanceof PageLoadAbortError)) {\n              // Report current page load error as failed load response\n              emitter.send({\n                ok: false as const,\n                page,\n                error,\n              });\n            }\n          }).needs(loadSupply);\n\n          return supply;\n        }).share();\n\n        itsEach(\n            self,\n            ({ fragment, receiver }) => onFragment(onLoad, fragment)({\n              supply: eventSupply().needs(receiver.supply),\n              receive(context, response): void {\n                receiver.receive(context, response);\n              },\n            }),\n        );\n      },\n      leave(): void {\n        loadSupply.off(new PageLoadAbortError('page left'));\n      },\n      stay() {\n        pageSupply.off(new PageLoadAbortError('navigation cancelled'));\n      },\n      forget() {\n        pageSupply.off(new PageLoadAbortError('page forgotten'));\n      },\n    };\n\n  }\n\n  private _add(request: PageLoadRequest) {\n\n    const req = { ...request, receiver: eventReceiver(request.receiver) };\n    const { supply } = req.receiver;\n    const list = this._map.get(supply);\n\n    if (list) {\n      list.push(req);\n    } else {\n      this._map.set(supply, [req]);\n      supply.whenOff(() => this._map.delete(supply));\n    }\n  }\n\n  private _transfer(): PageLoadRequests {\n\n    const transferred = new PageLoadRequests(this._navigation, this._loader);\n\n    for (const [supply, list] of this._map.entries()) {\n      transferred._map.set(supply, [...list]);\n    }\n\n    return transferred;\n  }\n\n}\n\nfunction onFragment(\n    onLoad: OnEvent<[PageLoadResponse]>,\n    fragment?: PageFragmentRequest,\n): OnEvent<[PageLoadResponse]> {\n  return fragment\n      ? onLoad.thru_(\n          response => response.ok\n              ? {\n                ...response,\n                fragment: (\n                    fragment.tag != null\n                    ? response.document.getElementsByTagName(fragment.tag)[0]\n                    : response.document.getElementById(fragment.id)\n                ) || undefined,\n              }\n              : response,\n      )\n      : onLoad;\n}\n\nclass PageLoadRequestsParam extends PageParam<PageLoadRequests, PageLoadRequests> {\n\n  create(\n      _page: Page,\n      requests: PageLoadRequests,\n  ): PageParam.Handle<PageLoadRequests, PageLoadRequests> {\n    return {\n      get() {\n        return requests;\n      },\n      put: noop,\n    };\n  }\n\n}\n\n/**\n * @internal\n */\nexport const pageLoadRequestsParam: PageParam<PageLoadRequests, PageLoadRequests> = new PageLoadRequestsParam();\n","/**\n * @module @wesib/generic\n */\nimport { ContextUpRef } from 'context-values';\nimport { EventSender, OnEvent } from 'fun-events';\nimport { FetchAgentKey } from '../../fetch/fetch-agent-key.impl';\nimport { PageLoadResponse } from './page-load-response';\n\n/**\n * Page load agent signature.\n *\n * The agent can be used to alter loaded page document processing. For that it should be registered in appropriate\n * context.\n *\n * All registered agents are organized into chain. The first agent in chain is called by page loader.\n */\nexport type PageLoadAgent =\n/**\n * @param next  Either calls the next agent in chain, or actually loads page document if this agent is the last one.\n * Accepts an optional `Request` parameter. The original request will be used instead when omitted.\n * @param request  HTTP request.\n *\n * @returns An `EventSender` of page load response. It is returned either to preceding agent in chain, or as a loaded\n * document.\n */\n    (\n        this: void,\n        next: (this: void, request?: Request) => OnEvent<[PageLoadResponse]>,\n        request: Request,\n    ) => EventSender<[PageLoadResponse]>;\n\nexport namespace PageLoadAgent {\n\n  /**\n   * Combined page load agent signature.\n   *\n   * This is what is available under [[PageLoadAgent]] key.\n   */\n  export type Combined =\n  /**\n   * @param next  Either calls the next agent in chain, or actually loads page document if this agent is the last one.\n   * Accepts `Request` parameter.\n   * @param request  HTTP request.\n   *\n   * @returns An `OnEvent` registrar of loaded document.\n   */\n      (\n          this: void,\n          next: (this: void, request: Request) => OnEvent<[PageLoadResponse]>,\n          request: Request,\n      ) => OnEvent<[PageLoadResponse]>;\n\n}\n\n/**\n * A key of context value containing an [[PageLoadAgent]] instance.\n *\n * The agent returned combines all registered agents into one. If no agent registered it just performs the fetch.\n */\nexport const PageLoadAgent: ContextUpRef<PageLoadAgent.Combined, PageLoadAgent> =\n    (/*#__PURE__*/ new FetchAgentKey<[PageLoadResponse]>('page-load-agent'));\n","import { noop, valueProvider } from 'call-thru';\nimport { ContextUpRef, FnContextKey } from 'context-values';\n\n/**\n * A signature of page load URL modifier function.\n *\n * All such functions registered in bootstrap context are called in order of their registration with current page URL.\n * They are able to modify it, e.g. by applying additional URL search parameters. The modified URL is used then to load\n * the page.\n */\nexport type PageLoadURLModifier =\n/**\n * @param url  An URL of page to load.\n */\n    (this: void, url: URL) => void;\n\n/**\n * A key of bootstrap context value containing a page load URL modifier.\n *\n * Does not modify URL by default.\n */\nexport const PageLoadURLModifier: ContextUpRef<PageLoadURLModifier, PageLoadURLModifier> =\n    (/*#__PURE__*/ new FnContextKey('page-load-url', { byDefault: valueProvider(noop) }));\n","import { BootstrapContext, bootstrapDefault, BootstrapWindow } from '@wesib/wesib';\nimport { itsReduction } from 'a-iterable';\nimport { SingleContextKey } from 'context-values';\nimport { afterThe, EventEmitter, eventSupply, OnEvent, onEventBy } from 'fun-events';\nimport { hthvParse, hthvQuote } from 'http-header-value';\nimport { HttpFetch } from '../../fetch';\nimport { Page } from '../page';\nimport { PageLoadAgent } from './page-load-agent';\nimport { pageLoadRequestsParam } from './page-load-requests.impl';\nimport { PageLoadResponse } from './page-load-response';\nimport { PageLoadURLModifier } from './page-load-url-modifier';\n\n/**\n * @internal\n */\nexport type PageLoader = (this: void, page: Page) => OnEvent<[PageLoadResponse]>;\n\n/**\n * @internal\n */\nexport const PageLoader = (/*#__PURE__*/ new SingleContextKey<PageLoader>(\n    'page-loader',\n    {\n      byDefault: bootstrapDefault(newPageLoader),\n    },\n));\n\nfunction newPageLoader(context: BootstrapContext): PageLoader {\n\n  const window = context.get(BootstrapWindow);\n  const httpFetch = context.get(HttpFetch);\n  const modifyURL = context.get(PageLoadURLModifier);\n  const agent = context.get(PageLoadAgent);\n  const parser: DOMParser = new (window as any).DOMParser();\n\n  return page => {\n\n    const url = new URL(page.url.href);\n\n    modifyURL(url);\n\n    const request = new Request(\n        url.href,\n        {\n          mode: 'same-origin',\n          credentials: 'same-origin',\n          headers: new Headers({ 'Accept': 'text/html' }),\n        },\n    );\n\n    return onEventBy(receiver => agent(fetch, request)(receiver));\n\n    function fetch(fetchRequest: Request): OnEvent<[PageLoadResponse]> {\n      fetchRequest = pageFragmentsRequest(page, fetchRequest);\n\n      const responseTextEmitter = new EventEmitter<[Response, string]>();\n      const onResponse: OnEvent<[PageLoadResponse]> = responseTextEmitter.on.thru_(\n          (response, text) => {\n            if (!response.ok) {\n              return {\n                ok: false as const,\n                page,\n                response,\n                error: response.status,\n              };\n            }\n            try {\n              return {\n                ok: true as const,\n                page,\n                response,\n                document: parsePageDocument(parser, url, response, text),\n              };\n            } catch (error) {\n              return {\n                ok: false as const,\n                page,\n                response,\n                error,\n              };\n            }\n          },\n      );\n\n      return onEventBy<[PageLoadResponse]>(receiver => {\n\n        const { supply } = receiver;\n\n        afterThe<[PageLoadResponse.Start]>({ page }).once({\n          supply: eventSupply().needs(supply),\n          receive(ctx, start) {\n            receiver.receive(ctx, start);\n          },\n        });\n\n        const responseSupply = httpFetch(fetchRequest)(response => {\n          onResponse(receiver);\n          response.text().then(\n              text => {\n                responseTextEmitter.send(response, text);\n                supply.needs(responseSupply);\n              },\n          ).catch(\n              e => supply.off(e),\n          );\n        });\n      });\n    }\n  };\n}\n\nfunction pageFragmentsRequest(page: Page, request: Request ) {\n\n  const fragments = page.get(pageLoadRequestsParam)?.fragments;\n\n  if (!fragments || !fragments.length) {\n    return request;\n  }\n\n  return new Request(\n      request,\n      {\n        headers: {\n          'Accept-Fragment': itsReduction(\n              fragments,\n              (header, fragment) =>\n                  (header ? header + ', ' : '')\n                  + (\n                      fragment.tag != null\n                          ? 'tag=' + hthvQuote(fragment.tag)\n                          : 'id=' + hthvQuote(fragment.id)\n                  ),\n              '',\n          ),\n        },\n      },\n  );\n}\n\nfunction parsePageDocument(parser: DOMParser, url: URL, response: Response, text: string): Document {\n\n  const doc = parser.parseFromString(\n      text,\n      hthvParse(response.headers.get('Content-Type') || 'text/html')[0].v as SupportedType,\n  );\n\n  if (doc.head) {\n\n    const base = doc.head.querySelector('base');\n\n    if (base) {\n      base.href = new URL(base.getAttribute('href')!, url).href;\n    } else {\n\n      const newBase = doc.createElement('base');\n\n      newBase.href = url.href;\n\n      doc.head.appendChild(newBase);\n    }\n  }\n\n  return doc;\n}\n","import { Navigation } from '../navigation';\nimport { Page } from '../page';\nimport { PageParam } from '../page-param';\nimport { PageParamContext } from '../page-param-context';\nimport { cachingPageLoader } from './caching-page-loader.impl';\nimport { PageLoadRequest } from './page-load-request';\nimport { PageLoadRequests, pageLoadRequestsParam } from './page-load-requests.impl';\nimport { PageLoader } from './page-loader.impl';\n\nclass PageLoadParam extends PageParam<void, PageLoadRequest> {\n\n  create(page: Page, request: PageLoadRequest, context: PageParamContext) {\n\n    const requests = new PageLoadRequests(context.get(Navigation), cachingPageLoader(context.get(PageLoader)));\n    const handle = requests.handle();\n\n    page.put(pageLoadRequestsParam, requests);\n    handle.put(request);\n\n    return handle;\n  }\n\n}\n\n/**\n * Page load parameter.\n *\n * Accepts a {@link PageLoadRequest page load request} as input.\n *\n * A page load is initiated whenever a page with new address is {@link Navigation.onEnter entered}.\n *\n * Page load won't be initiated if:\n * - page load parameter is not {@link Page.put} added,\n * - all added {@link PageLoadRequest.receiver response receiver}s supplies are cut off, or\n * - the entered page address is the the same one as previous one, except the hash,\n */\nexport const pageLoadParam: PageParam<void, PageLoadRequest> = (/*#__PURE__*/ new PageLoadParam());\n","import { BootstrapContext, bootstrapDefault, BootstrapWindow } from '@wesib/wesib';\nimport { ContextKey__symbol, SingleContextKey } from 'context-values';\nimport { AfterEvent, afterThe } from 'fun-events';\nimport { Navigation } from '../navigation';\nimport { PageLoadAgent } from './page-load-agent';\nimport { PageLoadURLModifier } from './page-load-url-modifier';\n\nconst PageCacheBuster__key = (/*#__PURE__*/ new SingleContextKey<PageCacheBuster>(\n    'page-cache-buster',\n    {\n      byDefault: bootstrapDefault(context => new PageCacheBuster(context)),\n    },\n));\n\n/**\n * @internal\n */\nexport const appRevSearchParam = '__wesib_app_rev__';\n\n/**\n * @internal\n */\nexport class PageCacheBuster {\n\n  static get [ContextKey__symbol](): SingleContextKey<PageCacheBuster> {\n    return PageCacheBuster__key;\n  }\n\n  readonly urlModifier: AfterEvent<PageLoadURLModifier[]>;\n  readonly agent: AfterEvent<PageLoadAgent[]>;\n\n  constructor(context: BootstrapContext) {\n\n    const rev = appRev(context.get(BootstrapWindow).document);\n\n    if (!rev) {\n      this.urlModifier = afterThe();\n      this.agent = afterThe();\n    } else {\n\n      const navigation = context.get(Navigation);\n\n      this.urlModifier = afterThe(url => url.searchParams.set(appRevSearchParam, rev));\n      this.agent = afterThe((next, request) => {\n        return next(new Request(request.url, request)).thru_(response => {\n          if (response.ok) {\n\n            const newRev = appRev(response.document);\n\n            if (newRev && newRev !== rev) {\n\n              const url = new URL(response.page.url.href);\n\n              url.searchParams.set(appRevSearchParam, newRev);\n              navigation.update(url);\n              navigation.reload();\n            }\n          }\n\n          return response;\n        });\n      });\n    }\n  }\n\n}\n\nfunction appRev(doc: Document) {\n  return doc.querySelector('meta[name=wesib-app-rev]')?.getAttribute('content');\n}\n","/**\n * @module @wesib/generic\n */\nimport { isElement } from '@wesib/wesib';\nimport { itsEach, overArray } from 'a-iterable';\n\n/**\n * Imports DOM node from one document to another.\n *\n * @param from  The node to import.\n * @param to  The node to append imported node to.\n * @param importContent  A function that imports nodes nested in parent element. [[importNodeContent]] by default.\n *\n * @returns Imported node.\n */\nexport function importNode<N extends Node>(\n    from: N,\n    to: Node,\n    importContent?: (this: void, from: N, to: N) => void,\n): N;\n\n/**\n * Imports DOM node from one document to another and inserts it before the given node.\n *\n * @param from  The node to import.\n * @param to  The node to append imported node to.\n * @param before  The node to insert imported node before, or `null` to append it to the end of target one.\n * @param importContent  A function that imports nodes nested in parent element. [[importNodeContent]] by default.\n *\n * @returns Imported node.\n */\nexport function importNode<N extends Node>(\n    from: N,\n    to: Node,\n    before?: Node | null,\n    importContent?: (this: void, from: N, to: N) => void,\n): N;\n\nexport function importNode<N extends Node>(\n    from: N,\n    to: Node,\n    beforeOrImport?: Node | null | ((this: void, from: N, to: N) => void),\n    importContent: (this: void, from: N, to: N) => void = importNodeContent,\n): N {\n\n  let before: Node | null;\n\n  if (typeof beforeOrImport === 'function') {\n    importContent = beforeOrImport;\n    before = null;\n  } else {\n    before = beforeOrImport || null;\n  }\n\n  const doc = to.ownerDocument!;\n\n  if (isElement(from)) {\n\n    const elementClone = doc.createElement(from.tagName.toLowerCase()) as Node as (Element & N);\n\n    from.getAttributeNames().forEach(attr => elementClone.setAttribute(attr, from.getAttribute(attr)!));\n    importContent(from, elementClone);\n    to.insertBefore(elementClone, before);\n\n    return elementClone;\n  }\n\n  const nodeClone = doc.importNode(from, false);\n\n  to.insertBefore(nodeClone, before);\n\n  return nodeClone;\n}\n\n/**\n * Imports DOM node contents from one document to another.\n *\n * @param from  The node which contents to import.\n * @param to  The node to append imported nodes to.\n */\nexport function importNodeContent(from: Node, to: Node): void {\n  itsEach(\n      overArray(from.childNodes),\n      node => importNode(node, to),\n  );\n}\n","import { BootstrapContext, BootstrapWindow } from '@wesib/wesib';\nimport { filterIt, itsEach, mapIt, overArray } from 'a-iterable';\nimport { importNode } from '../../util';\nimport { PageLoadAgent } from './page-load-agent';\n\n/**\n * @internal\n */\nexport function pageScriptsAgent(context: BootstrapContext): PageLoadAgent {\n\n  const doc = context.get(BootstrapWindow).document;\n\n  return next => next().thru_(\n      response => {\n        if (response.ok) {\n\n          const allScripts = new Set<string>(mapIt(\n              externalScripts(doc, overArray(doc.scripts)),\n              ([src]) => src,\n          ));\n\n          itsEach(\n              filterIt(\n                  externalScripts(response.document, overArray(response.document.querySelectorAll('script'))),\n                  ([src]) => !allScripts.has(src),\n              ),\n              ([src, script]) => {\n                importNode(script, doc.head, (_from, to) => to.src = src);\n                allScripts.add(src);\n              },\n          );\n        }\n        return response;\n      },\n  );\n}\n\nfunction externalScripts(\n    doc: Document,\n    scripts: Iterable<HTMLScriptElement>,\n): Iterable<readonly [string, HTMLScriptElement]> {\n  return mapIt(\n      filterIt(\n          scripts,\n          script => !!script.src,\n      ),\n      script => [new URL(script.src, doc.baseURI).href, script] as const,\n  );\n}\n","import { BootstrapContext, BootstrapWindow } from '@wesib/wesib';\nimport { itsEach, itsFirst, overArray } from 'a-iterable';\nimport { importNode } from '../../util';\nimport { PageLoadAgent } from './page-load-agent';\n\n/**\n * @internal\n */\nexport function pageStyleAgent(context: BootstrapContext): PageLoadAgent {\n\n  const doc = context.get(BootstrapWindow).document;\n\n  return next => next().thru_(\n      response => {\n        if (!response.ok) {\n          return response;\n        }\n\n        const newStyles = response.document.querySelectorAll<HTMLLinkElement>('link[rel=stylesheet]');\n\n        if (!newStyles.length) {\n          return response;\n        }\n\n        let target: Node = doc.head;\n        let before: Node | null = null;\n        const oldStyles = doc.querySelectorAll<HTMLLinkElement>('link[rel=stylesheet]');\n        const oldStylesByHref = new Map<string, HTMLLinkElement>();\n        const firstOldStyle = oldStyles.item(0);\n\n        if (firstOldStyle) {\n          target = firstOldStyle.parentNode!;\n          before = firstOldStyle;\n          itsEach(\n              overArray(oldStyles),\n              link => oldStylesByHref.set(new URL(link.href, doc.baseURI).href, link),\n          );\n        }\n\n        itsEach(\n            overArray(newStyles),\n            newStyle => {\n\n              const href = new URL(newStyle.href, doc.baseURI).href;\n              const oldStyle = oldStylesByHref.get(href);\n\n              if (oldStyle) {\n                // Style already exists.\n                if (itsFirst(oldStylesByHref.keys()) === href) {\n                  // In proper position already.\n                  // Insert the remaining styles after it.\n                  target = oldStyle.parentNode!;\n                  before = oldStyle.nextSibling;\n                } else {\n                  // Move to proper position.\n                  target.insertBefore(oldStyle, before);\n                }\n                oldStylesByHref.delete(href);\n              } else {\n                // Import new style\n                importNode(newStyle, target, before, (_from, to) => to.href = href);\n              }\n            },\n        );\n\n        // Remove remaining old styles\n        itsEach(oldStylesByHref.values(), style => style.parentNode!.removeChild(style));\n\n        return response;\n      },\n  );\n}\n","import { BootstrapContext, BootstrapWindow } from '@wesib/wesib';\nimport { PageLoadAgent } from './page-load-agent';\n\n/**\n * @internal\n */\nexport function pageTitleAgent(context: BootstrapContext): PageLoadAgent {\n\n  const doc = context.get(BootstrapWindow).document;\n\n  return next => next().thru_(response => {\n    if (response.ok) {\n\n      const title = response.document.getElementsByTagName('title').item(0);\n\n      if (title && title.textContent) {\n        doc.title = title.textContent;\n      }\n    }\n\n    return response;\n  });\n}\n","/**\n * @module @wesib/generic\n */\nimport { FeatureDef, FeatureDef__symbol } from '@wesib/wesib';\nimport { NavigationSupport } from '../navigation-support.feature';\nimport { PageCacheBuster } from './page-cache-buster.impl';\nimport { PageLoadAgent } from './page-load-agent';\nimport { PageLoadURLModifier } from './page-load-url-modifier';\nimport { pageScriptsAgent } from './page-scripts-agent.impl';\nimport { pageStyleAgent } from './page-style-agent.impl';\nimport { pageTitleAgent } from './page-title-agent.impl';\n\nconst PageLoadSupport__feature: FeatureDef = {\n  needs: NavigationSupport,\n  setup(setup) {\n    setup.provide({\n      a: PageLoadURLModifier,\n      by: (buster: PageCacheBuster) => buster.urlModifier,\n      with: [PageCacheBuster],\n    });\n    setup.provide({\n      a: PageLoadAgent,\n      by: (buster: PageCacheBuster) => buster.agent,\n      with: [PageCacheBuster],\n    });\n    setup.provide({ a: PageLoadAgent, by: pageScriptsAgent });\n    setup.provide({ a: PageLoadAgent, by: pageStyleAgent });\n    setup.provide({ a: PageLoadAgent, by: pageTitleAgent });\n  },\n};\n\n/**\n * Page load support feature.\n *\n * Enables default {@link PageLoadAgent page load agents}:\n * 1. Page cache busting agent.\n *    If `<meta name=\"wesib-app-rev\">` tag is present in initial page, then sends this tag's content with each page load\n *    request as `__wesib_app_rev__` search parameter. If the loaded page contains the same named meta tag with\n *    different content, then reloads the page.\n *    This serves both as cache busting technique, and as server-side application updates handler.\n * 2. Scripts agent.\n *    Includes external scripts from loaded page into main document.\n * 3. Style agent.\n *    Replaces external styles of main document styles with the ones from loaded page.\n *    Unless loaded page has no external styles.\n * 4. Title agent.\n *    Applies loaded page title to bootstrap window. If there is one.\n */\nexport class PageLoadSupport {\n\n  static get [FeatureDef__symbol](): FeatureDef {\n    return PageLoadSupport__feature;\n  }\n\n}\n","/**\n * @module @wesib/generic\n */\nimport { SingleContextKey, SingleContextRef } from 'context-values';\nimport { EventSupply } from 'fun-events';\nimport { StypRules } from 'style-producer';\nimport { ComponentStypOptions } from './component-styp-options';\n\n/**\n * Component style producer function interface.\n */\nexport type ComponentStyleProducer =\n/**\n * @param rules  CSS rules to produce stylesheets for. This can be e.g. a `StypRule.rules` to render all rules,\n * or a result of `StypRuleList.grab()` method call to render only matching ones.\n * @param opts  Production options.\n *\n * @returns Styles supply. Once cut off (i.e. its `off()` method is called) the produced stylesheets are removed.\n */\n    (\n        rules: StypRules,\n        opts?: ComponentStypOptions,\n    ) => EventSupply;\n\n/**\n * A key of component context value containing a component style producer.\n */\nexport const ComponentStyleProducer: SingleContextRef<ComponentStyleProducer> =\n    (/*#__PURE__*/ new SingleContextKey<ComponentStyleProducer>('component-style-producer'));\n","/**\n * @module @wesib/generic\n */\nimport { MultiContextKey, MultiContextRef } from 'context-values';\nimport { StypRender } from 'style-producer';\n\n/**\n * A CSS render that will be enabled by default by [[ComponentStyleProducer]].\n */\nexport type ComponentStypRender = StypRender;\n\n/**\n * A key of component context value containing component CSS renders.\n */\nexport const ComponentStypRender: MultiContextRef<ComponentStypRender> =\n    (/*#__PURE__*/ new MultiContextKey<ComponentStypRender>('component-styp-render'));\n","import { ComponentContext, DefaultNamespaceAliaser, ElementDef } from '@wesib/wesib';\nimport { ContextValues, SingleContextKey, SingleContextRef } from 'context-values';\nimport { css__naming, html__naming, NamespaceDef, QualifiedName } from 'namespace-aliaser';\n\n/**\n * @internal\n */\nexport type ElementIdClass = QualifiedName;\n\n/**\n * @internal\n */\nexport const ElementIdClass__NS = (/*#__PURE*/ new NamespaceDef(\n    'https://wesib.github.io/ns/element-id-class',\n    'elic',\n    'element-id-class',\n));\n\n/**\n * @internal\n */\nexport const ElementIdClass: SingleContextRef<ElementIdClass> =\n    (/*#__PURE__*/ new SingleContextKey('unique-element-class', { byDefault: assignElementId }));\n\nlet uniqueClassSeq = 0;\n\nfunction assignElementId(contextValues: ContextValues): ElementIdClass {\n\n  const aliaser = contextValues.get(DefaultNamespaceAliaser);\n  const context = contextValues.get(ComponentContext);\n  const elementDef = context.get(ElementDef);\n  const name: string = elementDef.name ? html__naming.name(elementDef.name, aliaser) : 'component';\n  const local = `${name}#${++uniqueClassSeq}`;\n  const qualified = ElementIdClass__NS.name(aliaser(ElementIdClass__NS), local, css__naming);\n  const element = context.element as Element;\n\n  element.classList.add(qualified);\n\n  return qualified;\n}\n","import {\n  ArraySet,\n  BootstrapWindow,\n  ComponentContext,\n  DefaultNamespaceAliaser,\n  RenderScheduler,\n  ShadowContentRoot,\n} from '@wesib/wesib';\nimport { ContextKey, ContextKey__symbol, SingleContextKey } from 'context-values';\nimport { EventSupply } from 'fun-events';\nimport {\n  produceBasicStyle,\n  StypPureSelector,\n  StypRender,\n  StypRules,\n  stypSelector,\n  StypSelector,\n  StypSubSelector,\n} from 'style-producer';\nimport { ComponentStypOptions } from './component-styp-options';\nimport { ComponentStypRender } from './component-styp-render';\nimport { ElementIdClass } from './element-id-class.impl';\n\nconst ComponentStyleProducer__key =\n    (/*#__PURE__*/ new SingleContextKey<ComponentStyleProducer>('component-style-producer:impl'));\n\n/**\n * @internal\n */\nexport class ComponentStyleProducer {\n\n  static get [ContextKey__symbol](): ContextKey<ComponentStyleProducer> {\n    return ComponentStyleProducer__key;\n  }\n\n  constructor(\n      private readonly _context: ComponentContext,\n      private readonly _produce = produceBasicStyle,\n  ) {}\n\n  produce(rules: StypRules, options: ComponentStypOptions = {}): EventSupply {\n\n    const context = this._context;\n    const shadowRoot = context.get(ShadowContentRoot, { or: null });\n\n    return this._produce(rules, {\n      ...options,\n      document: options.document || context.get(BootstrapWindow).document,\n      parent: options.parent || context.contentRoot,\n      rootSelector: [],\n      schedule: options.schedule || buildScheduler(),\n      nsAlias: options.nsAlias || context.get(DefaultNamespaceAliaser),\n      render: buildRender(),\n    });\n\n    function buildScheduler(): (operation: () => void) => void {\n\n      const scheduler = context.get(RenderScheduler);\n\n      return operation => scheduler.newSchedule().schedule(operation);\n    }\n\n    function buildRender(): StypRender | readonly StypRender[] | undefined {\n\n      const { render } = options;\n      const renders = new ArraySet<StypRender>(render)\n          .add(...context.get(ComponentStypRender));\n      const hostSelector =\n          options.hostSelector ? stypSelector(options.hostSelector)[0] as StypPureSelector.NormalizedPart : undefined;\n\n      renders.add(shadowRoot\n          ? shadowRender(hostSelector)\n          : noShadowRender(hostSelector || { c: [context.get(ElementIdClass)] }));\n\n      return renders.value;\n    }\n  }\n\n}\n\nfunction shadowRender(hostSelector: StypPureSelector.NormalizedPart | undefined): StypRender {\n  return {\n    order: -100,\n    render(producer, properties) {\n\n      let { selector } = producer;\n\n      if (!selector.length) {\n        selector = [hostSelector || { u: [[':', 'host']] }];\n      } else if (hostSelector) {\n\n        const [rest, host] = extractHostSelector(selector);\n\n        if (host) {\n          if (host.length) {\n            selector = [{ u: [[':', 'host', extendHostSelector(host, hostSelector)]] }, ...rest];\n          } else {\n            selector = [{ u: [[':', 'host', [hostSelector]]] }, ...rest];\n          }\n        }\n      }\n\n      producer.render(properties, { selector });\n    },\n  };\n}\n\nfunction noShadowRender(hostSelector: StypPureSelector.NormalizedPart): StypRender {\n  return {\n    order: -100,\n    render(producer, properties) {\n\n      let { selector } = producer;\n\n      if (!selector.length) {\n        selector = [hostSelector];\n      } else {\n\n        const [rest, host] = extractHostSelector(selector);\n\n        if (host && host.length) {\n          selector = [...extendHostSelector(host, hostSelector), ...rest];\n        } else {\n          selector = [hostSelector, ...rest];\n        }\n      }\n\n      producer.render(properties, { selector });\n    },\n  };\n}\n\nfunction extractHostSelector(\n    selector: StypSelector.Normalized,\n): [StypSelector.Normalized, StypSelector.Normalized?] {\n  if (typeof selector[0] !== 'string') {\n\n    const [{ ns, e, i, c, u, s, $ }, ...restParts] = selector;\n\n    if (!ns && !e && !i && !c && !s && u) {\n\n      const [[prefix, name, ...params]] = u;\n\n      if (prefix === ':' && name === 'host') {\n\n        let host: StypSelector.Mutable;\n\n        if (params.length) {\n          host = [ ...params[0] as StypSubSelector.NormalizedParameter ];\n          (host[0] as any).$ = $;\n        } else {\n          host = $ ? [{ $ }] : [];\n        }\n\n        return [restParts, host];\n      }\n    }\n  }\n  return [selector];\n}\n\nfunction extendHostSelector(\n    selector: StypSelector.Normalized,\n    {\n      ns,\n      e,\n      i,\n      c,\n      u,\n      s,\n    }: StypPureSelector.NormalizedPart,\n): StypSelector.Normalized {\n\n  const [first, ...rest] = selector as [StypSelector.NormalizedPart, ...StypSelector.Normalized];\n\n  return [\n    {\n      ns: first.e || first.ns ? first.ns : ns,\n      e: first.e || first.ns ? first.e : e,\n      i: first.i || i,\n      c: first.c ? (c ? [...first.c, ...c] : first.c) as typeof c : c,\n      u: first.u ? (u ? [...first.u, ...u] : first.u) as typeof u : u,\n      s: ((first.s || '') + (s || '')) || undefined,\n      $: first.$,\n    },\n    ...rest,\n  ];\n}\n","/**\n * @module @wesib/generic\n */\nimport { FeatureDef, FeatureDef__symbol, RenderSupport } from '@wesib/wesib';\nimport { ComponentStyleProducer } from './component-style-producer';\nimport { ComponentStyleProducer as ComponentStyleProducer_ } from './component-style-producer.impl';\n\nconst BasicStyleProducerSupport__feature: FeatureDef = {\n  needs: RenderSupport,\n  setup(setup) {\n    setup.perComponent({ as: ComponentStyleProducer_ });\n    setup.perComponent({\n      a: ComponentStyleProducer,\n      by(producer: ComponentStyleProducer_): ComponentStyleProducer {\n        return (rules, opts) => producer.produce(rules, opts);\n      },\n      with: [ComponentStyleProducer_],\n    });\n  },\n};\n\n/**\n * Basic style producer support feature.\n *\n * Depends on [style-producer].\n *\n * Unlike [[StyleProducerSupport]] feature this one does not enable default CSS renders.\n *\n * It is enabled automatically by {@link ProduceStyle @ProduceStyle} decorator.\n *\n * [style-producer]: https://www.npmjs.com/package/style-producer\n */\nexport class BasicStyleProducerSupport {\n\n  static get [FeatureDef__symbol]() {\n    return BasicStyleProducerSupport__feature;\n  }\n\n}\n","/**\n * @module @wesib/generic\n */\nimport { ComponentContext } from '@wesib/wesib';\nimport { noop } from 'call-thru';\nimport { eventSupply, EventSupply, noEventSupply } from 'fun-events';\nimport { lazyStypRules, StypOptions, StypPureSelector, StypRules } from 'style-producer';\nimport { ComponentStyleProducer } from './component-style-producer';\n\n/**\n * Component CSS styles production options.\n */\nexport interface ComponentStypOptions extends StypOptions {\n\n  /**\n   * Structured CSS selector to use for custom element's host.\n   *\n   * It modifies the selectors of produced CSS rules.\n   *\n   * For custom element with shadow root:\n   * - Replaces root CSS rule selector with `:host(<hostSelector>).\n   * - When `hostSelector` is omitted, then replaces root CSS rule selector with `:host`.\n   * - If CSS rule selector starts with `:host`, then replaces `:host` with `:host(<hostSelector>)`\n   * - If CSS rule selector starts with `:host(<selector>)`, then extends `<selector>` by `hostSelector`.\n   *   I.e. appends CSS classes and sub-selectors to it, and fulfills missing element and identifier selectors.\n   *\n   * For custom element without shadow root either uses provided `hostSelector`, or generates a unique one when omitted.\n   * And additionally:\n   * - Replaces root CSS rule selector it with `hostSelector`.\n   * - If CSS rule selector starts with `:host`, then replaces `:host` with `hostSelector`.\n   * - If CSS rule selector starts with `:host(<selector>), then replaces `:host(<selector>)` with `<selector>` extended\n   *   by `hostSelector`. I.e. appends CSS classes and sub-selectors to it, and fulfills missing element and identifier\n   *   selectors.\n   * - Otherwise prepends CSS rule selector with `hostSelector`.\n   *\n   * This selector should not contain a `:host` sub-selector.\n   */\n  hostSelector?: StypPureSelector.Part | string;\n\n  /**\n   * Root CSS selector is never used for custom elements. A `hostSelector` is applied instead.\n   */\n  rootSelector?: undefined;\n\n  /**\n   * Whether to produce CSS stylesheets while component is not connected.\n   *\n   * Can be one of:\n   * - `true` - to produce stylesheets when first connected and update them even if component is disconnected after\n   *   that. This is the default, as stylesheet updates is expected to be rare operation.\n   * - `false` - to produce stylesheet whenever component is connected and remove them once disconnected.\n   *   This is a good choice if stylesheets are small and updated frequently.\n   * - `always` - to produce stylesheets immediately upon component readiness and update them offline after that.\n   *   This is the right choice if component needs a stylesheet ready before it is added to the document.\n   */\n  offline?: boolean | 'always';\n\n}\n\nexport const ComponentStypOptions = {\n\n  /**\n   * Produces and dynamically updates component's CSS stylesheets based on the given CSS rules.\n   *\n   * @param context  Target component context.\n   * @param rules  A source of CSS rules to produce stylesheets for.\n   * @param options  Production options.\n   *\n   * @returns CSS rules supply. Once cut off the produced stylesheets are removed.\n   */\n  produce(\n      context: ComponentContext,\n      rules: StypRules.Source,\n      options?: ComponentStypOptions,\n  ): EventSupply {\n\n    const css = lazyStypRules(rules);\n    const offline = options && options.offline;\n    const produceStyle = context.get(ComponentStyleProducer);\n\n    let cssSupply = noEventSupply();\n    let doProduceStyle: () => void;\n    const supply = eventSupply(reason => {\n      doProduceStyle = noop;\n      cssSupply.off(reason);\n    });\n\n    doProduceStyle = () => {\n      cssSupply = produceStyle(css, options).needs(supply);\n    };\n\n    switch (offline) {\n    case 'always':\n      context.whenReady(doProduceStyle);\n      break;\n    case false:\n      context.whenOn(connectionSupply => {\n        doProduceStyle();\n        cssSupply.needs(connectionSupply);\n      });\n      break;\n    default:\n      context.whenOn.once(doProduceStyle);\n    }\n\n    context.whenDestroyed(reason => supply.off(reason));\n\n    return supply;\n  },\n\n};\n","/**\n * @module @wesib/generic\n */\nimport { ComponentClass, ComponentDef } from '@wesib/wesib';\nimport { StypRules } from 'style-producer';\nimport { BasicStyleProducerSupport } from './basic-style-producer-support.feature';\nimport { ComponentStypOptions } from './component-styp-options';\n\n/**\n * A decorator of component property returning CSS rules to produce.\n *\n * Decorated property value should either contain a CSS rules source of type `StypRules.Source` or be a method\n * returning it.\n *\n * This decorator automatically enables [[BasicStyleProducerSupport]] feature.\n *\n * Utilizes [[ComponentStypOptions.produce]] function to produce CSS stylesheets.\n *\n * @typeparam T  A type of decorated component class.\n * @param options  Non-mandatory CSS style production options.\n *\n * @returns Component property decorator.\n */\nexport function ProduceStyle<T extends ComponentClass>(\n    options?: ComponentStypOptions,\n): <V extends StypRules.Source | (() => StypRules.Source)>(\n    target: InstanceType<T>,\n    propertyKey: string | symbol,\n    descriptor?: TypedPropertyDescriptor<V>,\n) => any | void {\n  return (target: InstanceType<T>, propertyKey: string | symbol) => {\n\n    const componentType = target.constructor as T;\n\n    ComponentDef.define(\n        componentType,\n        {\n          setup(defContext) {\n            defContext.whenComponent(componentContext => {\n              componentContext.whenReady(({ component }) => {\n\n                const property = component[propertyKey];\n\n                ComponentStypOptions.produce(\n                    componentContext,\n                    typeof property === 'function' ? property.bind(component) : property,\n                    options,\n                );\n              });\n            });\n          },\n          feature: {\n            needs: [BasicStyleProducerSupport],\n          },\n        },\n    );\n  };\n}\n","/**\n * @module @wesib/generic\n */\nimport { ComponentContext, FeatureDef, FeatureDef__symbol, RenderSupport } from '@wesib/wesib';\nimport { produceStyle } from 'style-producer';\nimport { BasicStyleProducerSupport } from './basic-style-producer-support.feature';\nimport { ComponentStyleProducer } from './component-style-producer';\nimport { ComponentStyleProducer as ComponentStyleProducer_ } from './component-style-producer.impl';\n\nconst StyleProducerSupport__feature: FeatureDef = {\n  has: BasicStyleProducerSupport,\n  needs: RenderSupport,\n  setup(setup) {\n    setup.perComponent({\n      a: ComponentStyleProducer_,\n      by(context: ComponentContext) {\n        return new ComponentStyleProducer_(context, produceStyle);\n      },\n    });\n    setup.perComponent({\n      a: ComponentStyleProducer,\n      by(producer: ComponentStyleProducer_): ComponentStyleProducer {\n        return (rules, opts) => producer.produce(rules, opts);\n      },\n      with: [ComponentStyleProducer_],\n    });\n  },\n};\n\n/**\n * Style producer support feature.\n *\n * Depends on [style-producer].\n *\n * This is an implementation of [[BasicStyleProducerSupport]] feature that enables default CSS renders.\n *\n * It is _not_ enabled automatically by {@link ProduceStyle @ProduceStyle} decorator.\n *\n * [style-producer]: https://www.npmjs.com/package/style-producer\n */\nexport class StyleProducerSupport {\n\n  static get [FeatureDef__symbol]() {\n    return StyleProducerSupport__feature;\n  }\n\n}\n","/**\n * @module @wesib/generic\n */\nimport { ContextKey, ContextKey__symbol, SingleContextKey } from 'context-values';\nimport { RefStypRule, StypProperties, StypRule, StypRuleRef, StypRules } from 'style-producer';\nimport { ThemeStyle } from './theme-style';\n\nconst Theme__key = new SingleContextKey<Theme>('theme');\n\n/**\n * A hierarchy of CSS rules within single root.\n *\n * A component may use it to extract styling information.\n *\n * Current theme is available in bootstrap, definition, or component context. By default, only one theme is declared\n * per bootstrap. But this can be overridden.\n */\nexport abstract class Theme {\n\n  /**\n   * A key of bootstrap, definition, or component context value containing current theme instance.\n   */\n  static get [ContextKey__symbol](): ContextKey<Theme> {\n    return Theme__key;\n  }\n\n  /**\n   * Root CSS rule.\n   *\n   * All theme styling is represented as rules within this root.\n   */\n  abstract readonly root: StypRule;\n\n  /**\n   * Obtains CSS rule reference by its `referrer`.\n   *\n   * This is a helper method that resolves the given `referrer` against the `root` CSS rule of this theme.\n   *\n   * @param referrer  Target CSS rule referrer.\n   *\n   * @returns CSS rule reference.\n   */\n  ref<T extends StypProperties<T>>(referrer: RefStypRule<T>): StypRuleRef<T> {\n    return referrer(this.root);\n  }\n\n  /**\n   * Obtains a styling for the given theme styles.\n   *\n   * This method requests the registered {@link ThemeStyle theme styles} for CSS rules they provide.\n   * If some of the styles are not registered then uses the given style as provider.\n   *\n   * @param styles  The styles to obtain styling information for.\n   *\n   * @returns Dynamically updated CSS rule set containing the requested styling.\n   */\n  abstract style(...styles: ThemeStyle.Provider[]): StypRules;\n\n}\n","/**\n * @module @wesib/generic\n */\nimport { ContextKey, ContextKey__symbol, SingleContextKey } from 'context-values';\nimport { Theme } from './theme';\n\nconst ThemeFactory__key = new SingleContextKey<ThemeFactory>('theme-factory');\n\nexport abstract class ThemeFactory {\n\n  static get [ContextKey__symbol](): ContextKey<ThemeFactory> {\n    return ThemeFactory__key;\n  }\n\n  abstract newTheme(): Theme;\n\n}\n","/**\n * @module @wesib/generic\n */\nimport { AIterable } from 'a-iterable';\nimport { ContextRef, ContextValueOpts, ContextValues, SimpleContextKey } from 'context-values';\nimport { stypRules, StypRules } from 'style-producer';\nimport { Theme } from './theme';\n\n/**\n * Theme style provides part of the theme styling information.\n *\n * Theme style(s) can be provided in bootstrap context. They are applied to the theme at most once, when requested\n * by calling [[Theme.style]] method.\n *\n * Theme style is either a function, or an extension of another theme style.\n */\nexport type ThemeStyle = ThemeStyle.Provider | ThemeStyle.Extension;\n\nexport namespace ThemeStyle {\n\n  /**\n   * Theme style provider function.\n   *\n   * This function is called at most once per theme to apply styles to the latter. E.g. by declaring CSS rules.\n   *\n   * This function is used as an identifier of particular style and can be extended using [[ThemeStyle.Extension]].\n   *\n   * It is not absolutely necessary to register style provider. It will be applied on request anyway.\n   *\n   * @param theme  A theme to apply styling to.\n   *\n   * @returns Dynamically updated CSS rule set containing the applied styling.\n   */\n  export type Provider = (this: void, theme: Theme) => StypRules;\n\n  /**\n   * Theme style extension.\n   *\n   * An extension should be registered in bootstrap context in order to be applied.\n   */\n  export interface Extension {\n\n    /**\n     * A theme style provider to extend.\n     */\n    readonly style: ThemeStyle.Provider;\n\n    /**\n     * Extends the theme style.\n     *\n     * This method is called at most once per theme to apply styles to the latter. E.g. by declaring CSS rules.\n     *\n     * It will be called after the style provider it extends.\n     *\n     * @param theme  A theme to apply styling to.\n     *\n     * @returns Dynamically updated CSS rule set containing the applied styling.\n     */\n    provide(theme: Theme): StypRules;\n\n  }\n\n  /**\n   * A function obtaining combined style provider. I.e. the one that applies the style along with all extensions.\n   *\n   * @param A  provider of theme style to apply.\n   *\n   * @returns A combined theme style provider.\n   */\n  export type ById = (this: void, style: ThemeStyle.Provider) => ThemeStyle.Provider;\n\n}\n\nclass ThemeStyleKey extends SimpleContextKey<ThemeStyle.ById, ThemeStyle> {\n\n  constructor() {\n    super('theme-style');\n  }\n\n  grow<Ctx extends ContextValues>(\n      opts: ContextValueOpts<Ctx, ThemeStyle.ById, ThemeStyle, AIterable<ThemeStyle>>,\n  ): ThemeStyle.ById | null | undefined {\n\n    const providers = new Map<ThemeStyle.Provider, [ThemeStyle.Provider, boolean]>();\n\n    opts.seed.forEach(style => {\n\n      let key: ThemeStyle.Provider;\n      let provider: ThemeStyle.Provider;\n      let isId: boolean;\n\n      if (typeof style === 'function') {\n        key = provider = style;\n        isId = true;\n      } else {\n        key = style.style;\n        provider = style.provide.bind(style);\n        isId = false;\n      }\n\n      const prev = providers.get(key);\n\n      if (!prev) {\n        providers.set(key, [provider, isId]);\n      } else {\n\n        const [prevProvider, hasId] = prev;\n\n        providers.set(\n            key,\n            [\n              isId ? combineStyles(provider, prevProvider) : combineStyles(prevProvider, provider),\n              isId || hasId,\n            ],\n        );\n      }\n    });\n\n    return providers.size ? byId : opts.byDefault(() => byId);\n\n    function byId(id: ThemeStyle.Provider): ThemeStyle.Provider {\n\n      const existing = providers.get(id);\n\n      if (!existing) {\n        return id;\n      }\n\n      const [provider, hasId] = existing;\n\n      return hasId ? provider : combineStyles(id, provider);\n    }\n  }\n\n}\n\n/**\n * A key of bootstrap context value containing theme styles.\n */\nexport const ThemeStyle: ContextRef<ThemeStyle.ById, ThemeStyle> = new ThemeStyleKey();\n\nfunction combineStyles(first: ThemeStyle.Provider, second: ThemeStyle.Provider): ThemeStyle.Provider {\n  return theme => stypRules(first(theme), second(theme));\n}\n","import { lazyStypRules, stypRoot, StypRule, StypRules } from 'style-producer';\nimport { Theme as Theme_ } from './theme';\nimport { ThemeStyle } from './theme-style';\n\n/**\n * @internal\n */\nexport class Theme extends Theme_ {\n\n  readonly root: StypRule = stypRoot();\n  private readonly _rules = new Map<ThemeStyle.Provider, StypRules>();\n\n  constructor(private readonly _styles: ThemeStyle.ById) {\n    super();\n  }\n\n  style(...styles: ThemeStyle.Provider[]): StypRules {\n\n    const theme = this;\n\n    return lazyStypRules(...styles.reduce<StypRules[]>(addStyleRules, []));\n\n    function addStyleRules(target: StypRules[], style: ThemeStyle.Provider) {\n\n      const existing = theme._rules.get(style);\n\n      if (existing) {\n        target.push(existing);\n      } else {\n\n        const constructed = theme._styles(style)(theme);\n\n        theme._rules.set(style, constructed);\n        target.push(constructed);\n      }\n\n      return target;\n    }\n  }\n\n}\n","import { ThemeFactory as ThemeFactory_ } from './theme-factory';\nimport { ThemeStyle } from './theme-style';\nimport { Theme } from './theme.impl';\n\n/**\n * @internal\n */\nexport class ThemeFactory extends ThemeFactory_ {\n\n  constructor(private readonly _styles: ThemeStyle.ById) {\n    super();\n  }\n\n  newTheme() {\n    return new Theme(this._styles);\n  }\n\n}\n","/**\n * @module @wesib/generic\n */\nimport { FeatureDef, FeatureDef__symbol } from '@wesib/wesib';\nimport { BasicStyleProducerSupport } from '../styp';\nimport { Theme } from './theme';\nimport { ThemeFactory } from './theme-factory';\nimport { ThemeFactory as ThemeFactory_ } from './theme-factory.impl';\nimport { ThemeStyle } from './theme-style';\n\nconst ThemeSupport__feature: FeatureDef = {\n  needs: BasicStyleProducerSupport,\n  setup(setup) {\n    setup.provide({ a: ThemeFactory, as: ThemeFactory_, with: [ThemeStyle] });\n    setup.provide({\n      a: Theme,\n      by(factory: ThemeFactory) {\n        return factory.newTheme();\n      },\n      with: [ThemeFactory],\n    });\n  },\n};\n\n/**\n * Theme support feature.\n *\n * This needs to be enabled in order [[Theme]] and [[ThemeFactory]] to be available.\n */\nexport class ThemeSupport {\n\n  static get [FeatureDef__symbol](): FeatureDef {\n    return ThemeSupport__feature;\n  }\n\n}\n"],"names":["BootstrapContext__key","SingleContextKey","BootstrapContext","ContextValues","ContextKey__symbol","bootstrapDefault","provide","context","key","bootstrapContext","get","ComponentFactory__key","ComponentFactory","[object Object]","element","mount","this","mountTo","connected","BootstrapWindow","byDefault","window","BootstrapRoot","ctx","document","body","DefaultNamespaceAliaser","isArray","value","Array","ArraySet","AIterable","super","items","Set","size","Symbol","iterator","next","forEach","item","add","superClassOf","type","satisfying","prototype","Object","getPrototypeOf","superType","constructor","mergeFunctions","first","second","merge","_f","s","args","apply","isElement","node","nodeType","Node","ELEMENT_NODE","MetaAccessor","symbol","hasOwnProperty","undefined","ownDef","own","superDef","of","sources","prevMeta","updates","mapIt","source","meta","newMeta","flatMapIt","asis","defineProperty","configurable","PromiseResolver","promise","Promise","resolve","reject","_resolve","_reject","error","FeatureDef__symbol","FeatureMeta","defs","itsReduction","prev","def","needs","has","setup","init","noFeatureDef","FeatureDef","featureType","for","all","define","Feature","FeatureContext_key","FeatureContext","componentType","whenDefined","feature","load","FeatureNeedsError","Error","reduce","reason","need","name","ComponentDef__symbol","ComponentMeta","isQualifiedName","componentDefined","noComponentDef","ComponentDef","featureDef","registrar","Component","ComponentContext__key","ComponentEventDispatcher__key","dispatch","event","dispatchEvent","on","DomEventDispatcher","ContentRoot","StateUpdater","FnContextKey","valueProvider","noop","ComponentContext__symbol","ComponentContext","updateComponentState","bind","TypeError","contentRoot","newValue","oldValue","ComponentEvent","Event","eventInitDict","target","ElementAdapterKey","ContextUpKey","opts","defaultElementAdapter","result","seed","adapters","combined","adapter","ElementAdapter","ElementObserver","bsContext","DefaultElementObserver","MutationObserver","callback","mutations","mutation","itsEach","overArray","removedNodes","mountOf","checkConnected","filterIt","addedNodes","options","observe","childList","ComponentFactory__symbol","componentFactoryOf","factory","CustomElements__key","values","customElements","nsAlias","CustomElements","componentTypeOrName","elementType","html__naming","extend","elementDef","extends","componentResolver","ComponentResolver__symbol","DefinitionContext__key","ElementDef","elementExtend","HTMLElement","DefinitionContext","BootstrapContextRegistry__key","BootstrapContextRegistry","ContextRegistry","a","is","newValues","ComponentContextRegistry__key","ComponentContextRegistry","initial","DefinitionContextRegistry__key","DefinitionContextRegistry","PostDefSetup__symbol","postDefSetup","tracker","trackValue","emitter","EventEmitter","onSetup","read","thru","nextArgs","nextSkip","onAny","superPostDefSetup","send","it","WhenComponent","currentRev","created","onCreated","onEventBy","receiver","receiverRev","supply","receive","eventContext","componentContext","notifiedRev","recurrentReceiver","onRecurrent","recurrentContext","readNotifier","keep","thru_","rev","ElementBuilder","definitionContextRegistry_global","componentContextRegistry_global","definitions","components","whenComponent","componentContextRegistry_perType","ready","whenReady","cls","definitionContext","createComponentContextRegistry","append","componentFactory","ComponentFactory_","createComponent","registry","elementSuper","createMount","component","elementStatus","el","doc","ownerDocument","contains","componentCreated","DefinitionContext_","once","definitionContextRegistry","seedIn","definitionSetup","perDefinition","spec","perComponent","componentContextRegistry","Element","createElementType","enumerable","status","destructionReason","whenOff","whenDestroyed","sts","whenOn","offSupply","eventSupply","off","ComponentContext_","done","lastRev","parentNode","parentElement","removeChild","removeElement","ComponentStatus__symbol","writable","notifier","_","proto","prevContext","newComponent","bubbles","doNotAdd","ComponentRegistry","_context","_definitionQueue","definition","push","buildElement","FeatureKey__symbol","FeatureKey","from","preferredFeatureClause","afterEventBy","origin","afterThe","stageId","afterAll","clause","deps","loadFeatureDeps","dig_","request","loader","to","stage","ownLoader","FeatureLoader","ownSource","rcv","unload","share","lastLoader","preventDuplicateLoader","clauses","preferred","required","afterEach","map","dep","presentFeatureDeps","isPresent","down","_down","_stage","SetupFeatureStage","then","after","state","lastStage","id","prevStage","stop","FeatureStage","_stop","action","perDep","unloader","unloads","adder","reverse","length","newUnloader","componentRegistry","elementBuilder","onDefinition","tillOff","onComponent","st","bs","by","onPostDefSetup","newFeatureContext","InitFeatureStage","async","ActiveFeatureStage","FeatureRequest","_requester","_revoke","requester","isClause","_revokeBy","unuse","_uses","revoke","FeatureRequester__key","FeatureRequester","Map","existing","_map","reuse","delete","set","bootstrapComponents","features","bootstrapContextRegistry","create","complete","newNamespaceAliaser","info","_ctx","ldr","whenDown","AfterEvent__symbol","initBootstrap","AttributePath__root","attributeStateUpdate","updateState","attributePathTo","update","defaultUpdateState","call","path","parseAttributeDef","propertyKey","toString","AttributeRegistrar","AttributeRegistry__key","AttributeRegistry","_MutationObserver","_attrs","attrs","observedAttributes","keys","attributeFilter","records","record","attributeName","getAttribute","attributes","attributeOldValue","AttributesSupport__feature","as","with","AttributesSupport","Attribute","descriptor","newDesc","setAttribute","AttributeChanged","defContext","DomPropertyPath__root","ComponentState__key","ComponentState","StateTracker","StateSupport__feature","StateSupport","RenderScheduler__key","RenderScheduler","ElementRender","render","offline","stateTracker","track","schedule","newSchedule","rendered","stateSupply","onUpdate","scheduleRender","renderElement","newRender","RenderSupport__feature","RenderScheduler_","createRenderScheduler","RenderSupport","scheduled","previouslyScheduled","requestAnimationFrame","Render","ShadowContentRoot","ShadowDomEvent","shadowRoot","ShadowRootBuilder","ShadowDomSupport__feature","attachShadow","ShadowDomSupport","shadowRootOf","defaultShadowContentDef","mode","ShadowContentDef","componentDef","or","AttachShadow","FetchAgentKey","agent","agents","fetch","agentIdx","agentRequest","onSupplied","nextRequest","combineFetchAgents","defaultFetchAgent","HttpFetchAgent","HttpFetchAborted","HttpFetch","input","Request","responseEmitter","abortController","AbortController","signal","abort","response","customSignal","aborted","catch","HierarchyRoot","root","HierarchyUpdates","issue","HierarchyUpdates__key","hierarchyRoot","parent","findParentContext","immediate","HierarchyContext__key","up","parentHierarchy","rootSupply","parentSupply","updateParent","parentCtx","HierarchyContext","consume","newParent","onSupply","dig","upper","newHierarchyRegistry","newHierarchyContext","ComponentNode","ElementNodeList","OnEvent__symbol","WATCH_DEEP","subtree","elementNodeList","selectorOrType","nodeOf","deep","iterable","selector","cache","selected","refresh","added","observer","removed","removeNode","addNode","nodeList","firstReceiver","disconnect","onTrackUpdate","initialEmitter","afterSupplied","itsFirst","addEventListener","ElementNodeList_","itsIterator","sel","querySelectorAll","children","matches","select","AttributesObserver","_bs","_observer","Observer","_update","self","_emitter","eventReceiver","_emitters","reconnect","takeRecords","AttributeTracker","ValueTracker","_name","observeSupply","noEventSupply","_updates","NodeAttributes","PropertyTracker","_element","_key","propertyState","_supply","_path","NodeProperties","_props","prop","ElementNode__symbol","ElementNode","_bind","elementNodeOf","optional","selectNodes","ComponentTreeSupport__feature","ComponentTreeSupport","InputFromControl","SingleContextUpKey","inputFromControl","control","inputValidity","inputReceiver","aspect","InValidation","inValidationResult","EnterPageEvent","cancelable","when","LeavePageEvent","StayOnPageEvent","Navigation__key","Navigation","go","NavigationAgentKey","combinedAgent","navigate","agentTo","url","nextURL","title","nextTitle","data","nextData","URL","String","baseURI","visited","current","ref","put","NavigationAgent","PageParam__symbol","PageParam","PageParamContext","RoutingHistory__key","NavHistory","_document","_location","location","_history","history","_uid","btoa","Math","random","extractNavData","entry","newEntry","href","_entries","enter","replaceState","_historyState","PageEntry","_lastId","toEntry","page","pushState","_enter","fromEntry","e","_forget","leave","popState","_changeHash","uid","pageId","existingEntry","transfer","oldEntry","forget","NAV_DATA_KEY","_params","_status","handle","param","newHandle","entries","transferred","at","stay","clear","createNavigation","dispatcher","navHistory","onEnter","onLeave","onStay","onEvent","nav","nextEntry","readPage","hashChange","Navigation_","delta","toURL","withParam","applyParams","open","replace","whenLeave","urlTarget","urlTargetOf","doNavigate","prepared","leavePage","finalTarget","t","prepare","NavigationSupport__feature","cachingPageLoader","pageUrl","sup","tracked","onLoad","trackSupply","resp","num","requested","PageLoadAbortError","PageLoadRequests","_navigation","_loader","fragments","fragment","pageSupply","loadSupply","_add","_transfer","pageLoadRequestsParam","responseReceiver","ok","tag","getElementsByTagName","getElementById","onFragment","req","list","_page","requests","PageLoadAgent","PageLoadURLModifier","PageLoader","httpFetch","modifyURL","parser","DOMParser","credentials","headers","Headers","Accept","fetchRequest","Accept-Fragment","header","hthvQuote","pageFragmentsRequest","responseTextEmitter","onResponse","text","parsePageDocument","start","responseSupply","parseFromString","hthvParse","v","head","base","querySelector","newBase","createElement","appendChild","PageLoadParam","pageLoadParam","PageCacheBuster__key","PageCacheBuster","appRev","navigation","urlModifier","searchParams","newRev","reload","importNode","beforeOrImport","importContent","importNodeContent","before","elementClone","tagName","toLowerCase","getAttributeNames","attr","insertBefore","nodeClone","childNodes","pageScriptsAgent","allScripts","externalScripts","scripts","src","script","_from","pageStyleAgent","newStyles","oldStyles","oldStylesByHref","firstOldStyle","link","newStyle","oldStyle","nextSibling","style","pageTitleAgent","textContent","PageLoadSupport__feature","buster","PageLoadSupport","ComponentStyleProducer","ComponentStypRender","MultiContextKey","ElementIdClass__NS","NamespaceDef","ElementIdClass","contextValues","aliaser","local","uniqueClassSeq","qualified","css__naming","classList","ComponentStyleProducer__key","_produce","produceBasicStyle","rules","rootSelector","scheduler","operation","buildScheduler","renders","hostSelector","stypSelector","shadowRender","noShadowRender","c","buildRender","order","producer","properties","rest","host","extractHostSelector","u","extendHostSelector","ns","i","$","restParts","prefix","params","BasicStyleProducerSupport__feature","ComponentStyleProducer_","produce","BasicStyleProducerSupport","ComponentStypOptions","css","lazyStypRules","produceStyle","doProduceStyle","cssSupply","connectionSupply","ProduceStyle","property","StyleProducerSupport__feature","StyleProducerSupport","Theme__key","Theme","referrer","ThemeFactory__key","ThemeFactory","ThemeStyle","SimpleContextKey","providers","provider","isId","prevProvider","hasId","combineStyles","byId","theme","stypRules","Theme_","_styles","stypRoot","styles","_rules","constructed","ThemeFactory_","ThemeSupport__feature","newTheme","ThemeSupport"],"mappings":"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"}