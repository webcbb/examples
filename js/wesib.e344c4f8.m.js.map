{"version":3,"file":"wesib.e344c4f8.m.js","sources":["../../node_modules/@wesib/wesib/src/boot/bootstrap-context.key.impl.ts","../../node_modules/@wesib/wesib/src/boot/bootstrap-context.ts","../../node_modules/@wesib/wesib/src/boot/bootstrap-default.ts","../../node_modules/@wesib/wesib/src/component/definition/component-factory.ts","../../node_modules/@wesib/wesib/src/boot/globals/bootstrap-window.ts","../../node_modules/@wesib/wesib/src/boot/globals/bootstrap-root.ts","../../node_modules/@wesib/wesib/src/boot/globals/default-namespace-aliaser.ts","../../node_modules/@wesib/wesib/src/boot/globals/default-render-scheduler.ts","../../node_modules/@wesib/wesib/src/common/types.impl.ts","../../node_modules/@wesib/wesib/src/common/array-set.ts","../../node_modules/@wesib/wesib/src/common/classes.ts","../../node_modules/@wesib/wesib/src/common/functions.ts","../../node_modules/@wesib/wesib/src/common/is-element.ts","../../node_modules/@wesib/wesib/src/common/meta-accessor.ts","../../node_modules/@wesib/wesib/src/common/promises.ts","../../node_modules/@wesib/wesib/src/feature/feature-def.ts","../../node_modules/@wesib/wesib/src/feature/feature.decorator.ts","../../node_modules/@wesib/wesib/src/feature/feature-context.ts","../../node_modules/@wesib/wesib/src/feature/feature-needs-error.ts","../../node_modules/@wesib/wesib/src/component/component-def.ts","../../node_modules/@wesib/wesib/src/component/component.decorator.ts","../../node_modules/@wesib/wesib/src/component/component-context.key.impl.ts","../../node_modules/@wesib/wesib/src/component/component-event.key.impl.ts","../../node_modules/@wesib/wesib/src/component/content-root.ts","../../node_modules/@wesib/wesib/src/component/state-updater.ts","../../node_modules/@wesib/wesib/src/component/component-context.ts","../../node_modules/@wesib/wesib/src/component/component-event.ts","../../node_modules/@wesib/wesib/src/boot/globals/element-adapter.ts","../../node_modules/@wesib/wesib/src/boot/globals/element-observer.ts","../../node_modules/@wesib/wesib/src/boot/impl/component-factory.symbol.impl.ts","../../node_modules/@wesib/wesib/src/component/definition/custom-elements.ts","../../node_modules/@wesib/wesib/src/component/definition/definition.context.key.impl.ts","../../node_modules/@wesib/wesib/src/component/definition/element-def.ts","../../node_modules/@wesib/wesib/src/component/definition/definition-context.ts","../../node_modules/@wesib/wesib/src/boot/impl/bootstrap-context-registry.impl.ts","../../node_modules/@wesib/wesib/src/boot/impl/component-context-registry.impl.ts","../../node_modules/@wesib/wesib/src/boot/impl/definition-context-registry.impl.ts","../../node_modules/@wesib/wesib/src/boot/impl/post-def-setup.impl.ts","../../node_modules/@wesib/wesib/src/boot/impl/when-component.impl.ts","../../node_modules/@wesib/wesib/src/boot/impl/element-builder.impl.ts","../../node_modules/@wesib/wesib/src/component/component-mount.ts","../../node_modules/@wesib/wesib/src/boot/impl/unloader.impl.ts","../../node_modules/@wesib/wesib/src/feature/loader/component-registry.impl.ts","../../node_modules/@wesib/wesib/src/feature/loader/feature-loader.impl.ts","../../node_modules/@wesib/wesib/src/feature/loader/feature-request.impl.ts","../../node_modules/@wesib/wesib/src/feature/loader/feature-requester.impl.ts","../../node_modules/@wesib/wesib/src/boot/bootstrap/bootstrap-components.ts","../../node_modules/@wesib/wesib/src/feature/feature-ref.ts","../../node_modules/@wesib/wesib/src/feature/attributes/attribute-path.ts","../../node_modules/@wesib/wesib/src/feature/attributes/attribute-state-update.impl.ts","../../node_modules/@wesib/wesib/src/feature/attributes/attribute-registrar.ts","../../node_modules/@wesib/wesib/src/feature/attributes/attribute-registry.impl.ts","../../node_modules/@wesib/wesib/src/feature/attributes/attributes-support.feature.ts","../../node_modules/@wesib/wesib/src/feature/attributes/attribute.decorator.ts","../../node_modules/@wesib/wesib/src/feature/attributes/attribute-def.impl.ts","../../node_modules/@wesib/wesib/src/feature/attributes/attributes.decorator.ts","../../node_modules/@wesib/wesib/src/feature/state/component-state.ts","../../node_modules/@wesib/wesib/src/feature/state/state-support.feature.ts","../../node_modules/@wesib/wesib/src/feature/attributes/track-attribute.ts","../../node_modules/@wesib/wesib/src/feature/dom-properties/dom-property-path.ts","../../node_modules/@wesib/wesib/src/feature/render/element-render.ts","../../node_modules/@wesib/wesib/src/feature/render/render.decorator.ts","../../node_modules/@wesib/wesib/src/feature/shadow-dom/shadow-content-root.ts","../../node_modules/@wesib/wesib/src/feature/shadow-dom/shadow-dom-event.ts","../../node_modules/@wesib/wesib/src/feature/shadow-dom/shadow-root-builder.ts","../../node_modules/@wesib/wesib/src/feature/shadow-dom/shadow-dom-support.feature.ts","../../node_modules/@wesib/wesib/src/feature/shadow-dom/attach-shadow.decorator.ts","../../node_modules/@wesib/wesib/src/wesib.ns.ts","../../node_modules/@wesib/generic/src/fetch/fetch-agent-key.impl.ts","../../node_modules/@wesib/generic/src/fetch/http-fetch-agent.ts","../../node_modules/@wesib/generic/src/fetch/http-fetch.impl.ts","../../node_modules/@wesib/generic/src/fetch/http-fetch.ts","../../node_modules/@wesib/generic/src/hierarchy/hierarchy-updates.impl.ts","../../node_modules/@wesib/generic/src/hierarchy/hierarchy-context.ts","../../node_modules/@wesib/generic/src/hierarchy/hierarchy-registry.impl.ts","../../node_modules/@wesib/generic/src/tree/element-node.ts","../../node_modules/@wesib/generic/src/tree/element-node-list.ts","../../node_modules/@wesib/generic/src/tree/element-node-list.impl.ts","../../node_modules/@wesib/generic/src/tree/node-attributes.impl.ts","../../node_modules/@wesib/generic/src/tree/node-properties.impl.ts","../../node_modules/@wesib/generic/src/tree/element-node.impl.ts","../../node_modules/@wesib/generic/src/tree/component-tree-support.feature.ts","../../node_modules/@wesib/generic/src/navigation/navigation.ts","../../node_modules/@wesib/generic/src/navigation/page-param.ts","../../node_modules/@wesib/generic/src/navigation/page-param-context.ts","../../node_modules/@wesib/generic/src/navigation/nav-history.impl.ts","../../node_modules/@wesib/generic/src/navigation/navigation-agent.ts","../../node_modules/@wesib/generic/src/navigation/navigation.event.ts","../../node_modules/@wesib/generic/src/navigation/navigation.impl.ts","../../node_modules/@wesib/generic/src/navigation/navigation-support.feature.ts","../../node_modules/@wesib/generic/src/navigation/activate-nav-link.decorator.ts","../../node_modules/@wesib/generic/src/navigation/handle-nav-links.decorator.ts","../../node_modules/@wesib/generic/src/util/import-node.ts","../../node_modules/@wesib/generic/src/navigation/page-load/caching-page-loader.impl.ts","../../node_modules/@wesib/generic/src/navigation/page-load/page-load-requests.impl.ts","../../node_modules/@wesib/generic/src/navigation/page-load/page-load-agent.ts","../../node_modules/@wesib/generic/src/navigation/page-load/page-load-url-modifier.ts","../../node_modules/@wesib/generic/src/navigation/page-load/page-loader.impl.ts","../../node_modules/@wesib/generic/src/navigation/page-load/page-load-param.ts","../../node_modules/@wesib/generic/src/navigation/page-load/page-cache-buster.impl.ts","../../node_modules/@wesib/generic/src/navigation/page-load/page-scripts-agent.impl.ts","../../node_modules/@wesib/generic/src/navigation/page-load/page-style-agent.impl.ts","../../node_modules/@wesib/generic/src/navigation/page-load/page-title-agent.impl.ts","../../node_modules/@wesib/generic/src/navigation/page-load/page-load-support.feature.ts","../../node_modules/@wesib/generic/src/navigation/page-load/include-page.decorator.ts","../../node_modules/@wesib/generic/src/styp/component-style-producer.ts","../../node_modules/@wesib/generic/src/styp/component-styp-render.ts","../../node_modules/@wesib/generic/src/styp/element-id-class.impl.ts","../../node_modules/@wesib/generic/src/styp/component-style-producer.impl.ts","../../node_modules/@wesib/generic/src/styp/basic-style-producer-support.feature.ts","../../node_modules/@wesib/generic/src/styp/component-styp-options.ts","../../node_modules/@wesib/generic/src/styp/produce-style.decorator.ts","../../node_modules/@wesib/generic/src/styp/style-producer-support.feature.ts","../../node_modules/@wesib/generic/src/theme/theme.ts","../../node_modules/@wesib/generic/src/theme/theme-factory.ts","../../node_modules/@wesib/generic/src/theme/theme-style.ts","../../node_modules/@wesib/generic/src/theme/theme.impl.ts","../../node_modules/@wesib/generic/src/theme/theme-factory.impl.ts","../../node_modules/@wesib/generic/src/theme/theme-support.feature.ts","../../node_modules/@wesib/generic/src/input/default-in-aspects.ts","../../node_modules/@wesib/generic/src/input/input-from-control.ts","../../node_modules/@wesib/generic/src/input/convert-input.decorator.ts"],"sourcesContent":["import { SingleContextKey } from 'context-values';\nimport { BootstrapContext } from './bootstrap-context';\n\n/**\n * @internal\n */\nexport const BootstrapContext__key = (/*#__PURE__*/ new SingleContextKey<BootstrapContext>('bootstrap-context'));\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKey__symbol, ContextValues } from 'context-values';\nimport { OnEvent } from 'fun-events';\nimport { Class } from '../common';\nimport { ComponentClass, ComponentFactory } from '../component/definition';\nimport { FeatureRef } from '../feature';\nimport { BootstrapContext__key } from './bootstrap-context.key.impl';\n\n/**\n * Components bootstrap context.\n *\n * An instance of this class is passed to [[FeatureDef.Options.init]] method so that the feature can configure itself.\n *\n * Extends `BootstrapValues` interface. The values could be {@link BootstrapSetup.provide pre-configured} in feature\n * definitions.\n *\n * @category Core\n */\nexport abstract class BootstrapContext extends ContextValues {\n\n  /**\n   * A key of bootstrap context value containing the bootstrap context itself.\n   */\n  static get [ContextKey__symbol](): ContextKey<BootstrapContext> {\n    return BootstrapContext__key;\n  }\n\n  /**\n   * An `OnEvent` sender of bootstrap readiness event.\n   *\n   * The registered receiver will be notified once bootstrap is complete.\n   *\n   * If bootstrap is complete already, the receiver will be notified immediately.\n   */\n  abstract readonly whenReady: OnEvent<[BootstrapContext]>;\n\n  /**\n   * Allows to wait for component definition.\n   *\n   * This corresponds to `window.customElements.whenDefined()` method.\n   *\n   * @param componentType  Component class constructor.\n   *\n   * @return A promise that is resolved to component factory when the given `componentType` is registered.\n   *\n   * @throws TypeError  If `componentType` does not contain a component definition.\n   */\n  abstract whenDefined<C extends object>(componentType: ComponentClass<C>): Promise<ComponentFactory<C>>;\n\n  /**\n   * Allows to loads the given `feature`.\n   *\n   * @param feature  The feature to load.\n   *\n   * @returns  Loaded feature reference.\n   */\n  abstract load(feature: Class): FeatureRef;\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKeyDefault } from 'context-values';\nimport { BootstrapContext } from './bootstrap-context';\n\n/**\n * Provides a default value for bootstrap context key.\n *\n * @category Core\n * @param provide  A function accepting bootstrap context and target key as parameters, and returning either a default\n * value, or `null`/`undefined` if unknown.\n *\n * @returns A provider of default value for bootstrap context value key.\n */\nexport function bootstrapDefault<Value, Key extends ContextKey<any, any, any>>(\n    provide: (this: void, context: BootstrapContext, key: Key) => Value | null | undefined,\n): ContextKeyDefault<Value, Key> {\n  return (context, key) => {\n\n    const bootstrapContext = context.get(BootstrapContext);\n\n    return context === bootstrapContext ? provide(bootstrapContext, key) : bootstrapContext.get(key);\n  };\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKey__symbol, SingleContextKey } from 'context-values';\nimport { Class } from '../../common';\nimport { ComponentMount } from '../component-mount';\nimport { ComponentClass } from './component-class';\nimport { ElementDef } from './element-def';\n\n/**\n * @internal\n */\nconst ComponentFactory__key = (/*#__PURE__*/ new SingleContextKey<ComponentFactory>('component-factory'));\n\n/**\n * A factory of components of particular type.\n *\n * @category Core\n * @typeparam T  A type of component.\n */\nexport abstract class ComponentFactory<T extends object = any> {\n\n  /**\n   * A key of definition context value containing a component factory.\n   */\n  static get [ContextKey__symbol](): ContextKey<ComponentFactory> {\n    return ComponentFactory__key;\n  }\n\n  /**\n   * Component class constructor.\n   */\n  abstract readonly componentType: ComponentClass<T>;\n\n  /**\n   * Custom element class constructor.\n   *\n   * It is an error accessing this property before the element class is created, e.g. from inside of\n   * `DefinitionListener` or `ComponentDef.define()` function. In these cases you may wish to add a `whenReady()`\n   * callback.\n   */\n  abstract readonly elementType: Class;\n\n  /**\n   * Custom element definition.\n   */\n  abstract readonly elementDef: ElementDef;\n\n  /**\n   * Mounts a component to arbitrary element.\n   *\n   * This method creates a component, but instead of creating a custom element for, it mounts it to the target\n   * `element`.\n   *\n   * It is up to the features to update the target element. They can use a `ComponentContext.mount` property to check\n   * whether the component is mounted or is constructed in standard way.\n   *\n   * The constructed component will be in disconnected state. To update its connection state either update a\n   * `ComponentMount.connected` property, or use a `connectTo()` method.\n   *\n   * @param element  Target element to mount new component to.\n   *\n   * @returns New component mount.\n   *\n   * @throws Error If target element is already bound to some component.\n   */\n  abstract mountTo(element: any): ComponentMount<T>;\n\n  /**\n   * Connects a component to arbitrary element.\n   *\n   * This method does the same as `mountTo()`, but also marks the mounted component as connected.\n   *\n   * @param element  Target element to mount new component to.\n   *\n   * @returns New component mount.\n   *\n   * @throws Error If target element is already bound to some component.\n   */\n  connectTo(element: any): ComponentMount<T> {\n\n    const mount = this.mountTo(element);\n\n    mount.connected = true;\n\n    return mount;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { SingleContextKey, SingleContextRef } from 'context-values';\n\n/**\n * A window the components bootstrap is performed against.\n *\n * @category Core\n */\nexport type BootstrapWindow = Window & typeof globalThis;\n\n/**\n * A key of bootstrap context value containing a window instance the bootstrap is performed against.\n *\n * Target value defaults to current window.\n *\n * @category Core\n */\nexport const BootstrapWindow: SingleContextRef<BootstrapWindow> = (/*#__PURE__*/ new SingleContextKey(\n    'window',\n    {\n      byDefault() {\n        return window;\n      },\n    },\n));\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { SingleContextKey, SingleContextRef } from 'context-values';\nimport { BootstrapWindow } from './bootstrap-window';\n\n/**\n * A window (e.g. DOM) element all bootstrapped components belong to.\n *\n * @category Core\n */\nexport type BootstrapRoot = any;\n\n/**\n * A key of bootstrap context value containing a bootstrap root.\n *\n * Target value defaults to document body of [[BootstrapWindow]].\n *\n * @category Core\n */\nexport const BootstrapRoot: SingleContextRef<BootstrapRoot> = (/*#__PURE__*/ new SingleContextKey(\n    'bootstrap-root',\n    {\n      byDefault(ctx) {\n        return ctx.get(BootstrapWindow).document.body;\n      },\n    },\n));\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { SingleContextKey, SingleContextRef } from 'context-values';\nimport { NamespaceAliaser } from 'namespace-aliaser';\n\n/**\n * Namespace aliaser used by default.\n *\n * Maps namespaces to their unique aliases.\n *\n * @category Core\n */\nexport type DefaultNamespaceAliaser = NamespaceAliaser;\n\n/**\n * A key of bootstrap context value containing the default namespace aliaser.\n *\n * @category Core\n */\nexport const DefaultNamespaceAliaser: SingleContextRef<DefaultNamespaceAliaser> = (\n    /*#__PURE__*/ new SingleContextKey<DefaultNamespaceAliaser>('default-namespace-aliaser')\n);\n","import { FnContextKey, FnContextRef } from 'context-values/updatable';\nimport { newRenderSchedule, RenderScheduler } from 'render-scheduler';\nimport { bootstrapDefault } from '../bootstrap-default';\nimport { BootstrapWindow } from './bootstrap-window';\n\n/**\n * Default rendering tasks scheduler.\n *\n * @category Core\n */\nexport type DefaultRenderScheduler = RenderScheduler;\n\n/**\n * A key of bootstrap, definition, or component context value containing [[DefaultRenderScheduler]] instance.\n *\n * Uses the default `RenderScheduler` (`newRenderSchedule()`) for {@link BootstrapWindow bootstrap window}.\n *\n * @category Core\n */\nexport const DefaultRenderScheduler:\n    FnContextRef<Parameters<DefaultRenderScheduler>, ReturnType<DefaultRenderScheduler>> = (\n    /*#__PURE__*/ new FnContextKey<Parameters<DefaultRenderScheduler>, ReturnType<DefaultRenderScheduler>>(\n        'default-render-scheduler',\n        {\n          byDefault: bootstrapDefault(\n              context => (options = {}) => newRenderSchedule({\n                ...options,\n                window: options.window || context.get(BootstrapWindow),\n              }),\n          ),\n        },\n    )\n);\n","/**\n * @internal\n */\nexport function isArray<T>(value: T | T[]): value is T[];\n\n/**\n * @internal\n */\nexport function isArray<T>(value: T | readonly T[]): value is readonly T[];\n\nexport function isArray<T>(value: T | readonly T[]): value is T[] {\n  return Array.isArray(value);\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { AIterable } from 'a-iterable';\nimport { isArray } from './types.impl';\n\n/**\n * @category Utility\n */\nexport class ArraySet<T> extends AIterable<T> {\n\n  readonly items: Set<T>;\n\n  constructor(value?: T | readonly T[]) {\n    super();\n    this.items = value == null ? new Set() : isArray(value) ? new Set(value) : new Set([value]);\n  }\n\n  get value(): T | T[] | undefined {\n    switch (this.items.size) {\n    case 0: return;\n    case 1: return this.items[Symbol.iterator]().next().value;\n    default: return [...this.items];\n    }\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.items[Symbol.iterator]();\n  }\n\n  add(...items: T[]): this {\n    items.forEach(item => this.items.add(item));\n    return this;\n  }\n\n  get size(): number {\n    return this.items.size;\n  }\n\n  merge(items: readonly T[] | T | undefined): this {\n    if (items == null) {\n      return this;\n    }\n    if (isArray(items)) {\n      return this.add(...items);\n    }\n    return this.add(items);\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\n/**\n * Arbitrary class constructor.\n *\n * @category Utility\n * @typeparam T  A type of object.\n */\nexport interface Class<T extends object = any> extends Function {\n  new(...args: any[]): T;\n  prototype: T;\n}\n\n/**\n * Detects super class of the given class optionally satisfying the given criteria.\n *\n * Traverses all class ancestors until reaches the one satisfying the given criteria, or stops when there is no more\n * ancestors.\n *\n * @category Utility\n * @param type  The class constructor to find super class of.\n * @param satisfying  The criteria of super class matching. It is a function accepting a super class constructor\n * as the only parameter and returning `true` if the given super class matches, or `false` otherwise. Always returns\n * `true` by default.\n *\n * @return A super class `satisfying` the given criteria, or `undefined` if there is no such super class, or there is no\n * super class at all (e.g. when `Object` is passed in).\n */\nexport function superClassOf(type: Class, satisfying: (type: Class) => boolean = () => true): Class | undefined {\n\n  const prototype = Object.getPrototypeOf(type.prototype);\n\n  if (prototype == null) {\n    return;\n  }\n\n  const superType = prototype.constructor as Class;\n\n  if (satisfying(superType)) {\n    return superType;\n  }\n\n  return superClassOf(superType, satisfying);\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\n/**\n * Merges two functions by calling one after another.\n *\n * Optionally merges function call results.\n *\n * @category Utility\n * @typeparam P  Function parameter types as tuple.\n * @typeparam R  A type of function result.\n * @typeparam T  A type if `this` object expected by function.\n * @param first  The first function to call.\n * @param second  The second function to call.\n * @param merge  Optional function call results merger. Accepts two function results as arguments and returns the final\n * result. When omitted the first function call result is ignored and the second function's call result is returned.\n *\n * @return A function that calls both of the given ones and merges their results. If one of the functions is absent,\n * then just returns another one. If both are absent, then returns `undefined`.\n */\nexport function mergeFunctions<P extends any[], R, T>(\n    first: (this: T, ...args: P) => R,\n    second: ((this: T, ...args: P) => R) | undefined,\n    merge: (first: R, second: R) => R,\n): (this: T, ...args: P) => R;\n\nexport function mergeFunctions<P extends any[], R, T>(\n    first: ((this: T, ...args: P) => R) | undefined,\n    second: (this: T, ...args: P) => R,\n    merge?: (first: R, second: R) => R,\n): (this: T, ...args: P) => R;\n\nexport function mergeFunctions<P extends any[], R, T>(\n    first: ((this: T, ...args: P) => R) | undefined,\n    second: ((this: T, ...args: P) => R) | undefined,\n    merge?: (first: R, second: R) => R,\n): ((this: T, ...args: P) => R) | undefined;\n\nexport function mergeFunctions<P extends any[], R, T>(\n    first: ((this: T, ...args: P) => R) | undefined,\n    second: ((this: T, ...args: P) => R) | undefined,\n    merge: (first: R, second: R) => R = (_f, s) => s,\n): ((this: T, ...args: P) => R) | undefined {\n  if (!first) {\n    return second;\n  }\n  if (!second) {\n    return first;\n  }\n  return function (this: T, ...args: P): R {\n    return merge(\n        first.apply(this, args),\n        second.apply(this, args),\n    );\n  };\n}\n","/**\n * Checks whether the given DOM node is element.\n *\n * @category Utility\n * @param node  A DOM node to check.\n *\n * @returns `true` is `node` is element, or `false` otherwise.\n */\nexport function isElement(node: Node): node is Element {\n  return node.nodeType === Node.ELEMENT_NODE;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { flatMapIt, mapIt } from 'a-iterable';\nimport { Class, superClassOf } from './classes';\n\n/**\n * @category Utility\n */\nexport abstract class MetaAccessor<M, S = M> {\n\n  readonly symbol: symbol;\n\n  protected constructor(symbol: symbol) {\n    this.symbol = symbol;\n  }\n\n  own(type: Class): M | undefined {\n    // eslint-disable-next-line no-prototype-builtins\n    return type.hasOwnProperty(this.symbol) ? (type as any)[this.symbol] : undefined;\n  }\n\n  of(type: Class): M | undefined {\n\n    const ownDef: M | undefined = this.own(type);\n    const superType = superClassOf(type);\n    const superDef = superType && this.of(superType);\n\n    return ownDef ? (superDef ? this.merge([superDef, ownDef]) : ownDef) : superDef;\n  }\n\n  define<C extends Class>(type: C, sources: Iterable<S>): C {\n\n    const prevMeta = this.own(type);\n    const updates = mapIt(sources, source => this.meta(source, type));\n    const newMeta: M = this.merge(prevMeta ? flatMapIt([[prevMeta], updates]) : updates);\n\n    Object.defineProperty(\n        type,\n        this.symbol,\n        {\n          configurable: true,\n          value: newMeta,\n        },\n    );\n\n    return type;\n  }\n\n  abstract merge(metas: Iterable<M>): M;\n\n  protected abstract meta(source: S, type: Class): M;\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\n/**\n * @category Utility\n */\nexport class PromiseResolver<T = void> {\n\n  readonly promise: Promise<T>;\n  private _resolve!: (value: T) => void;\n  private _reject!: (error: any) => void;\n\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n    });\n  }\n\n  resolve(value: T): void {\n    this._resolve(value);\n  }\n\n  reject(error: any): void {\n    this._reject(error);\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { itsReduction } from 'a-iterable';\nimport { BootstrapSetup } from '../boot';\nimport { ArraySet, Class, mergeFunctions, MetaAccessor } from '../common';\nimport { FeatureContext } from './feature-context';\n\n/**\n * A key of a property holding a feature definition within its class constructor.\n *\n * @category Core\n */\nexport const FeatureDef__symbol = (/*#__PURE__*/ Symbol('feature-def'));\n\n/**\n * Feature definition.\n *\n * This can be one of:\n * - feature definition options object,\n * - feature definition holder, or\n * - feature definition factory.\n *\n * @category Core\n */\nexport type FeatureDef =\n    | FeatureDef.Options\n    | FeatureDef.Holder\n    | FeatureDef.Factory;\n\nexport namespace FeatureDef {\n\n  /**\n   * Feature definition options.\n   */\n  export interface Options {\n\n    readonly [FeatureDef__symbol]?: undefined;\n\n    /**\n     * Features this one requires.\n     */\n    readonly needs?: Class | readonly Class[];\n\n    /**\n     * Features this one provides.\n     *\n     * The feature always provides itself.\n     */\n    readonly has?: Class | readonly Class[];\n\n    /**\n     * Sets up bootstrap.\n     *\n     * This method is called before bootstrap context created.\n     *\n     * @param setup  Bootstrap setup.\n     */\n    setup?(setup: BootstrapSetup): void;\n\n    /**\n     * Bootstraps this feature by calling the given bootstrap context constructed.\n     *\n     * @param context  Feature initialization context.\n     */\n    init?(context: FeatureContext): void;\n\n  }\n\n  /**\n   * Feature definition holder.\n   */\n  export interface Holder {\n\n    /**\n     * The feature definition this holder contains.\n     */\n    readonly [FeatureDef__symbol]: FeatureDef;\n\n  }\n\n  /**\n   * Feature definition factory.\n   */\n  export interface Factory {\n\n    /**\n     * Builds feature definition.\n     *\n     * @param featureType  A feature class constructor to build definition for.\n     *\n     * @returns Built feature definition.\n     */\n    [FeatureDef__symbol](featureType: Class): FeatureDef;\n\n  }\n\n}\n\n/**\n * @internal\n */\nclass FeatureMeta extends MetaAccessor<FeatureDef.Options, FeatureDef> {\n\n  constructor() {\n    super(FeatureDef__symbol);\n  }\n\n  merge(defs: Iterable<FeatureDef.Options>): FeatureDef.Options {\n    return itsReduction<FeatureDef.Options, FeatureDef.Options>(\n        defs,\n        (prev, def) => ({\n          needs: new ArraySet(prev.needs).merge(def.needs).value,\n          has: new ArraySet(prev.has).merge(def.has).value,\n          setup: mergeFunctions<[BootstrapSetup], void, Class>(prev.setup, def.setup),\n          init: mergeFunctions<[FeatureContext], void, Class>(prev.init, def.init),\n        }),\n        {},\n    );\n  }\n\n  meta(source: FeatureDef, type: Class): FeatureDef.Options {\n\n    const def = source[FeatureDef__symbol];\n\n    return def == null\n        ? source as FeatureDef.Options\n        : this.meta(\n            typeof def === 'function' ? (source as FeatureDef.Factory)[FeatureDef__symbol](type) : def,\n            type,\n        );\n  }\n\n}\n\n/**\n * @internal\n */\nconst featureMeta = (/*#__PURE__*/ new FeatureMeta());\n\n/**\n * @internal\n */\nconst noFeatureDef: FeatureDef.Factory = {\n  [FeatureDef__symbol]() {\n    return {};\n  },\n};\n\n/**\n * @category Core\n */\nexport const FeatureDef = {\n\n  /**\n   * Extracts feature definition options from its type.\n   *\n   * @param featureType  Target feature class constructor.\n   *\n   * @returns Feature definition options. May be empty when there is no feature definition found in the given\n   * `featureType`.\n   */\n  of(this: void, featureType: Class): FeatureDef.Options {\n    return featureMeta.of(featureType) || {};\n  },\n\n  /**\n   * Builds feature definition options for the given feature class.\n   *\n   * @param featureType  Target feature class constructor.\n   * @param def  A feature definition.\n   *\n   * @returns Feature definition options.\n   */\n  for(this: void, featureType: Class, def: FeatureDef): FeatureDef.Options {\n    return featureMeta.meta(def, featureType);\n  },\n\n  /**\n   * Merges multiple feature definition options.\n   *\n   * @param defs  Feature definition options to merge.\n   *\n   * @returns Merged feature definition options.\n   */\n  merge(this: void, ...defs: readonly FeatureDef.Options[]): FeatureDef.Options {\n    return featureMeta.merge(defs);\n  },\n\n  /**\n   * Merges multiple feature definitions.\n   *\n   * @param defs  Feature definitions to merge.\n   *\n   * @returns Merged feature definition.\n   */\n  all(this: void, ...defs: readonly FeatureDef[]): FeatureDef {\n    return itsReduction<FeatureDef, FeatureDef.Factory>(\n        defs,\n        (prev, def) => ({\n          [FeatureDef__symbol](featureType: Class) {\n            return FeatureDef.merge(\n                FeatureDef.for(featureType, prev),\n                FeatureDef.for(featureType, def),\n            );\n          },\n        }),\n        noFeatureDef,\n    );\n  },\n\n  /**\n   * Defines a feature.\n   *\n   * Either creates new or extends an existing feature definition and stores it under `[FeatureDef__symbol]` key.\n   *\n   * @typeparam T  Feature type.\n   * @param featureType  Feature class constructor.\n   * @param defs  Feature definitions.\n   *\n   * @returns The `type` instance.\n   */\n  define<T extends Class>(this: void, featureType: T, ...defs: readonly FeatureDef[]): T {\n    return featureMeta.define(featureType, defs);\n  },\n\n};\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { Class, TypedClassDecorator } from '../common';\nimport { FeatureDef } from './feature-def';\n\n/**\n * Feature class decorator.\n *\n * Decorate a class with this decorator to define it as a feature like this:\n * ```TypeScript\n * @Feature({ needs: [OtherFeature, MyComponent] })\n * class MyFeature {\n *   // ...\n * }\n * ```\n *\n * Such feature can be passed to [[bootstrapComponents]] function or referenced by other features.\n *\n * This is an alternative to direct call to [[FeatureDef.define]] method.\n *\n * @category Core\n * @typeparam T  A type of decorated feature class.\n * @param defs  Feature definitions.\n *\n * @returns A feature class decorator.\n */\nexport function Feature<T extends Class = any>(...defs: FeatureDef[]): TypedClassDecorator<T> {\n  return (type: T) => FeatureDef.define(type, ...defs);\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKey__symbol, ContextValueSpec, SingleContextKey } from 'context-values';\nimport { OnEvent } from 'fun-events';\nimport { BootstrapContext, BootstrapSetup } from '../boot';\nimport { Class } from '../common';\nimport { ComponentContext } from '../component';\nimport { ComponentClass, ComponentFactory, DefinitionContext, DefinitionSetup } from '../component/definition';\nimport { FeatureRef } from './feature-ref';\n\n/**\n * @internal\n */\nconst FeatureContext__key = (/*#__PURE__*/ new SingleContextKey<FeatureContext>('feature-context'));\n\n/**\n * Feature initialization context.\n *\n * @category Core\n */\nexport abstract class FeatureContext extends BootstrapContext implements BootstrapSetup {\n\n  /**\n   * A key of feature context value containing the feature context itself.\n   */\n  static get [ContextKey__symbol](): ContextKey<FeatureContext> {\n    return FeatureContext__key;\n  }\n\n  /**\n   * Feature class this context is created for.\n   */\n  abstract readonly feature: Class;\n\n  abstract readonly whenReady: OnEvent<[FeatureContext]>;\n\n  abstract readonly onDefinition: OnEvent<[DefinitionContext]>;\n\n  abstract readonly onComponent: OnEvent<[ComponentContext]>;\n\n  /**\n   * Provides bootstrap context value.\n   *\n   * Note that this happens when bootstrap context already exists. To provide a value before bootstrap context created\n   * a [[BootstrapSetup.provide]] method can be used.\n   *\n   * @typeparam Deps  Dependencies tuple type.\n   * @typeparam Src  Source value type.\n   * @typeparam Seed  Value seed type.\n   * @param spec  Context value specifier.\n   *\n   * @returns A function that removes the given context value specifier when called.\n   */\n  abstract provide<Deps extends any[], Src, Seed>(\n      spec: ContextValueSpec<BootstrapContext, any, Deps, Src, Seed>,\n  ): () => void;\n\n  abstract perDefinition<Deps extends any[], Src, Seed>(\n      spec: ContextValueSpec<DefinitionContext, any, Deps, Src, Seed>,\n  ): () => void;\n\n  abstract perComponent<Deps extends any[], Src, Seed>(\n      spec: ContextValueSpec<ComponentContext, any, Deps, Src, Seed>,\n  ): () => void;\n\n  abstract setupDefinition<T extends object>(componentType: ComponentClass<T>): OnEvent<[DefinitionSetup]>;\n\n  /**\n   * Defines a component.\n   *\n   * Creates a custom element according to component definition, and registers it with custom elements registry.\n   *\n   * Note that custom element definition will happen only when all features configuration complete.\n   *\n   * @typeparam T  A type of component.\n   * @param componentType  Component class constructor.\n   *\n   * @return Custom element class constructor registered as custom element.\n   *\n   * @throws TypeError  If `componentType` does not contain a component definition.\n   */\n  abstract define<T extends object>(componentType: ComponentClass<T>): void;\n\n  whenDefined<C extends object>(componentType: ComponentClass<C>): Promise<ComponentFactory<C>> {\n    return this.get(BootstrapContext).whenDefined(componentType);\n  }\n\n  load(feature: Class): FeatureRef {\n    return this.get(BootstrapContext).load(feature);\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { Class } from '../common';\n\n/**\n * Feature need.\n *\n * Indicates why one feature needs another one. The reason can be one of:\n *\n * - `needs` when feature {@link FeatureDef.Options.needs depends} on another one, or\n * - `has` when feature {@link FeatureDef.Options.has provides} another one.\n *\n * @category Core\n */\nexport type FeatureNeed = [Class, 'needs' | 'has', Class];\n\n/**\n * An error in feature needs. I.e. circular dependency.\n *\n * @category Core\n */\nexport class FeatureNeedsError extends Error {\n\n  /**\n   * Feature needs causing this error.\n   */\n  readonly needs: readonly FeatureNeed[];\n\n  /**\n   * Constructs feature needs error.\n   *\n   * @param needs  Feature needs causing the error.\n   */\n  constructor(needs: readonly FeatureNeed[]) {\n    super(\n        'Circular feature needs: ' + needs.reduce(\n        (\n            prev,\n            [feature, reason, need],\n        ) => (prev ? prev : feature.name) + ` ${reason} ${need.name}`,\n        '',\n        ),\n    );\n    this.needs = needs;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { itsReduction } from 'a-iterable';\nimport { isQualifiedName, QualifiedName } from 'namespace-aliaser';\nimport { mergeFunctions, MetaAccessor } from '../common';\nimport { FeatureDef, FeatureDef__symbol } from '../feature';\nimport { ComponentClass, DefinitionContext, DefinitionSetup, ElementDef } from './definition';\n\n/**\n * A key of a property holding a component definition within its class constructor.\n *\n * @category Core\n */\nexport const ComponentDef__symbol = (/*#__PURE__*/ Symbol('component-def'));\n\n/**\n * Component definition.\n *\n * A custom element class will be created for each registered component in accordance to this definition.\n *\n * This can be one of:\n * - custom element name (possibly qualified),\n * - component definition options,\n * - component definition holder,\n * - component definition factory,\n * - feature definition holder, or\n * - feature definition factory.\n *\n * @category Core\n * @typeparam T  A type of component.\n */\nexport type ComponentDef<T extends object = any> =\n    | QualifiedName\n    | ComponentDef.Options<T>\n    | ComponentDef.Holder<T>\n    | ComponentDef.Factory<T>\n    | FeatureDef.Holder\n    | FeatureDef.Factory;\n\nexport namespace ComponentDef {\n\n  /**\n   * Component definition options.\n   */\n  export interface Options<T extends object = any> {\n\n    readonly [ComponentDef__symbol]?: undefined;\n\n    /**\n     * Custom element name.\n     *\n     * The name may belong to some namespace to avoid naming conflicts. I.e. it can be either a string, or\n     * name/namespace tuple.\n     *\n     * When omitted an anonymous component will be registered. Such component is not bound to custom element, but it\n     * still can be mounted.\n     */\n    readonly name?: QualifiedName;\n\n    /**\n     * Existing element to extend by custom one.\n     */\n    readonly extend?: ElementDef.Extend;\n\n    /**\n     * Additional feature definition options.\n     */\n    readonly feature?: FeatureDef.Options;\n\n    /**\n     * Sets up component definition.\n     *\n     * This method is called before component definition context constructed.\n     *\n     * @param setup  Component definition setup.\n     */\n    setup?(setup: DefinitionSetup<T>): void;\n\n    /**\n     * Defines this component by calling the given component definition context methods.\n     *\n     * This function is called before the custom element is defined.\n     *\n     * @param context  Component definition context.\n     */\n    define?(context: DefinitionContext<T>): void;\n\n  }\n\n  /**\n   * Component definition holder.\n   *\n   * @typeparam T  A type of component.\n   */\n  export interface Holder<T extends object = any> {\n\n    /**\n     * The component definition this holder contains.\n     */\n    readonly [ComponentDef__symbol]: ComponentDef<T>;\n\n  }\n\n  /**\n   * Component definition factory.\n   *\n   * @typeparam T  A type of component.\n   */\n  export interface Factory<T extends object = any> {\n\n    /**\n     * Builds component definition.\n     *\n     * @param componentType  A component class constructor to build definition for.\n     *\n     * @returns Built component definition.\n     */\n    [ComponentDef__symbol](componentType: ComponentClass<T>): ComponentDef<T>;\n\n  }\n\n}\n\n/**\n * @internal\n */\nclass ComponentMeta extends MetaAccessor<ComponentDef.Options, ComponentDef> {\n\n  constructor() {\n    super(ComponentDef__symbol);\n  }\n\n  merge<T extends object>(defs: Iterable<ComponentDef.Options<T>>): ComponentDef.Options<T> {\n    return itsReduction<ComponentDef.Options<T>, ComponentDef.Options<T>>(\n        defs,\n        (prev, def) => ({\n          ...prev,\n          ...def,\n          setup: mergeFunctions(prev.setup, def.setup),\n          define: mergeFunctions(prev.define, def.define),\n          feature: prev.feature\n              ? def.feature ? FeatureDef.merge(prev.feature, def.feature) : prev.feature\n              : def.feature,\n        }),\n        {},\n    );\n  }\n\n  meta<T extends object>(source: ComponentDef<T>, componentType: ComponentClass<T>): ComponentDef.Options<T> {\n\n    const def = (source as any)[ComponentDef__symbol];\n\n    if (def != null) {\n      return this.meta(\n          typeof def === 'function' ? (source as ComponentDef.Factory<T>)[ComponentDef__symbol](componentType) : def,\n          componentType,\n      );\n    }\n    if ((source as any)[FeatureDef__symbol] != null) {\n      return {\n        feature: FeatureDef.for(componentType, source as FeatureDef),\n      };\n    }\n    if (isQualifiedName(source)) {\n      return { name: source };\n    }\n\n    return source as ComponentDef.Options;\n  }\n\n}\n\n/**\n * @internal\n */\nconst componentMeta = (/*#__PURE__*/ new ComponentMeta());\n\n/**\n * @internal\n */\nconst noComponentDef: ComponentDef.Factory = {\n  [ComponentDef__symbol]() {\n    return {};\n  },\n};\n\n/**\n * @category Core\n */\nexport const ComponentDef = {\n\n  /**\n   * Extracts component definition options from its type.\n   *\n   * @typeparam T  A type of component.\n   * @param componentType  Target component class constructor.\n   *\n   * @returns Component definition options. May be empty if there is not definition attached to component type.\n   */\n  of<T extends object>(this: void, componentType: ComponentClass<T>): ComponentDef.Options<T> {\n    return componentMeta.of(componentType) as ComponentDef.Options<T> || {};\n  },\n\n  /**\n   * Builds component definition options for the given component class.\n   *\n   * @param componentType  Target component class constructor.\n   * @param source  A source of component definition.\n   *\n   * @returns Component definition.\n   */\n  for<T extends object>(\n      this: void,\n      componentType: ComponentClass<T>,\n      source: ComponentDef<T>,\n  ): ComponentDef.Options<T> {\n    return componentMeta.meta(source, componentType);\n  },\n\n  /**\n   * Merges multiple component definition options.\n   *\n   * @typeparam T  A type of component.\n   * @param defs  Component definition options to merge.\n   *\n   * @returns Merged component definition options.\n   */\n  merge<T extends object>(this: void, ...defs: ComponentDef.Options<T>[]): ComponentDef.Options<T> {\n    return componentMeta.merge(defs);\n  },\n\n  /**\n   * Merges multiple component definitions.\n   *\n   * @typeparam T  A type of component.\n   * @param defs  Component definitions to merge.\n   *\n   * @returns Merged component definition.\n   */\n  all<T extends object>(this: void, ...defs: ComponentDef<T>[]): ComponentDef<T> {\n    return itsReduction<ComponentDef<T>, ComponentDef.Factory<T>>(\n        defs,\n        (prev, def) => ({\n          [ComponentDef__symbol](componentType: ComponentClass<T>) {\n            return ComponentDef.merge(\n                ComponentDef.for(componentType, prev),\n                ComponentDef.for(componentType, def),\n            );\n          },\n        }),\n        noComponentDef,\n    );\n  },\n\n  /**\n   * Defines a component.\n   *\n   * Either assigns new or extends existing component definition and stores it under [[ComponentDef__symbol]] key.\n   *\n   * Each component can be passed directly to [[bootstrapComponents]] function or added as a requirement\n   * of another feature.\n   *\n   * @typeparam T  A type of component.\n   * @param componentType  Component class constructor.\n   * @param defs  Component definitions.\n   *\n   * @returns The `type` instance.\n   */\n  define<T extends ComponentClass>(\n      this: void,\n      componentType: T,\n      ...defs: ComponentDef<InstanceType<T>>[]\n  ): T {\n    return componentMeta.define(componentType, defs);\n  },\n\n};\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { Class } from '../common';\nimport { ComponentDef, ComponentDef__symbol } from './component-def';\nimport { ComponentClass } from './definition';\n\n/**\n * Component decorator interface.\n *\n * In addition to being a decorator for component class, it may also serve as {@link ComponentDef component definition}.\n * Thus it can be added as parameter to {@link Component @Component} decorator, or used as class decorator by itself.\n *\n * Constructed by [[Component]] function.\n *\n * @category Core\n * @typeparam T  A type of decorated component class.\n */\nexport type ComponentDecorator<T extends ComponentClass = any> =\n    & ((this: void, type: T) => T | void)\n    & ComponentDef<InstanceType<T>>;\n\n/**\n * Decorator of component class.\n *\n * Decorated class becomes component:\n * ```TypeScript\n * @Component({ name: 'my-element' })\n * class MyComponent {\n *   // ...\n * }\n * ```\n *\n * Such component can be registered with [[FeatureContext.define]] method or used as a feature, e.g. passed to\n * [[bootstrapComponents]] function, or added to [[FeatureDef.Options.needs]] property of another feature.\n *\n * This is an alternative to direct call to [[ComponentDef.Options.define]] method.\n *\n * @category Core\n * @typeparam T  A type of decorated component class.\n * @param defs  Component definitions.\n *\n * @returns A component class decorator.\n */\nexport function Component<T extends ComponentClass = Class>(\n    ...defs: ComponentDef<InstanceType<T>>[]\n): ComponentDecorator<T> {\n\n  const decorator = ((type: T) => ComponentDef.define(type, ...defs)) as ComponentDecorator<T>;\n  const def = decorator as ComponentDef.Factory<InstanceType<T>>;\n\n  def[ComponentDef__symbol] = () => ComponentDef.all(...defs);\n\n  return decorator;\n}\n","import { SingleContextKey } from 'context-values';\nimport { ComponentContext } from './component-context';\n\n/**\n * @internal\n */\nexport const ComponentContext__key = (/*#__PURE__*/ new SingleContextKey<ComponentContext>('component-context'));\n","import { SingleContextKey } from 'context-values';\nimport { DomEventDispatcher, OnDomEvent } from 'fun-events/dom';\nimport { ComponentContext } from './component-context';\nimport { ComponentEventDispatcher } from './component-event';\n\n/**\n * @internal\n */\nexport const ComponentEventDispatcher__key = (/*#__PURE__*/ new SingleContextKey<ComponentEventDispatcher>(\n    'component-event-dispatcher',\n    {\n      byDefault() {\n        return {\n          dispatch(context: ComponentContext, event: Event): boolean {\n            return context.element.dispatchEvent(event);\n          },\n          on<E extends Event>(context: ComponentContext, type: string): OnDomEvent<E> {\n\n            const dispatcher = new DomEventDispatcher(context.element);\n\n            return dispatcher.on(type);\n          },\n        };\n      },\n    },\n));\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { SingleContextKey, SingleContextRef } from 'context-values';\nimport { ComponentContext__key } from './component-context.key.impl';\n\n/**\n * Component content root node.\n *\n * @category Core\n */\nexport type ContentRoot = ParentNode;\n\n/**\n * A key of component context value containing a component root element.\n *\n * This is an element itself by default. But can be overridden e.g. by {@link AttachShadow @AttachShadow} decorator.\n *\n * @category Core\n */\nexport const ContentRoot: SingleContextRef<ContentRoot> = (/*#__PURE__*/ new SingleContextKey<ContentRoot>(\n    'content-root',\n    {\n      byDefault(ctx) {\n        return ctx.get(ComponentContext__key).element;\n      },\n    },\n));\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { noop, valueProvider } from 'call-thru';\nimport { FnContextKey, FnContextRef } from 'context-values/updatable';\nimport { StatePath } from 'fun-events';\n\n/**\n * Component state updater function.\n *\n * @category Core\n */\nexport type StateUpdater =\n/**\n * @typeparam V  Updated value type\n * @param path  Updated state node path.\n * @param newValue  New value.\n * @param oldValue  Replaced value.\n */\n    <V>(this: void, path: StatePath, newValue: V, oldValue: V) => void;\n\n/**\n * A key of component context value containing a component state updates receiver function.\n *\n * Features are calling this function by default when component state changes, e.g. attribute value or DOM property\n * modified.\n *\n * Note that this value is not provided, unless the `StateSupport` feature is enabled.\n *\n * @category Core\n */\nexport const StateUpdater: FnContextRef<Parameters<StateUpdater>> = (/*#__PURE__*/ new FnContextKey(\n    'state-updater',\n    {\n      byDefault: valueProvider(noop),\n    },\n));\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKey__symbol, ContextValues } from 'context-values';\nimport { EventSupply, OnEvent, StatePath } from 'fun-events';\nimport { OnDomEvent } from 'fun-events/dom';\nimport { BootstrapContext__key } from '../boot/bootstrap-context.key.impl';\nimport { ComponentContext__key } from './component-context.key.impl';\nimport { ComponentEventDispatcher__key } from './component-event.key.impl';\nimport { ComponentMount } from './component-mount';\nimport { ContentRoot } from './content-root';\nimport { ComponentClass } from './definition';\nimport { StateUpdater } from './state-updater';\n\n/**\n * A key of a custom element and component properties containing a reference to component context.\n *\n * @category Core\n */\nexport const ComponentContext__symbol = (/*#__PURE__*/ Symbol('component-context'));\n\n/**\n * Component context.\n *\n * Passed to component constructor as its only parameter.\n *\n * Extends `ContextValues` interface. The values are provided by corresponding providers registered with\n * [[BootstrapSetup.perComponent]] and [[DefinitionSetup.perComponent]] methods.\n *\n * @category Core\n * @typeparam T  A type of component.\n */\nexport abstract class ComponentContext<T extends object = any> extends ContextValues {\n\n  /**\n   * A key of component context value containing the component context instance itself.\n   */\n  static get [ContextKey__symbol](): ContextKey<ComponentContext> {\n    return ComponentContext__key;\n  }\n\n  /**\n   * Component class constructor.\n   */\n  abstract readonly componentType: ComponentClass<T>;\n\n  /**\n   * Custom element constructed for the component according to its type.\n   *\n   * E.g. `HTMLElement` instance.\n   */\n  abstract readonly element: any;\n\n  /**\n   * A component instance.\n   *\n   * It is an error accessing this property before the component is created, e.g. from inside of component constructor\n   * or {@link DefinitionContext.whenComponent component instantiation event} receiver. A [[whenReady]] callback could\n   * be utilized to work this around.\n   */\n  abstract readonly component: T;\n\n  /**\n   * Component mount.\n   *\n   * This is defined when component is mounted to arbitrary element by [[ComponentFactory.mountTo]]. Ot is `undefined`\n   * for components created in standard way.\n   */\n  abstract readonly mount: ComponentMount<T> | undefined;\n\n  /**\n   * Whether the custom element is connected.\n   *\n   * This becomes `true` right before [[whenOn]] event is sent, and becomes `false` right before [[whenOff]] event is\n   * sent.\n   */\n  abstract readonly connected: boolean;\n\n  /**\n   * An `OnEvent` sender of custom element connection events.\n   *\n   * The registered receivers are called when custom element is connected, i.e. its `connectedCallback()` method is\n   * called. If component is connected already the receiver is called immediately.\n   *\n   * Sends a connection supply that is cut off once custom element is disconnected.\n   */\n  abstract readonly whenOn: OnEvent<[EventSupply]>;\n\n  /**\n   * An `OnEvent` sender of custom element disconnection events.\n   *\n   * The registered receivers are called when custom element is disconnected, i.e. its `disconnectedCallback()` method\n   * is called. If component is ready but disconnected, the receiver is called immediately.\n   */\n  abstract readonly whenOff: OnEvent<[]>;\n\n  /**\n   * An `OnEvent` sender of component readiness event.\n   *\n   * The component is constructed shortly after custom element. So the component may not exist when requested\n   * e.g. inside component constructor or {@link DefinitionContext.whenComponent component instantiation event}\n   * receiver. The registered receiver will be notified when the component is constructed.\n   *\n   * If the component is constructed already, the receiver will be notified immediately.\n   */\n  abstract readonly whenReady: OnEvent<[this]>;\n\n  /**\n   * An `OnEvent` sender of component destruction reason event.\n   *\n   * The registered receiver is notified when [[destroy]] method is called. If the component is destroyed already\n   * the receiver is notified immediately.\n   */\n  abstract readonly whenDestroyed: OnEvent<[any]>;\n\n  /**\n   * Updates component's state.\n   *\n   * This is a shorthand for invoking a component {@link StateUpdater state updater} .\n   *\n   * Note that state update has no effect unless [[StateSupport]] feature is enabled or [[StateUpdater]] context value\n   * is provided by other means.\n   *\n   * @typeparam V  A type of changed value.\n   * @param key  Changed value key.\n   * @param newValue  New value.\n   * @param oldValue  Previous value.\n   */\n  readonly updateState: StateUpdater = updateComponentState.bind(this);\n\n  /**\n   * Extracts component context from its custom element or from component itself.\n   *\n   * @param element  Custom element instance created for the component or the component itself.\n   *\n   * @return Component context reference stored under [[ComponentContext__symbol]] key.\n   *\n   * @throws TypeError  When the given `element` does not contain component context reference.\n   */\n  static of<T extends object>(element: any): ComponentContext<T> {\n\n    const context = element[ComponentContext__symbol];\n\n    if (!context) {\n      throw TypeError(`No component context found in ${element}`);\n    }\n\n    return context;\n  }\n\n  /**\n   * Component content root.\n   *\n   * This is a shorthand for requesting a {@link ContentRoot content root} from component context.\n   */\n  get contentRoot(): ContentRoot {\n    return this.get(ContentRoot);\n  }\n\n  /**\n   * Returns a `super` property value inherited from custom element parent.\n   *\n   * @param key  Target property key.\n   */\n  abstract elementSuper(key: PropertyKey): any;\n\n  /**\n   * Returns a DOM event producer for the given event type.\n   *\n   * This is a shorthand for invoking a component event producer function available under\n   * `[ComponentEventProducer.key]` key.\n   *\n   * @param type  An event type to listen for.\n   *\n   * @returns A producer of DOM event events of the given type.\n   */\n  on<E extends Event>(type: string): OnDomEvent<E> {\n    return this.get(ComponentEventDispatcher__key).on(this, type);\n  }\n\n  /**\n   * Dispatches an event to component element.\n   *\n   * This is a shorthand for invoking a component {@link ComponentEventDispatcher event dispatcher}.\n   *\n   * @param event  An event to dispatch.\n   */\n  dispatchEvent(event: Event): void {\n    this.get(BootstrapContext__key).get(ComponentEventDispatcher__key).dispatch(this, event);\n  }\n\n  /**\n   * Destroys the component.\n   *\n   * Removes element from the DOM tree. I.e. disconnects custom element first.\n   *\n   * After this method call the component should no longer be used.\n   *\n   * Note that component destruction is virtual. It is up to developer to decide when component is no longer needed.\n   *\n   * @param reason  Optional reason of destruction.\n   */\n  abstract destroy(reason?: any): void;\n\n}\n\n/**\n * @internal\n */\nfunction updateComponentState<V>(this: ComponentContext<any>, key: StatePath, newValue: V, oldValue: V): void {\n  this.get(StateUpdater)(key, newValue, oldValue);\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { SingleContextRef } from 'context-values';\nimport { OnDomEvent } from 'fun-events/dom';\nimport { ComponentContext } from './component-context';\nimport { ComponentEventDispatcher__key } from './component-event.key.impl';\n\n/**\n * Component event.\n *\n * Events of this type are thrown by various services to inform on component status changes.\n *\n * It is illegal to dispatch such events for elements not bound to components. It is reasonable to dispatch events\n * using [[ComponentEventDispatcher]] available in component context.\n *\n * The following event types supported:\n * - `wesib:component` is dispatched when component is bound to element. I.e. when HTML element is upgraded to custom\n *   one defined by component, or component is mounted to element. The event is dispatched when component is connected\n *   for the first time. I.e. when element is added to the document.\n *   This event bubbles and is not cancelable.\n *\n * @category Core\n * @event ComponentEvent#wesib:component\n */\nexport class ComponentEvent extends Event {\n\n  /**\n   * Target component context.\n   */\n  get context(): ComponentContext {\n    return ComponentContext.of(this.target);\n  }\n\n}\n\n/**\n * Component event dispatcher is used to listen for and dispatch component events.\n *\n * It is available in bootstrap context context.\n *\n * By default treats a component element as event target.\n *\n * @category Core\n */\nexport interface ComponentEventDispatcher {\n\n  /**\n   * Dispatches the DOM event for the given component.\n   *\n   * @param context  Target component context.\n   * @param event  An event to dispatch.\n   *\n   * @returns `true` if either event's `cancelable` attribute value is `false` or its `preventDefault()` method was not\n   * invoked, or `false` otherwise.\n   */\n  dispatch(context: ComponentContext, event: Event): boolean;\n\n  /**\n   * Returns an `OnDomEvent` sender of DOM events of the given type.\n   *\n   * @param context  Target component context.\n   * @param type  An event type to listen for.\n   *\n   * @returns A producer of DOM event events of the given type.\n   */\n  on<E extends Event>(context: ComponentContext, type: string): OnDomEvent<E>;\n\n}\n\n/**\n * A key of bootstrap context value containing component event dispatcher.\n *\n * @category Core\n */\nexport const ComponentEventDispatcher: SingleContextRef<ComponentEventDispatcher> = ComponentEventDispatcher__key;\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextValueOpts, ContextValues } from 'context-values';\nimport { ContextUpKey, ContextUpRef } from 'context-values/updatable';\nimport { AfterEvent, afterThe, EventKeeper, nextAfterEvent } from 'fun-events';\nimport { ComponentContext, ComponentContext__symbol } from '../../component';\n\n/**\n * Element adapter is a function able to convert a raw element to component. E.g. mount a component to it.\n *\n * Features may use it internally. E.g. an `AutoConnectSupport` applies it to each added DOM element.\n *\n * Multiple element adapters can be registered in bootstrap context.\n *\n * @category Core\n */\nexport type ElementAdapter =\n/**\n * @param element  Target raw element to adapt.\n *\n * @returns An adapted component's context, or `undefined` if element can not be adapted.\n */\n    (this: void, element: any) => ComponentContext | undefined;\n\n/**\n * @internal\n */\nclass ElementAdapterKey extends ContextUpKey<ElementAdapter, ElementAdapter> {\n\n  readonly upKey: ContextUpKey.UpKey<ElementAdapter, ElementAdapter>;\n\n  constructor() {\n    super('element-adapter');\n    this.upKey = this.createUpKey(\n        opts => opts.seed.keep.thru((...adapters) => {\n\n          const combined: ElementAdapter = adapters.reduce(\n              (prev, adapter) => element => prev(element) || adapter(element),\n              defaultElementAdapter,\n          );\n\n          const defaultProvider = (): AfterEvent<[ElementAdapter]> => afterThe(defaultElementAdapter);\n\n          return combined !== defaultElementAdapter\n              ? combined\n              : nextAfterEvent(opts.byDefault(defaultProvider) || defaultProvider());\n        }),\n    );\n  }\n\n  grow<Ctx extends ContextValues>(\n      opts: ContextValueOpts<\n          Ctx,\n          ElementAdapter,\n          EventKeeper<ElementAdapter[]> | ElementAdapter,\n          AfterEvent<ElementAdapter[]>>,\n  ): ElementAdapter {\n\n    let delegated: ElementAdapter;\n\n    opts.context.get(\n        this.upKey,\n        'or' in opts ? { or: opts.or != null ? afterThe(opts.or) : opts.or } : undefined,\n    )!(adapter => delegated = adapter);\n\n    return element => delegated(element);\n  }\n\n}\n\n/**\n * @internal\n */\nfunction defaultElementAdapter(element: any): ComponentContext {\n  return element[ComponentContext__symbol];\n}\n\n/**\n * A key of bootstrap context value containing combined [[ElementAdapter]] instance.\n *\n * @category Core\n */\nexport const ElementAdapter: ContextUpRef<ElementAdapter, ElementAdapter> = (/*#__PURE__*/ new ElementAdapterKey());\n","/**\n * @packageDocumentation\n * @module wesib/wesib\n */\nimport { filterIt, itsEach, overArray } from 'a-iterable';\nimport { FnContextKey } from 'context-values/updatable';\nimport { isElement } from '../../common';\nimport { ComponentContext__symbol, ComponentMount } from '../../component';\nimport { bootstrapDefault } from '../bootstrap-default';\nimport { ElementAdapter } from './element-adapter';\n\n/**\n * Element mutations observer.\n *\n * It is a `MutationObserver` implementation that:\n * - always observes target's children,\n * - applies {@link ElementAdapter element adapter} to added elements,\n * - tracks mounted components {@link ComponentMount.connected connection state}.\n *\n * A function constructing element observer instance could be obtained from bootstrap context.\n *\n * @category Core\n */\nexport interface ElementObserver extends MutationObserver {\n\n  /**\n   * Configures the observer callback to begin receiving notifications of changes to the DOM that match the given\n   * options.\n   * To stop the MutationObserver (so that none of its callbacks will be triggered any longer), call\n   * [[disconnect]].\n   *\n   * @param target  A DOM node within the DOM tree to watch for changes, and to be the root of a subtree of nodes\n   * to be watched.\n   * @param options  An options that describe what DOM mutations should be reported to the observer's callback.\n   */\n  observe(target: Node, options?: ElementObserverInit): void;\n\n}\n\n/**\n * A key of bootstrap context value containing a function constructing a new [[ElementObserver]] instance.\n *\n * @category Core\n */\nexport const ElementObserver: FnContextKey<[MutationCallback], ElementObserver> = (/*#__PURE__*/ new FnContextKey(\n    'element-observer',\n    {\n      byDefault: bootstrapDefault(bsContext => {\n\n        const adapter = bsContext.get(ElementAdapter);\n        class DefaultElementObserver extends MutationObserver implements ElementObserver {\n\n          constructor(callback: MutationCallback) {\n            super(mutations => {\n              mutations.forEach(mutation => {\n                itsEach(\n                    overArray(mutation.removedNodes),\n                    node => mountOf(node)?.checkConnected(),\n                );\n                itsEach(\n                    filterIt(\n                        overArray(mutation.addedNodes),\n                        isElement,\n                    ),\n                    element => adapter(element)?.mount?.checkConnected(),\n                );\n              });\n              callback(mutations, this);\n            });\n          }\n\n          observe(target: Node, options?: ElementObserverInit): void {\n            super.observe(target, { ...options, childList: true });\n          }\n\n        }\n\n        return callback => new DefaultElementObserver(callback);\n      }),\n    },\n));\n\n/**\n * Element observer initialization options.\n *\n * @category Core\n */\nexport interface ElementObserverInit extends MutationObserverInit {\n\n  /**\n   * Whether mutations to target's children are to be observed.\n   *\n   * Always `true`.\n   */\n  childList?: true;\n\n}\n\n/**\n * @internal\n */\nfunction mountOf(node: any): ComponentMount | undefined {\n  return node[ComponentContext__symbol]?.mount;\n}\n","import { ComponentClass, ComponentFactory } from '../../component/definition';\n\n/**\n * @internal\n */\nexport const ComponentFactory__symbol = (/*#__PURE__*/ Symbol('component-factory'));\n\n/**\n * @internal\n */\nexport function componentFactoryOf<T extends object>(componentType: ComponentClass<T>): ComponentFactory<T> {\n\n  const factory = (componentType as any)[ComponentFactory__symbol];\n\n  if (!factory) {\n    throw new TypeError(`Component is not defined: ${componentType}`);\n  }\n\n  return factory;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKey__symbol, ContextValues, SingleContextKey } from 'context-values';\nimport { html__naming, isQualifiedName, QualifiedName } from 'namespace-aliaser';\nimport { BootstrapWindow, DefaultNamespaceAliaser } from '../../boot/globals';\nimport { componentFactoryOf } from '../../boot/impl/component-factory.symbol.impl';\nimport { Class, PromiseResolver } from '../../common';\nimport { ComponentClass } from './component-class';\n\n/**\n * @internal\n */\nconst CustomElements__key = (/*#__PURE__*/ new SingleContextKey<CustomElements>(\n    'custom-elements',\n    {\n      byDefault: createCustomElements,\n    },\n));\n\n/**\n * Custom elements registry.\n *\n * This is used to register custom elements.\n *\n * Typically implemented by `window.customElements`.\n *\n * @category Core\n */\nexport abstract class CustomElements {\n\n  /**\n   * A key of bootstrap context value containing a `CustomElements` instance used to register custom\n   * elements.\n   *\n   * Target value defaults to `window.customElements` from the window provided under `[BootstrapWindow.key]`.\n   */\n  static get [ContextKey__symbol](): ContextKey<CustomElements> {\n    return CustomElements__key;\n  }\n\n  /**\n   * Defines custom element.\n   *\n   * @param componentTypeOrName  A component class constructor or custom element name. The latter may belong to\n   * namespace to avoid naming conflicts.\n   * @param elementType  A constructor of custom element to define.\n   */\n  abstract define(componentTypeOrName: ComponentClass | QualifiedName, elementType: Class): void;\n\n  /**\n   * Allows to wait for component definition.\n   *\n   * This corresponds to `window.customElements.whenDefined()` method.\n   *\n   * @param componentTypeOrName  Component class constructor or custom element name possibly belonging to some\n   * namespace.\n   *\n   * @return A promise that is resolved when custom element is registered.\n   *\n   * @throws TypeError If `componentType` does not contain a component definition.\n   */\n  abstract whenDefined(componentTypeOrName: ComponentClass | QualifiedName): Promise<void>;\n\n}\n\n/**\n * @internal\n */\nfunction createCustomElements(values: ContextValues): CustomElements {\n\n  const customElements: CustomElementRegistry = values.get(BootstrapWindow).customElements;\n  const nsAlias = values.get(DefaultNamespaceAliaser);\n\n  class WindowCustomElements extends CustomElements {\n\n    define(componentTypeOrName: ComponentClass | string, elementType: Class): void {\n      if (isQualifiedName(componentTypeOrName)) {\n        customElements.define(html__naming.name(componentTypeOrName, nsAlias), elementType);\n        return;\n      }\n\n      const factory = componentFactoryOf(componentTypeOrName);\n      const { name, extend } = factory.elementDef;\n\n      if (!name) {\n        componentResolver(componentTypeOrName).resolve(undefined);\n        return; // Anonymous component.\n      }\n      if (extend && extend.name) {\n        customElements.define(\n            html__naming.name(name, nsAlias),\n            elementType,\n            {\n              extends: extend.name,\n            },\n        );\n      } else {\n        customElements.define(html__naming.name(name, nsAlias), elementType);\n      }\n    }\n\n    whenDefined(componentTypeOrName: ComponentClass | string): Promise<void> {\n      if (isQualifiedName(componentTypeOrName)) {\n        return customElements.whenDefined(html__naming.name(componentTypeOrName, nsAlias));\n      }\n\n      const factory = componentFactoryOf(componentTypeOrName);\n      const { name } = factory.elementDef;\n\n      if (!name) {\n        return componentResolver(componentTypeOrName).promise;\n      }\n\n      return customElements.whenDefined(html__naming.name(name, nsAlias));\n    }\n\n  }\n\n  return new WindowCustomElements();\n}\n\n/**\n * @internal\n */\nconst ComponentResolver__symbol = (/*#__PURE__*/ Symbol('component-resolver'));\n\n/**\n * @internal\n */\nfunction componentResolver(componentType: ComponentClass): PromiseResolver<void> {\n  return (componentType as any)[ComponentResolver__symbol]\n      || ((componentType as any)[ComponentResolver__symbol] = new PromiseResolver());\n}\n","import { SingleContextKey } from 'context-values';\nimport { DefinitionContext } from './definition-context';\n\n/**\n * @internal\n */\nexport const DefinitionContext__key = (/*#__PURE__*/ new SingleContextKey<DefinitionContext>('definition-context'));\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { SingleContextKey, SingleContextRef } from 'context-values';\nimport { QualifiedName } from 'namespace-aliaser';\nimport { BootstrapWindow } from '../../boot/globals';\nimport { Class } from '../../common';\nimport { ComponentDef } from '../component-def';\nimport { DefinitionContext__key } from './definition.context.key.impl';\n\n/**\n * Custom element definition meta.\n *\n * @category Core\n */\nexport interface ElementDef {\n\n  /**\n   * Custom element name.\n   *\n   * The name may belong to some namespace to avoid naming conflicts. I.e. it can be either a string, or\n   * name/namespace tuple.\n   *\n   * When omitted an anonymous component will be registered. Such component is not bound to custom element, but it\n   * still can be mounted.\n   */\n  readonly name?: QualifiedName;\n\n  /**\n   * Existing element to extend by custom one.\n   */\n  readonly extend: ElementDef.Extend;\n\n}\n\n/**\n * A key of definition context value containing a custom element definition.\n *\n * Target value defaults to `HTMLElement` from the window provided under `[BootstrapWindow.key]`,\n * unless `ComponentDef.extend.type` is specified.\n */\nexport const ElementDef: SingleContextRef<ElementDef> = (/*#__PURE__*/ new SingleContextKey<ElementDef>(\n    'element-def',\n    {\n      byDefault(values) {\n\n        const componentType = values.get(DefinitionContext__key).componentType;\n        const { name, extend } = ComponentDef.of(componentType);\n\n        const elementExtend: ElementDef.Extend = {\n          get type() {\n            return extend && extend.type || values.get(BootstrapWindow).HTMLElement;\n          },\n          get name() {\n            return extend && extend.name;\n          },\n        };\n\n        return {\n          get name() {\n            return name;\n          },\n          get extend() {\n            return elementExtend;\n          },\n        };\n      },\n    },\n));\n\n/**\n * @category Core\n */\nexport namespace ElementDef {\n\n  /**\n   * The definition of element to extend by custom one.\n   */\n  export interface Extend {\n\n    /**\n     * The class constructor of element to extend.\n     */\n    readonly type: Class;\n\n    /**\n     * The name of element to extend.\n     *\n     * This is to support `as` attribute of standard HTML element. Note that this is not supported by polyfills.\n     */\n    readonly name?: string;\n\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKey__symbol, ContextValues, ContextValueSpec } from 'context-values';\nimport { OnEvent } from 'fun-events';\nimport { Class } from '../../common';\nimport { ComponentContext } from '../component-context';\nimport { ComponentClass } from './component-class';\nimport { DefinitionContext__key } from './definition.context.key.impl';\nimport { ElementDef } from './element-def';\n\n/**\n * Component definition context.\n *\n * Extends `ContextValues` interface. The values are provided by corresponding providers registered with\n * [[BootstrapSetup.perDefinition]] and [[DefinitionSetup.perDefinition]] methods. All [[BootstrapContext]] values\n * are available too.\n *\n * @category Core\n * @typeparam T  A type of component.\n */\nexport abstract class DefinitionContext<T extends object = any> extends ContextValues {\n\n  /**\n   * A key of definition context value containing the definition context itself.\n   */\n  static get [ContextKey__symbol](): ContextKey<DefinitionContext> {\n    return DefinitionContext__key;\n  }\n\n  /**\n   * Component class constructor.\n   */\n  abstract readonly componentType: ComponentClass<T>;\n\n  /**\n   * Custom element class constructor.\n   *\n   * It is an error accessing this property before the element class is created, e.g. from inside of\n   * `DefinitionListener` or `ComponentDef.define()` function. In these cases you may wish to add a `whenReady()`\n   * callback.\n   */\n  abstract readonly elementType: Class;\n\n  /**\n   * An `OnEvent` sender of component definition context upon its readiness.\n   *\n   * The custom element class is not constructed until component definition is complete.\n   * The registered receiver will be notified when the custom element class is constructed.\n   *\n   * If the custom element class is constructed already, the receiver will be notified immediately.\n   */\n  abstract readonly whenReady: OnEvent<[this]>;\n\n  /**\n   * An `OnEvent` sender of component context upon its instantiation.\n   *\n   * If component instantiated after the receiver is registered, that receiver would receive an instantiated component's\n   * context immediately.\n   *\n   * If component already exists when the receiver is registered, that receiver would receive instantiated component's\n   * context only when/if component is {@link ComponentContext.whenOn connected}. This is to prevent resource leaking\n   * on disconnected components that may be never used again.\n   */\n  abstract readonly whenComponent: OnEvent<[ComponentContext<T>]>;\n\n  /**\n   * Custom element definition.\n   */\n  get elementDef(): ElementDef {\n    return this.get(ElementDef);\n  }\n\n  /**\n   * Provides a value available in the context of each component of the defined component type.\n   *\n   * @typeparam Deps  A type of dependencies.\n   * @typeparam Src  The type of context value sources.\n   * @typeparam Seed  Value seed type.\n   * @param spec  Component context value specifier.\n   *\n   * @returns A function that removes the given context value specifier when called.\n   */\n  abstract perComponent<Deps extends any[], Src, Seed>(\n      spec: ContextValueSpec<ComponentContext<T>, any, Deps, Src, Seed>,\n  ): () => void;\n\n}\n","import { ContextKey, ContextKey__symbol, ContextRegistry, ContextValues, SingleContextKey } from 'context-values';\nimport { BootstrapContext } from '../bootstrap-context';\n\nconst BootstrapContextRegistry__key = (\n    /*#__PURE__*/ new SingleContextKey<BootstrapContextRegistry>('bootstrap-context-registry')\n);\n\n/**\n * @internal\n */\nexport class BootstrapContextRegistry extends ContextRegistry<BootstrapContext> {\n\n  static get [ContextKey__symbol](): ContextKey<BootstrapContextRegistry> {\n    return BootstrapContextRegistry__key;\n  }\n\n  readonly values: ContextValues;\n\n  static create(): BootstrapContextRegistry {\n    return new BootstrapContextRegistry();\n  }\n\n  private constructor() {\n    super();\n    this.provide({ a: BootstrapContextRegistry, is: this });\n    this.values = this.newValues();\n  }\n\n}\n","import { ContextKey, ContextKey__symbol, ContextRegistry, SingleContextKey } from 'context-values';\nimport { ComponentContext } from '../../component';\nimport { bootstrapDefault } from '../bootstrap-default';\n\nconst ComponentContextRegistry__key = new SingleContextKey<ComponentContextRegistry>(\n    'component-context-registry',\n    {\n      byDefault: bootstrapDefault(() => new ComponentContextRegistry()),\n    },\n);\n\n/**\n * @internal\n */\nexport class ComponentContextRegistry extends ContextRegistry<ComponentContext> {\n\n  static get [ContextKey__symbol](): ContextKey<ComponentContextRegistry> {\n    return ComponentContextRegistry__key;\n  }\n\n}\n","import { ContextKey, ContextKey__symbol, ContextRegistry, SingleContextKey } from 'context-values';\nimport { DefinitionContext } from '../../component/definition';\nimport { bootstrapDefault } from '../bootstrap-default';\n\nconst DefinitionContextRegistry__key = new SingleContextKey<DefinitionContextRegistry>(\n    'definition-context-registry',\n    {\n      byDefault: bootstrapDefault(context => new DefinitionContextRegistry(context)),\n    },\n);\n\n/**\n * @internal\n */\nexport class DefinitionContextRegistry extends ContextRegistry<DefinitionContext> {\n\n  static get [ContextKey__symbol](): ContextKey<DefinitionContextRegistry> {\n    return DefinitionContextRegistry__key;\n  }\n\n}\n","import { nextArgs, nextSkip } from 'call-thru';\nimport { EventEmitter, onAny, OnEvent, onEventBy, trackValue } from 'fun-events';\nimport { superClassOf } from '../../common';\nimport { ComponentDef__symbol } from '../../component';\nimport { ComponentClass, DefinitionSetup } from '../../component/definition';\nimport { Unloader } from './unloader.impl';\n\n/**\n * @internal\n */\nexport function onPostDefSetup(\n    componentType: ComponentClass,\n    unloader: Unloader,\n): OnEvent<[DefinitionSetup]> {\n\n  const { on } = postDefSetup(componentType);\n\n  return onEventBy(receiver => {\n    on({\n      supply: receiver.supply.needs(unloader.supply),\n      receive(ctx, setup) {\n\n        const whenReady = setup.whenReady.tillOff(unloader.supply);\n        const whenComponent = setup.whenComponent.tillOff(unloader.supply);\n\n        receiver.receive(ctx, {\n          get componentType() {\n            return setup.componentType;\n          },\n          get whenReady() {\n            return whenReady;\n          },\n          get whenComponent() {\n            return whenComponent;\n          },\n          perDefinition(spec) {\n            return unloader.add(() => setup.perDefinition(spec));\n          },\n          perComponent(spec) {\n            return unloader.add(() => setup.perComponent(spec));\n          },\n        });\n      },\n    });\n  });\n}\n\n/**\n * @internal\n */\nexport interface PostDefSetup<T extends object = any> {\n  readonly on: OnEvent<[DefinitionSetup<T>]>;\n  send(setup: DefinitionSetup): void;\n  setup(setup: DefinitionSetup<T>): void;\n}\n\nconst PostDefSetup__symbol = (/*#__PURE__*/ Symbol('post-def-setup'));\n\n/**\n * @internal\n */\nexport function postDefSetup<T extends object>(componentType: ComponentClass<T>): PostDefSetup<T> {\n  // eslint-disable-next-line no-prototype-builtins\n  if (componentType.hasOwnProperty(PostDefSetup__symbol)) {\n    return (componentType as any)[PostDefSetup__symbol];\n  }\n\n  const tracker = trackValue<DefinitionSetup<T>>();\n  const emitter = new EventEmitter<[DefinitionSetup]>();\n  const onSetup: OnEvent<[DefinitionSetup<T>]> = tracker.read.thru(setup => setup ? nextArgs(setup) : nextSkip());\n  const on = onAny(onSetup, emitter);\n  const superType = superClassOf(componentType, type => ComponentDef__symbol in type);\n\n  if (superType) {\n\n    const superPostDefSetup = postDefSetup(superType);\n\n    on(setup => superPostDefSetup.send(setup));\n  }\n\n  const result: PostDefSetup<T> = {\n    on,\n    send(setup) {\n      emitter.send(setup);\n    },\n    setup(setup) {\n      tracker.it = setup;\n    },\n  };\n\n  Object.defineProperty(componentType, PostDefSetup__symbol, { value: result });\n\n  return result;\n}\n","import { AfterEvent, EventEmitter, OnEvent, onEventBy, trackValue } from 'fun-events';\nimport { ComponentContext } from '../../component';\n\nexport class WhenComponent<T extends object> {\n\n  readonly onCreated: OnEvent<[ComponentContext<T>]>;\n  readonly readNotifier: AfterEvent<[ComponentNotifier<T>]>;\n\n  constructor() {\n\n    const currentRev = trackValue(0);\n    const created = new EventEmitter<[ComponentContext<T>, number]>();\n\n    this.onCreated = onEventBy(receiver => {\n\n      const receiverRev = currentRev.it + 1;\n\n      created.on({\n        supply: receiver.supply,\n        receive: (eventContext, componentContext, notifiedRev) => {\n          if (notifiedRev < receiverRev) {\n            // Notify only receivers added after the last notification\n            receiver.receive(\n                {\n                  onRecurrent(recurrentReceiver) {\n                    eventContext.onRecurrent(recurrentContext => recurrentReceiver(recurrentContext));\n                  },\n                },\n                componentContext,\n            );\n          }\n        },\n      });\n\n      ++currentRev.it;\n    });\n    this.readNotifier = currentRev.read.keep.thru_(\n        rev => (context, notifiedRev) => {\n          created.send(context, notifiedRev);\n          return rev;\n        },\n    );\n  }\n\n}\n\nexport type ComponentNotifier<T extends object> = (\n    this: void,\n    context: ComponentContext<T>,\n    notifiedRev: number,\n) => number;\n","import { nextArgs, nextSkip, noop, valueProvider } from 'call-thru';\nimport { ContextRegistry, ContextValues, ContextValueSpec, SingleContextKey, SingleContextRef } from 'context-values';\nimport { EventEmitter, eventSupply, EventSupply, OnEvent, trackValue, ValueTracker } from 'fun-events';\nimport { Class } from '../../common';\nimport {\n  ComponentContext as ComponentContext_,\n  ComponentContext__symbol,\n  ComponentDef,\n  ComponentEvent,\n  ComponentMount as ComponentMount_,\n} from '../../component';\nimport {\n  ComponentClass,\n  ComponentFactory as ComponentFactory_,\n  DefinitionContext as DefinitionContext_,\n  DefinitionSetup,\n  ElementDef,\n} from '../../component/definition';\nimport { BootstrapContext } from '../bootstrap-context';\nimport { bootstrapDefault } from '../bootstrap-default';\nimport { ComponentContextRegistry } from './component-context-registry.impl';\nimport { DefinitionContextRegistry } from './definition-context-registry.impl';\nimport { postDefSetup } from './post-def-setup.impl';\nimport { WhenComponent } from './when-component.impl';\n\n/**\n * @internal\n */\nexport interface ElementBuilder {\n  readonly definitions: EventEmitter<[DefinitionContext_]>;\n  readonly components: EventEmitter<[ComponentContext_]>;\n  buildElement<T extends object>(this: void, componentType: ComponentClass<T>): ComponentFactory_<T>;\n}\n\n/**\n * @internal\n */\nexport const ElementBuilder: SingleContextRef<ElementBuilder> = (/*#__PURE__*/ new SingleContextKey<ElementBuilder>(\n    'element-builder',\n    {\n      byDefault: bootstrapDefault(newElementBuilder),\n    },\n));\n\nconst enum ComponentStatus {\n  Building,\n  Ready,\n  Off,\n  On,\n}\n\nconst ComponentStatus__symbol = (/*#__PURE__*/ Symbol('component-status'));\n\nfunction newElementBuilder(bsContext: BootstrapContext): ElementBuilder {\n\n  const definitionContextRegistry$global = bsContext.get(DefinitionContextRegistry);\n  const componentContextRegistry$global = bsContext.get(ComponentContextRegistry);\n  const definitions = new EventEmitter<[DefinitionContext_]>();\n  const components = new EventEmitter<[ComponentContext_]>();\n\n  return {\n    definitions,\n    components,\n    buildElement<T extends object>(componentType: ComponentClass<T>) {\n\n      const def = ComponentDef.of(componentType);\n      const whenComponent = new WhenComponent<T>();\n      let componentContextRegistry$perType!: ComponentContextRegistry;\n      const ready = trackValue(false);\n      const whenReady: OnEvent<[]> = ready.read.thru(cls => cls ? nextArgs() : nextSkip());\n      // eslint-disable-next-line prefer-const\n      let definitionContext: DefinitionContext;\n\n      function createComponentContextRegistry(): ContextRegistry<ComponentContext_<T>> {\n        return componentContextRegistry$global.append(componentContextRegistry$perType);\n      }\n\n      class ComponentFactory extends ComponentFactory_ < T > {\n\n        get componentType(): ComponentClass<T> {\n          return definitionContext.componentType;\n        }\n\n        get elementType(): Class {\n          return definitionContext.elementType;\n        }\n\n        get elementDef(): ElementDef {\n          return definitionContext.elementDef;\n        }\n\n        mountTo(element: any): ComponentMount_<T> {\n          if (element[ComponentContext__symbol]) {\n            throw new Error(`Element ${element} already bound to component`);\n          }\n\n          const mount = createComponent({\n            definitionContext,\n            whenComponent,\n            registry: createComponentContextRegistry(),\n            element,\n            elementSuper(key) {\n              return element[key];\n            },\n            createMount(context: ComponentContext_<T>) {\n\n              class ComponentMount extends ComponentMount_<T> {\n\n                get context(): ComponentContext_<T> {\n                  return context;\n                }\n\n                get connected(): boolean {\n                  return elementStatus(element).it === ComponentStatus.On;\n                }\n\n                set connected(value: boolean) {\n                  elementStatus(element).it = value ? ComponentStatus.On : ComponentStatus.Off;\n                }\n\n                checkConnected(): boolean {\n\n                  const el: Element = element;\n                  const doc = el.ownerDocument;\n\n                  return this.connected = doc != null && doc.contains(el);\n                }\n\n              }\n\n              return new ComponentMount();\n            },\n          }).mount as ComponentMount_<T>;\n\n          mount.checkConnected();\n          componentCreated(mount.context);\n\n          return mount;\n        }\n\n      }\n\n      const componentFactory = new ComponentFactory();\n\n      class DefinitionContext extends DefinitionContext_<T> {\n\n        readonly get: ContextValues['get'];\n        readonly whenReady: OnEvent<[this]>;\n\n        get componentType(): ComponentClass<T> {\n          return componentType;\n        }\n\n        get whenComponent(): OnEvent<[ComponentContext_<T>]> {\n          return whenComponent.onCreated;\n        }\n\n        get elementType(): Class {\n          throw new Error('Custom element class is not constructed yet. Consider to use a `whenReady()` callback');\n        }\n\n        constructor() {\n          super();\n\n          const context = this;\n\n          this.whenReady = whenReady.thru_(valueProvider(this)).once as OnEvent<[this]>;\n\n          const definitionContextRegistry = new DefinitionContextRegistry(\n              definitionContextRegistry$global.seedIn(this),\n          );\n\n          definitionContextRegistry.provide({ a: DefinitionContext_, is: this });\n          definitionContextRegistry.provide({ a: ComponentFactory_, is: componentFactory });\n          this.get = definitionContextRegistry.newValues().get;\n          componentContextRegistry$perType = new ComponentContextRegistry(definitionContextRegistry.seedIn(this));\n\n          const definitionSetup: DefinitionSetup<T> = {\n            get componentType() {\n              return componentType;\n            },\n            get whenReady() {\n              return context.whenReady;\n            },\n            get whenComponent() {\n              return context.whenComponent;\n            },\n            perDefinition(spec) {\n              return definitionContextRegistry.provide(spec);\n            },\n            perComponent(spec) {\n              return componentContextRegistry$perType.provide(spec);\n            },\n          };\n\n          def.setup?.(definitionSetup);\n          postDefSetup(componentType).setup(definitionSetup);\n        }\n\n        perComponent<Deps extends any[], Src, Seed>(\n            spec: ContextValueSpec<ComponentContext_<T>, any, Deps, Src, Seed>,\n        ): () => void {\n          return componentContextRegistry$perType.provide(spec);\n        }\n\n      }\n\n      definitionContext = new DefinitionContext();\n\n      def.define?.(definitionContext);\n      definitions.send(definitionContext);\n\n      const elementType = createElementType(\n          definitionContext,\n          whenComponent,\n          createComponentContextRegistry(),\n      );\n\n      Object.defineProperty(definitionContext, 'elementType', {\n        configurable: true,\n        enumerable: true,\n        value: elementType,\n      });\n\n      ready.it = true;\n\n      return componentFactory;\n    },\n  };\n\n  function createElementType<T extends object>(\n      definitionContext: DefinitionContext_<T>,\n      whenComponent: WhenComponent<T>,\n      componentContextRegistry: ComponentContextRegistry,\n  ): Class {\n\n    const elementDef = definitionContext.get(ElementDef);\n\n    class Element extends elementDef.extend.type {\n\n      // Component context reference\n      [ComponentContext__symbol]: ComponentContext_<T>;\n\n      constructor() {\n        super();\n\n        const context = createComponent({\n          definitionContext,\n          whenComponent,\n          registry: componentContextRegistry,\n          element: this,\n          createMount: noop,\n          elementSuper: key => super[key],\n        });\n\n        componentCreated(context);\n      }\n\n      connectedCallback(): void {\n        elementStatus(this).it = ComponentStatus.On;\n      }\n\n      disconnectedCallback(): void {\n        elementStatus(this).it = ComponentStatus.Off;\n      }\n\n    }\n\n    return Element;\n  }\n\n  function createComponent<T extends object>(\n      {\n        definitionContext,\n        whenComponent,\n        registry,\n        element,\n        createMount,\n        elementSuper,\n      }: {\n        definitionContext: DefinitionContext_<T>;\n        whenComponent: WhenComponent<T>;\n        registry: ComponentContextRegistry;\n        element: any;\n        elementSuper(name: PropertyKey): any;\n        createMount(context: ComponentContext_<T>): ComponentMount_<T> | undefined;\n      },\n  ): ComponentContext_<T> {\n\n    const status = trackValue<ComponentStatus>(ComponentStatus.Building);\n    const destructionReason = trackValue<[any] | undefined>();\n\n    status.on(noop).whenOff(reason => destructionReason.it = [reason]);\n\n    const destroyed: OnEvent<[any]> = destructionReason.read.thru(reason => reason ? nextArgs(reason[0]) : nextSkip());\n    const whenDestroyed: OnEvent<[any]> = destroyed.once;\n\n    const whenOff: OnEvent<[]> = status.read.thru_(sts => sts === ComponentStatus.Off ? nextArgs() : nextSkip());\n    const whenOn: OnEvent<[EventSupply]> = status.read.thru_(\n        sts => {\n          if (sts !== ComponentStatus.On) {\n            return nextSkip();\n          }\n\n          const offSupply = eventSupply();\n\n          whenOff.once(() => offSupply.off());\n\n          return nextArgs(offSupply);\n        },\n    );\n\n    let mount: ComponentMount_<T> | undefined;\n    const values = registry.newValues();\n\n    class ComponentContext extends ComponentContext_<T> {\n\n      readonly get = values.get;\n      readonly elementSuper = elementSuper;\n      readonly whenReady: OnEvent<[this]>;\n\n      constructor() {\n        super();\n\n        const whenReady: OnEvent<[this]> = status.read.thru(sts => sts ? nextArgs(this) : nextSkip());\n\n        this.whenReady = whenReady.once;\n      }\n\n      get componentType(): ComponentClass<T> {\n        return definitionContext.componentType;\n      }\n\n      get element(): any {\n        return element;\n      }\n\n      get component(): T {\n        throw new Error('The component is not constructed yet. Consider to use a `whenReady()` callback');\n      }\n\n      get mount(): ComponentMount_<T> | undefined {\n        return mount || (mount = createMount(this));\n      }\n\n      get connected(): boolean {\n        return status.it === ComponentStatus.On;\n      }\n\n      get whenOn(): OnEvent<[EventSupply]> {\n        return whenOn;\n      }\n\n      get whenOff(): OnEvent<[]> {\n        return whenOff;\n      }\n\n      get whenDestroyed(): OnEvent<[any]> {\n        return whenDestroyed;\n      }\n\n      destroy(reason?: any): void {\n        status.done(reason);\n      }\n\n    }\n\n    const context = new ComponentContext();\n    let lastRev = 0;\n\n    context.whenDestroyed(() => removeElement(context));\n    registry.provide({ a: ComponentContext_, is: context });\n\n    augmentElement();\n\n    whenComponent.readNotifier.once(notifier => lastRev = notifier(context, lastRev));\n    context.whenOn(supply => {\n      whenComponent.readNotifier({\n        supply,\n        receive(_, notifier) {\n          lastRev = notifier(context, lastRev);\n        },\n      });\n    });\n    components.send(context);\n\n    const component = newComponent(definitionContext.componentType, context);\n\n    Object.defineProperty(context, 'component', {\n      configurable: true,\n      enumerable: true,\n      value: component,\n    });\n\n    status.it = ComponentStatus.Ready;\n\n    return context;\n\n    function augmentElement(): void {\n      Object.defineProperty(element, ComponentContext__symbol, { value: context });\n      Object.defineProperty(element, ComponentStatus__symbol, { writable: true, value: status });\n    }\n  }\n\n}\n\n/**\n * Creates new component of the given type.\n *\n * It makes component context available under `[ComponentContext__symbol]` key in constructed component.\n * The component context is also available inside component constructor by temporarily assigning it to component\n * prototype.\n *\n * @typeparam T  A type of component.\n * @param type  Component class constructor.\n * @param context  Target component context.\n */\nfunction newComponent<T extends object>(type: ComponentClass<T>, context: ComponentContext_<T>): T {\n\n  const proto = type.prototype as any;\n  const prevContext = proto[ComponentContext__symbol];\n\n  proto[ComponentContext__symbol] = context;\n  try {\n\n    const component = new type(context);\n\n    Object.defineProperty(component, ComponentContext__symbol, { value: context });\n\n    return component;\n  } finally {\n    proto[ComponentContext__symbol] = prevContext;\n  }\n}\n\nfunction elementStatus(element: any): ValueTracker<ComponentStatus> {\n  return element[ComponentStatus__symbol];\n}\n\nfunction componentCreated(context: ComponentContext_): void {\n  context.whenOn.once(\n      () => context.dispatchEvent(new ComponentEvent('wesib:component', { bubbles: true })),\n  );\n}\n\nfunction removeElement(context: ComponentContext_): void {\n\n  const { element, mount } = context;\n\n  if (mount) {\n    mount.connected = false; // Disconnect mounted element\n  }\n\n  const parentNode: Element = element.parentElement;\n\n  if (parentNode) {\n    parentNode.removeChild(element);\n  }\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ComponentContext } from './component-context';\n\n/**\n * A mount of the component to an element.\n *\n * This is constructed when a component is mounted to arbitrary element by [[ComponentFactory.mountTo]] method.\n *\n * Mounted components do not maintain their connection state automatically. It is a calling code responsibility to set\n * their connection state by updating [[ComponentMount.connected]] property. E.g. by calling a\n * [[ComponentMount.checkConnected]] method. An [[ElementObserver]] and [[AutoConnectSupport]] feature could be used to\n * do it automatically.\n *\n * @category Core\n * @typeparam T  A type of component.\n */\nexport abstract class ComponentMount<T extends object = any> {\n\n  /**\n   * Mounted component context.\n   */\n  abstract readonly context: ComponentContext<T>;\n\n  /**\n   * Component connection state.\n   *\n   * Updating this property triggers appropriate listeners registered in [[ComponentContext]].\n   *\n   * The initial state is set by [[checkConnected]] method.\n   */\n  abstract connected: boolean;\n\n  /**\n   * Mounted component.\n   */\n  get component(): T {\n    return this.context.component;\n  }\n\n  /**\n   * An element the component is mounted to.\n   */\n  get element(): any {\n    return this.context.element;\n  }\n\n  /**\n   * Checks whether the mounted component element is actually connected to its owning document.\n   *\n   * Updates the `connected` property and returns its value.\n   *\n   * @returns `true` if the component element is connected, or `false` otherwise.\n   */\n  abstract checkConnected(): boolean;\n\n}\n","import { itsEach, overArray } from 'a-iterable';\nimport { noop, valueProvider } from 'call-thru';\nimport { EventSupply, eventSupply } from 'fun-events';\n\n/**\n * @internal\n */\nexport interface Unloader {\n  readonly supply: EventSupply;\n  add(adder: () => () => void): () => void;\n}\n\nconst doNotAdd = valueProvider(noop);\n\n/**\n * @internal\n */\nexport function newUnloader(): Unloader {\n\n  const unloads: (() => void)[] = [];\n  let add = (adder: () => () => void): () => void => {\n\n    const unload = adder();\n\n    unloads.push(unload);\n\n    return unload;\n  };\n  const supply = eventSupply(() => {\n    add = doNotAdd;\n    itsEach(\n        overArray(unloads).reverse(),\n        unload => unload(),\n    );\n    unloads.length = 0;\n  });\n\n  return {\n    supply,\n    add(adder) {\n      return add(adder);\n    },\n  };\n}\n","import { ElementBuilder } from '../../boot/impl';\nimport { ComponentFactory__symbol } from '../../boot/impl/component-factory.symbol.impl';\nimport { ComponentClass, CustomElements } from '../../component/definition';\nimport { FeatureContext } from '../feature-context';\n\n/**\n * @internal\n */\nexport class ComponentRegistry {\n\n  private _definitionQueue: (() => void)[] = [];\n\n  constructor(private readonly _context: FeatureContext) {\n    _context.whenReady(() => {\n      this._definitionQueue.forEach(definition => definition());\n      delete this._definitionQueue;\n    });\n  }\n\n  get customElements(): CustomElements {\n    return this._context.get(CustomElements);\n  }\n\n  define<T extends object>(componentType: ComponentClass<T>): void {\n    this._definitionQueue.push(() => {\n\n      const elementBuilder = this._context.get(ElementBuilder);\n      const factory = elementBuilder.buildElement(componentType);\n\n      (componentType as any)[ComponentFactory__symbol] = factory;\n\n      this.customElements.define(componentType, factory.elementType);\n    });\n  }\n\n}\n","import { filterIt, mapIt } from 'a-iterable';\nimport { isPresent, nextArgs, NextCall, NextSkip, nextSkip } from 'call-thru';\nimport { ContextRegistry, ContextValueOpts, ContextValues, ContextValueSpec } from 'context-values';\nimport { ContextUpKey } from 'context-values/updatable';\nimport {\n  afterAll,\n  afterEach,\n  AfterEvent,\n  afterEventBy,\n  afterThe,\n  EventKeeper,\n  EventSupply,\n  nextAfterEvent,\n  OnEvent,\n  OnEventCallChain,\n  trackValue,\n} from 'fun-events';\nimport { BootstrapContext } from '../../boot';\nimport {\n  BootstrapContextRegistry,\n  ComponentContextRegistry,\n  DefinitionContextRegistry,\n  ElementBuilder,\n  newUnloader,\n  onPostDefSetup,\n} from '../../boot/impl';\nimport { ArraySet, Class } from '../../common';\nimport { ComponentContext } from '../../component';\nimport { ComponentClass, DefinitionContext, DefinitionSetup } from '../../component/definition';\nimport { FeatureContext } from '../feature-context';\nimport { ComponentRegistry } from './component-registry.impl';\nimport { FeatureClause, FeatureRequest } from './feature-request.impl';\n\nconst FeatureKey__symbol = (/*#__PURE__*/ Symbol('feature-key'));\n\n/**\n * @internal\n */\nexport class FeatureKey extends ContextUpKey<AfterEvent<[FeatureLoader?]>, FeatureClause> {\n\n  static of(feature: Class): FeatureKey {\n    // eslint-disable-next-line no-prototype-builtins\n    return feature.hasOwnProperty(FeatureKey__symbol)\n        ? (feature as any)[FeatureKey__symbol]\n        : ((feature as any)[FeatureKey__symbol] = new FeatureKey(feature));\n  }\n\n  get upKey(): this {\n    return this;\n  }\n\n  private constructor(feature: Class) {\n    super(`feature:${feature.name}`);\n  }\n\n  grow<Ctx extends ContextValues>(\n      opts: ContextValueOpts<\n          Ctx,\n          AfterEvent<[FeatureLoader?]>,\n          EventKeeper<FeatureClause[]> | FeatureClause,\n          AfterEvent<FeatureClause[]>>,\n  ): AfterEvent<[FeatureLoader?]> | null | undefined {\n    return loadFeature(\n        opts.context.get(BootstrapContext),\n        opts.seed.keep.thru(preferredFeatureClause),\n    );\n  }\n\n}\n\nfunction preferredFeatureClause(...clauses: FeatureClause[]): FeatureClause | undefined {\n\n  let required = false;\n  let preferred: FeatureClause | undefined;\n\n  for (const clause of clauses) {\n    switch (clause[1]) {\n      case 'is':\n        required = true;\n        if (!preferred) {\n          preferred = clause;\n        }\n        break;\n      case 'has':\n        preferred = clause;\n        break;\n      case 'needs':\n        required = true;\n    }\n  }\n\n  return required ? preferred : undefined;\n}\n\nfunction loadFeature(\n    bsContext: BootstrapContext,\n    from: AfterEvent<[FeatureClause?]>,\n): AfterEvent<[FeatureLoader?]> {\n  return afterEventBy<[FeatureLoader?]>(receiver => {\n\n    let origin: Class | undefined;\n    let source: AfterEvent<[FeatureLoader?]> = afterThe();\n    let stageId: Promise<FeatureStageId> = Promise.resolve('idle');\n\n    return afterAll({\n      clause: from,\n      deps: loadFeatureDeps(bsContext, from),\n    }).keep.thru_(({ clause: [clause], deps }): NextCall<OnEventCallChain, [FeatureLoader?]> => {\n      if (!clause) {\n        return nextArgs();\n      }\n\n      const [request, , target] = clause;\n\n      if (request.feature === origin) {\n        return nextAfterEvent(source); // Origin didn't change. Reuse the source.\n      }\n\n      origin = request.feature;\n\n      if (target !== origin) {\n        // Originated from replacement feature provider. Reuse its loader.\n        return nextAfterEvent(source = bsContext.get(FeatureKey.of(origin)).keep.thru_(\n            loader => {\n              loader!.to(stageId);\n              stageId = loader!.stage;\n              return loader;\n            },\n        ));\n      }\n\n      // Create feature's own loader\n      const ownLoader = new FeatureLoader(bsContext, request, deps).to(stageId);\n      const ownSource = afterThe(ownLoader);\n\n      return nextAfterEvent(source = afterEventBy<[FeatureLoader]>(\n          rcv => ownSource(rcv).whenOff(() => {\n            stageId = ownLoader.unload();\n          }),\n      ).share()); // Can be accessed again when reused\n    })(receiver);\n  }).keep.thru(\n      preventDuplicateLoader(),\n  );\n}\n\nfunction preventDuplicateLoader():\n    (\n        loader?: FeatureLoader,\n    ) => NextCall<OnEventCallChain, [FeatureLoader?]> | NextSkip {\n\n  let lastLoader: FeatureLoader | null | undefined = null; // Initially `null` to differ from `undefined`\n\n  return (loader?: FeatureLoader) => {\n    if (lastLoader === loader) {\n      return nextSkip();\n    }\n    lastLoader = loader;\n\n    if (!loader) {\n      return nextArgs<[FeatureLoader?]>();\n    }\n\n    return nextArgs<[FeatureLoader?]>(loader);\n  };\n}\n\nfunction loadFeatureDeps(\n    bsContext: BootstrapContext,\n    from: AfterEvent<[FeatureClause?]>,\n): AfterEvent<FeatureLoader[]> {\n  return from.keep.thru_(clause => {\n    if (!clause) {\n      return nextArgs();\n    }\n\n    const [{ def }] = clause;\n    const needs = new ArraySet(def.needs);\n\n    if (!needs.size) {\n      return nextArgs();\n    }\n\n    return nextAfterEvent(\n        afterEach(\n            ...mapIt(\n                needs,\n                dep => bsContext.get(FeatureKey.of(dep)),\n            ),\n        ).keep.thru_(presentFeatureDeps),\n    );\n  });\n}\n\nfunction presentFeatureDeps(...deps: [FeatureLoader?][]): NextCall<OnEventCallChain, FeatureLoader[]> {\n  return nextArgs<FeatureLoader[]>(\n      ...filterIt<FeatureLoader | undefined, FeatureLoader>(\n          mapIt(deps, dep => dep[0]),\n          isPresent,\n      ),\n  );\n}\n\n/**\n * @internal\n */\nexport class FeatureLoader {\n\n  readonly down: Promise<void>;\n  private _stage: Promise<FeatureStage>;\n  private _down!: () => void;\n  readonly state = trackValue(false);\n\n  constructor(\n      readonly bsContext: BootstrapContext,\n      readonly request: FeatureRequest,\n      readonly deps: FeatureLoader[],\n  ) {\n    this.down = new Promise(resolve => this._down = resolve);\n    this._stage = Promise.resolve(new SetupFeatureStage(this));\n  }\n\n  get stage(): Promise<FeatureStageId> {\n    return this._stage.then(stage => stage.after);\n  }\n\n  get ready(): boolean {\n    return this.state.it;\n  }\n\n  to(stageId: Promise<FeatureStageId>): this {\n\n    const lastStage = this._stage;\n\n    this._stage = stageId.then(id => lastStage.then(stage => stage[id]()));\n\n    return this;\n  }\n\n  async setup(): Promise<void> {\n    await (this._stage = this._stage.then(stage => stage.setup()));\n  }\n\n  async init(): Promise<void> {\n    await (this._stage = this._stage.then(stage => stage.init()));\n  }\n\n  async unload(): Promise<FeatureStageId> {\n\n    const prevStage = this._stage;\n\n    delete this._stage; // Unloaded feature should never be accessed again.\n\n    const stage = await prevStage;\n    const stageId = await stage.stop();\n\n    this._down();\n\n    return stageId;\n  }\n\n}\n\ntype FeatureStageId = 'idle' | 'setup' | 'init';\ntype FeatureStageStop = (this: void) => Promise<any>;\n\nabstract class FeatureStage {\n\n  abstract readonly after: FeatureStageId;\n\n  constructor(\n      readonly loader: FeatureLoader,\n      private readonly _stop: FeatureStageStop = () => Promise.resolve(),\n  ) {}\n\n  idle(): Promise<this> {\n    return Promise.resolve(this);\n  }\n\n  abstract setup(): Promise<FeatureStage>;\n\n  abstract init(): Promise<FeatureStage>;\n\n  stop(): Promise<FeatureStageId> {\n    return this._stop().then(() => this.after);\n  }\n\n  protected perDep(action: (dep: FeatureLoader) => Promise<void>): Promise<any> {\n\n    const { deps } = this.loader;\n\n    return Promise.all(deps.map(dep => action(dep)));\n  }\n\n}\n\nclass SetupFeatureStage extends FeatureStage {\n\n  get after(): 'idle' {\n    return 'idle';\n  }\n\n  async setup(): Promise<FeatureStage> {\n    await this.perDep(loader => loader.setup());\n\n    const { bsContext, request: { def } } = this.loader;\n    const [context, supply] = newFeatureContext(bsContext, this.loader);\n\n    def.setup?.(context);\n\n    return new InitFeatureStage(\n        this.loader,\n        context,\n        () => Promise.resolve(supply.off()),\n    );\n  }\n\n  init(): Promise<FeatureStage> {\n    return this.setup().then(stage => stage.init());\n  }\n\n}\n\nclass InitFeatureStage extends FeatureStage {\n\n  get after(): 'setup' {\n    return 'setup';\n  }\n\n  constructor(\n      state: FeatureLoader,\n      private readonly _context: FeatureContext,\n      stop: FeatureStageStop,\n  ) {\n    super(state, stop);\n  }\n\n  setup(): Promise<FeatureStage> {\n    return Promise.resolve(this);\n  }\n\n  async init(): Promise<FeatureStage> {\n    await this.perDep(loader => loader.init());\n\n    const { request: { def } } = this.loader;\n\n    def.init?.(this._context);\n\n    return new ActiveFeatureStage(this);\n  }\n\n}\n\nclass ActiveFeatureStage extends FeatureStage {\n\n  get after(): 'init' {\n    return 'init';\n  }\n\n  constructor(prev: InitFeatureStage) {\n    super(prev.loader, () => prev.stop());\n    prev.loader.state.it = true;\n  }\n\n  setup(): Promise<FeatureStage> {\n    return Promise.resolve(this);\n  }\n\n  init(): Promise<FeatureStage> {\n    return Promise.resolve(this);\n  }\n\n}\n\nfunction newFeatureContext(\n    bsContext: BootstrapContext,\n    loader: FeatureLoader,\n): [FeatureContext, EventSupply] {\n\n  const unloader = newUnloader();\n  let componentRegistry: ComponentRegistry;\n  const definitionContextRegistry = bsContext.get(DefinitionContextRegistry);\n  const componentContextRegistry = bsContext.get(ComponentContextRegistry);\n  const registry = new ContextRegistry<FeatureContext>(bsContext);\n  const elementBuilder = bsContext.get(ElementBuilder);\n  const onDefinition = elementBuilder.definitions.on.tillOff(unloader.supply);\n  const onComponent = elementBuilder.components.on.tillOff(unloader.supply);\n\n  class Context extends FeatureContext {\n\n    readonly get = registry.newValues().get;\n    readonly whenReady: OnEvent<[FeatureContext]>;\n\n    constructor() {\n      super();\n\n      const whenReady: OnEvent<[FeatureContext]> = afterAll({\n        st: loader.state,\n        bs: trackValue<BootstrapContext>().by(bsContext.whenReady),\n      }).thru(\n          ({ st: [ready], bs: [bs] }) => bs && ready ? nextArgs(this) : nextSkip(),\n      );\n\n      this.whenReady = whenReady.once;\n      registry.provide({ a: FeatureContext, is: this });\n      componentRegistry = new ComponentRegistry(this);\n    }\n\n    get feature(): Class {\n      return loader.request.feature;\n    }\n\n    get onDefinition(): OnEvent<[DefinitionContext]> {\n      return onDefinition;\n    }\n\n    get onComponent(): OnEvent<[ComponentContext]> {\n      return onComponent;\n    }\n\n    provide<Deps extends any[], Src, Seed>(\n        spec: ContextValueSpec<BootstrapContext, any, Deps, Src, Seed>,\n    ): () => void {\n      return unloader.add(() => bsContext.get(BootstrapContextRegistry).provide(spec));\n    }\n\n    perDefinition<Deps extends any[], Src, Seed>(\n        spec: ContextValueSpec<DefinitionContext, any, Deps, Src, Seed>,\n    ): () => void {\n      return unloader.add(() => definitionContextRegistry.provide(spec));\n    }\n\n    perComponent<Deps extends any[], Src, Seed>(\n        spec: ContextValueSpec<ComponentContext, any, Deps, Src, Seed>,\n    ): () => void {\n      return unloader.add(() => componentContextRegistry.provide(spec));\n    }\n\n    setupDefinition<T extends object>(componentType: ComponentClass<T>): OnEvent<[DefinitionSetup]> {\n      return onPostDefSetup(componentType, unloader);\n    }\n\n    define<T extends object>(componentType: ComponentClass<T>): void {\n      componentRegistry.define(componentType);\n    }\n\n  }\n\n  return [new Context(), unloader.supply];\n}\n","import { ArraySet, Class, mergeFunctions } from '../../common';\nimport { ComponentDef, ComponentDef__symbol } from '../../component';\nimport { FeatureDef } from '../feature-def';\nimport { FeatureNeedsError } from '../feature-needs-error';\nimport { FeatureKey } from './feature-loader.impl';\nimport { FeatureRequester } from './feature-requester.impl';\n\n/**\n * @internal\n */\nexport type FeatureClause = [FeatureRequest, 'is' | 'needs' | 'has', Class];\n\n/**\n * @internal\n */\nexport type FeatureNeedClause = [FeatureRequest, 'needs' | 'has', Class];\n\n/**\n * @internal\n */\nexport class FeatureRequest {\n\n  readonly def: FeatureDef.Options;\n  private _uses = 0;\n\n  constructor(\n      private readonly _requester: FeatureRequester,\n      readonly feature: Class,\n      private _revoke: () => void,\n  ) {\n    this.def = featureDef(feature);\n  }\n\n  request(clauses: readonly FeatureNeedClause[]): this {\n\n    const requester = this._requester;\n    const { registry } = requester;\n    const isClause: FeatureClause = [this, 'is', this.feature];\n\n    this._revokeBy(registry.provide({\n      a: FeatureKey.of(this.feature),\n      is: isClause,\n    }));\n\n    new ArraySet(this.def.has).forEach(feature => {\n\n      const clause: FeatureNeedClause = [this, 'has', feature];\n\n      this._revokeBy(registry.provide({ a: FeatureKey.of(feature), is: clause }));\n\n      // Request the provided feature _after_ provider\n      const request = requester.request(feature, [...clauses, clause]);\n\n      this._revokeBy(() => request.unuse());\n    });\n\n    new ArraySet(this.def.needs).forEach(feature => {\n\n      const clause: FeatureNeedClause = [this, 'needs', feature];\n\n      const request = requester.request(feature, [...clauses, clause]);\n\n      this._revokeBy(() => request.unuse());\n      this._revokeBy(registry.provide({ a: FeatureKey.of(feature), is: clause }));\n    });\n\n    this._uses = 1;\n\n    return this;\n  }\n\n  reuse(clauses: readonly FeatureNeedClause[]): this {\n    if (!this._uses) {\n      throw new FeatureNeedsError(clauses.map(([{ feature }, reason, need]) => [feature, reason, need]));\n    }\n\n    ++this._uses;\n\n    return this;\n  }\n\n  unuse(): void {\n    if (!--this._uses) {\n      this._revoke();\n    }\n  }\n\n  private _revokeBy(revoke: () => void): void {\n    this._revoke = mergeFunctions(revoke, this._revoke);\n  }\n\n}\n\nfunction featureDef(featureType: Class): FeatureDef.Options {\n\n  let def = FeatureDef.of(featureType);\n\n  if (ComponentDef__symbol in featureType) {\n    def = FeatureDef.merge(\n        def,\n        {\n          init(context) {\n            context.define(featureType);\n          },\n        },\n    );\n\n    const { feature } = ComponentDef.of(featureType);\n\n    if (feature) {\n      def = FeatureDef.merge(def, feature);\n    }\n\n  }\n\n  return def;\n}\n\n","import { ContextKey, ContextKey__symbol, SingleContextKey } from 'context-values';\nimport { BootstrapContext, bootstrapDefault } from '../../boot';\nimport { BootstrapContextRegistry } from '../../boot/impl';\nimport { Class } from '../../common';\nimport { FeatureNeedClause, FeatureRequest } from './feature-request.impl';\n\nconst FeatureRequester__key = (/*#__PURE__*/ new SingleContextKey<FeatureRequester>(\n    'feature-requester',\n    {\n      byDefault: bootstrapDefault(context => new FeatureRequester(context)),\n    },\n));\n\n/**\n * @internal\n */\nexport class FeatureRequester {\n\n  static get [ContextKey__symbol](): ContextKey<FeatureRequester> {\n    return FeatureRequester__key;\n  }\n\n  readonly registry: BootstrapContextRegistry;\n  private readonly _map = new Map<Class, FeatureRequest>();\n\n  constructor(context: BootstrapContext) {\n    this.registry = context.get(BootstrapContextRegistry);\n  }\n\n  request(feature: Class, clauses: readonly FeatureNeedClause[] = []): FeatureRequest {\n\n    const existing = this._map.get(feature);\n\n    if (existing) {\n      return existing.reuse(clauses);\n    }\n\n    const request = new FeatureRequest(this, feature, () => this._map.delete(feature));\n\n    this._map.set(feature, request);\n\n    return request.request(clauses);\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { nextArgs, nextSkip } from 'call-thru';\nimport { AfterEvent, afterEventBy, OnEvent, trackValue } from 'fun-events';\nimport { newNamespaceAliaser } from 'namespace-aliaser';\nimport { Class } from '../../common';\nimport { ComponentClass, ComponentFactory, CustomElements } from '../../component/definition';\nimport { FeatureDef, FeatureRef, FeatureStatus } from '../../feature';\nimport { FeatureKey, FeatureLoader, FeatureRequester } from '../../feature/loader';\nimport { BootstrapContext } from '../bootstrap-context';\nimport { DefaultNamespaceAliaser } from '../globals';\nimport { BootstrapContextRegistry } from '../impl';\nimport { componentFactoryOf } from '../impl/component-factory.symbol.impl';\n\n/**\n * Bootstraps components.\n *\n * Both features and components can be passed as parameters to this function.\n *\n * @category Core\n * @param features  Features and components to enable.\n *\n * @returns Bootstrap context instance.\n */\nexport function bootstrapComponents(...features: Class[]): BootstrapContext {\n\n  const bootstrapContextRegistry = BootstrapContextRegistry.create();\n  const { bootstrapContext, complete } = initBootstrap(bootstrapContextRegistry);\n  const feature = features.length === 1 ? features[0] : bootstrapFeature(features);\n\n  bootstrapContext.get(FeatureRequester).request(feature);\n  bootstrapContext.get(FeatureKey.of(feature))(loader => {\n    loader!.init().then(complete);\n  });\n\n  return bootstrapContext;\n}\n\n/**\n * @internal\n */\nfunction bootstrapFeature(needs: Class[]): Class {\n  return FeatureDef.define(class BootstrapFeature {}, { needs });\n}\n\n/**\n * @internal\n */\nconst enum BootstrapStage {\n  Init,\n  Ready,\n}\n\n/**\n * @internal\n */\nfunction initBootstrap(\n    bootstrapContextRegistry: BootstrapContextRegistry,\n): {\n  bootstrapContext: BootstrapContext;\n  complete(): void;\n} {\n\n  const stage = trackValue<BootstrapStage>(BootstrapStage.Init);\n  const values = bootstrapContextRegistry.values;\n\n  class Context extends BootstrapContext {\n\n    readonly get = values.get;\n    readonly whenReady: OnEvent<[BootstrapContext]>;\n\n    constructor() {\n      super();\n\n      const whenReady: OnEvent<[BootstrapContext]> = stage.read.thru(\n          s => s ? nextArgs(this) : nextSkip(),\n      );\n\n      this.whenReady = whenReady.once;\n      bootstrapContextRegistry.provide({ a: DefaultNamespaceAliaser, by: newNamespaceAliaser });\n      bootstrapContextRegistry.provide({ a: BootstrapContext, is: this });\n    }\n\n    async whenDefined<C extends object>(componentType: ComponentClass<C>): Promise<ComponentFactory<C>> {\n      await new Promise(resolve => this.whenReady(resolve));\n      await this.get(CustomElements).whenDefined(componentType);\n      return componentFactoryOf(componentType);\n    }\n\n    load(feature: Class<any>): FeatureRef {\n\n      interface FeatureInfo {\n        status: FeatureStatus;\n        down?: Promise<void>;\n      }\n\n      const status = afterEventBy<[FeatureInfo]>(receiver => {\n\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        const request = bootstrapContext.get(FeatureRequester).request(feature);\n        const info = trackValue<FeatureInfo>({\n          status: {\n            feature,\n            ready: false,\n          },\n        });\n\n        this.get(FeatureKey.of(feature))({\n          supply: receiver.supply,\n          receive(_ctx, ldr) {\n\n            // Present until `request` revoked\n            // But that happens only when supply is cut off.\n            const loader = ldr as FeatureLoader;\n\n            info.it = {\n              status: {\n                feature: loader.request.feature,\n                ready: loader.ready,\n              },\n              down: loader.down,\n            };\n            if (!loader.ready) {\n              loader.init().then(() => {\n                info.it = {\n                  status: {\n                    feature: loader.request.feature,\n                    ready: true,\n                  },\n                  down: loader.down,\n                };\n              });\n            }\n          },\n        }).whenOff(() => {\n          request.unuse(); // Apply this callback _after_ registration complete,\n                           // to prevent receiver call.\n        });\n\n        info.read(receiver);\n      }).share();\n\n      let whenDown: Promise<void>;\n      const supply = status(({ down }) => {\n        whenDown = down!;\n      });\n      const read: AfterEvent<[FeatureStatus]> = status.keep.thru(\n          info => info.status,\n      ).tillOff(supply);\n\n      class Ref extends FeatureRef {\n\n        get read(): AfterEvent<[FeatureStatus]> {\n          return read;\n        }\n\n        get down(): Promise<void> {\n          return whenDown;\n        }\n\n        dismiss(reason?: any): Promise<void> {\n          supply.off(reason);\n          return whenDown;\n        }\n\n      }\n\n      return new Ref();\n    }\n\n  }\n\n  const bootstrapContext = new Context();\n\n  return {\n    bootstrapContext,\n    complete(): void {\n      stage.it = BootstrapStage.Ready;\n    },\n  };\n}\n","/**\n * @packageDocumentation\n * @module wesib/wesib\n */\nimport { AfterEvent, AfterEvent__symbol, EventKeeper } from 'fun-events';\nimport { FeatureStatus } from './feature-status';\n\n/**\n * Dynamically loaded feature reference.\n *\n * It is returned from [[BootstrapContext.load]] and can be used to read feature load status and unload it.\n *\n * Implements an `EventKeeper` interface by sending a feature load status updates.\n *\n * @category Core\n */\nexport abstract class FeatureRef implements EventKeeper<[FeatureStatus]> {\n\n  /**\n   * An `AfterEvent` sender of feature load status updates.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly read: AfterEvent<[FeatureStatus]>;\n\n  get [AfterEvent__symbol](): AfterEvent<[FeatureStatus]> {\n    return this.read;\n  }\n\n  /**\n   * A promise resolved when feature is unloaded.\n   *\n   * This happens after all feature references dismissed.\n   */\n  abstract readonly down: Promise<void>;\n\n  /**\n   * Dismisses feature reference.\n   *\n   * When all feature references dismissed, then unloads the feature. This removes everything set up by the\n   * feature via [[BootstrapSetup]] and [[DefinitionSetup]].\n   *\n   * @param reason  Arbitrary reason of feature reference dismiss. This will be reported by load status supplies\n   * as their cut off reason.\n   *\n   * @returns A promise resolved when feature is unloaded. This happens only after all feature references dismissed.\n   */\n  abstract dismiss(reason?: any): Promise<void>;\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\n/**\n * A path to sub-state containing element an attributes.\n *\n * Thus, an attribute state path is always something like `[AttributePath__root, 'attribute-name']`.\n *\n * @category Feature\n */\nexport const AttributePath__root = (/*#__PURE__*/ Symbol('attribute'));\n\n/**\n * A path to the named attribute state.\n *\n * @category Feature\n */\nexport type AttributePath = readonly [keyof AttributePath__rootKeys, string];\n\n/**\n * Constructs a named attribute state path.\n *\n * @category Feature\n * @param name  Target attribute name.\n *\n * @return Attribute state path.\n */\nexport function attributePathTo(name: string): AttributePath {\n  return [AttributePath__root, name];\n}\n\n/**\n * @category Feature\n */\n// eslint-disable-next-line @typescript-eslint/class-name-casing\nexport interface AttributePath__rootKeys {\n  [AttributePath__root]: true;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { noop } from 'call-thru';\nimport { StatePath } from 'fun-events';\nimport { ComponentContext } from '../../component';\nimport { AttributeUpdateReceiver } from './attribute-def';\nimport { AttributePath, attributePathTo } from './attribute-path';\nimport { AttributeChangedCallback } from './attribute-registrar';\n\n/**\n * @internal\n */\nexport function attributeStateUpdate<T extends object>(\n    name: string,\n    updateState: boolean | AttributeUpdateReceiver<T> | StatePath = true,\n): AttributeChangedCallback<T> {\n  if (updateState === false) {\n    return noop;\n  }\n  if (updateState === true || typeof updateState === 'function') {\n\n    const key = attributePathTo(name);\n    const update: AttributeUpdateReceiver<T> = updateState === true ? defaultUpdateState : updateState;\n\n    return function (this: T, newValue, oldValue) {\n      update.call(this, key, newValue, oldValue);\n    };\n  }\n  return function (this: T, newValue, oldValue) {\n    ComponentContext.of(this).updateState(updateState, newValue, oldValue);\n  };\n}\n\nfunction defaultUpdateState<T extends object>(\n    this: T,\n    path: AttributePath,\n    newValue: string,\n    oldValue: string | null,\n): void {\n  ComponentContext.of(this).updateState(path, newValue, oldValue);\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { SingleContextKey, SingleContextRef } from 'context-values';\n\n/**\n * Custom element attribute change callback.\n *\n * This function is called whenever a new attribute value assigned.\n *\n * @category Feature\n * @typeparam T  A type of component.\n */\nexport type AttributeChangedCallback<T extends object = any> =\n/**\n * @param this  Component instance.\n * @param newValue  New attribute value.\n * @param oldValue  Previous attribute value, or `null` if there were no value assigned.\n */\n    (this: T, newValue: string, oldValue: string | null) => void;\n\n/**\n * @category Feature\n */\nexport type AttributeRegistrar<T extends object = any> = (name: string, callback: AttributeChangedCallback<T>) => void;\n\n/**\n * @category Feature\n */\nexport const AttributeRegistrar: SingleContextRef<AttributeRegistrar> = (\n    /*#__PURE__*/ new SingleContextKey<AttributeRegistrar>('attribute-registrar')\n);\n","import { ContextKey, ContextKey__symbol, SingleContextKey } from 'context-values';\nimport { BootstrapWindow } from '../../boot/globals';\nimport { Class, mergeFunctions } from '../../common';\nimport { ComponentContext, ComponentMount } from '../../component';\nimport { DefinitionContext } from '../../component/definition';\nimport { AttributeChangedCallback } from './attribute-registrar';\n\nconst AttributeRegistry__key = (/*#__PURE__*/ new SingleContextKey<AttributeRegistry>('attribute-registry'));\n\n/**\n * @internal\n */\nexport class AttributeRegistry<T extends object = any> {\n\n  static get [ContextKey__symbol](): ContextKey<AttributeRegistry> {\n    return AttributeRegistry__key;\n  }\n\n  private readonly _MutationObserver: typeof MutationObserver;\n  private readonly _attrs: { [name: string]: AttributeChangedCallback<T> } = {};\n\n  constructor(ctx: DefinitionContext) {\n    this._MutationObserver = ctx.get(BootstrapWindow).MutationObserver;\n  }\n\n  add(name: string, callback: AttributeChangedCallback<T>): void {\n    this._attrs[name] = mergeFunctions<[string, string | null], void, T>(this._attrs[name], callback);\n  }\n\n  define(elementType: Class): void {\n\n    const attrs = this._attrs;\n    const observedAttributes = Object.keys(attrs);\n\n    if (!observedAttributes.length) {\n      return; // No attributes defined\n    }\n\n    Object.defineProperty(elementType, 'observedAttributes', {\n      configurable: true,\n      enumerable: true,\n      value: observedAttributes,\n    });\n    Object.defineProperty(elementType.prototype, 'attributeChangedCallback', {\n      configurable: true,\n      enumerable: true,\n      value: function (name: string, oldValue: string | null, newValue: string) {\n        (attrs[name] as any).call(ComponentContext.of(this).component, newValue, oldValue);\n      },\n    });\n  }\n\n  mount(mount: ComponentMount<T>): void {\n\n    const element = mount.element;\n    const attrs = this._attrs;\n    const attributeFilter = Object.keys(attrs);\n\n    if (!attributeFilter.length) {\n      return; // No attributes defined\n    }\n\n    const observer = new this._MutationObserver(\n        records => records.forEach(\n            record => {\n\n              const attributeName = record.attributeName as string;\n\n              return (attrs[attributeName] as any).call(\n                  ComponentContext.of(element).component,\n                  element.getAttribute(attributeName),\n                  record.oldValue,\n              );\n            },\n        ),\n    );\n\n    observer.observe(element, {\n      attributes: true,\n      attributeFilter,\n      attributeOldValue: true,\n    });\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { FeatureDef, FeatureDef__symbol } from '../feature-def';\nimport { AttributeChangedCallback, AttributeRegistrar } from './attribute-registrar';\nimport { AttributeRegistry } from './attribute-registry.impl';\n\n/**\n * @internal\n */\nconst AttributesSupport__feature: FeatureDef = {\n  setup(setup) {\n    setup.perDefinition({ as: AttributeRegistry });\n    setup.perDefinition({\n      a: AttributeRegistrar,\n      by(registry: AttributeRegistry) {\n        return <T extends object>(name: string, callback: AttributeChangedCallback<T>) => registry.add(name, callback);\n      },\n      with: [AttributeRegistry],\n    });\n    setup.onDefinition(definitionContext => {\n      // Define element prototype attributes\n      definitionContext.whenReady(({ elementType }) => definitionContext.get(AttributeRegistry).define(elementType));\n    });\n    setup.onComponent(componentContext => {\n\n      const mount = componentContext.mount;\n\n      if (mount) {\n        // Mount element attributes\n        componentContext.get(AttributeRegistry).mount(mount);\n      }\n    });\n  },\n};\n\n/**\n * A feature adding attributes to custom elements.\n *\n * This feature is enabled automatically whenever an `@Attribute`, `@Attributes`, or `@AttributeChanged` decorator\n * applied to component.\n *\n * @category Feature\n */\nexport class AttributesSupport {\n\n  static get [FeatureDef__symbol](): FeatureDef {\n    return AttributesSupport__feature;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { TypedPropertyDecorator } from '../../common';\nimport { ComponentContext, ComponentDef } from '../../component';\nimport { ComponentClass } from '../../component/definition';\nimport { FeatureDef } from '../feature-def';\nimport { AttributeDef } from './attribute-def';\nimport { parseAttributeDef } from './attribute-def.impl';\nimport { AttributeRegistrar } from './attribute-registrar';\nimport { AttributesSupport } from './attributes-support.feature';\n\n/**\n * Creates a decorator for component's property that accesses custom element's attribute.\n *\n * The decorated property accesses corresponding attribute on read, and updates it on setting.\n *\n * This decorator automatically enables [[AttributesSupport]] feature.\n *\n * @category Feature\n * @typeparam T  A type of decorated component class.\n * @param def  Attribute definition or just an attribute name.\n *\n * @return Component property decorator.\n */\nexport function Attribute<T extends ComponentClass>(\n    def?: AttributeDef<InstanceType<T>> | string,\n): TypedPropertyDecorator<T> {\n  return <V>(target: InstanceType<T>, propertyKey: string | symbol, descriptor?: TypedPropertyDescriptor<V>) => {\n\n    const { name, updateState } = parseAttributeDef(target, propertyKey, def);\n    const componentType = target.constructor as T;\n\n    FeatureDef.define(componentType, { needs: AttributesSupport });\n    ComponentDef.define(\n        componentType,\n        {\n          define(definitionContext) {\n            definitionContext.get(AttributeRegistrar)(name, updateState);\n          },\n        },\n    );\n\n    const newDesc: TypedPropertyDescriptor<string | null> = {\n      get(this: InstanceType<T>): string | null {\n        return ComponentContext.of(this).element.getAttribute(name);\n      },\n      set(this: InstanceType<T>, newValue: string | null) {\n        ComponentContext.of(this).element.setAttribute(name, newValue as string);\n      },\n    };\n\n    if (descriptor == null) {\n      // Annotated field\n      Object.defineProperty(target, propertyKey, newDesc);\n      return;\n    }\n\n    return newDesc;\n  };\n}\n","import { ComponentClass } from '../../component/definition';\nimport { AttributeDef } from './attribute-def';\nimport { AttributeChangedCallback } from './attribute-registrar';\nimport { attributeStateUpdate } from './attribute-state-update.impl';\n\n/**\n * @internal\n */\nexport function parseAttributeDef<T extends ComponentClass>(\n    target: InstanceType<T>,\n    propertyKey: string | symbol,\n    opts?: AttributeDef<InstanceType<T>> | string,\n): {\n  readonly name: string;\n  readonly updateState: AttributeChangedCallback<InstanceType<T>>;\n} {\n\n  let name: string;\n  let updateState: AttributeChangedCallback<InstanceType<T>>;\n\n  if (typeof opts === 'string') {\n    name = opts;\n    updateState = attributeStateUpdate(name);\n  } else {\n    if (opts && opts.name) {\n      name = opts.name;\n    } else if (typeof propertyKey !== 'string') {\n      throw new TypeError(\n          'Attribute name is required, as property key is not a string: '\n          + `${target.constructor.name}.${propertyKey.toString()}`,\n      );\n    } else {\n      name = propertyKey;\n    }\n\n    updateState = attributeStateUpdate(name, opts && opts.updateState);\n  }\n\n  return { name, updateState };\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { StatePath } from 'fun-events';\nimport { Class } from '../../common';\nimport { isArray } from '../../common/types.impl';\nimport { Component, ComponentDecorator } from '../../component';\nimport { ComponentClass } from '../../component/definition';\nimport { AttributeUpdateReceiver } from './attribute-def';\nimport { AttributeRegistrar } from './attribute-registrar';\nimport { attributeStateUpdate } from './attribute-state-update.impl';\nimport { AttributesSupport } from './attributes-support.feature';\n\n/**\n * Creates a component decorator declaring supported custom element's attributes.\n *\n * This decorator automatically enables [[AttributesSupport]] feature.\n *\n * @category Feature\n * @typeparam T  A type of decorated component class.\n * @param items  Attributes definition options. Either an attribute definition item, or an array of such items.\n *\n * @return New component decorator.\n */\nexport function Attributes<T extends ComponentClass = Class>(\n    items: Attributes.Item<InstanceType<T>> | readonly Attributes.Item<InstanceType<T>>[],\n): ComponentDecorator<T> {\n  return Component({\n    feature: { needs: AttributesSupport },\n    define(defContext) {\n\n      const registrar = defContext.get(AttributeRegistrar);\n\n      const defineByItem = (item: Attributes.Item<InstanceType<T>>): void => {\n        if (typeof item === 'string') {\n          registrar(item, attributeStateUpdate(item));\n        } else {\n          Object.keys(item).forEach(name => {\n            registrar(name, attributeStateUpdate(name, item[name]));\n          });\n        }\n      };\n\n      if (isArray<Attributes.Item<InstanceType<T>>>(items)) {\n        items.forEach(defineByItem);\n      } else {\n        defineByItem(items);\n      }\n    },\n  });\n}\n\nexport namespace Attributes {\n\n  /**\n   * Attribute definition item.\n   *\n   * This is either an attribute name, or a per-attribute options map.\n   *\n   * @typeparam T  A type of component.\n   */\n  export type Item<T extends object> = Map<T> | string;\n\n  /**\n   * Per-attribute definition options.\n   *\n   * This is a map with attribute names as keys and their state update instructions as values.\n   *\n   * The state update instruction can be one of:\n   * - `false` to not update the component state,\n   * - `true` to update the component state with changed attribute key,\n   * - a state value key to update, or\n   * - an attribute update receiver function with custom state update logic.\n   *\n   * @typeparam T  A type of component.\n   */\n  export interface Map<T extends object> {\n    readonly [name: string]: boolean | StatePath | AttributeUpdateReceiver<T>;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ContextKey, ContextKey__symbol, SingleContextKey } from 'context-values';\nimport { StateTracker } from 'fun-events';\n\n/**\n * @internal\n */\nconst ComponentState__key = (/*#__PURE__*/ new SingleContextKey<ComponentState>('component-state'));\n\n/**\n * Component state tracker.\n *\n * @category Feature\n */\nexport class ComponentState extends StateTracker {\n\n  static get [ContextKey__symbol](): ContextKey<ComponentState> {\n    return ComponentState__key;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ComponentContext, StateUpdater } from '../../component';\nimport { FeatureDef, FeatureDef__symbol } from '../feature-def';\nimport { ComponentState } from './component-state';\n\n/**\n * @internal\n */\nconst StateSupport__feature: FeatureDef = {\n  setup(setup) {\n    setup.perComponent({\n      a: ComponentState,\n      by(context: ComponentContext) {\n\n        const state = new ComponentState();\n\n        context.whenDestroyed(reason => state.done(reason));\n\n        return state;\n      },\n    });\n    setup.perComponent({\n      a: StateUpdater,\n      by(state: ComponentState) {\n        return state.update;\n      },\n      with: [ComponentState],\n    });\n  },\n};\n\n/**\n * Component state support feature.\n *\n * When enabled, it registers the following component context values:\n *\n * - [[StateUpdater]] that allows to update the component state, and\n * - [[ComponentState]] that allows to track component state changes.\n *\n * Other features would use this to notify when the state changes. E.g. [[DomPropertiesSupport]]\n * and [[AttributesSupport]] features issue state updates when needed.\n *\n * @category Feature\n */\nexport class StateSupport {\n\n  static get [FeatureDef__symbol](): FeatureDef {\n    return StateSupport__feature;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { nextArgs } from 'call-thru';\nimport { eventSupply, OnEvent, StatePath, ValueTracker } from 'fun-events';\nimport { ComponentContext } from '../../component';\nimport { ComponentState } from '../state';\nimport { attributePathTo } from './attribute-path';\n\n/**\n * Creates a tracker of custom element's attribute value.\n *\n * Requires [[AttributesSupport]] feature to be enabled and attribute to be defined. E.g. with {@link Attribute\n * @Attribute}, {@link AttributeChanged @AttributeChanged}, or {@link Attributes @Attributes} decorator.\n *\n * @category Feature\n * @param context  Target component context.\n * @param name  Attribute name.\n * @param path  Custom attribute state path.\n *\n * @returns New attribute value tracker.\n */\nexport function trackAttribute(\n    context: ComponentContext,\n    name: string,\n    path: StatePath = attributePathTo(name),\n): ValueTracker<string | null> {\n\n  const { element }: { element: Element } = context;\n  const state = context.get(ComponentState).track(path);\n  const supply = eventSupply();\n  const on: OnEvent<[string | null, string | null]> = state.onUpdate.thru(\n      (_path, newValue, oldValue) => nextArgs(newValue, oldValue),\n  ).tillOff(supply);\n\n  class AttributeTracker extends ValueTracker<string | null> {\n\n    get on(): OnEvent<[string | null, string | null]> {\n      return on;\n    }\n\n    get it(): string | null {\n      return element.getAttribute(name);\n    }\n\n    set it(value: string | null) {\n      if (value == null) {\n        element.removeAttribute(name);\n      } else {\n        element.setAttribute(name, value);\n      }\n    }\n\n    done(reason?: any): this {\n      supply.off(reason);\n      return this;\n    }\n\n  }\n\n  return new AttributeTracker();\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\n/**\n * A path to sub-state containing DOM properties.\n *\n * Thus a property state path is always something like `[DomPropertyPath__root, 'property-name']`.\n *\n * @category Feature\n */\nexport const DomPropertyPath__root = (/*#__PURE__*/ Symbol('dom-property'));\n\n/**\n * A path to the named DOM property state.\n *\n * @category Feature\n */\nexport type DomPropertyPath<K extends PropertyKey = PropertyKey> = readonly [keyof DomPropertyPath__rootKeys, K];\n\n/**\n * Constructs a named DOM property state path.\n *\n * @category Feature\n * @param key  Target property key.\n *\n * @return DOM property state path.\n */\nexport function domPropertyPathTo<K extends PropertyKey = PropertyKey>(key: K): DomPropertyPath<K> {\n  return [DomPropertyPath__root, key];\n}\n\n/**\n * @category Feature\n */\n// eslint-disable-next-line @typescript-eslint/class-name-casing\nexport interface DomPropertyPath__rootKeys {\n  [DomPropertyPath__root]: true;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { DefaultRenderScheduler } from '../../boot/globals';\nimport { ComponentContext } from '../../component';\nimport { ComponentState } from '../state';\nimport { RenderDef } from './render-def';\n\n/**\n * Component element render function interface.\n *\n * It has no arguments. It may return either nothing, or a function. In the latter case the returned function will be\n * called immediately to render the element. It may, in turn, return a render function, and so on.\n *\n * @category Feature\n */\nexport type ElementRender =\n/**\n * @returns Either delegated render, or nothing.\n */\n    (this: void) => void | ElementRender;\n\n/**\n * @category Feature\n */\nexport const ElementRender = {\n\n  /**\n   * Enables component element rendering.\n   *\n   * The `render` call will be scheduled by [[DefaultRenderScheduler]] once component state updated.\n   *\n   * @param context  Target component context.\n   * @param render  Element render function.\n   * @param def  Optional element render definition.\n   */\n  render(\n      this: void,\n      context: ComponentContext,\n      render: ElementRender,\n      def: RenderDef = {},\n  ): void {\n\n    const { offline, path = [] } = def;\n    const stateTracker = context.get(ComponentState).track(path);\n    const schedule = context.get(DefaultRenderScheduler)();\n\n    let rendered = false;\n    const stateSupply = stateTracker.onUpdate(() => {\n      if (offline || context.connected) {\n        scheduleRender();\n      } else {\n        rendered = false;\n      }\n    });\n\n    if (offline) {\n      scheduleRender();\n    } else {\n      context.whenOn(() => {\n        if (!rendered) {\n          scheduleRender();\n        }\n      }).whenOff(reason => {\n        stateSupply.off(reason);\n        rendered = true;\n      });\n    }\n\n    function scheduleRender(): void {\n      rendered = true;\n      schedule(renderElement);\n    }\n\n    function renderElement(): void {\n      for (;;) {\n\n        const newRender = render();\n\n        if (newRender === render || typeof newRender !== 'function') {\n          break;\n        }\n\n        render = newRender;\n      }\n    }\n  },\n\n};\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { TypedPropertyDecorator } from '../../common';\nimport { ComponentDef } from '../../component';\nimport { ComponentClass } from '../../component/definition';\nimport { StateSupport } from '../state';\nimport { ElementRender } from './element-render';\nimport { RenderDef } from './render-def';\n\n/**\n * Component property decorator that declares a rendering method for the component.\n *\n * The decorated method call will be scheduled by [[DefaultRenderScheduler]] once component state updated.\n *\n * The decorated method should have no arguments. It may return either nothing, or a function. In the latter case the\n * returned function will be called immediately to render the element. It may, in turn, return a renderer function,\n * and so on.\n *\n * This decorator automatically enables [[StateSupport]] feature.\n *\n * Utilizes [[ElementRender.render]] function to define rendering.\n *\n * @category Feature\n * @typeparam T  A type of decorated component class.\n * @param def  Non-mandatory render definition.\n *\n * @returns Component method decorator.\n */\nexport function Render<T extends ComponentClass>(def?: RenderDef): TypedPropertyDecorator<T> {\n  return (target: InstanceType<T>, propertyKey: string | symbol) => {\n\n    const componentType = target.constructor as T;\n\n    ComponentDef.define(\n        componentType,\n        {\n          feature: {\n            needs: StateSupport,\n          },\n          define(defContext) {\n            defContext.whenComponent(componentContext => {\n              componentContext.whenReady(() => {\n\n                const component = componentContext.component as any;\n                const render: () => any = component[propertyKey].bind(component);\n\n                ElementRender.render(componentContext, render, def);\n              });\n            });\n          },\n        },\n    );\n  };\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { SingleContextKey, SingleContextRef } from 'context-values';\n\n/**\n * Component shadow content root.\n *\n * @category Feature\n */\nexport type ShadowContentRoot = ShadowRoot;\n\n/**\n * A key of component context value containing a shadow content root instance.\n *\n * This is only available when the component is decorated with {@link AttachShadow @AttachShadow} decorator.\n *\n * @category Feature\n */\nexport const ShadowContentRoot: SingleContextRef<ShadowContentRoot> = (\n    /*#__PURE__*/ new SingleContextKey<ShadowContentRoot>('shadow-content-root')\n);\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\n/**\n * An event related to element's shadow DOM.\n *\n * The following event types supported:\n * - `wesib:shadowAttached` is dispatched when a shadow root is attached to element.\n *   In particular, it is dispatched for components decorated with {@link AttachShadow @AttachShadow}.\n *   The event is dispatched when component is connected for the first time. I.e. when element is added to the document.\n *   This event bubbles and is not cancelable.\n *\n * @category Feature\n */\nexport class ShadowDomEvent extends Event {\n\n  /**\n   * Shadow root this event relates to.\n   */\n  get shadowRoot(): ShadowRoot {\n    return (this.target as Element).shadowRoot as ShadowRoot;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { FnContextKey, FnContextRef } from 'context-values/updatable';\nimport { ComponentContext } from '../../component';\nimport { ShadowContentDef } from './attach-shadow.decorator';\n\n/**\n * Shadow root builder function type.\n *\n * An instance of this function is available in component context and is used by {@link AttachShadow @AttachShadow}\n * decorator to attach shadow root to decorated component's custom element.\n *\n * By default, if shadow root already exists for the component's element, it uses it.\n *\n * Dispatches a `wesib:shadowAttached` event for the found or attached shadow root.\n *\n * @category Feature\n */\nexport type ShadowRootBuilder =\n/**\n * @param context  Target component context.\n * @param init  Shadow root initialization options.\n *\n * @returns A shadow root instance for target component, or `null`/`undefined` if one can not be attached.\n */\n    (context: ComponentContext, init: ShadowContentDef) => ShadowRoot | null | undefined;\n\n/**\n * A key of component context value containing a shadow root builder instance.\n *\n * @category Feature\n */\nexport const ShadowRootBuilder: FnContextRef<Parameters<ShadowRootBuilder>, ReturnType<ShadowRootBuilder>> = (\n    /*#__PURE__*/ new FnContextKey<Parameters<ShadowRootBuilder>, ReturnType<ShadowRootBuilder>>(\n        'shadow-root-builder',\n    )\n);\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { ComponentContext, ComponentContext__symbol } from '../../component';\nimport { FeatureDef, FeatureDef__symbol } from '../feature-def';\nimport { ShadowDomEvent } from './shadow-dom-event';\nimport { ShadowRootBuilder } from './shadow-root-builder';\n\n/**\n * @internal\n */\nconst ShadowDomSupport__feature: FeatureDef = {\n  setup(setup) {\n    setup.provide({ a: ShadowRootBuilder, is: attachShadow });\n  },\n};\n\n/**\n * Shadow root support feature.\n *\n * This feature is automatically enabled when {@link AttachShadow @AttachShadow} decorator is used.\n *\n * @category Feature\n */\nexport class ShadowDomSupport {\n\n  static get [FeatureDef__symbol](): FeatureDef {\n    return ShadowDomSupport__feature;\n  }\n\n}\n\n/**\n * @internal\n */\nfunction attachShadow(context: ComponentContext, init: ShadowRootInit): ShadowRoot | undefined {\n\n  const element = context.element;\n  const shadowRoot = shadowRootOf(element, init);\n\n  if (shadowRoot) {\n    (shadowRoot as any)[ComponentContext__symbol] = context;\n    context.whenOn.once(() => context.dispatchEvent(new ShadowDomEvent('wesib:shadowAttached', { bubbles: true })));\n  }\n\n  return shadowRoot;\n}\n\n/**\n * @internal\n */\nfunction shadowRootOf(element: Element, init: ShadowRootInit): ShadowRoot | undefined {\n\n  const existing = element.shadowRoot;\n\n  if (existing) {\n    // Shadow root already attached. Using it.\n    return existing;\n  }\n  if ('attachShadow' in element) {\n    return element.attachShadow(init);\n  }\n\n  return; // Unable to attach shadow root.\n}\n","/**\n * @packageDocumentation\n * @module @wesib/wesib\n */\nimport { Class } from '../../common';\nimport { Component, ComponentContext, ComponentDecorator, ContentRoot } from '../../component';\nimport { ComponentClass } from '../../component/definition';\nimport { ShadowContentRoot } from './shadow-content-root';\nimport { ShadowDomSupport } from './shadow-dom-support.feature';\nimport { ShadowRootBuilder } from './shadow-root-builder';\n\n/**\n * @internal\n */\nconst defaultShadowContentDef: ShadowContentDef = { mode: 'open' };\n\n/**\n * Shadow content root definition.\n *\n * This is a readonly component shadow root initialization options.\n *\n * @category Feature\n */\nexport type ShadowContentDef = Readonly<ShadowRootInit>;\n\n/**\n * Creates a component decorator that attaches shadow root to decorated component instance.\n *\n * The returned component decorator enables [[ShadowDomSupport]] feature and attaches shadow content root to the\n * component.\n *\n * @category Feature\n * @typeparam T  A type of decorated component class.\n * @param def  Shadow content root definition. Uses `mode: 'open'` by default.\n *\n * @returns New component decorator.\n */\nexport function AttachShadow<T extends ComponentClass = Class>(\n    def: ShadowContentDef = defaultShadowContentDef,\n): ComponentDecorator<T> {\n  return Component({\n    setup(setup) {\n      setup.perComponent(\n          {\n            a: ShadowContentRoot,\n            by(ctx: ComponentContext<InstanceType<T>>) {\n              return ctx.get(ShadowRootBuilder)(ctx, def);\n            },\n          },\n      );\n      setup.perComponent({ // Content root is an alias of shadow root when present.\n        a: ContentRoot,\n        by(context: ComponentContext<InstanceType<T>>) {\n          return context.get(ShadowContentRoot, { or: null });\n        },\n      });\n    },\n    feature: { needs: ShadowDomSupport },\n  });\n}\n","import { NamespaceDef } from 'namespace-aliaser';\n\n/**\n * Default Wesib namespace definition.\n *\n * @category Core\n */\nexport const Wesib__NS: NamespaceDef = (/*#__PURE__*/ new NamespaceDef(\n    'https://wesib.github.io/ns',\n    'b',\n    'wesib',\n));\n","import { nextArg } from 'call-thru';\nimport { ContextValueOpts, ContextValues } from 'context-values';\nimport { ContextUpKey, ContextUpRef } from 'context-values/updatable';\nimport { AfterEvent, afterThe, EventKeeper, EventSender, nextAfterEvent, OnEvent, onSupplied } from 'fun-events';\n\n/**\n * @internal\n */\ntype FetchAgent<Res extends any[]> = (\n    this: void,\n    next: (this: void, request?: Request) => OnEvent<Res>,\n    request: Request,\n) => EventSender<Res>;\n\n/**\n * @internal\n */\ntype CombinedFetchAgent<Res extends any[]> = (\n    this: void,\n    next: (this: void, request: Request) => OnEvent<Res>,\n    request: Request,\n) => OnEvent<Res>;\n\n/**\n * @internal\n */\nexport class FetchAgentKey<Res extends any[]>\n    extends ContextUpKey<CombinedFetchAgent<Res>, FetchAgent<Res>>\n    implements ContextUpRef<CombinedFetchAgent<Res>, FetchAgent<Res>> {\n\n  readonly upKey: ContextUpKey.UpKey<CombinedFetchAgent<Res>, FetchAgent<Res>>;\n\n  constructor(name: string) {\n    super(name);\n    this.upKey = this.createUpKey(\n        opts => opts.seed.keep.thru(\n            (...agents) => {\n              if (agents.length) {\n                return nextArg(combineFetchAgents(agents));\n              }\n\n              const defaultProvider = (): AfterEvent<[CombinedFetchAgent<Res>]> => afterThe(defaultFetchAgent);\n\n              return nextAfterEvent(opts.byDefault(defaultProvider) || defaultProvider());\n            },\n        ),\n    );\n  }\n\n  grow<Ctx extends ContextValues>(\n      opts: ContextValueOpts<\n          Ctx,\n          CombinedFetchAgent<Res>,\n          EventKeeper<FetchAgent<Res>[]> | FetchAgent<Res>,\n          AfterEvent<FetchAgent<Res>[]>>,\n  ): CombinedFetchAgent<Res> {\n\n    let delegated!: CombinedFetchAgent<Res>;\n\n    opts.context.get(\n        this.upKey,\n        'or' in opts ? { or: opts.or != null ? afterThe(opts.or) : opts.or } : undefined,\n    )!(agent => delegated = agent);\n\n    return (next, request) => delegated(next, request);\n  }\n\n}\n\n/**\n * @internal\n */\nfunction defaultFetchAgent<Res extends any[]>(\n    next: (this: void, request: Request) => OnEvent<Res>,\n    request: Request,\n): OnEvent<Res> {\n  return next(request);\n}\n\n/**\n * @internal\n */\nexport function combineFetchAgents<Res extends any[]>(agents: FetchAgent<Res>[]): CombinedFetchAgent<Res> {\n  return (next, request) => {\n\n    const fetch: (agentIdx: number, agentRequest: Request) => OnEvent<Res> = (agentIdx, agentRequest) => {\n\n      const agent = agents[agentIdx];\n\n      if (!agent) {\n        return next(agentRequest);\n      }\n\n      return onSupplied(\n          agent(\n              (nextRequest = agentRequest) => fetch(agentIdx + 1, nextRequest),\n              agentRequest,\n          ),\n      );\n    };\n\n    return fetch(0, request);\n  };\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { ContextUpRef } from 'context-values/updatable';\nimport { EventSender, OnEvent } from 'fun-events';\nimport { FetchAgentKey } from './fetch-agent-key.impl';\n\n/**\n * HTTP fetch agent signature.\n *\n * The agent can be used to alter [[HttpFetch]] processing. For that it should be registered in appropriate context.\n *\n * All registered agents are organized into chain. The first agent in chain is called by [[HttpFetch]].\n */\nexport type HttpFetchAgent =\n/**\n * @param next  Either calls the next agent in chain, or actually fetches the data if this agent is the last one.\n * Accepts an optional `Request` parameter. The original request will be used instead when omitted.\n * @param request  HTTP request.\n *\n * @returns An `EventSender` of response object(s). It is returned either to preceding agent in chain, or as a result of\n * [[HttpFetch]] call.\n */\n    (\n        this: void,\n        next: (this: void, request?: Request) => OnEvent<[Response]>,\n        request: Request,\n    ) => EventSender<[Response]>;\n\nexport namespace HttpFetchAgent {\n\n  /**\n   * Combined HTTP fetch agent signature.\n   *\n   * This is what is available under [[HttpFetchAgent]] key.\n   */\n  export type Combined =\n  /**\n   * @param next  Either calls the next agent in chain, or actually fetches the data if this agent is the last one.\n   * Accepts `Request` parameter.\n   * @param request  HTTP request.\n   *\n   * @returns An `OnEvent` registrar of response object(s) receivers. It is returned as a result of [[HttpFetch]] call.\n   */\n      (\n          this: void,\n          next: (this: void, request: Request) => OnEvent<[Response]>,\n          request: Request,\n      ) => OnEvent<[Response]>;\n\n}\n\n/**\n * A key of context value containing an [[HttpFetchAgent]] instance.\n *\n * The agent returned combines all registered agents into one. If no agent registered it just performs the fetch.\n */\nexport const HttpFetchAgent: ContextUpRef<HttpFetchAgent.Combined, HttpFetchAgent> = (\n    /*#__PURE__*/ new FetchAgentKey<[Response]>('http-fetch-agent')\n);\n","import { BootstrapContext, BootstrapWindow } from '@wesib/wesib';\nimport { EventEmitter, EventSupply, eventSupply, OnEvent, onEventBy } from 'fun-events';\nimport { DomEventDispatcher } from 'fun-events/dom';\nimport { HttpFetch } from './http-fetch';\nimport { HttpFetchAgent } from './http-fetch-agent';\n\nconst HttpFetchAborted = {};\n\n/**\n * @internal\n */\nexport function newHttpFetch(context: BootstrapContext): HttpFetch {\n\n  const window = context.get(BootstrapWindow);\n  const agent = context.get(HttpFetchAgent);\n\n  return (input, init) => agent(fetch, new Request(input, init));\n\n  function fetch(request: Request): OnEvent<[Response]> {\n    return onEventBy(receiver => {\n\n      const responseEmitter = new EventEmitter<[Response]>();\n      let supply: EventSupply;\n\n      if ('AbortController' in window) {\n\n        const abortController = new (window as any).AbortController();\n        const { signal } = abortController;\n\n        supply = eventSupply(reason => {\n          if (reason === HttpFetchAborted) {\n            abortController.abort();\n          }\n        });\n        receiver.supply.whenOff(() => supply.off(HttpFetchAborted)).needs(supply);\n        responseEmitter.on({\n          supply,\n          receive(ctx, response) {\n            receiver.receive(ctx, response);\n          },\n        });\n\n        const customSignal = request.signal;\n\n        if (customSignal) {\n          new DomEventDispatcher(customSignal).on('abort').once(() => abortController.abort());\n          if (customSignal.aborted) {\n            abortController.abort();\n          }\n        }\n\n        request = new Request(request, { signal });\n      } else {\n        supply = responseEmitter.on(receiver);\n      }\n\n      window.fetch(request)\n          .then(response => {\n            responseEmitter.send(response);\n            supply.off();\n          })\n          .catch(reason => supply.off(reason));\n    });\n  }\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { bootstrapDefault } from '@wesib/wesib';\nimport { FnContextKey, FnContextRef } from 'context-values/updatable';\nimport { OnEvent } from 'fun-events';\nimport { newHttpFetch } from './http-fetch.impl';\n\n/**\n * HTTP fetch function signature.\n *\n * This is a function that wraps browser's\n * [fetch()](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch) function and provides\n * additional functionality. E.g. request interception.\n *\n * This function returns an `OnEvent` sender instead of a `Promise`. This allows to report multiple responses.\n * E.g. when the resource refresh requested and delivered. The request is sent whenever a receiver is registered\n * in this sender. When the fetch completes the response supply is cut off, and callbacks registered with its\n * `whenOff()` method are notified. When fetch fails for whatever reason, this reason is passed to these callbacks.\n * The fetch can be aborted by cutting off the response supply. I.e. by calling its `off()` method.\n *\n * An instance of [[HttpFetch]] is available from bootstrap context.\n */\nexport type HttpFetch =\n/**\n * @param input  The resource to fetch. This can either an URL string, or a `Request` object.\n * @param init  Custom settings to apply to the request.\n *\n * @returns An `OnEvent` sender of responses.\n */\n    (this: void, input: RequestInfo, init?: RequestInit) => OnEvent<[Response]>;\n\n/**\n * A key of bootstrap context value containing an [[HttpFetch]] instance.\n */\nexport const HttpFetch: FnContextRef<Parameters<HttpFetch>, ReturnType<HttpFetch>> = (\n    /*#__PURE__*/ new FnContextKey<Parameters<HttpFetch>, ReturnType<HttpFetch>>(\n        'http-fetch',\n        {\n          byDefault: bootstrapDefault(newHttpFetch),\n        },\n    )\n);\n","import {\n  BootstrapContext,\n  BootstrapRoot,\n  ComponentContext,\n  ComponentContext__symbol,\n  ComponentEvent,\n} from '@wesib/wesib';\nimport { ContextKey, ContextKey__symbol, SingleContextKey } from 'context-values';\nimport { EventEmitter, OnEvent, trackValue, ValueTracker } from 'fun-events';\nimport { DomEventDispatcher } from 'fun-events/dom';\n\n/**\n * @internal\n */\nexport type HierarchyRoot = ValueTracker<ComponentContext | undefined>;\n\n/**\n * @internal\n */\nexport const HierarchyRoot = (/*#__PURE__*/ new SingleContextKey<HierarchyRoot>(\n    'hierarchy-root',\n    {\n      byDefault: bsContext => {\n\n        const root: Element = bsContext.get(BootstrapRoot);\n\n        new DomEventDispatcher(root).on<ComponentEvent>('wesib:component')(\n            ({ context }: ComponentEvent) => context.get(HierarchyUpdates).issue(),\n        );\n\n        return trackValue();\n      },\n    },\n));\n\nconst HierarchyUpdates__key = (/*#__PURE__*/ new SingleContextKey<HierarchyUpdates>(\n    'hierarchy-updates',\n    {\n      byDefault: context => new HierarchyUpdates(context.get(ComponentContext)),\n    },\n));\n\n/**\n * @internal\n */\nexport class HierarchyUpdates {\n\n  static get [ContextKey__symbol](): ContextKey<HierarchyUpdates> {\n    return HierarchyUpdates__key;\n  }\n\n  readonly on: OnEvent<[ComponentContext]>;\n  readonly send: (this: void) => void;\n  readonly issue: () => void;\n\n  constructor(context: ComponentContext) {\n\n    const updates = new EventEmitter<[ComponentContext]>();\n    const hierarchyRoot = context.get(BootstrapContext).get(HierarchyRoot);\n\n    this.on = updates.on;\n    this.send = () => updates.send(context);\n    this.issue = () => {\n\n      const parent = findParentContext(context);\n\n      if (parent) {\n        parent[0].get(HierarchyUpdates).send();\n      } else {\n        hierarchyRoot.it = context;\n      }\n    };\n  }\n\n}\n\n/**\n * @internal\n */\nexport function findParentContext(of: ComponentContext): [ComponentContext, boolean] | undefined {\n\n  const root = of.get(BootstrapContext).get(BootstrapRoot);\n  let element: Node = of.element;\n  let immediate = true;\n\n  if (element === root) {\n    return;\n  }\n  for (;;) {\n\n    const parent = element.parentNode;\n\n    if (!parent) {\n      return;\n    }\n\n    const ctx: ComponentContext = (parent as any)[ComponentContext__symbol];\n\n    if (ctx) {\n      return [ctx, immediate];\n    }\n    if (parent === root) {\n      return;\n    }\n\n    immediate = false;\n    element = parent;\n  }\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { BootstrapContext, ComponentContext } from '@wesib/wesib';\nimport { ContextKey, ContextKey__symbol, ContextValues, ContextValueSpec, SingleContextKey } from 'context-values';\nimport { AfterEvent, afterEventBy, EventKeeper, eventSupply, trackValue } from 'fun-events';\nimport { newHierarchyRegistry } from './hierarchy-registry.impl';\nimport { findParentContext, HierarchyRoot, HierarchyUpdates } from './hierarchy-updates.impl';\n\n/**\n * @internal\n */\nconst HierarchyContext__key = (/*#__PURE__*/ new SingleContextKey<HierarchyContext>(\n    'hierarchy-context',\n    {\n      byDefault: context => newHierarchyContext(context.get(ComponentContext)),\n    },\n));\n\n/**\n * Component's hierarchy context.\n *\n * Passes provided values to hierarchy contexts of nested components.\n *\n * Available as component context value.\n *\n * @typeparam T  A type of component.\n */\nexport abstract class HierarchyContext<T extends object = any> extends ContextValues {\n\n  /**\n   * A key of component context value containing its hierarchy context instance.\n   */\n  static get [ContextKey__symbol](): ContextKey<HierarchyContext> {\n    return HierarchyContext__key;\n  }\n\n  /**\n   * Component context.\n   */\n  abstract readonly context: ComponentContext<T>;\n\n  /**\n   * An `AfterEvent` keeper of enclosing component's hierarchy context.\n   *\n   * May send `undefined` when component is outside of hierarchy. E.g. when it is disconnected.\n   */\n  abstract readonly up: AfterEvent<[HierarchyContext?]>;\n\n  /**\n   * Provides hierarchy context value.\n   *\n   * The provided value will be available in context itself, as well as in all nested hierarchy contexts.\n   *\n   * Note that the provided value key has to `ContextUpKey`.\n   *\n   * @typeparam Deps  Dependencies tuple type.\n   * @typeparam Src  Source value type.\n   * @typeparam Seed  Value seed type.\n   * @param spec  Context value specifier.\n   *\n   * @returns A function that removes the given context value specifier when called.\n   */\n  abstract provide<Deps extends any[], Src, Seed>(\n      spec: ContextValueSpec<HierarchyContext<T>, any, Deps, Src | EventKeeper<Src[]>, Seed>,\n  ): () => void;\n\n}\n\n/**\n * @internal\n */\nfunction newHierarchyContext<T extends object>(context: ComponentContext<T>): HierarchyContext<T> {\n\n  const hierarchyRoot = context.get(BootstrapContext).get(HierarchyRoot);\n  const up = afterEventBy<[HierarchyContext?]>(\n      receiver => {\n\n        const parentHierarchy = trackValue<HierarchyContext>();\n        const rootSupply = eventSupply().needs(receiver.supply);\n        const parentSupply = eventSupply().needs(receiver.supply);\n        const updateParent = (): void => {\n\n          const parent = findParentContext(context);\n\n          if (parent) {\n\n            const [parentCtx, immediate] = parent;\n\n            parentHierarchy.it = parentCtx.get(HierarchyContext);\n            rootSupply.off();\n            if (immediate) {\n              parentSupply.off();\n            }\n          } else {\n            parentHierarchy.it = undefined;\n          }\n        };\n\n        hierarchyRoot.read({\n          supply: rootSupply,\n          receive: () => context.connected && updateParent(),\n        });\n        parentHierarchy.read.consume(\n            newParent => newParent && newParent.context.get(HierarchyUpdates).on(updateParent),\n        ).needs(parentSupply);\n        parentHierarchy.read(receiver);\n        context.whenOn({\n          supply: receiver.supply,\n          receive: (_, onSupply) => {\n            updateParent();\n            onSupply.whenOff(\n                () => {\n                  Promise.resolve().then(\n                      () => context.connected || (parentHierarchy.it = undefined),\n                  );\n                },\n            );\n          },\n        });\n      },\n  ).share();\n  const registry = newHierarchyRegistry<T>(up);\n  const values = registry.newValues();\n\n  class HierarchyCtx extends HierarchyContext<T> {\n\n    readonly get = values.get;\n\n    get context(): ComponentContext<T> {\n      return context;\n    }\n\n    get up(): AfterEvent<[HierarchyContext?]> {\n      return up;\n    }\n\n    provide<Deps extends any[], Src, Seed>(\n        spec: ContextValueSpec<HierarchyContext<T>, any, Deps, Src | EventKeeper<Src[]>, Seed>,\n    ): () => void {\n      return registry.provide(spec);\n    }\n\n  }\n\n  return new HierarchyCtx();\n}\n","import { nextArgs } from 'call-thru';\nimport { ContextRegistry } from 'context-values';\nimport { AfterEvent, nextAfterEvent } from 'fun-events';\nimport { HierarchyContext } from './hierarchy-context';\n\n/**\n * @internal\n */\nexport function newHierarchyRegistry<T extends object>(\n    up: AfterEvent<[HierarchyContext?]>,\n): ContextRegistry<HierarchyContext<T>> {\n  return new ContextRegistry(\n      key => up.keep.thru(\n          upper => upper ? nextAfterEvent(upper.get(key as any)) : nextArgs(),\n      ) as any,\n  );\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { ComponentClass, ComponentContext } from '@wesib/wesib';\nimport { SingleContextKey, SingleContextRef } from 'context-values';\nimport { ValueTracker } from 'fun-events';\nimport { ElementNodeList } from './element-node-list';\n\n/**\n * Arbitrary element node within component tree. Either bound to some component or not.\n */\nexport type ElementNode =\n    | RawElementNode\n    | ComponentNode;\n\n/**\n * Component tree node representing arbitrary element.\n *\n * This is a base interface of all element node implementations.\n */\nexport interface ComponentTreeNode {\n\n  /**\n   * The element itself.\n   */\n  readonly element: any;\n\n  /**\n   * A context of component bound to this element, if any.\n   */\n  readonly context?: ComponentContext<any>;\n\n  /**\n   * Parent element node, or `null` if element has no parent.\n   */\n  readonly parent: ElementNode | null;\n\n  /**\n   * Selects component nodes matching the given selector.\n   *\n   * @param selector  Simple CSS selector of nested components.\n   * @param mode  Component nodes pick mode.\n   *\n   * @returns Dynamically updatable list of matching component nodes.\n   */\n  select(\n      selector: string,\n      mode?: ComponentPickMode,\n  ): ElementNodeList<ComponentNode>;\n\n  /**\n   * Selects component nodes of the given type.\n   *\n   * @param componentType  Nested component type with custom element name.\n   * @param mode  Component nodes pick mode.\n   *\n   * @returns Dynamically updatable list of matching component nodes.\n   */\n  select<T extends object>(\n      componentType: ComponentClass<T>,\n      mode?: ComponentPickMode,\n  ): ElementNodeList<ComponentNode<T>>;\n\n  /**\n   * Selects element nodes matching the given selector.\n   *\n   * @param selector  Simple CSS selector of nested elements. E.g. CSS class selector.\n   * @param mode  A mode of node picking from component tree.\n   *\n   * @returns Dynamically updatable list of matching element nodes.\n   */\n  select(\n      selector: string,\n      mode: ElementPickMode,\n  ): ElementNodeList;\n\n  /**\n   * Tracks element attribute.\n   *\n   * @param name  Target attribute name.\n   *\n   * @returns Target attribute's value tracker.\n   */\n  attribute(name: string): ValueTracker<string | null, string>;\n\n  /**\n   * Tracks element element property.\n   *\n   * The changes are tracked with `StateTracker`. So it is expected that the target property notifies on its changes\n   * with state updater. E.g. when it is defined by `@DomProperty` decorator.\n   *\n   * @param key  Target property key.\n   *\n   * @returns Target property's value tracker.\n   */\n  property<V>(key: PropertyKey): ValueTracker<V>;\n\n}\n\n/**\n * Element node representing raw element not bound to any component.\n */\nexport interface RawElementNode extends ComponentTreeNode {\n\n  readonly context?: undefined;\n\n}\n\n/**\n * Element node representing an element bound to some component.\n */\nexport interface ComponentNode<T extends object = any> extends ComponentTreeNode {\n\n  readonly context: ComponentContext<T>;\n\n}\n\n/**\n * A key of component context value containing a component node instance.\n */\nexport const ComponentNode: SingleContextRef<ComponentNode> = (\n    /*#__PURE__*/ new SingleContextKey<ComponentNode>('component-node')\n);\n\n/**\n * A mode of node picking from component tree.\n */\nexport interface ElementPickMode {\n\n  /**\n   * Set to `true` to select arbitrary nodes. Otherwise - select only component nodes.\n   */\n  all?: boolean;\n\n  /**\n   * Set to `true` to select from entire subtree. Otherwise - select from element child nodes only.\n   */\n  deep?: boolean;\n\n}\n\n/**\n * A mode that picks component nodes from component tree.\n */\nexport interface ComponentPickMode extends ElementPickMode {\n\n  all?: false;\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { AIterable, ArrayLikeIterable } from 'a-iterable';\nimport { AfterEvent, AfterEvent__symbol, EventKeeper, EventSender, OnEvent, OnEvent__symbol } from 'fun-events';\nimport { ElementNode } from './element-node';\n\n/**\n * Dynamically updatable list of selected element nodes.\n *\n * It is an iterable of nodes.\n *\n * Implements an `EventSender` interface by sending added and removed nodes arrays.\n *\n * Implements an `EventKeeper` interface by sending updated node list.\n */\nexport abstract class ElementNodeList<N extends ElementNode = ElementNode>\n    extends AIterable<N>\n    implements EventSender<[N[], N[]]>, EventKeeper<[ElementNodeList<N>]> {\n\n  /**\n   * An `OnEvent` sender of list changes. Sends arrays of added and removed nodes.\n   *\n   * The `[OnEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly onUpdate: OnEvent<[N[], N[]]>;\n\n  get [OnEvent__symbol](): OnEvent<[N[], N[]]> {\n    return this.onUpdate;\n  }\n\n  /**\n   * An `AfterEvent` keeper of current node list.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly read: AfterEvent<[ElementNodeList<N>]>;\n\n  get [AfterEvent__symbol](): AfterEvent<[ElementNodeList<N>]> {\n    return this.read;\n  }\n\n  /**\n   * An `AfterEvent` keeper of node list changes.\n   *\n   * Sends an iterables of added and removed nodes. Sends current nodes immediately upon receiver registration.\n   */\n  abstract readonly track: AfterEvent<[ArrayLikeIterable<N>, ArrayLikeIterable<N>]>;\n\n  /**\n   * An `AfterEvent` keeper of the first node in this list.\n   */\n  abstract readonly first: AfterEvent<[N?]>;\n\n}\n","import {\n  BootstrapContext,\n  ComponentClass,\n  DefaultNamespaceAliaser,\n  ElementObserver,\n  ElementObserverInit,\n  isElement,\n} from '@wesib/wesib';\nimport { AIterable, ArrayLikeIterable, filterIt, itsEach, itsFirst, itsIterator, mapIt, overArray } from 'a-iterable';\nimport { isPresent, nextArg, nextArgs } from 'call-thru';\nimport { AfterEvent, afterEventBy, afterSupplied, EventEmitter, eventSupply, OnEvent, onEventBy } from 'fun-events';\nimport { html__naming } from 'namespace-aliaser';\nimport { ElementNode, ElementPickMode } from './element-node';\nimport { ElementNodeList as ElementNodeList_ } from './element-node-list';\n\n/**\n * @internal\n */\nconst WATCH_DEEP: ElementObserverInit = { subtree: true };\n\n/**\n * @internal\n */\nexport function elementNodeList<N extends ElementNode>(\n    bsContext: BootstrapContext,\n    root: Element,\n    selectorOrType: string | ComponentClass<any>,\n    nodeOf: (node: Element, optional?: boolean) => N | undefined,\n    { deep, all }: ElementPickMode,\n): ElementNodeList_<N> {\n\n  const updates = new EventEmitter<[N[], N[]]>();\n  const init = deep ? WATCH_DEEP : undefined;\n  let cache = new Set<Element>();\n  let iterable: Iterable<N> | undefined;\n  let selector: string | undefined;\n\n  if (typeof selectorOrType === 'string') {\n    selector = selectorOrType;\n  } else {\n    bsContext.whenDefined(selectorOrType).then(({ elementDef: { name } }) => {\n      iterable = undefined;\n      if (name) {\n        selector = html__naming.name(name, bsContext.get(DefaultNamespaceAliaser));\n        if (updates.size) {\n\n          const selected = refresh();\n\n          if (selected.size) {\n\n            const added = Array.from(\n                filterIt<N | undefined, N>(\n                    mapIt(selected, node => nodeOf(node)),\n                    isPresent,\n                ),\n            );\n\n            if (added.length) {\n              updates.send(added, []);\n            }\n          }\n        }\n      }\n    });\n  }\n\n  const observer = bsContext.get(ElementObserver)(update);\n  let nodeList: ElementNodeList;\n\n  const onUpdate = onEventBy<[N[], N[]]>(receiver => {\n\n    const firstReceiver = !updates.size;\n    const supply = updates.on(receiver);\n\n    if (firstReceiver) {\n      refresh();\n      observer.observe(root, init);\n    }\n\n    return eventSupply(reason => {\n      supply.off(reason);\n      if (!updates.size) {\n        observer.disconnect();\n      }\n    }).needs(supply);\n  });\n  const read = afterEventBy<[ElementNodeList]>(onUpdate.thru(() => nodeList), () => [nodeList]);\n  const onTrackUpdate: OnEvent<[ArrayLikeIterable<N>, ArrayLikeIterable<N>]> = onUpdate.thru(\n      (added, removed) => nextArgs(AIterable.of(added), AIterable.of(removed)),\n  );\n  const track = afterEventBy<[ArrayLikeIterable<N>, ArrayLikeIterable<N>]>(receiver => {\n\n    const initialEmitter = new EventEmitter<[ArrayLikeIterable<N>, ArrayLikeIterable<N>]>();\n\n    initialEmitter.on(receiver);\n    initialEmitter.send(nodeList, AIterable.of([]));\n\n    onTrackUpdate(receiver);\n  });\n  const first: AfterEvent<[N?]> = afterSupplied(read).keep.thru(\n      list => nextArg(itsFirst(list)),\n  );\n\n  if (!all) {\n    root.addEventListener('wesib:component', event => {\n\n      const element = event.target as Element;\n\n      if (cache.has(element)) {\n\n        const node = nodeOf(element) as N;\n\n        updates.send([node], []);\n      }\n    });\n  }\n\n  class ElementNodeList extends ElementNodeList_<N> {\n\n    get onUpdate(): OnEvent<[N[], N[]]> {\n      return onUpdate;\n    }\n\n    get read(): AfterEvent<[ElementNodeList]> {\n      return read;\n    }\n\n    get track(): AfterEvent<[ArrayLikeIterable<N>, ArrayLikeIterable<N>]> {\n      return track;\n    }\n\n    get first(): AfterEvent<[N?]> {\n      return first;\n    }\n\n    [Symbol.iterator](): Iterator<N> {\n      return itsIterator(iterable || (iterable = filterIt<N | undefined, N>(\n          mapIt(\n              elements(),\n              element => nodeOf(element),\n          ),\n          isPresent,\n      )));\n    }\n\n  }\n\n  return nodeList = new ElementNodeList();\n\n  function elements(): Set<Element> {\n    return updates.size ? cache : refresh();\n  }\n\n  function refresh(): Set<Element> {\n    iterable = undefined;\n    return cache = select();\n  }\n\n  function select(): Set<Element> {\n\n    const sel = selector;\n\n    if (!sel) {\n      return new Set();\n    }\n    if (deep) {\n      return new Set(overArray(root.querySelectorAll(sel)));\n    }\n    return new Set(\n        filterIt(\n            overArray(root.children),\n            item => item.matches(sel),\n        ),\n    );\n  }\n\n  function update(mutations: MutationRecord[]): void {\n\n    const added: N[] = [];\n    const removed: N[] = [];\n\n    mutations.forEach(mutation => {\n      itsEach(\n          filterIt<N | undefined, N>(\n              mapIt(overArray(mutation.removedNodes), removeNode),\n              isPresent,\n          ),\n          node => removed.push(node),\n      );\n      itsEach(\n          filterIt<N | undefined, N>(\n              mapIt(overArray(mutation.addedNodes), addNode),\n              isPresent,\n          ),\n          node => added.push(node),\n      );\n    });\n    if (added.length || removed.length) {\n      updates.send(added, removed);\n    }\n  }\n\n  function addNode(node: Node): N | undefined {\n    if (!isElement(node)) {\n      return;\n    }\n    if (selector && node.matches(selector) && !cache.has(node)) {\n      cache.add(node);\n      return nodeOf(node);\n    }\n    return;\n  }\n\n  function removeNode(node: Node): N | undefined {\n    if (!isElement(node)) {\n      return;\n    }\n    if (!cache.delete(node)) {\n      return;\n    }\n    return nodeOf(node, true);\n  }\n\n}\n","import { BootstrapContext, BootstrapWindow } from '@wesib/wesib';\nimport {\n  EventEmitter,\n  eventReceiver,\n  EventReceiver, eventSupply,\n  EventSupply,\n  noEventSupply,\n  OnEvent,\n  onEventBy,\n  ValueTracker,\n} from 'fun-events';\n\n/**\n * @internal\n */\nclass AttributesObserver {\n\n  private readonly _emitters = new Map<string, EventEmitter<[string, string | null]>>();\n  private _observer?: MutationObserver;\n\n  constructor(private readonly _bs: BootstrapContext, readonly element: Element) {\n  }\n\n  private get observer(): MutationObserver {\n    if (this._observer) {\n      return this._observer;\n    }\n\n    const Observer: typeof MutationObserver = (this._bs.get(BootstrapWindow) as any).MutationObserver;\n\n    return this._observer = new Observer(mutations => this._update(mutations));\n  }\n\n  observe(name: string, receiver: EventReceiver<[string, string | null]>): EventSupply {\n\n    const self = this;\n    const observer = this.observer;\n    const emitter = this._emitter(name);\n    const rcv = eventReceiver(receiver);\n    const supply = emitter.on({\n      supply: eventSupply(() => {\n        this._emitters.delete(name);\n        observer.disconnect();\n        if (this._emitters.size) {\n          reconnect();\n        } else {\n          this._observer = undefined;\n        }\n      }).needs(rcv.supply),\n      receive: (ctx, newValue, oldValue) => rcv.receive(ctx, newValue, oldValue),\n    });\n\n    observer.disconnect();\n    reconnect();\n\n    return supply;\n\n    function reconnect(): void {\n      self._update(observer.takeRecords());\n      observer.observe(self.element, {\n        attributes: true,\n        attributeOldValue: true,\n        attributeFilter: Array.from(self._emitters.keys()),\n      });\n    }\n  }\n\n  private _update(mutations: MutationRecord[]): void {\n    mutations.forEach(mutation => {\n\n      const attributeName = mutation.attributeName as string;\n      const emitter = this._emitters.get(attributeName);\n\n      if (emitter) {\n        emitter.send(this.element.getAttribute(attributeName) as string, mutation.oldValue);\n      }\n    });\n  }\n\n  private _emitter(name: string): EventEmitter<[string, string | null]> {\n\n    const emitter = new EventEmitter<[string, string | null]>();\n\n    this._emitters.set(name, emitter);\n\n    return emitter;\n  }\n\n}\n\n/**\n * @internal\n */\nclass AttributeTracker extends ValueTracker<string | null, string> {\n\n  private readonly _updates = new EventEmitter<[string, string | null]>();\n  readonly on: OnEvent<[string, string | null]>;\n\n  constructor(\n      private readonly _observer: AttributesObserver,\n      private readonly _name: string,\n  ) {\n    super();\n\n    let observeSupply = noEventSupply();\n\n    this.on = onEventBy(receiver => {\n      if (!this._updates.size) {\n        observeSupply = this._observer.observe(\n            _name,\n            (newValue, oldValue) => this._updates.send(newValue, oldValue),\n        );\n      }\n      receiver.supply.needs(observeSupply);\n      this._updates.on(receiver).whenOff(reason => {\n        if (!this._updates.size) {\n          observeSupply.off(reason);\n        }\n      });\n    });\n  }\n\n  get it(): string | null {\n    return this._observer.element.getAttribute(this._name);\n  }\n\n  set it(value: string | null) {\n    this._observer.element.setAttribute(this._name, value as string);\n  }\n\n  done(reason?: any): this {\n    this._updates.done(reason);\n    return this;\n  }\n\n}\n\n/**\n * @internal\n */\nexport class NodeAttributes {\n\n  private readonly _attrs = new Map<string, AttributeTracker>();\n  private readonly _observer: AttributesObserver;\n\n  constructor(bs: BootstrapContext, element: any) {\n    this._observer = new AttributesObserver(bs, element);\n  }\n\n  get(name: string): ValueTracker<string | null, string> {\n\n    const existing = this._attrs.get(name);\n\n    if (existing) {\n      return existing;\n    }\n\n    const created = new AttributeTracker(this._observer, name);\n\n    this._attrs.set(name, created);\n\n    return created;\n  }\n\n}\n","import { ComponentContext, ComponentState, domPropertyPathTo } from '@wesib/wesib';\nimport { EventEmitter, eventSupply, noEventSupply, OnEvent, ValueTracker } from 'fun-events';\n\n/**\n * @internal\n */\nclass PropertyTracker<T> extends ValueTracker<T> {\n\n  private readonly _updates = new EventEmitter<[T, T]>();\n  private _supply = noEventSupply();\n\n  constructor(\n      private readonly _element: any,\n      private readonly _key: PropertyKey,\n  ) {\n    super();\n  }\n\n  get on(): OnEvent<[T, T]> {\n    return this._updates.on;\n  }\n\n  bind(context: ComponentContext): void {\n\n    const propertyState = context.get(ComponentState).track(domPropertyPathTo(this._key));\n\n    this._supply = propertyState.onUpdate({\n      supply: eventSupply().whenOff(reason => this._updates.done(reason)),\n      receive: (_ctx, _path, newValue: any, oldValue: any) => this._updates.send(newValue, oldValue),\n    });\n  }\n\n  get it(): T {\n    return this._element[this._key];\n  }\n\n  set it(value: T) {\n    this._element[this._key] = value;\n  }\n\n  done(reason?: any): this {\n    this._supply.off(reason);\n    return this;\n  }\n\n}\n\n/**\n * @internal\n */\nexport class NodeProperties {\n\n  private readonly _props = new Map<PropertyKey, PropertyTracker<any>>();\n  private _context?: ComponentContext<any>;\n\n  constructor(private readonly _element: any) {\n  }\n\n  bind(context: ComponentContext): void {\n    this._context = context;\n    this._props.forEach(prop => prop.bind(context));\n  }\n\n  get<T>(key: PropertyKey): ValueTracker<T> {\n\n    const existing = this._props.get(key);\n\n    if (existing) {\n      return existing;\n    }\n\n    const created = new PropertyTracker<any>(this._element, key);\n\n    if (this._context) {\n      created.bind(this._context);\n    }\n    this._props.set(key, created);\n\n    return created;\n  }\n\n}\n","import {\n  BootstrapContext,\n  ComponentClass,\n  ComponentContext,\n  ComponentContext__symbol,\n  ComponentEvent,\n  ElementAdapter,\n} from '@wesib/wesib';\nimport { ValueTracker } from 'fun-events';\nimport { ComponentNode, ComponentTreeNode, ElementPickMode, ElementNode as ElementNode_ } from './element-node';\nimport { ElementNodeList } from './element-node-list';\nimport { elementNodeList } from './element-node-list.impl';\nimport { NodeAttributes } from './node-attributes.impl';\nimport { NodeProperties } from './node-properties.impl';\n\n/**\n * @internal\n */\nconst ElementNode__symbol = (/*#__PURE__*/ Symbol('element-node'));\n\n/**\n * @internal\n */\nclass ElementNode implements ComponentTreeNode {\n\n  private readonly _attrs: NodeAttributes;\n  private readonly _props: NodeProperties;\n\n  constructor(private readonly _bs: BootstrapContext, readonly element: Element) {\n    this._attrs = new NodeAttributes(_bs, element);\n    this._props = new NodeProperties(element);\n    (element as any)[ElementNode__symbol] = this;\n\n    const context = (element as any)[ComponentContext__symbol] as ComponentContext<any> | undefined;\n\n    if (context) {\n      this._bind(context);\n    } else {\n      element.addEventListener('wesib:component', event => this._bind((event as ComponentEvent).context));\n    }\n  }\n\n  get context(): ComponentContext<any> | undefined {\n    return (this.element as any)[ComponentContext__symbol];\n  }\n\n  get parent(): ElementNode_ | null {\n\n    const parent = this.element.parentNode;\n\n    return parent && elementNodeOf(this._bs, parent as Element);\n  }\n\n  select(selector: string | ComponentClass<any>, mode?: ElementPickMode): ElementNodeList<any> {\n    return selectNodes(this._bs, this.element, selector, mode);\n  }\n\n  attribute(name: string): ValueTracker<string | null, string> {\n    return this._attrs.get(name);\n  }\n\n  property<V>(key: PropertyKey): ValueTracker<V> {\n    return this._props.get(key);\n  }\n\n  private _bind(context: ComponentContext): void {\n    this._props.bind(context);\n  }\n\n}\n\n/**\n * @internal\n */\nexport function elementNodeOf(bsContext: BootstrapContext, element: Element, optional?: boolean): ElementNode_ {\n\n  const existing: ElementNode_ = (element as any)[ElementNode__symbol];\n\n  return (existing || optional) ? existing : new ElementNode(bsContext, element);\n}\n\n/**\n * @internal\n */\nfunction selectNodes(\n    bsContext: BootstrapContext,\n    root: Element,\n    selector: string | ComponentClass<any>,\n    mode: ElementPickMode = {},\n): ElementNodeList<any> {\n  if (mode.all) {\n    return elementNodeList<ElementNode_>(\n        bsContext,\n        root,\n        selector,\n        (element, optional) => elementNodeOf(bsContext, element, optional),\n        mode,\n    );\n  }\n\n  const adapter = bsContext.get(ElementAdapter);\n\n  return elementNodeList<ComponentNode>(\n      bsContext,\n      root,\n      selector,\n      (element, optional) => adapter(element) && elementNodeOf(bsContext, element, optional) as ComponentNode,\n      mode,\n  );\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { BootstrapContext, ComponentContext, FeatureDef, FeatureDef__symbol, StateSupport } from '@wesib/wesib';\nimport { ComponentNode } from './element-node';\nimport { elementNodeOf } from './element-node.impl';\n\n/**\n * @internal\n */\nconst ComponentTreeSupport__feature: FeatureDef = {\n  needs: StateSupport,\n  setup(setup) {\n    setup.perComponent({\n      a: ComponentNode,\n      by(context: ComponentContext) {\n        return elementNodeOf(context.get(BootstrapContext), context.element) as ComponentNode;\n      },\n    });\n  },\n};\n\n/**\n * Component tree support feature.\n *\n * Provides a [[ComponentNode]] instance for each component.\n */\nexport class ComponentTreeSupport {\n\n  static get [FeatureDef__symbol](): FeatureDef {\n    return ComponentTreeSupport__feature;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { ContextKey, ContextKey__symbol, SingleContextKey } from 'context-values';\nimport { AfterEvent, AfterEvent__symbol, EventKeeper, EventSender, OnEvent, OnEvent__symbol } from 'fun-events';\nimport { OnDomEvent } from 'fun-events/dom';\nimport { EnterPageEvent, LeavePageEvent, NavigationEvent, StayOnPageEvent } from './navigation.event';\nimport { Page } from './page';\nimport { PageParam } from './page-param';\n\n/**\n * @internal\n */\nconst Navigation__key = (/*#__PURE__*/ new SingleContextKey<Navigation>('navigation'));\n\n/**\n * Browser navigation service.\n *\n * Expected to be used as a [History] and [Location] APIs replacement.\n *\n * Fires additional navigation events the browser does not support natively.\n *\n * Implements an `EventSender` interface by sending {@link NavigationEvent navigation events} to registered receivers.\n *\n * Implements an `EventKeeper` interface by sending current {@link Page page} to registered receivers.\n *\n * Available as bootstrap context value when [[NavigationSupport]] feature is enabled.\n *\n * [History]: https://developer.mozilla.org/en-US/docs/Web/API/History\n * [Location]: https://developer.mozilla.org/en-US/docs/Web/API/Location\n */\nexport abstract class Navigation implements EventSender<[NavigationEvent]>, EventKeeper<[Page]> {\n\n  static get [ContextKey__symbol](): ContextKey<Navigation> {\n    return Navigation__key;\n  }\n\n  /**\n   * The number of element in navigation history.\n   */\n  abstract readonly length: number;\n\n  /**\n   * An `OnDomEvent` registrar of enter page event receivers.\n   */\n  abstract readonly onEnter: OnDomEvent<EnterPageEvent>;\n\n  /**\n   * An `OnDomEvent` registrar of leave page event receivers.\n   *\n   * These receivers may cancel navigation by calling `preventDefault()` method of received event.\n   */\n  abstract readonly onLeave: OnDomEvent<LeavePageEvent>;\n\n  /**\n   * An `OnDomEvent` registrar of stay on page event receivers.\n   *\n   * These receivers are informed when navigation has been cancelled by one of leave page event receivers,\n   * navigation failed due to e.g. invalid URL, or when another navigation request initiated before the page left.\n   */\n  abstract readonly onStay: OnDomEvent<StayOnPageEvent>;\n\n  /**\n   * An `OnEvent` registrar of navigation events receivers.\n   *\n   * The `[OnEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly on: OnEvent<[NavigationEvent]>;\n\n  get [OnEvent__symbol](): OnEvent<[NavigationEvent]> {\n    return this.on;\n  }\n\n  /**\n   * An `AfterEvent` registrar of current page receivers.\n   *\n   * The `[AfterEvent__symbol]` property is an alias of this one.\n   */\n  abstract readonly read: AfterEvent<[Page]>;\n\n  get [AfterEvent__symbol](): AfterEvent<[Page]> {\n    return this.read;\n  }\n\n  /**\n   * Goes to the previous page in navigation history.\n   *\n   * Calling this method is the same as calling `go(-1)`.\n   */\n  back(): void {\n    this.go(-1);\n  }\n\n  /**\n   * Goes to the next page in navigation history.\n   *\n   * Calling this method is the same as calling `go(1)`.\n   */\n  forward(): void {\n    this.go(1);\n  }\n\n  /**\n   * Loads a page from navigation history, identified by its relative location to the current page.\n   *\n   * For example `-1` navigates to previous page, while `1` navigates to the next one. If you specify an out-of-bounds\n   * value (for instance, specifying -1 when there are no previously-visited pages in navigation history), this method\n   * silently has no effect.\n   *\n   * @param delta  Relative location in navigation history to navigate to. The absent value or value of `0` reloads\n   * the current page.\n   */\n  abstract go(delta?: number): void;\n\n  /**\n   * Reloads current page.\n   *\n   * Calling this method is the same as calling `go()`.\n   */\n  reload(): void {\n    this.go();\n  }\n\n  /**\n   * Opens a page by navigating to the given `target`.\n   *\n   * Appends an entry to navigation history.\n   *\n   * @param target  Either navigation target or URL to navigate to.\n   * @fires PreNavigateEvent#wesib:preNavigate  On window object prior to actually navigate.\n   * Then navigates to the `target`, unless the event cancelled.\n   * @fires NavigateEvent@wesib:navigate  On window object when navigation succeed.\n   *\n   * @returns A promise resolved to navigated page, or to `null` otherwise.\n   */\n  abstract open(target: Navigation.Target | string | URL): Promise<Page | null>;\n\n  /**\n   * Replaces current navigation history entry with the given `target`.\n   *\n   * @param target  Either navigation target or URL to replace current history entry with.\n   * @fires PreNavigateEvent#wesib:preNavigate  On window object prior to actually update the history.\n   * Then navigates to the `target`, unless the event cancelled.\n   * @fires NavigateEvent@wesib:navigate  On window object when history updated.\n   *\n   * @returns A promise resolved to navigated page, or to `null` otherwise.\n   */\n  abstract replace(target: Navigation.Target | string | URL): Promise<Page | null>;\n\n  /**\n   * Replaces current page URL with the given one.\n   *\n   * Does not alter current page state, and does not trigger any events.\n   *\n   * @param url  An URL to replace the\n   *\n   * @returns Current page with updated URL.\n   */\n  abstract update(url: string | URL): Page;\n\n  /**\n   * Creates parameterized navigation instance and assigns a page parameter to apply to target page.\n   *\n   * @typeparam T  Parameter value type.\n   * @typeparam I  Parameter input type.\n   * @param ref  A reference to page navigation parameter to apply.\n   * @param input  Parameter input to use when constructing its value.\n   *\n   * @returns New parameterized navigation instance.\n   */\n  abstract with<T, I>(ref: PageParam.Ref<T, I>, input: I): Navigation.Parameterized;\n\n}\n\nexport namespace Navigation {\n\n  /**\n   * Parameterized navigation.\n   *\n   * Allows to assign target page parameters prior to navigating to it.\n   */\n  export interface Parameterized {\n\n    /**\n     * Applies parameter to navigation target page.\n     *\n     * @typeparam T  Parameter value type.\n     * @typeparam I  Parameter input type.\n     * @param ref  A reference to page navigation parameter to apply.\n     * @param input  Parameter input to use when constructing its value.\n     *\n     * @returns New parameterized navigation instance.\n     */\n    with<T, I>(ref: PageParam.Ref<T, I>, input: I): Parameterized;\n\n    /**\n     * Opens a page by navigating to the given `target` with provided page parameters.\n     *\n     * Appends an entry to navigation history.\n     *\n     * @param target  Either navigation target or URL to navigate to.\n     * @fires PreNavigateEvent#wesib:preNavigate  On window object prior to actually navigate.\n     * Then navigates to the `target`, unless the event cancelled.\n     * @fires NavigateEvent@wesib:navigate  On window object when navigation succeed.\n     *\n     * @returns A promise resolved to navigated page, or to `null` otherwise.\n     */\n    open(target: Navigation.Target | string | URL): Promise<Page | null>;\n\n    /**\n     * Replaces the most recent entry in navigation history with the given `target` and provided page parameters.\n     *\n     * @param target  Either navigation target or URL to replace the latest history entry with.\n     * @fires PreNavigateEvent#wesib:preNavigate  On window object prior to actually update the history.\n     * Then navigates to the `target`, unless the event cancelled.\n     * @fires NavigateEvent@wesib:navigate  On window object when history updated.\n     *\n     * @returns A promise resolved to navigated page, or to `null` otherwise.\n     */\n    replace(target: Navigation.Target | string | URL): Promise<Page | null>;\n\n  }\n\n  /**\n   * Navigation target.\n   *\n   * This is passed to [[Navigation.open]] and [[Navigation.replace]] methods.\n   */\n  export interface Target {\n\n    /**\n     * An URL to update the browser location string to.\n     */\n    readonly url?: string | URL;\n\n    /**\n     * Opaque data to apply to session history. I.e. either push or replace.\n     */\n    readonly data?: any;\n\n    /**\n     * New window title.\n     */\n    readonly title?: string;\n\n  }\n\n  /**\n   * Navigation target with URL value.\n   */\n  export interface URLTarget extends Target {\n\n    readonly url: URL;\n\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { Page } from './page';\nimport { PageParamContext } from './page-param-context';\n\n/**\n * A key of {@link PageParam.Ref page parameter request} property containing requested page parameter.\n */\nexport const PageParam__symbol = (/*#__PURE__*/ Symbol('page-param'));\n\n/**\n * Page navigation parameter.\n *\n * Can applied before navigation happened (i.e. to [[LeavePageEvent]]). Then it will be available to the target page\n * both before and after navigation.\n *\n * @typeparam T  Parameter value type.\n * @typeparam I  Parameter input type.\n */\nexport abstract class PageParam<T, I> implements PageParam.Ref<T, I> {\n\n  get [PageParam__symbol](): this {\n    return this;\n  }\n\n  /**\n   * Creates page parameter handle.\n   *\n   * This method is called when {@link Page.put assigning new page parameter}.It is called at most once per request,\n   * unless this parameter is assigned already. A {@link PageParam.Handle.put} method will be called instead\n   * in the latter case.\n   *\n   * @param page  A page to assign navigation parameter to.\n   * @param input  Parameter input used to construct its initial value.\n   * @param context  Page parameter context.\n   *\n   * @returns New page parameter value handle.\n   */\n  abstract create(page: Page, input: I, context: PageParamContext): PageParam.Handle<T, I>;\n\n}\n\nexport namespace PageParam {\n\n  /**\n   * Page navigation parameter reference.\n   *\n   * @typeparam T  Parameter value type.\n   * @typaparam I  Parameter input type.\n   */\n  export interface Ref<T, I> {\n\n    /**\n     * Referred page navigation parameter instance.\n     */\n    readonly [PageParam__symbol]: PageParam<T, I>;\n\n  }\n\n  /**\n   * Page navigation parameter value handle.\n   *\n   * Holds and maintains parameter value.\n   *\n   * Created by {@link PageParam.create} method.\n   *\n   * @typeparam T  Parameter value type.\n   * @typaparam I  Parameter input type.\n   */\n  export interface Handle<T, I> {\n\n    /**\n     * Returns current parameter value.\n     *\n     * @returns Parameter value.\n     */\n    get(): T;\n\n    /**\n     * Puts page parameter value.\n     *\n     * This method is called when {@link Page.put re-assigning page parameter}. It is called when page parameter\n     * is assigned already and can be used to update it. The update logic is up to the implementation.\n     *\n     * @param input  Parameter input to use when updating its value.\n     */\n    put(input: I): void;\n\n    /**\n     * Transfers parameter to target page.\n     *\n     * This is called right before [[LeavePageEvent]] is fired for each parameter handle of current page.\n     *\n     * @param to  A page to transfer parameter to.\n     * @param when  When the transfer happens. Either `pre-open`, `pre-replace`, `open`, or `return`. The latter is used\n     * when return to page generated by another app version. E.g. from the page that has been reloaded.\n     *\n     * @returns New parameter handle instance for target page, or `undefined` if nothing to transfer.\n     */\n    transfer?(to: Page, when: 'pre-open' | 'pre-replace' | 'enter' | 'return'): Handle<T, I> | undefined;\n\n    /**\n     * This method is called when the page this parameter created for is entered.\n     *\n     * @param page  Entered page.\n     * @param when  When the page is entered. Either `init`, `open`, `replace`, `enter`, or `return`.\n     */\n    enter?(page: Page, when: 'init' | 'open' | 'replace' | 'enter' | 'return'): void;\n\n    /**\n     * This method is called when the page this parameter created for is left.\n     */\n    leave?(): void;\n\n    /**\n     * This method is called when page navigation aborted and target page won't be reached.\n     *\n     * The handle won't be accessed after this method call.\n     *\n     * @param at  The page the browser remains at.\n     */\n    stay?(at: Page): void;\n\n    /**\n     * This method is called when the page this parameter is created for is removed from navigation history.\n     *\n     * The handle won't be accessed after this method call.\n     */\n    forget?(): void;\n\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { ContextValues } from 'context-values';\n\n/**\n * Page parameter context.\n *\n * Provides values available in bootstrap context.\n */\nexport abstract class PageParamContext extends ContextValues {\n}\n","import { BootstrapContext, bootstrapDefault, BootstrapWindow } from '@wesib/wesib';\nimport { itsEach } from 'a-iterable';\nimport { noop } from 'call-thru';\nimport { ContextKey, ContextKey__symbol, ContextRegistry, SingleContextKey } from 'context-values';\nimport { ValueTracker } from 'fun-events';\nimport { Navigation } from './navigation';\nimport { Page } from './page';\nimport { PageParam, PageParam__symbol } from './page-param';\nimport { PageParamContext } from './page-param-context';\n\nconst NavHistory__key = (/*#__PURE__*/ new SingleContextKey<NavHistory>(\n    'nav-history',\n    {\n      byDefault: bootstrapDefault(ctx => new NavHistory(ctx)),\n    },\n));\n\n/**\n * @internal\n */\nexport const NAV_DATA_KEY = 'wesib:navigation:data' as const;\n\n/**\n * @internal\n */\nexport interface PartialNavData {\n  readonly uid?: string;\n  readonly id?: number;\n  readonly data: any;\n}\n\n/**\n * @internal\n */\nexport interface NavData extends PartialNavData {\n  readonly uid: string;\n  readonly id: number;\n}\n\n/**\n * @internal\n */\nexport interface NavDataEnvelope {\n  readonly [NAV_DATA_KEY]: NavData;\n}\n\nfunction extractNavData(state: any): PartialNavData {\n  return state == null || typeof state !== 'object' ? { data: state } : state[NAV_DATA_KEY];\n}\n\n/**\n * @internal\n */\nexport class NavHistory {\n\n  static get [ContextKey__symbol](): ContextKey<NavHistory> {\n    return NavHistory__key;\n  }\n\n  private readonly _document: Document;\n  private readonly _location: Location;\n  private readonly _history: History;\n  private readonly _entries = new Map<number, PageEntry>();\n  private readonly _uid: string;\n  private _lastId = 0;\n\n  constructor(private readonly _context: BootstrapContext) {\n    const window = _context.get(BootstrapWindow);\n\n    this._document = window.document;\n    this._location = window.location;\n    this._history = window.history;\n    this._uid = btoa(String(Math.random()));\n  }\n\n  init(): PageEntry {\n\n    const { data } = extractNavData(this._history.state);\n    const entry = this.newEntry({\n      url: new URL(this._location.href),\n      data,\n      title: this._document.title,\n    });\n\n    this._entries.set(entry.id, entry);\n    entry.schedule(() => {\n      entry.enter('init');\n      this._history.replaceState(this._historyState(entry), '');\n    });\n\n    return entry;\n  }\n\n  newEntry(target: Navigation.URLTarget): PageEntry {\n    return new PageEntry(this._context, ++this._lastId, target);\n  }\n\n  open(\n      toEntry: PageEntry,\n      tracker: ValueTracker<PageEntry>,\n  ): void {\n\n    const { page: { title = '', url } } = toEntry;\n\n    this._history.pushState(\n        this._historyState(toEntry),\n        title,\n        url.href,\n    );\n\n    this._enter('open', toEntry, tracker);\n  }\n\n  private _enter(\n      when: 'open' | 'enter',\n      toEntry: PageEntry,\n      tracker: ValueTracker<PageEntry>,\n  ): void {\n\n    const fromEntry = tracker.it;\n\n    this._entries.set(toEntry.id, toEntry);\n\n    try {\n      // Forget all entries starting from next one\n      for (let e = fromEntry.next; e; e = e.next) {\n        this._forget(e);\n      }\n    } finally {\n      toEntry.prev = fromEntry;\n      fromEntry.next = toEntry;\n      toEntry.schedule(() => {\n        try {\n          fromEntry.leave();\n        } finally {\n          toEntry.enter(when);\n        }\n      });\n      tracker.it = toEntry;\n    }\n  }\n\n  replace(\n      toEntry: PageEntry,\n      tracker: ValueTracker<PageEntry>,\n  ): void {\n\n    const fromEntry = tracker.it;\n    const { page: { title = '', url } } = toEntry;\n\n    this._history.replaceState(\n        this._historyState(toEntry),\n        title,\n        url.href,\n    );\n\n    this._entries.set(toEntry.id, toEntry);\n\n    const prev = fromEntry.prev;\n\n    if (prev) {\n      toEntry.prev = prev;\n      prev.next = toEntry;\n    }\n\n    toEntry.schedule(() => {\n      try {\n        fromEntry.leave();\n      } finally {\n        try {\n          this._forget(fromEntry);\n        } finally {\n          toEntry.enter('replace');\n        }\n      }\n    });\n    tracker.it = toEntry;\n  }\n\n  popState(\n      popState: PopStateEvent,\n      tracker: ValueTracker<PageEntry>,\n  ): PageEntry | undefined {\n\n    const { state } = popState;\n\n    if (state == null) {\n      // Hash change\n      if (this._history.state == null) {\n        // Not a return\n        return this._changeHash(tracker);\n      }\n      return; // Already handled by `hashchange` handler\n    }\n\n    const fromEntry = tracker.it;\n    const { uid, data, id: pageId } = extractNavData(state);\n    let toEntry: PageEntry;\n\n    const existingEntry = uid === this._uid && pageId != null ? this._entries.get(pageId) : undefined;\n\n    if (existingEntry) {\n      toEntry = existingEntry;\n    } else {\n      // Returning to page existed in previous app version\n      toEntry = this.newEntry({\n        url: new URL(this._location.href),\n        data,\n        title: this._document.title,\n      });\n      fromEntry.transfer(toEntry, 'return');\n      this._entries.set(toEntry.id, toEntry);\n      this._history.replaceState(this._historyState(toEntry), '');\n    }\n\n    toEntry.schedule(() => {\n      try {\n        fromEntry.leave();\n      } finally {\n        toEntry.enter('return');\n      }\n    });\n\n    tracker.it = toEntry;\n\n    return toEntry;\n  }\n\n  public hashChange(tracker: ValueTracker<PageEntry>): PageEntry | void {\n    if (this._history.state == null) {\n      // Not a return\n      return this._changeHash(tracker);\n    }\n    // Otherwise, a `popstate` event is also triggered,\n    // and its handler would do the job (or already did).\n  }\n\n  public update(tracker: ValueTracker<PageEntry>, url: URL): PageEntry {\n\n    const oldEntry = tracker.it;\n    const newEntry = new PageEntry(this._context, ++this._lastId, { ...oldEntry.page, url }, oldEntry);\n\n    this._entries.set(newEntry.id, newEntry);\n    this._history.replaceState(this._historyState(newEntry), '', url.href);\n    this._entries.delete(oldEntry.id);\n\n    return tracker.it = newEntry;\n  }\n\n  private _changeHash(tracker: ValueTracker<PageEntry>): PageEntry {\n\n    const fromEntry = tracker.it;\n    const toEntry = this.newEntry({\n      url: new URL(this._location.href),\n      data: null,\n      title: this._document.title,\n    });\n\n    try {\n      fromEntry.transfer(toEntry, 'enter');\n    } finally {\n      this._history.replaceState(this._historyState(toEntry), '');\n      this._enter('enter', toEntry, tracker);\n    }\n\n    return toEntry;\n  }\n\n  private _forget(entry: PageEntry): void {\n    this._entries.delete(entry.id);\n    entry.forget();\n  }\n\n  private _historyState({ id, page: { data } }: PageEntry): NavDataEnvelope {\n    return {\n      [NAV_DATA_KEY]: {\n        uid: this._uid,\n        id,\n        data,\n      },\n    };\n  }\n\n}\n\nconst enum PageStatus {\n  New,\n  Visited,\n  Current,\n}\n\n/**\n * @internal\n */\nexport class PageEntry {\n\n  next?: PageEntry;\n  prev?: PageEntry;\n  private _status: PageStatus = PageStatus.New;\n  readonly page: Page;\n  private readonly _params: Map<PageParam<any, any>, PageParam.Handle<any, any>>;\n  private _update: () => void = noop;\n\n  constructor(\n      private readonly _context: BootstrapContext,\n      readonly id: number,\n      target: Navigation.URLTarget,\n      proto?: PageEntry,\n  ) {\n    this._params = proto ? proto._params : new Map<PageParam<any, any>, PageParam.Handle<any, any>>();\n\n    const entry = this;\n\n    this.page = {\n      url: target.url,\n      title: target.title,\n      data: target.data,\n      get visited() {\n        return !!entry._status;\n      },\n      get current() {\n        return entry._status === PageStatus.Current;\n      },\n      get(ref) {\n        return entry.get(ref);\n      },\n      put(ref, input) {\n        entry.put(ref, input);\n      },\n    };\n  }\n\n  get<T>(ref: PageParam.Ref<T, unknown>): T | undefined {\n\n    const handle: PageParam.Handle<T, unknown> | undefined = this._params.get(ref[PageParam__symbol]);\n\n    return handle && handle.get();\n  }\n\n  put<T, I>(ref: PageParam.Ref<T, I>, input: I): T {\n\n    const param = ref[PageParam__symbol];\n    const handle: PageParam.Handle<T, I> | undefined = this._params.get(param);\n\n    if (handle) {\n      handle.put(input);\n      return handle.get();\n    }\n\n    const registry = new ContextRegistry<ParamContext>(this._context);\n\n    class ParamContext extends PageParamContext {\n\n      readonly get: PageParamContext['get'] = registry.newValues().get;\n\n    }\n\n    const newHandle = param.create(this.page, input, new ParamContext());\n\n    this._params.set(param, newHandle);\n    if (this.page.current && newHandle.enter) {\n      newHandle.enter(this.page, 'init');\n    }\n\n    return newHandle.get();\n  }\n\n  transfer(to: PageEntry, when: 'pre-open' | 'pre-replace' | 'enter' | 'return'): void {\n    itsEach(this._params.entries(), ([param, handle]) => {\n      if (handle.transfer) {\n\n        const transferred = handle.transfer(to.page, when);\n\n        if (transferred) {\n          to._params.set(param, transferred);\n        }\n      }\n    });\n  }\n\n  stay(at: Page): void {\n    itsEach(this._params.values(), handle => handle.stay && handle.stay(at));\n  }\n\n  enter(when: 'init' | 'open' | 'replace' | 'enter' | 'return'): void {\n    this._status = PageStatus.Current;\n    itsEach(this._params.values(), handle => handle.enter && handle.enter(this.page, when));\n  }\n\n  leave(): void {\n    this._status = PageStatus.Visited;\n    itsEach(this._params.values(), handle => handle.leave && handle.leave());\n  }\n\n  forget(): void {\n    itsEach(this._params.values(), handle => handle.forget && handle.forget());\n    this._params.clear();\n  }\n\n  schedule(update: () => void): void {\n    this._update = update;\n  }\n\n  apply(): void {\n\n    const update = this._update;\n\n    this._update = noop;\n    update();\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { BootstrapWindow } from '@wesib/wesib';\nimport { nextArg } from 'call-thru';\nimport { ContextValueOpts, ContextValues } from 'context-values';\nimport { ContextUpKey, ContextUpRef } from 'context-values/updatable';\nimport { AfterEvent, afterThe, EventKeeper, nextAfterEvent } from 'fun-events';\nimport { Navigation } from './navigation';\nimport { Page } from './page';\nimport Target = Navigation.Target;\n\n/**\n * Navigation agent signature.\n *\n * The agent is called by navigation methods when leaving current page and may alter navigation processing.\n * E.g. change navigation target. For that it should be registered in appropriate context.\n *\n * All registered agents are organized into chain. The first agent in chain is called by navigation method.\n */\nexport type NavigationAgent =\n/**\n * @param next  Either calls the next agent in chain, or applies the final navigation target if this agent is the last\n * one. Not calling this function effectively prevents navigation.\n * Accepts an optional [[Navigation.Target]] parameter. The original target will be used instead when omitted.\n * @param when  When navigation occurred. Either `pre-open`, or `pre-replace`.\n * @param from  The page to leave.\n * @param to  Navigation target page.\n */\n    (\n        this: void,\n        next: (this: void, target?: Target) => void,\n        when: 'pre-open' | 'pre-replace',\n        from: Page,\n        to: Page,\n    ) => void;\n\n/**\n * @internal\n */\nclass NavigationAgentKey\n    extends ContextUpKey<NavigationAgent.Combined, NavigationAgent>\n    implements ContextUpRef<NavigationAgent.Combined, NavigationAgent> {\n\n  readonly upKey: ContextUpKey.UpKey<NavigationAgent.Combined, NavigationAgent>;\n\n  constructor(name: string) {\n    super(name);\n    this.upKey = this.createUpKey(\n        opts => {\n\n          const { document } = opts.context.get(BootstrapWindow);\n\n          return opts.seed.keep.thru(\n              (...agents) => {\n                if (agents.length) {\n                  return nextArg(combinedAgent);\n                }\n\n                const defaultProvider = (): AfterEvent<[NavigationAgent.Combined]> => afterThe(defaultNavigationAgent);\n\n                return nextAfterEvent(opts.byDefault(defaultProvider) || defaultProvider());\n\n                function combinedAgent(\n                    next: (this: void, target: Navigation.URLTarget) => void,\n                    when: 'pre-open' | 'pre-replace',\n                    from: Page,\n                    to: Page,\n                ): void {\n\n                  return navigate(0, to);\n\n                  function navigate(agentIdx: number, agentTo: Page): void {\n\n                    const agent = agents[agentIdx];\n\n                    if (!agent) {\n                      return next(agentTo);\n                    }\n\n                    agent(\n                        (\n                            {\n                              url: nextURL = agentTo.url,\n                              title: nextTitle = agentTo.title,\n                              data: nextData = agentTo.data,\n                            }: Navigation.Target = agentTo,\n                        ) => navigate(\n                            agentIdx + 1,\n                            {\n                              url: new URL(String(nextURL), document.baseURI),\n                              title: nextTitle,\n                              data: nextData,\n                              get visited() {\n                                return agentTo.visited;\n                              },\n                              get current() {\n                                return agentTo.current;\n                              },\n                              get(ref) {\n                                return agentTo.get(ref);\n                              },\n                              put(ref, input) {\n                                agentTo.put(ref, input);\n                              },\n                            },\n                        ),\n                        when,\n                        from,\n                        agentTo,\n                    );\n                  }\n                }\n              },\n          );\n        },\n    );\n  }\n\n  grow<Ctx extends ContextValues>(\n      opts: ContextValueOpts<\n          Ctx,\n          NavigationAgent.Combined,\n          EventKeeper<NavigationAgent[]> | NavigationAgent,\n          AfterEvent<NavigationAgent[]>>,\n  ): NavigationAgent.Combined {\n\n    let delegated: NavigationAgent.Combined;\n\n    opts.context.get(\n        this.upKey,\n        'or' in opts ? { or: opts.or != null ? afterThe(opts.or) : opts.or } : undefined,\n    )!(agent => delegated = agent);\n\n    return (next, when, from, to) => delegated(next, when, from, to);\n  }\n\n}\n\n/**\n * @internal\n */\nfunction defaultNavigationAgent(\n    next: (this: void, target: Navigation.URLTarget) => void,\n    _when: 'pre-open' | 'pre-replace',\n    _from: Page,\n    to: Page,\n): void {\n  next(to);\n}\n\nexport namespace NavigationAgent {\n\n  /**\n   * Combined navigation agent signature.\n   *\n   * This is what is available under [[NavigationAgent]] key.\n   */\n  export type Combined =\n  /**\n   * @param next  Either calls the next agent in chain, or applies the final navigation target if this agent is the last\n   * one. Not calling this function effectively prevents navigation.\n   * Accepts an optional [[Navigation.Target]] parameter. The original target will be used instead when omitted.\n   * @param when  When navigation occurred. Either `pre-open`, or `pre-replace`.\n   * @param from  The page to leave.\n   * @param to  Navigation target page.\n   */\n      (\n          this: void,\n          next: (this: void, target: Navigation.URLTarget) => void,\n          when: 'pre-open' | 'pre-replace',\n          from: Page,\n          to: Page,\n      ) => void;\n\n}\n\n/**\n * A key of context value containing an [[NavigationAgent]] instance.\n *\n * The agent returned combines all registered agents into one. If no agent registered it just performs the navigation.\n */\nexport const NavigationAgent: ContextUpRef<NavigationAgent.Combined, NavigationAgent> = (\n    /*#__PURE__*/ new NavigationAgentKey('navigation-agent')\n);\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { Navigation } from './navigation';\nimport { Page } from './page';\n\n/**\n * Navigation event.\n */\nexport type NavigationEvent = LeavePageEvent | EnterPageEvent | StayOnPageEvent;\n\n/**\n * Navigation event type.\n */\nexport const enum NavigationEventType {\n\n  /**\n   * {@link EnterPageEvent Enter page event} type.\n   */\n  EnterPage = 'wesib:enterPage',\n\n  /**\n   * {@link LeavePageEvent Leave page event} type.\n   */\n  LeavePage = 'wesib:leavePage',\n\n  /**\n   * {@link StayOnPageEvent Stay on page event} type.\n   */\n  StayOnPage = 'wesib:stayOnPage',\n\n}\n\n/**\n * An event fired when navigation target reached by entering destination page.\n *\n * @event EnterPageEvent#wesib:enterPage\n */\nexport class EnterPageEvent extends Event {\n\n  /**\n   * When navigation event occurred.\n   *\n   * Can be one of:\n   * - `open` when opening a new page,\n   * - `replace` when replacing navigation history entry,\n   * - `enter` when entering new page by user action (e.g. hashchange event),\n   * - `return` when navigated to previously visited entry in navigation history.\n   */\n  readonly when: 'open' | 'replace' | 'enter' | 'return';\n\n  /**\n   * Entered page.\n   */\n  readonly to: Page;\n\n  /**\n   * Constructs enter page event.\n   *\n   * @param type  Event type.\n   * @param init  Initialization options.\n   */\n  constructor(type: string, init: EnterPageEventInit) {\n    super(type, { ...init, cancelable: false });\n    this.when = init.when;\n    this.to = init.to;\n  }\n\n}\n\n/**\n * {@link EnterPageEvent Enter page event} initialization options.\n */\nexport interface EnterPageEventInit extends Omit<EventInit, 'cancelable'> {\n\n  /**\n   * When navigation event occurred.\n   *\n   * Can be one of:\n   * - `open` when opening a new page,\n   * - `replace` when replacing navigation history entry,\n   * - `enter` when entering new page by user action (e.g. hashchange event),\n   * - `return` when navigated to previously visited entry in navigation history.\n   */\n  readonly when: 'open' | 'replace' | 'enter' | 'return';\n\n  /**\n   * Entered page.\n   */\n  readonly to: Page;\n\n}\n\n/**\n * An event fired right before leaving the page in order to navigate to another one.\n *\n * This event can be cancelled in order to prevent actual navigation or history update. The navigation is also\n * cancelled when another navigation initiated by one of the handlers of this event.\n *\n * @event LeavePageEvent#wesib:leavePage\n */\nexport class LeavePageEvent extends Event {\n\n  /**\n   * When navigation event occurred. Either `pre-open` when leaving a page to open a new one, or `pre-replace` when\n   * leaving a page to replace it with another history entry.\n   */\n  readonly when: 'pre-open' | 'pre-replace';\n\n  /**\n   * The page to leave.\n   */\n  readonly from: Page;\n\n  /**\n   * Navigation target page.\n   */\n  readonly to: Page;\n\n  /**\n   * Constructs leave page event.\n   *\n   * @param type  Event type.\n   * @param init  Initialization options.\n   */\n  constructor(type: string, init: LeavePageEventInit) {\n    super(type, { ...init, cancelable: true });\n    this.when = init.when;\n    this.from = init.from;\n    this.to = init.to;\n  }\n\n}\n\n/**\n * {@link LeavePageEvent Leave page event} initialization options.\n */\nexport interface LeavePageEventInit extends Omit<EventInit, 'cancelable'> {\n\n  /**\n   * When navigation event occurred. Either `pre-open` when leaving a page to open a new one, or `pre-replace` when\n   * leaving a page to replace it with another history entry.\n   */\n  readonly when: 'pre-open' | 'pre-replace';\n\n  /**\n   * The page to leave.\n   */\n  readonly from: Page;\n\n  /**\n   * Navigation target page.\n   */\n  readonly to: Page;\n\n}\n\n/**\n * An event fired when navigation cancelled or failed.\n *\n * @event StayOnPageEvent#wesib:stayOnPage\n */\nexport class StayOnPageEvent extends Event {\n\n  /**\n   * When navigation event occurred. Always `stay`.\n   */\n  get when(): 'stay' {\n    return 'stay';\n  }\n\n  /**\n   * The page to stay at.\n   */\n  readonly from: Page;\n\n  /**\n   * Navigation target.\n   */\n  readonly to: Navigation.URLTarget;\n\n  /**\n   * A reason of navigation failure. This is set when navigation failed due to some error.\n   */\n  readonly reason?: any;\n\n  /**\n   * Constructs stay on page event.\n   *\n   * @param type  Event type.\n   * @param init  Initialization options.\n   */\n  constructor(type: string, init: StayOnPageEventInit) {\n    super(type, { ...init, cancelable: true });\n    this.from = init.from;\n    this.to = init.to;\n    this.reason = init.reason;\n  }\n\n}\n\n/**\n * {@link StayOnPageEvent Stay on page event} initialization options.\n */\nexport interface StayOnPageEventInit extends Omit<EventInit, 'cancelable'> {\n\n  /**\n   * The page to stay at.\n   */\n  readonly from: Page;\n\n  /**\n   * Navigation target.\n   */\n  readonly to: Navigation.URLTarget;\n\n  /**\n   * A reason of navigation failure. This is set when navigation failed due to some error.\n   */\n  readonly reason?: any;\n\n}\n","import { BootstrapContext, BootstrapWindow, mergeFunctions } from '@wesib/wesib';\nimport { noop } from 'call-thru';\nimport { AfterEvent, onAny, OnEvent, trackValue } from 'fun-events';\nimport { DomEventDispatcher, OnDomEvent } from 'fun-events/dom';\nimport { NavHistory, PageEntry } from './nav-history.impl';\nimport { Navigation as Navigation_ } from './navigation';\nimport { NavigationAgent } from './navigation-agent';\nimport {\n  EnterPageEvent,\n  LeavePageEvent,\n  NavigationEvent,\n  NavigationEventType,\n  StayOnPageEvent,\n} from './navigation.event';\nimport { Page } from './page';\nimport { PageParam } from './page-param';\n\nexport function createNavigation(context: BootstrapContext): Navigation_ {\n\n  const window = context.get(BootstrapWindow);\n  const { document, history } = window;\n  const dispatcher = new DomEventDispatcher(window);\n  const navHistory = context.get(NavHistory);\n  const agent = context.get(NavigationAgent);\n  const onEnter = dispatcher.on<EnterPageEvent>(NavigationEventType.EnterPage);\n  const onLeave = dispatcher.on<LeavePageEvent>(NavigationEventType.LeavePage);\n  const onStay = dispatcher.on<StayOnPageEvent>(NavigationEventType.StayOnPage);\n  const onEvent = onAny<[NavigationEvent]>(onEnter, onLeave, onStay);\n  const nav = trackValue<PageEntry>(navHistory.init());\n\n  nav.read(nextEntry => nextEntry.apply()); // The very first page entry receiver applies scheduled updates to page\n\n  const readPage: AfterEvent<[Page]> = nav.read.keep.thru(entry => entry.page);\n  let next: Promise<any> = Promise.resolve();\n\n  dispatcher.on<PopStateEvent>('popstate')(popState => {\n\n    const entry = navHistory.popState(popState, nav);\n\n    if (entry) {\n      dispatcher.dispatch(new EnterPageEvent(\n          NavigationEventType.EnterPage,\n          {\n            when: popState.state != null ? 'return' : 'enter',\n            to: entry.page,\n          },\n      ));\n    }\n  });\n\n  dispatcher.on('hashchange')(() => {\n\n    const entry = navHistory.hashChange(nav);\n\n    if (entry) {\n      dispatcher.dispatch(new EnterPageEvent(\n          NavigationEventType.EnterPage,\n          {\n            when: 'enter',\n            to: entry.page,\n          },\n      ));\n    }\n  });\n\n  class Navigation extends Navigation_ {\n\n    get length(): number {\n      return history.length;\n    }\n\n    get onEnter(): OnDomEvent<EnterPageEvent> {\n      return onEnter;\n    }\n\n    get onLeave(): OnDomEvent<LeavePageEvent> {\n      return onLeave;\n    }\n\n    get onStay(): OnDomEvent<StayOnPageEvent> {\n      return onStay;\n    }\n\n    get on(): OnEvent<[NavigationEvent]> {\n      return onEvent;\n    }\n\n    get read(): AfterEvent<[Page]> {\n      return readPage;\n    }\n\n    go(delta?: number): void {\n      history.go(delta);\n    }\n\n    open(target: Navigation_.Target | string | URL): Promise<Page | null> {\n      return navigate('pre-open', 'open', target);\n    }\n\n    replace(target: Navigation_.Target | string | URL): Promise<Page | null> {\n      return navigate('pre-replace', 'replace', target);\n    }\n\n    update(url: string | URL): Page {\n      return navHistory.update(nav, toURL(url)).page;\n    }\n\n    with<T, I>(ref: PageParam.Ref<T, I>, input: I): Navigation_.Parameterized {\n      return withParam(page => page.put(ref, input));\n    }\n\n  }\n\n  return new Navigation();\n\n  function withParam(applyParams: (page: Page) => void): Navigation_.Parameterized {\n    return {\n      with<TT, II>(ref: PageParam.Ref<TT, II>, input: II): Navigation_.Parameterized {\n        return withParam(mergeFunctions(applyParams, page => page.put(ref, input)));\n      },\n      open(target: Navigation_.Target | string | URL) {\n        return navigate('pre-open', 'open', target, applyParams);\n      },\n      replace(target: Navigation_.Target | string | URL) {\n        return navigate('pre-replace', 'replace', target, applyParams);\n      },\n    };\n  }\n\n  function toURL(url: string | URL | undefined): URL {\n    if (typeof url === 'string') {\n      return new URL(url, document.baseURI);\n    }\n    return url || nav.it.page.url;\n  }\n\n  function urlTargetOf(target: Navigation_.Target | string | URL): Navigation_.URLTarget {\n    if (typeof target === 'string' || target instanceof URL) {\n      return { url: toURL(target) };\n    }\n    if (target.url instanceof URL) {\n      return target as Navigation_.URLTarget;\n    }\n    return { ...target, url: toURL(target.url) };\n  }\n\n  function navigate(\n      whenLeave: 'pre-open' | 'pre-replace',\n      when: 'open' | 'replace',\n      target: Navigation_.Target | string | URL,\n      applyParams: (page: Page) => void = noop,\n  ): Promise<Page | null> {\n\n    const urlTarget = urlTargetOf(target);\n    const promise = next = next.then(doNavigate, doNavigate);\n\n    return promise;\n\n    function doNavigate(): Page | null {\n\n      let toEntry: PageEntry | undefined = undefined;\n\n      try {\n\n        const prepared = prepare();\n\n        if (!prepared) {\n          return prepared; // Navigation cancelled\n        }\n\n        toEntry = prepared;\n\n        navHistory[when](toEntry, nav);\n\n        dispatcher.dispatch(new EnterPageEvent(\n            NavigationEventType.EnterPage,\n            {\n              when,\n              to: toEntry.page,\n            },\n        ));\n\n        return toEntry.page;\n      } catch (e) {\n        stay(toEntry, e);\n        throw e;\n      }\n    }\n\n    function prepare(): PageEntry | null {\n      if (next !== promise) {\n        return stay();\n      }\n\n      const fromEntry = nav.it;\n      const toEntry = navHistory.newEntry(urlTarget);\n\n      fromEntry.transfer(toEntry, whenLeave);\n\n      const leavePage = new LeavePageEvent(\n          NavigationEventType.LeavePage,\n          {\n            when: whenLeave,\n            from: fromEntry.page,\n            to: toEntry.page,\n          },\n      );\n\n      applyParams(toEntry.page);\n      if (!dispatcher.dispatch(leavePage) || next !== promise) {\n        return stay(toEntry);\n      }\n\n      let finalTarget: Navigation_.URLTarget | undefined;\n\n      agent(t => finalTarget = t, whenLeave, leavePage.from, leavePage.to);\n\n      if (!finalTarget) {\n        return stay(toEntry); // Some agent didn't call `next()`.\n      }\n\n      return toEntry;\n    }\n\n    function stay(toEntry?: PageEntry, reason?: any): null {\n      if (toEntry) {\n        toEntry.stay(nav.it.page);\n      }\n\n      dispatcher.dispatch(new StayOnPageEvent(\n          NavigationEventType.StayOnPage,\n          {\n            from: nav.it.page,\n            to: urlTarget,\n            reason,\n          },\n      ));\n\n      return null;\n    }\n\n  }\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { FeatureDef, FeatureDef__symbol } from '@wesib/wesib';\nimport { Navigation } from './navigation';\nimport { createNavigation } from './navigation.impl';\n\n/**\n * @internal\n */\nconst NavigationSupport__feature: FeatureDef = {\n  setup(setup) {\n    setup.provide({ a: Navigation, by: createNavigation });\n  },\n};\n\n/**\n * Browser navigation support feature.\n *\n * Makes [[Navigation]] available in bootstrap context.\n */\nexport class NavigationSupport {\n\n  static get [FeatureDef__symbol](): FeatureDef {\n    return NavigationSupport__feature;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport {\n  Class,\n  Component,\n  ComponentClass,\n  ComponentContext,\n  ComponentDecorator,\n  DefaultNamespaceAliaser,\n  DefaultRenderScheduler,\n  Wesib__NS,\n} from '@wesib/wesib';\nimport { nextArgs, noop } from 'call-thru';\nimport {\n  afterEach,\n  AfterEvent,\n  afterEventBy,\n  afterSupplied,\n  afterThe,\n  EventKeeper,\n  eventSupply,\n  EventSupply,\n  nextAfterEvent,\n} from 'fun-events';\nimport { css__naming, QualifiedName } from 'namespace-aliaser';\nimport { ComponentNode, ComponentTreeSupport, ElementNode, ElementPickMode } from '../tree';\nimport { Navigation } from './navigation';\nimport { NavigationSupport } from './navigation-support.feature';\nimport { Page } from './page';\n\n/**\n * @internal\n */\ninterface ActiveNavLink {\n  readonly node?: ElementNode;\n  supply(): EventSupply | undefined;\n}\n\n/**\n * @internal\n */\nconst inactiveNavLink: ActiveNavLink = {\n  supply: noop,\n};\n\n/**\n * Creates component decorator that marks at most one of navigation links inside decorated component active.\n *\n * Enables [[ComponentTreeSupport]], and [[NavigationSupport]] features.\n *\n * @typeparam T  A type of decorated component class.\n * @param def  Navigation link activation definition.\n *\n * @returns New component decorator.\n */\nexport function ActivateNavLink<T extends ComponentClass = Class>(\n    def: ActivateNavLinkDef<InstanceType<T>> = {},\n): ComponentDecorator<T> {\n\n  const { select = 'a', pick = { all: true, deep: true } } = def;\n\n  return Component({\n    feature: {\n      needs: [ComponentTreeSupport, NavigationSupport],\n    },\n    define(defContext) {\n      defContext.whenComponent(context => {\n\n        const activate = activateNavLink(context, def);\n        const weigh = navLinkWeight(def);\n        const navigation = context.get(Navigation);\n        const componentNode = context.get(ComponentNode);\n\n        context.whenOn(connectSupply => {\n\n          let active: ActiveNavLink = inactiveNavLink;\n\n          navigation.read.consume(\n              page => componentNode.select(select, pick).read.keep.thru_(\n                  nodes => nextAfterEvent(afterEach(\n                      ...nodes.map(node => weigh({ node, context, page })),\n                  )),\n              ).consume(\n                  (...weights: NavLinkWeight[]) => {\n\n                    const selected = selectActiveNavLink(weights);\n\n                    if (!selected) {\n                      active = inactiveNavLink;\n                    } else if (selected !== active.node) {\n                      active = activate({ node: selected, context, page });\n                    }\n\n                    return active.supply();\n                  },\n              ),\n          ).needs(connectSupply);\n        });\n      });\n    },\n  });\n}\n\n/**\n * Navigation link activation definition.\n *\n * Defines a set of element nodes considered to be navigation links. Each matching node is {@link weigh weighed}\n * against {@link Navigation.read current page}, and the link with highest weight is marked [[active]].\n *\n * @typeparam T  A type of component.\n */\nexport interface ActivateNavLinkDef<T extends object = any> {\n\n  /**\n   * Navigation links CSS selector.\n   *\n   * `a` by default.\n   */\n  readonly select?: string;\n\n  /**\n   * A mode of navigation link node picking from component tree.\n   *\n   * By default picks any matching element from entire subtree.\n   */\n  readonly pick?: ElementPickMode;\n\n  /**\n   * Qualified name of CSS class to mark the active element with.\n   *\n   * The `active` class in Wesib namespace is used by default.\n   */\n  readonly active?: QualifiedName;\n\n  /**\n   * Weighs matching navigation link.\n   *\n   * This method will be called for each navigation link on each current page update.\n   *\n   * By default:\n   * 1. If the link path has neither hash, nor search parameters, then:\n   * 1.1. Checks whether page URL path starts with the link's one.\n   * 1.2. If so, then uses link path as weight.\n   * 2. If the link path has search parameters, but has no hash, then requires the page path to be the same as link's\n   *    one, and page search parameters include all of the link's ones. The number of link search parameters is used\n   *    as weight.\n   * 3. If the link path has a hash, then requires the page path and search parameters to be the same as link's ones,\n   *    and their hashes are treated as `path[?query]`. The weight is calculated by applying steps 1 and 2 to hashes.\n   *\n   * @param node  Navigation link node to weigh.\n   * @param page  Current navigation page.\n   * @param context  Decorated component context.\n   *\n   * @returns Either navigation link weight, or its keeper. Non-positive wights means the page URL doesn't match\n   * the link at all.\n   */\n  weigh?(\n      {\n        node,\n        page,\n        context,\n      }: {\n        node: ElementNode;\n        page: Page;\n        context: ComponentContext<T>;\n      },\n  ): number | EventKeeper<[number]>;\n\n  /**\n   * Changes navigation link activity state.\n   *\n   * This method is called each time the active link changed.\n   *\n   * @param active  Whether to make target link active (`true`), or inactive (`false`).\n   * @param node  Navigation link node to update activity state of.\n   * @param page  Current navigation page.\n   * @param context  Decorated component context.\n   */\n  activate?(\n      active: boolean,\n      {\n        node,\n        page,\n        context,\n      }: {\n        node: ElementNode;\n        page: Page;\n        context: ComponentContext<T>;\n      },\n  ): void;\n\n}\n\n/**\n * @internal\n */\ntype NavLinkWeight = [ElementNode, number];\n\n/**\n * @internal\n */\ninterface NavLinkOpts {\n  node: ElementNode;\n  page: Page;\n  context: ComponentContext;\n}\n\n/**\n * @internal\n */\nfunction selectActiveNavLink(weights: NavLinkWeight[]): ElementNode | undefined {\n\n  let maxWeight = 0;\n  let active: ElementNode | undefined;\n\n  weights.forEach(([node, weight]) => {\n    if (weight > maxWeight) {\n      maxWeight = weight;\n      active = node;\n    }\n  });\n\n  return active;\n}\n\n/**\n * @internal\n */\nfunction navLinkWeight(\n    def: ActivateNavLinkDef,\n): (opts: NavLinkOpts) => AfterEvent<NavLinkWeight> {\n  if (!def.weigh) {\n    return defaultNavLinkWeight;\n  }\n  return opts => {\n\n    const weight = def.weigh!(opts);\n\n    if (typeof weight === 'number') {\n      return afterThe(opts.node, weight);\n    }\n\n    let supplier: AfterEvent<NavLinkWeight> = afterSupplied(weight).keep.thru_(\n        weight => nextArgs(opts.node, weight),\n    );\n\n    return afterEventBy<NavLinkWeight>(receiver => {\n      supplier({\n        supply: eventSupply()\n            .needs(receiver.supply)\n            .whenOff(() => {\n              // Fall back to zero weight once the weight supply cut off\n              supplier = afterThe(opts.node, 0);\n              supplier(receiver);\n            }),\n        receive: receiver.receive.bind(receiver),\n      });\n    });\n  };\n}\n\n/**\n * @internal\n */\nfunction defaultNavLinkWeight(\n    {\n      node,\n      page,\n    }: NavLinkOpts,\n): AfterEvent<NavLinkWeight> {\n\n  const element: Element = node.element;\n  const href = element.getAttribute('href');\n\n  if (href == null) {\n    return afterThe(node, -1);\n  }\n\n  const linkURL = new URL(href, element.ownerDocument!.baseURI);\n\n  return afterThe(node, calcNavLinkWeight(linkURL, page.url));\n}\n\n/**\n * @internal\n */\nfunction calcNavLinkWeight(linkURL: URL, pageURL: URL): number {\n  if (linkURL.origin !== pageURL.origin) {\n    return -1;\n  }\n\n  const linkDir = navLinkPath2dir(linkURL);\n  const pageDir = navLinkPath2dir(pageURL);\n\n  if (linkURL.hash) {\n    if (linkDir !== pageDir) {\n      return -1;\n    }\n    // Require search parameters to be equal\n    if (navLinkSearchParamsWeight(linkURL, pageURL) < 0 || navLinkSearchParamsWeight(pageURL, linkURL) < 0) {\n      return -1;\n    }\n    return calcNavLinkWeight(navLinkHash2url(linkURL), navLinkHash2url(pageURL));\n  }\n\n  const searchParamWeight = navLinkSearchParamsWeight(linkURL, pageURL);\n\n  if (searchParamWeight) {\n    if (searchParamWeight < 0) {\n      return -1;\n    }\n    if (linkDir !== pageDir) {\n      return -1;\n    }\n    return searchParamWeight;\n  }\n\n  if (!pageDir.startsWith(linkDir)) {\n    return -1;\n  }\n\n  return linkURL.pathname.length;\n}\n\n/**\n * @internal\n */\nfunction navLinkPath2dir(url: URL): string {\n\n  const path = url.pathname;\n\n  return path.endsWith('/') ? path : path + '/';\n}\n\n/**\n * @internal\n */\nfunction navLinkHash2url(url: URL): URL {\n\n  let { hash } = url;\n\n  hash = hash.substring(1); // Remove leading `#` symbol\n  if (hash[0] !== '/') {\n    hash = '/' + hash;\n  }\n\n  return new URL(hash, url);\n}\n\n/**\n * @internal\n */\nfunction navLinkSearchParamsWeight(\n    { searchParams: linkParams }: URL,\n    { searchParams: pageParams }: URL,\n): number {\n\n  let weight = 0;\n\n  linkParams.forEach((_value, key) => {\n\n    const pageValues = new Set(pageParams.getAll(key));\n\n    if (weight >= 0) {\n      if (linkParams.getAll(key).every(linkValue => pageValues.has(linkValue))) {\n        weight += 1;\n      } else {\n        weight = -1;\n      }\n    }\n  });\n\n  return weight;\n}\n\n/**\n * @internal\n */\nconst NavLinkRenderSchedule__symbol = (/*#__PURE__*/ Symbol('nav-link-render-schedule'));\n\n/**\n * @internal\n */\nconst defaultActiveNavLinkClass: QualifiedName = ['active', Wesib__NS];\n\n/**\n * @internal\n */\nfunction activateNavLink(\n    context: ComponentContext,\n    def: ActivateNavLinkDef,\n): (opts: NavLinkOpts) => ActiveNavLink {\n\n  const scheduler = context.get(DefaultRenderScheduler);\n  const { active = defaultActiveNavLinkClass } = def;\n  const activeClass = css__naming.name(active, context.get(DefaultNamespaceAliaser));\n  const activate = def.activate ? def.activate.bind(def) : noop;\n  const assignClass = (active: boolean, { node }: { node: ElementNode }): void => {\n\n    const element: Element = node.element;\n    const { classList } = element;\n\n    if (active) {\n      classList.add(activeClass);\n    } else {\n      classList.remove(activeClass);\n    }\n  };\n\n  return opts => {\n\n    const { element } = opts.node;\n    const schedule = element[NavLinkRenderSchedule__symbol]\n        || (element[NavLinkRenderSchedule__symbol] = scheduler({ node: element }));\n    const makeActive = (active: boolean): void => {\n      schedule(() => assignClass(active, opts));\n      activate(active, opts);\n    };\n\n    makeActive(true);\n\n    let lastSupply: EventSupply | undefined;\n\n    return {\n      node: opts.node,\n      supply(): EventSupply {\n\n        const supply = lastSupply = eventSupply(() => {\n          if (lastSupply === supply) {\n            makeActive(false);\n          }\n        });\n\n        return supply;\n      },\n    };\n  };\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { ArraySet, Class, Component, ComponentClass, ComponentContext, ComponentDecorator } from '@wesib/wesib';\nimport { Navigation } from './navigation';\nimport { NavigationSupport } from './navigation-support.feature';\nimport { Page } from './page';\n\n/**\n * Creates component decorator that handles events (e.g. clicks) on navigation links.\n *\n * Such events would lead to {@link @Navigation navigation actions} instead of default ones.\n *\n * Enables [[NavigationSupport]] feature.\n *\n * @typeparam T  A type of decorated component class.\n * @param def  Navigation links handler definition.\n *\n * @returns New component decorator.\n */\nexport function HandleNavLinks<T extends ComponentClass = Class>(\n    def: HandleNavLinksDef<InstanceType<T>> = {},\n): ComponentDecorator<T> {\n\n  const handle = def.handle ? def.handle.bind(def) : defaultHandleNavLinks;\n  const events = new ArraySet(def.event || 'click');\n\n  return Component({\n    feature: {\n      needs: NavigationSupport,\n    },\n    define(defContext) {\n      defContext.whenComponent(context => {\n        context.whenOn(connectSupply => {\n\n          const navigation = context.get(Navigation);\n\n          events.forEach(eventType => {\n            context.on(eventType)(\n                event => navigation.read.once(\n                    page => handle({\n                      event,\n                      page,\n                      context,\n                      navigation,\n                    }),\n                ),\n            ).needs(connectSupply);\n          });\n        });\n      });\n    },\n  });\n}\n\n/**\n * Navigation links handler definition.\n *\n * @typeparam T  A type of component.\n */\nexport interface HandleNavLinksDef<T extends object = any> {\n\n  /**\n   * Type or types of events to handle.\n   *\n   * `click` by default.\n   */\n  readonly event?: string | readonly string[];\n\n  /**\n   * Handles event by performing navigation action.\n   *\n   * Every {@link event} sent by one of elements inside decorated component is passed to this function. In response\n   * it may perform a navigation event.\n   *\n   * By default handles events on anchor tags. When such tag contains an `href` attribute containing same-origin URL\n   * it {@link Navigation.open opens} a page at this URL instead of default action. It also prevents navigation\n   * if URL didn't change.\n   *\n   * @param event  An event to handle.\n   * @param page  Current navigation page.\n   * @param navigation  Navigation service to use.\n   * @param context  Component context.\n   */\n  handle?(\n      {\n        event,\n        page,\n        navigation,\n        context,\n      }: {\n        event: Event;\n        page: Page;\n        navigation: Navigation;\n        context: ComponentContext<T>;\n      },\n  ): void;\n\n}\n\n/**\n * @internal\n */\nfunction defaultHandleNavLinks(\n    {\n      event,\n      page,\n      navigation,\n    }: {\n      event: Event;\n      page: Page;\n      navigation: Navigation;\n    },\n): void {\n\n  const target = event.target as HTMLAnchorElement;\n  const href = target.getAttribute('href');\n\n  if (href == null) {\n    return;\n  }\n\n  const pageURL = page.url;\n  const url = new URL(href, target.ownerDocument!.baseURI);\n\n  if (url.origin !== pageURL.origin) {\n    return; // External link\n  }\n\n  event.preventDefault();\n  if (pageURL.href !== url.href) {\n    navigation.open(href);\n  }\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { isElement } from '@wesib/wesib';\nimport { itsEach, overArray } from 'a-iterable';\n\n/**\n * Imports DOM node from one document to another.\n *\n * @param from  The node to import.\n * @param to  The node to append imported node to.\n * @param importContent  A function that imports nodes nested in parent element. [[importNodeContent]] by default.\n *\n * @returns Imported node.\n */\nexport function importNode<N extends Node>(\n    from: N,\n    to: Node,\n    importContent?: (this: void, from: N, to: N) => void,\n): N;\n\n/**\n * Imports DOM node from one document to another and inserts it before the given node.\n *\n * @param from  The node to import.\n * @param to  The node to append imported node to.\n * @param before  The node to insert imported node before, or `null` to append it to the end of target one.\n * @param importContent  A function that imports nodes nested in parent element. [[importNodeContent]] by default.\n *\n * @returns Imported node.\n */\nexport function importNode<N extends Node>(\n    from: N,\n    to: Node,\n    before?: Node | null,\n    importContent?: (this: void, from: N, to: N) => void,\n): N;\n\nexport function importNode<N extends Node>(\n    from: N,\n    to: Node,\n    beforeOrImport?: Node | null | ((this: void, from: N, to: N) => void),\n    importContent: (this: void, from: N, to: N) => void = importNodeContent,\n): N {\n\n  let before: Node | null;\n\n  if (typeof beforeOrImport === 'function') {\n    importContent = beforeOrImport;\n    before = null;\n  } else {\n    before = beforeOrImport || null;\n  }\n\n  const doc = to.ownerDocument!;\n\n  if (isElement(from)) {\n\n    const elementClone = doc.createElement(from.tagName.toLowerCase()) as Node as (Element & N);\n\n    from.getAttributeNames().forEach(attr => elementClone.setAttribute(attr, from.getAttribute(attr)!));\n    importContent(from, elementClone);\n    to.insertBefore(elementClone, before);\n\n    return elementClone;\n  }\n\n  const nodeClone = doc.importNode(from, false);\n\n  to.insertBefore(nodeClone, before);\n\n  return nodeClone;\n}\n\n/**\n * Imports DOM node contents from one document to another.\n *\n * @param from  The node which contents to import.\n * @param to  The node to append imported nodes to.\n */\nexport function importNodeContent(from: Node, to: Node): void {\n  itsEach(\n      overArray(from.childNodes),\n      node => importNode(node, to),\n  );\n}\n","import { nextArgs, nextSkip } from 'call-thru';\nimport { eventSupply, EventSupply, OnEvent, onEventBy, trackValue } from 'fun-events';\nimport { Page } from '../page';\nimport { PageLoadResponse } from './page-load-response';\nimport { PageLoader } from './page-loader.impl';\n\n/**\n * @internal\n */\nexport function cachingPageLoader(loader: PageLoader): PageLoader {\n\n  let state: {\n    readonly url: string;\n    readonly on: OnEvent<[PageLoadResponse]>;\n    readonly sup: EventSupply;\n  } | undefined;\n\n  return page => {\n\n    const url = pageUrl(page);\n\n    if (state) {\n      if (state.url === url) {\n        return state.on;\n      }\n      state.sup.off();\n    }\n\n    let tracked: {\n      readonly on: OnEvent<[PageLoadResponse]>;\n      num: number;\n    } | undefined;\n    const supply = eventSupply().whenOff(() => {\n      state = undefined;\n      tracked = undefined;\n    });\n\n    const on = onEventBy<[PageLoadResponse]>(receiver => {\n      if (!tracked) {\n\n        const onLoad = loader(page);\n        const tracker = trackValue<PageLoadResponse>();\n        const trackSupply = onLoad(resp => {\n          tracker.it = resp;\n        }).whenOff(reason => {\n          // Error drops page cache, unlike successful page load.\n          if (reason != null) {\n            supply.off(reason);\n          }\n        });\n\n        supply.whenOff(reason => {\n          trackSupply.off(reason);\n          tracker.done(reason);\n        });\n\n        tracked = {\n          on: tracker.read.thru_(\n              response => response ? nextArgs(response) : nextSkip(),\n          ),\n          num: 0,\n        };\n      }\n\n      const requested = tracked;\n\n      ++requested.num;\n\n      return requested.on(receiver).needs(supply).whenOff(reason => {\n        if (!--requested.num) {\n          // Allow to request the same page again\n          Promise.resolve().then(() => {\n            if (!requested.num && requested === tracked) {\n              supply.off(reason);\n            }\n          });\n        }\n      });\n    });\n\n    state = { url, on, sup: supply };\n\n    return on;\n  };\n}\n\nfunction pageUrl(page: Page): string {\n  return new URL('', page.url).href;\n}\n","import { flatMapIt, itsEach, itsIterator } from 'a-iterable';\nimport { noop } from 'call-thru';\nimport {\n  EventEmitter,\n  eventReceiver,\n  EventReceiver,\n  eventSupply,\n  EventSupply,\n  noEventSupply,\n  OnEvent,\n  onEventBy,\n} from 'fun-events';\nimport { Navigation } from '../navigation';\nimport { Page } from '../page';\nimport { PageParam } from '../page-param';\nimport { PageFragmentRequest, PageLoadRequest } from './page-load-request';\nimport { PageLoadResponse } from './page-load-response';\nimport { PageLoader } from './page-loader.impl';\n\n/**\n * @internal\n */\nexport interface PageLoadReq extends PageLoadRequest {\n\n  readonly receiver: EventReceiver.Generic<[PageLoadResponse]>;\n\n}\n\nclass PageLoadAbortError extends Error {}\n\nclass PageLoadRequestsParam extends PageParam<PageLoadRequests, PageLoadRequests> {\n\n  create(\n      _page: Page,\n      requests: PageLoadRequests,\n  ): PageParam.Handle<PageLoadRequests, PageLoadRequests> {\n    return {\n      get() {\n        return requests;\n      },\n      put: noop,\n    };\n  }\n\n}\n\n/**\n * @internal\n */\nexport const pageLoadRequestsParam: PageParam<PageLoadRequests, PageLoadRequests> = new PageLoadRequestsParam();\n\n/**\n * @internal\n */\nexport class PageLoadRequests implements Iterable<PageLoadReq> {\n\n  private readonly _map = new Map<EventSupply, PageLoadReq[]>();\n\n  constructor(\n      private readonly _navigation: Navigation,\n      private readonly _loader: PageLoader,\n  ) {}\n\n  get fragments(): readonly PageFragmentRequest[] {\n\n    const result: PageFragmentRequest[] = [];\n\n    for (const request of this) {\n      if (!request.fragment) {\n        return [];\n      }\n      result.push(request.fragment);\n    }\n\n    return result;\n  }\n\n  [Symbol.iterator](): Iterator<PageLoadReq> {\n    return itsIterator(flatMapIt(this._map.values()));\n  }\n\n  handle(): PageParam.Handle<void, PageLoadRequest> {\n\n    const self = this;\n    const pageSupply = eventSupply();\n    let loadSupply = noEventSupply();\n\n    return {\n      get() {/* void */},\n      put(request: PageLoadRequest): void {\n        self._add(request);\n      },\n      transfer(to: Page) {\n\n        const transferred = self._transfer();\n\n        to.put(pageLoadRequestsParam, transferred);\n\n        return transferred.handle();\n      },\n      enter(page: Page, when: 'init' | 'open' | 'replace' | 'return'): void {\n        if (when === 'init') {\n          // The page is loaded already. No need to fetch it.\n          return;\n        }\n\n        loadSupply = eventSupply().needs(pageSupply);\n\n        const onLoad = onEventBy<[PageLoadResponse]>(responseReceiver => {\n\n          const emitter = new EventEmitter<[PageLoadResponse]>();\n          const supply = emitter.on(responseReceiver);\n\n          self._loader(page)(response => emitter.send(response)).whenOff(error => {\n            if (error !== undefined && !(error instanceof PageLoadAbortError)) {\n              // Report current page load error as failed load response\n              emitter.send({\n                ok: false as const,\n                page,\n                error,\n              });\n            }\n          }).needs(loadSupply);\n\n          return supply;\n        }).share();\n\n        itsEach(\n            self,\n            ({ fragment, receiver }) => onFragment(onLoad, fragment)({\n              supply: eventSupply().needs(receiver.supply),\n              receive(context, response): void {\n                receiver.receive(context, response);\n              },\n            }),\n        );\n      },\n      leave(): void {\n        loadSupply.off(new PageLoadAbortError('page left'));\n      },\n      stay() {\n        pageSupply.off(new PageLoadAbortError('navigation cancelled'));\n      },\n      forget() {\n        pageSupply.off(new PageLoadAbortError('page forgotten'));\n      },\n    };\n\n  }\n\n  private _add(request: PageLoadRequest): void {\n\n    const req = { ...request, receiver: eventReceiver(request.receiver) };\n    const { supply } = req.receiver;\n    const list = this._map.get(supply);\n\n    if (list) {\n      list.push(req);\n    } else {\n      this._map.set(supply, [req]);\n      supply.whenOff(() => this._map.delete(supply));\n    }\n  }\n\n  private _transfer(): PageLoadRequests {\n\n    const transferred = new PageLoadRequests(this._navigation, this._loader);\n\n    for (const [supply, list] of this._map.entries()) {\n      transferred._map.set(supply, Array.from(list));\n    }\n\n    return transferred;\n  }\n\n}\n\nfunction onFragment(\n    onLoad: OnEvent<[PageLoadResponse]>,\n    fragment?: PageFragmentRequest,\n): OnEvent<[PageLoadResponse]> {\n  return fragment\n      ? onLoad.thru_(\n          response => response.ok\n              ? {\n                ...response,\n                fragment: (\n                    fragment.tag != null\n                    ? response.document.getElementsByTagName(fragment.tag)[0]\n                    : response.document.getElementById(fragment.id)\n                ) || undefined,\n              }\n              : response,\n      )\n      : onLoad;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { ContextUpRef } from 'context-values/updatable';\nimport { EventSender, OnEvent } from 'fun-events';\nimport { FetchAgentKey } from '../../fetch/fetch-agent-key.impl';\nimport { PageLoadResponse } from './page-load-response';\n\n/**\n * Page load agent signature.\n *\n * The agent can be used to alter loaded page document processing. For that it should be registered in appropriate\n * context.\n *\n * All registered agents are organized into chain. The first agent in chain is called by page loader.\n */\nexport type PageLoadAgent =\n/**\n * @param next  Either calls the next agent in chain, or actually loads page document if this agent is the last one.\n * Accepts an optional `Request` parameter. The original request will be used instead when omitted.\n * @param request  HTTP request.\n *\n * @returns An `EventSender` of page load response. It is returned either to preceding agent in chain, or as a loaded\n * document.\n */\n    (\n        this: void,\n        next: (this: void, request?: Request) => OnEvent<[PageLoadResponse]>,\n        request: Request,\n    ) => EventSender<[PageLoadResponse]>;\n\nexport namespace PageLoadAgent {\n\n  /**\n   * Combined page load agent signature.\n   *\n   * This is what is available under [[PageLoadAgent]] key.\n   */\n  export type Combined =\n  /**\n   * @param next  Either calls the next agent in chain, or actually loads page document if this agent is the last one.\n   * Accepts `Request` parameter.\n   * @param request  HTTP request.\n   *\n   * @returns An `OnEvent` registrar of loaded document.\n   */\n      (\n          this: void,\n          next: (this: void, request: Request) => OnEvent<[PageLoadResponse]>,\n          request: Request,\n      ) => OnEvent<[PageLoadResponse]>;\n\n}\n\n/**\n * A key of context value containing an [[PageLoadAgent]] instance.\n *\n * The agent returned combines all registered agents into one. If no agent registered it just performs the fetch.\n */\nexport const PageLoadAgent: ContextUpRef<PageLoadAgent.Combined, PageLoadAgent> = (\n    /*#__PURE__*/ new FetchAgentKey<[PageLoadResponse]>('page-load-agent')\n);\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { noop, valueProvider } from 'call-thru';\nimport { ContextUpRef, FnContextKey } from 'context-values/updatable';\n\n/**\n * A signature of page load URL modifier function.\n *\n * All such functions registered in bootstrap context are called in order of their registration with current page URL.\n * They are able to modify it, e.g. by applying additional URL search parameters. The modified URL is used then to load\n * the page.\n */\nexport type PageLoadURLModifier =\n/**\n * @param url  An URL of page to load.\n */\n    (this: void, url: URL) => void;\n\n/**\n * A key of bootstrap context value containing a page load URL modifier.\n *\n * Does not modify URL by default.\n */\nexport const PageLoadURLModifier: ContextUpRef<PageLoadURLModifier, PageLoadURLModifier> = (\n    /*#__PURE__*/ new FnContextKey('page-load-url', { byDefault: valueProvider(noop) })\n);\n","import { BootstrapContext, bootstrapDefault, BootstrapWindow } from '@wesib/wesib';\nimport { itsReduction } from 'a-iterable';\nimport { nextEach } from 'call-thru';\nimport { SingleContextKey } from 'context-values';\nimport { EventNotifier, onAsync, OnEvent, onEventBy } from 'fun-events';\nimport { hthvParse, hthvQuote } from 'http-header-value';\nimport { HttpFetch } from '../../fetch';\nimport { Page } from '../page';\nimport { PageLoadAgent } from './page-load-agent';\nimport { pageLoadRequestsParam } from './page-load-requests.impl';\nimport { PageLoadResponse } from './page-load-response';\nimport { PageLoadURLModifier } from './page-load-url-modifier';\n\n/**\n * @internal\n */\nexport type PageLoader = (this: void, page: Page) => OnEvent<[PageLoadResponse]>;\n\n/**\n * @internal\n */\nexport const PageLoader = (/*#__PURE__*/ new SingleContextKey<PageLoader>(\n    'page-loader',\n    {\n      byDefault: bootstrapDefault(newPageLoader),\n    },\n));\n\nfunction newPageLoader(context: BootstrapContext): PageLoader {\n\n  const window = context.get(BootstrapWindow);\n  const httpFetch = context.get(HttpFetch);\n  const modifyURL = context.get(PageLoadURLModifier);\n  const agent = context.get(PageLoadAgent);\n  const parser: DOMParser = new (window as any).DOMParser();\n\n  return page => {\n\n    const url = new URL(page.url.href);\n\n    modifyURL(url);\n\n    const request = new Request(\n        url.href,\n        {\n          mode: 'same-origin',\n          credentials: 'same-origin',\n          headers: new Headers({ Accept: 'text/html' }),\n        },\n    );\n\n    return onEventBy(receiver => agent(fetch, request)(receiver));\n\n    function fetch(fetchRequest: Request): OnEvent<[PageLoadResponse]> {\n      requestPageFragments(page, fetchRequest);\n\n      return onEventBy<[PageLoadResponse]>(receiver => {\n\n        const dispatcher = new EventNotifier<[PageLoadResponse]>();\n\n        dispatcher.on(receiver);\n        dispatcher.send({ page });\n\n        onAsync(httpFetch(fetchRequest).thru_(\n            response => Promise.all([response, response.text()]),\n        )).thru_(\n            (...batch: [Response, string][]) => nextEach(batch),\n            ([response, text]): PageLoadResponse => {\n              if (!response.ok) {\n                return {\n                  ok: false as const,\n                  page,\n                  response,\n                  error: response.status,\n                };\n              }\n              try {\n                return {\n                  ok: true as const,\n                  page,\n                  response,\n                  document: parsePageDocument(parser, url, response, text),\n                };\n              } catch (error) {\n                return {\n                  ok: false as const,\n                  page,\n                  response,\n                  error,\n                };\n              }\n            },\n        )(receiver);\n      });\n    }\n  };\n}\n\nfunction requestPageFragments(page: Page, request: Request): void {\n\n  const fragments = page.get(pageLoadRequestsParam)?.fragments;\n\n  if (fragments && fragments.length) {\n    request.headers.set(\n        'Accept-Fragment',\n        itsReduction(\n            fragments,\n            (header, fragment) => (header ? header + ', ' : '') + (\n                fragment.tag != null\n                    ? 'tag=' + hthvQuote(fragment.tag)\n                    : 'id=' + hthvQuote(fragment.id)\n            ),\n            '',\n        ),\n    );\n  }\n}\n\nfunction parsePageDocument(parser: DOMParser, url: URL, response: Response, text: string): Document {\n\n  const doc = parser.parseFromString(\n      text,\n      hthvParse(response.headers.get('Content-Type') || 'text/html')[0].v as SupportedType,\n  );\n\n  if (doc.head) {\n\n    const base = doc.head.querySelector('base');\n\n    if (base) {\n      base.href = new URL(base.getAttribute('href')!, url).href;\n    } else {\n\n      const newBase = doc.createElement('base');\n\n      newBase.href = url.href;\n\n      doc.head.appendChild(newBase);\n    }\n  }\n\n  return doc;\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { Navigation } from '../navigation';\nimport { Page } from '../page';\nimport { PageParam } from '../page-param';\nimport { PageParamContext } from '../page-param-context';\nimport { cachingPageLoader } from './caching-page-loader.impl';\nimport { PageLoadRequest } from './page-load-request';\nimport { PageLoadRequests, pageLoadRequestsParam } from './page-load-requests.impl';\nimport { PageLoader } from './page-loader.impl';\n\n/**\n * @internal\n */\nclass PageLoadParam extends PageParam<void, PageLoadRequest> {\n\n  create(page: Page, request: PageLoadRequest, context: PageParamContext): PageParam.Handle<void, PageLoadRequest> {\n\n    const requests = new PageLoadRequests(context.get(Navigation), cachingPageLoader(context.get(PageLoader)));\n    const handle = requests.handle();\n\n    page.put(pageLoadRequestsParam, requests);\n    handle.put(request);\n\n    return handle;\n  }\n\n}\n\n/**\n * Page load parameter.\n *\n * Accepts a {@link PageLoadRequest page load request} as input.\n *\n * A page load is initiated whenever a page with new address is {@link Navigation.onEnter entered}.\n *\n * Page load won't be initiated if:\n * - page load parameter is not {@link Page.put} added,\n * - all added {@link PageLoadRequest.receiver response receiver}s supplies are cut off, or\n * - the entered page address is the the same one as previous one, except the hash,\n */\nexport const pageLoadParam: PageParam<void, PageLoadRequest> = (/*#__PURE__*/ new PageLoadParam());\n","import { BootstrapContext, bootstrapDefault, BootstrapWindow } from '@wesib/wesib';\nimport { ContextKey__symbol, SingleContextKey } from 'context-values';\nimport { AfterEvent, afterThe } from 'fun-events';\nimport { Navigation } from '../navigation';\nimport { PageLoadAgent } from './page-load-agent';\nimport { PageLoadURLModifier } from './page-load-url-modifier';\n\nconst PageCacheBuster__key = (/*#__PURE__*/ new SingleContextKey<PageCacheBuster>(\n    'page-cache-buster',\n    {\n      byDefault: bootstrapDefault(context => new PageCacheBuster(context)),\n    },\n));\n\n/**\n * @internal\n */\nexport const appRevSearchParam = '__wesib_app_rev__';\n\n/**\n * @internal\n */\nexport class PageCacheBuster {\n\n  static get [ContextKey__symbol](): SingleContextKey<PageCacheBuster> {\n    return PageCacheBuster__key;\n  }\n\n  readonly urlModifier: AfterEvent<PageLoadURLModifier[]>;\n  readonly agent: AfterEvent<PageLoadAgent[]>;\n\n  constructor(context: BootstrapContext) {\n\n    const rev = appRev(context.get(BootstrapWindow).document);\n\n    if (!rev) {\n      this.urlModifier = afterThe();\n      this.agent = afterThe();\n    } else {\n\n      const navigation = context.get(Navigation);\n\n      this.urlModifier = afterThe(url => url.searchParams.set(appRevSearchParam, rev));\n      this.agent = afterThe(\n          (next, request) => next(new Request(request.url, request))\n              .thru_(\n                  response => {\n                    if (response.ok) {\n\n                      const newRev = appRev(response.document);\n\n                      if (newRev && newRev !== rev) {\n\n                        const url = new URL(response.page.url.href);\n\n                        url.searchParams.set(appRevSearchParam, newRev);\n                        navigation.update(url);\n                        navigation.reload();\n                      }\n                    }\n\n                    return response;\n                  },\n              ),\n      );\n    }\n  }\n\n}\n\nfunction appRev(doc: Document): string | null | undefined {\n  return doc.querySelector('meta[name=wesib-app-rev]')?.getAttribute('content');\n}\n","import { BootstrapContext, BootstrapWindow } from '@wesib/wesib';\nimport { filterIt, itsEach, mapIt, overArray } from 'a-iterable';\nimport { importNode } from '../../util';\nimport { PageLoadAgent } from './page-load-agent';\n\n/**\n * @internal\n */\nexport function pageScriptsAgent(context: BootstrapContext): PageLoadAgent {\n\n  const doc = context.get(BootstrapWindow).document;\n\n  return next => next().thru_(\n      response => {\n        if (response.ok) {\n\n          const allScripts = new Set<string>(mapIt(\n              externalScripts(doc, overArray(doc.scripts)),\n              ([src]) => src,\n          ));\n\n          itsEach(\n              filterIt(\n                  externalScripts(response.document, overArray(response.document.querySelectorAll('script'))),\n                  ([src]) => !allScripts.has(src),\n              ),\n              ([src, script]) => {\n                importNode(script, doc.head, (_from, to) => to.src = src);\n                allScripts.add(src);\n              },\n          );\n        }\n        return response;\n      },\n  );\n}\n\nfunction externalScripts(\n    doc: Document,\n    scripts: Iterable<HTMLScriptElement>,\n): Iterable<readonly [string, HTMLScriptElement]> {\n  return mapIt(\n      filterIt(\n          scripts,\n          script => !!script.src,\n      ),\n      script => [new URL(script.src, doc.baseURI).href, script] as const,\n  );\n}\n","import { BootstrapContext, BootstrapWindow } from '@wesib/wesib';\nimport { itsEach, itsFirst, overArray } from 'a-iterable';\nimport { importNode } from '../../util';\nimport { PageLoadAgent } from './page-load-agent';\n\n/**\n * @internal\n */\nexport function pageStyleAgent(context: BootstrapContext): PageLoadAgent {\n\n  const doc = context.get(BootstrapWindow).document;\n\n  return next => next().thru_(\n      response => {\n        if (!response.ok) {\n          return response;\n        }\n\n        const newStyles = response.document.querySelectorAll<HTMLLinkElement>('link[rel=stylesheet]');\n\n        if (!newStyles.length) {\n          return response;\n        }\n\n        let target: Node = doc.head;\n        let before: Node | null = null;\n        const oldStyles = doc.querySelectorAll<HTMLLinkElement>('link[rel=stylesheet]');\n        const oldStylesByHref = new Map<string, HTMLLinkElement>();\n        const firstOldStyle = oldStyles.item(0);\n\n        if (firstOldStyle) {\n          target = firstOldStyle.parentNode!;\n          before = firstOldStyle;\n          itsEach(\n              overArray(oldStyles),\n              link => oldStylesByHref.set(new URL(link.href, doc.baseURI).href, link),\n          );\n        }\n\n        itsEach(\n            overArray(newStyles),\n            newStyle => {\n\n              const href = new URL(newStyle.href, doc.baseURI).href;\n              const oldStyle = oldStylesByHref.get(href);\n\n              if (oldStyle) {\n                // Style already exists.\n                if (itsFirst(oldStylesByHref.keys()) === href) {\n                  // In proper position already.\n                  // Insert the remaining styles after it.\n                  target = oldStyle.parentNode!;\n                  before = oldStyle.nextSibling;\n                } else {\n                  // Move to proper position.\n                  target.insertBefore(oldStyle, before);\n                }\n                oldStylesByHref.delete(href);\n              } else {\n                // Import new style\n                importNode(newStyle, target, before, (_from, to) => to.href = href);\n              }\n            },\n        );\n\n        // Remove remaining old styles\n        itsEach(oldStylesByHref.values(), style => style.parentNode!.removeChild(style));\n\n        return response;\n      },\n  );\n}\n","import { BootstrapContext, BootstrapWindow } from '@wesib/wesib';\nimport { PageLoadAgent } from './page-load-agent';\n\n/**\n * @internal\n */\nexport function pageTitleAgent(context: BootstrapContext): PageLoadAgent {\n\n  const doc = context.get(BootstrapWindow).document;\n\n  return next => next().thru_(response => {\n    if (response.ok) {\n\n      const title = response.document.getElementsByTagName('title').item(0);\n\n      if (title && title.textContent) {\n        doc.title = title.textContent;\n      }\n    }\n\n    return response;\n  });\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport { FeatureDef, FeatureDef__symbol } from '@wesib/wesib';\nimport { NavigationSupport } from '../navigation-support.feature';\nimport { PageCacheBuster } from './page-cache-buster.impl';\nimport { PageLoadAgent } from './page-load-agent';\nimport { PageLoadURLModifier } from './page-load-url-modifier';\nimport { pageScriptsAgent } from './page-scripts-agent.impl';\nimport { pageStyleAgent } from './page-style-agent.impl';\nimport { pageTitleAgent } from './page-title-agent.impl';\n\n/**\n * @internal\n */\nconst PageLoadSupport__feature: FeatureDef = {\n  needs: NavigationSupport,\n  setup(setup) {\n    setup.provide({\n      a: PageLoadURLModifier,\n      by: (buster: PageCacheBuster) => buster.urlModifier,\n      with: [PageCacheBuster],\n    });\n    setup.provide({\n      a: PageLoadAgent,\n      by: (buster: PageCacheBuster) => buster.agent,\n      with: [PageCacheBuster],\n    });\n    setup.provide({ a: PageLoadAgent, by: pageScriptsAgent });\n    setup.provide({ a: PageLoadAgent, by: pageStyleAgent });\n    setup.provide({ a: PageLoadAgent, by: pageTitleAgent });\n  },\n};\n\n/**\n * Page load support feature.\n *\n * Enables default {@link PageLoadAgent page load agents}:\n * 1. Page cache busting agent.\n *    If `<meta name=\"wesib-app-rev\">` tag is present in initial page, then sends this tag's content with each page load\n *    request as `__wesib_app_rev__` search parameter. If the loaded page contains the same named meta tag with\n *    different content, then reloads the page.\n *    This serves both as cache busting technique, and as server-side application updates handler.\n * 2. Scripts agent.\n *    Includes external scripts from loaded page into main document.\n * 3. Style agent.\n *    Replaces external styles of main document styles with the ones from loaded page.\n *    Unless loaded page has no external styles.\n * 4. Title agent.\n *    Applies loaded page title to bootstrap window. If there is one.\n */\nexport class PageLoadSupport {\n\n  static get [FeatureDef__symbol](): FeatureDef {\n    return PageLoadSupport__feature;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic\n */\nimport {\n  BootstrapWindow,\n  Class,\n  Component,\n  ComponentClass,\n  ComponentContext,\n  ComponentDecorator,\n  DefaultRenderScheduler,\n} from '@wesib/wesib';\nimport { noop } from 'call-thru';\nimport { importNodeContent } from '../../util';\nimport { Navigation } from '../navigation';\nimport { pageLoadParam } from './page-load-param';\nimport { PageFragmentRequest } from './page-load-request';\nimport { PageLoadResponse } from './page-load-response';\nimport { PageLoadSupport } from './page-load-support.feature';\n\n/**\n * Creates component decorator that includes page contents into decorated component's element.\n *\n * The page is loaded and included whenever it is {@link Navigation.onEnter entered}.\n *\n * Utilizes [[pageLoadParam]] navigation parameter.\n *\n * Enables [[NavigationSupport]] and [[PageLoadSupport]] features.\n *\n * @typeparam T  A type of decorated component class.\n * @param def  Page inclusion definition.\n *\n * @returns New component decorator.\n */\nexport function IncludePage<T extends ComponentClass = Class>(\n    def: IncludePageDef<InstanceType<T>> = {},\n): ComponentDecorator<T> {\n\n  const onResponse = def.onResponse ? def.onResponse.bind(def) : noop;\n\n  return Component({\n    feature: {\n      needs: PageLoadSupport,\n    },\n    define(context) {\n      context.whenComponent(context => {\n\n        const document = context.get(BootstrapWindow).document;\n        const schedule = context.get(DefaultRenderScheduler)();\n        const navigation = context.get(Navigation);\n        const detectFragment = (): PageFragmentRequest => {\n\n          const { fragment } = def;\n\n          if (fragment) {\n            return fragment;\n          }\n\n          const { element: { id, tagName: tag } }: { element: Element } = context;\n\n          return id ? { id } : { tag };\n        };\n\n        context.whenOn(supply => {\n\n          const range = document.createRange();\n\n          range.selectNodeContents(context.contentRoot as any);\n\n          navigation.read.once(page => {\n            page.put(\n                pageLoadParam,\n                {\n                  fragment: detectFragment(),\n                  receiver: {\n                    supply,\n                    receive: (_ctx, response) => handleResponse(response),\n                  },\n                },\n            );\n          });\n\n          function handleResponse(response: PageLoadResponse): void {\n            if (response.ok) {\n              schedule(() => {\n                range.deleteContents();\n\n                const target = document.createDocumentFragment();\n                const { fragment } = response;\n\n                if (fragment) {\n                  importNodeContent(fragment, target);\n                  range.insertNode(target);\n                }\n\n                onResponse({ context, range, response });\n              });\n            } else {\n              schedule(() => onResponse({ context, range, response }));\n            }\n          }\n        });\n      });\n    },\n  });\n}\n\n/**\n * Page inclusion definition.\n *\n * Configures {@link IncludePage @LoadPage} decorator.\n *\n * @typeparam T  A type of component.\n */\nexport interface IncludePageDef<T extends object = any> {\n\n  /**\n   * Page fragment to include.\n   *\n   * By default uses custom element identifier if present, or element tag name otherwise.\n   */\n  fragment?: PageFragmentRequest;\n\n  /**\n   * Performs additional actions during page load.\n   *\n   * This method is called inside page contents render schedule for {@link PageLoadResponse.ok each stage} of page\n   * load. At the final stage it is called after loaded page contents included.\n   *\n   * This method can be used e.g. to indicate the page load progress.\n   *\n   * @param context  Decorated component context.\n   * @param response  Page load response.\n   * @param range  Document range the loaded page contents going to replace.\n   */\n  onResponse?(\n      {\n        context,\n        response,\n        range,\n      }: {\n        context: ComponentContext<T>;\n        response: PageLoadResponse;\n        range: Range;\n      },\n  ): void;\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic/styp\n */\nimport { SingleContextKey, SingleContextRef } from 'context-values';\nimport { EventSupply } from 'fun-events';\nimport { StypRules } from 'style-producer';\nimport { ComponentStypOptions } from './component-styp-options';\n\n/**\n * Component style producer function interface.\n */\nexport type ComponentStyleProducer =\n/**\n * @param rules  CSS rules to produce stylesheets for. This can be e.g. a `StypRule.rules` to render all rules,\n * or a result of `StypRuleList.grab()` method call to render only matching ones.\n * @param opts  Production options.\n *\n * @returns Styles supply. Once cut off (i.e. its `off()` method is called) the produced stylesheets are removed.\n */\n    (\n        rules: StypRules,\n        opts?: ComponentStypOptions,\n    ) => EventSupply;\n\n/**\n * A key of component context value containing a component style producer.\n */\nexport const ComponentStyleProducer: SingleContextRef<ComponentStyleProducer> = (\n    /*#__PURE__*/ new SingleContextKey<ComponentStyleProducer>('component-style-producer')\n);\n","/**\n * @packageDocumentation\n * @module @wesib/generic/styp\n */\nimport { MultiContextKey, MultiContextRef } from 'context-values';\nimport { StypRender } from 'style-producer';\n\n/**\n * A CSS render that will be enabled by default by [[ComponentStyleProducer]].\n */\nexport type ComponentStypRender = StypRender;\n\n/**\n * A key of component context value containing component CSS renders.\n */\nexport const ComponentStypRender: MultiContextRef<ComponentStypRender> = (\n    /*#__PURE__*/ new MultiContextKey<ComponentStypRender>('component-styp-render')\n);\n","import { ComponentContext, DefaultNamespaceAliaser, ElementDef } from '@wesib/wesib';\nimport { ContextValues, SingleContextKey, SingleContextRef } from 'context-values';\nimport { css__naming, html__naming, NamespaceDef, QualifiedName } from 'namespace-aliaser';\n\n/**\n * @internal\n */\nexport type ElementIdClass = QualifiedName;\n\n/**\n * @internal\n */\nexport const ElementIdClass__NS = (/*#__PURE__*/ new NamespaceDef(\n    'https://wesib.github.io/ns/element-id-class',\n    'elic',\n    'element-id-class',\n));\n\n/**\n * @internal\n */\nexport const ElementIdClass: SingleContextRef<ElementIdClass> = (/*#__PURE__*/ new SingleContextKey(\n    'unique-element-class',\n    { byDefault: assignElementId },\n));\n\n/**\n * @internal\n */\nlet uniqueClassSeq = 0;\n\n/**\n * @internal\n */\nfunction assignElementId(contextValues: ContextValues): ElementIdClass {\n\n  const aliaser = contextValues.get(DefaultNamespaceAliaser);\n  const context = contextValues.get(ComponentContext);\n  const elementDef = context.get(ElementDef);\n  const name: string = elementDef.name ? html__naming.name(elementDef.name, aliaser) : 'component';\n  const local = `${name}#${++uniqueClassSeq}`;\n  const qualified = ElementIdClass__NS.name(aliaser(ElementIdClass__NS), local, css__naming);\n  const element = context.element as Element;\n\n  element.classList.add(qualified);\n\n  return qualified;\n}\n","import {\n  ArraySet,\n  BootstrapWindow,\n  ComponentContext,\n  DefaultNamespaceAliaser,\n  DefaultRenderScheduler,\n  ShadowContentRoot,\n} from '@wesib/wesib';\nimport { ContextKey, ContextKey__symbol, SingleContextKey } from 'context-values';\nimport { EventSupply } from 'fun-events';\nimport {\n  produceBasicStyle,\n  StypPureSelector,\n  StypRender,\n  StypRules,\n  stypSelector,\n  StypSelector,\n  StypSubSelector,\n} from 'style-producer';\nimport { ComponentStypOptions } from './component-styp-options';\nimport { ComponentStypRender } from './component-styp-render';\nimport { ElementIdClass } from './element-id-class.impl';\n\n/**\n * @internal\n */\nconst ComponentStyleProducer__key = (\n    /*#__PURE__*/ new SingleContextKey<ComponentStyleProducer>('component-style-producer:impl')\n);\n\n/**\n * @internal\n */\nexport class ComponentStyleProducer {\n\n  static get [ContextKey__symbol](): ContextKey<ComponentStyleProducer> {\n    return ComponentStyleProducer__key;\n  }\n\n  constructor(\n      private readonly _context: ComponentContext,\n      private readonly _produce = produceBasicStyle,\n  ) {}\n\n  produce(rules: StypRules, options: ComponentStypOptions = {}): EventSupply {\n\n    const context = this._context;\n    const shadowRoot = context.get(ShadowContentRoot, { or: null });\n\n    return this._produce(rules, {\n      ...options,\n      document: options.document || context.get(BootstrapWindow).document,\n      parent: options.parent || context.contentRoot,\n      rootSelector: [],\n      scheduler: options.scheduler || context.get(DefaultRenderScheduler),\n      nsAlias: options.nsAlias || context.get(DefaultNamespaceAliaser),\n      render: buildRender(),\n    });\n\n    function buildRender(): StypRender | readonly StypRender[] | undefined {\n\n      const { render } = options;\n      const renders = new ArraySet<StypRender>(render)\n          .add(...context.get(ComponentStypRender));\n      const hostSelector = options.hostSelector\n          ? stypSelector(options.hostSelector)[0] as StypPureSelector.NormalizedPart\n          : undefined;\n\n      renders.add(shadowRoot\n          ? shadowRender(hostSelector)\n          : noShadowRender(hostSelector || { c: [context.get(ElementIdClass)] }));\n\n      return renders.value;\n    }\n  }\n\n}\n\n/**\n * @internal\n */\nfunction shadowRender(hostSelector: StypPureSelector.NormalizedPart | undefined): StypRender {\n  return {\n    order: -100,\n    render(producer, properties) {\n\n      let { selector } = producer;\n\n      if (!selector.length) {\n        selector = [hostSelector || { u: [[':', 'host']] }];\n      } else if (hostSelector) {\n\n        const [rest, host] = extractHostSelector(selector);\n\n        if (host) {\n          if (host.length) {\n            selector = [{ u: [[':', 'host', extendHostSelector(host, hostSelector)]] }, ...rest];\n          } else {\n            selector = [{ u: [[':', 'host', [hostSelector]]] }, ...rest];\n          }\n        }\n      }\n\n      producer.render(properties, { selector });\n    },\n  };\n}\n\n/**\n * @internal\n */\nfunction noShadowRender(hostSelector: StypPureSelector.NormalizedPart): StypRender {\n  return {\n    order: -100,\n    render(producer, properties) {\n\n      let { selector } = producer;\n\n      if (!selector.length) {\n        selector = [hostSelector];\n      } else {\n\n        const [rest, host] = extractHostSelector(selector);\n\n        if (host && host.length) {\n          selector = [...extendHostSelector(host, hostSelector), ...rest];\n        } else {\n          selector = [hostSelector, ...rest];\n        }\n      }\n\n      producer.render(properties, { selector });\n    },\n  };\n}\n\n/**\n * @internal\n */\nfunction extractHostSelector(\n    selector: StypSelector.Normalized,\n): [StypSelector.Normalized, StypSelector.Normalized?] {\n  if (typeof selector[0] !== 'string') {\n\n    const [{ ns, e, i, c, u, s, $ }, ...restParts] = selector;\n\n    if (!ns && !e && !i && !c && !s && u) {\n\n      const [[prefix, name, ...params]] = u;\n\n      if (prefix === ':' && name === 'host') {\n\n        let host: StypSelector.Mutable;\n\n        if (params.length) {\n          host = Array.from(params[0] as StypSubSelector.NormalizedParameter);\n          (host[0] as any).$ = $;\n        } else {\n          host = $ ? [{ $ }] : [];\n        }\n\n        return [restParts, host];\n      }\n    }\n  }\n  return [selector];\n}\n\n/**\n * @internal\n */\nfunction extendHostSelector(\n    selector: StypSelector.Normalized,\n    {\n      ns,\n      e,\n      i,\n      c,\n      u,\n      s,\n    }: StypPureSelector.NormalizedPart,\n): StypSelector.Normalized {\n\n  const [first, ...rest] = selector as [StypSelector.NormalizedPart, ...StypSelector.Normalized];\n\n  return [\n    {\n      ns: first.e || first.ns ? first.ns : ns,\n      e: first.e || first.ns ? first.e : e,\n      i: first.i || i,\n      c: first.c ? (c ? [...first.c, ...c] : first.c) as typeof c : c,\n      u: first.u ? (u ? [...first.u, ...u] : first.u) as typeof u : u,\n      s: ((first.s || '') + (s || '')) || undefined,\n      $: first.$,\n    },\n    ...rest,\n  ];\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic/styp\n */\nimport { FeatureDef, FeatureDef__symbol } from '@wesib/wesib';\nimport { ComponentStyleProducer } from './component-style-producer';\nimport { ComponentStyleProducer as ComponentStyleProducer_ } from './component-style-producer.impl';\n\n/**\n * @internal\n */\nconst BasicStyleProducerSupport__feature: FeatureDef = {\n  setup(setup) {\n    setup.perComponent({ as: ComponentStyleProducer_ });\n    setup.perComponent({\n      a: ComponentStyleProducer,\n      by(producer: ComponentStyleProducer_): ComponentStyleProducer {\n        return (rules, opts) => producer.produce(rules, opts);\n      },\n      with: [ComponentStyleProducer_],\n    });\n  },\n};\n\n/**\n * Basic style producer support feature.\n *\n * Depends on [style-producer].\n *\n * Unlike [[StyleProducerSupport]] feature this one does not enable default CSS renders.\n *\n * It is enabled automatically by {@link ProduceStyle @ProduceStyle} decorator.\n *\n * [style-producer]: https://www.npmjs.com/package/style-producer\n */\nexport class BasicStyleProducerSupport {\n\n  static get [FeatureDef__symbol](): FeatureDef {\n    return BasicStyleProducerSupport__feature;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic/styp\n */\nimport { ComponentContext } from '@wesib/wesib';\nimport { noop } from 'call-thru';\nimport { eventSupply, EventSupply, noEventSupply } from 'fun-events';\nimport { lazyStypRules, StypOptions, StypPureSelector, StypRules } from 'style-producer';\nimport { ComponentStyleProducer } from './component-style-producer';\n\n/**\n * Component CSS styles production options.\n */\nexport interface ComponentStypOptions extends StypOptions {\n\n  /**\n   * Structured CSS selector to use for custom element's host.\n   *\n   * It modifies the selectors of produced CSS rules.\n   *\n   * For custom element with shadow root:\n   * - Replaces root CSS rule selector with `:host(<hostSelector>).\n   * - When `hostSelector` is omitted, then replaces root CSS rule selector with `:host`.\n   * - If CSS rule selector starts with `:host`, then replaces `:host` with `:host(<hostSelector>)`\n   * - If CSS rule selector starts with `:host(<selector>)`, then extends `<selector>` by `hostSelector`.\n   *   I.e. appends CSS classes and sub-selectors to it, and fulfills missing element and identifier selectors.\n   *\n   * For custom element without shadow root either uses provided `hostSelector`, or generates a unique one when omitted.\n   * And additionally:\n   * - Replaces root CSS rule selector it with `hostSelector`.\n   * - If CSS rule selector starts with `:host`, then replaces `:host` with `hostSelector`.\n   * - If CSS rule selector starts with `:host(<selector>), then replaces `:host(<selector>)` with `<selector>` extended\n   *   by `hostSelector`. I.e. appends CSS classes and sub-selectors to it, and fulfills missing element and identifier\n   *   selectors.\n   * - Otherwise prepends CSS rule selector with `hostSelector`.\n   *\n   * This selector should not contain a `:host` sub-selector.\n   */\n  hostSelector?: StypPureSelector.Part | string;\n\n  /**\n   * Root CSS selector is never used for custom elements. A `hostSelector` is applied instead.\n   */\n  rootSelector?: undefined;\n\n  /**\n   * Whether to produce CSS stylesheets while component is not connected.\n   *\n   * Can be one of:\n   * - `true` - to produce stylesheets when first connected and update them even if component is disconnected after\n   *   that. This is the default, as stylesheet updates is expected to be rare operation.\n   * - `false` - to produce stylesheet whenever component is connected and remove them once disconnected.\n   *   This is a good choice if stylesheets are small and updated frequently.\n   * - `always` - to produce stylesheets immediately upon component readiness and update them offline after that.\n   *   This is the right choice if component needs a stylesheet ready before it is added to the document.\n   */\n  offline?: boolean | 'always';\n\n}\n\nexport const ComponentStypOptions = {\n\n  /**\n   * Produces and dynamically updates component's CSS stylesheets based on the given CSS rules.\n   *\n   * @param context  Target component context.\n   * @param rules  A source of CSS rules to produce stylesheets for.\n   * @param options  Production options.\n   *\n   * @returns CSS rules supply. Once cut off the produced stylesheets are removed.\n   */\n  produce(\n      context: ComponentContext,\n      rules: StypRules.Source,\n      options?: ComponentStypOptions,\n  ): EventSupply {\n\n    const css = lazyStypRules(rules);\n    const offline = options && options.offline;\n    const produceStyle = context.get(ComponentStyleProducer);\n\n    let cssSupply = noEventSupply();\n    let doProduceStyle: () => void;\n    const supply = eventSupply(reason => {\n      doProduceStyle = noop;\n      cssSupply.off(reason);\n    });\n\n    doProduceStyle = () => {\n      cssSupply = produceStyle(css, options).needs(supply);\n    };\n\n    switch (offline) {\n    case 'always':\n      context.whenReady(doProduceStyle);\n      break;\n    case false:\n      context.whenOn(connectionSupply => {\n        doProduceStyle();\n        cssSupply.needs(connectionSupply);\n      });\n      break;\n    default:\n      context.whenOn.once(doProduceStyle);\n    }\n\n    context.whenDestroyed(reason => supply.off(reason));\n\n    return supply;\n  },\n\n};\n","/**\n * @packageDocumentation\n * @module @wesib/generic/styp\n */\nimport { ComponentClass, ComponentDef } from '@wesib/wesib';\nimport { StypRules } from 'style-producer';\nimport { BasicStyleProducerSupport } from './basic-style-producer-support.feature';\nimport { ComponentStypOptions } from './component-styp-options';\n\n/**\n * A decorator of component property returning CSS rules to produce.\n *\n * Decorated property value should either contain a CSS rules source of type `StypRules.Source` or be a method\n * returning it.\n *\n * This decorator automatically enables [[BasicStyleProducerSupport]] feature.\n *\n * Utilizes [[ComponentStypOptions.produce]] function to produce CSS stylesheets.\n *\n * @typeparam T  A type of decorated component class.\n * @param options  Non-mandatory CSS style production options.\n *\n * @returns Component property decorator.\n */\nexport function ProduceStyle<T extends ComponentClass>(\n    options?: ComponentStypOptions,\n): <V extends StypRules.Source | (() => StypRules.Source)>(\n    target: InstanceType<T>,\n    propertyKey: string | symbol,\n    descriptor?: TypedPropertyDescriptor<V>,\n) => any | void {\n  return (target: InstanceType<T>, propertyKey: string | symbol) => {\n\n    const componentType = target.constructor as T;\n\n    ComponentDef.define(\n        componentType,\n        {\n          setup(defContext) {\n            defContext.whenComponent(componentContext => {\n              componentContext.whenReady(({ component }) => {\n\n                const property = component[propertyKey];\n\n                ComponentStypOptions.produce(\n                    componentContext,\n                    typeof property === 'function' ? property.bind(component) : property,\n                    options,\n                );\n              });\n            });\n          },\n          feature: {\n            needs: [BasicStyleProducerSupport],\n          },\n        },\n    );\n  };\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic/styp\n */\nimport { ComponentContext, FeatureDef, FeatureDef__symbol } from '@wesib/wesib';\nimport { produceStyle } from 'style-producer';\nimport { BasicStyleProducerSupport } from './basic-style-producer-support.feature';\nimport { ComponentStyleProducer } from './component-style-producer';\nimport { ComponentStyleProducer as ComponentStyleProducer_ } from './component-style-producer.impl';\n\n/**\n * @internal\n */\nconst StyleProducerSupport__feature: FeatureDef = {\n  has: BasicStyleProducerSupport,\n  setup(setup) {\n    setup.perComponent({\n      a: ComponentStyleProducer_,\n      by(context: ComponentContext) {\n        return new ComponentStyleProducer_(context, produceStyle);\n      },\n    });\n    setup.perComponent({\n      a: ComponentStyleProducer,\n      by(producer: ComponentStyleProducer_): ComponentStyleProducer {\n        return (rules, opts) => producer.produce(rules, opts);\n      },\n      with: [ComponentStyleProducer_],\n    });\n  },\n};\n\n/**\n * Style producer support feature.\n *\n * Depends on [style-producer].\n *\n * This is an implementation of [[BasicStyleProducerSupport]] feature that enables default CSS renders.\n *\n * It is _not_ enabled automatically by {@link ProduceStyle @ProduceStyle} decorator.\n *\n * [style-producer]: https://www.npmjs.com/package/style-producer\n */\nexport class StyleProducerSupport {\n\n  static get [FeatureDef__symbol](): FeatureDef {\n    return StyleProducerSupport__feature;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic/styp\n */\nimport { ContextKey, ContextKey__symbol, SingleContextKey } from 'context-values';\nimport { RefStypRule, StypProperties, StypRule, StypRuleRef, StypRules } from 'style-producer';\nimport { ThemeStyle } from './theme-style';\n\n/**\n * @internal\n */\nconst Theme__key = new SingleContextKey<Theme>('theme');\n\n/**\n * A hierarchy of CSS rules within single root.\n *\n * A component may use it to extract styling information.\n *\n * Current theme is available in bootstrap, definition, or component context. By default, only one theme is declared\n * per bootstrap. But this can be overridden.\n */\nexport abstract class Theme {\n\n  /**\n   * A key of bootstrap, definition, or component context value containing current theme instance.\n   */\n  static get [ContextKey__symbol](): ContextKey<Theme> {\n    return Theme__key;\n  }\n\n  /**\n   * Root CSS rule.\n   *\n   * All theme styling is represented as rules within this root.\n   */\n  abstract readonly root: StypRule;\n\n  /**\n   * Obtains CSS rule reference by its `referrer`.\n   *\n   * This is a helper method that resolves the given `referrer` against the `root` CSS rule of this theme.\n   *\n   * @param referrer  Target CSS rule referrer.\n   *\n   * @returns CSS rule reference.\n   */\n  ref<T extends StypProperties<T>>(referrer: RefStypRule<T>): StypRuleRef<T> {\n    return referrer(this.root);\n  }\n\n  /**\n   * Obtains a styling for the given theme styles.\n   *\n   * This method requests the registered {@link ThemeStyle theme styles} for CSS rules they provide.\n   * If some of the styles are not registered then uses the given style as provider.\n   *\n   * @param styles  The styles to obtain styling information for.\n   *\n   * @returns Dynamically updated CSS rule set containing the requested styling.\n   */\n  abstract style(...styles: ThemeStyle.Provider[]): StypRules;\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic/styp\n */\nimport { ContextKey, ContextKey__symbol, SingleContextKey } from 'context-values';\nimport { Theme } from './theme';\n\n/**\n * @internal\n */\nconst ThemeFactory__key = new SingleContextKey<ThemeFactory>('theme-factory');\n\nexport abstract class ThemeFactory {\n\n  static get [ContextKey__symbol](): ContextKey<ThemeFactory> {\n    return ThemeFactory__key;\n  }\n\n  abstract newTheme(): Theme;\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic/styp\n */\nimport { AIterable } from 'a-iterable';\nimport { ContextRef, ContextValueOpts, ContextValues, SimpleContextKey } from 'context-values';\nimport { stypRules, StypRules } from 'style-producer';\nimport { Theme } from './theme';\n\n/**\n * Theme style provides part of the theme styling information.\n *\n * Theme style(s) can be provided in bootstrap context. They are applied to the theme at most once, when requested\n * by calling [[Theme.style]] method.\n *\n * Theme style is either a function, or an extension of another theme style.\n */\nexport type ThemeStyle = ThemeStyle.Provider | ThemeStyle.Extension;\n\nexport namespace ThemeStyle {\n\n  /**\n   * Theme style provider function.\n   *\n   * This function is called at most once per theme to apply styles to the latter. E.g. by declaring CSS rules.\n   *\n   * This function is used as an identifier of particular style and can be extended using [[ThemeStyle.Extension]].\n   *\n   * It is not absolutely necessary to register style provider. It will be applied on request anyway.\n   *\n   * @param theme  A theme to apply styling to.\n   *\n   * @returns Dynamically updated CSS rule set containing the applied styling.\n   */\n  export type Provider = (this: void, theme: Theme) => StypRules;\n\n  /**\n   * Theme style extension.\n   *\n   * An extension should be registered in bootstrap context in order to be applied.\n   */\n  export interface Extension {\n\n    /**\n     * A theme style provider to extend.\n     */\n    readonly style: ThemeStyle.Provider;\n\n    /**\n     * Extends the theme style.\n     *\n     * This method is called at most once per theme to apply styles to the latter. E.g. by declaring CSS rules.\n     *\n     * It will be called after the style provider it extends.\n     *\n     * @param theme  A theme to apply styling to.\n     *\n     * @returns Dynamically updated CSS rule set containing the applied styling.\n     */\n    provide(theme: Theme): StypRules;\n\n  }\n\n  /**\n   * A function obtaining combined style provider. I.e. the one that applies the style along with all extensions.\n   *\n   * @param A  provider of theme style to apply.\n   *\n   * @returns A combined theme style provider.\n   */\n  export type ById = (this: void, style: ThemeStyle.Provider) => ThemeStyle.Provider;\n\n}\n\n/**\n * @internal\n */\nclass ThemeStyleKey extends SimpleContextKey<ThemeStyle.ById, ThemeStyle> {\n\n  constructor() {\n    super('theme-style');\n  }\n\n  grow<Ctx extends ContextValues>(\n      opts: ContextValueOpts<Ctx, ThemeStyle.ById, ThemeStyle, AIterable<ThemeStyle>>,\n  ): ThemeStyle.ById | null | undefined {\n\n    const providers = new Map<ThemeStyle.Provider, [ThemeStyle.Provider, boolean]>();\n\n    opts.seed.forEach(style => {\n\n      let key: ThemeStyle.Provider;\n      let provider: ThemeStyle.Provider;\n      let isId: boolean;\n\n      if (typeof style === 'function') {\n        key = provider = style;\n        isId = true;\n      } else {\n        key = style.style;\n        provider = style.provide.bind(style);\n        isId = false;\n      }\n\n      const prev = providers.get(key);\n\n      if (!prev) {\n        providers.set(key, [provider, isId]);\n      } else {\n\n        const [prevProvider, hasId] = prev;\n\n        providers.set(\n            key,\n            [\n              isId ? combineStyles(provider, prevProvider) : combineStyles(prevProvider, provider),\n              isId || hasId,\n            ],\n        );\n      }\n    });\n\n    return providers.size ? byId : opts.byDefault(() => byId);\n\n    function byId(id: ThemeStyle.Provider): ThemeStyle.Provider {\n\n      const existing = providers.get(id);\n\n      if (!existing) {\n        return id;\n      }\n\n      const [provider, hasId] = existing;\n\n      return hasId ? provider : combineStyles(id, provider);\n    }\n  }\n\n}\n\n/**\n * A key of bootstrap context value containing theme styles.\n */\nexport const ThemeStyle: ContextRef<ThemeStyle.ById, ThemeStyle> = new ThemeStyleKey();\n\n/**\n * @internal\n */\nfunction combineStyles(first: ThemeStyle.Provider, second: ThemeStyle.Provider): ThemeStyle.Provider {\n  return theme => stypRules(first(theme), second(theme));\n}\n","import { lazyStypRules, stypRoot, StypRule, StypRules } from 'style-producer';\nimport { Theme as Theme_ } from './theme';\nimport { ThemeStyle } from './theme-style';\n\n/**\n * @internal\n */\nexport class Theme extends Theme_ {\n\n  readonly root: StypRule = stypRoot();\n  private readonly _rules = new Map<ThemeStyle.Provider, StypRules>();\n\n  constructor(private readonly _styles: ThemeStyle.ById) {\n    super();\n  }\n\n  style(...styles: ThemeStyle.Provider[]): StypRules {\n\n    const theme = this;\n\n    return lazyStypRules(...styles.reduce<StypRules[]>(addStyleRules, []));\n\n    function addStyleRules(target: StypRules[], style: ThemeStyle.Provider): StypRules[] {\n\n      const existing = theme._rules.get(style);\n\n      if (existing) {\n        target.push(existing);\n      } else {\n\n        const constructed = theme._styles(style)(theme);\n\n        theme._rules.set(style, constructed);\n        target.push(constructed);\n      }\n\n      return target;\n    }\n  }\n\n}\n","import { ThemeFactory as ThemeFactory_ } from './theme-factory';\nimport { ThemeStyle } from './theme-style';\nimport { Theme } from './theme.impl';\n\n/**\n * @internal\n */\nexport class ThemeFactory extends ThemeFactory_ {\n\n  constructor(private readonly _styles: ThemeStyle.ById) {\n    super();\n  }\n\n  newTheme(): Theme {\n    return new Theme(this._styles);\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic/styp\n */\nimport { FeatureDef, FeatureDef__symbol } from '@wesib/wesib';\nimport { BasicStyleProducerSupport } from '../styp';\nimport { Theme } from './theme';\nimport { ThemeFactory } from './theme-factory';\nimport { ThemeFactory as ThemeFactory_ } from './theme-factory.impl';\nimport { ThemeStyle } from './theme-style';\n\n/**\n * @internal\n */\nconst ThemeSupport__feature: FeatureDef = {\n  needs: BasicStyleProducerSupport,\n  setup(setup) {\n    setup.provide({ a: ThemeFactory, as: ThemeFactory_, with: [ThemeStyle] });\n    setup.provide({\n      a: Theme,\n      by(factory: ThemeFactory) {\n        return factory.newTheme();\n      },\n      with: [ThemeFactory],\n    });\n  },\n};\n\n/**\n * Theme support feature.\n *\n * This needs to be enabled in order [[Theme]] and [[ThemeFactory]] to be available.\n */\nexport class ThemeSupport {\n\n  static get [FeatureDef__symbol](): FeatureDef {\n    return ThemeSupport__feature;\n  }\n\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic/input\n */\nimport { DefaultNamespaceAliaser, DefaultRenderScheduler } from '@wesib/wesib';\nimport { ContextKey__symbol, ContextValueOpts, ContextValues } from 'context-values';\nimport { ContextUpKey, ContextUpRef } from 'context-values/updatable';\nimport { afterAll, AfterEvent, EventKeeper } from 'fun-events';\nimport { InConverter, InNamespaceAliaser, InRenderScheduler, intoConvertedBy } from 'input-aspects';\n\n/**\n * Default input aspects.\n *\n * This is an `AfterEvent` keeper of aspect converter meant to be applied to controls.\n *\n * As a bare minimum it assigns the following aspects to converted controls:\n * - `InRenderScheduler` set to `DefaultRenderScheduler`,\n * - `InNamespaceAliaser` set to `DefaultNamespaceAliaser.\n *\n * More input aspect converters may be registered in context. They may override the default ones.\n */\nexport type DefaultInAspects = AfterEvent<[InConverter.Aspect<any, any>]>;\n\n/**\n * @internal\n */\nclass DefaultInAspectsKey\n    extends ContextUpKey<AfterEvent<[InConverter.Aspect<any, any>]>, InConverter.Aspect<any, any>> {\n\n  get upKey(): this {\n    return this;\n  }\n\n  constructor() {\n    super('default-in-aspects');\n  }\n\n  grow<Ctx extends ContextValues>(\n      opts: ContextValueOpts<\n          Ctx,\n          AfterEvent<[InConverter.Aspect<any, any>]>,\n          EventKeeper<InConverter.Aspect<any, any>[]> | InConverter.Aspect<any, any>,\n          AfterEvent<InConverter.Aspect<any, any>[]>>,\n  ): AfterEvent<[InConverter.Aspect.Factory<any, any>]> {\n\n    const nsAlias = opts.context.get(DefaultNamespaceAliaser);\n\n    return afterAll({\n      scheduler: opts.context.get(DefaultRenderScheduler[ContextKey__symbol].upKey),\n      fns: opts.seed,\n    }).keep.thru(\n        ({\n            scheduler: [scheduler],\n            fns,\n        }) => intoConvertedBy(\n            ...fns,\n            InRenderScheduler.to(scheduler),\n            InNamespaceAliaser.to(nsAlias),\n        ),\n    );\n  }\n\n}\n\n/**\n * A key of bootstrap, definition, or component context containing default input aspects.\n */\nexport const DefaultInAspects: ContextUpRef<DefaultInAspects, InConverter.Aspect<any, any>> = (\n    /*#__PURE__*/ new DefaultInAspectsKey()\n);\n","/**\n * @packageDocumentation\n * @module @wesib/generic/input\n */\nimport { ComponentContext } from '@wesib/wesib';\nimport { SingleContextUpKey, SingleContextUpRef } from 'context-values/updatable';\nimport { eventSupply, EventSupply } from 'fun-events';\nimport { InControl, InSupply } from 'input-aspects';\nimport { HierarchyContext } from '../hierarchy';\n\n/**\n * A user input originated from control.\n *\n * It is meant to be present in root {@link HierarchyContext hierarchy context}. Nested components may access it from\n * their hierarchy contexts to participate in user input.\n *\n * An [[inputFromControl]] function can be used to initiate user input.\n */\nexport interface InputFromControl<Value = any> {\n\n  /**\n   * Root component context the input is initiated for.\n   */\n  readonly root: ComponentContext;\n\n  /**\n   * User input control.\n   */\n  readonly control: InControl<Value>;\n\n}\n\n/**\n * No user input originated from control.\n */\nexport interface NoInputFromControl {\n  control?: undefined;\n}\n\n/**\n * A key of hierarchy context value containing a user input originated from control. Potentially\n * {@link NoInputFromControl absent}.\n */\nexport const InputFromControl: SingleContextUpRef<InputFromControl | NoInputFromControl> = (\n    /*#__PURE__*/ new SingleContextUpKey<InputFromControl | NoInputFromControl>(\n        'input-receiver',\n        {\n          byDefault: () => ({}),\n        },\n    )\n);\n\n/**\n * Initiates user input from the given control for the given root component.\n *\n * Constructs an [[InputFromControl]] instance and makes it available in `root` component's hierarchy.\n *\n * @param root  Root component context to initiate user input for.\n * @param control  User input control.\n *\n * @returns User input supply. The user input would be stopped once this supply is cut off.\n */\nexport function inputFromControl<Value>(\n    root: ComponentContext,\n    control: InControl<Value>,\n): EventSupply {\n\n  const off = root.get(HierarchyContext).provide({\n    a: InputFromControl,\n    by: () => ({\n      root,\n      control,\n    }),\n  });\n\n  return eventSupply(off).needs(control.aspect(InSupply));\n}\n","/**\n * @packageDocumentation\n * @module @wesib/generic/input\n */\nimport { Class, Component, ComponentClass, ComponentContext, ComponentDecorator } from '@wesib/wesib';\nimport { nextArg, nextArgs, NextCall } from 'call-thru';\nimport { afterAll, EventKeeper, EventSupply, nextAfterEvent, OnEventCallChain } from 'fun-events';\nimport { InControl, InConverter, InSupply } from 'input-aspects';\nimport { HierarchyContext } from '../hierarchy';\nimport { DefaultInAspects } from './default-in-aspects';\nimport { inputFromControl, InputFromControl, NoInputFromControl } from './input-from-control';\n\n/**\n * Constructs component decorator that converts input control from {@link HierarchyContext.up enclosing component}\n * and uses it as an {@link InputFromControl origin of user input} in decorated component.\n *\n * @param convert  Input control converter definition.\n *\n * @returns New component decorator.\n */\nexport function ConvertInput<T extends ComponentClass = Class>(\n    convert: ConvertInputDef<InstanceType<T>>,\n): ComponentDecorator<T> {\n  return Component({\n    define(defContext) {\n      defContext.whenComponent(context => {\n\n        const { up } = context.get(HierarchyContext);\n\n        afterAll({\n          parent: up.keep.thru_(\n              upper => upper ? nextAfterEvent(upper.get(InputFromControl)) : nextArg<NoInputFromControl>({}),\n          ),\n          aspects: context.get(DefaultInAspects),\n        }).keep.thru_(\n            ({\n              parent: [control],\n              aspects: [aspects],\n            }): NextCall<OnEventCallChain, [InControl<any>?, EventSupply?]> => {\n              if (control.control) {\n\n                const converted = convert({ control, context, aspects });\n\n                if (converted) {\n                  return converted instanceof InControl\n                      ? nextArgs(converted)\n                      : nextAfterEvent(converted);\n                }\n              }\n\n              return nextArgs();\n            },\n        ).consume(\n            (control?: InControl<any> | null, supply?: EventSupply) => {\n              if (!control) {\n                return;\n              }\n\n              const usageSupply = inputFromControl(context, control);\n\n              (supply || control.aspect(InSupply)).needs(usageSupply);\n\n              return usageSupply;\n            },\n        );\n      });\n    },\n  });\n}\n\n/**\n * Converter definition of enclosing component's user input control.\n *\n * The returned converted control keeper may send an event supply as a second parameter. This supply will be cut off\n * once the input from converted control is no longer needed. Otherwise the control's input supply (`InSupply`) will\n * be cut off instead, and control would become unusable after that.\n *\n * Configures {@link ConvertInput @ConvertInput} component decorator.\n */\nexport type ConvertInputDef<T extends object = any> =\n/**\n * @param control  Enclosing component's user input to convert.\n * @param context  Decorated component context.\n * @param aspects  Default input aspect converter. This is a value of [[DefaultInputAspect]].\n *\n * @returns Either input control, its keeper, or nothing.\n */\n    (\n        this: void,\n        {\n          control,\n          context,\n          aspects,\n        }: {\n          control: InputFromControl;\n          context: ComponentContext<T>;\n          aspects: InConverter.Aspect<any, any>;\n        },\n    ) => InControl<any> | EventKeeper<[InControl<any>?, EventSupply?]> | null | undefined;\n"],"names":["BootstrapContext__key","SingleContextKey","BootstrapContext","ContextValues","ContextKey__symbol","bootstrapDefault","provide","context","key","bootstrapContext","get","ComponentFactory__key","ComponentFactory","[object Object]","element","mount","this","mountTo","connected","BootstrapWindow","byDefault","window","BootstrapRoot","ctx","document","body","DefaultNamespaceAliaser","DefaultRenderScheduler","FnContextKey","options","newRenderSchedule","isArray","value","Array","ArraySet","AIterable","super","items","Set","size","Symbol","iterator","next","forEach","item","add","superClassOf","type","satisfying","prototype","Object","getPrototypeOf","superType","constructor","mergeFunctions","first","second","merge","_f","s","args","apply","isElement","node","nodeType","Node","ELEMENT_NODE","MetaAccessor","symbol","hasOwnProperty","undefined","ownDef","own","superDef","of","sources","prevMeta","updates","mapIt","source","meta","newMeta","flatMapIt","defineProperty","configurable","PromiseResolver","promise","Promise","resolve","reject","_resolve","_reject","error","FeatureDef__symbol","FeatureMeta","defs","itsReduction","prev","def","needs","has","setup","init","featureMeta","noFeatureDef","FeatureDef","featureType","for","all","define","Feature","FeatureContext__key","FeatureContext","componentType","whenDefined","feature","load","FeatureNeedsError","Error","reduce","reason","need","name","ComponentDef__symbol","ComponentMeta","isQualifiedName","componentMeta","noComponentDef","ComponentDef","Component","decorator","ComponentContext__key","ComponentEventDispatcher__key","dispatch","event","dispatchEvent","on","DomEventDispatcher","ContentRoot","StateUpdater","valueProvider","noop","ComponentContext__symbol","ComponentContext","updateComponentState","bind","TypeError","contentRoot","newValue","oldValue","ComponentEvent","Event","target","ElementAdapterKey","ContextUpKey","upKey","createUpKey","opts","seed","keep","thru","adapters","combined","adapter","defaultElementAdapter","defaultProvider","afterThe","nextAfterEvent","delegated","or","ElementAdapter","ElementObserver","bsContext","DefaultElementObserver","MutationObserver","callback","mutations","mutation","itsEach","overArray","removedNodes","mountOf","checkConnected","filterIt","addedNodes","observe","childList","ComponentFactory__symbol","componentFactoryOf","factory","CustomElements__key","values","customElements","nsAlias","CustomElements","componentTypeOrName","elementType","html__naming","extend","elementDef","extends","componentResolver","ComponentResolver__symbol","DefinitionContext__key","ElementDef","elementExtend","HTMLElement","DefinitionContext","BootstrapContextRegistry__key","BootstrapContextRegistry","ContextRegistry","a","is","newValues","ComponentContextRegistry__key","ComponentContextRegistry","DefinitionContextRegistry__key","DefinitionContextRegistry","PostDefSetup__symbol","postDefSetup","tracker","trackValue","emitter","EventEmitter","onSetup","read","nextArgs","nextSkip","onAny","superPostDefSetup","send","result","it","WhenComponent","currentRev","created","onCreated","onEventBy","receiver","receiverRev","supply","receive","eventContext","componentContext","notifiedRev","recurrentReceiver","onRecurrent","recurrentContext","readNotifier","thru_","rev","ElementBuilder","definitionContextRegistry$global","componentContextRegistry$global","definitions","components","whenComponent","componentContextRegistry$perType","ready","whenReady","cls","definitionContext","createComponentContextRegistry","append","componentFactory","ComponentFactory_","createComponent","registry","elementSuper","createMount","component","elementStatus","el","doc","ownerDocument","contains","componentCreated","DefinitionContext_","once","definitionContextRegistry","seedIn","definitionSetup","perDefinition","spec","perComponent","componentContextRegistry","Element","createElementType","enumerable","status","destructionReason","whenOff","whenDestroyed","sts","whenOn","offSupply","eventSupply","off","ComponentContext_","done","lastRev","parentNode","parentElement","removeChild","removeElement","ComponentStatus__symbol","writable","notifier","_","proto","prevContext","newComponent","bubbles","doNotAdd","ComponentRegistry","_context","_definitionQueue","definition","push","buildElement","FeatureKey__symbol","FeatureKey","from","preferredFeatureClause","afterEventBy","origin","stageId","afterAll","clause","deps","loadFeatureDeps","request","loader","to","stage","ownLoader","FeatureLoader","ownSource","rcv","unload","share","lastLoader","preventDuplicateLoader","clauses","preferred","required","afterEach","dep","presentFeatureDeps","isPresent","down","_down","_stage","SetupFeatureStage","then","after","state","lastStage","id","prevStage","stop","FeatureStage","_stop","action","map","perDep","unloader","unloads","adder","reverse","length","newUnloader","componentRegistry","elementBuilder","onDefinition","tillOff","onComponent","st","bs","by","onPostDefSetup","newFeatureContext","InitFeatureStage","ActiveFeatureStage","FeatureRequest","_requester","_revoke","featureDef","requester","isClause","_revokeBy","unuse","_uses","revoke","FeatureRequester__key","FeatureRequester","Map","existing","_map","reuse","delete","set","bootstrapComponents","features","bootstrapContextRegistry","create","complete","newNamespaceAliaser","info","_ctx","ldr","whenDown","AfterEvent__symbol","initBootstrap","AttributePath__root","attributePathTo","attributeStateUpdate","updateState","update","defaultUpdateState","call","path","AttributeRegistrar","AttributeRegistry__key","AttributeRegistry","_MutationObserver","_attrs","attrs","observedAttributes","keys","attributeFilter","records","record","attributeName","getAttribute","attributes","attributeOldValue","AttributesSupport__feature","as","with","AttributesSupport","Attribute","propertyKey","descriptor","toString","parseAttributeDef","newDesc","setAttribute","Attributes","defContext","registrar","defineByItem","ComponentState__key","ComponentState","StateTracker","StateSupport__feature","StateSupport","trackAttribute","track","onUpdate","_path","ValueTracker","removeAttribute","DomPropertyPath__root","ElementRender","render","offline","stateTracker","schedule","rendered","stateSupply","scheduleRender","renderElement","newRender","Render","ShadowContentRoot","ShadowDomEvent","shadowRoot","ShadowRootBuilder","ShadowDomSupport__feature","attachShadow","ShadowDomSupport","shadowRootOf","defaultShadowContentDef","mode","AttachShadow","Wesib__NS","NamespaceDef","FetchAgentKey","agents","nextArg","fetch","agentIdx","agentRequest","agent","onSupplied","nextRequest","combineFetchAgents","defaultFetchAgent","HttpFetchAgent","HttpFetchAborted","HttpFetch","input","Request","responseEmitter","abortController","AbortController","signal","abort","response","customSignal","aborted","catch","HierarchyRoot","root","HierarchyUpdates","issue","HierarchyUpdates__key","hierarchyRoot","parent","findParentContext","immediate","HierarchyContext__key","up","parentHierarchy","rootSupply","parentSupply","updateParent","parentCtx","HierarchyContext","consume","newParent","onSupply","upper","newHierarchyRegistry","newHierarchyContext","ComponentNode","ElementNodeList","OnEvent__symbol","WATCH_DEEP","subtree","elementNodeList","selectorOrType","nodeOf","deep","iterable","selector","cache","selected","refresh","added","observer","removed","removeNode","addNode","nodeList","firstReceiver","disconnect","onTrackUpdate","initialEmitter","afterSupplied","list","itsFirst","addEventListener","ElementNodeList_","itsIterator","sel","querySelectorAll","children","matches","select","AttributesObserver","_bs","_observer","Observer","_update","self","_emitter","eventReceiver","_emitters","reconnect","takeRecords","AttributeTracker","_name","observeSupply","noEventSupply","_updates","NodeAttributes","PropertyTracker","_element","_key","propertyState","_supply","NodeProperties","_props","prop","ElementNode__symbol","ElementNode","_bind","elementNodeOf","optional","selectNodes","ComponentTreeSupport__feature","ComponentTreeSupport","Navigation__key","Navigation","go","PageParam__symbol","PageParam","PageParamContext","NavHistory__key","NavHistory","extractNavData","data","_document","_location","location","_history","history","_uid","btoa","String","Math","random","entry","newEntry","url","URL","href","title","_entries","enter","replaceState","_historyState","PageEntry","_lastId","toEntry","page","pushState","_enter","when","fromEntry","e","_forget","leave","popState","_changeHash","uid","pageId","existingEntry","transfer","oldEntry","forget","wesib:navigation:data","_params","visited","_status","current","ref","put","handle","param","newHandle","entries","transferred","at","stay","clear","NavigationAgentKey","navigate","agentTo","nextURL","nextTitle","nextData","baseURI","defaultNavigationAgent","_when","_from","NavigationAgent","EnterPageEvent","cancelable","LeavePageEvent","StayOnPageEvent","createNavigation","dispatcher","navHistory","onEnter","onLeave","onStay","onEvent","nav","nextEntry","readPage","hashChange","Navigation_","delta","toURL","withParam","applyParams","open","replace","whenLeave","urlTarget","urlTargetOf","doNavigate","prepared","leavePage","finalTarget","t","prepare","NavigationSupport__feature","NavigationSupport","inactiveNavLink","ActivateNavLink","pick","activate","scheduler","active","defaultActiveNavLinkClass","activeClass","css__naming","NavLinkRenderSchedule__symbol","makeActive","classList","remove","assignClass","lastSupply","activateNavLink","weigh","defaultNavLinkWeight","weight","supplier","navLinkWeight","navigation","componentNode","connectSupply","nodes","weights","maxWeight","selectActiveNavLink","linkURL","calcNavLinkWeight","pageURL","linkDir","navLinkPath2dir","pageDir","hash","navLinkSearchParamsWeight","navLinkHash2url","searchParamWeight","startsWith","pathname","endsWith","substring","searchParams","linkParams","pageParams","_value","pageValues","getAll","every","linkValue","HandleNavLinks","defaultHandleNavLinks","events","eventType","preventDefault","importNode","beforeOrImport","importContent","importNodeContent","before","elementClone","createElement","tagName","toLowerCase","getAttributeNames","attr","insertBefore","nodeClone","childNodes","cachingPageLoader","pageUrl","sup","tracked","onLoad","trackSupply","resp","num","requested","PageLoadAbortError","pageLoadRequestsParam","_page","requests","PageLoadRequests","_navigation","_loader","fragments","fragment","pageSupply","loadSupply","_add","_transfer","responseReceiver","ok","tag","getElementsByTagName","getElementById","onFragment","req","PageLoadAgent","PageLoadURLModifier","PageLoader","httpFetch","modifyURL","parser","DOMParser","credentials","headers","Headers","Accept","fetchRequest","header","hthvQuote","requestPageFragments","EventNotifier","onAsync","text","batch","nextEach","parsePageDocument","parseFromString","hthvParse","v","head","base","querySelector","newBase","appendChild","PageLoadParam","pageLoadParam","PageCacheBuster__key","PageCacheBuster","appRev","urlModifier","newRev","reload","pageScriptsAgent","allScripts","externalScripts","scripts","src","script","pageStyleAgent","newStyles","oldStyles","oldStylesByHref","firstOldStyle","link","newStyle","oldStyle","nextSibling","style","pageTitleAgent","textContent","PageLoadSupport__feature","buster","PageLoadSupport","IncludePage","onResponse","detectFragment","range","createRange","selectNodeContents","deleteContents","createDocumentFragment","insertNode","handleResponse","ComponentStyleProducer","ComponentStypRender","MultiContextKey","ElementIdClass__NS","ElementIdClass","contextValues","aliaser","local","uniqueClassSeq","qualified","ComponentStyleProducer__key","_produce","produceBasicStyle","rules","rootSelector","renders","hostSelector","stypSelector","shadowRender","noShadowRender","c","buildRender","order","producer","properties","rest","host","extractHostSelector","u","extendHostSelector","ns","i","$","restParts","prefix","params","BasicStyleProducerSupport__feature","ComponentStyleProducer_","produce","BasicStyleProducerSupport","ComponentStypOptions","css","lazyStypRules","produceStyle","doProduceStyle","cssSupply","connectionSupply","ProduceStyle","property","StyleProducerSupport__feature","StyleProducerSupport","Theme__key","Theme","referrer","ThemeFactory__key","ThemeFactory","ThemeStyle","SimpleContextKey","providers","provider","isId","prevProvider","hasId","combineStyles","byId","theme","stypRules","Theme_","_styles","stypRoot","styles","_rules","constructed","ThemeFactory_","ThemeSupport__feature","newTheme","ThemeSupport","DefaultInAspectsKey","fns","intoConvertedBy","InRenderScheduler","InNamespaceAliaser","DefaultInAspects","InputFromControl","SingleContextUpKey","inputFromControl","control","aspect","InSupply","ConvertInput","convert","aspects","converted","InControl","usageSupply"],"mappings":"+eAMO,MAAMA,OAA2CC,EAAmC,qBCe3F,MAAsBC,WAAyBC,EAK7CC,WAAYA,KACV,OAAOJ,ICXX,SAAgBK,GACZC,GAEF,MAAO,CAACC,EAASC,KAEf,MAAMC,EAAmBF,EAAQG,IAAIR,IAErC,OAAOK,IAAYE,EAAmBH,EAAQG,EAAkBD,GAAOC,EAAiBC,IAAIF,ICVhG,MAAMG,OAA2CV,EAAmC,qBAQpF,MAAsBW,GAKpBR,WAAYA,KACV,OAAOO,GAqDTE,UAAUC,GAER,MAAMC,EAAQC,KAAKC,QAAQH,GAI3B,OAFAC,EAAMG,WAAY,EAEXH,SClEEI,OAAwElB,EACjF,SACA,CACEmB,UAAS,IACAC,SCHFC,OAAoErB,EAC7E,iBACA,CACEmB,UAAUG,GACDA,EAAIb,IAAIS,IAAiBK,SAASC,OCJpCC,OACSzB,EAA0C,6BCHnD0B,OAESC,EACd,2BACA,CACER,UAAWf,GACPE,GAAW,CAACsB,EAAU,KAAOC,iCACxBD,IACHR,OAAQQ,EAAQR,QAAUd,EAAQG,IAAIS,mBCjBtCY,GAAWC,GACzB,OAAOC,MAAMF,QAAQC,GCDvB,MAAaE,WAAoBC,EAI/BtB,YAAYmB,GACVI,QACApB,KAAKqB,MAAiB,MAATL,EAAgB,IAAIM,IAAQP,GAAQC,GAAS,IAAIM,IAAIN,GAAS,IAAIM,IAAI,CAACN,IAGtFA,YACE,OAAQhB,KAAKqB,MAAME,MACnB,KAAK,EAAG,OACR,KAAK,EAAG,OAAOvB,KAAKqB,MAAMG,OAAOC,YAAYC,OAAOV,MACpD,QAAS,MAAO,IAAIhB,KAAKqB,QAI3BxB,CAAC2B,OAAOC,YACN,OAAOzB,KAAKqB,MAAMG,OAAOC,YAG3B5B,OAAOwB,GAEL,OADAA,EAAMM,QAAQC,GAAQ5B,KAAKqB,MAAMQ,IAAID,IAC9B5B,KAGTuB,WACE,OAAOvB,KAAKqB,MAAME,KAGpB1B,MAAMwB,GACJ,OAAa,MAATA,EACKrB,KAELe,GAAQM,GACHrB,KAAK6B,OAAOR,GAEdrB,KAAK6B,IAAIR,ICjBpB,SAAgBS,GAAaC,EAAaC,EAAuC,MAAM,IAErF,MAAMC,EAAYC,OAAOC,eAAeJ,EAAKE,WAE7C,GAAiB,MAAbA,EACF,OAGF,MAAMG,EAAYH,EAAUI,YAE5B,OAAIL,EAAWI,GACNA,EAGFN,GAAaM,EAAWJ,YCLjBM,GACZC,EACAC,EACAC,EAAoC,EAACC,EAAIC,IAAMA,IAEjD,OAAKJ,EAGAC,EAGE,YAAsBI,GAC3B,OAAOH,EACHF,EAAMM,MAAM7C,KAAM4C,GAClBJ,EAAOK,MAAM7C,KAAM4C,KALhBL,EAHAC,ECrCX,SAAgBM,GAAUC,GACxB,OAAOA,EAAKC,WAAaC,KAAKC,aCChC,MAAsBC,GAIpBtD,YAAsBuD,GACpBpD,KAAKoD,OAASA,EAGhBvD,IAAIkC,GAEF,OAAOA,EAAKsB,eAAerD,KAAKoD,QAAWrB,EAAa/B,KAAKoD,aAAUE,EAGzEzD,GAAGkC,GAED,MAAMwB,EAAwBvD,KAAKwD,IAAIzB,GACjCK,EAAYN,GAAaC,GACzB0B,EAAWrB,GAAapC,KAAK0D,GAAGtB,GAEtC,OAAOmB,EAAUE,EAAWzD,KAAKyC,MAAM,CAACgB,EAAUF,IAAWA,EAAUE,EAGzE5D,OAAwBkC,EAAS4B,GAE/B,MAAMC,EAAW5D,KAAKwD,IAAIzB,GACpB8B,EAAUC,EAAMH,EAASI,GAAU/D,KAAKgE,KAAKD,EAAQhC,IACrDkC,EAAajE,KAAKyC,MAAMmB,EAAWM,EAAU,CAAC,CAACN,GAAWC,IAAYA,GAW5E,OATA3B,OAAOiC,eACHpC,EACA/B,KAAKoD,OACL,CACEgB,cAAc,EACdpD,MAAOiD,IAINlC,GCxCX,MAAasC,GAMXxE,cACEG,KAAKsE,QAAU,IAAIC,QAAQ,CAACC,EAASC,KACnCzE,KAAK0E,SAAWF,EAChBxE,KAAK2E,QAAUF,IAInB5E,QAAQmB,GACNhB,KAAK0E,SAAS1D,GAGhBnB,OAAO+E,GACL5E,KAAK2E,QAAQC,ICXjB,MAAaC,GAAoCrD,OAAO,eAyFxD,MAAMsD,WAAoB3B,GAExBtD,cACEuB,MAAMyD,IAGRhF,MAAMkF,GACJ,OAAOC,EACHD,EACA,CAACE,EAAMC,MACLC,MAAO,IAAIjE,GAAS+D,EAAKE,OAAO1C,MAAMyC,EAAIC,OAAOnE,MACjDoE,IAAK,IAAIlE,GAAS+D,EAAKG,KAAK3C,MAAMyC,EAAIE,KAAKpE,MAC3CqE,MAAO/C,GAA8C2C,EAAKI,MAAOH,EAAIG,OACrEC,KAAMhD,GAA8C2C,EAAKK,KAAMJ,EAAII,QAErE,IAINzF,KAAKkE,EAAoBhC,GAEvB,MAAMmD,EAAMnB,EAAOc,IAEnB,OAAc,MAAPK,EACDnB,EACA/D,KAAKgE,KACY,mBAARkB,EAAsBnB,EAA8Bc,IAAoB9C,GAAQmD,EACvFnD,IASZ,MAAMwD,OAAiCT,GAKjCU,GAAmC,CACvC3F,CAACgF,IAAmB,KACX,KAOEY,GAAa,CAUxB/B,GAAegC,GACNH,GAAY7B,GAAGgC,IAAgB,GAWxCC,IAAG,CAAaD,EAAoBR,IAC3BK,GAAYvB,KAAKkB,EAAKQ,GAU/BjD,MAAK,IAAgBsC,IACZQ,GAAY9C,MAAMsC,GAU3Ba,IAAG,IAAgBb,IACVC,EACHD,EACA,CAACE,EAAMC,MACLrF,CAACgF,IAAoBa,GACZD,GAAWhD,MACdgD,GAAWE,IAAID,EAAaT,GAC5BQ,GAAWE,IAAID,EAAaR,MAIpCM,IAeNK,OAAM,CAA8BH,KAAmBX,IAC9CQ,GAAYM,OAAOH,EAAaX,ICpM3C,SAAgBe,MAAkCf,GAChD,OAAQhD,GAAY0D,GAAWI,OAAO9D,KAASgD,GCdjD,MAAMgB,OAAyC9G,EAAiC,mBAOhF,MAAsB+G,WAAuB9G,GAK3CE,WAAYA,KACV,OAAO2G,GAyDTlG,YAA8BoG,GAC5B,OAAOjG,KAAKN,IAAIR,IAAkBgH,YAAYD,GAGhDpG,KAAKsG,GACH,OAAOnG,KAAKN,IAAIR,IAAkBkH,KAAKD,ICnE3C,MAAaE,WAA0BC,MAYrCzG,YAAYsF,GACV/D,MACI,2BAA6B+D,EAAMoB,OACnC,CACItB,GACCkB,EAASK,EAAQC,MAChBxB,GAAckB,EAAQO,MAAQ,IAAIF,KAAUC,EAAKC,OACvD,KAGJ1G,KAAKmF,MAAQA,GC9BjB,MAAawB,GAAsCnF,OAAO,iBAiH1D,MAAMoF,WAAsBzD,GAE1BtD,cACEuB,MAAMuF,IAGR9G,MAAwBkF,GACtB,OAAOC,EACHD,EACA,CAACE,EAAMC,iDACFD,GACAC,IACHG,MAAO/C,GAAe2C,EAAKI,MAAOH,EAAIG,OACtCQ,OAAQvD,GAAe2C,EAAKY,OAAQX,EAAIW,QACxCM,QAASlB,EAAKkB,QACRjB,EAAIiB,QAAUV,GAAWhD,MAAMwC,EAAKkB,QAASjB,EAAIiB,SAAWlB,EAAKkB,QACjEjB,EAAIiB,UAEZ,IAINtG,KAAuBkE,EAAyBkC,GAE9C,MAAMf,EAAOnB,EAAe4C,IAE5B,OAAW,MAAPzB,EACKlF,KAAKgE,KACO,mBAARkB,EAAsBnB,EAAmC4C,IAAsBV,GAAiBf,EACvGe,GAGqC,MAAtClC,EAAec,IACX,CACLsB,QAASV,GAAWE,IAAIM,EAAelC,IAGvC8C,EAAgB9C,GACX,CAAE2C,KAAM3C,GAGVA,GAQX,MAAM+C,OAAmCF,GAKnCG,GAAuC,CAC3ClH,CAAC8G,IAAqB,KACb,KAOEK,GAAe,CAU1BtD,GAAiCuC,GACxBa,GAAcpD,GAAGuC,IAA6C,GAWvEN,IAAG,CAECM,EACAlC,IAEK+C,GAAc9C,KAAKD,EAAQkC,GAWpCxD,MAAK,IAAkCsC,IAC9B+B,GAAcrE,MAAMsC,GAW7Ba,IAAG,IAAkCb,IAC5BC,EACHD,EACA,CAACE,EAAMC,MACLrF,CAAC8G,IAAsBV,GACde,GAAavE,MAChBuE,GAAarB,IAAIM,EAAehB,GAChC+B,GAAarB,IAAIM,EAAef,MAIxC6B,IAkBNlB,OAAM,CAEFI,KACGlB,IAEE+B,GAAcjB,OAAOI,EAAelB,ICtO/C,SAAgBkC,MACTlC,GAGL,MAAMmC,EAAcnF,GAAYiF,GAAanB,OAAO9D,KAASgD,GAK7D,OAJYmC,EAERP,IAAwB,IAAMK,GAAapB,OAAOb,GAE/CmC,EChDT,MAAaC,OAA2ClI,EAAmC,qBCE9EmI,OAAmDnI,EAC5D,6BACA,CACEmB,UAAS,KACA,CACLiH,SAAQ,CAAC9H,EAA2B+H,IAC3B/H,EAAQO,QAAQyH,cAAcD,GAEvCE,GAAE,CAAkBjI,EAA2BwC,IAE1B,IAAI0F,EAAmBlI,EAAQO,SAEhC0H,GAAGzF,OCCpB2F,OAAgEzI,EACzE,eACA,CACEmB,UAAUG,GACDA,EAAIb,IAAIyH,IAAuBrH,UCOjC6H,OAA0E/G,EACnF,gBACA,CACER,UAAWwH,EAAcC,KCflBC,GAA0CtG,OAAO,qBAa9D,MAAsBuG,WAAiD5I,EAAvEU,kCAgGWG,iBAA4BgI,GAAqBC,KAAKjI,MA3F/DZ,WAAYA,KACV,OAAO+H,GAqGTtH,UAA4BC,GAE1B,MAAMP,EAAUO,EAAQgI,IAExB,IAAKvI,EACH,MAAM2I,UAAU,iCAAiCpI,KAGnD,OAAOP,EAQT4I,kBACE,OAAOnI,KAAKN,IAAIgI,IAoBlB7H,GAAoBkC,GAClB,OAAO/B,KAAKN,IAAI0H,IAA+BI,GAAGxH,KAAM+B,GAU1DlC,cAAcyH,GACZtH,KAAKN,IAAIV,IAAuBU,IAAI0H,IAA+BC,SAASrH,KAAMsH,IAqBtF,SAASU,GAAqDxI,EAAgB4I,EAAaC,GACzFrI,KAAKN,IAAIiI,GAAT3H,CAAuBR,EAAK4I,EAAUC,GCzLxC,MAAaC,WAAuBC,MAKlChJ,cACE,OAAOwI,GAAiBrE,GAAG1D,KAAKwI,SCHpC,MAAMC,WAA0BC,EAI9B7I,cACEuB,MAAM,mBACNpB,KAAK2I,MAAQ3I,KAAK4I,YACdC,GAAQA,EAAKC,KAAKC,KAAKC,KAAK,IAAIC,KAE9B,MAAMC,EAA2BD,EAAS1C,OACtC,CAACtB,EAAMkE,IAAYrJ,GAAWmF,EAAKnF,IAAYqJ,EAAQrJ,GACvDsJ,IAGEC,EAAkB,IAAoCC,EAASF,IAErE,OAAOF,IAAaE,GACdF,EACAK,EAAeV,EAAKzI,UAAUiJ,IAAoBA,QAKhExJ,KACIgJ,GAOF,IAAIW,EAOJ,OALAX,EAAKtJ,QAAQG,IACTM,KAAK2I,MACL,OAAQE,EAAO,CAAEY,GAAe,MAAXZ,EAAKY,GAAaH,EAAST,EAAKY,IAAMZ,EAAKY,SAAOnG,EAF3EuF,CAGGM,GAAWK,EAAYL,GAEnBrJ,GAAW0J,EAAU1J,IAQhC,SAASsJ,GAAsBtJ,GAC7B,OAAOA,EAAQgI,IAQjB,MAAa4B,OAAkFjB,GCxClFkB,OAAwF/I,EACjG,mBACA,CACER,UAAWf,GAAiBuK,IAE1B,MAAMT,EAAUS,EAAUlK,IAAIgK,IAC9B,MAAMG,UAA+BC,iBAEnCjK,YAAYkK,GACV3I,MAAM4I,IACJA,EAAUrI,QAAQsI,IAChBC,EACIC,EAAUF,EAASG,cACnBrH,2BA4CpB,SAAiBA,SACf,iBAAOA,EAAK+E,0BAA2B/H,MA7CbsK,CAAQtH,yBAAOuH,mBAE3BJ,EACIK,EACIJ,EAAUF,EAASO,YACnB1H,IAEJhD,uCAAWqJ,EAAQrJ,yBAAUC,4BAAOuK,qBAG1CP,EAASC,EAAWhK,QAIxBH,QAAQ2I,EAAc3H,GACpBO,MAAMqJ,QAAQjC,iCAAa3H,IAAS6J,WAAW,MAKnD,OAAOX,GAAY,IAAIF,EAAuBE,OCxEtD,MAAaY,GAA0CnJ,OAAO,qBAK9D,SAAgBoJ,GAAqC3E,GAEnD,MAAM4E,EAAW5E,EAAsB0E,IAEvC,IAAKE,EACH,MAAM,IAAI3C,UAAU,6BAA6BjC,KAGnD,OAAO4E,ECJT,MAAMC,OAAyC7L,EAC3C,kBACA,CACEmB,UAqDN,SAA8B2K,GAE5B,MAAMC,EAAwCD,EAAOrL,IAAIS,IAAiB6K,eACpEC,EAAUF,EAAOrL,IAAIgB,IA+C3B,OAAO,IA7CP,cAAmCwK,GAEjCrL,OAAOsL,EAA8CC,GACnD,GAAIvE,EAAgBsE,GAElB,YADAH,EAAenF,OAAOwF,EAAa3E,KAAKyE,EAAqBF,GAAUG,GAIzE,MAAMP,EAAUD,GAAmBO,IAC7BzE,KAAEA,EAAI4E,OAAEA,GAAWT,EAAQU,WAE5B7E,EAID4E,GAAUA,EAAO5E,KACnBsE,EAAenF,OACXwF,EAAa3E,KAAKA,EAAMuE,GACxBG,EACA,CACEI,QAASF,EAAO5E,OAItBsE,EAAenF,OAAOwF,EAAa3E,KAAKA,EAAMuE,GAAUG,GAZxDK,GAAkBN,GAAqB3G,aAAQlB,GAgBnDzD,YAAYsL,GACV,GAAItE,EAAgBsE,GAClB,OAAOH,EAAe9E,YAAYmF,EAAa3E,KAAKyE,EAAqBF,IAG3E,MAAMJ,EAAUD,GAAmBO,IAC7BzE,KAAEA,GAASmE,EAAQU,WAEzB,OAAK7E,EAIEsE,EAAe9E,YAAYmF,EAAa3E,KAAKA,EAAMuE,IAHjDQ,GAAkBN,GAAqB7G,aAlFtD,MAAsB4G,GAQpB9L,WAAYA,KACV,OAAO0L,IAuFX,MAAMY,GAA2ClK,OAAO,sBAKxD,SAASiK,GAAkBxF,GACzB,OAAQA,EAAsByF,MACrBzF,EAAsByF,IAA6B,IAAIrH,IC/HlE,MAAasH,OAA4C1M,EAAoC,sBCoChF2M,OAA8D3M,EACvE,cACA,CACEY,UAAUkL,GAER,MAAM9E,EAAgB8E,EAAOrL,IAAIiM,IAAwB1F,eACnDS,KAAEA,EAAI4E,OAAEA,GAAWtE,GAAatD,GAAGuC,GAEnC4F,EAAmC,CACvC9J,WACE,OAAOuJ,GAAUA,EAAOvJ,MAAQgJ,EAAOrL,IAAIS,IAAiB2L,aAE9DpF,WACE,OAAO4E,GAAUA,EAAO5E,OAI5B,MAAO,CACLA,WACE,OAAOA,GAET4E,aACE,OAAOO,OC1CnB,MAAsBE,WAAkD5M,EAKtEC,WAAYA,KACV,OAAOuM,GA0CTJ,iBACE,OAAOvL,KAAKN,IAAIkM,KCpEpB,MAAMI,OACgB/M,EAA2C,8BAMjE,MAAagN,WAAiCC,EAY5CrM,cACEuB,QACApB,KAAKV,QAAQ,CAAE6M,EAAGF,GAA0BG,GAAIpM,OAChDA,KAAK+K,OAAS/K,KAAKqM,YAbrBjN,WAAYA,KACV,OAAO4M,GAKTnM,gBACE,OAAO,IAAIoM,ICff,MAAMK,GAAgC,IAAIrN,EACtC,6BACA,CACEmB,UAAWf,GAAiB,IAAM,IAAIkN,MAO5C,MAAaA,WAAiCL,EAE5C9M,WAAYA,KACV,OAAOkN,ICbX,MAAME,GAAiC,IAAIvN,EACvC,8BACA,CACEmB,UAAWf,GAAiBE,GAAW,IAAIkN,GAA0BlN,MAO3E,MAAakN,WAAkCP,EAE7C9M,WAAYA,KACV,OAAOoN,ICuCX,MAAME,GAAsClL,OAAO,kBAKnD,SAAgBmL,GAA+B1G,GAE7C,GAAIA,EAAc5C,eAAeqJ,IAC/B,OAAQzG,EAAsByG,IAGhC,MAAME,EAAUC,IACVC,EAAU,IAAIC,EACdC,EAAyCJ,EAAQK,KAAKjE,KAAK3D,GAASA,EAAQ6H,EAAS7H,GAAS8H,KAC9F3F,EAAK4F,EAAMJ,EAASF,GACpB1K,EAAYN,GAAamE,EAAelE,GAAQ4E,MAAwB5E,GAE9E,GAAIK,EAAW,CAEb,MAAMiL,EAAoBV,GAAavK,GAEvCoF,EAAGnC,GAASgI,EAAkBC,KAAKjI,IAGrC,MAAMkI,EAA0B,CAC9B/F,GAAAA,EACA3H,KAAKwF,GACHyH,EAAQQ,KAAKjI,IAEfxF,MAAMwF,GACJuH,EAAQY,GAAKnI,IAMjB,OAFAnD,OAAOiC,eAAe8B,EAAeyG,GAAsB,CAAE1L,MAAOuM,IAE7DA,QCzFIE,GAKX5N,cAEE,MAAM6N,EAAab,EAAW,GACxBc,EAAU,IAAIZ,EAEpB/M,KAAK4N,UAAYC,EAAUC,IAEzB,MAAMC,EAAcL,EAAWF,GAAK,EAEpCG,EAAQnG,GAAG,CACTwG,OAAQF,EAASE,OACjBC,QAAS,CAACC,EAAcC,EAAkBC,KACpCA,EAAcL,GAEhBD,EAASG,QACL,CACEpO,YAAYwO,GACVH,EAAaI,YAAYC,GAAoBF,EAAkBE,MAGnEJ,QAMRT,EAAWF,KAEfxN,KAAKwO,aAAed,EAAWT,KAAKlE,KAAK0F,MACrCC,GAAO,CAACnP,EAAS6O,KACfT,EAAQL,KAAK/N,EAAS6O,GACfM,KCFV,MAAMC,OAAsE1P,EAC/E,kBACA,CACEmB,UAAWf,IAajB,SAA2BuK,GAEzB,MAAMgF,EAAmChF,EAAUlK,IAAI+M,IACjDoC,EAAkCjF,EAAUlK,IAAI6M,IAChDuC,EAAc,IAAI/B,EAClBgC,EAAa,IAAIhC,EAEvB,MAAO,CACL+B,YAAAA,EACAC,WAAAA,EACAlP,aAA+BoG,WAE7B,MAAMf,EAAM8B,GAAatD,GAAGuC,GACtB+I,EAAgB,IAAIvB,GAC1B,IAAIwB,EACJ,MAAMC,EAAQrC,GAAW,GACnBsC,EAAyBD,EAAMjC,KAAKjE,KAAKoG,GAAOA,EAAMlC,IAAaC,KAEzE,IAAIkC,EAEJ,SAASC,IACP,OAAOT,EAAgCU,OAAON,GAoEhD,MAAMO,EAAmB,IAjEzB,cAA+BC,GAE7BxJ,oBACE,OAAOoJ,EAAkBpJ,cAG3BmF,kBACE,OAAOiE,EAAkBjE,YAG3BG,iBACE,OAAO8D,EAAkB9D,WAG3B1L,QAAQC,GACN,GAAIA,EAAQgI,IACV,MAAM,IAAIxB,MAAM,WAAWxG,gCAG7B,MAAMC,EAAQ2P,EAAgB,CAC5BL,kBAAAA,EACAL,cAAAA,EACAW,SAAUL,IACVxP,QAAAA,EACA8P,aAAapQ,GACJM,EAAQN,GAEjBqQ,YAAYtQ,GA0BH,IAxBP,cCvFd,MAmBEuQ,gBACE,OAAO9P,KAAKT,QAAQuQ,UAMtBhQ,cACE,OAAOE,KAAKT,QAAQO,UD8DRP,cACE,OAAOA,EAGTW,gBACE,WAAO6P,GAAcjQ,GAAS0N,GAGhCtN,cAAcc,GACZ+O,GAAcjQ,GAAS0N,GAAKxM,MAG9BnB,iBAEE,MAAMmQ,EAAclQ,EACdmQ,EAAMD,EAAGE,cAEf,OAAOlQ,KAAKE,UAAmB,MAAP+P,GAAeA,EAAIE,SAASH,OAOzDjQ,MAKH,OAHAA,EAAMuK,iBACN8F,GAAiBrQ,EAAMR,SAEhBQ,IAsEXsP,EAAoB,IA/DpB,cAAgCgB,GAiB9BxQ,sBACEuB,QAEA,MAAM7B,EAAUS,KAEhBA,KAAKmP,UAAYA,EAAUV,MAAM7G,EAAc5H,OAAOsQ,KAEtD,MAAMC,EAA4B,IAAI9D,GAClCmC,EAAiC4B,OAAOxQ,OAG5CuQ,EAA0BjR,QAAQ,CAAE6M,EAAGkE,GAAoBjE,GAAIpM,OAC/DuQ,EAA0BjR,QAAQ,CAAE6M,EAAGsD,GAAmBrD,GAAIoD,IAC9DxP,KAAKN,IAAM6Q,EAA0BlE,YAAY3M,IACjDuP,EAAmC,IAAI1C,GAAyBgE,EAA0BC,OAAOxQ,OAEjG,MAAMyQ,EAAsC,CAC1CxK,oBACE,OAAOA,GAETkJ,gBACE,OAAO5P,EAAQ4P,WAEjBH,oBACE,OAAOzP,EAAQyP,eAEjB0B,cAAcC,GACLJ,EAA0BjR,QAAQqR,GAE3CC,aAAaD,GACJ1B,EAAiC3P,QAAQqR,iBAIpDzL,GAAIG,6BAAQoL,GACZ9D,GAAa1G,GAAeZ,MAAMoL,GA/CpCxK,oBACE,OAAOA,EAGT+I,oBACE,OAAOA,EAAcpB,UAGvBxC,kBACE,MAAM,IAAI9E,MAAM,yFAyClBzG,aACI8Q,GAEF,OAAO1B,EAAiC3P,QAAQqR,kBAOpDzL,GAAIW,8BAASwJ,GACbP,EAAYxB,KAAK+B,GAEjB,MAAMjE,EAkBV,SACIiE,EACAL,EACA6B,GAGF,MAAMtF,EAAa8D,EAAkB3P,IAAIkM,IAEzC,MAAMkF,UAAgBvF,EAAWD,OAAOvJ,KAKtClC,cACEuB,QAWAgP,GATgBV,EAAgB,CAC9BL,kBAAAA,EACAL,cAAAA,EACAW,SAAUkB,EACV/Q,QAASE,KACT6P,YAAahI,EACb+H,aAAcpQ,GAAO4B,MAAM5B,MAM/BK,oBACEkQ,GAAc/P,MAAMwN,KAGtB3N,uBACEkQ,GAAc/P,MAAMwN,MAKxB,OAAOsD,EAxDeC,CAChB1B,EACAL,EACAM,KAWJ,OARApN,OAAOiC,eAAekL,EAAmB,cAAe,CACtDjL,cAAc,EACd4M,YAAY,EACZhQ,MAAOoK,IAGT8D,EAAM1B,IAAK,EAEJgC,IA6CX,SAASE,GACLL,kBACEA,EAAiBL,cACjBA,EAAaW,SACbA,EAAQ7P,QACRA,EAAO+P,YACPA,EAAWD,aACXA,IAWJ,MAAMqB,EAASpE,KACTqE,EAAoBrE,IAE1BoE,EAAOzJ,GAAGK,GAAMsJ,QAAQ3K,GAAU0K,EAAkB1D,GAAK,CAAChH,IAE1D,MACM4K,EAD4BF,EAAkBjE,KAAKjE,KAAKxC,GAAUA,EAAS0G,EAAS1G,EAAO,IAAM2G,KACvDmD,KAE1Ca,EAAuBF,EAAOhE,KAAKwB,MAAM4C,OAAOA,EAA8BnE,IAAaC,KAC3FmE,EAAiCL,EAAOhE,KAAKwB,MAC/C4C,IACE,OAAIA,EACF,OAAOlE,IAGT,MAAMoE,EAAYC,IAIlB,OAFAL,EAAQb,KAAK,IAAMiB,EAAUE,OAEtBvE,EAASqE,KAItB,IAAIxR,EACJ,MAAMgL,EAAS4E,EAAStD,YAsDxB,MAAM9M,EAAU,IApDhB,cAA+BmS,GAM7B7R,cACEuB,QALOpB,SAAM+K,EAAOrL,IACbM,kBAAe4P,EAMtB,MAAMT,EAA6B8B,EAAOhE,KAAKjE,KAAKqI,GAAOA,EAAMnE,EAASlN,MAAQmN,KAElFnN,KAAKmP,UAAYA,EAAUmB,KAG7BrK,oBACE,OAAOoJ,EAAkBpJ,cAG3BnG,cACE,OAAOA,EAGTgQ,gBACE,MAAM,IAAIxJ,MAAM,kFAGlBvG,YACE,OAAOA,IAAUA,EAAQ8P,EAAY7P,OAGvCE,gBACE,WAAO+Q,EAAOzD,GAGhB8D,aACE,OAAOA,EAGTH,cACE,OAAOA,EAGTC,oBACE,OAAOA,EAGTvR,QAAQ2G,GACNyK,EAAOU,KAAKnL,KAMhB,IAAIoL,EAAU,EAEdrS,EAAQ6R,cAAc,IA2E1B,SAAuB7R,GAErB,MAAMO,QAAEA,EAAOC,MAAEA,GAAUR,EAEvBQ,IACFA,EAAMG,WAAY,GAGpB,MAAM2R,EAAsB/R,EAAQgS,cAEhCD,GACFA,EAAWE,YAAYjS,GAtFKkS,CAAczS,IAC1CoQ,EAASrQ,QAAQ,CAAE6M,EAAGuF,GAAmBtF,GAAI7M,IA4B3C2C,OAAOiC,eAAerE,EAASgI,GAA0B,CAAE9G,MAAOzB,IAClE2C,OAAOiC,eAAerE,EAASmS,GAAyB,CAAEC,UAAU,EAAMlR,MAAOiQ,IAzBnFjC,EAAcR,aAAa8B,KAAK6B,GAAYP,EAAUO,EAAS5S,EAASqS,IACxErS,EAAQ+R,OAAOtD,IACbgB,EAAcR,aAAa,CACzBR,OAAAA,EACAnO,QAAQuS,EAAGD,GACTP,EAAUO,EAAS5S,EAASqS,QAIlC7C,EAAWzB,KAAK/N,GAEhB,MAAMuQ,EA+BV,SAAwC/N,EAAyBxC,GAE/D,MAAM8S,EAAQtQ,EAAKE,UACbqQ,EAAcD,EAAMvK,IAE1BuK,EAAMvK,IAA4BvI,EAClC,IAEE,MAAMuQ,EAAY,IAAI/N,EAAKxC,GAI3B,OAFA2C,OAAOiC,eAAe2L,EAAWhI,GAA0B,CAAE9G,MAAOzB,IAE7DuQ,UAEPuC,EAAMvK,IAA4BwK,GA7ChBC,CAAalD,EAAkBpJ,cAAe1G,GAUhE,OARA2C,OAAOiC,eAAe5E,EAAS,YAAa,CAC1C6E,cAAc,EACd4M,YAAY,EACZhQ,MAAO8O,IAGTmB,EAAOzD,KAEAjO,QAzVL0S,GAAyCzQ,OAAO,oBAgYtD,SAASuO,GAAcjQ,GACrB,OAAOA,EAAQmS,IAGjB,SAAS7B,GAAiB7Q,GACxBA,EAAQ+R,OAAOhB,KACX,IAAM/Q,EAAQgI,cAAc,IAAIe,GAAe,kBAAmB,CAAEkK,SAAS,ME7anF,MAAMC,GAAW7K,EAAcC,GCJ/B,MAAa6K,GAIX7S,YAA6B8S,GAAA3S,cAAA2S,EAFrB3S,sBAAmC,GAGzC2S,EAASxD,UAAU,KACjBnP,KAAK4S,iBAAiBjR,QAAQkR,GAAcA,YACrC7S,KAAK4S,mBAIhB5H,qBACE,OAAOhL,KAAK2S,SAASjT,IAAIwL,IAG3BrL,OAAyBoG,GACvBjG,KAAK4S,iBAAiBE,KAAK,KAEzB,MACMjI,EADiB7K,KAAK2S,SAASjT,IAAIiP,IACVoE,aAAa9M,GAE3CA,EAAsB0E,IAA4BE,EAEnD7K,KAAKgL,eAAenF,OAAOI,EAAe4E,EAAQO,gBCExD,MAAM4H,GAAoCxR,OAAO,eAKjD,MAAayR,WAAmBvK,EAE9B7I,UAAUsG,GAER,OAAOA,EAAQ9C,eAAe2P,IACvB7M,EAAgB6M,IACf7M,EAAgB6M,IAAsB,IAAIC,GAAW9M,GAG/DwC,YACE,OAAO3I,KAGTH,YAAoBsG,GAClB/E,MAAM,WAAW+E,EAAQO,QAG3B7G,KACIgJ,GAMF,OAiCAe,EAhCIf,EAAKtJ,QAAQG,IAAIR,IAiCrBgU,EAhCIrK,EAAKC,KAAKC,KAAKC,KAAKmK,IAkCnBC,EAA+BtF,IAEpC,IAAIuF,EACAtP,EAAuCuF,IACvCgK,EAAmC/O,QAAQC,QAAQ,QAEvD,OAAO+O,EAAS,CACdC,OAAQN,EACRO,KAAMC,GAAgB9J,EAAWsJ,KAChCnK,KAAK0F,MAAM,EAAG+E,QAASA,GAASC,KAAAA,MACjC,IAAKD,EACH,OAAOtG,IAGT,MAAOyG,GAAWnL,GAAUgL,EAE5B,GAAIG,EAAQxN,UAAYkN,EACtB,OAAO9J,EAAexF,GAKxB,GAFAsP,EAASM,EAAQxN,QAEbqC,IAAW6K,EAEb,OAAO9J,EAAexF,EAAS6F,EAAUlK,IAAIuT,GAAWvP,GAAG2P,IAAStK,KAAK0F,MACrEmF,IACEA,EAAQC,GAAGP,GACXA,EAAUM,EAAQE,MACXF,KAMf,MAAMG,EAAY,IAAIC,GAAcpK,EAAW+J,EAASF,GAAMI,GAAGP,GAC3DW,EAAY3K,EAASyK,GAE3B,OAAOxK,EAAexF,EAASqP,EAC3Bc,GAAOD,EAAUC,GAAK/C,QAAQ,KAC5BmC,EAAUS,EAAUI,YAExBC,UAnCGb,CAoCJzF,KACF/E,KAAKC,KAKV,WAKE,IAAIqL,EAA+C,KAEnD,OAAQT,GACFS,IAAeT,EACVzG,KAETkH,EAAaT,EAERA,EAIE1G,EAA2B0G,GAHzB1G,KAlBPoH,IAhDN,IACI1K,EACAsJ,GA1BJ,SAASC,MAA0BoB,GAEjC,IACIC,EADAC,GAAW,EAGf,IAAK,MAAMjB,KAAUe,EACnB,OAAQf,EAAO,IACb,IAAK,KACHiB,GAAW,EACND,IACHA,EAAYhB,GAEd,MACF,IAAK,MACHgB,EAAYhB,EACZ,MACF,IAAK,QACHiB,GAAW,EAIjB,OAAOA,EAAWD,OAAYlR,EA4EhC,SAASoQ,GACL9J,EACAsJ,GAEF,OAAOA,EAAKnK,KAAK0F,MAAM+E,IACrB,IAAKA,EACH,OAAOtG,IAGT,OAAOhI,IAAEA,IAASsO,EACZrO,EAAQ,IAAIjE,GAASgE,EAAIC,OAE/B,OAAKA,EAAM5D,KAIJgI,EACHmL,KACO5Q,EACCqB,EACAwP,GAAO/K,EAAUlK,IAAIuT,GAAWvP,GAAGiR,MAEzC5L,KAAK0F,MAAMmG,KATR1H,MAcb,SAAS0H,MAAsBnB,GAC7B,OAAOvG,KACA3C,EACCzG,EAAM2P,EAAMkB,GAAOA,EAAI,IACvBE,IAQV,MAAab,GAOXnU,YACa+J,EACA+J,EACAF,GAFAzT,eAAA4J,EACA5J,aAAA2T,EACA3T,UAAAyT,EALJzT,WAAQ6M,GAAW,GAO1B7M,KAAK8U,KAAO,IAAIvQ,QAAQC,GAAWxE,KAAK+U,MAAQvQ,GAChDxE,KAAKgV,OAASzQ,QAAQC,QAAQ,IAAIyQ,GAAkBjV,OAGtD8T,YACE,OAAO9T,KAAKgV,OAAOE,KAAKpB,GAASA,EAAMqB,OAGzCjG,YACE,OAAOlP,KAAKoV,MAAM5H,GAGpB3N,GAAGyT,GAED,MAAM+B,EAAYrV,KAAKgV,OAIvB,OAFAhV,KAAKgV,OAAS1B,EAAQ4B,KAAKI,GAAMD,EAAUH,KAAKpB,GAASA,EAAMwB,OAExDtV,KAGTH,oBACSG,KAAKgV,OAAShV,KAAKgV,OAAOE,KAAKpB,GAASA,EAAMzO,UAGvDxF,mBACSG,KAAKgV,OAAShV,KAAKgV,OAAOE,KAAKpB,GAASA,EAAMxO,SAGvDzF,eAEE,MAAM0V,EAAYvV,KAAKgV,cAEhBhV,KAAKgV,OAEZ,MAAMlB,QAAcyB,EACdjC,QAAgBQ,EAAM0B,OAI5B,OAFAxV,KAAK+U,QAEEzB,GAQX,MAAemC,GAIb5V,YACa+T,EACQ8B,EAA0B,KAAMnR,QAAQC,YADhDxE,YAAA4T,EACQ5T,WAAA0V,EAGrB7V,OACE,OAAO0E,QAAQC,QAAQxE,MAOzBH,OACE,OAAOG,KAAK0V,QAAQR,KAAK,IAAMlV,KAAKmV,OAG5BtV,OAAO8V,GAEf,MAAMlC,KAAEA,GAASzT,KAAK4T,OAEtB,OAAOrP,QAAQqB,IAAI6N,EAAKmC,IAAIjB,GAAOgB,EAAOhB,MAK9C,MAAMM,WAA0BQ,GAE9BN,YACE,MAAO,OAGTtV,4BACQG,KAAK6V,OAAOjC,GAAUA,EAAOvO,SAEnC,MAAMuE,UAAEA,EAAW+J,SAASzO,IAAEA,IAAUlF,KAAK4T,QACtCrU,EAASyO,GAoEpB,SACIpE,EACAgK,GAGF,MAAMkC,EF1WR,WAEE,MAAMC,EAA0B,GAChC,IAAIlU,EAAOmU,IAET,MAAM7B,EAAS6B,IAIf,OAFAD,EAAQjD,KAAKqB,GAENA,GAWT,MAAO,CACLnG,OAVawD,EAAY,KACzB3P,EAAM4Q,GACNvI,EACIC,EAAU4L,GAASE,UACnB9B,GAAUA,KAEd4B,EAAQG,OAAS,IAKjBrU,IAAImU,GACKnU,EAAImU,IEmVEG,GACjB,IAAIC,EACJ,MAAM7F,EAA4B3G,EAAUlK,IAAI+M,IAC1CoE,EAA2BjH,EAAUlK,IAAI6M,IACzCoD,EAAW,IAAIzD,EAAgCtC,GAC/CyM,EAAiBzM,EAAUlK,IAAIiP,IAC/B2H,EAAeD,EAAevH,YAAYtH,GAAG+O,QAAQT,EAAS9H,QAC9DwI,EAAcH,EAAetH,WAAWvH,GAAG+O,QAAQT,EAAS9H,QA8DlE,MAAO,CAAC,IA5DR,cAAsBhI,GAKpBnG,cACEuB,QAJOpB,SAAM2P,EAAStD,YAAY3M,IAMlC,MAAMyP,EAAuCoE,EAAS,CACpDkD,GAAI7C,EAAOwB,MACXsB,GAAI7J,IAA+B8J,GAAG/M,EAAUuF,aAC/CnG,KACC,EAAGyN,IAAKvH,GAAQwH,IAAKA,MAAUA,GAAMxH,EAAQhC,EAASlN,MAAQmN,KAGlEnN,KAAKmP,UAAYA,EAAUmB,KAC3BX,EAASrQ,QAAQ,CAAE6M,EAAGnG,GAAgBoG,GAAIpM,OAC1CoW,EAAoB,IAAI1D,GAAkB1S,MAG5CmG,cACE,OAAOyN,EAAOD,QAAQxN,QAGxBmQ,mBACE,OAAOA,EAGTE,kBACE,OAAOA,EAGT3W,QACI8Q,GAEF,OAAOmF,EAASjU,IAAI,IAAM+H,EAAUlK,IAAIuM,IAA0B3M,QAAQqR,IAG5E9Q,cACI8Q,GAEF,OAAOmF,EAASjU,IAAI,IAAM0O,EAA0BjR,QAAQqR,IAG9D9Q,aACI8Q,GAEF,OAAOmF,EAASjU,IAAI,IAAMgP,EAAyBvR,QAAQqR,IAG7D9Q,gBAAkCoG,GAChC,ON7aN,SACIA,EACA6P,GAGF,MAAMtO,GAAEA,GAAOmF,GAAa1G,GAE5B,OAAO4H,EAAUC,IACftG,EAAG,CACDwG,OAAQF,EAASE,OAAO7I,MAAM2Q,EAAS9H,QACvCnO,QAAQU,EAAK8E,GAEX,MAAM8J,EAAY9J,EAAM8J,UAAUoH,QAAQT,EAAS9H,QAC7CgB,EAAgB3J,EAAM2J,cAAcuH,QAAQT,EAAS9H,QAE3DF,EAASG,QAAQ1N,EAAK,CACpB0F,oBACE,OAAOZ,EAAMY,eAEfkJ,gBACE,OAAOA,GAETH,oBACE,OAAOA,GAET0B,cAAcC,GACLmF,EAASjU,IAAI,IAAMwD,EAAMqL,cAAcC,IAEhDC,aAAaD,GACJmF,EAASjU,IAAI,IAAMwD,EAAMuL,aAAaD,WMgZ5CiG,CAAe3Q,EAAe6P,GAGvCjW,OAAyBoG,GACvBmQ,EAAkBvQ,OAAOI,KAKN6P,EAAS9H,QA9IJ6I,CAAkBjN,EAAW5J,KAAK4T,QAI5D,oBAFA1O,GAAIG,6BAAQ9F,GAEL,IAAIuX,GACP9W,KAAK4T,OACLrU,EACA,IAAMgF,QAAQC,QAAQwJ,EAAOyD,QAInC5R,OACE,OAAOG,KAAKqF,QAAQ6P,KAAKpB,GAASA,EAAMxO,SAK5C,MAAMwR,WAAyBrB,GAM7B5V,YACIuV,EACiBzC,EACjB6C,GAEFpU,MAAMgU,EAAOI,GAHMxV,cAAA2S,EANrBwC,YACE,MAAO,QAWTtV,QACE,OAAO0E,QAAQC,QAAQxE,MAGzBH,2BACQG,KAAK6V,OAAOjC,GAAUA,EAAOtO,QAEnC,MAAQqO,SAASzO,IAAEA,IAAUlF,KAAK4T,OAIlC,oBAFA1O,GAAII,4BAAOtF,KAAK2S,UAET,IAAIoE,GAAmB/W,OAKlC,MAAM+W,WAA2BtB,GAE/BN,YACE,MAAO,OAGTtV,YAAYoF,GACV7D,MAAM6D,EAAK2O,OAAQ,IAAM3O,EAAKuQ,QAC9BvQ,EAAK2O,OAAOwB,MAAM5H,IAAK,EAGzB3N,QACE,OAAO0E,QAAQC,QAAQxE,MAGzBH,OACE,OAAO0E,QAAQC,QAAQxE,OC7V3B,MAAagX,GAKXnX,YACqBoX,EACR9Q,EACD+Q,GAFSlX,gBAAAiX,EACRjX,aAAAmG,EACDnG,aAAAkX,EALJlX,WAAQ,EAOdA,KAAKkF,IA+DT,SAAoBQ,GAElB,IAAIR,EAAMO,GAAW/B,GAAGgC,GAExB,GAAIiB,MAAwBjB,EAAa,CACvCR,EAAMO,GAAWhD,MACbyC,EACA,CACErF,KAAKN,GACHA,EAAQsG,OAAOH,MAKvB,MAAMS,QAAEA,GAAYa,GAAatD,GAAGgC,GAEhCS,IACFjB,EAAMO,GAAWhD,MAAMyC,EAAKiB,IAKhC,OAAOjB,EArFMiS,CAAWhR,GAGxBtG,QAAQ0U,GAEN,MAAM6C,EAAYpX,KAAKiX,YACjBtH,SAAEA,GAAayH,EACfC,EAA0B,CAACrX,KAAM,KAAMA,KAAKmG,SA+BlD,OA7BAnG,KAAKsX,UAAU3H,EAASrQ,QAAQ,CAC9B6M,EAAG8G,GAAWvP,GAAG1D,KAAKmG,SACtBiG,GAAIiL,KAGN,IAAInW,GAASlB,KAAKkF,IAAIE,KAAKzD,QAAQwE,IAEjC,MAAMqN,EAA4B,CAACxT,KAAM,MAAOmG,GAEhDnG,KAAKsX,UAAU3H,EAASrQ,QAAQ,CAAE6M,EAAG8G,GAAWvP,GAAGyC,GAAUiG,GAAIoH,KAGjE,MAAMG,EAAUyD,EAAUzD,QAAQxN,EAAS,IAAIoO,EAASf,IAExDxT,KAAKsX,UAAU,IAAM3D,EAAQ4D,WAG/B,IAAIrW,GAASlB,KAAKkF,IAAIC,OAAOxD,QAAQwE,IAEnC,MAAMqN,EAA4B,CAACxT,KAAM,QAASmG,GAE5CwN,EAAUyD,EAAUzD,QAAQxN,EAAS,IAAIoO,EAASf,IAExDxT,KAAKsX,UAAU,IAAM3D,EAAQ4D,SAC7BvX,KAAKsX,UAAU3H,EAASrQ,QAAQ,CAAE6M,EAAG8G,GAAWvP,GAAGyC,GAAUiG,GAAIoH,OAGnExT,KAAKwX,MAAQ,EAENxX,KAGTH,MAAM0U,GACJ,IAAKvU,KAAKwX,MACR,MAAM,IAAInR,GAAkBkO,EAAQqB,IAAI,GAAIzP,QAAAA,GAAWK,EAAQC,KAAU,CAACN,EAASK,EAAQC,KAK7F,QAFEzG,KAAKwX,MAEAxX,KAGTH,UACSG,KAAKwX,OACVxX,KAAKkX,UAIDrX,UAAU4X,GAChBzX,KAAKkX,QAAU5U,GAAemV,EAAQzX,KAAKkX,UClF/C,MAAMQ,OAA2CzY,EAC7C,oBACA,CACEmB,UAAWf,GAAiBE,GAAW,IAAIoY,GAAiBpY,MAOlE,MAAaoY,GASX9X,YAAYN,GAFKS,UAAO,IAAI4X,IAG1B5X,KAAK2P,SAAWpQ,EAAQG,IAAIuM,IAR9B7M,WAAYA,KACV,OAAOsY,GAUT7X,QAAQsG,EAAgBoO,EAAwC,IAE9D,MAAMsD,EAAW7X,KAAK8X,KAAKpY,IAAIyG,GAE/B,GAAI0R,EACF,OAAOA,EAASE,MAAMxD,GAGxB,MAAMZ,EAAU,IAAIqD,GAAehX,KAAMmG,EAAS,IAAMnG,KAAK8X,KAAKE,OAAO7R,IAIzE,OAFAnG,KAAK8X,KAAKG,IAAI9R,EAASwN,GAEhBA,EAAQA,QAAQY,ICf3B,SAAgB2D,MAAuBC,GAErC,MAAMC,EAA2BnM,GAAyBoM,UACpD5Y,iBAAEA,EAAgB6Y,SAAEA,GA6B5B,SACIF,GAMF,MAAMtE,EAAQjH,KACR9B,EAASqN,EAAyBrN,OA4GxC,MAAMtL,EAAmB,IA1GzB,cAAsBP,GAKpBW,cACEuB,QAJOpB,SAAM+K,EAAOrL,IAMpB,MAAMyP,EAAyC2E,EAAM7G,KAAKjE,KACtDrG,GAAKA,EAAIuK,EAASlN,MAAQmN,KAG9BnN,KAAKmP,UAAYA,EAAUmB,KAC3B8H,EAAyB9Y,QAAQ,CAAE6M,EAAGzL,GAAyBiW,GAAI4B,IACnEH,EAAyB9Y,QAAQ,CAAE6M,EAAGjN,GAAkBkN,GAAIpM,OAG9DH,kBAAoCoG,GAGlC,aAFM,IAAI1B,QAAQC,GAAWxE,KAAKmP,UAAU3K,UACtCxE,KAAKN,IAAIwL,IAAgBhF,YAAYD,GACpC2E,GAAmB3E,GAG5BpG,KAAKsG,GAOH,MAAM8K,EAASmC,EAA4BtF,IAGzC,MAAM6F,EAAUlU,EAAiBC,IAAIiY,IAAkBhE,QAAQxN,GACzDqS,EAAO3L,EAAwB,CACnCoE,OAAQ,CACN9K,QAAAA,EACA+I,OAAO,KAIXlP,KAAKN,IAAIuT,GAAWvP,GAAGyC,GAAvBnG,CAAiC,CAC/BgO,OAAQF,EAASE,OACjBnO,QAAQ4Y,EAAMC,GAIZ,MAAM9E,EAAS8E,EAEfF,EAAKhL,GAAK,CACRyD,OAAQ,CACN9K,QAASyN,EAAOD,QAAQxN,QACxB+I,MAAO0E,EAAO1E,OAEhB4F,KAAMlB,EAAOkB,MAEVlB,EAAO1E,OACV0E,EAAOtO,OAAO4P,KAAK,KACjBsD,EAAKhL,GAAK,CACRyD,OAAQ,CACN9K,QAASyN,EAAOD,QAAQxN,QACxB+I,OAAO,GAET4F,KAAMlB,EAAOkB,WAKpB3D,QAAQ,KACTwC,EAAQ4D,UAIViB,EAAKvL,KAAKa,KACTsG,QAEH,IAAIuE,EACJ,MAAM3K,EAASiD,EAAO,EAAG6D,KAAAA,MACvB6D,EAAW7D,IAEP7H,EAAoCgE,EAAOlI,KAAKC,KAClDwP,GAAQA,EAAKvH,QACfsF,QAAQvI,GAmBV,OAAO,IAjBP,cCxIN,MASE4K,IAAKA,KACH,OAAO5Y,KAAKiN,ODgIRA,WACE,OAAOA,EAGT6H,WACE,OAAO6D,EAGT9Y,QAAQ2G,GAEN,OADAwH,EAAOyD,IAAIjL,GACJmS,MAYf,MAAO,CACLlZ,iBAAAA,EACAI,WACEiU,EAAMtG,OAtJ6BqL,CAAcT,GAC/CjS,EAA8B,IAApBgS,EAASjC,OAAeiC,EAAS,IAazBhT,EAb+CgT,EAchE1S,GAAWI,OAAO,QAA2B,CAAEV,MAAAA,KADxD,IAA0BA,EANxB,OALA1F,EAAiBC,IAAIiY,IAAkBhE,QAAQxN,GAC/C1G,EAAiBC,IAAIuT,GAAWvP,GAAGyC,GAAnC1G,CAA6CmU,IAC3CA,EAAQtO,OAAO4P,KAAKoD,KAGf7Y,EE1BT,MAAaqZ,GAAqCtX,OAAO,aAiBzD,SAAgBuX,GAAgBrS,GAC9B,MAAO,CAACoS,GAAqBpS,GCf/B,SAAgBsS,GACZtS,EACAuS,GAAgE,GAElE,IAAoB,IAAhBA,EACF,OAAOpR,EAET,IAAoB,IAAhBoR,GAA+C,mBAAhBA,EAA4B,CAE7D,MAAMzZ,EAAMuZ,GAAgBrS,GACtBwS,GAAqD,IAAhBD,EAAuBE,GAAqBF,EAEvF,OAAO,SAAmB7Q,EAAUC,GAClC6Q,EAAOE,KAAKpZ,KAAMR,EAAK4I,EAAUC,IAGrC,OAAO,SAAmBD,EAAUC,GAClCN,GAAiBrE,GAAG1D,MAAMiZ,YAAYA,EAAa7Q,EAAUC,IAIjE,SAAS8Q,GAELE,EACAjR,EACAC,GAEFN,GAAiBrE,GAAG1D,MAAMiZ,YAAYI,EAAMjR,EAAUC,GCXxD,MAAaiR,OACSra,EAAqC,uBCxBrDsa,OAA4Cta,EAAoC,sBAKtF,MAAaua,GASX3Z,YAAYU,GAFKP,YAA0D,GAGzEA,KAAKyZ,kBAAoBlZ,EAAIb,IAAIS,IAAiB2J,iBARpD1K,WAAYA,KACV,OAAOma,GAUT1Z,IAAI6G,EAAcqD,GAChB/J,KAAK0Z,OAAOhT,GAAQpE,GAAiDtC,KAAK0Z,OAAOhT,GAAOqD,GAG1FlK,OAAOuL,GAEL,MAAMuO,EAAQ3Z,KAAK0Z,OACbE,EAAqB1X,OAAO2X,KAAKF,GAElCC,EAAmB1D,SAIxBhU,OAAOiC,eAAeiH,EAAa,qBAAsB,CACvDhH,cAAc,EACd4M,YAAY,EACZhQ,MAAO4Y,IAET1X,OAAOiC,eAAeiH,EAAYnJ,UAAW,2BAA4B,CACvEmC,cAAc,EACd4M,YAAY,EACZhQ,MAAO,SAAU0F,EAAc2B,EAAyBD,GACrDuR,EAAMjT,GAAc0S,KAAKrR,GAAiBrE,GAAG1D,MAAM8P,UAAW1H,EAAUC,OAK/ExI,MAAME,GAEJ,MAAMD,EAAUC,EAAMD,QAChB6Z,EAAQ3Z,KAAK0Z,OACbI,EAAkB5X,OAAO2X,KAAKF,GAE/BG,EAAgB5D,QAIJ,IAAIlW,KAAKyZ,kBACtBM,GAAWA,EAAQpY,QACfqY,IAEE,MAAMC,EAAgBD,EAAOC,cAE7B,OAAQN,EAAMM,GAAuBb,KACjCrR,GAAiBrE,GAAG5D,GAASgQ,UAC7BhQ,EAAQoa,aAAaD,GACrBD,EAAO3R,aAMZoC,QAAQ3K,EAAS,CACxBqa,YAAY,EACZL,gBAAAA,EACAM,mBAAmB,KCrEzB,MAAMC,GAAyC,CAC7Cxa,MAAMwF,GACJA,EAAMqL,cAAc,CAAE4J,GAAId,KAC1BnU,EAAMqL,cAAc,CAClBvE,EAAGmN,GACH3C,GAAGhH,GACM,CAAmBjJ,EAAcqD,IAA0C4F,EAAS9N,IAAI6E,EAAMqD,GAEvGwQ,KAAM,CAACf,MAETnU,EAAMiR,aAAajH,IAEjBA,EAAkBF,UAAU,EAAG/D,YAAAA,KAAkBiE,EAAkB3P,IAAI8Z,IAAmB3T,OAAOuF,MAEnG/F,EAAMmR,YAAYrI,IAEhB,MAAMpO,EAAQoO,EAAiBpO,MAE3BA,GAEFoO,EAAiBzO,IAAI8Z,IAAmBzZ,MAAMA,OActD,MAAaya,GAEX3V,WAAYA,MACV,OAAOwV,ICtBX,SAAgBI,GACZvV,GAEF,MAAO,CAAIsD,EAAyBkS,EAA8BC,KAEhE,MAAMjU,KAAEA,EAAIuS,YAAEA,GCvBlB,SACIzQ,EACAkS,EACA7R,GAMF,IAAInC,EACAuS,EAEJ,GAAoB,iBAATpQ,EACTnC,EAAOmC,EACPoQ,EAAcD,GAAqBtS,OAC9B,CACL,GAAImC,GAAQA,EAAKnC,KACfA,EAAOmC,EAAKnC,SACP,CAAA,GAA2B,iBAAhBgU,EAChB,MAAM,IAAIxS,UACN,gEACE,GAAGM,EAAOnG,YAAYqE,QAAQgU,EAAYE,cAGhDlU,EAAOgU,EAGTzB,EAAcD,GAAqBtS,EAAMmC,GAAQA,EAAKoQ,aAGxD,MAAO,CAAEvS,KAAAA,EAAMuS,YAAAA,GDPiB4B,CAAkBrS,EAAQkS,EAAaxV,GAC/De,EAAgBuC,EAAOnG,YAE7BoD,GAAWI,OAAOI,EAAe,CAAEd,MAAOqV,KAC1CxT,GAAanB,OACTI,EACA,CACEpG,OAAOwP,GACLA,EAAkB3P,IAAI4Z,GAAtBjK,CAA0C3I,EAAMuS,MAKxD,MAAM6B,EAAkD,CACtDjb,MACE,OAAOkI,GAAiBrE,GAAG1D,MAAMF,QAAQoa,aAAaxT,IAExD7G,IAA2BuI,GACzBL,GAAiBrE,GAAG1D,MAAMF,QAAQib,aAAarU,EAAM0B,KAIzD,GAAkB,MAAduS,EAMJ,OAAOG,EAJL5Y,OAAOiC,eAAeqE,EAAQkS,EAAaI,IE9BjD,SAAgBE,GACZ3Z,GAEF,OAAO4F,GAAU,CACfd,QAAS,CAAEhB,MAAOqV,IAClB3a,OAAOob,GAEL,MAAMC,EAAYD,EAAWvb,IAAI4Z,IAE3B6B,EAAgBvZ,IACA,iBAATA,EACTsZ,EAAUtZ,EAAMoX,GAAqBpX,IAErCM,OAAO2X,KAAKjY,GAAMD,QAAQ+E,IACxBwU,EAAUxU,EAAMsS,GAAqBtS,EAAM9E,EAAK8E,QAKlD3F,GAA0CM,GAC5CA,EAAMM,QAAQwZ,GAEdA,EAAa9Z,MCrCrB,MAAM+Z,OAAyCnc,EAAiC,mBAOhF,MAAaoc,WAAuBC,EAElClc,WAAYA,KACV,OAAOgc,ICTX,MAAMG,GAAoC,CACxC1b,MAAMwF,GACJA,EAAMuL,aAAa,CACjBzE,EAAGkP,GACHxb,GAAGN,GAED,MAAM6V,EAAQ,IAAIiG,GAIlB,OAFA9b,EAAQ6R,cAAc5K,GAAU4O,EAAMzD,KAAKnL,IAEpC4O,KAGX/P,EAAMuL,aAAa,CACjBzE,EAAGxE,GACHgP,GAAGvB,GACMA,EAAM8D,OAEfqB,KAAM,CAACc,QAkBb,MAAaG,GAEX3W,WAAYA,MACV,OAAO0W,IC3BX,SAAgBE,GACZlc,EACAmH,EACA2S,EAAkBN,GAAgBrS,IAGpC,MAAM5G,QAAEA,GAAkCP,EACpC6V,EAAQ7V,EAAQG,IAAI2b,IAAgBK,MAAMrC,GAC1CrL,EAASwD,IACThK,EAA8C4N,EAAMuG,SAAS3S,KAC/D,CAAC4S,EAAOxT,EAAUC,IAAa6E,EAAS9E,EAAUC,IACpDkO,QAAQvI,GA2BV,OAAO,IAzBP,cAA+B6N,EAE7BrU,SACE,OAAOA,EAGTgG,SACE,OAAO1N,EAAQoa,aAAaxT,GAG9B8G,OAAOxM,GACQ,MAATA,EACFlB,EAAQgc,gBAAgBpV,GAExB5G,EAAQib,aAAarU,EAAM1F,GAI/BnB,KAAK2G,GAEH,OADAwH,EAAOyD,IAAIjL,GACJxG,OC7Cb,MAAa+b,GAAuCva,OAAO,gBCe3D,MAAawa,GAAgB,CAW3Bnc,OAEIN,EACA0c,EACA/W,EAAiB,IAGnB,MAAMgX,QAAEA,EAAO7C,KAAEA,EAAO,IAAOnU,EACzBiX,EAAe5c,EAAQG,IAAI2b,IAAgBK,MAAMrC,GACjD+C,EAAW7c,EAAQG,IAAIiB,GAAZpB,GAEjB,IAAI8c,GAAW,EACf,MAAMC,EAAcH,EAAaR,SAAS,KACpCO,GAAW3c,EAAQW,UACrBqc,IAEAF,GAAW,IAiBf,SAASE,IACPF,GAAW,EACXD,EAASI,GAGX,SAASA,IACP,OAAS,CAEP,MAAMC,EAAYR,IAElB,GAAIQ,IAAcR,GAA+B,mBAAdQ,EACjC,MAGFR,EAASQ,GA3BTP,EACFK,IAEAhd,EAAQ+R,OAAO,KACR+K,GACHE,MAEDpL,QAAQ3K,IACT8V,EAAY7K,IAAIjL,GAChB6V,GAAW,MCpCnB,SAAgBK,GAAiCxX,GAC/C,MAAO,CAACsD,EAAyBkS,KAE/B,MAAMzU,EAAgBuC,EAAOnG,YAE7B2E,GAAanB,OACTI,EACA,CACEE,QAAS,CACPhB,MAAOqW,IAET3b,OAAOob,GACLA,EAAWjM,cAAcb,IACvBA,EAAiBgB,UAAU,KAEzB,MAAMW,EAAY3B,EAAiB2B,UAC7BmM,EAAoBnM,EAAU4K,GAAazS,KAAK6H,GAEtDkM,GAAcC,OAAO9N,EAAkB8N,EAAQ/W,WC5B/D,MAAayX,OACS1d,EAAoC,uBCN1D,MAAa2d,WAAuBrU,MAKlCsU,iBACE,OAAQ7c,KAAKwI,OAAmBqU,YCapC,MAAaC,OACSlc,EACd,uBCxBFmc,GAAwC,CAC5Cld,MAAMwF,GACJA,EAAM/F,QAAQ,CAAE6M,EAAG2Q,GAAmB1Q,GAAI4Q,OAW9C,MAAaC,GAEXpY,WAAYA,MACV,OAAOkY,IAQX,SAASC,GAAazd,EAA2B+F,GAE/C,MACMuX,EAaR,SAAsB/c,EAAkBwF,GAEtC,MAAMuS,EAAW/X,EAAQ+c,WAEzB,GAAIhF,EAEF,OAAOA,EAET,GAAI,iBAAkB/X,EACpB,OAAOA,EAAQkd,aAAa1X,GAG9B,OAzBmB4X,CADH3d,EAAQO,QACiBwF,GAOzC,OALIuX,IACDA,EAAmB/U,IAA4BvI,EAChDA,EAAQ+R,OAAOhB,KAAK,IAAM/Q,EAAQgI,cAAc,IAAIqV,GAAe,uBAAwB,CAAEpK,SAAS,OAGjGqK,EChCT,MAAMM,GAA4C,CAAEC,KAAM,QAuB1D,SAAgBC,GACZnY,EAAwBiY,IAE1B,OAAOlW,GAAU,CACfpH,MAAMwF,GACJA,EAAMuL,aACF,CACEzE,EAAGwQ,GACHhG,GAAGpW,GACMA,EAAIb,IAAIod,GAARvc,CAA2BA,EAAK2E,KAI/CG,EAAMuL,aAAa,CACjBzE,EAAGzE,GACHiP,GAAGpX,GACMA,EAAQG,IAAIid,GAAmB,CAAElT,GAAI,UAIlDtD,QAAS,CAAEhB,MAAO8X,YClDTK,OAA6CC,EACtD,6BACA,IACA,SCgBJ,MAAaC,WACD9U,EAKV7I,YAAY6G,GACVtF,MAAMsF,GACN1G,KAAK2I,MAAQ3I,KAAK4I,YACdC,GAAQA,EAAKC,KAAKC,KAAKC,KACnB,IAAIyU,KACF,GAAIA,EAAOvH,OACT,OAAOwH,EA4CvB,SAAsDD,GACpD,MAAO,CAAC/b,EAAMiS,KAEZ,MAAMgK,EAAmE,CAACC,EAAUC,KAElF,MAAMC,EAAQL,EAAOG,GAErB,OAAKE,EAIEC,EACHD,EACI,CAACE,EAAcH,IAAiBF,EAAMC,EAAW,EAAGI,GACpDH,IANCnc,EAAKmc,IAWhB,OAAOF,EAAM,EAAGhK,IA/DWsK,CAAmBR,IAGpC,MAAMpU,EAAkB,IAA6CC,EAAS4U,IAE9E,OAAO3U,EAAeV,EAAKzI,UAAUiJ,IAAoBA,QAMrExJ,KACIgJ,GAOF,IAAIW,EAOJ,OALAX,EAAKtJ,QAAQG,IACTM,KAAK2I,MACL,OAAQE,EAAO,CAAEY,GAAe,MAAXZ,EAAKY,GAAaH,EAAST,EAAKY,IAAMZ,EAAKY,SAAOnG,EAF3EuF,CAGGiV,GAAStU,EAAYsU,GAEjB,CAACpc,EAAMiS,IAAYnK,EAAU9H,EAAMiS,IAQ9C,SAASuK,GACLxc,EACAiS,GAEF,OAAOjS,EAAKiS,GClBd,MAAawK,OACSX,GAA0B,oBCrD1CY,GAAmB,GC8BzB,MAAaC,OACSzd,EACd,aACA,CACER,UAAWf,ID7BrB,SAA6BE,GAE3B,MAAMc,EAASd,EAAQG,IAAIS,IACrB2d,EAAQve,EAAQG,IAAIye,IAE1B,MAAO,CAACG,EAAOhZ,IAASwY,EAAMH,EAAO,IAAIY,QAAQD,EAAOhZ,IAExD,SAASqY,EAAMhK,GACb,OAAO9F,EAAUC,IAEf,MAAM0Q,EAAkB,IAAIzR,EAC5B,IAAIiB,EAEJ,GAAI,oBAAqB3N,EAAQ,CAE/B,MAAMoe,EAAkB,IAAKpe,EAAeqe,iBACtCC,OAAEA,GAAWF,EAEnBzQ,EAASwD,EAAYhL,IACfA,IAAW4X,IACbK,EAAgBG,UAGpB9Q,EAASE,OAAOmD,QAAQ,IAAMnD,EAAOyD,IAAI2M,KAAmBjZ,MAAM6I,GAClEwQ,EAAgBhX,GAAG,CACjBwG,OAAAA,EACAnO,QAAQU,EAAKse,GACX/Q,EAASG,QAAQ1N,EAAKse,MAI1B,MAAMC,EAAenL,EAAQgL,OAEzBG,IACF,IAAIrX,EAAmBqX,GAActX,GAAG,SAAS8I,KAAK,IAAMmO,EAAgBG,SACxEE,EAAaC,SACfN,EAAgBG,SAIpBjL,EAAU,IAAI4K,QAAQ5K,EAAS,CAAEgL,OAAAA,SAEjC3Q,EAASwQ,EAAgBhX,GAAGsG,GAG9BzN,EAAOsd,MAAMhK,GACRuB,KAAK2J,IACJL,EAAgBlR,KAAKuR,GACrB7Q,EAAOyD,QAERuN,MAAMxY,GAAUwH,EAAOyD,IAAIjL,YE1C/B,MAAMyY,OAAmChgB,EAC5C,iBACA,CACEmB,UAAWwJ,IAET,MAAMsV,EAAgBtV,EAAUlK,IAAIY,IAMpC,OAJA,IAAImH,EAAmByX,GAAM1X,GAAmB,kBAAhD,CACI,EAAGjI,QAAAA,KAA8BA,EAAQG,IAAIyf,IAAkBC,SAG5DvS,OAKTwS,OAA2CpgB,EAC7C,oBACA,CACEmB,UAAWb,GAAW,IAAI4f,GAAiB5f,EAAQG,IAAIqI,OAO7D,MAAaoX,GAUXtf,YAAYN,GAEV,MAAMsE,EAAU,IAAIkJ,EACduS,EAAgB/f,EAAQG,IAAIR,IAAkBQ,IAAIuf,IAExDjf,KAAKwH,GAAK3D,EAAQ2D,GAClBxH,KAAKsN,KAAO,IAAMzJ,EAAQyJ,KAAK/N,GAC/BS,KAAKof,MAAQ,KAEX,MAAMG,EAASC,GAAkBjgB,GAE7BggB,EACFA,EAAO,GAAG7f,IAAIyf,IAAkB7R,OAEhCgS,EAAc9R,GAAKjO,GAtBzBH,WAAYA,KACV,OAAOigB,IA+BX,SAAgBG,GAAkB9b,GAEhC,MAAMwb,EAAOxb,EAAGhE,IAAIR,IAAkBQ,IAAIY,IAC1C,IAAIR,EAAgB4D,EAAG5D,QACnB2f,GAAY,EAEhB,GAAI3f,IAAYof,EAGhB,OAAS,CAEP,MAAMK,EAASzf,EAAQ+R,WAEvB,IAAK0N,EACH,OAGF,MAAMhf,EAAyBgf,EAAezX,IAE9C,GAAIvH,EACF,MAAO,CAACA,EAAKkf,GAEf,GAAIF,IAAWL,EACb,OAGFO,GAAY,EACZ3f,EAAUyf,GC7Fd,MAAMG,OAA2CzgB,EAC7C,oBACA,CACEmB,UAAWb,GAyDjB,SAA+CA,GAE7C,MAAM+f,EAAgB/f,EAAQG,IAAIR,IAAkBQ,IAAIuf,IAClDU,EAAKvM,EACPtF,IAEE,MAAM8R,EAAkB/S,IAClBgT,EAAarO,IAAcrM,MAAM2I,EAASE,QAC1C8R,EAAetO,IAAcrM,MAAM2I,EAASE,QAC5C+R,EAAe,KAEnB,MAAMR,EAASC,GAAkBjgB,GAEjC,GAAIggB,EAAQ,CAEV,MAAOS,EAAWP,GAAaF,EAE/BK,EAAgBpS,GAAKwS,EAAUtgB,IAAIugB,IACnCJ,EAAWpO,MACPgO,GACFK,EAAarO,WAGfmO,EAAgBpS,QAAKlK,GAIzBgc,EAAcrS,KAAK,CACjBe,OAAQ6R,EACR5R,QAAS,IAAM1O,EAAQW,WAAa6f,MAEtCH,EAAgB3S,KAAKiT,QACjBC,GAAaA,GAAaA,EAAU5gB,QAAQG,IAAIyf,IAAkB3X,GAAGuY,IACvE5a,MAAM2a,GACRF,EAAgB3S,KAAKa,GACrBvO,EAAQ+R,OAAO,CACbtD,OAAQF,EAASE,OACjBC,QAAS,CAACmE,EAAGgO,KACXL,IACAK,EAASjP,QACL,KACE5M,QAAQC,UAAU0Q,KACd,IAAM3V,EAAQW,YAAc0f,EAAgBpS,QAAKlK,WAOnE8Q,QACIzE,ECnHR,SACIgQ,GAEF,OAAO,IAAIzT,EACP1M,GAAOmgB,EAAG5W,KAAKC,KACXqX,GAASA,EAAQ9W,EAAe8W,EAAM3gB,IAAIF,IAAe0N,MD8GhDoT,CAAwBX,GACnC5U,EAAS4E,EAAStD,YAsBxB,OAAO,IApBP,cAA2B4T,GAA3BpgB,kCAEWG,SAAM+K,EAAOrL,IAEtBH,cACE,OAAOA,EAGTogB,SACE,OAAOA,EAGT9f,QACI8Q,GAEF,OAAOhB,EAASrQ,QAAQqR,KA7HF4P,CAAoBhhB,EAAQG,IAAIqI,OAa5D,MAAsBkY,WAAiD9gB,EAKrEC,WAAYA,KACV,OAAOsgB,UEsFEc,OACSvhB,EAAgC,kBCzGtD,MAAsBwhB,WACVtf,EAUVuf,IAAKA,KACH,OAAO1gB,KAAK2b,SAUd/C,IAAKA,KACH,OAAO5Y,KAAKiN,MCtBhB,MAAM0T,GAAkC,CAAEC,SAAS,GAKnD,SAAgBC,GACZjX,EACAsV,EACA4B,EACAC,GACAC,KAAEA,EAAIpb,IAAEA,IAGV,MAAM/B,EAAU,IAAIkJ,EACdzH,EAAO0b,EAAOL,QAAard,EACjC,IACI2d,EACAC,EAFAC,EAAQ,IAAI7f,IAIc,iBAAnBwf,EACTI,EAAWJ,EAEXlX,EAAU1D,YAAY4a,GAAgB5L,KAAK,EAAG3J,YAAc7E,KAAAA,OAE1D,GADAua,OAAW3d,EACPoD,IACFwa,EAAW7V,EAAa3E,KAAKA,EAAMkD,EAAUlK,IAAIgB,KAC7CmD,EAAQtC,MAAM,CAEhB,MAAM6f,EAAWC,IAEjB,GAAID,EAAS7f,KAAM,CAEjB,MAAM+f,EAAQrgB,MAAMiS,KAChB3I,EACIzG,EAAMsd,EAAUre,GAAQge,EAAOhe,IAC/B8R,IAIJyM,EAAMpL,QACRrS,EAAQyJ,KAAKgU,EAAO,QAQhC,MAAMC,EAAW3X,EAAUlK,IAAIiK,GAAdC,EA8GjB,SAAgBI,GAEd,MAAMsX,EAAa,GACbE,EAAe,GAErBxX,EAAUrI,QAAQsI,IAChBC,EACIK,EACIzG,EAAMqG,EAAUF,EAASG,cAAeqX,GACxC5M,GAEJ9R,GAAQye,EAAQ1O,KAAK/P,IAEzBmH,EACIK,EACIzG,EAAMqG,EAAUF,EAASO,YAAakX,GACtC7M,GAEJ9R,GAAQue,EAAMxO,KAAK/P,OAGrBue,EAAMpL,QAAUsL,EAAQtL,SAC1BrS,EAAQyJ,KAAKgU,EAAOE,MAnIxB,IAAIG,EAEJ,MAAMhG,EAAW9N,EAAsBC,IAErC,MAAM8T,GAAiB/d,EAAQtC,KACzByM,EAASnK,EAAQ2D,GAAGsG,GAO1B,OALI8T,IACFP,IACAE,EAAS9W,QAAQyU,EAAM5Z,IAGlBkM,EAAYhL,IACjBwH,EAAOyD,IAAIjL,GACN3C,EAAQtC,MACXggB,EAASM,eAEV1c,MAAM6I,KAELf,EAAOmG,EAAgCuI,EAAS3S,KAAK,IAAM2Y,GAAW,IAAM,CAACA,IAC7EG,EAAuEnG,EAAS3S,KAClF,CAACsY,EAAOE,IAAYtU,EAAS/L,EAAUuC,GAAG4d,GAAQngB,EAAUuC,GAAG8d,KAE7D9F,EAAQtI,EAA2DtF,IAEvE,MAAMiU,EAAiB,IAAIhV,EAE3BgV,EAAeva,GAAGsG,GAClBiU,EAAezU,KAAKqU,EAAUxgB,EAAUuC,GAAG,KAE3Coe,EAAchU,KAEVvL,EAA0Byf,EAAc/U,GAAMlE,KAAKC,KACrDiZ,GAAQvE,EAAQwE,EAASD,KAGxBrc,GACHsZ,EAAKiD,iBAAiB,kBAAmB7a,IAEvC,MAAMxH,EAAUwH,EAAMkB,OAEtB,GAAI2Y,EAAM/b,IAAItF,GAAU,CAEtB,MAAMiD,EAAOge,EAAOjhB,GAEpB+D,EAAQyJ,KAAK,CAACvK,GAAO,OAmC3B,OAAO4e,EAAW,IA9BlB,cAA8BS,GAE5BzG,eACE,OAAOA,EAGT1O,WACE,OAAOA,EAGTyO,YACE,OAAOA,EAGTnZ,YACE,OAAOA,EAGT1C,CAAC2B,OAAOC,YACN,OAAO4gB,EAAYpB,IAAaA,EAAW1W,EACvCzG,EAaCD,EAAQtC,KAAO4f,EAAQE,IAXpBvhB,GAAWihB,EAAOjhB,IAEtB+U,OAYR,SAASwM,IAEP,OADAJ,OAAW3d,EACJ6d,EAGT,WAEE,MAAMmB,EAAMpB,EAEZ,IAAKoB,EACH,OAAO,IAAIhhB,IAEb,GAAI0f,EACF,OAAO,IAAI1f,IAAI6I,EAAU+U,EAAKqD,iBAAiBD,KAEjD,OAAO,IAAIhhB,IACPiJ,EACIJ,EAAU+U,EAAKsD,UACf5gB,GAAQA,EAAK6gB,QAAQH,KAhBdI,GA+CjB,SAAShB,EAAQ3e,GACf,GAAKD,GAAUC,GAGf,OAAIme,GAAYne,EAAK0f,QAAQvB,KAAcC,EAAM/b,IAAIrC,IACnDoe,EAAMtf,IAAIkB,GACHge,EAAOhe,SAFhB,EAOF,SAAS0e,EAAW1e,GAClB,GAAKD,GAAUC,IAGVoe,EAAMnJ,OAAOjV,GAGlB,OAAOge,EAAOhe,GAAM,IC7MxB,MAAM4f,GAKJ9iB,YAA6B+iB,EAAgC9iB,GAAhCE,SAAA4iB,EAAgC5iB,aAAAF,EAH5CE,eAAY,IAAI4X,IAMjC2J,eACE,GAAIvhB,KAAK6iB,UACP,OAAO7iB,KAAK6iB,UAGd,MAAMC,EAAqC9iB,KAAK4iB,IAAIljB,IAAIS,IAAyB2J,iBAEjF,OAAO9J,KAAK6iB,UAAY,IAAIC,EAAS9Y,GAAahK,KAAK+iB,QAAQ/Y,IAGjEnK,QAAQ6G,EAAcoH,GAEpB,MAAMkV,EAAOhjB,KACPuhB,EAAWvhB,KAAKuhB,SAChBzU,EAAU9M,KAAKijB,SAASvc,GACxBwN,EAAMgP,EAAcpV,GACpBE,EAASlB,EAAQtF,GAAG,CACxBwG,OAAQwD,EAAY,KAClBxR,KAAKmjB,UAAUnL,OAAOtR,GACtB6a,EAASM,aACL7hB,KAAKmjB,UAAU5hB,KACjB6hB,IAEApjB,KAAK6iB,eAAYvf,IAElB6B,MAAM+O,EAAIlG,QACbC,QAAS,CAAC1N,EAAK6H,EAAUC,IAAa6L,EAAIjG,QAAQ1N,EAAK6H,EAAUC,KAMnE,OAHAkZ,EAASM,aACTuB,IAEOpV,EAEP,SAASoV,IACPJ,EAAKD,QAAQxB,EAAS8B,eACtB9B,EAAS9W,QAAQuY,EAAKljB,QAAS,CAC7Bqa,YAAY,EACZC,mBAAmB,EACnBN,gBAAiB7Y,MAAMiS,KAAK8P,EAAKG,UAAUtJ,WAKzCha,QAAQmK,GACdA,EAAUrI,QAAQsI,IAEhB,MAAMgQ,EAAgBhQ,EAASgQ,cACzBnN,EAAU9M,KAAKmjB,UAAUzjB,IAAIua,GAE/BnN,GACFA,EAAQQ,KAAKtN,KAAKF,QAAQoa,aAAaD,GAA0BhQ,EAAS5B,YAKxExI,SAAS6G,GAEf,MAAMoG,EAAU,IAAIC,EAIpB,OAFA/M,KAAKmjB,UAAUlL,IAAIvR,EAAMoG,GAElBA,GAQX,MAAMwW,WAAyBzH,EAK7Bhc,YACqBgjB,EACAU,GAEnBniB,QAHmBpB,eAAA6iB,EACA7iB,WAAAujB,EALJvjB,cAAW,IAAI+M,EAS9B,IAAIyW,EAAgBC,IAEpBzjB,KAAKwH,GAAKqG,EAAUC,IACb9N,KAAK0jB,SAASniB,OACjBiiB,EAAgBxjB,KAAK6iB,UAAUpY,QAC3B8Y,EACA,CAACnb,EAAUC,IAAarI,KAAK0jB,SAASpW,KAAKlF,EAAUC,KAG3DyF,EAASE,OAAO7I,MAAMqe,GACtBxjB,KAAK0jB,SAASlc,GAAGsG,GAAUqD,QAAQ3K,IAC5BxG,KAAK0jB,SAASniB,MACjBiiB,EAAc/R,IAAIjL,OAM1BgH,SACE,OAAOxN,KAAK6iB,UAAU/iB,QAAQoa,aAAala,KAAKujB,OAGlD/V,OAAOxM,GACLhB,KAAK6iB,UAAU/iB,QAAQib,aAAa/a,KAAKujB,MAAOviB,GAGlDnB,KAAK2G,GAEH,OADAxG,KAAK0jB,SAAS/R,KAAKnL,GACZxG,MAQX,MAAa2jB,GAKX9jB,YAAY6W,EAAsB5W,GAHjBE,YAAS,IAAI4X,IAI5B5X,KAAK6iB,UAAY,IAAIF,GAAmBjM,EAAI5W,GAG9CD,IAAI6G,GAEF,MAAMmR,EAAW7X,KAAK0Z,OAAOha,IAAIgH,GAEjC,GAAImR,EACF,OAAOA,EAGT,MAAMlK,EAAU,IAAI2V,GAAiBtjB,KAAK6iB,UAAWnc,GAIrD,OAFA1G,KAAK0Z,OAAOzB,IAAIvR,EAAMiH,GAEfA,GC3JX,MAAMiW,WAA2B/H,EAK/Bhc,YACqBgkB,EACAC,GAEnB1iB,QAHmBpB,cAAA6jB,EACA7jB,UAAA8jB,EALJ9jB,cAAW,IAAI+M,EACxB/M,aAAUyjB,IASlBjc,SACE,OAAOxH,KAAK0jB,SAASlc,GAGvB3H,KAAKN,GAEH,MAAMwkB,EAAgBxkB,EAAQG,IAAI2b,IAAgBK,OpBIiBlc,EoBJOQ,KAAK8jB,KpBK1E,CAAC/H,GAAuBvc,KADjC,IAAuEA,EoBFnEQ,KAAKgkB,QAAUD,EAAcpI,SAAS,CACpC3N,OAAQwD,IAAcL,QAAQ3K,GAAUxG,KAAK0jB,SAAS/R,KAAKnL,IAC3DyH,QAAS,CAACwK,EAAMmD,EAAOxT,EAAeC,IAAkBrI,KAAK0jB,SAASpW,KAAKlF,EAAUC,KAIzFmF,SACE,OAAOxN,KAAK6jB,SAAS7jB,KAAK8jB,MAG5BtW,OAAOxM,GACLhB,KAAK6jB,SAAS7jB,KAAK8jB,MAAQ9iB,EAG7BnB,KAAK2G,GAEH,OADAxG,KAAKgkB,QAAQvS,IAAIjL,GACVxG,MAQX,MAAaikB,GAKXpkB,YAA6BgkB,GAAA7jB,cAAA6jB,EAHZ7jB,YAAS,IAAI4X,IAM9B/X,KAAKN,GACHS,KAAK2S,SAAWpT,EAChBS,KAAKkkB,OAAOviB,QAAQwiB,GAAQA,EAAKlc,KAAK1I,IAGxCM,IAAOL,GAEL,MAAMqY,EAAW7X,KAAKkkB,OAAOxkB,IAAIF,GAEjC,GAAIqY,EACF,OAAOA,EAGT,MAAMlK,EAAU,IAAIiW,GAAqB5jB,KAAK6jB,SAAUrkB,GAOxD,OALIQ,KAAK2S,UACPhF,EAAQ1F,KAAKjI,KAAK2S,UAEpB3S,KAAKkkB,OAAOjM,IAAIzY,EAAKmO,GAEdA,GC5DX,MAAMyW,GAAqC5iB,OAAO,gBAKlD,MAAM6iB,GAKJxkB,YAA6B+iB,EAAgC9iB,GAAhCE,SAAA4iB,EAAgC5iB,aAAAF,EAC3DE,KAAK0Z,OAAS,IAAIiK,GAAef,EAAK9iB,GACtCE,KAAKkkB,OAAS,IAAID,GAAenkB,GAChCA,EAAgBskB,IAAuBpkB,KAExC,MAAMT,EAAWO,EAAgBgI,IAE7BvI,EACFS,KAAKskB,MAAM/kB,GAEXO,EAAQqiB,iBAAiB,kBAAmB7a,GAAStH,KAAKskB,MAAOhd,EAAyB/H,UAI9FA,cACE,OAAQS,KAAKF,QAAgBgI,IAG/ByX,aAEE,MAAMA,EAASvf,KAAKF,QAAQ+R,WAE5B,OAAO0N,GAAUgF,GAAcvkB,KAAK4iB,IAAKrD,GAG3C1f,OAAOqhB,EAAwC9D,GAC7C,OA8BJ,SACIxT,EACAsV,EACAgC,EACA9D,EAAwB,IAE1B,GAAIA,EAAKxX,IACP,OAAOib,GACHjX,EACAsV,EACAgC,EACA,CAACphB,EAAS0kB,IAAaD,GAAc3a,EAAW9J,EAAS0kB,GACzDpH,GAIN,MAAMjU,EAAUS,EAAUlK,IAAIgK,IAE9B,OAAOmX,GACHjX,EACAsV,EACAgC,EACA,CAACphB,EAAS0kB,IAAarb,EAAQrJ,IAAYykB,GAAc3a,EAAW9J,EAAS0kB,GAC7EpH,GArDKqH,CAAYzkB,KAAK4iB,IAAK5iB,KAAKF,QAASohB,EAAU9D,GAGvDvd,UAAU6G,GACR,OAAO1G,KAAK0Z,OAAOha,IAAIgH,GAGzB7G,SAAYL,GACV,OAAOQ,KAAKkkB,OAAOxkB,IAAIF,GAGjBK,MAAMN,GACZS,KAAKkkB,OAAOjc,KAAK1I,IAQrB,SAAgBglB,GAAc3a,EAA6B9J,EAAkB0kB,GAE3E,MAAM3M,EAA0B/X,EAAgBskB,IAEhD,OAAQvM,GAAY2M,EAAY3M,EAAW,IAAIwM,GAAYza,EAAW9J,GCnExE,MAAM4kB,GAA4C,CAChDvf,MAAOqW,GACP3b,MAAMwF,GACJA,EAAMuL,aAAa,CACjBzE,EAAGqU,GACH7J,GAAGpX,GACMglB,GAAchlB,EAAQG,IAAIR,IAAmBK,EAAQO,aAWpE,MAAa6kB,GAEX9f,WAAYA,MACV,OAAO6f,ICjBX,MAAME,OAAqC3lB,EAA6B,cAkBxE,MAAsB4lB,GAEpBzlB,WAAYA,KACV,OAAOwlB,GAmCTlE,IAAKA,KACH,OAAO1gB,KAAKwH,GAUdoR,IAAKA,KACH,OAAO5Y,KAAKiN,KAQdpN,OACEG,KAAK8kB,IAAI,GAQXjlB,UACEG,KAAK8kB,GAAG,GAoBVjlB,SACEG,KAAK8kB,MC/GT,MAAaC,GAAmCvjB,OAAO,cAWvD,MAAsBwjB,GAEpBD,IAAKA,MACH,OAAO/kB,MCbX,MAAsBilB,WAAyB9lB,GCD/C,MAAM+lB,OAAqCjmB,EACvC,cACA,CACEmB,UAAWf,GAAiBkB,GAAO,IAAI4kB,GAAW5kB,MAiCxD,SAAS6kB,GAAehQ,GACtB,OAAgB,MAATA,GAAkC,iBAAVA,EAAqB,CAAEiQ,KAAMjQ,GAAUA,EA3B5C,yBAiC5B,MAAa+P,GAaXtlB,YAA6B8S,GAAA3S,cAAA2S,EAJZ3S,cAAW,IAAI4X,IAExB5X,aAAU,EAGhB,MAAMK,EAASsS,EAASjT,IAAIS,IAE5BH,KAAKslB,UAAYjlB,EAAOG,SACxBR,KAAKulB,UAAYllB,EAAOmlB,SACxBxlB,KAAKylB,SAAWplB,EAAOqlB,QACvB1lB,KAAK2lB,KAAOC,KAAKC,OAAOC,KAAKC,WAjB/B3mB,WAAYA,KACV,OAAO8lB,GAmBTrlB,OAEE,MAAMwlB,KAAEA,GAASD,GAAeplB,KAAKylB,SAASrQ,OACxC4Q,EAAQhmB,KAAKimB,SAAS,CAC1BC,IAAK,IAAIC,IAAInmB,KAAKulB,UAAUa,MAC5Bf,KAAAA,EACAgB,MAAOrmB,KAAKslB,UAAUe,QASxB,OANArmB,KAAKsmB,SAASrO,IAAI+N,EAAM1Q,GAAI0Q,GAC5BA,EAAM5J,SAAS,KACb4J,EAAMO,MAAM,QACZvmB,KAAKylB,SAASe,aAAaxmB,KAAKymB,cAAcT,GAAQ,MAGjDA,EAGTnmB,SAAS2I,GACP,OAAO,IAAIke,GAAU1mB,KAAK2S,WAAY3S,KAAK2mB,QAASne,GAGtD3I,KACI+mB,EACAha,GAGF,MAAQia,MAAMR,MAAEA,EAAQ,GAAEH,IAAEA,IAAUU,EAEtC5mB,KAAKylB,SAASqB,UACV9mB,KAAKymB,cAAcG,GACnBP,EACAH,EAAIE,MAGRpmB,KAAK+mB,OAAO,OAAQH,EAASha,GAGvB/M,OACJmnB,EACAJ,EACAha,GAGF,MAAMqa,EAAYra,EAAQY,GAE1BxN,KAAKsmB,SAASrO,IAAI2O,EAAQtR,GAAIsR,GAE9B,IAEE,IAAK,IAAIM,EAAID,EAAUvlB,KAAMwlB,EAAGA,EAAIA,EAAExlB,KACpC1B,KAAKmnB,QAAQD,WAGfN,EAAQ3hB,KAAOgiB,EACfA,EAAUvlB,KAAOklB,EACjBA,EAAQxK,SAAS,KACf,IACE6K,EAAUG,gBAEVR,EAAQL,MAAMS,MAGlBpa,EAAQY,GAAKoZ,GAIjB/mB,QACI+mB,EACAha,GAGF,MAAMqa,EAAYra,EAAQY,IAClBqZ,MAAMR,MAAEA,EAAQ,GAAEH,IAAEA,IAAUU,EAEtC5mB,KAAKylB,SAASe,aACVxmB,KAAKymB,cAAcG,GACnBP,EACAH,EAAIE,MAGRpmB,KAAKsmB,SAASrO,IAAI2O,EAAQtR,GAAIsR,GAE9B,MAAM3hB,EAAOgiB,EAAUhiB,KAEnBA,IACF2hB,EAAQ3hB,KAAOA,EACfA,EAAKvD,KAAOklB,GAGdA,EAAQxK,SAAS,KACf,IACE6K,EAAUG,gBAEV,IACEpnB,KAAKmnB,QAAQF,WAEbL,EAAQL,MAAM,eAIpB3Z,EAAQY,GAAKoZ,EAGf/mB,SACIwnB,EACAza,GAGF,MAAMwI,MAAEA,GAAUiS,EAElB,GAAa,MAATjS,EAEF,OAA2B,MAAvBpV,KAAKylB,SAASrQ,MAETpV,KAAKsnB,YAAY1a,QAE1B,EAGF,MAAMqa,EAAYra,EAAQY,IACpB+Z,IAAEA,EAAGlC,KAAEA,EAAM/P,GAAIkS,GAAWpC,GAAehQ,GACjD,IAAIwR,EAEJ,MAAMa,EAAgBF,IAAQvnB,KAAK2lB,MAAkB,MAAV6B,EAAiBxnB,KAAKsmB,SAAS5mB,IAAI8nB,QAAUlkB,EA0BxF,OAxBImkB,EACFb,EAAUa,GAGVb,EAAU5mB,KAAKimB,SAAS,CACtBC,IAAK,IAAIC,IAAInmB,KAAKulB,UAAUa,MAC5Bf,KAAAA,EACAgB,MAAOrmB,KAAKslB,UAAUe,QAExBY,EAAUS,SAASd,EAAS,UAC5B5mB,KAAKsmB,SAASrO,IAAI2O,EAAQtR,GAAIsR,GAC9B5mB,KAAKylB,SAASe,aAAaxmB,KAAKymB,cAAcG,GAAU,KAG1DA,EAAQxK,SAAS,KACf,IACE6K,EAAUG,gBAEVR,EAAQL,MAAM,aAIlB3Z,EAAQY,GAAKoZ,EAENA,EAGF/mB,WAAW+M,GAChB,GAA2B,MAAvB5M,KAAKylB,SAASrQ,MAEhB,OAAOpV,KAAKsnB,YAAY1a,GAMrB/M,OAAO+M,EAAkCsZ,GAE9C,MAAMyB,EAAW/a,EAAQY,GACnByY,EAAW,IAAIS,GAAU1mB,KAAK2S,WAAY3S,KAAK2mB,uCAAcgB,EAASd,OAAMX,IAAAA,IAAOyB,GAMzF,OAJA3nB,KAAKsmB,SAASrO,IAAIgO,EAAS3Q,GAAI2Q,GAC/BjmB,KAAKylB,SAASe,aAAaxmB,KAAKymB,cAAcR,GAAW,GAAIC,EAAIE,MACjEpmB,KAAKsmB,SAAStO,OAAO2P,EAASrS,IAEvB1I,EAAQY,GAAKyY,EAGdpmB,YAAY+M,GAElB,MAAMqa,EAAYra,EAAQY,GACpBoZ,EAAU5mB,KAAKimB,SAAS,CAC5BC,IAAK,IAAIC,IAAInmB,KAAKulB,UAAUa,MAC5Bf,KAAM,KACNgB,MAAOrmB,KAAKslB,UAAUe,QAGxB,IACEY,EAAUS,SAASd,EAAS,iBAE5B5mB,KAAKylB,SAASe,aAAaxmB,KAAKymB,cAAcG,GAAU,IACxD5mB,KAAK+mB,OAAO,QAASH,EAASha,GAGhC,OAAOga,EAGD/mB,QAAQmmB,GACdhmB,KAAKsmB,SAAStO,OAAOgO,EAAM1Q,IAC3B0Q,EAAM4B,SAGA/nB,eAAcyV,GAAEA,EAAIuR,MAAMxB,KAAEA,KAClC,MAAO,CACLwC,wBAAgB,CACdN,IAAKvnB,KAAK2lB,KACVrQ,GAAAA,EACA+P,KAAAA,KAgBR,MAAaqB,GASX7mB,YACqB8S,EACR2C,EACT9M,EACA6J,GAHiBrS,cAAA2S,EACR3S,QAAAsV,EAPLtV,eAGAA,aAAsB6H,EAQ5B7H,KAAK8nB,QAAUzV,EAAQA,EAAMyV,QAAU,IAAIlQ,IAE3C,MAAMoO,EAAQhmB,KAEdA,KAAK6mB,KAAO,CACVX,IAAK1d,EAAO0d,IACZG,MAAO7d,EAAO6d,MACdhB,KAAM7c,EAAO6c,KACb0C,cACE,QAAS/B,EAAMgC,SAEjBC,cACE,WAAOjC,EAAMgC,SAEftoB,IAAIwoB,GACKlC,EAAMtmB,IAAIwoB,GAEnBroB,IAAIqoB,EAAK5J,GACP0H,EAAMmC,IAAID,EAAK5J,KAKrBze,IAAOqoB,GAEL,MAAME,EAAmDpoB,KAAK8nB,QAAQpoB,IAAIwoB,EAAInD,KAE9E,OAAOqD,GAAUA,EAAO1oB,MAG1BG,IAAUqoB,EAA0B5J,GAElC,MAAM+J,EAAQH,EAAInD,IACZqD,EAA6CpoB,KAAK8nB,QAAQpoB,IAAI2oB,GAEpE,GAAID,EAEF,OADAA,EAAOD,IAAI7J,GACJ8J,EAAO1oB,MAGhB,MAAMiQ,EAAW,IAAIzD,EAA8BlM,KAAK2S,UAQxD,MAAM2V,EAAYD,EAAMhQ,OAAOrY,KAAK6mB,KAAMvI,EAAO,IANjD,cAA2B2G,GAA3BplB,kCAEWG,SAA+B2P,EAAStD,YAAY3M,OAW/D,OALAM,KAAK8nB,QAAQ7P,IAAIoQ,EAAOC,GACpBtoB,KAAK6mB,KAAKoB,SAAWK,EAAU/B,OACjC+B,EAAU/B,MAAMvmB,KAAK6mB,KAAM,QAGtByB,EAAU5oB,MAGnBG,SAASgU,EAAemT,GACtB9c,EAAQlK,KAAK8nB,QAAQS,UAAW,EAAEF,EAAOD,MACvC,GAAIA,EAAOV,SAAU,CAEnB,MAAMc,EAAcJ,EAAOV,SAAS7T,EAAGgT,KAAMG,GAEzCwB,GACF3U,EAAGiU,QAAQ7P,IAAIoQ,EAAOG,MAM9B3oB,KAAK4oB,GACHve,EAAQlK,KAAK8nB,QAAQ/c,SAAUqd,GAAUA,EAAOM,MAAQN,EAAOM,KAAKD,IAGtE5oB,MAAMmnB,GACJhnB,KAAKgoB,UACL9d,EAAQlK,KAAK8nB,QAAQ/c,SAAUqd,GAAUA,EAAO7B,OAAS6B,EAAO7B,MAAMvmB,KAAK6mB,KAAMG,IAGnFnnB,QACEG,KAAKgoB,UACL9d,EAAQlK,KAAK8nB,QAAQ/c,SAAUqd,GAAUA,EAAOhB,OAASgB,EAAOhB,SAGlEvnB,SACEqK,EAAQlK,KAAK8nB,QAAQ/c,SAAUqd,GAAUA,EAAOR,QAAUQ,EAAOR,UACjE5nB,KAAK8nB,QAAQa,QAGf9oB,SAASqZ,GACPlZ,KAAK+iB,QAAU7J,EAGjBrZ,QAEE,MAAMqZ,EAASlZ,KAAK+iB,QAEpB/iB,KAAK+iB,QAAUlb,EACfqR,KC/WJ,MAAM0P,WACMlgB,EAKV7I,YAAY6G,GACVtF,MAAMsF,GACN1G,KAAK2I,MAAQ3I,KAAK4I,YACdC,IAEE,MAAMrI,SAAEA,GAAaqI,EAAKtJ,QAAQG,IAAIS,IAEtC,OAAO0I,EAAKC,KAAKC,KAAKC,KAClB,IAAIyU,KACF,GAAIA,EAAOvH,OACT,OAAOwH,GAOT,SACIhc,EACAslB,EACA9T,EACAW,GAGF,OAEA,SAASgV,EAASjL,EAAkBkL,GAElC,MAAMhL,EAAQL,EAAOG,GAErB,IAAKE,EACH,OAAOpc,EAAKonB,GAGdhL,EACI,EAEMoI,IAAK6C,EAAUD,EAAQ5C,IACvBG,MAAO2C,EAAYF,EAAQzC,MAC3BhB,KAAM4D,EAAWH,EAAQzD,MACJyD,IACtBD,EACDjL,EAAW,EACX,CACEsI,IAAK,IAAIC,IAAIN,OAAOkD,GAAUvoB,EAAS0oB,SACvC7C,MAAO2C,EACP3D,KAAM4D,EACNlB,cACE,OAAOe,EAAQf,SAEjBE,cACE,OAAOa,EAAQb,SAEjBvoB,IAAIwoB,GACKY,EAAQppB,IAAIwoB,GAErBroB,IAAIqoB,EAAK5J,GACPwK,EAAQX,IAAID,EAAK5J,MAIzB0I,EACA9T,EACA4V,GAvCCD,CAAS,EAAGhV,MAXrB,MAAMxK,EAAkB,IAA8CC,EAAS6f,IAE/E,OAAO5f,EAAeV,EAAKzI,UAAUiJ,IAAoBA,SA0DvExJ,KACIgJ,GAOF,IAAIW,EAOJ,OALAX,EAAKtJ,QAAQG,IACTM,KAAK2I,MACL,OAAQE,EAAO,CAAEY,GAAe,MAAXZ,EAAKY,GAAaH,EAAST,EAAKY,IAAMZ,EAAKY,SAAOnG,EAF3EuF,CAGGiV,GAAStU,EAAYsU,GAEjB,CAACpc,EAAMslB,EAAM9T,EAAMW,IAAOrK,EAAU9H,EAAMslB,EAAM9T,EAAMW,IAQjE,SAASsV,GACLznB,EACA0nB,EACAC,EACAxV,GAEFnS,EAAKmS,GAkCP,MAAayV,OACSV,GAAmB,oBCjJzC,MAAaW,WAAuBhhB,MAwBlC1I,YAAYkC,EAAcuD,GACxBlE,MAAMW,iCAAWuD,IAAMkkB,YAAY,KACnCxpB,KAAKgnB,KAAO1hB,EAAK0hB,KACjBhnB,KAAK6T,GAAKvO,EAAKuO,IAoCnB,MAAa4V,WAAuBlhB,MAwBlC1I,YAAYkC,EAAcuD,GACxBlE,MAAMW,iCAAWuD,IAAMkkB,YAAY,KACnCxpB,KAAKgnB,KAAO1hB,EAAK0hB,KACjBhnB,KAAKkT,KAAO5N,EAAK4N,KACjBlT,KAAK6T,GAAKvO,EAAKuO,IAiCnB,MAAa6V,WAAwBnhB,MA8BnC1I,YAAYkC,EAAcuD,GACxBlE,MAAMW,iCAAWuD,IAAMkkB,YAAY,KACnCxpB,KAAKkT,KAAO5N,EAAK4N,KACjBlT,KAAK6T,GAAKvO,EAAKuO,GACf7T,KAAKwG,OAASlB,EAAKkB,OA7BrBwgB,WACE,MAAO,iBCxJK2C,GAAiBpqB,GAE/B,MAAMc,EAASd,EAAQG,IAAIS,KACrBK,SAAEA,EAAQklB,QAAEA,GAAYrlB,EACxBupB,EAAa,IAAIniB,EAAmBpH,GACpCwpB,EAAatqB,EAAQG,IAAIylB,IACzBrH,EAAQve,EAAQG,IAAI4pB,IACpBQ,EAAUF,EAAWpiB,sBACrBuiB,EAAUH,EAAWpiB,sBACrBwiB,EAASJ,EAAWpiB,uBACpByiB,EAAU7c,EAAyB0c,EAASC,EAASC,GACrDE,EAAMrd,EAAsBgd,EAAWvkB,QAE7C4kB,EAAIjd,KAAKkd,GAAaA,EAAUtnB,SAEhC,MAAMunB,EAA+BF,EAAIjd,KAAKlE,KAAKC,KAAKgd,GAASA,EAAMa,MACvE,IAAInlB,EAAqB6C,QAAQC,UAEjColB,EAAWpiB,GAAkB,WAA7BoiB,CAAyCvC,IAEvC,MAAMrB,EAAQ6D,EAAWxC,SAASA,EAAU6C,GAExClE,GACF4D,EAAWviB,SAAS,IAAIkiB,qBAEpB,CACEvC,KAAwB,MAAlBK,EAASjS,MAAgB,SAAW,QAC1CvB,GAAImS,EAAMa,UAMpB+C,EAAWpiB,GAAG,aAAdoiB,CAA4B,KAE1B,MAAM5D,EAAQ6D,EAAWQ,WAAWH,GAEhClE,GACF4D,EAAWviB,SAAS,IAAIkiB,qBAEpB,CACEvC,KAAM,QACNnT,GAAImS,EAAMa,UAsDpB,OAAO,IAhDP,cAAyByD,GAEvBpU,aACE,OAAOwP,EAAQxP,OAGjB4T,cACE,OAAOA,EAGTC,cACE,OAAOA,EAGTC,aACE,OAAOA,EAGTxiB,SACE,OAAOyiB,EAGThd,WACE,OAAOmd,EAGTvqB,GAAG0qB,GACD7E,EAAQZ,GAAGyF,GAGb1qB,KAAK2I,GACH,OAAOqgB,EAAS,WAAY,OAAQrgB,GAGtC3I,QAAQ2I,GACN,OAAOqgB,EAAS,cAAe,UAAWrgB,GAG5C3I,OAAOqmB,GACL,OAAO2D,EAAW3Q,OAAOgR,EAAKM,EAAMtE,IAAMW,KAG5ChnB,KAAWqoB,EAA0B5J,GACnC,OAOJ,SAASmM,EAAUC,GACjB,MAAO,CACLnQ,KAAI,CAAS2N,EAA4B5J,IAChCmM,EAAUnoB,GAAeooB,EAAa7D,GAAQA,EAAKsB,IAAID,EAAK5J,KAErEqM,KAAKniB,GACIqgB,EAAS,WAAY,OAAQrgB,EAAQkiB,GAE9CE,QAAQpiB,GACCqgB,EAAS,cAAe,UAAWrgB,EAAQkiB,IAhB7CD,CAAU5D,GAAQA,EAAKsB,IAAID,EAAK5J,MAqB3C,SAASkM,EAAMtE,GACb,MAAmB,iBAARA,EACF,IAAIC,IAAID,EAAK1lB,EAAS0oB,SAExBhD,GAAOgE,EAAI1c,GAAGqZ,KAAKX,IAa5B,SAAS2C,EACLgC,EACA7D,EACAxe,EACAkiB,EAAoC7iB,GAGtC,MAAMijB,EAjBR,SAAqBtiB,GACnB,MAAsB,iBAAXA,GAAuBA,aAAkB2d,IAC3C,CAAED,IAAKsE,EAAMhiB,IAElBA,EAAO0d,eAAeC,IACjB3d,iCAEGA,IAAQ0d,IAAKsE,EAAMhiB,EAAO0d,OAUpB6E,CAAYviB,GACxBlE,EAAU5C,EAAOA,EAAKwT,KAAK8V,EAAYA,GAE7C,OAAO1mB,EAEP,SAAS0mB,IAEP,IAAIpE,OAAiCtjB,EAErC,IAEE,MAAM2nB,EAyBV,WACE,GAAIvpB,IAAS4C,EACX,OAAOokB,IAGT,MAAMzB,EAAYiD,EAAI1c,GAChBoZ,EAAUiD,EAAW5D,SAAS6E,GAEpC7D,EAAUS,SAASd,EAASiE,GAE5B,MAAMK,EAAY,IAAIzB,qBAElB,CACEzC,KAAM6D,EACN3X,KAAM+T,EAAUJ,KAChBhT,GAAI+S,EAAQC,OAKlB,GADA6D,EAAY9D,EAAQC,OACf+C,EAAWviB,SAAS6jB,IAAcxpB,IAAS4C,EAC9C,OAAOokB,EAAK9B,GAGd,IAAIuE,EAIJ,GAFArN,EAAMsN,GAAKD,EAAcC,EAAGP,EAAWK,EAAUhY,KAAMgY,EAAUrX,KAE5DsX,EACH,OAAOzC,EAAK9B,GAGd,OAAOA,EAzDYyE,GAEjB,OAAKJ,GAILrE,EAAUqE,EAEVpB,EAAW7C,GAAMJ,EAASsD,GAE1BN,EAAWviB,SAAS,IAAIkiB,qBAEpB,CACEvC,KAAAA,EACAnT,GAAI+S,EAAQC,QAIXD,EAAQC,MAfNoE,EAgBT,MAAO/D,GAEP,MADAwB,EAAK9B,EAASM,GACRA,GAuCV,SAASwB,EAAK9B,EAAqBpgB,GAcjC,OAbIogB,GACFA,EAAQ8B,KAAKwB,EAAI1c,GAAGqZ,MAGtB+C,EAAWviB,SAAS,IAAIqiB,sBAEpB,CACExW,KAAMgX,EAAI1c,GAAGqZ,KACbhT,GAAIiX,EACJtkB,OAAAA,KAIC,OCnOb,MAAM8kB,GAAyC,CAC7CzrB,MAAMwF,GACJA,EAAM/F,QAAQ,CAAE6M,EAAG0Y,GAAYlO,GAAIgT,OASvC,MAAa4B,GAEX1mB,WAAYA,MACV,OAAOymB,ICkBX,MAAME,GAAiC,CACrCxd,OAAQnG,GAaV,SAAgB4jB,GACZvmB,EAA2C,IAG7C,MAAMwd,OAAEA,EAAS,IAAGgJ,KAAEA,EAAO,CAAE9lB,KAAK,EAAMob,MAAM,IAAW9b,EAE3D,OAAO+B,GAAU,CACfd,QAAS,CACPhB,MAAO,CAACwf,GAAsB4G,KAEhC1rB,OAAOob,GACLA,EAAWjM,cAAczP,IAEvB,MAAMosB,EAgUd,SACIpsB,EACA2F,GAGF,MAAM0mB,EAAYrsB,EAAQG,IAAIiB,KACxBkrB,OAAEA,EAASC,IAA8B5mB,EACzC6mB,EAAcC,EAAYtlB,KAAKmlB,EAAQtsB,EAAQG,IAAIgB,KACnDirB,EAAWzmB,EAAIymB,SAAWzmB,EAAIymB,SAAS1jB,KAAK/C,GAAO2C,EAazD,OAAOgB,IAEL,MAAM/I,QAAEA,GAAY+I,EAAK9F,KACnBqZ,EAAWtc,EAAQmsB,MACjBnsB,EAAQmsB,IAAiCL,EAAU,CAAE7oB,KAAMjD,KAC7DosB,EAAcL,IAClBzP,EAAS,IAlBO,EAACyP,GAAmB9oB,KAAAA,MAEtC,MAAMjD,EAAmBiD,EAAKjD,SACxBqsB,UAAEA,GAAcrsB,EAElB+rB,EACFM,EAAUtqB,IAAIkqB,GAEdI,EAAUC,OAAOL,IAUFM,CAAYR,EAAQhjB,IACnC8iB,EAASE,EAAQhjB,IAKnB,IAAIyjB,EAEJ,OAJAJ,GAAW,GAIJ,CACLnpB,KAAM8F,EAAK9F,KACXlD,SAEE,MAAMmO,EAASse,EAAa9a,EAAY,KAClC8a,IAAete,GACjBke,GAAW,KAIf,OAAOle,KA7WUue,CAAgBhtB,EAAS2F,GACpCsnB,EA+Jd,SACItnB,GAEF,IAAKA,EAAIsnB,MACP,OAAOC,GAET,OAAO5jB,IAEL,MAAM6jB,EAASxnB,EAAIsnB,MAAO3jB,GAE1B,GAAsB,iBAAX6jB,EACT,OAAOpjB,EAAST,EAAK9F,KAAM2pB,GAG7B,IAAIC,EAAsC3K,EAAc0K,GAAQ3jB,KAAK0F,MACjEie,GAAUxf,EAASrE,EAAK9F,KAAM2pB,IAGlC,OAAOtZ,EAA4BtF,IACjC6e,EAAS,CACP3e,OAAQwD,IACHrM,MAAM2I,EAASE,QACfmD,QAAQ,KAEPwb,EAAWrjB,EAAST,EAAK9F,KAAM,GAC/B4pB,EAAS7e,KAEfG,QAASH,EAASG,QAAQhG,KAAK6F,QA1LjB8e,CAAc1nB,GACtB2nB,EAAattB,EAAQG,IAAImlB,IACzBiI,EAAgBvtB,EAAQG,IAAI8gB,IAElCjhB,EAAQ+R,OAAOyb,IAEb,IAAIlB,EAAwBL,GAE5BqB,EAAW5f,KAAKiT,QACZ2G,GAAQiG,EAAcpK,OAAOA,EAAQgJ,GAAMze,KAAKlE,KAAK0F,MACjDue,GAASzjB,EAAemL,KACjBsY,EAAMpX,IAAI7S,GAAQypB,EAAM,CAAEzpB,KAAAA,EAAMxD,QAAAA,EAASsnB,KAAAA,QAElD3G,QACE,IAAI+M,KAEF,MAAM7L,EA6H1B,SAA6B6L,GAE3B,IACIpB,EADAqB,EAAY,EAUhB,OAPAD,EAAQtrB,QAAQ,EAAEoB,EAAM2pB,MAClBA,EAASQ,IACXA,EAAYR,EACZb,EAAS9oB,KAIN8oB,EAzI4BsB,CAAoBF,GAQrC,OANK7L,EAEMA,IAAayK,EAAO9oB,OAC7B8oB,EAASF,EAAS,CAAE5oB,KAAMqe,EAAU7hB,QAAAA,EAASsnB,KAAAA,KAF7CgF,EAASL,GAKJK,EAAO7d,YAGtB7I,MAAM4nB,UAwKlB,SAASN,IACL1pB,KACEA,EAAI8jB,KACJA,IAIJ,MAAM/mB,EAAmBiD,EAAKjD,QACxBsmB,EAAOtmB,EAAQoa,aAAa,QAElC,GAAY,MAARkM,EACF,OAAO9c,EAASvG,GAAO,GAGzB,MAAMqqB,EAAU,IAAIjH,IAAIC,EAAMtmB,EAAQoQ,cAAegZ,SAErD,OAAO5f,EAASvG,EAMlB,SAASsqB,EAAkBD,EAAcE,GACvC,GAAIF,EAAQ/Z,SAAWia,EAAQja,OAC7B,OAAQ,EAGV,MAAMka,EAAUC,GAAgBJ,GAC1BK,EAAUD,GAAgBF,GAEhC,GAAIF,EAAQM,KACV,OAAIH,IAAYE,GACN,EAGNE,GAA0BP,EAASE,GAAW,GAAKK,GAA0BL,EAASF,GAAW,GAC3F,EAEHC,EAAkBO,GAAgBR,GAAUQ,GAAgBN,IAGrE,MAAMO,EAAoBF,GAA0BP,EAASE,GAE7D,GAAIO,EACF,OAAIA,EAAoB,GACd,EAENN,IAAYE,GACN,EAEHI,EAGT,IAAKJ,EAAQK,WAAWP,GACtB,OAAQ,EAGV,OAAOH,EAAQW,SAAS7X,OAzCFmX,CAAkBD,EAASvG,EAAKX,MA+CxD,SAASsH,GAAgBtH,GAEvB,MAAM7M,EAAO6M,EAAI6H,SAEjB,OAAO1U,EAAK2U,SAAS,KAAO3U,EAAOA,EAAO,IAM5C,SAASuU,GAAgB1H,GAEvB,IAAIwH,KAAEA,GAASxH,EAOf,OALAwH,EAAOA,EAAKO,UAAU,GACN,MAAZP,EAAK,KACPA,EAAO,IAAMA,GAGR,IAAIvH,IAAIuH,EAAMxH,GAMvB,SAASyH,IACHO,aAAcC,IACdD,aAAcE,IAGlB,IAAI1B,EAAS,EAeb,OAbAyB,EAAWxsB,QAAQ,CAAC0sB,EAAQ7uB,KAE1B,MAAM8uB,EAAa,IAAIhtB,IAAI8sB,EAAWG,OAAO/uB,IAEzCktB,GAAU,IACRyB,EAAWI,OAAO/uB,GAAKgvB,MAAMC,GAAaH,EAAWlpB,IAAIqpB,IAC3D/B,GAAU,EAEVA,GAAU,KAKTA,EAMT,MAAMT,GAA+CzqB,OAAO,4BAKtDsqB,GAA2C,CAAC,SAAUxO,IC5W5D,SAAgBoR,GACZxpB,EAA0C,IAG5C,MAAMkjB,EAASljB,EAAIkjB,OAASljB,EAAIkjB,OAAOngB,KAAK/C,GAAOypB,GAC7CC,EAAS,IAAI1tB,GAASgE,EAAIoC,OAAS,SAEzC,OAAOL,GAAU,CACfd,QAAS,CACPhB,MAAOomB,IAET1rB,OAAOob,GACLA,EAAWjM,cAAczP,IACvBA,EAAQ+R,OAAOyb,IAEb,MAAMF,EAAattB,EAAQG,IAAImlB,IAE/B+J,EAAOjtB,QAAQktB,IACbtvB,EAAQiI,GAAGqnB,EAAXtvB,CACI+H,GAASulB,EAAW5f,KAAKqD,KACrBuW,GAAQuB,EAAO,CACb9gB,MAAAA,EACAuf,KAAAA,EACAtnB,QAAAA,EACAstB,WAAAA,MAGR1nB,MAAM4nB,YAwDpB,SAAS4B,IACLrnB,MACEA,EAAKuf,KACLA,EAAIgG,WACJA,IAQJ,MAAMrkB,EAASlB,EAAMkB,OACf4d,EAAO5d,EAAO0R,aAAa,QAEjC,GAAY,MAARkM,EACF,OAGF,MAAMkH,EAAUzG,EAAKX,IACfA,EAAM,IAAIC,IAAIC,EAAM5d,EAAO0H,cAAegZ,SAE5ChD,EAAI7S,SAAWia,EAAQja,SAI3B/L,EAAMwnB,iBACFxB,EAAQlH,OAASF,EAAIE,MACvByG,EAAWlC,KAAKvE,IChIpB,SAmCgB2I,GACZ7b,EACAW,EACAmb,EACAC,EAAsDC,IAGxD,IAAIC,EAE0B,mBAAnBH,GACTC,EAAgBD,EAChBG,EAAS,MAETA,EAASH,GAAkB,KAG7B,MAAM/e,EAAM4D,EAAG3D,cAEf,GAAIpN,GAAUoQ,GAAO,CAEnB,MAAMkc,EAAenf,EAAIof,cAAcnc,EAAKoc,QAAQC,eAMpD,OAJArc,EAAKsc,oBAAoB7tB,QAAQ8tB,GAAQL,EAAarU,aAAa0U,EAAMvc,EAAKgH,aAAauV,KAC3FR,EAAc/b,EAAMkc,GACpBvb,EAAG6b,aAAaN,EAAcD,GAEvBC,EAGT,MAAMO,EAAY1f,EAAI8e,WAAW7b,GAAM,GAIvC,OAFAW,EAAG6b,aAAaC,EAAWR,GAEpBQ,EAST,SAAgBT,GAAkBhc,EAAYW,GAC5C3J,EACIC,EAAU+I,EAAK0c,YACf7sB,GAAQgsB,GAAWhsB,EAAM8Q,IC3E/B,SAAgBgc,GAAkBjc,GAEhC,IAAIwB,EAMJ,OAAOyR,IAEL,MAAMX,EAmEV,SAAiBW,GACf,OAAO,IAAIV,IAAI,GAAIU,EAAKX,KAAKE,KApEf0J,CAAQjJ,GAEpB,GAAIzR,EAAO,CACT,GAAIA,EAAM8Q,MAAQA,EAChB,OAAO9Q,EAAM5N,GAEf4N,EAAM2a,IAAIte,MAGZ,IAAIue,EAIJ,MAAMhiB,EAASwD,IAAcL,QAAQ,KACnCiE,OAAQ9R,EACR0sB,OAAU1sB,IAGNkE,EAAKqG,EAA8BC,IACvC,IAAKkiB,EAAS,CAEZ,MAAMC,EAASrc,EAAOiT,GAChBja,EAAUC,IACVqjB,EAAcD,EAAOE,IACzBvjB,EAAQY,GAAK2iB,IACZhf,QAAQ3K,IAEK,MAAVA,GACFwH,EAAOyD,IAAIjL,KAIfwH,EAAOmD,QAAQ3K,IACb0pB,EAAYze,IAAIjL,GAChBoG,EAAQ+E,KAAKnL,KAGfwpB,EAAU,CACRxoB,GAAIoF,EAAQK,KAAKwB,MACboQ,GAAYA,EAAW3R,EAAS2R,GAAY1R,KAEhDijB,IAAK,GAIT,MAAMC,EAAYL,EAIlB,QAFEK,EAAUD,IAELC,EAAU7oB,GAAGsG,GAAU3I,MAAM6I,GAAQmD,QAAQ3K,MAC3C6pB,EAAUD,KAEf7rB,QAAQC,UAAU0Q,KAAK,KAChBmb,EAAUD,KAAOC,IAAcL,GAClChiB,EAAOyD,IAAIjL,SASrB,OAFA4O,EAAQ,CAAE8Q,IAAAA,EAAK1e,GAAAA,EAAIuoB,IAAK/hB,GAEjBxG,GCtDX,MAAM8oB,WAA2BhqB,OAqB1B,MAAMiqB,GAAuE,IAnBpF,cAAoCvL,GAElCnlB,OACI2wB,EACAC,GAEF,MAAO,CACL/wB,IAAG,IACM+wB,EAETtI,IAAKtgB,KAcX,MAAa6oB,GAIX7wB,YACqB8wB,EACAC,GADA5wB,iBAAA2wB,EACA3wB,aAAA4wB,EAJJ5wB,UAAO,IAAI4X,IAO5BiZ,gBAEE,MAAMtjB,EAAgC,GAEtC,IAAK,MAAMoG,KAAW3T,KAAM,CAC1B,IAAK2T,EAAQmd,SACX,MAAO,GAETvjB,EAAOuF,KAAKa,EAAQmd,UAGtB,OAAOvjB,EAGT1N,CAAC2B,OAAOC,YACN,OAAO4gB,EAAYne,EAAUlE,KAAK8X,KAAK/M,WAGzClL,SAEE,MAAMmjB,EAAOhjB,KACP+wB,EAAavf,IACnB,IAAIwf,EAAavN,IAEjB,MAAO,CACL5jB,QACAA,IAAI8T,GACFqP,EAAKiO,KAAKtd,IAEZ9T,SAASgU,GAEP,MAAM2U,EAAcxF,EAAKkO,YAIzB,OAFArd,EAAGsU,IAAIoI,GAAuB/H,GAEvBA,EAAYJ,UAErBvoB,MAAMgnB,EAAYG,GAChB,GAAa,SAATA,EAEF,OAGFgK,EAAaxf,IAAcrM,MAAM4rB,GAEjC,MAAMd,EAASpiB,EAA8BsjB,IAE3C,MAAMrkB,EAAU,IAAIC,EACdiB,EAASlB,EAAQtF,GAAG2pB,GAa1B,OAXAnO,EAAK4N,QAAQ/J,EAAb7D,CAAmBnE,GAAY/R,EAAQQ,KAAKuR,IAAW1N,QAAQvM,SAC/CtB,IAAVsB,GAAyBA,aAAiB0rB,IAE5CxjB,EAAQQ,KAAK,CACX8jB,IAAI,EACJvK,KAAAA,EACAjiB,MAAAA,MAGHO,MAAM6rB,GAEFhjB,IACNoG,QAEHlK,EACI8Y,EACA,EAAG8N,SAAAA,EAAUhjB,SAAAA,KAgDzB,SACImiB,EACAa,GAEF,OAAOA,EACDb,EAAOxhB,MACLoQ,GAAYA,EAASuS,kCAEZvS,IACHiS,UACoB,MAAhBA,EAASO,IACPxS,EAASre,SAAS8wB,qBAAqBR,EAASO,KAAK,GACrDxS,EAASre,SAAS+wB,eAAeT,EAASxb,WAC3ChS,IAELub,GAERoR,EAjEgCuB,CAAWvB,EAAQa,EAAnBU,CAA6B,CACvDxjB,OAAQwD,IAAcrM,MAAM2I,EAASE,QACrCnO,QAAQN,EAASsf,GACf/Q,EAASG,QAAQ1O,EAASsf,QAKpChf,QACEmxB,EAAWvf,IAAI,IAAI6e,GAAmB,eAExCzwB,OACEkxB,EAAWtf,IAAI,IAAI6e,GAAmB,0BAExCzwB,SACEkxB,EAAWtf,IAAI,IAAI6e,GAAmB,qBAMpCzwB,KAAK8T,GAEX,MAAM8d,iCAAW9d,IAAS7F,SAAUoV,EAAcvP,EAAQ7F,aACpDE,OAAEA,GAAWyjB,EAAI3jB,SACjBmU,EAAOjiB,KAAK8X,KAAKpY,IAAIsO,GAEvBiU,EACFA,EAAKnP,KAAK2e,IAEVzxB,KAAK8X,KAAKG,IAAIjK,EAAQ,CAACyjB,IACvBzjB,EAAOmD,QAAQ,IAAMnR,KAAK8X,KAAKE,OAAOhK,KAIlCnO,YAEN,MAAM2oB,EAAc,IAAIkI,GAAiB1wB,KAAK2wB,YAAa3wB,KAAK4wB,SAEhE,IAAK,MAAO5iB,EAAQiU,KAASjiB,KAAK8X,KAAKyQ,UACrCC,EAAY1Q,KAAKG,IAAIjK,EAAQ/M,MAAMiS,KAAK+O,IAG1C,OAAOuG,GChHJ,MAAMkJ,OACSlU,GAAkC,mBCpC3CmU,OACS/wB,EAAa,gBAAiB,CAAER,UAAWwH,EAAcC,KCLlE+pB,OAAgC3yB,EACzC,cACA,CACEmB,UAAWf,IAIjB,SAAuBE,GAErB,MAAMc,EAASd,EAAQG,IAAIS,IACrB0xB,EAAYtyB,EAAQG,IAAI2e,IACxByT,EAAYvyB,EAAQG,IAAIiyB,IACxB7T,EAAQve,EAAQG,IAAIgyB,IACpBK,EAAoB,IAAK1xB,EAAe2xB,UAE9C,OAAOnL,IAEL,MAAMX,EAAM,IAAIC,IAAIU,EAAKX,IAAIE,MAE7B0L,EAAU5L,GAEV,MAAMvS,EAAU,IAAI4K,QAChB2H,EAAIE,KACJ,CACEhJ,KAAM,cACN6U,YAAa,cACbC,QAAS,IAAIC,QAAQ,CAAEC,OAAQ,gBAIrC,OAAOvkB,EAAUC,GAAYgQ,EAAMH,EAAOhK,EAAbmK,CAAsBhQ,IAEnD,SAAS6P,EAAM0U,GAGb,OA0CN,SAA8BxL,EAAYlT,SAExC,MAAMkd,YAAYhK,EAAKnnB,IAAI6wB,0BAAwBM,UAE/CA,GAAaA,EAAU3a,QACzBvC,EAAQue,QAAQja,IACZ,kBACAjT,EACI6rB,EACA,CAACyB,EAAQxB,KAAcwB,EAASA,EAAS,KAAO,KAC5B,MAAhBxB,EAASO,IACH,OAASkB,EAAUzB,EAASO,KAC5B,MAAQkB,EAAUzB,EAASxb,KAErC,KA1DNkd,CAAqB3L,EAAMwL,GAEpBxkB,EAA8BC,IAEnC,MAAM8b,EAAa,IAAI6I,EAEvB7I,EAAWpiB,GAAGsG,GACd8b,EAAWtc,KAAK,CAAEuZ,KAAAA,IAElB6L,EAAQb,EAAUQ,GAAc5jB,MAC5BoQ,GAAYta,QAAQqB,IAAI,CAACiZ,EAAUA,EAAS8T,WAC7ClkB,MACC,IAAImkB,IAAgCC,EAASD,GAC7C,EAAE/T,EAAU8T,MACV,IAAK9T,EAASuS,GACZ,MAAO,CACLA,IAAI,EACJvK,KAAAA,EACAhI,SAAAA,EACAja,MAAOia,EAAS5N,QAGpB,IACE,MAAO,CACLmgB,IAAI,EACJvK,KAAAA,EACAhI,SAAAA,EACAre,SAAUsyB,GAAkBf,EAAQ7L,EAAKrH,EAAU8T,IAErD,MAAO/tB,GACP,MAAO,CACLwsB,IAAI,EACJvK,KAAAA,EACAhI,SAAAA,EACAja,MAAAA,KAzBV8tB,CA6BE5kB,YA0BV,SAASglB,GAAkBf,EAAmB7L,EAAUrH,EAAoB8T,GAE1E,MAAM1iB,EAAM8hB,EAAOgB,gBACfJ,EACAK,EAAUnU,EAASqT,QAAQxyB,IAAI,iBAAmB,aAAa,GAAGuzB,GAGtE,GAAIhjB,EAAIijB,KAAM,CAEZ,MAAMC,EAAOljB,EAAIijB,KAAKE,cAAc,QAEpC,GAAID,EACFA,EAAK/M,KAAO,IAAID,IAAIgN,EAAKjZ,aAAa,QAAUgM,GAAKE,SAChD,CAEL,MAAMiN,EAAUpjB,EAAIof,cAAc,QAElCgE,EAAQjN,KAAOF,EAAIE,KAEnBnW,EAAIijB,KAAKI,YAAYD,IAIzB,OAAOpjB,EC7HT,MAAMsjB,WAAsBvO,GAE1BnlB,OAAOgnB,EAAYlT,EAA0BpU,GAE3C,MAAMkxB,EAAW,IAAIC,GAAiBnxB,EAAQG,IAAImlB,IAAagL,GAAkBtwB,EAAQG,IAAIkyB,MACvFxJ,EAASqI,EAASrI,SAKxB,OAHAvB,EAAKsB,IAAIoI,GAAuBE,GAChCrI,EAAOD,IAAIxU,GAEJyU,GAiBX,MAAaoL,OAAqED,GCpC5EE,OAA0Cx0B,EAC5C,oBACA,CACEmB,UAAWf,GAAiBE,GAAW,IAAIm0B,GAAgBn0B,MAYjE,MAAam0B,GASX7zB,YAAYN,GAEV,MAAMmP,EAAMilB,GAAOp0B,EAAQG,IAAIS,IAAiBK,UAEhD,GAAKkO,EAGE,CAEL,MAAMme,EAAattB,EAAQG,IAAImlB,IAE/B7kB,KAAK4zB,YAActqB,EAAS4c,GAAOA,EAAIgI,aAAajW,IAzBzB,oBAyBgDvJ,IAC3E1O,KAAK8d,MAAQxU,EACT,CAAC5H,EAAMiS,IAAYjS,EAAK,IAAI6c,QAAQ5K,EAAQuS,IAAKvS,IAC5ClF,MACGoQ,IACE,GAAIA,EAASuS,GAAI,CAEf,MAAMyC,EAASF,GAAO9U,EAASre,UAE/B,GAAIqzB,GAAUA,IAAWnlB,EAAK,CAE5B,MAAMwX,EAAM,IAAIC,IAAItH,EAASgI,KAAKX,IAAIE,MAEtCF,EAAIgI,aAAajW,IAtCR,oBAsC+B4b,GACxChH,EAAW3T,OAAOgN,GAClB2G,EAAWiH,UAIf,OAAOjV,UAzBrB7e,KAAK4zB,YAActqB,IACnBtJ,KAAK8d,MAAQxU,IAbjBlK,WAAYA,KACV,OAAOq0B,IA6CX,SAASE,GAAO1jB,SACd,iBAAOA,EAAImjB,cAAc,kDAA6BlZ,aAAa,WC/DrE,SAAgB6Z,GAAiBx0B,GAE/B,MAAM0Q,EAAM1Q,EAAQG,IAAIS,IAAiBK,SAEzC,OAAOkB,GAAQA,IAAO+M,MAClBoQ,IACE,GAAIA,EAASuS,GAAI,CAEf,MAAM4C,EAAa,IAAI1yB,IAAYwC,EAC/BmwB,GAAgBhkB,EAAK9F,EAAU8F,EAAIikB,UACnC,EAAEC,KAASA,IAGfjqB,EACIK,EACI0pB,GAAgBpV,EAASre,SAAU2J,EAAU0U,EAASre,SAAS+hB,iBAAiB,YAChF,EAAE4R,MAAUH,EAAW5uB,IAAI+uB,IAE/B,EAAEA,EAAKC,MACLrF,GAAWqF,EAAQnkB,EAAIijB,KAAM,CAAC7J,EAAOxV,IAAOA,EAAGsgB,IAAMA,GACrDH,EAAWnyB,IAAIsyB,KAIvB,OAAOtV,IAKf,SAASoV,GACLhkB,EACAikB,GAEF,OAAOpwB,EACHyG,EACI2pB,EACAE,KAAYA,EAAOD,KAEvBC,GAAU,CAAC,IAAIjO,IAAIiO,EAAOD,IAAKlkB,EAAIiZ,SAAS9C,KAAMgO,ICtCxD,SAAgBC,GAAe90B,GAE7B,MAAM0Q,EAAM1Q,EAAQG,IAAIS,IAAiBK,SAEzC,OAAOkB,GAAQA,IAAO+M,MAClBoQ,IACE,IAAKA,EAASuS,GACZ,OAAOvS,EAGT,MAAMyV,EAAYzV,EAASre,SAAS+hB,iBAAkC,wBAEtE,IAAK+R,EAAUpe,OACb,OAAO2I,EAGT,IAAIrW,EAAeyH,EAAIijB,KACnB/D,EAAsB,KAC1B,MAAMoF,EAAYtkB,EAAIsS,iBAAkC,wBAClDiS,EAAkB,IAAI5c,IACtB6c,EAAgBF,EAAU3yB,KAAK,GAwCrC,OAtCI6yB,IACFjsB,EAASisB,EAAc5iB,WACvBsd,EAASsF,EACTvqB,EACIC,EAAUoqB,GACVG,GAAQF,EAAgBvc,IAAI,IAAIkO,IAAIuO,EAAKtO,KAAMnW,EAAIiZ,SAAS9C,KAAMsO,KAIxExqB,EACIC,EAAUmqB,GACVK,IAEE,MAAMvO,EAAO,IAAID,IAAIwO,EAASvO,KAAMnW,EAAIiZ,SAAS9C,KAC3CwO,EAAWJ,EAAgB90B,IAAI0mB,GAEjCwO,GAEE1S,EAASsS,EAAgB3a,UAAYuM,GAGvC5d,EAASosB,EAAS/iB,WAClBsd,EAASyF,EAASC,aAGlBrsB,EAAOknB,aAAakF,EAAUzF,GAEhCqF,EAAgBxc,OAAOoO,IAGvB2I,GAAW4F,EAAUnsB,EAAQ2mB,EAAQ,CAAC9F,EAAOxV,IAAOA,EAAGuS,KAAOA,KAMtElc,EAAQsqB,EAAgBzpB,SAAU+pB,GAASA,EAAMjjB,WAAYE,YAAY+iB,IAElEjW,IC9Df,SAAgBkW,GAAex1B,GAE7B,MAAM0Q,EAAM1Q,EAAQG,IAAIS,IAAiBK,SAEzC,OAAOkB,GAAQA,IAAO+M,MAAMoQ,IAC1B,GAAIA,EAASuS,GAAI,CAEf,MAAM/K,EAAQxH,EAASre,SAAS8wB,qBAAqB,SAAS1vB,KAAK,GAE/DykB,GAASA,EAAM2O,cACjB/kB,EAAIoW,MAAQA,EAAM2O,aAItB,OAAOnW,ICJX,MAAMoW,GAAuC,CAC3C9vB,MAAOomB,GACP1rB,MAAMwF,GACJA,EAAM/F,QAAQ,CACZ6M,EAAGwlB,GACHhb,GAAKue,GAA4BA,EAAOtB,YACxCrZ,KAAM,CAACmZ,MAETruB,EAAM/F,QAAQ,CACZ6M,EAAGulB,GACH/a,GAAKue,GAA4BA,EAAOpX,MACxCvD,KAAM,CAACmZ,MAETruB,EAAM/F,QAAQ,CAAE6M,EAAGulB,GAAe/a,GAAIod,KACtC1uB,EAAM/F,QAAQ,CAAE6M,EAAGulB,GAAe/a,GAAI0d,KACtChvB,EAAM/F,QAAQ,CAAE6M,EAAGulB,GAAe/a,GAAIoe,OAqB1C,MAAaI,GAEXtwB,WAAYA,MACV,OAAOowB,ICpBX,SAAgBG,GACZlwB,EAAuC,IAGzC,MAAMmwB,EAAanwB,EAAImwB,WAAanwB,EAAImwB,WAAWptB,KAAK/C,GAAO2C,EAE/D,OAAOZ,GAAU,CACfd,QAAS,CACPhB,MAAOgwB,IAETt1B,OAAON,GACLA,EAAQyP,cAAczP,IAEpB,MAAMiB,EAAWjB,EAAQG,IAAIS,IAAiBK,SACxC4b,EAAW7c,EAAQG,IAAIiB,GAAZpB,GACXstB,EAAattB,EAAQG,IAAImlB,IACzByQ,EAAiB,KAErB,MAAMxE,SAAEA,GAAa5rB,EAErB,GAAI4rB,EACF,OAAOA,EAGT,MAAQhxB,SAASwV,GAAEA,EAAIga,QAAS+B,IAAgC9xB,EAEhE,OAAO+V,EAAK,CAAEA,GAAAA,GAAO,CAAE+b,IAAAA,IAGzB9xB,EAAQ+R,OAAOtD,IAEb,MAAMunB,EAAQ/0B,EAASg1B,cAEvBD,EAAME,mBAAmBl2B,EAAQ4I,aAEjC0kB,EAAW5f,KAAKqD,KAAKuW,IACnBA,EAAKsB,IACDqL,GACA,CACE1C,SAAUwE,IACVxnB,SAAU,CACRE,OAAAA,EACAC,QAAS,CAACwK,EAAMoG,IAM1B,SAAwBA,GAClBA,EAASuS,GACXhV,EAAS,KACPmZ,EAAMG,iBAEN,MAAMltB,EAAShI,EAASm1B,0BAClB7E,SAAEA,GAAajS,EAEjBiS,IACF5B,GAAkB4B,EAAUtoB,GAC5B+sB,EAAMK,WAAWptB,IAGnB6sB,EAAW,CAAE91B,QAAAA,EAASg2B,MAAAA,EAAO1W,SAAAA,MAG/BzC,EAAS,IAAMiZ,EAAW,CAAE91B,QAAAA,EAASg2B,MAAAA,EAAO1W,SAAAA,KAtBTgX,CAAehX,qBCjDnDiX,OACS72B,EAAyC,4BCdlD82B,OACSC,GAAqC,yBCJ9CC,OAAwC1Y,EACjD,8CACA,OACA,oBAMS2Y,OAAsEj3B,EAC/E,uBACA,CAAEmB,UAWN,SAAyB+1B,GAEvB,MAAMC,EAAUD,EAAcz2B,IAAIgB,IAC5BnB,EAAU42B,EAAcz2B,IAAIqI,IAC5BwD,EAAahM,EAAQG,IAAIkM,IAEzByqB,EAAQ,GADO9qB,EAAW7E,KAAO2E,EAAa3E,KAAK6E,EAAW7E,KAAM0vB,GAAW,iBAC1DE,KACrBC,EAAYN,GAAmBvvB,KAAK0vB,EAAQH,IAAqBI,EAAOrK,GAK9E,OAJgBzsB,EAAQO,QAEhBqsB,UAAUtqB,IAAI00B,GAEfA,KAjBT,IAAID,GAAiB,ECHrB,MAAME,OACgBv3B,EAAyC,iCAM/D,MAAa62B,GAMXj2B,YACqB8S,EACA8jB,EAAWC,IADX12B,cAAA2S,EACA3S,cAAAy2B,EANrBr3B,WAAYA,KACV,OAAOo3B,GAQT32B,QAAQ82B,EAAkB91B,EAAgC,IAExD,MAAMtB,EAAUS,KAAK2S,SACfkK,EAAatd,EAAQG,IAAIid,GAAmB,CAAElT,GAAI,OAExD,OAAOzJ,KAAKy2B,SAASE,iCAChB91B,IACHL,SAAUK,EAAQL,UAAYjB,EAAQG,IAAIS,IAAiBK,SAC3D+e,OAAQ1e,EAAQ0e,QAAUhgB,EAAQ4I,YAClCyuB,aAAc,GACdhL,UAAW/qB,EAAQ+qB,WAAarsB,EAAQG,IAAIiB,IAC5CsK,QAASpK,EAAQoK,SAAW1L,EAAQG,IAAIgB,IACxCub,OAGF,WAEE,MAAMA,OAAEA,GAAWpb,EACbg2B,EAAU,IAAI31B,GAAqB+a,GACpCpa,OAAOtC,EAAQG,IAAIq2B,KAClBe,EAAej2B,EAAQi2B,aACvBC,GAAal2B,EAAQi2B,cAAc,QACnCxzB,EAMN,OAJAuzB,EAAQh1B,IAAIgb,EACNma,GAAaF,GACbG,GAAeH,GAAgB,CAAEI,EAAG,CAAC33B,EAAQG,IAAIw2B,QAEhDW,EAAQ71B,MAhBPm2B,OAyBd,SAASH,GAAaF,GACpB,MAAO,CACLM,OAAQ,IACRv3B,OAAOw3B,EAAUC,GAEf,IAAIpW,SAAEA,GAAamW,EAEnB,GAAKnW,EAAShL,QAEP,GAAI4gB,EAAc,CAEvB,MAAOS,EAAMC,GAAQC,GAAoBvW,GAErCsW,IAEAtW,EADEsW,EAAKthB,OACI,CAAC,CAAEwhB,EAAG,CAAC,CAAC,IAAK,OAAQC,GAAmBH,EAAMV,SAAsBS,GAEpE,CAAC,CAAEG,EAAG,CAAC,CAAC,IAAK,OAAQ,CAACZ,SAAsBS,UAT3DrW,EAAW,CAAC4V,GAAgB,CAAEY,EAAG,CAAC,CAAC,IAAK,WAc1CL,EAASpb,OAAOqb,EAAY,CAAEpW,SAAAA,MAQpC,SAAS+V,GAAeH,GACtB,MAAO,CACLM,OAAQ,IACRv3B,OAAOw3B,EAAUC,GAEf,IAAIpW,SAAEA,GAAamW,EAEnB,GAAKnW,EAAShL,OAEP,CAEL,MAAOqhB,EAAMC,GAAQC,GAAoBvW,GAGvCA,EADEsW,GAAQA,EAAKthB,OACJ,IAAIyhB,GAAmBH,EAAMV,MAAkBS,GAE/C,CAACT,KAAiBS,QAR/BrW,EAAW,CAAC4V,GAYdO,EAASpb,OAAOqb,EAAY,CAAEpW,SAAAA,MAQpC,SAASuW,GACLvW,GAEF,GAA2B,iBAAhBA,EAAS,GAAiB,CAEnC,OAAO0W,GAAEA,EAAE1Q,EAAEA,EAAC2Q,EAAEA,EAACX,EAAEA,EAACQ,EAAEA,EAAC/0B,EAAEA,EAACm1B,EAAEA,MAAQC,GAAa7W,EAEjD,IAAK0W,IAAO1Q,IAAM2Q,IAAMX,IAAMv0B,GAAK+0B,EAAG,CAEpC,OAAQM,EAAQtxB,KAASuxB,IAAWP,EAEpC,GAAe,MAAXM,GAA2B,SAATtxB,EAAiB,CAErC,IAAI8wB,EASJ,OAPIS,EAAO/hB,QACTshB,EAAOv2B,MAAMiS,KAAK+kB,EAAO,IACxBT,EAAK,GAAWM,EAAIA,GAErBN,EAAOM,EAAI,CAAC,CAAEA,EAAAA,IAAO,GAGhB,CAACC,EAAWP,KAIzB,MAAO,CAACtW,GAMV,SAASyW,GACLzW,GACA0W,GACEA,EAAE1Q,EACFA,EAAC2Q,EACDA,EAACX,EACDA,EAACQ,EACDA,EAAC/0B,EACDA,IAIJ,MAAOJ,KAAUg1B,GAAQrW,EAEzB,MAAO,CACL,CACE0W,GAAIr1B,EAAM2kB,GAAK3kB,EAAMq1B,GAAKr1B,EAAMq1B,GAAKA,EACrC1Q,EAAG3kB,EAAM2kB,GAAK3kB,EAAMq1B,GAAKr1B,EAAM2kB,EAAIA,EACnC2Q,EAAGt1B,EAAMs1B,GAAKA,EACdX,EAAG30B,EAAM20B,EAAKA,EAAI,IAAI30B,EAAM20B,KAAMA,GAAK30B,EAAM20B,EAAiBA,EAC9DQ,EAAGn1B,EAAMm1B,EAAKA,EAAI,IAAIn1B,EAAMm1B,KAAMA,GAAKn1B,EAAMm1B,EAAiBA,EAC9D/0B,GAAKJ,EAAMI,GAAK,KAAOA,GAAK,UAAQW,EACpCw0B,EAAGv1B,EAAMu1B,MAERP,GCxLP,MAAMW,GAAiD,CACrDr4B,MAAMwF,GACJA,EAAMuL,aAAa,CAAE0J,GAAI6d,KACzB9yB,EAAMuL,aAAa,CACjBzE,EAAG2pB,GACHnf,GAAG0gB,GACM,CAACV,EAAO9tB,IAASwuB,EAASe,QAAQzB,EAAO9tB,GAElD0R,KAAM,CAAC4d,QAgBb,MAAaE,GAEXxzB,WAAYA,MACV,OAAOqzB,UCsBEI,GAAuB,CAWlCz4B,QACIN,EACAo3B,EACA91B,GAGF,MAAM03B,EAAMC,EAAc7B,GACpBza,EAAUrb,GAAWA,EAAQqb,QAC7Buc,EAAel5B,EAAQG,IAAIo2B,IAEjC,IACI4C,EADAC,EAAYlV,IAEhB,MAAMzV,EAASwD,EAAYhL,IACzBkyB,EAAiB7wB,EACjB8wB,EAAUlnB,IAAIjL,KAOhB,OAJAkyB,EAAiB,KACfC,EAAYF,EAAaF,EAAK13B,GAASsE,MAAM6I,IAGvCkO,GACR,IAAK,SACH3c,EAAQ4P,UAAUupB,GAClB,MACF,KAAK,EACHn5B,EAAQ+R,OAAOsnB,IACbF,IACAC,EAAUxzB,MAAMyzB,KAElB,MACF,QACEr5B,EAAQ+R,OAAOhB,KAAKooB,GAKtB,OAFAn5B,EAAQ6R,cAAc5K,GAAUwH,EAAOyD,IAAIjL,IAEpCwH,ICpFX,SAAgB6qB,GACZh4B,GAMF,MAAO,CAAC2H,EAAyBkS,KAE/B,MAAMzU,EAAgBuC,EAAOnG,YAE7B2E,GAAanB,OACTI,EACA,CACEpG,MAAMob,GACJA,EAAWjM,cAAcb,IACvBA,EAAiBgB,UAAU,EAAGW,UAAAA,MAE5B,MAAMgpB,EAAWhpB,EAAU4K,GAE3B4d,GAAqBF,QACjBjqB,EACoB,mBAAb2qB,EAA0BA,EAAS7wB,KAAK6H,GAAagpB,EAC5Dj4B,QAKVsF,QAAS,CACPhB,MAAO,CAACkzB,QCxCpB,MAAMU,GAA4C,CAChD3zB,IAAKizB,GACLx4B,MAAMwF,GACJA,EAAMuL,aAAa,CACjBzE,EAAGgsB,GACHxhB,GAAGpX,GACM,IAAI44B,GAAwB54B,EAASk5B,MAGhDpzB,EAAMuL,aAAa,CACjBzE,EAAG2pB,GACHnf,GAAG0gB,GACM,CAACV,EAAO9tB,IAASwuB,EAASe,QAAQzB,EAAO9tB,GAElD0R,KAAM,CAAC4d,QAgBb,MAAaa,GAEXn0B,WAAYA,MACV,OAAOk0B,ICnCX,MAAME,GAAa,IAAIh6B,EAAwB,SAU/C,MAAsBi6B,GAKpB95B,WAAYA,KACV,OAAO65B,GAmBTp5B,IAAiCs5B,GAC/B,OAAOA,EAASn5B,KAAKkf,OCrCzB,MAAMka,GAAoB,IAAIn6B,EAA+B,iBAE7D,MAAsBo6B,GAEpBj6B,WAAYA,KACV,OAAOg6B,ICgIX,MAAaE,GAAsD,IAlEnE,cAA4BC,EAE1B15B,cACEuB,MAAM,eAGRvB,KACIgJ,GAGF,MAAM2wB,EAAY,IAAI5hB,IAmCtB,OAjCA/O,EAAKC,KAAKnH,QAAQmzB,IAEhB,IAAIt1B,EACAi6B,EACAC,EAEiB,mBAAV5E,GACTt1B,EAAMi6B,EAAW3E,EACjB4E,GAAO,IAEPl6B,EAAMs1B,EAAMA,MACZ2E,EAAW3E,EAAMx1B,QAAQ2I,KAAK6sB,GAC9B4E,GAAO,GAGT,MAAMz0B,EAAOu0B,EAAU95B,IAAIF,GAE3B,GAAKyF,EAEE,CAEL,MAAO00B,EAAcC,GAAS30B,EAE9Bu0B,EAAUvhB,IACNzY,EACA,CACEk6B,EAAOG,GAAcJ,EAAUE,GAAgBE,GAAcF,EAAcF,GAC3EC,GAAQE,SATdJ,EAAUvhB,IAAIzY,EAAK,CAACi6B,EAAUC,MAe3BF,EAAUj4B,KAAOu4B,EAAOjxB,EAAKzI,UAAU,IAAM05B,GAEpD,SAASA,EAAKxkB,GAEZ,MAAMuC,EAAW2hB,EAAU95B,IAAI4V,GAE/B,IAAKuC,EACH,OAAOvC,EAGT,MAAOmkB,EAAUG,GAAS/hB,EAE1B,OAAO+hB,EAAQH,EAAWI,GAAcvkB,EAAImkB,MAclD,SAASI,GAAct3B,EAA4BC,GACjD,OAAOu3B,GAASC,EAAUz3B,EAAMw3B,GAAQv3B,EAAOu3B,IC9IjD,MAAab,WAAce,GAKzBp6B,YAA6Bq6B,GAC3B94B,QAD2BpB,aAAAk6B,EAHpBl6B,UAAiBm6B,KACTn6B,YAAS,IAAI4X,IAM9B/X,SAASu6B,GAEP,MAAML,EAAQ/5B,KAEd,OAAOw4B,KAAiB4B,EAAO7zB,QAE/B,SAAuBiC,EAAqBssB,GAE1C,MAAMjd,EAAWkiB,EAAMM,OAAO36B,IAAIo1B,GAElC,GAAIjd,EACFrP,EAAOsK,KAAK+E,OACP,CAEL,MAAMyiB,EAAcP,EAAMG,QAAQpF,EAAdiF,CAAqBA,GAEzCA,EAAMM,OAAOpiB,IAAI6c,EAAOwF,GACxB9xB,EAAOsK,KAAKwnB,GAGd,OAAO9xB,IAhByD,MCbtE,MAAa6wB,WAAqBkB,GAEhC16B,YAA6Bq6B,GAC3B94B,QAD2BpB,aAAAk6B,EAI7Br6B,WACE,OAAO,IAAIq5B,GAAMl5B,KAAKk6B,UCA1B,MAAMM,GAAoC,CACxCr1B,MAAOkzB,GACPx4B,MAAMwF,GACJA,EAAM/F,QAAQ,CAAE6M,EAAGktB,GAAc/e,GAAIigB,GAAehgB,KAAM,CAAC+e,MAC3Dj0B,EAAM/F,QAAQ,CACZ6M,EAAG+sB,GACHviB,GAAG9L,GACMA,EAAQ4vB,WAEjBlgB,KAAM,CAAC8e,QAUb,MAAaqB,GAEX71B,WAAYA,MACV,OAAO21B,ICVX,MAAMG,WACMjyB,EAEVC,YACE,OAAO3I,KAGTH,cACEuB,MAAM,sBAGRvB,KACIgJ,GAOF,MAAMoC,EAAUpC,EAAKtJ,QAAQG,IAAIgB,IAEjC,OAAO6S,EAAS,CACdqY,UAAW/iB,EAAKtJ,QAAQG,IAAIiB,GAAuBvB,GAAoBuJ,OACvEiyB,IAAK/xB,EAAKC,OACTC,KAAKC,KACJ,EACI4iB,WAAYA,GACZgP,IAAAA,KACEC,MACCD,EACHE,GAAkBjnB,GAAG+X,GACrBmP,GAAmBlnB,GAAG5I,YAUrB+vB,OACSL,GCzBTM,OACSC,GACd,iBACA,CACE96B,UAAW,WAerB,SAAgB+6B,GACZjc,EACAkc,GAGF,MAAM3pB,EAAMyN,EAAKxf,IAAIugB,IAAkB3gB,QAAQ,CAC7C6M,EAAG8uB,GACHtkB,GAAI,MACFuI,KAAAA,EACAkc,QAAAA,MAIJ,OAAO5pB,EAAYC,GAAKtM,MAAMi2B,EAAQC,OAAOC,KCvD/C,SAAgBC,GACZC,GAEF,OAAOv0B,GAAU,CACfpH,OAAOob,GACLA,EAAWjM,cAAczP,IAEvB,MAAMogB,GAAEA,GAAOpgB,EAAQG,IAAIugB,IAE3B1M,EAAS,CACPgM,OAAQI,EAAG5W,KAAK0F,MACZ4R,GAASA,EAAQ9W,EAAe8W,EAAM3gB,IAAIu7B,KAAqBvd,EAA4B,KAE/F+d,QAASl8B,EAAQG,IAAIs7B,MACpBjyB,KAAK0F,MACJ,EACE8Q,QAAS6b,GACTK,SAAUA,OAEV,GAAIL,EAAQA,QAAS,CAEnB,MAAMM,EAAYF,EAAQ,CAAEJ,QAAAA,EAAS77B,QAAAA,EAASk8B,QAAAA,IAE9C,GAAIC,EACF,OAAOA,aAAqBC,GACtBzuB,EAASwuB,GACTnyB,EAAemyB,GAIzB,OAAOxuB,MAEXgT,QACE,CAACkb,EAAiCptB,KAChC,IAAKotB,EACH,OAGF,MAAMQ,EAAcT,GAAiB57B,EAAS67B,GAI9C,OAFCptB,GAAUotB,EAAQC,OAAOC,KAAWn2B,MAAMy2B,GAEpCA"}